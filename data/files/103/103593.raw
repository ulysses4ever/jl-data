# This file autogenerated through https://github.com/timholy/SnoopCompile.jl.  Precompile every day!
function _precompile_()
    ccall(:jl_generating_output, Cint, ()) == 1 || return nothing
    if VERSION >= v"0.6-"
        # call() overloading was removed in v0.6
        precompile(Nettle.Decryptor, (Compat.ASCIIString, Vector{UInt8},))
        precompile(Nettle.HMACState, (Compat.ASCIIString, Vector{UInt8},))
        precompile(Nettle.CipherType, (Nettle.NettleCipher,))
        precompile(Nettle.HashType, (Nettle.NettleHash, Ptr{Void},))
        precompile(Nettle.Encryptor, (Compat.ASCIIString, Vector{UInt8},))
        precompile(Nettle.Hasher, (Compat.ASCIIString,))
        precompile(Nettle.HMACState, (Compat.ASCIIString, Compat.ASCIIString,))
        precompile(Nettle.HashType, (Compat.ASCIIString, UInt32, UInt32, UInt32, Ptr{Void}, Ptr{Void}, Ptr{Void}, Ptr{Void},))
        precompile(Nettle.CipherType, (Compat.ASCIIString, UInt32, UInt32, UInt32, Ptr{Void}, Ptr{Void}, Ptr{Void}, Ptr{Void},))
    else
        precompile(Nettle.call, (Type{Nettle.Decryptor}, Compat.ASCIIString, Vector{UInt8},))
        precompile(Nettle.call, (Type{Nettle.HMACState}, Compat.ASCIIString, Vector{UInt8},))
        precompile(Nettle.call, (Type{Nettle.CipherType}, Nettle.NettleCipher,))
        precompile(Nettle.call, (Type{Nettle.HashType}, Nettle.NettleHash, Ptr{Void},))
        precompile(Nettle.call, (Type{Nettle.Encryptor}, Compat.ASCIIString, Vector{UInt8},))
        precompile(Nettle.call, (Type{Nettle.Hasher}, Compat.ASCIIString,))
        precompile(Nettle.call, (Type{Nettle.HMACState}, Compat.ASCIIString, Compat.ASCIIString,))
        precompile(Nettle.call, (Type{Nettle.HashType}, Compat.ASCIIString, UInt32, UInt32, UInt32, Ptr{Void}, Ptr{Void}, Ptr{Void}, Ptr{Void},))
        precompile(Nettle.call, (Type{Nettle.CipherType}, Compat.ASCIIString, UInt32, UInt32, UInt32, Ptr{Void}, Ptr{Void}, Ptr{Void}, Ptr{Void},))
    end
    precompile(Nettle.encrypt!, (Nettle.Encryptor, Vector{UInt8}, Vector{UInt8},))
    precompile(Nettle.decrypt!, (Nettle.Decryptor, Vector{UInt8}, Vector{UInt8},))
    precompile(Nettle.digest!, (Nettle.HMACState,))
    precompile(Nettle.get_cipher_types, ())
    precompile(Nettle.get_hash_types, ())
    precompile(Nettle.digest!, (Nettle.Hasher,))
    precompile(Nettle.get_libnettle_version, ())
    precompile(Nettle.update!, (Nettle.HMACState, Vector{UInt8},))
    precompile(Nettle.update!, (Nettle.Hasher, Compat.ASCIIString,))
    precompile(Nettle.decrypt, (Compat.ASCIIString, Vector{UInt8}, Vector{UInt8},))
    precompile(Nettle.update!, (Nettle.HMACState, Compat.ASCIIString,))
    precompile(Nettle.encrypt, (Compat.ASCIIString, Vector{UInt8}, Vector{UInt8},))
    precompile(Nettle.hexdigest!, (Nettle.Hasher,))
    precompile(Nettle.__init__, ())
end
