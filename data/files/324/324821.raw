# This file is part of Kpax3. License is MIT.

##############
# Exceptions #
##############
@test_throws Kpax3DomainError NucleotideData("data/proper_nt.fasta",
                                             miss=['\0', '?'], t=0)
@test_throws Kpax3DomainError NucleotideData("data/proper_nt.fasta", l=-1, t=0)

@test_throws Kpax3FASTAError NucleotideData("data/empty_file.fasta", t=0)
@test_throws Kpax3FASTAError NucleotideData("data/no_1st_seq.fasta", t=0)
@test_throws Kpax3FASTAError NucleotideData("data/no_id_char.fasta", t=0)
@test_throws Kpax3FASTAError NucleotideData("data/no_nth_seq.fasta", t=0)

@test_throws TypeError NucleotideData("data/utf8_id.fasta", t=0)
@test_throws TypeError NucleotideData("data/utf8_seq.fasta", t=0)

@test_throws Kpax3DomainError AminoAcidData("data/proper_nt.fasta",
                                            miss=['\0', '?'], t=0)
@test_throws Kpax3DomainError AminoAcidData("data/proper_nt.fasta", l=-1, t=0)

@test_throws Kpax3FASTAError AminoAcidData("data/empty_file.fasta", t=0)
@test_throws Kpax3FASTAError AminoAcidData("data/no_1st_seq.fasta", t=0)
@test_throws Kpax3FASTAError AminoAcidData("data/no_id_char.fasta", t=0)
@test_throws Kpax3FASTAError AminoAcidData("data/no_nth_seq.fasta", t=0)

@test_throws TypeError AminoAcidData("data/utf8_id.fasta", t=0)
@test_throws TypeError AminoAcidData("data/utf8_seq.fasta", t=0)

#################################
# FASTA file filled with blanks #
#################################
nt = NucleotideData("data/blanks.fasta", t=0)
@test nt.data == UInt8[0x00 0x01;
                       0x01 0x00;
                       0x01 0x00;
                       0x00 0x01;
                       0x00 0x01;
                       0x01 0x00;
                       0x01 0x00;
                       0x00 0x01;
                       0x01 0x00;
                       0x00 0x01;
                       0x00 0x01;
                       0x01 0x00]
@test nt.id == ASCIIString["ID1", "ID5"]
@test nt.ref == UInt8[0x01, 0x04, 0x03, 0x1d, 0x1d, 0x1d,
                      0x03, 0x1d, 0x1d, 0x01, 0x1d, 0x01]
@test nt.val == [0x01, 0x03, 0x01, 0x03, 0x02, 0x03,
                 0x02, 0x03, 0x01, 0x03, 0x02, 0x03]
@test nt.key == [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]

nt = NucleotideData("data/blanks.fasta", l=1, t=0)
@test nt.data == UInt8[0x00 0x01;
                       0x01 0x00;
                       0x01 0x00;
                       0x00 0x01;
                       0x00 0x01;
                       0x01 0x00;
                       0x01 0x00;
                       0x00 0x01;
                       0x01 0x00;
                       0x00 0x01;
                       0x00 0x01;
                       0x01 0x00]
@test nt.id == ASCIIString["ID1", "ID5"]
@test nt.ref == UInt8[0x01, 0x04, 0x03, 0x1d, 0x1d, 0x1d,
                      0x03, 0x1d, 0x1d, 0x01, 0x1d, 0x01]
@test nt.val == [0x01, 0x03, 0x01, 0x03, 0x02, 0x03,
                 0x02, 0x03, 0x01, 0x03, 0x02, 0x03]
@test nt.key == [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]

aa = AminoAcidData("data/blanks.fasta", t=0)
@test aa.data == UInt8[0x00 0x01;
                       0x01 0x00;
                       0x01 0x00;
                       0x00 0x01;
                       0x00 0x01;
                       0x01 0x00;
                       0x01 0x00;
                       0x00 0x01;
                       0x01 0x00;
                       0x00 0x01;
                       0x00 0x01;
                       0x01 0x00]
@test aa.id == ASCIIString["ID1", "ID5"]
@test aa.ref == UInt8[0x01, 0x04, 0x03, 0x1d, 0x1d, 0x1d,
                      0x03, 0x1d, 0x1d, 0x01, 0x1d, 0x01]
@test aa.val == [0x01, 0x03, 0x01, 0x03, 0x02, 0x03,
                 0x02, 0x03, 0x01, 0x03, 0x02, 0x03]
@test aa.key == [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]

aa = AminoAcidData("data/blanks.fasta", l=1, t=0)
@test aa.data == UInt8[0x00 0x01;
                       0x01 0x00;
                       0x01 0x00;
                       0x00 0x01;
                       0x00 0x01;
                       0x01 0x00;
                       0x01 0x00;
                       0x00 0x01;
                       0x01 0x00;
                       0x00 0x01;
                       0x00 0x01;
                       0x01 0x00]
@test aa.id == ASCIIString["ID1", "ID5"]
@test aa.ref == UInt8[0x01, 0x04, 0x03, 0x1d, 0x1d, 0x1d,
                      0x03, 0x1d, 0x1d, 0x01, 0x1d, 0x01]
@test aa.val == [0x01, 0x03, 0x01, 0x03, 0x02, 0x03,
                 0x02, 0x03, 0x01, 0x03, 0x02, 0x03]
@test aa.key == [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]

#########################
# Proper DNA FASTA file #
#########################
nt = NucleotideData("data/proper_nt.fasta", t=0)
@test nt.data == UInt8[0x00 0x00 0x00 0x00 0x00 0x01;
                       0x01 0x01 0x01 0x01 0x01 0x00;
                       0x00 0x00 0x01 0x00 0x01 0x01;
                       0x01 0x01 0x00 0x01 0x00 0x00;
                       0x01 0x01 0x00 0x00 0x00 0x00;
                       0x00 0x00 0x00 0x01 0x01 0x00;
                       0x00 0x00 0x00 0x01 0x01 0x01;
                       0x01 0x01 0x01 0x00 0x00 0x00;
                       0x00 0x00 0x01 0x00 0x00 0x00;
                       0x01 0x00 0x00 0x01 0x00 0x01;
                       0x00 0x01 0x00 0x00 0x01 0x00;
                       0x01 0x01 0x01 0x00 0x00 0x00;
                       0x00 0x00 0x00 0x01 0x01 0x00;
                       0x00 0x00 0x00 0x00 0x00 0x01;
                       0x01 0x01 0x00 0x00 0x01 0x01;
                       0x00 0x00 0x01 0x01 0x00 0x00;
                       0x00 0x01 0x00 0x00 0x01 0x00;
                       0x01 0x00 0x01 0x01 0x00 0x01]
@test nt.id == ASCIIString["ID1", "ID2", "ID3", "ID4", "ID5", "ID6"]
@test nt.ref == UInt8[0x01, 0x1d, 0x03, 0x1d, 0x1d, 0x1d,
                      0x03, 0x1d, 0x1d, 0x1d, 0x1d, 0x01]
@test nt.val == [0x02, 0x04, 0x01, 0x03, 0x01, 0x03, 0x02, 0x03, 0x01,
                 0x02, 0x03, 0x01, 0x03, 0x04, 0x01, 0x04, 0x02, 0x03]
@test nt.key == [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 8, 8]

nt = NucleotideData("data/proper_nt.fasta", l=1, t=0)
@test nt.data == UInt8[0x00 0x00 0x00 0x00 0x00 0x01;
                       0x01 0x01 0x01 0x01 0x01 0x00;
                       0x00 0x00 0x01 0x00 0x01 0x01;
                       0x01 0x01 0x00 0x01 0x00 0x00;
                       0x01 0x01 0x00 0x00 0x00 0x00;
                       0x00 0x00 0x00 0x01 0x01 0x00;
                       0x00 0x00 0x00 0x01 0x01 0x01;
                       0x01 0x01 0x01 0x00 0x00 0x00;
                       0x00 0x00 0x01 0x00 0x00 0x00;
                       0x01 0x00 0x00 0x01 0x00 0x01;
                       0x00 0x01 0x00 0x00 0x01 0x00;
                       0x01 0x01 0x01 0x00 0x00 0x00;
                       0x00 0x00 0x00 0x01 0x01 0x00;
                       0x00 0x00 0x00 0x00 0x00 0x01;
                       0x01 0x01 0x00 0x00 0x01 0x01;
                       0x00 0x00 0x01 0x01 0x00 0x00;
                       0x00 0x01 0x00 0x00 0x01 0x00;
                       0x01 0x00 0x01 0x01 0x00 0x01]
@test nt.id == ASCIIString["ID1", "ID2", "ID3", "ID4", "ID5", "ID6"]
@test nt.ref == UInt8[0x01, 0x1d, 0x03, 0x1d, 0x1d, 0x1d,
                      0x03, 0x1d, 0x1d, 0x1d, 0x1d, 0x01]
@test nt.val == [0x02, 0x04, 0x01, 0x03, 0x01, 0x03, 0x02, 0x03, 0x01,
                 0x02, 0x03, 0x01, 0x03, 0x04, 0x01, 0x04, 0x02, 0x03]
@test nt.key == [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 8, 8]

# consider all characters
nt = NucleotideData("data/proper_nt.fasta", miss=['\0'], t=0)
@test nt.data == UInt8[0x00 0x00 0x00 0x00 0x00 0x01;
                       0x01 0x01 0x01 0x01 0x01 0x00;
                       0x00 0x00 0x01 0x00 0x01 0x01;
                       0x01 0x01 0x00 0x01 0x00 0x00;
                       0x01 0x01 0x00 0x00 0x00 0x00;
                       0x00 0x00 0x00 0x01 0x01 0x00;
                       0x00 0x00 0x01 0x00 0x00 0x01;
                       0x00 0x00 0x00 0x01 0x01 0x01;
                       0x01 0x01 0x01 0x00 0x00 0x00;
                       0x00 0x00 0x01 0x00 0x00 0x00;
                       0x01 0x00 0x00 0x01 0x00 0x01;
                       0x00 0x01 0x00 0x00 0x01 0x00;
                       0x01 0x01 0x01 0x00 0x00 0x00;
                       0x00 0x00 0x00 0x01 0x01 0x00;
                       0x00 0x00 0x00 0x00 0x00 0x01;
                       0x01 0x01 0x00 0x00 0x01 0x01;
                       0x00 0x00 0x01 0x01 0x00 0x00;
                       0x00 0x01 0x00 0x00 0x01 0x00;
                       0x01 0x00 0x01 0x01 0x00 0x01;
                       0x01 0x00 0x01 0x01 0x01 0x01;
                       0x00 0x01 0x00 0x00 0x00 0x00]
@test nt.id == ASCIIString["ID1", "ID2", "ID3", "ID4", "ID5", "ID6"]
@test nt.ref == UInt8[0x01, 0x1d, 0x03, 0x1d, 0x1d, 0x1d,
                      0x03, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d]
@test nt.val == [0x02, 0x04, 0x01, 0x03, 0x01, 0x03, 0x1c, 0x02, 0x03, 0x01,
                 0x02, 0x03, 0x01, 0x03, 0x04, 0x01, 0x04, 0x02, 0x03, 0x01,
                 0x1c]
@test nt.key == [1, 1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 8, 8, 9, 9]

#############################
# Proper Protein FASTA file #
#############################
aa = AminoAcidData("data/proper_aa.fasta", t=0)
@test aa.data == UInt8[0x00 0x00 0x00 0x00 0x00 0x01;
                       0x01 0x01 0x01 0x01 0x01 0x00;
                       0x00 0x00 0x01 0x00 0x01 0x01;
                       0x01 0x01 0x00 0x01 0x00 0x00;
                       0x01 0x01 0x00 0x00 0x00 0x00;
                       0x00 0x00 0x00 0x01 0x01 0x00;
                       0x01 0x01 0x01 0x00 0x00 0x00;
                       0x00 0x00 0x00 0x01 0x01 0x01;
                       0x00 0x00 0x01 0x00 0x00 0x00;
                       0x01 0x00 0x00 0x01 0x00 0x01;
                       0x00 0x01 0x00 0x00 0x01 0x00;
                       0x00 0x00 0x00 0x00 0x00 0x01;
                       0x01 0x01 0x01 0x00 0x00 0x00;
                       0x00 0x00 0x00 0x01 0x01 0x00;
                       0x01 0x01 0x00 0x00 0x01 0x01;
                       0x00 0x00 0x01 0x01 0x00 0x00;
                       0x01 0x01 0x00 0x01 0x00 0x00;
                       0x00 0x00 0x01 0x00 0x01 0x01]
@test aa.id == ASCIIString["ID1", "ID2", "ID3", "ID4", "ID5", "ID6"]
@test aa.ref == UInt8[0x0e, 0x1d, 0x01, 0x1d, 0x1d, 0x1d,
                      0x14, 0x1d, 0x1d, 0x1d, 0x1d, 0x0f]
@test aa.val == [0x09, 0x0d, 0x0b, 0x0d, 0x0c, 0x14, 0x0c, 0x14, 0x02, 0x04,
                 0x0c, 0x09, 0x0c, 0x0e, 0x02, 0x13, 0x01, 0x04]
@test aa.key == [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 8, 8]

aa = AminoAcidData("data/proper_aa.fasta", l=1, t=0)
@test aa.data == UInt8[0x00 0x00 0x00 0x00 0x00 0x01;
                       0x01 0x01 0x01 0x01 0x01 0x00;
                       0x00 0x00 0x01 0x00 0x01 0x01;
                       0x01 0x01 0x00 0x01 0x00 0x00;
                       0x01 0x01 0x00 0x00 0x00 0x00;
                       0x00 0x00 0x00 0x01 0x01 0x00;
                       0x01 0x01 0x01 0x00 0x00 0x00;
                       0x00 0x00 0x00 0x01 0x01 0x01;
                       0x00 0x00 0x01 0x00 0x00 0x00;
                       0x01 0x00 0x00 0x01 0x00 0x01;
                       0x00 0x01 0x00 0x00 0x01 0x00;
                       0x00 0x00 0x00 0x00 0x00 0x01;
                       0x01 0x01 0x01 0x00 0x00 0x00;
                       0x00 0x00 0x00 0x01 0x01 0x00;
                       0x01 0x01 0x00 0x00 0x01 0x01;
                       0x00 0x00 0x01 0x01 0x00 0x00;
                       0x01 0x01 0x00 0x01 0x00 0x00;
                       0x00 0x00 0x01 0x00 0x01 0x01]
@test aa.id == ASCIIString["ID1", "ID2", "ID3", "ID4", "ID5", "ID6"]
@test aa.ref == UInt8[0x0e, 0x1d, 0x01, 0x1d, 0x1d, 0x1d,
                      0x14, 0x1d, 0x1d, 0x1d, 0x1d, 0x0f]
@test aa.val == [0x09, 0x0d, 0x0b, 0x0d, 0x0c, 0x14, 0x0c, 0x14, 0x02, 0x04,
                 0x0c, 0x09, 0x0c, 0x0e, 0x02, 0x13, 0x01, 0x04]
@test aa.key == [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 8, 8]

# consider all characters
aa = AminoAcidData("data/proper_aa.fasta", miss=['\0'], t=0)
@test aa.data == UInt8[0x00 0x00 0x00 0x00 0x00 0x01;
                       0x01 0x01 0x01 0x01 0x01 0x00;
                       0x00 0x00 0x01 0x00 0x01 0x01;
                       0x01 0x01 0x00 0x01 0x00 0x00;
                       0x01 0x01 0x00 0x00 0x00 0x00;
                       0x00 0x00 0x00 0x01 0x01 0x00;
                       0x00 0x00 0x01 0x00 0x00 0x01;
                       0x01 0x01 0x01 0x00 0x00 0x00;
                       0x00 0x00 0x00 0x01 0x01 0x01;
                       0x00 0x00 0x01 0x00 0x00 0x00;
                       0x01 0x00 0x00 0x01 0x00 0x01;
                       0x00 0x01 0x00 0x00 0x01 0x00;
                       0x00 0x00 0x00 0x00 0x00 0x01;
                       0x01 0x01 0x01 0x00 0x00 0x00;
                       0x00 0x00 0x00 0x01 0x01 0x00;
                       0x01 0x01 0x00 0x00 0x01 0x01;
                       0x00 0x00 0x01 0x01 0x00 0x00;
                       0x01 0x01 0x00 0x01 0x00 0x00;
                       0x00 0x00 0x01 0x00 0x01 0x01;
                       0x01 0x00 0x01 0x01 0x01 0x01;
                       0x00 0x01 0x00 0x00 0x00 0x00]
@test aa.id == ASCIIString["ID1", "ID2", "ID3", "ID4", "ID5", "ID6"]
@test aa.ref == UInt8[0x0e, 0x1d, 0x01, 0x1d, 0x1d, 0x1d,
                      0x14, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d]
@test aa.val == [0x09, 0x0d, 0x0b, 0x0d, 0x0c, 0x14, 0x1c, 0x0c, 0x14, 0x02,
                 0x04, 0x0c, 0x09, 0x0c, 0x0e, 0x02, 0x13, 0x01, 0x04, 0x0f,
                 0x1c]
@test aa.key == [1, 1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 8, 8, 9, 9]

####################
# Input and Output #
####################
nt = NucleotideData("data/proper_nt.fasta", t=0)

# TODO: Test expection when saving to a location without writing permissions
save("../build/nt.jld", nt)
@test isfile("../build/nt.jld")

@test_throws SystemError loadnt("../build/non_existent.file")

nt = loadnt("../build/nt.jld")

@test isa(nt, NucleotideData)
@test nt.data == UInt8[0x00 0x00 0x00 0x00 0x00 0x01;
                       0x01 0x01 0x01 0x01 0x01 0x00;
                       0x00 0x00 0x01 0x00 0x01 0x01;
                       0x01 0x01 0x00 0x01 0x00 0x00;
                       0x01 0x01 0x00 0x00 0x00 0x00;
                       0x00 0x00 0x00 0x01 0x01 0x00;
                       0x00 0x00 0x00 0x01 0x01 0x01;
                       0x01 0x01 0x01 0x00 0x00 0x00;
                       0x00 0x00 0x01 0x00 0x00 0x00;
                       0x01 0x00 0x00 0x01 0x00 0x01;
                       0x00 0x01 0x00 0x00 0x01 0x00;
                       0x01 0x01 0x01 0x00 0x00 0x00;
                       0x00 0x00 0x00 0x01 0x01 0x00;
                       0x00 0x00 0x00 0x00 0x00 0x01;
                       0x01 0x01 0x00 0x00 0x01 0x01;
                       0x00 0x00 0x01 0x01 0x00 0x00;
                       0x00 0x01 0x00 0x00 0x01 0x00;
                       0x01 0x00 0x01 0x01 0x00 0x01]
@test nt.id == ASCIIString["ID1", "ID2", "ID3", "ID4", "ID5", "ID6"]
@test nt.ref == UInt8[0x01, 0x1d, 0x03, 0x1d, 0x1d, 0x1d,
                      0x03, 0x1d, 0x1d, 0x1d, 0x1d, 0x01]
@test nt.val == [0x02, 0x04, 0x01, 0x03, 0x01, 0x03, 0x02, 0x03, 0x01,
                 0x02, 0x03, 0x01, 0x03, 0x04, 0x01, 0x04, 0x02, 0x03]
@test nt.key == [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 8, 8]

aa = AminoAcidData("data/proper_aa.fasta", t=0)

# TODO: Test expection when saving to a location without writing permissions
save("../build/aa.jld", aa)
@test isfile("../build/aa.jld")

@test_throws SystemError loadaa("../build/non_existent.file")

aa = loadaa("../build/aa.jld")
@test isa(aa, AminoAcidData)
@test aa.data == UInt8[0x00 0x00 0x00 0x00 0x00 0x01;
                       0x01 0x01 0x01 0x01 0x01 0x00;
                       0x00 0x00 0x01 0x00 0x01 0x01;
                       0x01 0x01 0x00 0x01 0x00 0x00;
                       0x01 0x01 0x00 0x00 0x00 0x00;
                       0x00 0x00 0x00 0x01 0x01 0x00;
                       0x01 0x01 0x01 0x00 0x00 0x00;
                       0x00 0x00 0x00 0x01 0x01 0x01;
                       0x00 0x00 0x01 0x00 0x00 0x00;
                       0x01 0x00 0x00 0x01 0x00 0x01;
                       0x00 0x01 0x00 0x00 0x01 0x00;
                       0x00 0x00 0x00 0x00 0x00 0x01;
                       0x01 0x01 0x01 0x00 0x00 0x00;
                       0x00 0x00 0x00 0x01 0x01 0x00;
                       0x01 0x01 0x00 0x00 0x01 0x01;
                       0x00 0x00 0x01 0x01 0x00 0x00;
                       0x01 0x01 0x00 0x01 0x00 0x00;
                       0x00 0x00 0x01 0x00 0x01 0x01]
@test aa.id == ASCIIString["ID1", "ID2", "ID3", "ID4", "ID5", "ID6"]
@test aa.ref == UInt8[0x0e, 0x1d, 0x01, 0x1d, 0x1d, 0x1d,
                      0x14, 0x1d, 0x1d, 0x1d, 0x1d, 0x0f]
@test aa.val == [0x09, 0x0d, 0x0b, 0x0d, 0x0c, 0x14, 0x0c, 0x14, 0x02, 0x04,
                 0x0c, 0x09, 0x0c, 0x0e, 0x02, 0x13, 0x01, 0x04]
@test aa.key == [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 8, 8]
