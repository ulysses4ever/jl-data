##
## ngrams and skipgrams
##

function bigrams{S}(tokens::Array{S})
    len = length(tokens)
    grams = Array{S}[]
    for (i, tkn) in enumerate(tokens)
        if i<= len-1
            push!(grams, tokens[i:i+1])
        end
    end
    return grams
end

function trigrams{S}(tokens::Array{S})
    len = length(tokens)
    grams = Array{S}[]
    for (i, tkn) in enumerate(tokens)
        if i<= len-2
            push!(grams, tokens[i:i+2])
        end
    end
    return grams
end

function ngrams{S}(n::Int, tokens::Array{S})
    len = length(tokens)
    grams = Array{S}[]
    for (i, tkn) in enumerate(tokens)
        if i <= len-n+1
            push!(grams, tokens[i:i+n-1])
        end
    end
    return grams
end

function skipgrams{T}(n::Int, skip::Int, tokens::Array{T})
    grams = Array{T, 1}[]
    pool = tuple(tokens...)
    len = length(pool)
    indices = [1:n]

    if n > len
        return grams
    end

    gram = [pool[i] for i in indices]
    push!(grams, gram)

    while true
        broken = false
        i_holder = n # placeholder
        for i = n:-1:1
            i_holder = i

            if indices[i] != (i + len - n)
                broken = true
                break
            end
        end
        if !broken
            return grams
        end

        i = i_holder
        indices[i] += 1

        for j in i+1:n
            indices[j] = indices[j-1] + 1
        end

        nskips = 0
        for idx = 1:n-1
            nskips += (indices[idx+1] - indices[idx] - 1)
        end
        if nskips <= skip
            push!(grams, [pool[i] for i in indices])
        end
    end

    return grams
end
