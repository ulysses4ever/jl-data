#!/usr/bin/env julia
# coding: utf-8

include("MyModule.jl")






###############################################################################
###############################################################################
###############################################################################
###############################################################################
###############################################################################
###############################################################################
module logger

	function log(message)
		println(message)
	end

end






###############################################################################
###############################################################################
###############################################################################
###############################################################################
###############################################################################
###############################################################################
module util

	function parse_int(value)
		try
			parseint(value)
		catch
			0
		end
	end

	function parse_float(value)
		try
			float64(value)
		catch
			0
		end
	end

end










###############################################################################
###############################################################################
###############################################################################
###############################################################################
###############################################################################
###############################################################################
module main

	using MyModule
	using logger
	using util

	function _on_exit()
		println("--- exit ---")
	end

	function _test_decimal(value)
		println("" * string(value) * "=(" * string(util.parse_float(value)) * ")")
	end

	function _main()

		started = time()

		logger.log("### start ###")

		#
		# 終了時に呼び出されるハンドラを設定できる
		#
		atexit(_on_exit)

		#
		# 繰り返し操作
		#
		for i = 1:100
			if 93 <= i
				break
			end
			println("ループ:" * string(i))
		end

		#
		# 文字列表現の数値化
		#
		_test_decimal("123")
		_test_decimal("123.456")
		_test_decimal("123.")
		_test_decimal("aaaaaaaaaaaaaaa")
		_test_decimal("100000000000000000000000.0")

		#
		# Bool があるっぽい(true/false)
		#
		logger.log(true)
		logger.log(false)

		#
		# 自分のモジュールの操作
		#
		MyModule.run()

		ended = time()
		elapsed = ended - started

		logger.log("処理時間=[" * string(elapsed) * "]")
		logger.log("--- end ---")

	end

end


main._main()

