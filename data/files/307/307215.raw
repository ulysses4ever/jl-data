include("loadTest.jl")
include("mathNN.jl")
include("saveNN.jl")

(init, test, output) = promptTest()
(ni, nh, no, Theta1, Theta2) = loadInit(init)
(X, y) = loadData(test)
pred = predict(X,Theta1,Theta2)

contingencyVals = contingencyTable(pred, y)
for i=1:no
        (tp, tn, fp, fn) = contingencyVals[i,:]
        for j=1:4
                print(output, contingencyVals[i,j])
                print(output, ' ')
        end
        prec = precision(tp,fp)
        rec = recall(tp, fn)
        writeFloat(output, accuracy(tp, tn, fp, fn))
        print(output, ' ')
        writeFloat(output,prec)
        print(output, ' ')
        writeFloat(output,rec)
        print(output, ' ')
        writeFloat(output, F1(prec, rec))
        print(output, '\n')
end

(tp, tn, fp, fn) = sum(contingencyVals,1)
prec = precision(tp,fp)
rec = recall(tp, fn)
writeFloat(output, accuracy(tp, tn, fp, fn))
print(output, ' ')
writeFloat(output, prec)
print(output, ' ')
writeFloat(output, rec)
print(output, ' ')
writeFloat(output, F1(prec, rec))
print(output, '\n')
(tp, tn, fp, fn)= mean(contingencyVals,1)
prec = precision(tp,fp)
rec = recall(tp, fn)
writeFloat(output, accuracy(tp, tn, fp, fn))
print(output, ' ')
writeFloat(output, prec)
print(output, ' ')
writeFloat(output, rec)
print(output, ' ')
writeFloat(output, F1(prec, rec))
