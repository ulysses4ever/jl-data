### AR(2) process: x_t = φ_1*x_{t-1}+φ_2*x_{t-2}+ε_t,  ε_t ~ Normal(0, 1)

ar2(xtm2::Float64, xtm1::Float64, φ1::Float64, φ2::Float64) = φ1*xtm1+φ2*xtm2+randn()

function curved_bernoulli_3d(x::Float64, y::Float64)
  z::Float64 = 0

  if (0 <= y < 0.5) && (0 <= x < 0.5)
    z = (2*y)^(1+x)
  elseif (0 <= y < 0.5) && (0.5 <= x <= 1)
    z = (2*y)^(2-x)
  elseif (0.5 <= y <= 1) && (0 <= x < 0.5)
    z = (2*y-1)^(1+x)
  elseif (0.5 <= y <= 1) && (0.5 <= x <= 1)
    z = (2*y-1)^(2-x)
  else
    error("Arguments out of function's domain")
  end

  return z
end

function curved_binary(x::Float64, p::Float64=0.999)
  if 0 <= x < 0.5
    return 1-(1-2*x)^p
  elseif 0.5 <= x <= 1.0
    return 1-(2-2*x)^p
  else
    error("Argument out of function's domain")
  end
end

logistic(x::Float64) = 4*x*(1-x)
