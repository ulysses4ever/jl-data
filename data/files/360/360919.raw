# Julia wrapper for header: ../../deps/RealDouble/petsc-3.6.0/include/petsc.h
# Automatically generated using Clang.jl wrap_c, version 0.0.0


function PetscAbsScalar(arg0::Type{Float32},a::Float32)
    err = ccall((:PetscAbsScalar,petscRealSingle),PetscReal,(Float32,),a)
    return err
end

function PetscIsInfOrNanReal(arg0::Type{Float32},arg1::Float32)
    err = ccall((:PetscIsInfOrNanReal,petscRealSingle),PetscErrorCode,(Float32,),arg1)
    return err
end

function PetscIsNormalReal(arg0::Type{Float32},arg1::Float32)
    err = ccall((:PetscIsNormalReal,petscRealSingle),PetscBool,(Float32,),arg1)
    return err
end

function PetscIsInfOrNanScalar(arg0::Type{Float32},v::Float32)
    err = ccall((:PetscIsInfOrNanScalar,petscRealSingle),PetscErrorCode,(Float32,),v)
    return err
end

function PetscIsNormalScalar(arg0::Type{Float32},v::Float32)
    err = ccall((:PetscIsNormalScalar,petscRealSingle),PetscErrorCode,(Float32,),v)
    return err
end

function PetscPowInt(arg0::Type{Float32},base::Integer,power::Integer)
    err = ccall((:PetscPowInt,petscRealSingle),PetscInt,(Int64,Int64),base,power)
    return err
end

function PetscPowRealInt(arg0::Type{Float32},base::Float32,power::Integer)
    err = ccall((:PetscPowRealInt,petscRealSingle),PetscReal,(Float32,Int64),base,power)
    return err
end

function PetscPowScalarInt(arg0::Type{Float32},base::Float32,power::Integer)
    err = ccall((:PetscPowScalarInt,petscRealSingle),PetscScalar,(Float32,Int64),base,power)
    return err
end

function PetscPowScalarReal(arg0::Type{Float32},base::Float32,power::Float32)
    err = ccall((:PetscPowScalarReal,petscRealSingle),PetscScalar,(Float32,Float32),base,power)
    return err
end

function PetscSetHelpVersionFunctions(arg0::Type{Float32},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscSetHelpVersionFunctions,petscRealSingle),PetscErrorCode,(Ptr{Void},Ptr{Void}),arg1,arg2)
    return err
end

function PetscCommDuplicate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{MPI_Comm},StridedArray{MPI_Comm},Ptr{MPI_Comm},Ref{MPI_Comm}},arg3::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:PetscCommDuplicate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{comm_type},Ptr{Cint}),arg1,arg2,arg3)
    return err
end

function PetscCommDestroy(arg0::Type{Float32},arg1::Union{Ptr{MPI_Comm},StridedArray{MPI_Comm},Ptr{MPI_Comm},Ref{MPI_Comm}})
    err = ccall((:PetscCommDestroy,petscRealSingle),PetscErrorCode,(Ptr{comm_type},),arg1)
    return err
end

function PetscMallocSet(arg0::Type{Float32},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscMallocSet,petscRealSingle),PetscErrorCode,(Ptr{Void},Ptr{Void}),arg1,arg2)
    return err
end

function PetscMallocClear(arg0::Type{Float32})
    err = ccall((:PetscMallocClear,petscRealSingle),PetscErrorCode,())
    return err
end

#= skipping function with undefined symbols: 
 function PetscMallocDump(arg0::Type{Float32},arg1::Union{Ptr{FILE},StridedArray{FILE},Ptr{FILE},Ref{FILE}})
    ccall((:PetscMallocDump,petscRealSingle),PetscErrorCode,(Ptr{FILE},),arg1)
end 
=#
#= skipping function with undefined symbols: 
 function PetscMallocDumpLog(arg0::Type{Float32},arg1::Union{Ptr{FILE},StridedArray{FILE},Ptr{FILE},Ref{FILE}})
    ccall((:PetscMallocDumpLog,petscRealSingle),PetscErrorCode,(Ptr{FILE},),arg1)
end 
=#
function PetscMallocGetCurrentUsage(arg0::Type{Float32},arg1::Union{Ptr{PetscLogDouble},StridedArray{PetscLogDouble},Ptr{PetscLogDouble},Ref{PetscLogDouble}})
    err = ccall((:PetscMallocGetCurrentUsage,petscRealSingle),PetscErrorCode,(Ptr{PetscLogDouble},),arg1)
    return err
end

function PetscMallocGetMaximumUsage(arg0::Type{Float32},arg1::Union{Ptr{PetscLogDouble},StridedArray{PetscLogDouble},Ptr{PetscLogDouble},Ref{PetscLogDouble}})
    err = ccall((:PetscMallocGetMaximumUsage,petscRealSingle),PetscErrorCode,(Ptr{PetscLogDouble},),arg1)
    return err
end

function PetscMallocDebug(arg0::Type{Float32},arg1::PetscBool)
    err = ccall((:PetscMallocDebug,petscRealSingle),PetscErrorCode,(PetscBool,),arg1)
    return err
end

function PetscMallocGetDebug(arg0::Type{Float32},arg1::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscMallocGetDebug,petscRealSingle),PetscErrorCode,(Ptr{PetscBool},),arg1)
    return err
end

function PetscMallocValidate(arg0::Type{Float32},arg1::Integer,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscMallocValidate,petscRealSingle),PetscErrorCode,(Cint,Cstring,Cstring),arg1,arg2,arg3)
    return err
end

function PetscMallocSetDumpLog(arg0::Type{Float32})
    err = ccall((:PetscMallocSetDumpLog,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscMallocSetDumpLogThreshold(arg0::Type{Float32},arg1::PetscLogDouble)
    err = ccall((:PetscMallocSetDumpLogThreshold,petscRealSingle),PetscErrorCode,(PetscLogDouble,),arg1)
    return err
end

function PetscMallocGetDumpLog(arg0::Type{Float32},arg1::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscMallocGetDumpLog,petscRealSingle),PetscErrorCode,(Ptr{PetscBool},),arg1)
    return err
end

#= skipping function with undefined symbols: 
 function PetscDataTypeToMPIDataType(arg0::Type{Float32},arg1::PetscDataType,arg2::Union{Ptr{MPI_Datatype},StridedArray{MPI_Datatype},Ptr{MPI_Datatype},Ref{MPI_Datatype}})
    ccall((:PetscDataTypeToMPIDataType,petscRealSingle),PetscErrorCode,(PetscDataType,Ptr{MPI_Datatype}),arg1,arg2)
end 
=#
#= skipping function with undefined symbols: 
 function PetscMPIDataTypeToPetscDataType(arg0::Type{Float32},arg1::MPI_Datatype,arg2::Union{Ptr{PetscDataType},StridedArray{PetscDataType},Ptr{PetscDataType},Ref{PetscDataType}})
    ccall((:PetscMPIDataTypeToPetscDataType,petscRealSingle),PetscErrorCode,(MPI_Datatype,Ptr{PetscDataType}),arg1,arg2)
end 
=#
function PetscDataTypeGetSize(arg0::Type{Float32},arg1::PetscDataType,arg2::Union{Ptr{Csize_t},StridedArray{Csize_t},Ptr{Csize_t},Ref{Csize_t}})
    err = ccall((:PetscDataTypeGetSize,petscRealSingle),PetscErrorCode,(PetscDataType,Ptr{Csize_t}),arg1,arg2)
    return err
end

function PetscDataTypeFromString(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{PetscDataType},StridedArray{PetscDataType},Ptr{PetscDataType},Ref{PetscDataType}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscDataTypeFromString,petscRealSingle),PetscErrorCode,(Cstring,Ptr{PetscDataType},Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function PetscBitMemcpy(arg0::Type{Float32},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg2::Integer,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Integer,arg5::Integer,arg6::PetscDataType)
    err = ccall((:PetscBitMemcpy,petscRealSingle),PetscErrorCode,(Ptr{Void},Int64,Ptr{Void},Int64,Int64,PetscDataType),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscMemmove(arg0::Type{Float32},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Csize_t)
    err = ccall((:PetscMemmove,petscRealSingle),PetscErrorCode,(Ptr{Void},Ptr{Void},Csize_t),arg1,arg2,arg3)
    return err
end

function PetscMemcmp(arg0::Type{Float32},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Csize_t,arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscMemcmp,petscRealSingle),PetscErrorCode,(Ptr{Void},Ptr{Void},Csize_t,Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function PetscStrlen(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Csize_t},StridedArray{Csize_t},Ptr{Csize_t},Ref{Csize_t}})
    err = ccall((:PetscStrlen,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Csize_t}),arg1,arg2)
    return err
end

function PetscStrToArray(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::UInt8,arg3::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}},arg4::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}})
    err = ccall((:PetscStrToArray,petscRealSingle),PetscErrorCode,(Cstring,UInt8,Ptr{Cint},Ptr{Ptr{Ptr{UInt8}}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscStrToArrayDestroy(arg0::Type{Float32},arg1::Integer,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscStrToArrayDestroy,petscRealSingle),PetscErrorCode,(Cint,Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PetscStrcmp(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscStrcmp,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function PetscStrgrt(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscStrgrt,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function PetscStrcasecmp(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscStrcasecmp,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function PetscStrncmp(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Csize_t,arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscStrncmp,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Csize_t,Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function PetscStrcpy(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscStrcpy,petscRealSingle),PetscErrorCode,(Cstring,Cstring),arg1,arg2)
    return err
end

function PetscStrcat(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscStrcat,petscRealSingle),PetscErrorCode,(Cstring,Cstring),arg1,arg2)
    return err
end

function PetscStrncat(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Csize_t)
    err = ccall((:PetscStrncat,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Csize_t),arg1,arg2,arg3)
    return err
end

function PetscStrncpy(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Csize_t)
    err = ccall((:PetscStrncpy,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Csize_t),arg1,arg2,arg3)
    return err
end

function PetscStrchr(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::UInt8,arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscStrchr,petscRealSingle),PetscErrorCode,(Cstring,UInt8,Ptr{Ptr{UInt8}}),arg1,arg2,arg3)
    return err
end

function PetscStrtolower(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscStrtolower,petscRealSingle),PetscErrorCode,(Cstring,),arg1)
    return err
end

function PetscStrtoupper(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscStrtoupper,petscRealSingle),PetscErrorCode,(Cstring,),arg1)
    return err
end

function PetscStrrchr(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::UInt8,arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscStrrchr,petscRealSingle),PetscErrorCode,(Cstring,UInt8,Ptr{Ptr{UInt8}}),arg1,arg2,arg3)
    return err
end

function PetscStrstr(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscStrstr,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Ptr{Ptr{UInt8}}),arg1,arg2,arg3)
    return err
end

function PetscStrrstr(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscStrrstr,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Ptr{Ptr{UInt8}}),arg1,arg2,arg3)
    return err
end

function PetscStrendswith(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscStrendswith,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function PetscStrbeginswith(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscStrbeginswith,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function PetscStrendswithwhich(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscStrendswithwhich,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Ptr{UInt8}},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PetscStrallocpy(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscStrallocpy,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PetscStrArrayallocpy(arg0::Type{Float32},arg1::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg2::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}})
    err = ccall((:PetscStrArrayallocpy,petscRealSingle),PetscErrorCode,(Ptr{Ptr{UInt8}},Ptr{Ptr{Ptr{UInt8}}}),arg1,arg2)
    return err
end

function PetscStrArrayDestroy(arg0::Type{Float32},arg1::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}})
    err = ccall((:PetscStrArrayDestroy,petscRealSingle),PetscErrorCode,(Ptr{Ptr{Ptr{UInt8}}},),arg1)
    return err
end

function PetscStrNArrayallocpy(arg0::Type{Float32},arg1::Integer,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg3::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}})
    err = ccall((:PetscStrNArrayallocpy,petscRealSingle),PetscErrorCode,(Int64,Ptr{Ptr{UInt8}},Ptr{Ptr{Ptr{UInt8}}}),arg1,arg2,arg3)
    return err
end

function PetscStrNArrayDestroy(arg0::Type{Float32},arg1::Integer,arg2::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}})
    err = ccall((:PetscStrNArrayDestroy,petscRealSingle),PetscErrorCode,(Int64,Ptr{Ptr{Ptr{UInt8}}}),arg1,arg2)
    return err
end

function PetscStrreplace(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Csize_t)
    err = ccall((:PetscStrreplace,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Cstring,Csize_t),arg1,arg2,arg3,arg4)
    return err
end

function PetscStrcmpNoError(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscStrcmpNoError,petscRealSingle),Void,(Cstring,Cstring,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function PetscTokenCreate(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::UInt8,arg3::Union{Ptr{PetscToken},StridedArray{PetscToken},Ptr{PetscToken},Ref{PetscToken}})
    err = ccall((:PetscTokenCreate,petscRealSingle),PetscErrorCode,(Cstring,UInt8,Ptr{PetscToken}),arg1,arg2,arg3)
    return err
end

function PetscTokenFind(arg0::Type{Float32},arg1::PetscToken,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscTokenFind,petscRealSingle),PetscErrorCode,(PetscToken,Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PetscTokenDestroy(arg0::Type{Float32},arg1::Union{Ptr{PetscToken},StridedArray{PetscToken},Ptr{PetscToken},Ref{PetscToken}})
    err = ccall((:PetscTokenDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscToken},),arg1)
    return err
end

function PetscEListFind(arg0::Type{Float32},arg1::Integer,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscEListFind,petscRealSingle),PetscErrorCode,(Int64,Ptr{Ptr{UInt8}},Cstring,Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscEnumFind(arg0::Type{Float32},arg1::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{PetscEnum},StridedArray{PetscEnum},Ptr{PetscEnum},Ref{PetscEnum}},arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscEnumFind,petscRealSingle),PetscErrorCode,(Ptr{Ptr{UInt8}},Cstring,Ptr{PetscEnum},Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function PetscMaxSum(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscMaxSum,petscRealSingle),PetscErrorCode,(comm_type,Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

#= skipping function with undefined symbols: 
 function MPIULong_Send(arg0::Type{Float32},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg2::Integer,arg3::MPI_Datatype,arg4::PetscMPIInt,arg5::PetscMPIInt,arg6::MPI_Comm)
    ccall((:MPIULong_Send,petscRealSingle),PetscErrorCode,(Ptr{Void},Int64,MPI_Datatype,PetscMPIInt,PetscMPIInt,comm_type),arg1,arg2,arg3,arg4,arg5,arg6)
end 
=#
#= skipping function with undefined symbols: 
 function MPIULong_Recv(arg0::Type{Float32},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg2::Integer,arg3::MPI_Datatype,arg4::PetscMPIInt,arg5::PetscMPIInt,arg6::MPI_Comm)
    ccall((:MPIULong_Recv,petscRealSingle),PetscErrorCode,(Ptr{Void},Int64,MPI_Datatype,PetscMPIInt,PetscMPIInt,comm_type),arg1,arg2,arg3,arg4,arg5,arg6)
end 
=#
function PetscErrorPrintfInitialize(arg0::Type{Float32})
    err = ccall((:PetscErrorPrintfInitialize,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscErrorMessage(arg0::Type{Float32},arg1::Integer,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscErrorMessage,petscRealSingle),PetscErrorCode,(Cint,Ptr{Ptr{UInt8}},Ptr{Ptr{UInt8}}),arg1,arg2,arg3)
    return err
end

function PetscTraceBackErrorHandler(arg0::Type{Float32},arg1::MPI_Comm,arg2::Integer,arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg5::PetscErrorCode,arg6::PetscErrorType,arg7::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg8::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscTraceBackErrorHandler,petscRealSingle),PetscErrorCode,(comm_type,Cint,Cstring,Cstring,PetscErrorCode,PetscErrorType,Cstring,Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function PetscIgnoreErrorHandler(arg0::Type{Float32},arg1::MPI_Comm,arg2::Integer,arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg5::PetscErrorCode,arg6::PetscErrorType,arg7::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg8::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscIgnoreErrorHandler,petscRealSingle),PetscErrorCode,(comm_type,Cint,Cstring,Cstring,PetscErrorCode,PetscErrorType,Cstring,Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function PetscEmacsClientErrorHandler(arg0::Type{Float32},arg1::MPI_Comm,arg2::Integer,arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg5::PetscErrorCode,arg6::PetscErrorType,arg7::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg8::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscEmacsClientErrorHandler,petscRealSingle),PetscErrorCode,(comm_type,Cint,Cstring,Cstring,PetscErrorCode,PetscErrorType,Cstring,Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function PetscMPIAbortErrorHandler(arg0::Type{Float32},arg1::MPI_Comm,arg2::Integer,arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg5::PetscErrorCode,arg6::PetscErrorType,arg7::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg8::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscMPIAbortErrorHandler,petscRealSingle),PetscErrorCode,(comm_type,Cint,Cstring,Cstring,PetscErrorCode,PetscErrorType,Cstring,Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function PetscAbortErrorHandler(arg0::Type{Float32},arg1::MPI_Comm,arg2::Integer,arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg5::PetscErrorCode,arg6::PetscErrorType,arg7::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg8::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscAbortErrorHandler,petscRealSingle),PetscErrorCode,(comm_type,Cint,Cstring,Cstring,PetscErrorCode,PetscErrorType,Cstring,Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function PetscAttachDebuggerErrorHandler(arg0::Type{Float32},arg1::MPI_Comm,arg2::Integer,arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg5::PetscErrorCode,arg6::PetscErrorType,arg7::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg8::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscAttachDebuggerErrorHandler,petscRealSingle),PetscErrorCode,(comm_type,Cint,Cstring,Cstring,PetscErrorCode,PetscErrorType,Cstring,Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function PetscReturnErrorHandler(arg0::Type{Float32},arg1::MPI_Comm,arg2::Integer,arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg5::PetscErrorCode,arg6::PetscErrorType,arg7::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg8::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscReturnErrorHandler,petscRealSingle),PetscErrorCode,(comm_type,Cint,Cstring,Cstring,PetscErrorCode,PetscErrorType,Cstring,Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function PetscPushErrorHandler(arg0::Type{Float32},handler::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscPushErrorHandler,petscRealSingle),PetscErrorCode,(Ptr{Void},Ptr{Void}),handler,arg1)
    return err
end

function PetscPopErrorHandler(arg0::Type{Float32})
    err = ccall((:PetscPopErrorHandler,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscSignalHandlerDefault(arg0::Type{Float32},arg1::Integer,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscSignalHandlerDefault,petscRealSingle),PetscErrorCode,(Cint,Ptr{Void}),arg1,arg2)
    return err
end

function PetscPushSignalHandler(arg0::Type{Float32},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscPushSignalHandler,petscRealSingle),PetscErrorCode,(Ptr{Void},Ptr{Void}),arg1,arg2)
    return err
end

function PetscPopSignalHandler(arg0::Type{Float32})
    err = ccall((:PetscPopSignalHandler,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscCheckPointerSetIntensity(arg0::Type{Float32},arg1::Integer)
    err = ccall((:PetscCheckPointerSetIntensity,petscRealSingle),PetscErrorCode,(Int64,),arg1)
    return err
end

function PetscSetFPTrap(arg0::Type{Float32},arg1::PetscFPTrap)
    err = ccall((:PetscSetFPTrap,petscRealSingle),PetscErrorCode,(PetscFPTrap,),arg1)
    return err
end

function PetscFPTrapPush(arg0::Type{Float32},arg1::PetscFPTrap)
    err = ccall((:PetscFPTrapPush,petscRealSingle),PetscErrorCode,(PetscFPTrap,),arg1)
    return err
end

function PetscFPTrapPop(arg0::Type{Float32})
    err = ccall((:PetscFPTrapPop,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscStackCopy(arg0::Type{Float32},arg1::Union{Ptr{PetscStack},StridedArray{PetscStack},Ptr{PetscStack},Ref{PetscStack}},arg2::Union{Ptr{PetscStack},StridedArray{PetscStack},Ptr{PetscStack},Ref{PetscStack}})
    err = ccall((:PetscStackCopy,petscRealSingle),PetscErrorCode,(Ptr{PetscStack},Ptr{PetscStack}),arg1,arg2)
    return err
end

#= skipping function with undefined symbols: 
 function PetscStackPrint(arg0::Type{Float32},arg1::Union{Ptr{PetscStack},StridedArray{PetscStack},Ptr{PetscStack},Ref{PetscStack}},arg2::Union{Ptr{FILE},StridedArray{FILE},Ptr{FILE},Ref{FILE}})
    ccall((:PetscStackPrint,petscRealSingle),PetscErrorCode,(Ptr{PetscStack},Ptr{FILE}),arg1,arg2)
end 
=#
function PetscStackActive(arg0::Type{Float32})
    err = ccall((:PetscStackActive,petscRealSingle),PetscBool,())
    return err
end

function PetscStackCreate(arg0::Type{Float32})
    err = ccall((:PetscStackCreate,petscRealSingle),PetscErrorCode,())
    return err
end

#= skipping function with undefined symbols: 
 function PetscStackView(arg0::Type{Float32},arg1::Union{Ptr{FILE},StridedArray{FILE},Ptr{FILE},Ref{FILE}})
    ccall((:PetscStackView,petscRealSingle),PetscErrorCode,(Ptr{FILE},),arg1)
end 
=#
function PetscStackDestroy(arg0::Type{Float32})
    err = ccall((:PetscStackDestroy,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscClassIdRegister(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{PetscClassId},StridedArray{PetscClassId},Ptr{PetscClassId},Ref{PetscClassId}})
    err = ccall((:PetscClassIdRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{PetscClassId}),arg1,arg2)
    return err
end

function PetscMemoryGetCurrentUsage(arg0::Type{Float32},arg1::Union{Ptr{PetscLogDouble},StridedArray{PetscLogDouble},Ptr{PetscLogDouble},Ref{PetscLogDouble}})
    err = ccall((:PetscMemoryGetCurrentUsage,petscRealSingle),PetscErrorCode,(Ptr{PetscLogDouble},),arg1)
    return err
end

function PetscMemoryGetMaximumUsage(arg0::Type{Float32},arg1::Union{Ptr{PetscLogDouble},StridedArray{PetscLogDouble},Ptr{PetscLogDouble},Ref{PetscLogDouble}})
    err = ccall((:PetscMemoryGetMaximumUsage,petscRealSingle),PetscErrorCode,(Ptr{PetscLogDouble},),arg1)
    return err
end

function PetscMemorySetGetMaximumUsage(arg0::Type{Float32})
    err = ccall((:PetscMemorySetGetMaximumUsage,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscMemoryTrace(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscMemoryTrace,petscRealSingle),PetscErrorCode,(Cstring,),arg1)
    return err
end

function PetscInfoAllow(arg0::Type{Float32},arg1::PetscBool,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscInfoAllow,petscRealSingle),PetscErrorCode,(PetscBool,Cstring),arg1,arg2)
    return err
end

function PetscSleep(arg0::Type{Float32},arg1::Float32)
    err = ccall((:PetscSleep,petscRealSingle),PetscErrorCode,(Float32,),arg1)
    return err
end

function PetscInitialize(arg0::Type{Float32},arg1::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}},arg2::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscInitialize,petscRealSingle),PetscErrorCode,(Ptr{Cint},Ptr{Ptr{Ptr{UInt8}}},Cstring,Cstring),arg1,arg2,arg3,arg4)
    return err
end

function PetscInitializeNoPointers(arg0::Type{Float32},arg1::Integer,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscInitializeNoPointers,petscRealSingle),PetscErrorCode,(Cint,Ptr{Ptr{UInt8}},Cstring,Cstring),arg1,arg2,arg3,arg4)
    return err
end

function PetscInitializeNoArguments(arg0::Type{Float32})
    err = ccall((:PetscInitializeNoArguments,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscInitialized(arg0::Type{Float32},arg1::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscInitialized,petscRealSingle),PetscErrorCode,(Ptr{PetscBool},),arg1)
    return err
end

function PetscFinalized(arg0::Type{Float32},arg1::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscFinalized,petscRealSingle),PetscErrorCode,(Ptr{PetscBool},),arg1)
    return err
end

function PetscFinalize(arg0::Type{Float32})
    err = ccall((:PetscFinalize,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscInitializeFortran(arg0::Type{Float32})
    err = ccall((:PetscInitializeFortran,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscGetArgs(arg0::Type{Float32},arg1::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}},arg2::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}})
    err = ccall((:PetscGetArgs,petscRealSingle),PetscErrorCode,(Ptr{Cint},Ptr{Ptr{Ptr{UInt8}}}),arg1,arg2)
    return err
end

function PetscGetArguments(arg0::Type{Float32},arg1::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}})
    err = ccall((:PetscGetArguments,petscRealSingle),PetscErrorCode,(Ptr{Ptr{Ptr{UInt8}}},),arg1)
    return err
end

function PetscFreeArguments(arg0::Type{Float32},arg1::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscFreeArguments,petscRealSingle),PetscErrorCode,(Ptr{Ptr{UInt8}},),arg1)
    return err
end

function PetscEnd(arg0::Type{Float32})
    err = ccall((:PetscEnd,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscSysInitializePackage(arg0::Type{Float32})
    err = ccall((:PetscSysInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscPythonInitialize(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscPythonInitialize,petscRealSingle),PetscErrorCode,(Cstring,Cstring),arg1,arg2)
    return err
end

function PetscPythonFinalize(arg0::Type{Float32})
    err = ccall((:PetscPythonFinalize,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscPythonPrintError(arg0::Type{Float32})
    err = ccall((:PetscPythonPrintError,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscPythonMonitorSet(arg0::Type{Float32},arg1::PetscObject,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscPythonMonitorSet,petscRealSingle),PetscErrorCode,(PetscObject,Cstring),arg1,arg2)
    return err
end

function PetscObjectDestroy(arg0::Type{Float32},arg1::Union{Ptr{PetscObject},StridedArray{PetscObject},Ptr{PetscObject},Ref{PetscObject}})
    err = ccall((:PetscObjectDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscObject},),arg1)
    return err
end

function PetscObjectGetComm(arg0::Type{Float32},arg1::PetscObject,arg2::Union{Ptr{MPI_Comm},StridedArray{MPI_Comm},Ptr{MPI_Comm},Ref{MPI_Comm}})
    err = ccall((:PetscObjectGetComm,petscRealSingle),PetscErrorCode,(PetscObject,Ptr{comm_type}),arg1,arg2)
    return err
end

function PetscObjectGetClassId(arg0::Type{Float32},arg1::PetscObject,arg2::Union{Ptr{PetscClassId},StridedArray{PetscClassId},Ptr{PetscClassId},Ref{PetscClassId}})
    err = ccall((:PetscObjectGetClassId,petscRealSingle),PetscErrorCode,(PetscObject,Ptr{PetscClassId}),arg1,arg2)
    return err
end

function PetscObjectGetClassName(arg0::Type{Float32},arg1::PetscObject,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscObjectGetClassName,petscRealSingle),PetscErrorCode,(PetscObject,Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PetscObjectSetType(arg0::Type{Float32},arg1::PetscObject,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscObjectSetType,petscRealSingle),PetscErrorCode,(PetscObject,Cstring),arg1,arg2)
    return err
end

function PetscObjectSetPrecision(arg0::Type{Float32},arg1::PetscObject,arg2::PetscPrecision)
    err = ccall((:PetscObjectSetPrecision,petscRealSingle),PetscErrorCode,(PetscObject,PetscPrecision),arg1,arg2)
    return err
end

function PetscObjectGetType(arg0::Type{Float32},arg1::PetscObject,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscObjectGetType,petscRealSingle),PetscErrorCode,(PetscObject,Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PetscObjectSetName(arg0::Type{Float32},arg1::PetscObject,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscObjectSetName,petscRealSingle),PetscErrorCode,(PetscObject,Cstring),arg1,arg2)
    return err
end

function PetscObjectGetName(arg0::Type{Float32},arg1::PetscObject,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscObjectGetName,petscRealSingle),PetscErrorCode,(PetscObject,Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PetscObjectSetTabLevel(arg0::Type{Float32},arg1::PetscObject,arg2::Integer)
    err = ccall((:PetscObjectSetTabLevel,petscRealSingle),PetscErrorCode,(PetscObject,Int64),arg1,arg2)
    return err
end

function PetscObjectGetTabLevel(arg0::Type{Float32},arg1::PetscObject,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscObjectGetTabLevel,petscRealSingle),PetscErrorCode,(PetscObject,Ptr{Int64}),arg1,arg2)
    return err
end

function PetscObjectIncrementTabLevel(arg0::Type{Float32},arg1::PetscObject,arg2::PetscObject,arg3::Integer)
    err = ccall((:PetscObjectIncrementTabLevel,petscRealSingle),PetscErrorCode,(PetscObject,PetscObject,Int64),arg1,arg2,arg3)
    return err
end

function PetscObjectReference(arg0::Type{Float32},arg1::PetscObject)
    err = ccall((:PetscObjectReference,petscRealSingle),PetscErrorCode,(PetscObject,),arg1)
    return err
end

function PetscObjectGetReference(arg0::Type{Float32},arg1::PetscObject,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscObjectGetReference,petscRealSingle),PetscErrorCode,(PetscObject,Ptr{Int64}),arg1,arg2)
    return err
end

function PetscObjectDereference(arg0::Type{Float32},arg1::PetscObject)
    err = ccall((:PetscObjectDereference,petscRealSingle),PetscErrorCode,(PetscObject,),arg1)
    return err
end

function PetscObjectGetNewTag(arg0::Type{Float32},arg1::PetscObject,arg2::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}})
    err = ccall((:PetscObjectGetNewTag,petscRealSingle),PetscErrorCode,(PetscObject,Ptr{PetscMPIInt}),arg1,arg2)
    return err
end

function PetscObjectCompose(arg0::Type{Float32},arg1::PetscObject,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::PetscObject)
    err = ccall((:PetscObjectCompose,petscRealSingle),PetscErrorCode,(PetscObject,Cstring,PetscObject),arg1,arg2,arg3)
    return err
end

function PetscObjectRemoveReference(arg0::Type{Float32},arg1::PetscObject,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscObjectRemoveReference,petscRealSingle),PetscErrorCode,(PetscObject,Cstring),arg1,arg2)
    return err
end

function PetscObjectQuery(arg0::Type{Float32},arg1::PetscObject,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{PetscObject},StridedArray{PetscObject},Ptr{PetscObject},Ref{PetscObject}})
    err = ccall((:PetscObjectQuery,petscRealSingle),PetscErrorCode,(PetscObject,Cstring,Ptr{PetscObject}),arg1,arg2,arg3)
    return err
end

function PetscObjectComposeFunction_Private(arg0::Type{Float32},arg1::PetscObject,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscObjectComposeFunction_Private,petscRealSingle),PetscErrorCode,(PetscObject,Cstring,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function PetscObjectSetFromOptions(arg0::Type{Float32},arg1::PetscObject)
    err = ccall((:PetscObjectSetFromOptions,petscRealSingle),PetscErrorCode,(PetscObject,),arg1)
    return err
end

function PetscObjectSetUp(arg0::Type{Float32},arg1::PetscObject)
    err = ccall((:PetscObjectSetUp,petscRealSingle),PetscErrorCode,(PetscObject,),arg1)
    return err
end

function PetscCommGetNewTag(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}})
    err = ccall((:PetscCommGetNewTag,petscRealSingle),PetscErrorCode,(comm_type,Ptr{PetscMPIInt}),arg1,arg2)
    return err
end

function PetscObjectAddOptionsHandler(arg0::Type{Float32},arg1::PetscObject,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscObjectAddOptionsHandler,petscRealSingle),PetscErrorCode,(PetscObject,Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function PetscObjectProcessOptionsHandlers(arg0::Type{Float32},arg1::PetscObject)
    err = ccall((:PetscObjectProcessOptionsHandlers,petscRealSingle),PetscErrorCode,(PetscObject,),arg1)
    return err
end

function PetscObjectDestroyOptionsHandlers(arg0::Type{Float32},arg1::PetscObject)
    err = ccall((:PetscObjectDestroyOptionsHandlers,petscRealSingle),PetscErrorCode,(PetscObject,),arg1)
    return err
end

function PetscObjectsListGetGlobalNumbering(arg0::Type{Float32},arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{PetscObject},StridedArray{PetscObject},Ptr{PetscObject},Ref{PetscObject}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscObjectsListGetGlobalNumbering,petscRealSingle),PetscErrorCode,(comm_type,Int64,Ptr{PetscObject},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscOptionsHasName(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsHasName,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function PetscOptionsGetInt(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetInt,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function PetscOptionsGetBool(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetBool,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Ptr{PetscBool},Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function PetscOptionsGetReal(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetReal,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Ptr{Float32},Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function PetscOptionsGetScalar(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetScalar,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Ptr{Float32},Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function PetscOptionsGetIntArray(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetIntArray,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Ptr{Int64},Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscOptionsGetRealArray(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetRealArray,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Ptr{Float32},Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscOptionsGetScalarArray(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetScalarArray,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Ptr{Float32},Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscOptionsGetBoolArray(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetBoolArray,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Ptr{PetscBool},Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscOptionsGetString(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Csize_t,arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetString,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Cstring,Csize_t,Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscOptionsGetStringArray(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetStringArray,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Ptr{Ptr{UInt8}},Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscOptionsGetEList(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetEList,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Ptr{Ptr{UInt8}},Int64,Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscOptionsGetEnum(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg4::Union{Ptr{PetscEnum},StridedArray{PetscEnum},Ptr{PetscEnum},Ref{PetscEnum}},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetEnum,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Ptr{Ptr{UInt8}},Ptr{PetscEnum},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscOptionsGetEnumArray(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg4::Union{Ptr{PetscEnum},StridedArray{PetscEnum},Ptr{PetscEnum},Ref{PetscEnum}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetEnumArray,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Ptr{Ptr{UInt8}},Ptr{PetscEnum},Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscOptionsValidKey(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsValidKey,petscRealSingle),PetscErrorCode,(Cstring,Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscOptionsSetAlias(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscOptionsSetAlias,petscRealSingle),PetscErrorCode,(Cstring,Cstring),arg1,arg2)
    return err
end

function PetscOptionsSetValue(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscOptionsSetValue,petscRealSingle),PetscErrorCode,(Cstring,Cstring),arg1,arg2)
    return err
end

function PetscOptionsClearValue(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscOptionsClearValue,petscRealSingle),PetscErrorCode,(Cstring,),arg1)
    return err
end

function PetscOptionsAllUsed(arg0::Type{Float32},arg1::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscOptionsAllUsed,petscRealSingle),PetscErrorCode,(Ptr{Int64},),arg1)
    return err
end

function PetscOptionsUsed(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsUsed,petscRealSingle),PetscErrorCode,(Cstring,Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscOptionsLeft(arg0::Type{Float32})
    err = ccall((:PetscOptionsLeft,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscOptionsView(arg1::PetscViewer{Float32})
    err = ccall((:PetscOptionsView,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},),arg1)
    return err
end

function PetscOptionsCreate(arg0::Type{Float32})
    err = ccall((:PetscOptionsCreate,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscOptionsInsert(arg0::Type{Float32},arg1::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}},arg2::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscOptionsInsert,petscRealSingle),PetscErrorCode,(Ptr{Cint},Ptr{Ptr{Ptr{UInt8}}},Cstring),arg1,arg2,arg3)
    return err
end

function PetscOptionsInsertFile(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::PetscBool)
    err = ccall((:PetscOptionsInsertFile,petscRealSingle),PetscErrorCode,(comm_type,Cstring,PetscBool),arg1,arg2,arg3)
    return err
end

function PetscOptionsInsertString(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscOptionsInsertString,petscRealSingle),PetscErrorCode,(Cstring,),arg1)
    return err
end

function PetscOptionsDestroy(arg0::Type{Float32})
    err = ccall((:PetscOptionsDestroy,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscOptionsClear(arg0::Type{Float32})
    err = ccall((:PetscOptionsClear,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscOptionsPrefixPush(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscOptionsPrefixPush,petscRealSingle),PetscErrorCode,(Cstring,),arg1)
    return err
end

function PetscOptionsPrefixPop(arg0::Type{Float32})
    err = ccall((:PetscOptionsPrefixPop,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscOptionsReject(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscOptionsReject,petscRealSingle),PetscErrorCode,(Cstring,Cstring),arg1,arg2)
    return err
end

function PetscOptionsGetAll(arg0::Type{Float32},arg1::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscOptionsGetAll,petscRealSingle),PetscErrorCode,(Ptr{Ptr{UInt8}},),arg1)
    return err
end

function PetscOptionsGetenv(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Csize_t,arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetenv,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Cstring,Csize_t,Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscOptionsStringToInt(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscOptionsStringToInt,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Int64}),arg1,arg2)
    return err
end

function PetscOptionsStringToReal(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:PetscOptionsStringToReal,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Float32}),arg1,arg2)
    return err
end

function PetscOptionsStringToBool(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsStringToBool,petscRealSingle),PetscErrorCode,(Cstring,Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscOptionsMonitorSet(arg0::Type{Float32},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscOptionsMonitorSet,petscRealSingle),PetscErrorCode,(Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function PetscOptionsMonitorCancel(arg0::Type{Float32})
    err = ccall((:PetscOptionsMonitorCancel,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscOptionsMonitorDefault(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscOptionsMonitorDefault,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Ptr{Void}),arg1,arg2,arg3)
    return err
end

#= skipping function with undefined symbols: 
 function PetscOptionsBegin_Private(arg0::Type{Float32},arg1::Union{Ptr{PetscOptions},StridedArray{PetscOptions},Ptr{PetscOptions},Ref{PetscOptions}},arg2::MPI_Comm,arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    ccall((:PetscOptionsBegin_Private,petscRealSingle),PetscErrorCode,(Ptr{PetscOptions},comm_type,Cstring,Cstring,Cstring),arg1,arg2,arg3,arg4,arg5)
end 
=#
#= skipping function with undefined symbols: 
 function PetscObjectOptionsBegin_Private(arg0::Type{Float32},arg1::Union{Ptr{PetscOptions},StridedArray{PetscOptions},Ptr{PetscOptions},Ref{PetscOptions}},arg2::PetscObject)
    ccall((:PetscObjectOptionsBegin_Private,petscRealSingle),PetscErrorCode,(Ptr{PetscOptions},PetscObject),arg1,arg2)
end 
=#
#= skipping function with undefined symbols: 
 function PetscOptionsEnd_Private(arg0::Type{Float32},arg1::Union{Ptr{PetscOptions},StridedArray{PetscOptions},Ptr{PetscOptions},Ref{PetscOptions}})
    ccall((:PetscOptionsEnd_Private,petscRealSingle),PetscErrorCode,(Ptr{PetscOptions},),arg1)
end 
=#
#= skipping function with undefined symbols: 
 function PetscOptionsHead(arg0::Type{Float32},arg1::Union{Ptr{PetscOptions},StridedArray{PetscOptions},Ptr{PetscOptions},Ref{PetscOptions}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    ccall((:PetscOptionsHead,petscRealSingle),PetscErrorCode,(Ptr{PetscOptions},Cstring),arg1,arg2)
end 
=#
#= skipping function with undefined symbols: 
 function PetscOptionsEnum_Private(arg0::Type{Float32},arg1::Union{Ptr{PetscOptions},StridedArray{PetscOptions},Ptr{PetscOptions},Ref{PetscOptions}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg6::PetscEnum,arg7::Union{Ptr{PetscEnum},StridedArray{PetscEnum},Ptr{PetscEnum},Ref{PetscEnum}},arg8::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:PetscOptionsEnum_Private,petscRealSingle),PetscErrorCode,(Ptr{PetscOptions},Cstring,Cstring,Cstring,Ptr{Ptr{UInt8}},PetscEnum,Ptr{PetscEnum},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
end 
=#
#= skipping function with undefined symbols: 
 function PetscOptionsInt_Private(arg0::Type{Float32},arg1::Union{Ptr{PetscOptions},StridedArray{PetscOptions},Ptr{PetscOptions},Ref{PetscOptions}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:PetscOptionsInt_Private,petscRealSingle),PetscErrorCode,(Ptr{PetscOptions},Cstring,Cstring,Cstring,Int64,Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end 
=#
#= skipping function with undefined symbols: 
 function PetscOptionsReal_Private(arg0::Type{Float32},arg1::Union{Ptr{PetscOptions},StridedArray{PetscOptions},Ptr{PetscOptions},Ref{PetscOptions}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Float32,arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:PetscOptionsReal_Private,petscRealSingle),PetscErrorCode,(Ptr{PetscOptions},Cstring,Cstring,Cstring,Float32,Ptr{Float32},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end 
=#
#= skipping function with undefined symbols: 
 function PetscOptionsScalar_Private(arg0::Type{Float32},arg1::Union{Ptr{PetscOptions},StridedArray{PetscOptions},Ptr{PetscOptions},Ref{PetscOptions}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Float32,arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:PetscOptionsScalar_Private,petscRealSingle),PetscErrorCode,(Ptr{PetscOptions},Cstring,Cstring,Cstring,Float32,Ptr{Float32},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end 
=#
#= skipping function with undefined symbols: 
 function PetscOptionsName_Private(arg0::Type{Float32},arg1::Union{Ptr{PetscOptions},StridedArray{PetscOptions},Ptr{PetscOptions},Ref{PetscOptions}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:PetscOptionsName_Private,petscRealSingle),PetscErrorCode,(Ptr{PetscOptions},Cstring,Cstring,Cstring,Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
end 
=#
#= skipping function with undefined symbols: 
 function PetscOptionsString_Private(arg0::Type{Float32},arg1::Union{Ptr{PetscOptions},StridedArray{PetscOptions},Ptr{PetscOptions},Ref{PetscOptions}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg6::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg7::Csize_t,arg8::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:PetscOptionsString_Private,petscRealSingle),PetscErrorCode,(Ptr{PetscOptions},Cstring,Cstring,Cstring,Cstring,Cstring,Csize_t,Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
end 
=#
#= skipping function with undefined symbols: 
 function PetscOptionsBool_Private(arg0::Type{Float32},arg1::Union{Ptr{PetscOptions},StridedArray{PetscOptions},Ptr{PetscOptions},Ref{PetscOptions}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg5::PetscBool,arg6::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg7::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:PetscOptionsBool_Private,petscRealSingle),PetscErrorCode,(Ptr{PetscOptions},Cstring,Cstring,Cstring,PetscBool,Ptr{PetscBool},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end 
=#
#= skipping function with undefined symbols: 
 function PetscOptionsBoolGroupBegin_Private(arg0::Type{Float32},arg1::Union{Ptr{PetscOptions},StridedArray{PetscOptions},Ptr{PetscOptions},Ref{PetscOptions}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:PetscOptionsBoolGroupBegin_Private,petscRealSingle),PetscErrorCode,(Ptr{PetscOptions},Cstring,Cstring,Cstring,Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
end 
=#
#= skipping function with undefined symbols: 
 function PetscOptionsBoolGroup_Private(arg0::Type{Float32},arg1::Union{Ptr{PetscOptions},StridedArray{PetscOptions},Ptr{PetscOptions},Ref{PetscOptions}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:PetscOptionsBoolGroup_Private,petscRealSingle),PetscErrorCode,(Ptr{PetscOptions},Cstring,Cstring,Cstring,Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
end 
=#
#= skipping function with undefined symbols: 
 function PetscOptionsBoolGroupEnd_Private(arg0::Type{Float32},arg1::Union{Ptr{PetscOptions},StridedArray{PetscOptions},Ptr{PetscOptions},Ref{PetscOptions}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:PetscOptionsBoolGroupEnd_Private,petscRealSingle),PetscErrorCode,(Ptr{PetscOptions},Cstring,Cstring,Cstring,Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
end 
=#
#= skipping function with undefined symbols: 
 function PetscOptionsFList_Private(arg0::Type{Float32},arg1::Union{Ptr{PetscOptions},StridedArray{PetscOptions},Ptr{PetscOptions},Ref{PetscOptions}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg5::PetscFunctionList,arg6::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg7::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg8::Csize_t,arg9::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:PetscOptionsFList_Private,petscRealSingle),PetscErrorCode,(Ptr{PetscOptions},Cstring,Cstring,Cstring,PetscFunctionList,Cstring,Cstring,Csize_t,Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
end 
=#
#= skipping function with undefined symbols: 
 function PetscOptionsEList_Private(arg0::Type{Float32},arg1::Union{Ptr{PetscOptions},StridedArray{PetscOptions},Ptr{PetscOptions},Ref{PetscOptions}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg6::Integer,arg7::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg8::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg9::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:PetscOptionsEList_Private,petscRealSingle),PetscErrorCode,(Ptr{PetscOptions},Cstring,Cstring,Cstring,Ptr{Ptr{UInt8}},Int64,Cstring,Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
end 
=#
#= skipping function with undefined symbols: 
 function PetscOptionsRealArray_Private(arg0::Type{Float32},arg1::Union{Ptr{PetscOptions},StridedArray{PetscOptions},Ptr{PetscOptions},Ref{PetscOptions}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:PetscOptionsRealArray_Private,petscRealSingle),PetscErrorCode,(Ptr{PetscOptions},Cstring,Cstring,Cstring,Ptr{Float32},Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end 
=#
#= skipping function with undefined symbols: 
 function PetscOptionsScalarArray_Private(arg0::Type{Float32},arg1::Union{Ptr{PetscOptions},StridedArray{PetscOptions},Ptr{PetscOptions},Ref{PetscOptions}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:PetscOptionsScalarArray_Private,petscRealSingle),PetscErrorCode,(Ptr{PetscOptions},Cstring,Cstring,Cstring,Ptr{Float32},Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end 
=#
#= skipping function with undefined symbols: 
 function PetscOptionsIntArray_Private(arg0::Type{Float32},arg1::Union{Ptr{PetscOptions},StridedArray{PetscOptions},Ptr{PetscOptions},Ref{PetscOptions}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:PetscOptionsIntArray_Private,petscRealSingle),PetscErrorCode,(Ptr{PetscOptions},Cstring,Cstring,Cstring,Ptr{Int64},Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end 
=#
#= skipping function with undefined symbols: 
 function PetscOptionsStringArray_Private(arg0::Type{Float32},arg1::Union{Ptr{PetscOptions},StridedArray{PetscOptions},Ptr{PetscOptions},Ref{PetscOptions}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:PetscOptionsStringArray_Private,petscRealSingle),PetscErrorCode,(Ptr{PetscOptions},Cstring,Cstring,Cstring,Ptr{Ptr{UInt8}},Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end 
=#
#= skipping function with undefined symbols: 
 function PetscOptionsBoolArray_Private(arg0::Type{Float32},arg1::Union{Ptr{PetscOptions},StridedArray{PetscOptions},Ptr{PetscOptions},Ref{PetscOptions}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:PetscOptionsBoolArray_Private,petscRealSingle),PetscErrorCode,(Ptr{PetscOptions},Cstring,Cstring,Cstring,Ptr{PetscBool},Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end 
=#
#= skipping function with undefined symbols: 
 function PetscOptionsEnumArray_Private(arg0::Type{Float32},arg1::Union{Ptr{PetscOptions},StridedArray{PetscOptions},Ptr{PetscOptions},Ref{PetscOptions}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg6::Union{Ptr{PetscEnum},StridedArray{PetscEnum},Ptr{PetscEnum},Ref{PetscEnum}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:PetscOptionsEnumArray_Private,petscRealSingle),PetscErrorCode,(Ptr{PetscOptions},Cstring,Cstring,Cstring,Ptr{Ptr{UInt8}},Ptr{PetscEnum},Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
end 
=#
function PetscOptionsSetFromOptions(arg0::Type{Float32})
    err = ccall((:PetscOptionsSetFromOptions,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscOptionsSAWsDestroy(arg0::Type{Float32})
    err = ccall((:PetscOptionsSAWsDestroy,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscMemoryShowUsage(arg1::PetscViewer{Float32},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscMemoryShowUsage,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Cstring),arg1,arg2)
    return err
end

function PetscObjectPrintClassNamePrefixType(arg1::PetscObject,arg2::PetscViewer{Float32})
    err = ccall((:PetscObjectPrintClassNamePrefixType,petscRealSingle),PetscErrorCode,(PetscObject,PetscViewer{Float32}),arg1,arg2)
    return err
end

function PetscObjectView(arg1::PetscObject,arg2::PetscViewer{Float32})
    err = ccall((:PetscObjectView,petscRealSingle),PetscErrorCode,(PetscObject,PetscViewer{Float32}),arg1,arg2)
    return err
end

function PetscObjectQueryFunction_Private(arg0::Type{Float32},arg1::PetscObject,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:PetscObjectQueryFunction_Private,petscRealSingle),PetscErrorCode,(PetscObject,Cstring,Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function PetscObjectSetOptionsPrefix(arg0::Type{Float32},arg1::PetscObject,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscObjectSetOptionsPrefix,petscRealSingle),PetscErrorCode,(PetscObject,Cstring),arg1,arg2)
    return err
end

function PetscObjectAppendOptionsPrefix(arg0::Type{Float32},arg1::PetscObject,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscObjectAppendOptionsPrefix,petscRealSingle),PetscErrorCode,(PetscObject,Cstring),arg1,arg2)
    return err
end

function PetscObjectPrependOptionsPrefix(arg0::Type{Float32},arg1::PetscObject,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscObjectPrependOptionsPrefix,petscRealSingle),PetscErrorCode,(PetscObject,Cstring),arg1,arg2)
    return err
end

function PetscObjectGetOptionsPrefix(arg0::Type{Float32},arg1::PetscObject,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscObjectGetOptionsPrefix,petscRealSingle),PetscErrorCode,(PetscObject,Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PetscObjectChangeTypeName(arg0::Type{Float32},arg1::PetscObject,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscObjectChangeTypeName,petscRealSingle),PetscErrorCode,(PetscObject,Cstring),arg1,arg2)
    return err
end

function PetscObjectRegisterDestroy(arg0::Type{Float32},arg1::PetscObject)
    err = ccall((:PetscObjectRegisterDestroy,petscRealSingle),PetscErrorCode,(PetscObject,),arg1)
    return err
end

function PetscObjectRegisterDestroyAll(arg0::Type{Float32})
    err = ccall((:PetscObjectRegisterDestroyAll,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscObjectViewFromOptions(arg0::Type{Float32},arg1::PetscObject,arg2::PetscObject,arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscObjectViewFromOptions,petscRealSingle),PetscErrorCode,(PetscObject,PetscObject,Cstring),arg1,arg2,arg3)
    return err
end

function PetscObjectName(arg0::Type{Float32},arg1::PetscObject)
    err = ccall((:PetscObjectName,petscRealSingle),PetscErrorCode,(PetscObject,),arg1)
    return err
end

function PetscObjectTypeCompare(arg0::Type{Float32},arg1::PetscObject,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscObjectTypeCompare,petscRealSingle),PetscErrorCode,(PetscObject,Cstring,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function PetscRegisterFinalize(arg0::Type{Float32},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscRegisterFinalize,petscRealSingle),PetscErrorCode,(Ptr{Void},),arg1)
    return err
end

function PetscRegisterFinalizeAll(arg0::Type{Float32})
    err = ccall((:PetscRegisterFinalizeAll,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscDLOpen(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::PetscDLMode,arg3::Union{Ptr{PetscDLHandle},StridedArray{PetscDLHandle},Ptr{PetscDLHandle},Ref{PetscDLHandle}})
    err = ccall((:PetscDLOpen,petscRealSingle),PetscErrorCode,(Cstring,PetscDLMode,Ptr{PetscDLHandle}),arg1,arg2,arg3)
    return err
end

function PetscDLClose(arg0::Type{Float32},arg1::Union{Ptr{PetscDLHandle},StridedArray{PetscDLHandle},Ptr{PetscDLHandle},Ref{PetscDLHandle}})
    err = ccall((:PetscDLClose,petscRealSingle),PetscErrorCode,(Ptr{PetscDLHandle},),arg1)
    return err
end

function PetscDLSym(arg0::Type{Float32},arg1::PetscDLHandle,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:PetscDLSym,petscRealSingle),PetscErrorCode,(PetscDLHandle,Cstring,Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function PetscMallocGetStack(arg0::Type{Float32},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg2::Union{Ptr{Ptr{PetscStack}},StridedArray{Ptr{PetscStack}},Ptr{Ptr{PetscStack}},Ref{Ptr{PetscStack}}})
    err = ccall((:PetscMallocGetStack,petscRealSingle),PetscErrorCode,(Ptr{Void},Ptr{Ptr{PetscStack}}),arg1,arg2)
    return err
end

#= skipping function with undefined symbols: 
 function PetscObjectsDump(arg0::Type{Float32},arg1::Union{Ptr{FILE},StridedArray{FILE},Ptr{FILE},Ref{FILE}},arg2::PetscBool)
    ccall((:PetscObjectsDump,petscRealSingle),PetscErrorCode,(Ptr{FILE},PetscBool),arg1,arg2)
end 
=#
function PetscObjectListDestroy(arg0::Type{Float32},arg1::Union{Ptr{PetscObjectList},StridedArray{PetscObjectList},Ptr{PetscObjectList},Ref{PetscObjectList}})
    err = ccall((:PetscObjectListDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscObjectList},),arg1)
    return err
end

function PetscObjectListFind(arg0::Type{Float32},arg1::PetscObjectList,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{PetscObject},StridedArray{PetscObject},Ptr{PetscObject},Ref{PetscObject}})
    err = ccall((:PetscObjectListFind,petscRealSingle),PetscErrorCode,(PetscObjectList,Cstring,Ptr{PetscObject}),arg1,arg2,arg3)
    return err
end

function PetscObjectListReverseFind(arg0::Type{Float32},arg1::PetscObjectList,arg2::PetscObject,arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscObjectListReverseFind,petscRealSingle),PetscErrorCode,(PetscObjectList,PetscObject,Ptr{Ptr{UInt8}},Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function PetscObjectListAdd(arg0::Type{Float32},arg1::Union{Ptr{PetscObjectList},StridedArray{PetscObjectList},Ptr{PetscObjectList},Ref{PetscObjectList}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::PetscObject)
    err = ccall((:PetscObjectListAdd,petscRealSingle),PetscErrorCode,(Ptr{PetscObjectList},Cstring,PetscObject),arg1,arg2,arg3)
    return err
end

function PetscObjectListRemoveReference(arg0::Type{Float32},arg1::Union{Ptr{PetscObjectList},StridedArray{PetscObjectList},Ptr{PetscObjectList},Ref{PetscObjectList}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscObjectListRemoveReference,petscRealSingle),PetscErrorCode,(Ptr{PetscObjectList},Cstring),arg1,arg2)
    return err
end

function PetscObjectListDuplicate(arg0::Type{Float32},arg1::PetscObjectList,arg2::Union{Ptr{PetscObjectList},StridedArray{PetscObjectList},Ptr{PetscObjectList},Ref{PetscObjectList}})
    err = ccall((:PetscObjectListDuplicate,petscRealSingle),PetscErrorCode,(PetscObjectList,Ptr{PetscObjectList}),arg1,arg2)
    return err
end

function PetscFunctionListAdd_Private(arg0::Type{Float32},arg1::Union{Ptr{PetscFunctionList},StridedArray{PetscFunctionList},Ptr{PetscFunctionList},Ref{PetscFunctionList}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscFunctionListAdd_Private,petscRealSingle),PetscErrorCode,(Ptr{PetscFunctionList},Cstring,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function PetscFunctionListDestroy(arg0::Type{Float32},arg1::Union{Ptr{PetscFunctionList},StridedArray{PetscFunctionList},Ptr{PetscFunctionList},Ref{PetscFunctionList}})
    err = ccall((:PetscFunctionListDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscFunctionList},),arg1)
    return err
end

function PetscFunctionListFind_Private(arg0::Type{Float32},arg1::PetscFunctionList,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:PetscFunctionListFind_Private,petscRealSingle),PetscErrorCode,(PetscFunctionList,Cstring,Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

#= skipping function with undefined symbols: 
 function PetscFunctionListPrintTypes(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{FILE},StridedArray{FILE},Ptr{FILE},Ref{FILE}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg6::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg7::PetscFunctionList,arg8::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    ccall((:PetscFunctionListPrintTypes,petscRealSingle),PetscErrorCode,(comm_type,Ptr{FILE},Cstring,Cstring,Cstring,Cstring,PetscFunctionList,Cstring),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
end 
=#
function PetscFunctionListDuplicate(arg0::Type{Float32},arg1::PetscFunctionList,arg2::Union{Ptr{PetscFunctionList},StridedArray{PetscFunctionList},Ptr{PetscFunctionList},Ref{PetscFunctionList}})
    err = ccall((:PetscFunctionListDuplicate,petscRealSingle),PetscErrorCode,(PetscFunctionList,Ptr{PetscFunctionList}),arg1,arg2)
    return err
end

function PetscFunctionListView(arg1::PetscFunctionList,arg2::PetscViewer{Float32})
    err = ccall((:PetscFunctionListView,petscRealSingle),PetscErrorCode,(PetscFunctionList,PetscViewer{Float32}),arg1,arg2)
    return err
end

function PetscFunctionListGet(arg0::Type{Float32},arg1::PetscFunctionList,arg2::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}},arg3::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:PetscFunctionListGet,petscRealSingle),PetscErrorCode,(PetscFunctionList,Ptr{Ptr{Ptr{UInt8}}},Ptr{Cint}),arg1,arg2,arg3)
    return err
end

function PetscDLLibraryAppend(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{PetscDLLibrary},StridedArray{PetscDLLibrary},Ptr{PetscDLLibrary},Ref{PetscDLLibrary}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscDLLibraryAppend,petscRealSingle),PetscErrorCode,(comm_type,Ptr{PetscDLLibrary},Cstring),arg1,arg2,arg3)
    return err
end

function PetscDLLibraryPrepend(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{PetscDLLibrary},StridedArray{PetscDLLibrary},Ptr{PetscDLLibrary},Ref{PetscDLLibrary}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscDLLibraryPrepend,petscRealSingle),PetscErrorCode,(comm_type,Ptr{PetscDLLibrary},Cstring),arg1,arg2,arg3)
    return err
end

function PetscDLLibrarySym(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{PetscDLLibrary},StridedArray{PetscDLLibrary},Ptr{PetscDLLibrary},Ref{PetscDLLibrary}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:PetscDLLibrarySym,petscRealSingle),PetscErrorCode,(comm_type,Ptr{PetscDLLibrary},Cstring,Cstring,Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDLLibraryPrintPath(arg0::Type{Float32},arg1::PetscDLLibrary)
    err = ccall((:PetscDLLibraryPrintPath,petscRealSingle),PetscErrorCode,(PetscDLLibrary,),arg1)
    return err
end

function PetscDLLibraryRetrieve(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Csize_t,arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscDLLibraryRetrieve,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Cstring,Csize_t,Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDLLibraryOpen(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{PetscDLLibrary},StridedArray{PetscDLLibrary},Ptr{PetscDLLibrary},Ref{PetscDLLibrary}})
    err = ccall((:PetscDLLibraryOpen,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Ptr{PetscDLLibrary}),arg1,arg2,arg3)
    return err
end

function PetscDLLibraryClose(arg0::Type{Float32},arg1::PetscDLLibrary)
    err = ccall((:PetscDLLibraryClose,petscRealSingle),PetscErrorCode,(PetscDLLibrary,),arg1)
    return err
end

function PetscSplitOwnership(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSplitOwnership,petscRealSingle),PetscErrorCode,(comm_type,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PetscSplitOwnershipBlock(arg0::Type{Float32},arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSplitOwnershipBlock,petscRealSingle),PetscErrorCode,(comm_type,Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function PetscSequentialPhaseBegin(arg0::Type{Float32},arg1::MPI_Comm,arg2::PetscMPIInt)
    err = ccall((:PetscSequentialPhaseBegin,petscRealSingle),PetscErrorCode,(comm_type,PetscMPIInt),arg1,arg2)
    return err
end

function PetscSequentialPhaseEnd(arg0::Type{Float32},arg1::MPI_Comm,arg2::PetscMPIInt)
    err = ccall((:PetscSequentialPhaseEnd,petscRealSingle),PetscErrorCode,(comm_type,PetscMPIInt),arg1,arg2)
    return err
end

function PetscBarrier(arg0::Type{Float32},arg1::PetscObject)
    err = ccall((:PetscBarrier,petscRealSingle),PetscErrorCode,(PetscObject,),arg1)
    return err
end

#= skipping function with undefined symbols: 
 function PetscMPIDump(arg0::Type{Float32},arg1::Union{Ptr{FILE},StridedArray{FILE},Ptr{FILE},Ref{FILE}})
    ccall((:PetscMPIDump,petscRealSingle),PetscErrorCode,(Ptr{FILE},),arg1)
end 
=#
function PetscInfoDeactivateClass(arg0::Type{Float32},arg1::PetscClassId)
    err = ccall((:PetscInfoDeactivateClass,petscRealSingle),PetscErrorCode,(PetscClassId,),arg1)
    return err
end

function PetscInfoActivateClass(arg0::Type{Float32},arg1::PetscClassId)
    err = ccall((:PetscInfoActivateClass,petscRealSingle),PetscErrorCode,(PetscClassId,),arg1)
    return err
end

function PetscLogGetStageLog(arg0::Type{Float32},arg1::Union{Ptr{PetscStageLog},StridedArray{PetscStageLog},Ptr{PetscStageLog},Ref{PetscStageLog}})
    err = ccall((:PetscLogGetStageLog,petscRealSingle),PetscErrorCode,(Ptr{PetscStageLog},),arg1)
    return err
end

function PetscStageLogGetCurrent(arg0::Type{Float32},arg1::PetscStageLog,arg2::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:PetscStageLogGetCurrent,petscRealSingle),PetscErrorCode,(PetscStageLog,Ptr{Cint}),arg1,arg2)
    return err
end

function PetscStageLogGetEventPerfLog(arg0::Type{Float32},arg1::PetscStageLog,arg2::Integer,arg3::Union{Ptr{PetscEventPerfLog},StridedArray{PetscEventPerfLog},Ptr{PetscEventPerfLog},Ref{PetscEventPerfLog}})
    err = ccall((:PetscStageLogGetEventPerfLog,petscRealSingle),PetscErrorCode,(PetscStageLog,Cint,Ptr{PetscEventPerfLog}),arg1,arg2,arg3)
    return err
end

function PetscLogObjectParent(arg0::Type{Float32},arg1::PetscObject,arg2::PetscObject)
    err = ccall((:PetscLogObjectParent,petscRealSingle),PetscErrorCode,(PetscObject,PetscObject),arg1,arg2)
    return err
end

function PetscLogObjectMemory(arg0::Type{Float32},arg1::PetscObject,arg2::PetscLogDouble)
    err = ccall((:PetscLogObjectMemory,petscRealSingle),PetscErrorCode,(PetscObject,PetscLogDouble),arg1,arg2)
    return err
end

function PetscLogFlops(arg0::Type{Float32},n::PetscLogDouble)
    err = ccall((:PetscLogFlops,petscRealSingle),PetscErrorCode,(PetscLogDouble,),n)
    return err
end

function PetscLogBegin(arg0::Type{Float32})
    err = ccall((:PetscLogBegin,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscLogAllBegin(arg0::Type{Float32})
    err = ccall((:PetscLogAllBegin,petscRealSingle),PetscErrorCode,())
    return err
end

#= skipping function with undefined symbols: 
 function PetscLogTraceBegin(arg0::Type{Float32},arg1::Union{Ptr{FILE},StridedArray{FILE},Ptr{FILE},Ref{FILE}})
    ccall((:PetscLogTraceBegin,petscRealSingle),PetscErrorCode,(Ptr{FILE},),arg1)
end 
=#
function PetscLogActions(arg0::Type{Float32},arg1::PetscBool)
    err = ccall((:PetscLogActions,petscRealSingle),PetscErrorCode,(PetscBool,),arg1)
    return err
end

function PetscLogObjects(arg0::Type{Float32},arg1::PetscBool)
    err = ccall((:PetscLogObjects,petscRealSingle),PetscErrorCode,(PetscBool,),arg1)
    return err
end

function PetscLogDestroy(arg0::Type{Float32})
    err = ccall((:PetscLogDestroy,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscLogSet(arg0::Type{Float32},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscLogSet,petscRealSingle),PetscErrorCode,(Ptr{Void},Ptr{Void}),arg1,arg2)
    return err
end

function PetscLogView(arg1::PetscViewer{Float32})
    err = ccall((:PetscLogView,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},),arg1)
    return err
end

function PetscLogViewFromOptions(arg0::Type{Float32})
    err = ccall((:PetscLogViewFromOptions,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscLogDump(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscLogDump,petscRealSingle),PetscErrorCode,(Cstring,),arg1)
    return err
end

function PetscGetFlops(arg0::Type{Float32},arg1::Union{Ptr{PetscLogDouble},StridedArray{PetscLogDouble},Ptr{PetscLogDouble},Ref{PetscLogDouble}})
    err = ccall((:PetscGetFlops,petscRealSingle),PetscErrorCode,(Ptr{PetscLogDouble},),arg1)
    return err
end

function PetscLogStageRegister(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{PetscLogStage},StridedArray{PetscLogStage},Ptr{PetscLogStage},Ref{PetscLogStage}})
    err = ccall((:PetscLogStageRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{PetscLogStage}),arg1,arg2)
    return err
end

function PetscLogStagePush(arg0::Type{Float32},arg1::PetscLogStage)
    err = ccall((:PetscLogStagePush,petscRealSingle),PetscErrorCode,(PetscLogStage,),arg1)
    return err
end

function PetscLogStagePop(arg0::Type{Float32})
    err = ccall((:PetscLogStagePop,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscLogStageSetActive(arg0::Type{Float32},arg1::PetscLogStage,arg2::PetscBool)
    err = ccall((:PetscLogStageSetActive,petscRealSingle),PetscErrorCode,(PetscLogStage,PetscBool),arg1,arg2)
    return err
end

function PetscLogStageGetActive(arg0::Type{Float32},arg1::PetscLogStage,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscLogStageGetActive,petscRealSingle),PetscErrorCode,(PetscLogStage,Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscLogStageSetVisible(arg0::Type{Float32},arg1::PetscLogStage,arg2::PetscBool)
    err = ccall((:PetscLogStageSetVisible,petscRealSingle),PetscErrorCode,(PetscLogStage,PetscBool),arg1,arg2)
    return err
end

function PetscLogStageGetVisible(arg0::Type{Float32},arg1::PetscLogStage,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscLogStageGetVisible,petscRealSingle),PetscErrorCode,(PetscLogStage,Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscLogStageGetId(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{PetscLogStage},StridedArray{PetscLogStage},Ptr{PetscLogStage},Ref{PetscLogStage}})
    err = ccall((:PetscLogStageGetId,petscRealSingle),PetscErrorCode,(Cstring,Ptr{PetscLogStage}),arg1,arg2)
    return err
end

function PetscLogEventRegister(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::PetscClassId,arg3::Union{Ptr{PetscLogEvent},StridedArray{PetscLogEvent},Ptr{PetscLogEvent},Ref{PetscLogEvent}})
    err = ccall((:PetscLogEventRegister,petscRealSingle),PetscErrorCode,(Cstring,PetscClassId,Ptr{PetscLogEvent}),arg1,arg2,arg3)
    return err
end

function PetscLogEventActivate(arg0::Type{Float32},arg1::PetscLogEvent)
    err = ccall((:PetscLogEventActivate,petscRealSingle),PetscErrorCode,(PetscLogEvent,),arg1)
    return err
end

function PetscLogEventDeactivate(arg0::Type{Float32},arg1::PetscLogEvent)
    err = ccall((:PetscLogEventDeactivate,petscRealSingle),PetscErrorCode,(PetscLogEvent,),arg1)
    return err
end

function PetscLogEventSetActiveAll(arg0::Type{Float32},arg1::PetscLogEvent,arg2::PetscBool)
    err = ccall((:PetscLogEventSetActiveAll,petscRealSingle),PetscErrorCode,(PetscLogEvent,PetscBool),arg1,arg2)
    return err
end

function PetscLogEventActivateClass(arg0::Type{Float32},arg1::PetscClassId)
    err = ccall((:PetscLogEventActivateClass,petscRealSingle),PetscErrorCode,(PetscClassId,),arg1)
    return err
end

function PetscLogEventDeactivateClass(arg0::Type{Float32},arg1::PetscClassId)
    err = ccall((:PetscLogEventDeactivateClass,petscRealSingle),PetscErrorCode,(PetscClassId,),arg1)
    return err
end

function PetscLogEventGetId(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{PetscLogEvent},StridedArray{PetscLogEvent},Ptr{PetscLogEvent},Ref{PetscLogEvent}})
    err = ccall((:PetscLogEventGetId,petscRealSingle),PetscErrorCode,(Cstring,Ptr{PetscLogEvent}),arg1,arg2)
    return err
end

function PetscLogEventGetPerfInfo(arg0::Type{Float32},arg1::Integer,arg2::PetscLogEvent,arg3::Union{Ptr{PetscEventPerfInfo},StridedArray{PetscEventPerfInfo},Ptr{PetscEventPerfInfo},Ref{PetscEventPerfInfo}})
    err = ccall((:PetscLogEventGetPerfInfo,petscRealSingle),PetscErrorCode,(Cint,PetscLogEvent,Ptr{PetscEventPerfInfo}),arg1,arg2,arg3)
    return err
end

function PetscLogEventGetFlops(arg0::Type{Float32},arg1::PetscLogEvent,arg2::Union{Ptr{PetscLogDouble},StridedArray{PetscLogDouble},Ptr{PetscLogDouble},Ref{PetscLogDouble}})
    err = ccall((:PetscLogEventGetFlops,petscRealSingle),PetscErrorCode,(PetscLogEvent,Ptr{PetscLogDouble}),arg1,arg2)
    return err
end

function PetscLogEventZeroFlops(arg0::Type{Float32},arg1::PetscLogEvent)
    err = ccall((:PetscLogEventZeroFlops,petscRealSingle),PetscErrorCode,(PetscLogEvent,),arg1)
    return err
end

#= skipping function with undefined symbols: 
 function PetscMPITypeSize(arg0::Type{Float32},buff::Union{Ptr{PetscLogDouble},StridedArray{PetscLogDouble},Ptr{PetscLogDouble},Ref{PetscLogDouble}},count::PetscMPIInt,_type::MPI_Datatype)
    ccall((:PetscMPITypeSize,petscRealSingle),PetscErrorCode,(Ptr{PetscLogDouble},PetscMPIInt,MPI_Datatype),buff,count,_type)
end 
=#
#= skipping function with undefined symbols: 
 function PetscMPITypeSizeComm(arg0::Type{Float32},comm::MPI_Comm,buff::Union{Ptr{PetscLogDouble},StridedArray{PetscLogDouble},Ptr{PetscLogDouble},Ref{PetscLogDouble}},counts::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}},_type::MPI_Datatype)
    ccall((:PetscMPITypeSizeComm,petscRealSingle),PetscErrorCode,(comm_type,Ptr{PetscLogDouble},Ptr{PetscMPIInt},MPI_Datatype),comm,buff,counts,_type)
end 
=#
function PetscMPIParallelComm(arg0::Type{Float32},comm::MPI_Comm)
    err = ccall((:PetscMPIParallelComm,petscRealSingle),Cint,(comm_type,),comm)
    return err
end

function PetscIntStackCreate(arg0::Type{Float32},arg1::Union{Ptr{PetscIntStack},StridedArray{PetscIntStack},Ptr{PetscIntStack},Ref{PetscIntStack}})
    err = ccall((:PetscIntStackCreate,petscRealSingle),PetscErrorCode,(Ptr{PetscIntStack},),arg1)
    return err
end

function PetscIntStackDestroy(arg0::Type{Float32},arg1::PetscIntStack)
    err = ccall((:PetscIntStackDestroy,petscRealSingle),PetscErrorCode,(PetscIntStack,),arg1)
    return err
end

function PetscIntStackPush(arg0::Type{Float32},arg1::PetscIntStack,arg2::Integer)
    err = ccall((:PetscIntStackPush,petscRealSingle),PetscErrorCode,(PetscIntStack,Cint),arg1,arg2)
    return err
end

function PetscIntStackPop(arg0::Type{Float32},arg1::PetscIntStack,arg2::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:PetscIntStackPop,petscRealSingle),PetscErrorCode,(PetscIntStack,Ptr{Cint}),arg1,arg2)
    return err
end

function PetscIntStackTop(arg0::Type{Float32},arg1::PetscIntStack,arg2::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:PetscIntStackTop,petscRealSingle),PetscErrorCode,(PetscIntStack,Ptr{Cint}),arg1,arg2)
    return err
end

function PetscIntStackEmpty(arg0::Type{Float32},arg1::PetscIntStack,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscIntStackEmpty,petscRealSingle),PetscErrorCode,(PetscIntStack,Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscFixFilename(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscFixFilename,petscRealSingle),PetscErrorCode,(Cstring,Cstring),arg1,arg2)
    return err
end

#= skipping function with undefined symbols: 
 function PetscFOpen(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{Ptr{Ptr{FILE}},StridedArray{Ptr{FILE}},Ptr{Ptr{FILE}},Ref{Ptr{FILE}}})
    ccall((:PetscFOpen,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Cstring,Ptr{Ptr{FILE}}),arg1,arg2,arg3,arg4)
end 
=#
#= skipping function with undefined symbols: 
 function PetscFClose(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{FILE},StridedArray{FILE},Ptr{FILE},Ref{FILE}})
    ccall((:PetscFClose,petscRealSingle),PetscErrorCode,(comm_type,Ptr{FILE}),arg1,arg2)
end 
=#
#= skipping function with undefined symbols: 
 function PetscVSNPrintf(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Csize_t,arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{Ptr{Csize_t},StridedArray{Csize_t},Ptr{Csize_t},Ref{Csize_t}},arg5::Union{Ptr{__va_list_tag},StridedArray{__va_list_tag},Ptr{__va_list_tag},Ref{__va_list_tag}})
    ccall((:PetscVSNPrintf,petscRealSingle),PetscErrorCode,(Cstring,Csize_t,Cstring,Ptr{Csize_t},Ptr{__va_list_tag}),arg1,arg2,arg3,arg4,arg5)
end 
=#
#= skipping function with undefined symbols: 
 function PetscVFPrintfDefault(arg0::Type{Float32},arg1::Union{Ptr{FILE},StridedArray{FILE},Ptr{FILE},Ref{FILE}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{__va_list_tag},StridedArray{__va_list_tag},Ptr{__va_list_tag},Ref{__va_list_tag}})
    ccall((:PetscVFPrintfDefault,petscRealSingle),PetscErrorCode,(Ptr{FILE},Cstring,Ptr{__va_list_tag}),arg1,arg2,arg3)
end 
=#
#= skipping function with undefined symbols: 
 function PetscPOpen(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{Ptr{Ptr{FILE}},StridedArray{Ptr{FILE}},Ptr{Ptr{FILE}},Ref{Ptr{FILE}}})
    ccall((:PetscPOpen,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Cstring,Cstring,Ptr{Ptr{FILE}}),arg1,arg2,arg3,arg4,arg5)
end 
=#
#= skipping function with undefined symbols: 
 function PetscPClose(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{FILE},StridedArray{FILE},Ptr{FILE},Ref{FILE}},arg3::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    ccall((:PetscPClose,petscRealSingle),PetscErrorCode,(comm_type,Ptr{FILE},Ptr{Cint}),arg1,arg2,arg3)
end 
=#
function PetscPOpenSetMachine(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscPOpenSetMachine,petscRealSingle),PetscErrorCode,(Cstring,),arg1)
    return err
end

#= skipping function with undefined symbols: 
 function PetscSynchronizedFlush(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{FILE},StridedArray{FILE},Ptr{FILE},Ref{FILE}})
    ccall((:PetscSynchronizedFlush,petscRealSingle),PetscErrorCode,(comm_type,Ptr{FILE}),arg1,arg2)
end 
=#
#= skipping function with undefined symbols: 
 function PetscSynchronizedFGets(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{FILE},StridedArray{FILE},Ptr{FILE},Ref{FILE}},arg3::Csize_t,arg4::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    ccall((:PetscSynchronizedFGets,petscRealSingle),PetscErrorCode,(comm_type,Ptr{FILE},Csize_t,Cstring),arg1,arg2,arg3,arg4)
end 
=#
#= skipping function with undefined symbols: 
 function PetscStartMatlab(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{Ptr{Ptr{FILE}},StridedArray{Ptr{FILE}},Ptr{Ptr{FILE}},Ref{Ptr{FILE}}})
    ccall((:PetscStartMatlab,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Cstring,Ptr{Ptr{FILE}}),arg1,arg2,arg3,arg4)
end 
=#
#= skipping function with undefined symbols: 
 function PetscStartJava(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{Ptr{Ptr{FILE}},StridedArray{Ptr{FILE}},Ptr{Ptr{FILE}},Ref{Ptr{FILE}}})
    ccall((:PetscStartJava,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Cstring,Ptr{Ptr{FILE}}),arg1,arg2,arg3,arg4)
end 
=#
function PetscGetPetscDir(arg0::Type{Float32},arg1::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscGetPetscDir,petscRealSingle),PetscErrorCode,(Ptr{Ptr{UInt8}},),arg1)
    return err
end

function PetscPopUpSelect(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Integer,arg5::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg6::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:PetscPopUpSelect,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Cstring,Cint,Ptr{Ptr{UInt8}},Ptr{Cint}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscContainerGetPointer(arg0::Type{Float32},arg1::PetscContainer,arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:PetscContainerGetPointer,petscRealSingle),PetscErrorCode,(PetscContainer,Ptr{Ptr{Void}}),arg1,arg2)
    return err
end

function PetscContainerSetPointer(arg0::Type{Float32},arg1::PetscContainer,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscContainerSetPointer,petscRealSingle),PetscErrorCode,(PetscContainer,Ptr{Void}),arg1,arg2)
    return err
end

function PetscContainerDestroy(arg0::Type{Float32},arg1::Union{Ptr{PetscContainer},StridedArray{PetscContainer},Ptr{PetscContainer},Ref{PetscContainer}})
    err = ccall((:PetscContainerDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscContainer},),arg1)
    return err
end

function PetscContainerCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{PetscContainer},StridedArray{PetscContainer},Ptr{PetscContainer},Ref{PetscContainer}})
    err = ccall((:PetscContainerCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{PetscContainer}),arg1,arg2)
    return err
end

function PetscContainerSetUserDestroy(arg0::Type{Float32},arg1::PetscContainer,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscContainerSetUserDestroy,petscRealSingle),PetscErrorCode,(PetscContainer,Ptr{Void}),arg1,arg2)
    return err
end

function PetscIntView(arg1::Integer,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::PetscViewer{Float32})
    err = ccall((:PetscIntView,petscRealSingle),PetscErrorCode,(Int64,Ptr{Int64},PetscViewer{Float32}),arg1,arg2,arg3)
    return err
end

function PetscRealView(arg1::Integer,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::PetscViewer{Float32})
    err = ccall((:PetscRealView,petscRealSingle),PetscErrorCode,(Int64,Ptr{Float32},PetscViewer{Float32}),arg1,arg2,arg3)
    return err
end

function PetscScalarView(arg1::Integer,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::PetscViewer{Float32})
    err = ccall((:PetscScalarView,petscRealSingle),PetscErrorCode,(Int64,Ptr{Float32},PetscViewer{Float32}),arg1,arg2,arg3)
    return err
end

function PetscMemcpy(arg0::Type{Float32},a::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},b::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},n::Csize_t)
    err = ccall((:PetscMemcpy,petscRealSingle),PetscErrorCode,(Ptr{Void},Ptr{Void},Csize_t),a,b,n)
    return err
end

function PetscMemzero(arg0::Type{Float32},a::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},n::Csize_t)
    err = ccall((:PetscMemzero,petscRealSingle),PetscErrorCode,(Ptr{Void},Csize_t),a,n)
    return err
end

#= skipping function with undefined symbols: 
 function MPIU_File_write_all(arg0::Type{Float32},arg1::MPI_File,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::PetscMPIInt,arg4::MPI_Datatype,arg5::Union{Ptr{MPI_Status},StridedArray{MPI_Status},Ptr{MPI_Status},Ref{MPI_Status}})
    ccall((:MPIU_File_write_all,petscRealSingle),PetscErrorCode,(MPI_File,Ptr{Void},PetscMPIInt,MPI_Datatype,Ptr{MPI_Status}),arg1,arg2,arg3,arg4,arg5)
end 
=#
#= skipping function with undefined symbols: 
 function MPIU_File_read_all(arg0::Type{Float32},arg1::MPI_File,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::PetscMPIInt,arg4::MPI_Datatype,arg5::Union{Ptr{MPI_Status},StridedArray{MPI_Status},Ptr{MPI_Status},Ref{MPI_Status}})
    ccall((:MPIU_File_read_all,petscRealSingle),PetscErrorCode,(MPI_File,Ptr{Void},PetscMPIInt,MPI_Datatype,Ptr{MPI_Status}),arg1,arg2,arg3,arg4,arg5)
end 
=#
function PetscBLASIntCast(arg0::Type{Float32},a::Integer,b::Union{Ptr{PetscBLASInt},StridedArray{PetscBLASInt},Ptr{PetscBLASInt},Ref{PetscBLASInt}})
    err = ccall((:PetscBLASIntCast,petscRealSingle),PetscErrorCode,(Int64,Ptr{PetscBLASInt}),a,b)
    return err
end

function PetscMPIIntCast(arg0::Type{Float32},a::Integer,b::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}})
    err = ccall((:PetscMPIIntCast,petscRealSingle),PetscErrorCode,(Int64,Ptr{PetscMPIInt}),a,b)
    return err
end

function PetscGetArchType(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Csize_t)
    err = ccall((:PetscGetArchType,petscRealSingle),PetscErrorCode,(Cstring,Csize_t),arg1,arg2)
    return err
end

function PetscGetHostName(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Csize_t)
    err = ccall((:PetscGetHostName,petscRealSingle),PetscErrorCode,(Cstring,Csize_t),arg1,arg2)
    return err
end

function PetscGetUserName(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Csize_t)
    err = ccall((:PetscGetUserName,petscRealSingle),PetscErrorCode,(Cstring,Csize_t),arg1,arg2)
    return err
end

function PetscGetProgramName(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Csize_t)
    err = ccall((:PetscGetProgramName,petscRealSingle),PetscErrorCode,(Cstring,Csize_t),arg1,arg2)
    return err
end

function PetscSetProgramName(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscSetProgramName,petscRealSingle),PetscErrorCode,(Cstring,),arg1)
    return err
end

function PetscGetDate(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Csize_t)
    err = ccall((:PetscGetDate,petscRealSingle),PetscErrorCode,(Cstring,Csize_t),arg1,arg2)
    return err
end

function PetscGetVersion(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Csize_t)
    err = ccall((:PetscGetVersion,petscRealSingle),PetscErrorCode,(Cstring,Csize_t),arg1,arg2)
    return err
end

function PetscSortInt(arg0::Type{Float32},arg1::Integer,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSortInt,petscRealSingle),PetscErrorCode,(Int64,Ptr{Int64}),arg1,arg2)
    return err
end

function PetscSortRemoveDupsInt(arg0::Type{Float32},arg1::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSortRemoveDupsInt,petscRealSingle),PetscErrorCode,(Ptr{Int64},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscFindInt(arg0::Type{Float32},arg1::Integer,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscFindInt,petscRealSingle),PetscErrorCode,(Int64,Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function PetscSortIntWithPermutation(arg0::Type{Float32},arg1::Integer,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSortIntWithPermutation,petscRealSingle),PetscErrorCode,(Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PetscSortStrWithPermutation(arg0::Type{Float32},arg1::Integer,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSortStrWithPermutation,petscRealSingle),PetscErrorCode,(Int64,Ptr{Ptr{UInt8}},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PetscSortIntWithArray(arg0::Type{Float32},arg1::Integer,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSortIntWithArray,petscRealSingle),PetscErrorCode,(Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PetscSortIntWithArrayPair(arg0::Type{Float32},arg1::Integer,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSortIntWithArrayPair,petscRealSingle),PetscErrorCode,(Int64,Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function PetscSortMPIInt(arg0::Type{Float32},arg1::Integer,arg2::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}})
    err = ccall((:PetscSortMPIInt,petscRealSingle),PetscErrorCode,(Int64,Ptr{PetscMPIInt}),arg1,arg2)
    return err
end

function PetscSortRemoveDupsMPIInt(arg0::Type{Float32},arg1::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg2::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}})
    err = ccall((:PetscSortRemoveDupsMPIInt,petscRealSingle),PetscErrorCode,(Ptr{Int64},Ptr{PetscMPIInt}),arg1,arg2)
    return err
end

function PetscSortMPIIntWithArray(arg0::Type{Float32},arg1::PetscMPIInt,arg2::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}},arg3::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}})
    err = ccall((:PetscSortMPIIntWithArray,petscRealSingle),PetscErrorCode,(PetscMPIInt,Ptr{PetscMPIInt},Ptr{PetscMPIInt}),arg1,arg2,arg3)
    return err
end

function PetscSortIntWithScalarArray(arg0::Type{Float32},arg1::Integer,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:PetscSortIntWithScalarArray,petscRealSingle),PetscErrorCode,(Int64,Ptr{Int64},Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function PetscSortIntWithDataArray(arg0::Type{Float32},arg1::Integer,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Csize_t,arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscSortIntWithDataArray,petscRealSingle),PetscErrorCode,(Int64,Ptr{Int64},Ptr{Void},Csize_t,Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscSortReal(arg0::Type{Float32},arg1::Integer,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:PetscSortReal,petscRealSingle),PetscErrorCode,(Int64,Ptr{Float32}),arg1,arg2)
    return err
end

function PetscSortRealWithPermutation(arg0::Type{Float32},arg1::Integer,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSortRealWithPermutation,petscRealSingle),PetscErrorCode,(Int64,Ptr{Float32},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PetscSortRemoveDupsReal(arg0::Type{Float32},arg1::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:PetscSortRemoveDupsReal,petscRealSingle),PetscErrorCode,(Ptr{Int64},Ptr{Float32}),arg1,arg2)
    return err
end

function PetscSortSplit(arg0::Type{Float32},arg1::Integer,arg2::Integer,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSortSplit,petscRealSingle),PetscErrorCode,(Int64,Int64,Ptr{Float32},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function PetscSortSplitReal(arg0::Type{Float32},arg1::Integer,arg2::Integer,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSortSplitReal,petscRealSingle),PetscErrorCode,(Int64,Int64,Ptr{Float32},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function PetscProcessTree(arg0::Type{Float32},arg1::Integer,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg6::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg7::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg8::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:PetscProcessTree,petscRealSingle),PetscErrorCode,(Int64,Ptr{PetscBool},Ptr{Int64},Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function PetscMergeIntArrayPair(arg0::Type{Float32},arg1::Integer,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg9::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:PetscMergeIntArrayPair,petscRealSingle),PetscErrorCode,(Int64,Ptr{Int64},Ptr{Int64},Int64,Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
    return err
end

function PetscMergeIntArray(arg0::Type{Float32},arg1::Integer,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:PetscMergeIntArray,petscRealSingle),PetscErrorCode,(Int64,Ptr{Int64},Int64,Ptr{Int64},Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscSetDisplay(arg0::Type{Float32})
    err = ccall((:PetscSetDisplay,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscGetDisplay(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Csize_t)
    err = ccall((:PetscGetDisplay,petscRealSingle),PetscErrorCode,(Cstring,Csize_t),arg1,arg2)
    return err
end

function PetscRandomInitializePackage(arg0::Type{Float32})
    err = ccall((:PetscRandomInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscRandomRegister(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscRandomRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function PetscRandomSetType(arg0::Type{Float32},arg1::PetscRandom,arg2::PetscRandomType)
    err = ccall((:PetscRandomSetType,petscRealSingle),PetscErrorCode,(PetscRandom,Cstring),arg1,arg2)
    return err
end

function PetscRandomSetFromOptions(arg0::Type{Float32},arg1::PetscRandom)
    err = ccall((:PetscRandomSetFromOptions,petscRealSingle),PetscErrorCode,(PetscRandom,),arg1)
    return err
end

function PetscRandomGetType(arg0::Type{Float32},arg1::PetscRandom,arg2::Union{Ptr{PetscRandomType},StridedArray{PetscRandomType},Ptr{PetscRandomType},Ref{PetscRandomType}})
    (arg2_,tmp) = symbol_get_before(arg2)
    err = ccall((:PetscRandomGetType,petscRealSingle),PetscErrorCode,(PetscRandom,Ptr{Ptr{UInt8}}),arg1,arg2_)
    symbol_get_after(arg2_,arg2)
    return err
end

function PetscRandomViewFromOptions(arg0::Type{Float32},A::PetscRandom,obj::PetscObject,name::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscRandomViewFromOptions,petscRealSingle),PetscErrorCode,(PetscRandom,PetscObject,Cstring),A,obj,name)
    return err
end

function PetscRandomView(arg1::PetscRandom,arg2::PetscViewer{Float32})
    err = ccall((:PetscRandomView,petscRealSingle),PetscErrorCode,(PetscRandom,PetscViewer{Float32}),arg1,arg2)
    return err
end

function PetscRandomCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{PetscRandom},StridedArray{PetscRandom},Ptr{PetscRandom},Ref{PetscRandom}})
    err = ccall((:PetscRandomCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{PetscRandom}),arg1,arg2)
    return err
end

function PetscRandomGetValue(arg0::Type{Float32},arg1::PetscRandom,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:PetscRandomGetValue,petscRealSingle),PetscErrorCode,(PetscRandom,Ptr{Float32}),arg1,arg2)
    return err
end

function PetscRandomGetValueReal(arg0::Type{Float32},arg1::PetscRandom,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:PetscRandomGetValueReal,petscRealSingle),PetscErrorCode,(PetscRandom,Ptr{Float32}),arg1,arg2)
    return err
end

function PetscRandomGetInterval(arg0::Type{Float32},arg1::PetscRandom,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:PetscRandomGetInterval,petscRealSingle),PetscErrorCode,(PetscRandom,Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function PetscRandomSetInterval(arg0::Type{Float32},arg1::PetscRandom,arg2::Float32,arg3::Float32)
    err = ccall((:PetscRandomSetInterval,petscRealSingle),PetscErrorCode,(PetscRandom,Float32,Float32),arg1,arg2,arg3)
    return err
end

function PetscRandomSetSeed(arg0::Type{Float32},arg1::PetscRandom,arg2::Culong)
    err = ccall((:PetscRandomSetSeed,petscRealSingle),PetscErrorCode,(PetscRandom,Culong),arg1,arg2)
    return err
end

function PetscRandomGetSeed(arg0::Type{Float32},arg1::PetscRandom,arg2::Union{Ptr{Culong},StridedArray{Culong},Ptr{Culong},Ref{Culong}})
    err = ccall((:PetscRandomGetSeed,petscRealSingle),PetscErrorCode,(PetscRandom,Ptr{Culong}),arg1,arg2)
    return err
end

function PetscRandomSeed(arg0::Type{Float32},arg1::PetscRandom)
    err = ccall((:PetscRandomSeed,petscRealSingle),PetscErrorCode,(PetscRandom,),arg1)
    return err
end

function PetscRandomDestroy(arg0::Type{Float32},arg1::Union{Ptr{PetscRandom},StridedArray{PetscRandom},Ptr{PetscRandom},Ref{PetscRandom}})
    err = ccall((:PetscRandomDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscRandom},),arg1)
    return err
end

function PetscGetFullPath(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Csize_t)
    err = ccall((:PetscGetFullPath,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Csize_t),arg1,arg2,arg3)
    return err
end

function PetscGetRelativePath(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Csize_t)
    err = ccall((:PetscGetRelativePath,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Csize_t),arg1,arg2,arg3)
    return err
end

function PetscGetWorkingDirectory(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Csize_t)
    err = ccall((:PetscGetWorkingDirectory,petscRealSingle),PetscErrorCode,(Cstring,Csize_t),arg1,arg2)
    return err
end

function PetscGetRealPath(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscGetRealPath,petscRealSingle),PetscErrorCode,(Cstring,Cstring),arg1,arg2)
    return err
end

function PetscGetHomeDirectory(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Csize_t)
    err = ccall((:PetscGetHomeDirectory,petscRealSingle),PetscErrorCode,(Cstring,Csize_t),arg1,arg2)
    return err
end

function PetscTestFile(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::UInt8,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscTestFile,petscRealSingle),PetscErrorCode,(Cstring,UInt8,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function PetscTestDirectory(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::UInt8,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscTestDirectory,petscRealSingle),PetscErrorCode,(Cstring,UInt8,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function PetscBinaryRead(arg0::Type{Float32},arg1::Integer,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Integer,arg4::PetscDataType)
    err = ccall((:PetscBinaryRead,petscRealSingle),PetscErrorCode,(Cint,Ptr{Void},Int64,PetscDataType),arg1,arg2,arg3,arg4)
    return err
end

function PetscBinarySynchronizedRead(arg0::Type{Float32},arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Integer,arg5::PetscDataType)
    err = ccall((:PetscBinarySynchronizedRead,petscRealSingle),PetscErrorCode,(comm_type,Cint,Ptr{Void},Int64,PetscDataType),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscBinarySynchronizedWrite(arg0::Type{Float32},arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Integer,arg5::PetscDataType,arg6::PetscBool)
    err = ccall((:PetscBinarySynchronizedWrite,petscRealSingle),PetscErrorCode,(comm_type,Cint,Ptr{Void},Int64,PetscDataType,PetscBool),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscBinaryWrite(arg0::Type{Float32},arg1::Integer,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Integer,arg4::PetscDataType,arg5::PetscBool)
    err = ccall((:PetscBinaryWrite,petscRealSingle),PetscErrorCode,(Cint,Ptr{Void},Int64,PetscDataType,PetscBool),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscBinaryOpen(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::PetscFileMode,arg3::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:PetscBinaryOpen,petscRealSingle),PetscErrorCode,(Cstring,PetscFileMode,Ptr{Cint}),arg1,arg2,arg3)
    return err
end

function PetscBinaryClose(arg0::Type{Float32},arg1::Integer)
    err = ccall((:PetscBinaryClose,petscRealSingle),PetscErrorCode,(Cint,),arg1)
    return err
end

function PetscSharedTmp(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscSharedTmp,petscRealSingle),PetscErrorCode,(comm_type,Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscSharedWorkingDirectory(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscSharedWorkingDirectory,petscRealSingle),PetscErrorCode,(comm_type,Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscGetTmp(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Csize_t)
    err = ccall((:PetscGetTmp,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Csize_t),arg1,arg2,arg3)
    return err
end

function PetscFileRetrieve(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Csize_t,arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscFileRetrieve,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Cstring,Csize_t,Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscLs(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Csize_t,arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscLs,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Cstring,Csize_t,Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscOpenSocket(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Integer,arg3::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:PetscOpenSocket,petscRealSingle),PetscErrorCode,(Cstring,Cint,Ptr{Cint}),arg1,arg2,arg3)
    return err
end

#= skipping function with undefined symbols: 
 function PetscBinarySeek(arg0::Type{Float32},arg1::Integer,arg2::off_t,arg3::PetscBinarySeekType,arg4::Union{Ptr{off_t},StridedArray{off_t},Ptr{off_t},Ref{off_t}})
    ccall((:PetscBinarySeek,petscRealSingle),PetscErrorCode,(Cint,off_t,PetscBinarySeekType,Ptr{off_t}),arg1,arg2,arg3,arg4)
end 
=#
#= skipping function with undefined symbols: 
 function PetscBinarySynchronizedSeek(arg0::Type{Float32},arg1::MPI_Comm,arg2::Integer,arg3::off_t,arg4::PetscBinarySeekType,arg5::Union{Ptr{off_t},StridedArray{off_t},Ptr{off_t},Ref{off_t}})
    ccall((:PetscBinarySynchronizedSeek,petscRealSingle),PetscErrorCode,(comm_type,Cint,off_t,PetscBinarySeekType,Ptr{off_t}),arg1,arg2,arg3,arg4,arg5)
end 
=#
function PetscByteSwap(arg0::Type{Float32},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg2::PetscDataType,arg3::Integer)
    err = ccall((:PetscByteSwap,petscRealSingle),PetscErrorCode,(Ptr{Void},PetscDataType,Int64),arg1,arg2,arg3)
    return err
end

function PetscSetDebugTerminal(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscSetDebugTerminal,petscRealSingle),PetscErrorCode,(Cstring,),arg1)
    return err
end

function PetscSetDebugger(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::PetscBool)
    err = ccall((:PetscSetDebugger,petscRealSingle),PetscErrorCode,(Cstring,PetscBool),arg1,arg2)
    return err
end

function PetscSetDefaultDebugger(arg0::Type{Float32})
    err = ccall((:PetscSetDefaultDebugger,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscSetDebuggerFromString(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscSetDebuggerFromString,petscRealSingle),PetscErrorCode,(Cstring,),arg1)
    return err
end

function PetscAttachDebugger(arg0::Type{Float32})
    err = ccall((:PetscAttachDebugger,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscStopForDebugger(arg0::Type{Float32})
    err = ccall((:PetscStopForDebugger,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscGatherNumberOfMessages(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}},arg3::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}},arg4::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}})
    err = ccall((:PetscGatherNumberOfMessages,petscRealSingle),PetscErrorCode,(comm_type,Ptr{PetscMPIInt},Ptr{PetscMPIInt},Ptr{PetscMPIInt}),arg1,arg2,arg3,arg4)
    return err
end

function PetscGatherMessageLengths(arg0::Type{Float32},arg1::MPI_Comm,arg2::PetscMPIInt,arg3::PetscMPIInt,arg4::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}},arg5::Union{Ptr{Ptr{PetscMPIInt}},StridedArray{Ptr{PetscMPIInt}},Ptr{Ptr{PetscMPIInt}},Ref{Ptr{PetscMPIInt}}},arg6::Union{Ptr{Ptr{PetscMPIInt}},StridedArray{Ptr{PetscMPIInt}},Ptr{Ptr{PetscMPIInt}},Ref{Ptr{PetscMPIInt}}})
    err = ccall((:PetscGatherMessageLengths,petscRealSingle),PetscErrorCode,(comm_type,PetscMPIInt,PetscMPIInt,Ptr{PetscMPIInt},Ptr{Ptr{PetscMPIInt}},Ptr{Ptr{PetscMPIInt}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscGatherMessageLengths2(arg0::Type{Float32},arg1::MPI_Comm,arg2::PetscMPIInt,arg3::PetscMPIInt,arg4::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}},arg5::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}},arg6::Union{Ptr{Ptr{PetscMPIInt}},StridedArray{Ptr{PetscMPIInt}},Ptr{Ptr{PetscMPIInt}},Ref{Ptr{PetscMPIInt}}},arg7::Union{Ptr{Ptr{PetscMPIInt}},StridedArray{Ptr{PetscMPIInt}},Ptr{Ptr{PetscMPIInt}},Ref{Ptr{PetscMPIInt}}},arg8::Union{Ptr{Ptr{PetscMPIInt}},StridedArray{Ptr{PetscMPIInt}},Ptr{Ptr{PetscMPIInt}},Ref{Ptr{PetscMPIInt}}})
    err = ccall((:PetscGatherMessageLengths2,petscRealSingle),PetscErrorCode,(comm_type,PetscMPIInt,PetscMPIInt,Ptr{PetscMPIInt},Ptr{PetscMPIInt},Ptr{Ptr{PetscMPIInt}},Ptr{Ptr{PetscMPIInt}},Ptr{Ptr{PetscMPIInt}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

#= skipping function with undefined symbols: 
 function PetscPostIrecvInt(arg0::Type{Float32},arg1::MPI_Comm,arg2::PetscMPIInt,arg3::PetscMPIInt,arg4::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}},arg5::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}},arg6::Union{Ptr{Ptr{Ptr{Int64}}},StridedArray{Ptr{Ptr{Int64}}},Ptr{Ptr{Ptr{Int64}}},Ref{Ptr{Ptr{Int64}}}},arg7::Union{Ptr{Ptr{MPI_Request}},StridedArray{Ptr{MPI_Request}},Ptr{Ptr{MPI_Request}},Ref{Ptr{MPI_Request}}})
    ccall((:PetscPostIrecvInt,petscRealSingle),PetscErrorCode,(comm_type,PetscMPIInt,PetscMPIInt,Ptr{PetscMPIInt},Ptr{PetscMPIInt},Ptr{Ptr{Ptr{Int64}}},Ptr{Ptr{MPI_Request}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end 
=#
#= skipping function with undefined symbols: 
 function PetscPostIrecvScalar(arg0::Type{Float32},arg1::MPI_Comm,arg2::PetscMPIInt,arg3::PetscMPIInt,arg4::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}},arg5::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}},arg6::Union{Ptr{Ptr{Ptr{Float32}}},StridedArray{Ptr{Ptr{Float32}}},Ptr{Ptr{Ptr{Float32}}},Ref{Ptr{Ptr{Float32}}}},arg7::Union{Ptr{Ptr{MPI_Request}},StridedArray{Ptr{MPI_Request}},Ptr{Ptr{MPI_Request}},Ref{Ptr{MPI_Request}}})
    ccall((:PetscPostIrecvScalar,petscRealSingle),PetscErrorCode,(comm_type,PetscMPIInt,PetscMPIInt,Ptr{PetscMPIInt},Ptr{PetscMPIInt},Ptr{Ptr{Ptr{Float32}}},Ptr{Ptr{MPI_Request}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end 
=#
#= skipping function with undefined symbols: 
 function PetscCommBuildTwoSided(arg0::Type{Float32},arg1::MPI_Comm,arg2::PetscMPIInt,arg3::MPI_Datatype,arg4::Integer,arg5::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Ptr{PetscMPIInt}},StridedArray{Ptr{PetscMPIInt}},Ptr{Ptr{PetscMPIInt}},Ref{Ptr{PetscMPIInt}}},arg9::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:PetscCommBuildTwoSided,petscRealSingle),PetscErrorCode,(comm_type,PetscMPIInt,MPI_Datatype,Int64,Ptr{PetscMPIInt},Ptr{Void},Ptr{Int64},Ptr{Ptr{PetscMPIInt}},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
end 
=#
function PetscCommBuildTwoSidedSetType(arg0::Type{Float32},arg1::MPI_Comm,arg2::PetscBuildTwoSidedType)
    err = ccall((:PetscCommBuildTwoSidedSetType,petscRealSingle),PetscErrorCode,(comm_type,PetscBuildTwoSidedType),arg1,arg2)
    return err
end

function PetscCommBuildTwoSidedGetType(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{PetscBuildTwoSidedType},StridedArray{PetscBuildTwoSidedType},Ptr{PetscBuildTwoSidedType},Ref{PetscBuildTwoSidedType}})
    err = ccall((:PetscCommBuildTwoSidedGetType,petscRealSingle),PetscErrorCode,(comm_type,Ptr{PetscBuildTwoSidedType}),arg1,arg2)
    return err
end

function PetscSSEIsEnabled(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscSSEIsEnabled,petscRealSingle),PetscErrorCode,(comm_type,Ptr{PetscBool},Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function PetscObjectComm(arg0::Type{Float32},arg1::PetscObject)
    err = ccall((:PetscObjectComm,petscRealSingle),MPI_Comm,(PetscObject,),arg1)
    return err
end

function PetscSubcommChild(arg0::Type{Float32},scomm::PetscSubcomm)
    err = ccall((:PetscSubcommChild,petscRealSingle),MPI_Comm,(PetscSubcomm,),scomm)
    return err
end

function PetscSubcommContiguousParent(arg0::Type{Float32},scomm::PetscSubcomm)
    err = ccall((:PetscSubcommContiguousParent,petscRealSingle),MPI_Comm,(PetscSubcomm,),scomm)
    return err
end

function PetscSubcommCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{PetscSubcomm},StridedArray{PetscSubcomm},Ptr{PetscSubcomm},Ref{PetscSubcomm}})
    err = ccall((:PetscSubcommCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{PetscSubcomm}),arg1,arg2)
    return err
end

function PetscSubcommDestroy(arg0::Type{Float32},arg1::Union{Ptr{PetscSubcomm},StridedArray{PetscSubcomm},Ptr{PetscSubcomm},Ref{PetscSubcomm}})
    err = ccall((:PetscSubcommDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscSubcomm},),arg1)
    return err
end

function PetscSubcommSetNumber(arg0::Type{Float32},arg1::PetscSubcomm,arg2::Integer)
    err = ccall((:PetscSubcommSetNumber,petscRealSingle),PetscErrorCode,(PetscSubcomm,Int64),arg1,arg2)
    return err
end

function PetscSubcommSetType(arg0::Type{Float32},arg1::PetscSubcomm,arg2::PetscSubcommType)
    err = ccall((:PetscSubcommSetType,petscRealSingle),PetscErrorCode,(PetscSubcomm,PetscSubcommType),arg1,arg2)
    return err
end

function PetscSubcommSetTypeGeneral(arg0::Type{Float32},arg1::PetscSubcomm,arg2::PetscMPIInt,arg3::PetscMPIInt)
    err = ccall((:PetscSubcommSetTypeGeneral,petscRealSingle),PetscErrorCode,(PetscSubcomm,PetscMPIInt,PetscMPIInt),arg1,arg2,arg3)
    return err
end

function PetscSubcommView(arg1::PetscSubcomm,arg2::PetscViewer{Float32})
    err = ccall((:PetscSubcommView,petscRealSingle),PetscErrorCode,(PetscSubcomm,PetscViewer{Float32}),arg1,arg2)
    return err
end

function PetscSubcommSetFromOptions(arg0::Type{Float32},arg1::PetscSubcomm)
    err = ccall((:PetscSubcommSetFromOptions,petscRealSingle),PetscErrorCode,(PetscSubcomm,),arg1)
    return err
end

function PetscSegBufferCreate(arg0::Type{Float32},arg1::Csize_t,arg2::Csize_t,arg3::Union{Ptr{PetscSegBuffer},StridedArray{PetscSegBuffer},Ptr{PetscSegBuffer},Ref{PetscSegBuffer}})
    err = ccall((:PetscSegBufferCreate,petscRealSingle),PetscErrorCode,(Csize_t,Csize_t,Ptr{PetscSegBuffer}),arg1,arg2,arg3)
    return err
end

function PetscSegBufferDestroy(arg0::Type{Float32},arg1::Union{Ptr{PetscSegBuffer},StridedArray{PetscSegBuffer},Ptr{PetscSegBuffer},Ref{PetscSegBuffer}})
    err = ccall((:PetscSegBufferDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscSegBuffer},),arg1)
    return err
end

function PetscSegBufferGet(arg0::Type{Float32},arg1::PetscSegBuffer,arg2::Csize_t,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscSegBufferGet,petscRealSingle),PetscErrorCode,(PetscSegBuffer,Csize_t,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function PetscSegBufferExtractAlloc(arg0::Type{Float32},arg1::PetscSegBuffer,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscSegBufferExtractAlloc,petscRealSingle),PetscErrorCode,(PetscSegBuffer,Ptr{Void}),arg1,arg2)
    return err
end

function PetscSegBufferExtractTo(arg0::Type{Float32},arg1::PetscSegBuffer,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscSegBufferExtractTo,petscRealSingle),PetscErrorCode,(PetscSegBuffer,Ptr{Void}),arg1,arg2)
    return err
end

function PetscSegBufferExtractInPlace(arg0::Type{Float32},arg1::PetscSegBuffer,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscSegBufferExtractInPlace,petscRealSingle),PetscErrorCode,(PetscSegBuffer,Ptr{Void}),arg1,arg2)
    return err
end

function PetscSegBufferGetSize(arg0::Type{Float32},arg1::PetscSegBuffer,arg2::Union{Ptr{Csize_t},StridedArray{Csize_t},Ptr{Csize_t},Ref{Csize_t}})
    err = ccall((:PetscSegBufferGetSize,petscRealSingle),PetscErrorCode,(PetscSegBuffer,Ptr{Csize_t}),arg1,arg2)
    return err
end

function PetscSegBufferUnuse(arg0::Type{Float32},arg1::PetscSegBuffer,arg2::Csize_t)
    err = ccall((:PetscSegBufferUnuse,petscRealSingle),PetscErrorCode,(PetscSegBuffer,Csize_t),arg1,arg2)
    return err
end

function PetscSegBufferGetInts(arg0::Type{Float32},seg::PetscSegBuffer,count::Integer,slot::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:PetscSegBufferGetInts,petscRealSingle),PetscErrorCode,(PetscSegBuffer,Int64,Ptr{Ptr{Int64}}),seg,count,slot)
    return err
end

function PetscCitationsRegister(arg0::Type{Float32},cit::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},set::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscCitationsRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{PetscBool}),cit,set)
    return err
end

function PetscURLShorten(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Csize_t)
    err = ccall((:PetscURLShorten,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Csize_t),arg1,arg2,arg3)
    return err
end

function PetscGoogleDriveAuthorize(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Csize_t)
    err = ccall((:PetscGoogleDriveAuthorize,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Cstring,Csize_t),arg1,arg2,arg3,arg4)
    return err
end

function PetscGoogleDriveRefresh(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Csize_t)
    err = ccall((:PetscGoogleDriveRefresh,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Cstring,Csize_t),arg1,arg2,arg3,arg4)
    return err
end

function PetscGoogleDriveUpload(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscGoogleDriveUpload,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Cstring),arg1,arg2,arg3)
    return err
end

function PetscBoxAuthorize(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Csize_t)
    err = ccall((:PetscBoxAuthorize,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Cstring,Csize_t),arg1,arg2,arg3,arg4)
    return err
end

function PetscBoxRefresh(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Csize_t)
    err = ccall((:PetscBoxRefresh,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Cstring,Cstring,Csize_t),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscTextBelt(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscTextBelt,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Cstring,Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function PetscPullJSONValue(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Csize_t,arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscPullJSONValue,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Cstring,Csize_t,Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscPushJSONValue(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Csize_t)
    err = ccall((:PetscPushJSONValue,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Cstring,Csize_t),arg1,arg2,arg3,arg4)
    return err
end

function PetscBagCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Csize_t,arg3::Union{Ptr{PetscBag},StridedArray{PetscBag},Ptr{PetscBag},Ref{PetscBag}})
    err = ccall((:PetscBagCreate,petscRealSingle),PetscErrorCode,(comm_type,Csize_t,Ptr{PetscBag}),arg1,arg2,arg3)
    return err
end

function PetscBagDestroy(arg0::Type{Float32},arg1::Union{Ptr{PetscBag},StridedArray{PetscBag},Ptr{PetscBag},Ref{PetscBag}})
    err = ccall((:PetscBagDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscBag},),arg1)
    return err
end

function PetscBagGetData(arg0::Type{Float32},arg1::PetscBag,arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:PetscBagGetData,petscRealSingle),PetscErrorCode,(PetscBag,Ptr{Ptr{Void}}),arg1,arg2)
    return err
end

function PetscBagRegisterReal(arg0::Type{Float32},arg1::PetscBag,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Float32,arg4::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscBagRegisterReal,petscRealSingle),PetscErrorCode,(PetscBag,Ptr{Void},Float32,Cstring,Cstring),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscBagRegisterRealArray(arg0::Type{Float32},arg1::PetscBag,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Integer,arg4::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscBagRegisterRealArray,petscRealSingle),PetscErrorCode,(PetscBag,Ptr{Void},Int64,Cstring,Cstring),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscBagRegisterString(arg0::Type{Float32},arg1::PetscBag,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Integer,arg4::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg6::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscBagRegisterString,petscRealSingle),PetscErrorCode,(PetscBag,Ptr{Void},Int64,Cstring,Cstring,Cstring),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscBagRegisterScalar(arg0::Type{Float32},arg1::PetscBag,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Float32,arg4::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscBagRegisterScalar,petscRealSingle),PetscErrorCode,(PetscBag,Ptr{Void},Float32,Cstring,Cstring),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscBagRegisterInt(arg0::Type{Float32},arg1::PetscBag,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Integer,arg4::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscBagRegisterInt,petscRealSingle),PetscErrorCode,(PetscBag,Ptr{Void},Int64,Cstring,Cstring),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscBagRegister64bitInt(arg0::Type{Float32},arg1::PetscBag,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Petsc64bitInt,arg4::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscBagRegister64bitInt,petscRealSingle),PetscErrorCode,(PetscBag,Ptr{Void},Petsc64bitInt,Cstring,Cstring),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscBagRegisterIntArray(arg0::Type{Float32},arg1::PetscBag,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Integer,arg4::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscBagRegisterIntArray,petscRealSingle),PetscErrorCode,(PetscBag,Ptr{Void},Int64,Cstring,Cstring),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscBagRegisterEnum(arg0::Type{Float32},arg1::PetscBag,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg4::PetscEnum,arg5::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg6::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscBagRegisterEnum,petscRealSingle),PetscErrorCode,(PetscBag,Ptr{Void},Ptr{Ptr{UInt8}},PetscEnum,Cstring,Cstring),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscBagRegisterBool(arg0::Type{Float32},arg1::PetscBag,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::PetscBool,arg4::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscBagRegisterBool,petscRealSingle),PetscErrorCode,(PetscBag,Ptr{Void},PetscBool,Cstring,Cstring),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscBagRegisterBoolArray(arg0::Type{Float32},arg1::PetscBag,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Integer,arg4::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscBagRegisterBoolArray,petscRealSingle),PetscErrorCode,(PetscBag,Ptr{Void},Int64,Cstring,Cstring),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscBagGetNames(arg0::Type{Float32},arg1::PetscBag,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscBagGetNames,petscRealSingle),PetscErrorCode,(PetscBag,Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PetscBagSetFromOptions(arg0::Type{Float32},arg1::PetscBag)
    err = ccall((:PetscBagSetFromOptions,petscRealSingle),PetscErrorCode,(PetscBag,),arg1)
    return err
end

function PetscBagGetName(arg0::Type{Float32},arg1::PetscBag,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscBagGetName,petscRealSingle),PetscErrorCode,(PetscBag,Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PetscBagSetName(arg0::Type{Float32},arg1::PetscBag,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscBagSetName,petscRealSingle),PetscErrorCode,(PetscBag,Cstring,Cstring),arg1,arg2,arg3)
    return err
end

function PetscBagSetOptionsPrefix(arg0::Type{Float32},arg1::PetscBag,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscBagSetOptionsPrefix,petscRealSingle),PetscErrorCode,(PetscBag,Cstring),arg1,arg2)
    return err
end

function PetscBagView(arg1::PetscBag,arg2::PetscViewer{Float32})
    err = ccall((:PetscBagView,petscRealSingle),PetscErrorCode,(PetscBag,PetscViewer{Float32}),arg1,arg2)
    return err
end

function PetscBagLoad(arg1::PetscViewer{Float32},arg2::PetscBag)
    err = ccall((:PetscBagLoad,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},PetscBag),arg1,arg2)
    return err
end

function PetscBagSetViewer(arg0::Type{Float32},arg1::PetscBag,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscBagSetViewer,petscRealSingle),PetscErrorCode,(PetscBag,Ptr{Void}),arg1,arg2)
    return err
end

function PetscBagSetLoader(arg0::Type{Float32},arg1::PetscBag,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscBagSetLoader,petscRealSingle),PetscErrorCode,(PetscBag,Ptr{Void}),arg1,arg2)
    return err
end

function PetscBagSetDestroy(arg0::Type{Float32},arg1::PetscBag,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscBagSetDestroy,petscRealSingle),PetscErrorCode,(PetscBag,Ptr{Void}),arg1,arg2)
    return err
end

function PetscGetCPUTime(arg0::Type{Float32},arg1::Union{Ptr{PetscLogDouble},StridedArray{PetscLogDouble},Ptr{PetscLogDouble},Ref{PetscLogDouble}})
    err = ccall((:PetscGetCPUTime,petscRealSingle),PetscErrorCode,(Ptr{PetscLogDouble},),arg1)
    return err
end

function PetscTime(arg0::Type{Float32},v::Union{Ptr{PetscLogDouble},StridedArray{PetscLogDouble},Ptr{PetscLogDouble},Ref{PetscLogDouble}})
    err = ccall((:PetscTime,petscRealSingle),PetscErrorCode,(Ptr{PetscLogDouble},),v)
    return err
end

function PetscTimeSubtract(arg0::Type{Float32},v::Union{Ptr{PetscLogDouble},StridedArray{PetscLogDouble},Ptr{PetscLogDouble},Ref{PetscLogDouble}})
    err = ccall((:PetscTimeSubtract,petscRealSingle),PetscErrorCode,(Ptr{PetscLogDouble},),v)
    return err
end

function PetscTimeAdd(arg0::Type{Float32},v::Union{Ptr{PetscLogDouble},StridedArray{PetscLogDouble},Ptr{PetscLogDouble},Ref{PetscLogDouble}})
    err = ccall((:PetscTimeAdd,petscRealSingle),PetscErrorCode,(Ptr{PetscLogDouble},),v)
    return err
end

function PetscViewerInitializePackage(arg0::Type{Float32})
    err = ccall((:PetscViewerInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscViewerRegister(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscViewerRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function PetscViewerCreate(arg1::MPI_Comm,arg2::Union{Ptr{PetscViewer{Float32}},StridedArray{PetscViewer{Float32}},Ptr{PetscViewer{Float32}},Ref{PetscViewer{Float32}}})
    err = ccall((:PetscViewerCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{PetscViewer{Float32}}),arg1,arg2)
    return err
end

function PetscViewerSetFromOptions(arg1::PetscViewer{Float32})
    err = ccall((:PetscViewerSetFromOptions,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},),arg1)
    return err
end

#= skipping function with undefined symbols: 
 function PetscViewerASCIIOpenWithFILE(arg1::MPI_Comm,arg2::Union{Ptr{FILE},StridedArray{FILE},Ptr{FILE},Ref{FILE}},arg3::Union{Ptr{PetscViewer{Float32}},StridedArray{PetscViewer{Float32}},Ptr{PetscViewer{Float32}},Ref{PetscViewer{Float32}}})
    ccall((:PetscViewerASCIIOpenWithFILE,petscRealSingle),PetscErrorCode,(comm_type,Ptr{FILE},Ptr{PetscViewer{Float32}}),arg1,arg2,arg3)
end 
=#
function PetscViewerASCIIOpen(arg1::MPI_Comm,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{PetscViewer{Float32}},StridedArray{PetscViewer{Float32}},Ptr{PetscViewer{Float32}},Ref{PetscViewer{Float32}}})
    err = ccall((:PetscViewerASCIIOpen,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Ptr{PetscViewer{Float32}}),arg1,arg2,arg3)
    return err
end

#= skipping function with undefined symbols: 
 function PetscViewerASCIISetFILE(arg1::PetscViewer{Float32},arg2::Union{Ptr{FILE},StridedArray{FILE},Ptr{FILE},Ref{FILE}})
    ccall((:PetscViewerASCIISetFILE,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{FILE}),arg1,arg2)
end 
=#
function PetscViewerBinaryOpen(arg1::MPI_Comm,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::PetscFileMode,arg4::Union{Ptr{PetscViewer{Float32}},StridedArray{PetscViewer{Float32}},Ptr{PetscViewer{Float32}},Ref{PetscViewer{Float32}}})
    err = ccall((:PetscViewerBinaryOpen,petscRealSingle),PetscErrorCode,(comm_type,Cstring,PetscFileMode,Ptr{PetscViewer{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscViewerBinaryGetFlowControl(arg1::PetscViewer{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscViewerBinaryGetFlowControl,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscViewerBinarySetFlowControl(arg1::PetscViewer{Float32},arg2::Integer)
    err = ccall((:PetscViewerBinarySetFlowControl,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Int64),arg1,arg2)
    return err
end

function PetscViewerBinarySetUseMPIIO(arg1::PetscViewer{Float32},arg2::PetscBool)
    err = ccall((:PetscViewerBinarySetUseMPIIO,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},PetscBool),arg1,arg2)
    return err
end

function PetscViewerBinaryGetUseMPIIO(arg1::PetscViewer{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscViewerBinaryGetUseMPIIO,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

#= skipping function with undefined symbols: 
 function PetscViewerBinaryGetMPIIODescriptor(arg1::PetscViewer{Float32},arg2::Union{Ptr{MPI_File},StridedArray{MPI_File},Ptr{MPI_File},Ref{MPI_File}})
    ccall((:PetscViewerBinaryGetMPIIODescriptor,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{MPI_File}),arg1,arg2)
end 
=#
#= skipping function with undefined symbols: 
 function PetscViewerBinaryGetMPIIOOffset(arg1::PetscViewer{Float32},arg2::Union{Ptr{MPI_Offset},StridedArray{MPI_Offset},Ptr{MPI_Offset},Ref{MPI_Offset}})
    ccall((:PetscViewerBinaryGetMPIIOOffset,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{MPI_Offset}),arg1,arg2)
end 
=#
#= skipping function with undefined symbols: 
 function PetscViewerBinaryAddMPIIOOffset(arg1::PetscViewer{Float32},arg2::MPI_Offset)
    ccall((:PetscViewerBinaryAddMPIIOOffset,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},MPI_Offset),arg1,arg2)
end 
=#
function PetscViewerSocketOpen(arg1::MPI_Comm,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer,arg4::Union{Ptr{PetscViewer{Float32}},StridedArray{PetscViewer{Float32}},Ptr{PetscViewer{Float32}},Ref{PetscViewer{Float32}}})
    err = ccall((:PetscViewerSocketOpen,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Cint,Ptr{PetscViewer{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscViewerStringOpen(arg1::MPI_Comm,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Csize_t,arg4::Union{Ptr{PetscViewer{Float32}},StridedArray{PetscViewer{Float32}},Ptr{PetscViewer{Float32}},Ref{PetscViewer{Float32}}})
    err = ccall((:PetscViewerStringOpen,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Csize_t,Ptr{PetscViewer{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscViewerDrawOpen(arg1::MPI_Comm,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Union{Ptr{PetscViewer{Float32}},StridedArray{PetscViewer{Float32}},Ptr{PetscViewer{Float32}},Ref{PetscViewer{Float32}}})
    err = ccall((:PetscViewerDrawOpen,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Cstring,Cint,Cint,Cint,Cint,Ptr{PetscViewer{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function PetscViewerDrawSetDrawType(arg1::PetscViewer{Float32},arg2::PetscDrawType)
    err = ccall((:PetscViewerDrawSetDrawType,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Cstring),arg1,arg2)
    return err
end

function PetscViewerMathematicaOpen(arg1::MPI_Comm,arg2::Integer,arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{Ptr{PetscViewer{Float32}},StridedArray{PetscViewer{Float32}},Ptr{PetscViewer{Float32}},Ref{PetscViewer{Float32}}})
    err = ccall((:PetscViewerMathematicaOpen,petscRealSingle),PetscErrorCode,(comm_type,Cint,Cstring,Cstring,Ptr{PetscViewer{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscViewerSiloOpen(arg1::MPI_Comm,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{PetscViewer{Float32}},StridedArray{PetscViewer{Float32}},Ptr{PetscViewer{Float32}},Ref{PetscViewer{Float32}}})
    err = ccall((:PetscViewerSiloOpen,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Ptr{PetscViewer{Float32}}),arg1,arg2,arg3)
    return err
end

function PetscViewerMatlabOpen(arg1::MPI_Comm,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::PetscFileMode,arg4::Union{Ptr{PetscViewer{Float32}},StridedArray{PetscViewer{Float32}},Ptr{PetscViewer{Float32}},Ref{PetscViewer{Float32}}})
    err = ccall((:PetscViewerMatlabOpen,petscRealSingle),PetscErrorCode,(comm_type,Cstring,PetscFileMode,Ptr{PetscViewer{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscViewerGetType(arg1::PetscViewer{Float32},arg2::Union{Ptr{PetscViewerType},StridedArray{PetscViewerType},Ptr{PetscViewerType},Ref{PetscViewerType}})
    (arg2_,tmp) = symbol_get_before(arg2)
    err = ccall((:PetscViewerGetType,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{Ptr{UInt8}}),arg1,arg2_)
    symbol_get_after(arg2_,arg2)
    return err
end

function PetscViewerSetType(arg1::PetscViewer{Float32},arg2::PetscViewerType)
    err = ccall((:PetscViewerSetType,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Cstring),arg1,arg2)
    return err
end

function PetscViewerDestroy(arg1::Union{Ptr{PetscViewer{Float32}},StridedArray{PetscViewer{Float32}},Ptr{PetscViewer{Float32}},Ref{PetscViewer{Float32}}})
    err = ccall((:PetscViewerDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscViewer{Float32}},),arg1)
    return err
end

function PetscViewerGetSingleton(arg1::PetscViewer{Float32},arg2::Union{Ptr{PetscViewer{Float32}},StridedArray{PetscViewer{Float32}},Ptr{PetscViewer{Float32}},Ref{PetscViewer{Float32}}})
    err = ccall((:PetscViewerGetSingleton,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{PetscViewer{Float32}}),arg1,arg2)
    return err
end

function PetscViewerRestoreSingleton(arg1::PetscViewer{Float32},arg2::Union{Ptr{PetscViewer{Float32}},StridedArray{PetscViewer{Float32}},Ptr{PetscViewer{Float32}},Ref{PetscViewer{Float32}}})
    err = ccall((:PetscViewerRestoreSingleton,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{PetscViewer{Float32}}),arg1,arg2)
    return err
end

function PetscViewerGetSubcomm(arg1::PetscViewer{Float32},arg2::MPI_Comm,arg3::Union{Ptr{PetscViewer{Float32}},StridedArray{PetscViewer{Float32}},Ptr{PetscViewer{Float32}},Ref{PetscViewer{Float32}}})
    err = ccall((:PetscViewerGetSubcomm,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},comm_type,Ptr{PetscViewer{Float32}}),arg1,arg2,arg3)
    return err
end

function PetscViewerRestoreSubcomm(arg1::PetscViewer{Float32},arg2::MPI_Comm,arg3::Union{Ptr{PetscViewer{Float32}},StridedArray{PetscViewer{Float32}},Ptr{PetscViewer{Float32}},Ref{PetscViewer{Float32}}})
    err = ccall((:PetscViewerRestoreSubcomm,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},comm_type,Ptr{PetscViewer{Float32}}),arg1,arg2,arg3)
    return err
end

function PetscViewerSetUp(arg1::PetscViewer{Float32})
    err = ccall((:PetscViewerSetUp,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},),arg1)
    return err
end

function PetscViewerView(arg1::PetscViewer{Float32},arg2::PetscViewer{Float32})
    err = ccall((:PetscViewerView,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},PetscViewer{Float32}),arg1,arg2)
    return err
end

function PetscViewerViewFromOptions(A::PetscViewer{Float32},obj::PetscObject,name::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscViewerViewFromOptions,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},PetscObject,Cstring),A,obj,name)
    return err
end

function PetscViewerSetOptionsPrefix(arg1::PetscViewer{Float32},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscViewerSetOptionsPrefix,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Cstring),arg1,arg2)
    return err
end

function PetscViewerAppendOptionsPrefix(arg1::PetscViewer{Float32},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscViewerAppendOptionsPrefix,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Cstring),arg1,arg2)
    return err
end

function PetscViewerGetOptionsPrefix(arg1::PetscViewer{Float32},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscViewerGetOptionsPrefix,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PetscViewerSetFormat(arg1::PetscViewer{Float32},arg2::PetscViewerFormat)
    err = ccall((:PetscViewerSetFormat,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},PetscViewerFormat),arg1,arg2)
    return err
end

function PetscViewerPushFormat(arg1::PetscViewer{Float32},arg2::PetscViewerFormat)
    err = ccall((:PetscViewerPushFormat,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},PetscViewerFormat),arg1,arg2)
    return err
end

function PetscViewerPopFormat(arg1::PetscViewer{Float32})
    err = ccall((:PetscViewerPopFormat,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},),arg1)
    return err
end

function PetscViewerGetFormat(arg1::PetscViewer{Float32},arg2::Union{Ptr{PetscViewerFormat},StridedArray{PetscViewerFormat},Ptr{PetscViewerFormat},Ref{PetscViewerFormat}})
    err = ccall((:PetscViewerGetFormat,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{PetscViewerFormat}),arg1,arg2)
    return err
end

function PetscViewerFlush(arg1::PetscViewer{Float32})
    err = ccall((:PetscViewerFlush,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},),arg1)
    return err
end

function PetscOptionsGetViewer(arg1::MPI_Comm,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{Ptr{PetscViewer{Float32}},StridedArray{PetscViewer{Float32}},Ptr{PetscViewer{Float32}},Ref{PetscViewer{Float32}}},arg5::Union{Ptr{PetscViewerFormat},StridedArray{PetscViewerFormat},Ptr{PetscViewerFormat},Ref{PetscViewerFormat}},arg6::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetViewer,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Cstring,Ptr{PetscViewer{Float32}},Ptr{PetscViewerFormat},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

#= skipping function with undefined symbols: 
 function PetscOptionsViewer_Private(arg1::Union{Ptr{PetscOptions},StridedArray{PetscOptions},Ptr{PetscOptions},Ref{PetscOptions}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{Ptr{PetscViewer{Float32}},StridedArray{PetscViewer{Float32}},Ptr{PetscViewer{Float32}},Ref{PetscViewer{Float32}}},arg6::Union{Ptr{PetscViewerFormat},StridedArray{PetscViewerFormat},Ptr{PetscViewerFormat},Ref{PetscViewerFormat}},arg7::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:PetscOptionsViewer_Private,petscRealSingle),PetscErrorCode,(Ptr{PetscOptions},Cstring,Cstring,Cstring,Ptr{PetscViewer{Float32}},Ptr{PetscViewerFormat},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end 
=#
#= skipping function with undefined symbols: 
 function PetscViewerASCIIGetPointer(arg1::PetscViewer{Float32},arg2::Union{Ptr{Ptr{FILE}},StridedArray{Ptr{FILE}},Ptr{Ptr{FILE}},Ref{Ptr{FILE}}})
    ccall((:PetscViewerASCIIGetPointer,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{Ptr{FILE}}),arg1,arg2)
end 
=#
function PetscViewerFileGetMode(arg1::PetscViewer{Float32},arg2::Union{Ptr{PetscFileMode},StridedArray{PetscFileMode},Ptr{PetscFileMode},Ref{PetscFileMode}})
    err = ccall((:PetscViewerFileGetMode,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{PetscFileMode}),arg1,arg2)
    return err
end

function PetscViewerFileSetMode(arg1::PetscViewer{Float32},arg2::PetscFileMode)
    err = ccall((:PetscViewerFileSetMode,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},PetscFileMode),arg1,arg2)
    return err
end

function PetscViewerRead(arg1::PetscViewer{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::PetscDataType)
    err = ccall((:PetscViewerRead,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{Void},Int64,Ptr{Int64},PetscDataType),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscViewerASCIISynchronizedAllow(arg1::PetscViewer{Float32},arg2::PetscBool)
    err = ccall((:PetscViewerASCIISynchronizedAllow,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},PetscBool),arg1,arg2)
    return err
end

function PetscViewerASCIIPushTab(arg1::PetscViewer{Float32})
    err = ccall((:PetscViewerASCIIPushTab,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},),arg1)
    return err
end

function PetscViewerASCIIPopTab(arg1::PetscViewer{Float32})
    err = ccall((:PetscViewerASCIIPopTab,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},),arg1)
    return err
end

function PetscViewerASCIIUseTabs(arg1::PetscViewer{Float32},arg2::PetscBool)
    err = ccall((:PetscViewerASCIIUseTabs,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},PetscBool),arg1,arg2)
    return err
end

function PetscViewerASCIISetTab(arg1::PetscViewer{Float32},arg2::Integer)
    err = ccall((:PetscViewerASCIISetTab,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Int64),arg1,arg2)
    return err
end

function PetscViewerASCIIGetTab(arg1::PetscViewer{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscViewerASCIIGetTab,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscViewerASCIIAddTab(arg1::PetscViewer{Float32},arg2::Integer)
    err = ccall((:PetscViewerASCIIAddTab,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Int64),arg1,arg2)
    return err
end

function PetscViewerASCIISubtractTab(arg1::PetscViewer{Float32},arg2::Integer)
    err = ccall((:PetscViewerASCIISubtractTab,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Int64),arg1,arg2)
    return err
end

function PetscViewerASCIIRead(arg1::PetscViewer{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::PetscDataType)
    err = ccall((:PetscViewerASCIIRead,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{Void},Int64,Ptr{Int64},PetscDataType),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscViewerBinaryGetDescriptor(arg1::PetscViewer{Float32},arg2::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:PetscViewerBinaryGetDescriptor,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{Cint}),arg1,arg2)
    return err
end

#= skipping function with undefined symbols: 
 function PetscViewerBinaryGetInfoPointer(arg1::PetscViewer{Float32},arg2::Union{Ptr{Ptr{FILE}},StridedArray{Ptr{FILE}},Ptr{Ptr{FILE}},Ref{Ptr{FILE}}})
    ccall((:PetscViewerBinaryGetInfoPointer,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{Ptr{FILE}}),arg1,arg2)
end 
=#
function PetscViewerBinaryRead(arg1::PetscViewer{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::PetscDataType)
    err = ccall((:PetscViewerBinaryRead,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{Void},Int64,Ptr{Int64},PetscDataType),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscViewerBinaryWrite(arg1::PetscViewer{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Integer,arg4::PetscDataType,arg5::PetscBool)
    err = ccall((:PetscViewerBinaryWrite,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{Void},Int64,PetscDataType,PetscBool),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscViewerStringSetString(arg1::PetscViewer{Float32},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer)
    err = ccall((:PetscViewerStringSetString,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Cstring,Int64),arg1,arg2,arg3)
    return err
end

function PetscViewerDrawClear(arg1::PetscViewer{Float32})
    err = ccall((:PetscViewerDrawClear,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},),arg1)
    return err
end

function PetscViewerDrawSetHold(arg1::PetscViewer{Float32},arg2::PetscBool)
    err = ccall((:PetscViewerDrawSetHold,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},PetscBool),arg1,arg2)
    return err
end

function PetscViewerDrawGetHold(arg1::PetscViewer{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscViewerDrawGetHold,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscViewerDrawSetPause(arg1::PetscViewer{Float32},arg2::Float32)
    err = ccall((:PetscViewerDrawSetPause,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Float32),arg1,arg2)
    return err
end

function PetscViewerDrawGetPause(arg1::PetscViewer{Float32},arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:PetscViewerDrawGetPause,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{Float32}),arg1,arg2)
    return err
end

function PetscViewerDrawSetInfo(arg1::PetscViewer{Float32},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer)
    err = ccall((:PetscViewerDrawSetInfo,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Cstring,Cstring,Cint,Cint,Cint,Cint),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function PetscViewerDrawResize(arg1::PetscViewer{Float32},arg2::Integer,arg3::Integer)
    err = ccall((:PetscViewerDrawResize,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Cint,Cint),arg1,arg2,arg3)
    return err
end

function PetscViewerDrawSetBounds(arg1::PetscViewer{Float32},arg2::Integer,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:PetscViewerDrawSetBounds,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Int64,Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function PetscViewerDrawGetBounds(arg1::PetscViewer{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:PetscViewerDrawGetBounds,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{Int64},Ptr{Ptr{Float32}}),arg1,arg2,arg3)
    return err
end

function PetscViewerSocketSetConnection(arg1::PetscViewer{Float32},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer)
    err = ccall((:PetscViewerSocketSetConnection,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Cstring,Cint),arg1,arg2,arg3)
    return err
end

function PetscViewerBinarySkipInfo(arg1::PetscViewer{Float32})
    err = ccall((:PetscViewerBinarySkipInfo,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},),arg1)
    return err
end

function PetscViewerBinarySetSkipInfo(arg1::PetscViewer{Float32},arg2::PetscBool)
    err = ccall((:PetscViewerBinarySetSkipInfo,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},PetscBool),arg1,arg2)
    return err
end

function PetscViewerBinaryGetSkipInfo(arg1::PetscViewer{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscViewerBinaryGetSkipInfo,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscViewerBinarySetSkipOptions(arg1::PetscViewer{Float32},arg2::PetscBool)
    err = ccall((:PetscViewerBinarySetSkipOptions,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},PetscBool),arg1,arg2)
    return err
end

function PetscViewerBinaryGetSkipOptions(arg1::PetscViewer{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscViewerBinaryGetSkipOptions,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscViewerBinarySetSkipHeader(arg1::PetscViewer{Float32},arg2::PetscBool)
    err = ccall((:PetscViewerBinarySetSkipHeader,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},PetscBool),arg1,arg2)
    return err
end

function PetscViewerBinaryGetSkipHeader(arg1::PetscViewer{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscViewerBinaryGetSkipHeader,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscViewerBinaryReadStringArray(arg1::PetscViewer{Float32},arg2::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}})
    err = ccall((:PetscViewerBinaryReadStringArray,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{Ptr{Ptr{UInt8}}}),arg1,arg2)
    return err
end

function PetscViewerBinaryWriteStringArray(arg1::PetscViewer{Float32},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscViewerBinaryWriteStringArray,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PetscViewerFileSetName(arg1::PetscViewer{Float32},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscViewerFileSetName,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Cstring),arg1,arg2)
    return err
end

function PetscViewerFileGetName(arg1::PetscViewer{Float32},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscViewerFileGetName,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

#= skipping function with undefined symbols: 
 function PetscViewerVUGetPointer(arg1::PetscViewer{Float32},arg2::Union{Ptr{Ptr{FILE}},StridedArray{Ptr{FILE}},Ptr{Ptr{FILE}},Ref{Ptr{FILE}}})
    ccall((:PetscViewerVUGetPointer,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{Ptr{FILE}}),arg1,arg2)
end 
=#
function PetscViewerVUSetVecSeen(arg1::PetscViewer{Float32},arg2::PetscBool)
    err = ccall((:PetscViewerVUSetVecSeen,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},PetscBool),arg1,arg2)
    return err
end

function PetscViewerVUGetVecSeen(arg1::PetscViewer{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscViewerVUGetVecSeen,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscViewerVUFlushDeferred(arg1::PetscViewer{Float32})
    err = ccall((:PetscViewerVUFlushDeferred,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},),arg1)
    return err
end

function PetscViewerMathematicaInitializePackage(arg0::Type{Float32})
    err = ccall((:PetscViewerMathematicaInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscViewerMathematicaFinalizePackage(arg0::Type{Float32})
    err = ccall((:PetscViewerMathematicaFinalizePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscViewerMathematicaGetName(arg1::PetscViewer{Float32},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscViewerMathematicaGetName,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PetscViewerMathematicaSetName(arg1::PetscViewer{Float32},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscViewerMathematicaSetName,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Cstring),arg1,arg2)
    return err
end

function PetscViewerMathematicaClearName(arg1::PetscViewer{Float32})
    err = ccall((:PetscViewerMathematicaClearName,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},),arg1)
    return err
end

function PetscViewerMathematicaSkipPackets(arg1::PetscViewer{Float32},arg2::Integer)
    err = ccall((:PetscViewerMathematicaSkipPackets,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Cint),arg1,arg2)
    return err
end

function PetscViewerSiloGetName(arg1::PetscViewer{Float32},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscViewerSiloGetName,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PetscViewerSiloSetName(arg1::PetscViewer{Float32},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscViewerSiloSetName,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Cstring),arg1,arg2)
    return err
end

function PetscViewerSiloClearName(arg1::PetscViewer{Float32})
    err = ccall((:PetscViewerSiloClearName,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},),arg1)
    return err
end

function PetscViewerSiloGetMeshName(arg1::PetscViewer{Float32},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscViewerSiloGetMeshName,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PetscViewerSiloSetMeshName(arg1::PetscViewer{Float32},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscViewerSiloSetMeshName,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Cstring),arg1,arg2)
    return err
end

function PetscViewerSiloClearMeshName(arg1::PetscViewer{Float32})
    err = ccall((:PetscViewerSiloClearMeshName,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},),arg1)
    return err
end

function PetscViewerNetcdfOpen(arg1::MPI_Comm,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::PetscFileMode,arg4::Union{Ptr{PetscViewer{Float32}},StridedArray{PetscViewer{Float32}},Ptr{PetscViewer{Float32}},Ref{PetscViewer{Float32}}})
    err = ccall((:PetscViewerNetcdfOpen,petscRealSingle),PetscErrorCode,(comm_type,Cstring,PetscFileMode,Ptr{PetscViewer{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscViewerNetcdfGetID(arg1::PetscViewer{Float32},arg2::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:PetscViewerNetcdfGetID,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{Cint}),arg1,arg2)
    return err
end

function PetscViewerVTKAddField(arg1::PetscViewer{Float32},arg2::PetscObject,PetscViewerVTKWriteFunction::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::PetscViewerVTKFieldType,arg4::PetscObject)
    err = ccall((:PetscViewerVTKAddField,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},PetscObject,Ptr{Void},PetscViewerVTKFieldType,PetscObject),arg1,arg2,PetscViewerVTKWriteFunction,arg3,arg4)
    return err
end

function PetscViewerVTKOpen(arg1::MPI_Comm,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::PetscFileMode,arg4::Union{Ptr{PetscViewer{Float32}},StridedArray{PetscViewer{Float32}},Ptr{PetscViewer{Float32}},Ref{PetscViewer{Float32}}})
    err = ccall((:PetscViewerVTKOpen,petscRealSingle),PetscErrorCode,(comm_type,Cstring,PetscFileMode,Ptr{PetscViewer{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function PETSC_VIEWER_STDOUT_(arg0::Type{Float32},arg1::MPI_Comm)
    err = ccall((:PETSC_VIEWER_STDOUT_,petscRealSingle),PetscViewer,(comm_type,),arg1)
    return err
end

function PetscViewerASCIIGetStdout(arg1::MPI_Comm,arg2::Union{Ptr{PetscViewer{Float32}},StridedArray{PetscViewer{Float32}},Ptr{PetscViewer{Float32}},Ref{PetscViewer{Float32}}})
    err = ccall((:PetscViewerASCIIGetStdout,petscRealSingle),PetscErrorCode,(comm_type,Ptr{PetscViewer{Float32}}),arg1,arg2)
    return err
end

function PETSC_VIEWER_STDERR_(arg0::Type{Float32},arg1::MPI_Comm)
    err = ccall((:PETSC_VIEWER_STDERR_,petscRealSingle),PetscViewer,(comm_type,),arg1)
    return err
end

function PetscViewerASCIIGetStderr(arg1::MPI_Comm,arg2::Union{Ptr{PetscViewer{Float32}},StridedArray{PetscViewer{Float32}},Ptr{PetscViewer{Float32}},Ref{PetscViewer{Float32}}})
    err = ccall((:PetscViewerASCIIGetStderr,petscRealSingle),PetscErrorCode,(comm_type,Ptr{PetscViewer{Float32}}),arg1,arg2)
    return err
end

function PETSC_VIEWER_DRAW_(arg0::Type{Float32},arg1::MPI_Comm)
    err = ccall((:PETSC_VIEWER_DRAW_,petscRealSingle),PetscViewer,(comm_type,),arg1)
    return err
end

function PETSC_VIEWER_SOCKET_(arg0::Type{Float32},arg1::MPI_Comm)
    err = ccall((:PETSC_VIEWER_SOCKET_,petscRealSingle),PetscViewer,(comm_type,),arg1)
    return err
end

function PETSC_VIEWER_BINARY_(arg0::Type{Float32},arg1::MPI_Comm)
    err = ccall((:PETSC_VIEWER_BINARY_,petscRealSingle),PetscViewer,(comm_type,),arg1)
    return err
end

function PETSC_VIEWER_MATLAB_(arg0::Type{Float32},arg1::MPI_Comm)
    err = ccall((:PETSC_VIEWER_MATLAB_,petscRealSingle),PetscViewer,(comm_type,),arg1)
    return err
end

function PETSC_VIEWER_HDF5_(arg0::Type{Float32},arg1::MPI_Comm)
    err = ccall((:PETSC_VIEWER_HDF5_,petscRealSingle),PetscViewer,(comm_type,),arg1)
    return err
end

function PetscViewerFlowControlStart(viewer::PetscViewer{Float32},mcnt::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},cnt::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscViewerFlowControlStart,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{Int64},Ptr{Int64}),viewer,mcnt,cnt)
    return err
end

function PetscViewerFlowControlStepMaster(viewer::PetscViewer{Float32},i::Integer,mcnt::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},cnt::Integer)
    err = ccall((:PetscViewerFlowControlStepMaster,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Int64,Ptr{Int64},Int64),viewer,i,mcnt,cnt)
    return err
end

function PetscViewerFlowControlEndMaster(viewer::PetscViewer{Float32},mcnt::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscViewerFlowControlEndMaster,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{Int64}),viewer,mcnt)
    return err
end

function PetscViewerFlowControlStepWorker(viewer::PetscViewer{Float32},rank::PetscMPIInt,mcnt::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscViewerFlowControlStepWorker,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},PetscMPIInt,Ptr{Int64}),viewer,rank,mcnt)
    return err
end

function PetscViewerFlowControlEndWorker(viewer::PetscViewer{Float32},mcnt::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscViewerFlowControlEndWorker,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{Int64}),viewer,mcnt)
    return err
end

function PetscViewerMatlabPutArray(arg1::PetscViewer{Float32},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscViewerMatlabPutArray,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Cint,Cint,Ptr{Float32},Cstring),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscViewerMatlabGetArray(arg1::PetscViewer{Float32},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscViewerMatlabGetArray,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Cint,Cint,Ptr{Float32},Cstring),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscViewerMatlabPutVariable(arg1::PetscViewer{Float32},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscViewerMatlabPutVariable,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Cstring,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function PetscViewersCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{PetscViewers},StridedArray{PetscViewers},Ptr{PetscViewers},Ref{PetscViewers}})
    err = ccall((:PetscViewersCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{PetscViewers}),arg1,arg2)
    return err
end

function PetscViewersDestroy(arg0::Type{Float32},arg1::Union{Ptr{PetscViewers},StridedArray{PetscViewers},Ptr{PetscViewers},Ref{PetscViewers}})
    err = ccall((:PetscViewersDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscViewers},),arg1)
    return err
end

function PetscViewersGetViewer(arg1::PetscViewers,arg2::Integer,arg3::Union{Ptr{PetscViewer{Float32}},StridedArray{PetscViewer{Float32}},Ptr{PetscViewer{Float32}},Ref{PetscViewer{Float32}}})
    err = ccall((:PetscViewersGetViewer,petscRealSingle),PetscErrorCode,(PetscViewers,Int64,Ptr{PetscViewer{Float32}}),arg1,arg2,arg3)
    return err
end

function PetscBTLength(arg0::Type{Float32},m::Integer)
    err = ccall((:PetscBTLength,petscRealSingle),PetscInt,(Int64,),m)
    return err
end

function PetscBTMemzero(arg0::Type{Float32},m::Integer,array::PetscBT)
    err = ccall((:PetscBTMemzero,petscRealSingle),PetscErrorCode,(Int64,Cstring),m,array)
    return err
end

function PetscBTDestroy(arg0::Type{Float32},array::Union{Ptr{PetscBT},StridedArray{PetscBT},Ptr{PetscBT},Ref{PetscBT}})
    err = ccall((:PetscBTDestroy,petscRealSingle),PetscErrorCode,(Ptr{Ptr{UInt8}},),array)
    return err
end

function PetscBTLookup(arg0::Type{Float32},array::PetscBT,index::Integer)
    err = ccall((:PetscBTLookup,petscRealSingle),UInt8,(Cstring,Int64),array,index)
    return err
end

function PetscBTView(m::Integer,bt::PetscBT,viewer::PetscViewer{Float32})
    err = ccall((:PetscBTView,petscRealSingle),PetscErrorCode,(Int64,Cstring,PetscViewer{Float32}),m,bt,viewer)
    return err
end

function PetscBTCreate(arg0::Type{Float32},m::Integer,array::Union{Ptr{PetscBT},StridedArray{PetscBT},Ptr{PetscBT},Ref{PetscBT}})
    err = ccall((:PetscBTCreate,petscRealSingle),PetscErrorCode,(Int64,Ptr{Ptr{UInt8}}),m,array)
    return err
end

function PetscBTLookupSet(arg0::Type{Float32},array::PetscBT,index::Integer)
    err = ccall((:PetscBTLookupSet,petscRealSingle),UInt8,(Cstring,Int64),array,index)
    return err
end

function PetscBTSet(arg0::Type{Float32},array::PetscBT,index::Integer)
    err = ccall((:PetscBTSet,petscRealSingle),PetscErrorCode,(Cstring,Int64),array,index)
    return err
end

function PetscBTNegate(arg0::Type{Float32},array::PetscBT,index::Integer)
    err = ccall((:PetscBTNegate,petscRealSingle),PetscErrorCode,(Cstring,Int64),array,index)
    return err
end

function PetscBTLookupClear(arg0::Type{Float32},array::PetscBT,index::Integer)
    err = ccall((:PetscBTLookupClear,petscRealSingle),UInt8,(Cstring,Int64),array,index)
    return err
end

function PetscBTClear(arg0::Type{Float32},array::PetscBT,index::Integer)
    err = ccall((:PetscBTClear,petscRealSingle),PetscErrorCode,(Cstring,Int64),array,index)
    return err
end

#= skipping function with undefined symbols: 
 function PetscHash(arg0::Type{Float32},ta::PetscTable,x::Culong)
    ccall((:PetscHash,petscRealSingle),Culong,(PetscTable,Culong),ta,x)
end 
=#
#= skipping function with undefined symbols: 
 function PetscTableCreate(arg0::Type{Float32},arg1::Integer,arg2::Integer,arg3::Union{Ptr{PetscTable},StridedArray{PetscTable},Ptr{PetscTable},Ref{PetscTable}})
    ccall((:PetscTableCreate,petscRealSingle),PetscErrorCode,(Int64,Int64,Ptr{PetscTable}),arg1,arg2,arg3)
end 
=#
#= skipping function with undefined symbols: 
 function PetscTableCreateCopy(arg0::Type{Float32},arg1::PetscTable,arg2::Union{Ptr{PetscTable},StridedArray{PetscTable},Ptr{PetscTable},Ref{PetscTable}})
    ccall((:PetscTableCreateCopy,petscRealSingle),PetscErrorCode,(PetscTable,Ptr{PetscTable}),arg1,arg2)
end 
=#
#= skipping function with undefined symbols: 
 function PetscTableDestroy(arg0::Type{Float32},arg1::Union{Ptr{PetscTable},StridedArray{PetscTable},Ptr{PetscTable},Ref{PetscTable}})
    ccall((:PetscTableDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscTable},),arg1)
end 
=#
#= skipping function with undefined symbols: 
 function PetscTableGetCount(arg0::Type{Float32},arg1::PetscTable,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:PetscTableGetCount,petscRealSingle),PetscErrorCode,(PetscTable,Ptr{Int64}),arg1,arg2)
end 
=#
#= skipping function with undefined symbols: 
 function PetscTableIsEmpty(arg0::Type{Float32},arg1::PetscTable,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:PetscTableIsEmpty,petscRealSingle),PetscErrorCode,(PetscTable,Ptr{Int64}),arg1,arg2)
end 
=#
#= skipping function with undefined symbols: 
 function PetscTableAddExpand(arg0::Type{Float32},arg1::PetscTable,arg2::Integer,arg3::Integer,arg4::InsertMode)
    ccall((:PetscTableAddExpand,petscRealSingle),PetscErrorCode,(PetscTable,Int64,Int64,InsertMode),arg1,arg2,arg3,arg4)
end 
=#
#= skipping function with undefined symbols: 
 function PetscTableAddCountExpand(arg0::Type{Float32},arg1::PetscTable,arg2::Integer)
    ccall((:PetscTableAddCountExpand,petscRealSingle),PetscErrorCode,(PetscTable,Int64),arg1,arg2)
end 
=#
#= skipping function with undefined symbols: 
 function PetscTableGetHeadPosition(arg0::Type{Float32},arg1::PetscTable,arg2::Union{Ptr{PetscTablePosition},StridedArray{PetscTablePosition},Ptr{PetscTablePosition},Ref{PetscTablePosition}})
    ccall((:PetscTableGetHeadPosition,petscRealSingle),PetscErrorCode,(PetscTable,Ptr{PetscTablePosition}),arg1,arg2)
end 
=#
#= skipping function with undefined symbols: 
 function PetscTableGetNext(arg0::Type{Float32},arg1::PetscTable,arg2::Union{Ptr{PetscTablePosition},StridedArray{PetscTablePosition},Ptr{PetscTablePosition},Ref{PetscTablePosition}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:PetscTableGetNext,petscRealSingle),PetscErrorCode,(PetscTable,Ptr{PetscTablePosition},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
end 
=#
#= skipping function with undefined symbols: 
 function PetscTableRemoveAll(arg0::Type{Float32},arg1::PetscTable)
    ccall((:PetscTableRemoveAll,petscRealSingle),PetscErrorCode,(PetscTable,),arg1)
end 
=#
#= skipping function with undefined symbols: 
 function PetscTableAdd(arg0::Type{Float32},ta::PetscTable,key::Integer,data::Integer,imode::InsertMode)
    ccall((:PetscTableAdd,petscRealSingle),PetscErrorCode,(PetscTable,Int64,Int64,InsertMode),ta,key,data,imode)
end 
=#
#= skipping function with undefined symbols: 
 function PetscTableAddCount(arg0::Type{Float32},ta::PetscTable,key::Integer)
    ccall((:PetscTableAddCount,petscRealSingle),PetscErrorCode,(PetscTable,Int64),ta,key)
end 
=#
#= skipping function with undefined symbols: 
 function PetscTableFind(arg0::Type{Float32},ta::PetscTable,key::Integer,data::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:PetscTableFind,petscRealSingle),PetscErrorCode,(PetscTable,Int64,Ptr{Int64}),ta,key,data)
end 
=#
function PetscMatlabEngineCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{PetscMatlabEngine},StridedArray{PetscMatlabEngine},Ptr{PetscMatlabEngine},Ref{PetscMatlabEngine}})
    err = ccall((:PetscMatlabEngineCreate,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Ptr{PetscMatlabEngine}),arg1,arg2,arg3)
    return err
end

function PetscMatlabEngineDestroy(arg0::Type{Float32},arg1::Union{Ptr{PetscMatlabEngine},StridedArray{PetscMatlabEngine},Ptr{PetscMatlabEngine},Ref{PetscMatlabEngine}})
    err = ccall((:PetscMatlabEngineDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscMatlabEngine},),arg1)
    return err
end

function PetscMatlabEngineGetOutput(arg0::Type{Float32},arg1::PetscMatlabEngine,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscMatlabEngineGetOutput,petscRealSingle),PetscErrorCode,(PetscMatlabEngine,Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

#= skipping function with undefined symbols: 
 function PetscMatlabEnginePrintOutput(arg0::Type{Float32},arg1::PetscMatlabEngine,arg2::Union{Ptr{FILE},StridedArray{FILE},Ptr{FILE},Ref{FILE}})
    ccall((:PetscMatlabEnginePrintOutput,petscRealSingle),PetscErrorCode,(PetscMatlabEngine,Ptr{FILE}),arg1,arg2)
end 
=#
function PetscMatlabEnginePut(arg0::Type{Float32},arg1::PetscMatlabEngine,arg2::PetscObject)
    err = ccall((:PetscMatlabEnginePut,petscRealSingle),PetscErrorCode,(PetscMatlabEngine,PetscObject),arg1,arg2)
    return err
end

function PetscMatlabEngineGet(arg0::Type{Float32},arg1::PetscMatlabEngine,arg2::PetscObject)
    err = ccall((:PetscMatlabEngineGet,petscRealSingle),PetscErrorCode,(PetscMatlabEngine,PetscObject),arg1,arg2)
    return err
end

function PetscMatlabEnginePutArray(arg0::Type{Float32},arg1::PetscMatlabEngine,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscMatlabEnginePutArray,petscRealSingle),PetscErrorCode,(PetscMatlabEngine,Cint,Cint,Ptr{Float32},Cstring),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscMatlabEngineGetArray(arg0::Type{Float32},arg1::PetscMatlabEngine,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscMatlabEngineGetArray,petscRealSingle),PetscErrorCode,(PetscMatlabEngine,Cint,Cint,Ptr{Float32},Cstring),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PETSC_MATLAB_ENGINE_(arg0::Type{Float32},arg1::MPI_Comm)
    err = ccall((:PETSC_MATLAB_ENGINE_,petscRealSingle),PetscMatlabEngine,(comm_type,),arg1)
    return err
end

function PetscDrawInitializePackage(arg0::Type{Float32})
    err = ccall((:PetscDrawInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscDrawRegister(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscDrawRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function PetscDrawGetType(arg0::Type{Float32},arg1::PetscDraw,arg2::Union{Ptr{PetscDrawType},StridedArray{PetscDrawType},Ptr{PetscDrawType},Ref{PetscDrawType}})
    (arg2_,tmp) = symbol_get_before(arg2)
    err = ccall((:PetscDrawGetType,petscRealSingle),PetscErrorCode,(PetscDraw,Ptr{Ptr{UInt8}}),arg1,arg2_)
    symbol_get_after(arg2_,arg2)
    return err
end

function PetscDrawSetType(arg0::Type{Float32},arg1::PetscDraw,arg2::PetscDrawType)
    err = ccall((:PetscDrawSetType,petscRealSingle),PetscErrorCode,(PetscDraw,Cstring),arg1,arg2)
    return err
end

function PetscDrawCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Union{Ptr{PetscDraw},StridedArray{PetscDraw},Ptr{PetscDraw},Ref{PetscDraw}})
    err = ccall((:PetscDrawCreate,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Cstring,Cint,Cint,Cint,Cint,Ptr{PetscDraw}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function PetscDrawSetFromOptions(arg0::Type{Float32},arg1::PetscDraw)
    err = ccall((:PetscDrawSetFromOptions,petscRealSingle),PetscErrorCode,(PetscDraw,),arg1)
    return err
end

function PetscDrawSetSave(arg0::Type{Float32},arg1::PetscDraw,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::PetscBool)
    err = ccall((:PetscDrawSetSave,petscRealSingle),PetscErrorCode,(PetscDraw,Cstring,PetscBool),arg1,arg2,arg3)
    return err
end

function PetscDrawSetSaveFinalImage(arg0::Type{Float32},arg1::PetscDraw,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscDrawSetSaveFinalImage,petscRealSingle),PetscErrorCode,(PetscDraw,Cstring),arg1,arg2)
    return err
end

function PetscDrawView(arg1::PetscDraw,arg2::PetscViewer{Float32})
    err = ccall((:PetscDrawView,petscRealSingle),PetscErrorCode,(PetscDraw,PetscViewer{Float32}),arg1,arg2)
    return err
end

function PetscDrawViewFromOptions(arg0::Type{Float32},A::PetscDraw,obj::PetscObject,name::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscDrawViewFromOptions,petscRealSingle),PetscErrorCode,(PetscDraw,PetscObject,Cstring),A,obj,name)
    return err
end

function PetscDrawOpenX(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Union{Ptr{PetscDraw},StridedArray{PetscDraw},Ptr{PetscDraw},Ref{PetscDraw}})
    err = ccall((:PetscDrawOpenX,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Cstring,Cint,Cint,Cint,Cint,Ptr{PetscDraw}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function PetscDrawOpenGLUT(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Union{Ptr{PetscDraw},StridedArray{PetscDraw},Ptr{PetscDraw},Ref{PetscDraw}})
    err = ccall((:PetscDrawOpenGLUT,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Cstring,Cint,Cint,Cint,Cint,Ptr{PetscDraw}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function PetscDrawOpenNull(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{PetscDraw},StridedArray{PetscDraw},Ptr{PetscDraw},Ref{PetscDraw}})
    err = ccall((:PetscDrawOpenNull,petscRealSingle),PetscErrorCode,(comm_type,Ptr{PetscDraw}),arg1,arg2)
    return err
end

function PetscDrawDestroy(arg0::Type{Float32},arg1::Union{Ptr{PetscDraw},StridedArray{PetscDraw},Ptr{PetscDraw},Ref{PetscDraw}})
    err = ccall((:PetscDrawDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscDraw},),arg1)
    return err
end

function PetscDrawIsNull(arg0::Type{Float32},arg1::PetscDraw,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscDrawIsNull,petscRealSingle),PetscErrorCode,(PetscDraw,Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscDrawGetPopup(arg0::Type{Float32},arg1::PetscDraw,arg2::Union{Ptr{PetscDraw},StridedArray{PetscDraw},Ptr{PetscDraw},Ref{PetscDraw}})
    err = ccall((:PetscDrawGetPopup,petscRealSingle),PetscErrorCode,(PetscDraw,Ptr{PetscDraw}),arg1,arg2)
    return err
end

function PetscDrawCheckResizedWindow(arg0::Type{Float32},arg1::PetscDraw)
    err = ccall((:PetscDrawCheckResizedWindow,petscRealSingle),PetscErrorCode,(PetscDraw,),arg1)
    return err
end

function PetscDrawResizeWindow(arg0::Type{Float32},arg1::PetscDraw,arg2::Integer,arg3::Integer)
    err = ccall((:PetscDrawResizeWindow,petscRealSingle),PetscErrorCode,(PetscDraw,Cint,Cint),arg1,arg2,arg3)
    return err
end

function PetscDrawScalePopup(arg0::Type{Float32},arg1::PetscDraw,arg2::Float32,arg3::Float32)
    err = ccall((:PetscDrawScalePopup,petscRealSingle),PetscErrorCode,(PetscDraw,Float32,Float32),arg1,arg2,arg3)
    return err
end

function PetscDrawPixelToCoordinate(arg0::Type{Float32},arg1::PetscDraw,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:PetscDrawPixelToCoordinate,petscRealSingle),PetscErrorCode,(PetscDraw,Int64,Int64,Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDrawCoordinateToPixel(arg0::Type{Float32},arg1::PetscDraw,arg2::Float32,arg3::Float32,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscDrawCoordinateToPixel,petscRealSingle),PetscErrorCode,(PetscDraw,Float32,Float32,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDrawIndicatorFunction(arg0::Type{Float32},arg1::PetscDraw,arg2::Float32,arg3::Float32,arg4::Float32,arg5::Float32,arg6::Integer,arg7::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg8::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscDrawIndicatorFunction,petscRealSingle),PetscErrorCode,(PetscDraw,Float32,Float32,Float32,Float32,Cint,Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function PetscDrawLine(arg0::Type{Float32},arg1::PetscDraw,arg2::Float32,arg3::Float32,arg4::Float32,arg5::Float32,arg6::Integer)
    err = ccall((:PetscDrawLine,petscRealSingle),PetscErrorCode,(PetscDraw,Float32,Float32,Float32,Float32,Cint),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscDrawArrow(arg0::Type{Float32},arg1::PetscDraw,arg2::Float32,arg3::Float32,arg4::Float32,arg5::Float32,arg6::Integer)
    err = ccall((:PetscDrawArrow,petscRealSingle),PetscErrorCode,(PetscDraw,Float32,Float32,Float32,Float32,Cint),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscDrawLineSetWidth(arg0::Type{Float32},arg1::PetscDraw,arg2::Float32)
    err = ccall((:PetscDrawLineSetWidth,petscRealSingle),PetscErrorCode,(PetscDraw,Float32),arg1,arg2)
    return err
end

function PetscDrawLineGetWidth(arg0::Type{Float32},arg1::PetscDraw,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:PetscDrawLineGetWidth,petscRealSingle),PetscErrorCode,(PetscDraw,Ptr{Float32}),arg1,arg2)
    return err
end

function PetscDrawMarker(arg0::Type{Float32},arg1::PetscDraw,arg2::Float32,arg3::Float32,arg4::Integer)
    err = ccall((:PetscDrawMarker,petscRealSingle),PetscErrorCode,(PetscDraw,Float32,Float32,Cint),arg1,arg2,arg3,arg4)
    return err
end

function PetscDrawSetMarkerType(arg0::Type{Float32},arg1::PetscDraw,arg2::PetscDrawMarkerType)
    err = ccall((:PetscDrawSetMarkerType,petscRealSingle),PetscErrorCode,(PetscDraw,PetscDrawMarkerType),arg1,arg2)
    return err
end

function PetscDrawGetMarkerType(arg0::Type{Float32},arg1::PetscDraw,arg2::Union{Ptr{PetscDrawMarkerType},StridedArray{PetscDrawMarkerType},Ptr{PetscDrawMarkerType},Ref{PetscDrawMarkerType}})
    err = ccall((:PetscDrawGetMarkerType,petscRealSingle),PetscErrorCode,(PetscDraw,Ptr{PetscDrawMarkerType}),arg1,arg2)
    return err
end

function PetscDrawPoint(arg0::Type{Float32},arg1::PetscDraw,arg2::Float32,arg3::Float32,arg4::Integer)
    err = ccall((:PetscDrawPoint,petscRealSingle),PetscErrorCode,(PetscDraw,Float32,Float32,Cint),arg1,arg2,arg3,arg4)
    return err
end

function PetscDrawPointPixel(arg0::Type{Float32},arg1::PetscDraw,arg2::Integer,arg3::Integer,arg4::Integer)
    err = ccall((:PetscDrawPointPixel,petscRealSingle),PetscErrorCode,(PetscDraw,Int64,Int64,Cint),arg1,arg2,arg3,arg4)
    return err
end

function PetscDrawPointSetSize(arg0::Type{Float32},arg1::PetscDraw,arg2::Float32)
    err = ccall((:PetscDrawPointSetSize,petscRealSingle),PetscErrorCode,(PetscDraw,Float32),arg1,arg2)
    return err
end

function PetscDrawRectangle(arg0::Type{Float32},arg1::PetscDraw,arg2::Float32,arg3::Float32,arg4::Float32,arg5::Float32,arg6::Integer,arg7::Integer,arg8::Integer,arg9::Integer)
    err = ccall((:PetscDrawRectangle,petscRealSingle),PetscErrorCode,(PetscDraw,Float32,Float32,Float32,Float32,Cint,Cint,Cint,Cint),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
    return err
end

function PetscDrawTriangle(arg0::Type{Float32},arg1::PetscDraw,arg2::Float32,arg3::Float32,arg4::Float32,arg5::Float32,arg6::Float32,arg7::Float32,arg8::Integer,arg9::Integer,arg10::Integer)
    err = ccall((:PetscDrawTriangle,petscRealSingle),PetscErrorCode,(PetscDraw,Float32,Float32,Float32,Float32,Float32,Float32,Cint,Cint,Cint),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function PetscDrawEllipse(arg0::Type{Float32},arg1::PetscDraw,arg2::Float32,arg3::Float32,arg4::Float32,arg5::Float32,arg6::Integer)
    err = ccall((:PetscDrawEllipse,petscRealSingle),PetscErrorCode,(PetscDraw,Float32,Float32,Float32,Float32,Cint),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscDrawTensorContourPatch(arg0::Type{Float32},arg1::PetscDraw,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::Float32,arg7::Float32,arg8::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:PetscDrawTensorContourPatch,petscRealSingle),PetscErrorCode,(PetscDraw,Cint,Cint,Ptr{Float32},Ptr{Float32},Float32,Float32,Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function PetscDrawTensorContour(arg0::Type{Float32},arg1::PetscDraw,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:PetscDrawTensorContour,petscRealSingle),PetscErrorCode,(PetscDraw,Cint,Cint,Ptr{Float32},Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscDrawString(arg0::Type{Float32},arg1::PetscDraw,arg2::Float32,arg3::Float32,arg4::Integer,arg5::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscDrawString,petscRealSingle),PetscErrorCode,(PetscDraw,Float32,Float32,Cint,Cstring),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDrawStringCentered(arg0::Type{Float32},arg1::PetscDraw,arg2::Float32,arg3::Float32,arg4::Integer,arg5::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscDrawStringCentered,petscRealSingle),PetscErrorCode,(PetscDraw,Float32,Float32,Cint,Cstring),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDrawStringBoxed(arg0::Type{Float32},arg1::PetscDraw,arg2::Float32,arg3::Float32,arg4::Integer,arg5::Integer,arg6::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg7::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg8::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:PetscDrawStringBoxed,petscRealSingle),PetscErrorCode,(PetscDraw,Float32,Float32,Cint,Cint,Cstring,Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function PetscDrawStringBoxedSize(arg0::Type{Float32},arg1::PetscDraw,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:PetscDrawStringBoxedSize,petscRealSingle),PetscErrorCode,(PetscDraw,Cstring,Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function PetscDrawStringVertical(arg0::Type{Float32},arg1::PetscDraw,arg2::Float32,arg3::Float32,arg4::Integer,arg5::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscDrawStringVertical,petscRealSingle),PetscErrorCode,(PetscDraw,Float32,Float32,Cint,Cstring),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDrawStringSetSize(arg0::Type{Float32},arg1::PetscDraw,arg2::Float32,arg3::Float32)
    err = ccall((:PetscDrawStringSetSize,petscRealSingle),PetscErrorCode,(PetscDraw,Float32,Float32),arg1,arg2,arg3)
    return err
end

function PetscDrawStringGetSize(arg0::Type{Float32},arg1::PetscDraw,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:PetscDrawStringGetSize,petscRealSingle),PetscErrorCode,(PetscDraw,Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function PetscDrawSetViewPort(arg0::Type{Float32},arg1::PetscDraw,arg2::Float32,arg3::Float32,arg4::Float32,arg5::Float32)
    err = ccall((:PetscDrawSetViewPort,petscRealSingle),PetscErrorCode,(PetscDraw,Float32,Float32,Float32,Float32),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDrawGetViewPort(arg0::Type{Float32},arg1::PetscDraw,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:PetscDrawGetViewPort,petscRealSingle),PetscErrorCode,(PetscDraw,Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDrawSplitViewPort(arg0::Type{Float32},arg1::PetscDraw)
    err = ccall((:PetscDrawSplitViewPort,petscRealSingle),PetscErrorCode,(PetscDraw,),arg1)
    return err
end

function PetscDrawSetCoordinates(arg0::Type{Float32},arg1::PetscDraw,arg2::Float32,arg3::Float32,arg4::Float32,arg5::Float32)
    err = ccall((:PetscDrawSetCoordinates,petscRealSingle),PetscErrorCode,(PetscDraw,Float32,Float32,Float32,Float32),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDrawGetCoordinates(arg0::Type{Float32},arg1::PetscDraw,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:PetscDrawGetCoordinates,petscRealSingle),PetscErrorCode,(PetscDraw,Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDrawSetTitle(arg0::Type{Float32},arg1::PetscDraw,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscDrawSetTitle,petscRealSingle),PetscErrorCode,(PetscDraw,Cstring),arg1,arg2)
    return err
end

function PetscDrawAppendTitle(arg0::Type{Float32},arg1::PetscDraw,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscDrawAppendTitle,petscRealSingle),PetscErrorCode,(PetscDraw,Cstring),arg1,arg2)
    return err
end

function PetscDrawGetTitle(arg0::Type{Float32},arg1::PetscDraw,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscDrawGetTitle,petscRealSingle),PetscErrorCode,(PetscDraw,Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PetscDrawSetPause(arg0::Type{Float32},arg1::PetscDraw,arg2::Float32)
    err = ccall((:PetscDrawSetPause,petscRealSingle),PetscErrorCode,(PetscDraw,Float32),arg1,arg2)
    return err
end

function PetscDrawGetPause(arg0::Type{Float32},arg1::PetscDraw,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:PetscDrawGetPause,petscRealSingle),PetscErrorCode,(PetscDraw,Ptr{Float32}),arg1,arg2)
    return err
end

function PetscDrawPause(arg0::Type{Float32},arg1::PetscDraw)
    err = ccall((:PetscDrawPause,petscRealSingle),PetscErrorCode,(PetscDraw,),arg1)
    return err
end

function PetscDrawSetDoubleBuffer(arg0::Type{Float32},arg1::PetscDraw)
    err = ccall((:PetscDrawSetDoubleBuffer,petscRealSingle),PetscErrorCode,(PetscDraw,),arg1)
    return err
end

function PetscDrawFlush(arg0::Type{Float32},arg1::PetscDraw)
    err = ccall((:PetscDrawFlush,petscRealSingle),PetscErrorCode,(PetscDraw,),arg1)
    return err
end

function PetscDrawSynchronizedFlush(arg0::Type{Float32},arg1::PetscDraw)
    err = ccall((:PetscDrawSynchronizedFlush,petscRealSingle),PetscErrorCode,(PetscDraw,),arg1)
    return err
end

function PetscDrawClear(arg0::Type{Float32},arg1::PetscDraw)
    err = ccall((:PetscDrawClear,petscRealSingle),PetscErrorCode,(PetscDraw,),arg1)
    return err
end

function PetscDrawSave(arg0::Type{Float32},arg1::PetscDraw)
    err = ccall((:PetscDrawSave,petscRealSingle),PetscErrorCode,(PetscDraw,),arg1)
    return err
end

function PetscDrawSynchronizedClear(arg0::Type{Float32},arg1::PetscDraw)
    err = ccall((:PetscDrawSynchronizedClear,petscRealSingle),PetscErrorCode,(PetscDraw,),arg1)
    return err
end

function PetscDrawBOP(arg0::Type{Float32},arg1::PetscDraw)
    err = ccall((:PetscDrawBOP,petscRealSingle),PetscErrorCode,(PetscDraw,),arg1)
    return err
end

function PetscDrawEOP(arg0::Type{Float32},arg1::PetscDraw)
    err = ccall((:PetscDrawEOP,petscRealSingle),PetscErrorCode,(PetscDraw,),arg1)
    return err
end

function PetscDrawSetDisplay(arg0::Type{Float32},arg1::PetscDraw,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscDrawSetDisplay,petscRealSingle),PetscErrorCode,(PetscDraw,Cstring),arg1,arg2)
    return err
end

function PetscDrawGetSingleton(arg0::Type{Float32},arg1::PetscDraw,arg2::Union{Ptr{PetscDraw},StridedArray{PetscDraw},Ptr{PetscDraw},Ref{PetscDraw}})
    err = ccall((:PetscDrawGetSingleton,petscRealSingle),PetscErrorCode,(PetscDraw,Ptr{PetscDraw}),arg1,arg2)
    return err
end

function PetscDrawRestoreSingleton(arg0::Type{Float32},arg1::PetscDraw,arg2::Union{Ptr{PetscDraw},StridedArray{PetscDraw},Ptr{PetscDraw},Ref{PetscDraw}})
    err = ccall((:PetscDrawRestoreSingleton,petscRealSingle),PetscErrorCode,(PetscDraw,Ptr{PetscDraw}),arg1,arg2)
    return err
end

function PetscDrawGetCurrentPoint(arg0::Type{Float32},arg1::PetscDraw,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:PetscDrawGetCurrentPoint,petscRealSingle),PetscErrorCode,(PetscDraw,Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function PetscDrawSetCurrentPoint(arg0::Type{Float32},arg1::PetscDraw,arg2::Float32,arg3::Float32)
    err = ccall((:PetscDrawSetCurrentPoint,petscRealSingle),PetscErrorCode,(PetscDraw,Float32,Float32),arg1,arg2,arg3)
    return err
end

function PetscDrawPushCurrentPoint(arg0::Type{Float32},arg1::PetscDraw,arg2::Float32,arg3::Float32)
    err = ccall((:PetscDrawPushCurrentPoint,petscRealSingle),PetscErrorCode,(PetscDraw,Float32,Float32),arg1,arg2,arg3)
    return err
end

function PetscDrawPopCurrentPoint(arg0::Type{Float32},arg1::PetscDraw)
    err = ccall((:PetscDrawPopCurrentPoint,petscRealSingle),PetscErrorCode,(PetscDraw,),arg1)
    return err
end

function PetscDrawGetBoundingBox(arg0::Type{Float32},arg1::PetscDraw,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:PetscDrawGetBoundingBox,petscRealSingle),PetscErrorCode,(PetscDraw,Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDrawGetMouseButton(arg0::Type{Float32},arg1::PetscDraw,arg2::Union{Ptr{PetscDrawButton},StridedArray{PetscDrawButton},Ptr{PetscDrawButton},Ref{PetscDrawButton}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:PetscDrawGetMouseButton,petscRealSingle),PetscErrorCode,(PetscDraw,Ptr{PetscDrawButton},Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscDrawSynchronizedGetMouseButton(arg0::Type{Float32},arg1::PetscDraw,arg2::Union{Ptr{PetscDrawButton},StridedArray{PetscDrawButton},Ptr{PetscDrawButton},Ref{PetscDrawButton}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:PetscDrawSynchronizedGetMouseButton,petscRealSingle),PetscErrorCode,(PetscDraw,Ptr{PetscDrawButton},Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscDrawZoom(arg0::Type{Float32},arg1::PetscDraw,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscDrawZoom,petscRealSingle),PetscErrorCode,(PetscDraw,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

#= skipping function with undefined symbols: 
 function PetscDrawViewPortsCreate(arg0::Type{Float32},arg1::PetscDraw,arg2::Integer,arg3::Union{Ptr{Ptr{PetscDrawViewPorts}},StridedArray{Ptr{PetscDrawViewPorts}},Ptr{Ptr{PetscDrawViewPorts}},Ref{Ptr{PetscDrawViewPorts}}})
    ccall((:PetscDrawViewPortsCreate,petscRealSingle),PetscErrorCode,(PetscDraw,Int64,Ptr{Ptr{PetscDrawViewPorts}}),arg1,arg2,arg3)
end 
=#
#= skipping function with undefined symbols: 
 function PetscDrawViewPortsCreateRect(arg0::Type{Float32},arg1::PetscDraw,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Ptr{PetscDrawViewPorts}},StridedArray{Ptr{PetscDrawViewPorts}},Ptr{Ptr{PetscDrawViewPorts}},Ref{Ptr{PetscDrawViewPorts}}})
    ccall((:PetscDrawViewPortsCreateRect,petscRealSingle),PetscErrorCode,(PetscDraw,Int64,Int64,Ptr{Ptr{PetscDrawViewPorts}}),arg1,arg2,arg3,arg4)
end 
=#
#= skipping function with undefined symbols: 
 function PetscDrawViewPortsDestroy(arg0::Type{Float32},arg1::Union{Ptr{PetscDrawViewPorts},StridedArray{PetscDrawViewPorts},Ptr{PetscDrawViewPorts},Ref{PetscDrawViewPorts}})
    ccall((:PetscDrawViewPortsDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscDrawViewPorts},),arg1)
end 
=#
#= skipping function with undefined symbols: 
 function PetscDrawViewPortsSet(arg0::Type{Float32},arg1::Union{Ptr{PetscDrawViewPorts},StridedArray{PetscDrawViewPorts},Ptr{PetscDrawViewPorts},Ref{PetscDrawViewPorts}},arg2::Integer)
    ccall((:PetscDrawViewPortsSet,petscRealSingle),PetscErrorCode,(Ptr{PetscDrawViewPorts},Int64),arg1,arg2)
end 
=#
function PetscDrawAxisCreate(arg0::Type{Float32},arg1::PetscDraw,arg2::Union{Ptr{PetscDrawAxis},StridedArray{PetscDrawAxis},Ptr{PetscDrawAxis},Ref{PetscDrawAxis}})
    err = ccall((:PetscDrawAxisCreate,petscRealSingle),PetscErrorCode,(PetscDraw,Ptr{PetscDrawAxis}),arg1,arg2)
    return err
end

function PetscDrawAxisDestroy(arg0::Type{Float32},arg1::Union{Ptr{PetscDrawAxis},StridedArray{PetscDrawAxis},Ptr{PetscDrawAxis},Ref{PetscDrawAxis}})
    err = ccall((:PetscDrawAxisDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscDrawAxis},),arg1)
    return err
end

function PetscDrawAxisDraw(arg0::Type{Float32},arg1::PetscDrawAxis)
    err = ccall((:PetscDrawAxisDraw,petscRealSingle),PetscErrorCode,(PetscDrawAxis,),arg1)
    return err
end

function PetscDrawAxisSetLimits(arg0::Type{Float32},arg1::PetscDrawAxis,arg2::Float32,arg3::Float32,arg4::Float32,arg5::Float32)
    err = ccall((:PetscDrawAxisSetLimits,petscRealSingle),PetscErrorCode,(PetscDrawAxis,Float32,Float32,Float32,Float32),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDrawAxisGetLimits(arg0::Type{Float32},arg1::PetscDrawAxis,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:PetscDrawAxisGetLimits,petscRealSingle),PetscErrorCode,(PetscDrawAxis,Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDrawAxisSetHoldLimits(arg0::Type{Float32},arg1::PetscDrawAxis,arg2::PetscBool)
    err = ccall((:PetscDrawAxisSetHoldLimits,petscRealSingle),PetscErrorCode,(PetscDrawAxis,PetscBool),arg1,arg2)
    return err
end

function PetscDrawAxisSetColors(arg0::Type{Float32},arg1::PetscDrawAxis,arg2::Integer,arg3::Integer,arg4::Integer)
    err = ccall((:PetscDrawAxisSetColors,petscRealSingle),PetscErrorCode,(PetscDrawAxis,Cint,Cint,Cint),arg1,arg2,arg3,arg4)
    return err
end

function PetscDrawAxisSetLabels(arg0::Type{Float32},arg1::PetscDrawAxis,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscDrawAxisSetLabels,petscRealSingle),PetscErrorCode,(PetscDrawAxis,Cstring,Cstring,Cstring),arg1,arg2,arg3,arg4)
    return err
end

function PetscDrawLGCreate(arg0::Type{Float32},arg1::PetscDraw,arg2::Integer,arg3::Union{Ptr{PetscDrawLG},StridedArray{PetscDrawLG},Ptr{PetscDrawLG},Ref{PetscDrawLG}})
    err = ccall((:PetscDrawLGCreate,petscRealSingle),PetscErrorCode,(PetscDraw,Int64,Ptr{PetscDrawLG}),arg1,arg2,arg3)
    return err
end

function PetscDrawLGDestroy(arg0::Type{Float32},arg1::Union{Ptr{PetscDrawLG},StridedArray{PetscDrawLG},Ptr{PetscDrawLG},Ref{PetscDrawLG}})
    err = ccall((:PetscDrawLGDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscDrawLG},),arg1)
    return err
end

function PetscDrawLGAddPoint(arg0::Type{Float32},arg1::PetscDrawLG,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:PetscDrawLGAddPoint,petscRealSingle),PetscErrorCode,(PetscDrawLG,Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function PetscDrawLGAddCommonPoint(arg0::Type{Float32},arg1::PetscDrawLG,arg2::Float32,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:PetscDrawLGAddCommonPoint,petscRealSingle),PetscErrorCode,(PetscDrawLG,Float32,Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function PetscDrawLGAddPoints(arg0::Type{Float32},arg1::PetscDrawLG,arg2::Integer,arg3::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg4::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:PetscDrawLGAddPoints,petscRealSingle),PetscErrorCode,(PetscDrawLG,Int64,Ptr{Ptr{Float32}},Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscDrawLGDraw(arg0::Type{Float32},arg1::PetscDrawLG)
    err = ccall((:PetscDrawLGDraw,petscRealSingle),PetscErrorCode,(PetscDrawLG,),arg1)
    return err
end

function PetscDrawLGView(arg1::PetscDrawLG,arg2::PetscViewer{Float32})
    err = ccall((:PetscDrawLGView,petscRealSingle),PetscErrorCode,(PetscDrawLG,PetscViewer{Float32}),arg1,arg2)
    return err
end

function PetscDrawLGReset(arg0::Type{Float32},arg1::PetscDrawLG)
    err = ccall((:PetscDrawLGReset,petscRealSingle),PetscErrorCode,(PetscDrawLG,),arg1)
    return err
end

function PetscDrawLGSetDimension(arg0::Type{Float32},arg1::PetscDrawLG,arg2::Integer)
    err = ccall((:PetscDrawLGSetDimension,petscRealSingle),PetscErrorCode,(PetscDrawLG,Int64),arg1,arg2)
    return err
end

function PetscDrawLGGetDimension(arg0::Type{Float32},arg1::PetscDrawLG,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscDrawLGGetDimension,petscRealSingle),PetscErrorCode,(PetscDrawLG,Ptr{Int64}),arg1,arg2)
    return err
end

function PetscDrawLGSetLegend(arg0::Type{Float32},arg1::PetscDrawLG,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscDrawLGSetLegend,petscRealSingle),PetscErrorCode,(PetscDrawLG,Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PetscDrawLGGetAxis(arg0::Type{Float32},arg1::PetscDrawLG,arg2::Union{Ptr{PetscDrawAxis},StridedArray{PetscDrawAxis},Ptr{PetscDrawAxis},Ref{PetscDrawAxis}})
    err = ccall((:PetscDrawLGGetAxis,petscRealSingle),PetscErrorCode,(PetscDrawLG,Ptr{PetscDrawAxis}),arg1,arg2)
    return err
end

function PetscDrawLGGetDraw(arg0::Type{Float32},arg1::PetscDrawLG,arg2::Union{Ptr{PetscDraw},StridedArray{PetscDraw},Ptr{PetscDraw},Ref{PetscDraw}})
    err = ccall((:PetscDrawLGGetDraw,petscRealSingle),PetscErrorCode,(PetscDrawLG,Ptr{PetscDraw}),arg1,arg2)
    return err
end

function PetscDrawLGSetUseMarkers(arg0::Type{Float32},arg1::PetscDrawLG,arg2::PetscBool)
    err = ccall((:PetscDrawLGSetUseMarkers,petscRealSingle),PetscErrorCode,(PetscDrawLG,PetscBool),arg1,arg2)
    return err
end

function PetscDrawLGSetLimits(arg0::Type{Float32},arg1::PetscDrawLG,arg2::Float32,arg3::Float32,arg4::Float32,arg5::Float32)
    err = ccall((:PetscDrawLGSetLimits,petscRealSingle),PetscErrorCode,(PetscDrawLG,Float32,Float32,Float32,Float32),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDrawLGSetColors(arg0::Type{Float32},arg1::PetscDrawLG,arg2::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:PetscDrawLGSetColors,petscRealSingle),PetscErrorCode,(PetscDrawLG,Ptr{Cint}),arg1,arg2)
    return err
end

function PetscDrawLGSetFromOptions(arg0::Type{Float32},arg1::PetscDrawLG)
    err = ccall((:PetscDrawLGSetFromOptions,petscRealSingle),PetscErrorCode,(PetscDrawLG,),arg1)
    return err
end

function PetscDrawSPCreate(arg0::Type{Float32},arg1::PetscDraw,arg2::Integer,arg3::Union{Ptr{PetscDrawSP},StridedArray{PetscDrawSP},Ptr{PetscDrawSP},Ref{PetscDrawSP}})
    err = ccall((:PetscDrawSPCreate,petscRealSingle),PetscErrorCode,(PetscDraw,Cint,Ptr{PetscDrawSP}),arg1,arg2,arg3)
    return err
end

function PetscDrawSPDestroy(arg0::Type{Float32},arg1::Union{Ptr{PetscDrawSP},StridedArray{PetscDrawSP},Ptr{PetscDrawSP},Ref{PetscDrawSP}})
    err = ccall((:PetscDrawSPDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscDrawSP},),arg1)
    return err
end

function PetscDrawSPAddPoint(arg0::Type{Float32},arg1::PetscDrawSP,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:PetscDrawSPAddPoint,petscRealSingle),PetscErrorCode,(PetscDrawSP,Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function PetscDrawSPAddPoints(arg0::Type{Float32},arg1::PetscDrawSP,arg2::Integer,arg3::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg4::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:PetscDrawSPAddPoints,petscRealSingle),PetscErrorCode,(PetscDrawSP,Cint,Ptr{Ptr{Float32}},Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscDrawSPDraw(arg0::Type{Float32},arg1::PetscDrawSP,arg2::PetscBool)
    err = ccall((:PetscDrawSPDraw,petscRealSingle),PetscErrorCode,(PetscDrawSP,PetscBool),arg1,arg2)
    return err
end

function PetscDrawSPReset(arg0::Type{Float32},arg1::PetscDrawSP)
    err = ccall((:PetscDrawSPReset,petscRealSingle),PetscErrorCode,(PetscDrawSP,),arg1)
    return err
end

function PetscDrawSPSetDimension(arg0::Type{Float32},arg1::PetscDrawSP,arg2::Integer)
    err = ccall((:PetscDrawSPSetDimension,petscRealSingle),PetscErrorCode,(PetscDrawSP,Cint),arg1,arg2)
    return err
end

function PetscDrawSPGetAxis(arg0::Type{Float32},arg1::PetscDrawSP,arg2::Union{Ptr{PetscDrawAxis},StridedArray{PetscDrawAxis},Ptr{PetscDrawAxis},Ref{PetscDrawAxis}})
    err = ccall((:PetscDrawSPGetAxis,petscRealSingle),PetscErrorCode,(PetscDrawSP,Ptr{PetscDrawAxis}),arg1,arg2)
    return err
end

function PetscDrawSPGetDraw(arg0::Type{Float32},arg1::PetscDrawSP,arg2::Union{Ptr{PetscDraw},StridedArray{PetscDraw},Ptr{PetscDraw},Ref{PetscDraw}})
    err = ccall((:PetscDrawSPGetDraw,petscRealSingle),PetscErrorCode,(PetscDrawSP,Ptr{PetscDraw}),arg1,arg2)
    return err
end

function PetscDrawSPSetLimits(arg0::Type{Float32},arg1::PetscDrawSP,arg2::Float32,arg3::Float32,arg4::Float32,arg5::Float32)
    err = ccall((:PetscDrawSPSetLimits,petscRealSingle),PetscErrorCode,(PetscDrawSP,Float32,Float32,Float32,Float32),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDrawLGSPDraw(arg0::Type{Float32},arg1::PetscDrawLG,arg2::PetscDrawSP)
    err = ccall((:PetscDrawLGSPDraw,petscRealSingle),PetscErrorCode,(PetscDrawLG,PetscDrawSP),arg1,arg2)
    return err
end

function PetscDrawHGCreate(arg0::Type{Float32},arg1::PetscDraw,arg2::Integer,arg3::Union{Ptr{PetscDrawHG},StridedArray{PetscDrawHG},Ptr{PetscDrawHG},Ref{PetscDrawHG}})
    err = ccall((:PetscDrawHGCreate,petscRealSingle),PetscErrorCode,(PetscDraw,Cint,Ptr{PetscDrawHG}),arg1,arg2,arg3)
    return err
end

function PetscDrawHGDestroy(arg0::Type{Float32},arg1::Union{Ptr{PetscDrawHG},StridedArray{PetscDrawHG},Ptr{PetscDrawHG},Ref{PetscDrawHG}})
    err = ccall((:PetscDrawHGDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscDrawHG},),arg1)
    return err
end

function PetscDrawHGAddValue(arg0::Type{Float32},arg1::PetscDrawHG,arg2::Float32)
    err = ccall((:PetscDrawHGAddValue,petscRealSingle),PetscErrorCode,(PetscDrawHG,Float32),arg1,arg2)
    return err
end

function PetscDrawHGDraw(arg0::Type{Float32},arg1::PetscDrawHG)
    err = ccall((:PetscDrawHGDraw,petscRealSingle),PetscErrorCode,(PetscDrawHG,),arg1)
    return err
end

function PetscDrawHGView(arg1::PetscDrawHG,arg2::PetscViewer{Float32})
    err = ccall((:PetscDrawHGView,petscRealSingle),PetscErrorCode,(PetscDrawHG,PetscViewer{Float32}),arg1,arg2)
    return err
end

function PetscDrawHGReset(arg0::Type{Float32},arg1::PetscDrawHG)
    err = ccall((:PetscDrawHGReset,petscRealSingle),PetscErrorCode,(PetscDrawHG,),arg1)
    return err
end

function PetscDrawHGGetAxis(arg0::Type{Float32},arg1::PetscDrawHG,arg2::Union{Ptr{PetscDrawAxis},StridedArray{PetscDrawAxis},Ptr{PetscDrawAxis},Ref{PetscDrawAxis}})
    err = ccall((:PetscDrawHGGetAxis,petscRealSingle),PetscErrorCode,(PetscDrawHG,Ptr{PetscDrawAxis}),arg1,arg2)
    return err
end

function PetscDrawHGGetDraw(arg0::Type{Float32},arg1::PetscDrawHG,arg2::Union{Ptr{PetscDraw},StridedArray{PetscDraw},Ptr{PetscDraw},Ref{PetscDraw}})
    err = ccall((:PetscDrawHGGetDraw,petscRealSingle),PetscErrorCode,(PetscDrawHG,Ptr{PetscDraw}),arg1,arg2)
    return err
end

function PetscDrawHGSetLimits(arg0::Type{Float32},arg1::PetscDrawHG,arg2::Float32,arg3::Float32,arg4::Integer,arg5::Integer)
    err = ccall((:PetscDrawHGSetLimits,petscRealSingle),PetscErrorCode,(PetscDrawHG,Float32,Float32,Cint,Cint),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDrawHGSetNumberBins(arg0::Type{Float32},arg1::PetscDrawHG,arg2::Integer)
    err = ccall((:PetscDrawHGSetNumberBins,petscRealSingle),PetscErrorCode,(PetscDrawHG,Cint),arg1,arg2)
    return err
end

function PetscDrawHGSetColor(arg0::Type{Float32},arg1::PetscDrawHG,arg2::Integer)
    err = ccall((:PetscDrawHGSetColor,petscRealSingle),PetscErrorCode,(PetscDrawHG,Cint),arg1,arg2)
    return err
end

function PetscDrawHGCalcStats(arg0::Type{Float32},arg1::PetscDrawHG,arg2::PetscBool)
    err = ccall((:PetscDrawHGCalcStats,petscRealSingle),PetscErrorCode,(PetscDrawHG,PetscBool),arg1,arg2)
    return err
end

function PetscDrawHGIntegerBins(arg0::Type{Float32},arg1::PetscDrawHG,arg2::PetscBool)
    err = ccall((:PetscDrawHGIntegerBins,petscRealSingle),PetscErrorCode,(PetscDrawHG,PetscBool),arg1,arg2)
    return err
end

function PetscDrawBarCreate(arg0::Type{Float32},arg1::PetscDraw,arg2::Union{Ptr{PetscDrawBar},StridedArray{PetscDrawBar},Ptr{PetscDrawBar},Ref{PetscDrawBar}})
    err = ccall((:PetscDrawBarCreate,petscRealSingle),PetscErrorCode,(PetscDraw,Ptr{PetscDrawBar}),arg1,arg2)
    return err
end

function PetscDrawBarSetData(arg0::Type{Float32},arg1::PetscDrawBar,arg2::Integer,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscDrawBarSetData,petscRealSingle),PetscErrorCode,(PetscDrawBar,Int64,Ptr{Float32},Ptr{Ptr{UInt8}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscDrawBarDestroy(arg0::Type{Float32},arg1::Union{Ptr{PetscDrawBar},StridedArray{PetscDrawBar},Ptr{PetscDrawBar},Ref{PetscDrawBar}})
    err = ccall((:PetscDrawBarDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscDrawBar},),arg1)
    return err
end

function PetscDrawBarDraw(arg0::Type{Float32},arg1::PetscDrawBar)
    err = ccall((:PetscDrawBarDraw,petscRealSingle),PetscErrorCode,(PetscDrawBar,),arg1)
    return err
end

function PetscDrawBarSetColor(arg0::Type{Float32},arg1::PetscDrawBar,arg2::Integer)
    err = ccall((:PetscDrawBarSetColor,petscRealSingle),PetscErrorCode,(PetscDrawBar,Cint),arg1,arg2)
    return err
end

function PetscDrawBarSetLimits(arg0::Type{Float32},arg1::PetscDrawBar,arg2::Float32,arg3::Float32)
    err = ccall((:PetscDrawBarSetLimits,petscRealSingle),PetscErrorCode,(PetscDrawBar,Float32,Float32),arg1,arg2,arg3)
    return err
end

function PetscDrawBarSort(arg0::Type{Float32},arg1::PetscDrawBar,arg2::PetscBool,arg3::Float32)
    err = ccall((:PetscDrawBarSort,petscRealSingle),PetscErrorCode,(PetscDrawBar,PetscBool,Float32),arg1,arg2,arg3)
    return err
end

function PetscDrawBarSetFromOptions(arg0::Type{Float32},arg1::PetscDrawBar)
    err = ccall((:PetscDrawBarSetFromOptions,petscRealSingle),PetscErrorCode,(PetscDrawBar,),arg1)
    return err
end

function PetscDrawBarGetAxis(arg0::Type{Float32},arg1::PetscDrawBar,arg2::Union{Ptr{PetscDrawAxis},StridedArray{PetscDrawAxis},Ptr{PetscDrawAxis},Ref{PetscDrawAxis}})
    err = ccall((:PetscDrawBarGetAxis,petscRealSingle),PetscErrorCode,(PetscDrawBar,Ptr{PetscDrawAxis}),arg1,arg2)
    return err
end

function PetscDrawBarGetDraw(arg0::Type{Float32},arg1::PetscDrawBar,arg2::Union{Ptr{PetscDraw},StridedArray{PetscDraw},Ptr{PetscDraw},Ref{PetscDraw}})
    err = ccall((:PetscDrawBarGetDraw,petscRealSingle),PetscErrorCode,(PetscDrawBar,Ptr{PetscDraw}),arg1,arg2)
    return err
end

function PetscViewerDrawGetDraw(arg1::PetscViewer{Float32},arg2::Integer,arg3::Union{Ptr{PetscDraw},StridedArray{PetscDraw},Ptr{PetscDraw},Ref{PetscDraw}})
    err = ccall((:PetscViewerDrawGetDraw,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Int64,Ptr{PetscDraw}),arg1,arg2,arg3)
    return err
end

function PetscViewerDrawBaseAdd(arg1::PetscViewer{Float32},arg2::Integer)
    err = ccall((:PetscViewerDrawBaseAdd,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Int64),arg1,arg2)
    return err
end

function PetscViewerDrawBaseSet(arg1::PetscViewer{Float32},arg2::Integer)
    err = ccall((:PetscViewerDrawBaseSet,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Int64),arg1,arg2)
    return err
end

function PetscViewerDrawGetDrawLG(arg1::PetscViewer{Float32},arg2::Integer,arg3::Union{Ptr{PetscDrawLG},StridedArray{PetscDrawLG},Ptr{PetscDrawLG},Ref{PetscDrawLG}})
    err = ccall((:PetscViewerDrawGetDrawLG,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Int64,Ptr{PetscDrawLG}),arg1,arg2,arg3)
    return err
end

function PetscViewerDrawGetDrawAxis(arg1::PetscViewer{Float32},arg2::Integer,arg3::Union{Ptr{PetscDrawAxis},StridedArray{PetscDrawAxis},Ptr{PetscDrawAxis},Ref{PetscDrawAxis}})
    err = ccall((:PetscViewerDrawGetDrawAxis,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Int64,Ptr{PetscDrawAxis}),arg1,arg2,arg3)
    return err
end

function PetscDrawUtilitySetCmapHue(arg0::Type{Float32},arg1::Union{Ptr{Cuchar},StridedArray{Cuchar},Ptr{Cuchar},Ref{Cuchar}},arg2::Union{Ptr{Cuchar},StridedArray{Cuchar},Ptr{Cuchar},Ref{Cuchar}},arg3::Union{Ptr{Cuchar},StridedArray{Cuchar},Ptr{Cuchar},Ref{Cuchar}},arg4::Integer)
    err = ccall((:PetscDrawUtilitySetCmapHue,petscRealSingle),PetscErrorCode,(Ptr{Cuchar},Ptr{Cuchar},Ptr{Cuchar},Cint),arg1,arg2,arg3,arg4)
    return err
end

function PetscDrawUtilitySetGamma(arg0::Type{Float32},arg1::Float32)
    err = ccall((:PetscDrawUtilitySetGamma,petscRealSingle),PetscErrorCode,(Float32,),arg1)
    return err
end

function ISInitializePackage(arg0::Type{Float32})
    err = ccall((:ISInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function ISSetType(arg1::IS{Float32},arg2::ISType)
    err = ccall((:ISSetType,petscRealSingle),PetscErrorCode,(IS{Float32},Cstring),arg1,arg2)
    return err
end

function ISGetType(arg1::IS{Float32},arg2::Union{Ptr{ISType},StridedArray{ISType},Ptr{ISType},Ref{ISType}})
    (arg2_,tmp) = symbol_get_before(arg2)
    err = ccall((:ISGetType,petscRealSingle),PetscErrorCode,(IS{Float32},Ptr{Ptr{UInt8}}),arg1,arg2_)
    symbol_get_after(arg2_,arg2)
    return err
end

function ISRegister(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:ISRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function ISCreate(arg1::MPI_Comm,arg2::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:ISCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{IS{Float32}}),arg1,arg2)
    return err
end

function ISCreateGeneral(arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::PetscCopyMode,arg5::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:ISCreateGeneral,petscRealSingle),PetscErrorCode,(comm_type,Int64,Ptr{Int64},PetscCopyMode,Ptr{IS{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function ISGeneralSetIndices(arg1::IS{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::PetscCopyMode)
    err = ccall((:ISGeneralSetIndices,petscRealSingle),PetscErrorCode,(IS{Float32},Int64,Ptr{Int64},PetscCopyMode),arg1,arg2,arg3,arg4)
    return err
end

function ISCreateBlock(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::PetscCopyMode,arg6::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:ISCreateBlock,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Ptr{Int64},PetscCopyMode,Ptr{IS{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function ISBlockSetIndices(arg1::IS{Float32},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::PetscCopyMode)
    err = ccall((:ISBlockSetIndices,petscRealSingle),PetscErrorCode,(IS{Float32},Int64,Int64,Ptr{Int64},PetscCopyMode),arg1,arg2,arg3,arg4,arg5)
    return err
end

function ISCreateStride(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:ISCreateStride,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Ptr{IS{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function ISStrideSetStride(arg1::IS{Float32},arg2::Integer,arg3::Integer,arg4::Integer)
    err = ccall((:ISStrideSetStride,petscRealSingle),PetscErrorCode,(IS{Float32},Int64,Int64,Int64),arg1,arg2,arg3,arg4)
    return err
end

function ISDestroy(arg1::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:ISDestroy,petscRealSingle),PetscErrorCode,(Ptr{IS{Float32}},),arg1)
    return err
end

function ISSetPermutation(arg1::IS{Float32})
    err = ccall((:ISSetPermutation,petscRealSingle),PetscErrorCode,(IS{Float32},),arg1)
    return err
end

function ISPermutation(arg1::IS{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:ISPermutation,petscRealSingle),PetscErrorCode,(IS{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function ISSetIdentity(arg1::IS{Float32})
    err = ccall((:ISSetIdentity,petscRealSingle),PetscErrorCode,(IS{Float32},),arg1)
    return err
end

function ISIdentity(arg1::IS{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:ISIdentity,petscRealSingle),PetscErrorCode,(IS{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function ISContiguousLocal(arg1::IS{Float32},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:ISContiguousLocal,petscRealSingle),PetscErrorCode,(IS{Float32},Int64,Int64,Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function ISGetIndices(arg1::IS{Float32},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:ISGetIndices,petscRealSingle),PetscErrorCode,(IS{Float32},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function ISRestoreIndices(arg1::IS{Float32},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:ISRestoreIndices,petscRealSingle),PetscErrorCode,(IS{Float32},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function ISGetTotalIndices(arg1::IS{Float32},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:ISGetTotalIndices,petscRealSingle),PetscErrorCode,(IS{Float32},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function ISRestoreTotalIndices(arg1::IS{Float32},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:ISRestoreTotalIndices,petscRealSingle),PetscErrorCode,(IS{Float32},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function ISGetNonlocalIndices(arg1::IS{Float32},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:ISGetNonlocalIndices,petscRealSingle),PetscErrorCode,(IS{Float32},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function ISRestoreNonlocalIndices(arg1::IS{Float32},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:ISRestoreNonlocalIndices,petscRealSingle),PetscErrorCode,(IS{Float32},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function ISGetNonlocalIS(arg1::IS{Float32},is::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:ISGetNonlocalIS,petscRealSingle),PetscErrorCode,(IS{Float32},Ptr{IS{Float32}}),arg1,is)
    return err
end

function ISRestoreNonlocalIS(arg1::IS{Float32},is::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:ISRestoreNonlocalIS,petscRealSingle),PetscErrorCode,(IS{Float32},Ptr{IS{Float32}}),arg1,is)
    return err
end

function ISGetSize(arg1::IS{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISGetSize,petscRealSingle),PetscErrorCode,(IS{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function ISGetLocalSize(arg1::IS{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISGetLocalSize,petscRealSingle),PetscErrorCode,(IS{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function ISInvertPermutation(arg1::IS{Float32},arg2::Integer,arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:ISInvertPermutation,petscRealSingle),PetscErrorCode,(IS{Float32},Int64,Ptr{IS{Float32}}),arg1,arg2,arg3)
    return err
end

function ISView(arg1::IS{Float32},arg2::PetscViewer{Float32})
    err = ccall((:ISView,petscRealSingle),PetscErrorCode,(IS{Float32},PetscViewer{Float32}),arg1,arg2)
    return err
end

function ISViewFromOptions(A::IS{Float32},obj::PetscObject,name::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:ISViewFromOptions,petscRealSingle),PetscErrorCode,(IS{Float32},PetscObject,Cstring),A,obj,name)
    return err
end

function ISLoad(arg1::IS{Float32},arg2::PetscViewer{Float32})
    err = ccall((:ISLoad,petscRealSingle),PetscErrorCode,(IS{Float32},PetscViewer{Float32}),arg1,arg2)
    return err
end

function ISEqual(arg1::IS{Float32},arg2::IS{Float32},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:ISEqual,petscRealSingle),PetscErrorCode,(IS{Float32},IS{Float32},Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function ISSort(arg1::IS{Float32})
    err = ccall((:ISSort,petscRealSingle),PetscErrorCode,(IS{Float32},),arg1)
    return err
end

function ISSortRemoveDups(arg1::IS{Float32})
    err = ccall((:ISSortRemoveDups,petscRealSingle),PetscErrorCode,(IS{Float32},),arg1)
    return err
end

function ISSorted(arg1::IS{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:ISSorted,petscRealSingle),PetscErrorCode,(IS{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function ISDifference(arg1::IS{Float32},arg2::IS{Float32},arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:ISDifference,petscRealSingle),PetscErrorCode,(IS{Float32},IS{Float32},Ptr{IS{Float32}}),arg1,arg2,arg3)
    return err
end

function ISSum(arg1::IS{Float32},arg2::IS{Float32},arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:ISSum,petscRealSingle),PetscErrorCode,(IS{Float32},IS{Float32},Ptr{IS{Float32}}),arg1,arg2,arg3)
    return err
end

function ISExpand(arg1::IS{Float32},arg2::IS{Float32},arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:ISExpand,petscRealSingle),PetscErrorCode,(IS{Float32},IS{Float32},Ptr{IS{Float32}}),arg1,arg2,arg3)
    return err
end

function ISGetMinMax(arg1::IS{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISGetMinMax,petscRealSingle),PetscErrorCode,(IS{Float32},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function ISBlockGetIndices(arg1::IS{Float32},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:ISBlockGetIndices,petscRealSingle),PetscErrorCode,(IS{Float32},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function ISBlockRestoreIndices(arg1::IS{Float32},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:ISBlockRestoreIndices,petscRealSingle),PetscErrorCode,(IS{Float32},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function ISBlockGetLocalSize(arg1::IS{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISBlockGetLocalSize,petscRealSingle),PetscErrorCode,(IS{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function ISBlockGetSize(arg1::IS{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISBlockGetSize,petscRealSingle),PetscErrorCode,(IS{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function ISGetBlockSize(arg1::IS{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISGetBlockSize,petscRealSingle),PetscErrorCode,(IS{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function ISSetBlockSize(arg1::IS{Float32},arg2::Integer)
    err = ccall((:ISSetBlockSize,petscRealSingle),PetscErrorCode,(IS{Float32},Int64),arg1,arg2)
    return err
end

function ISStrideGetInfo(arg1::IS{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISStrideGetInfo,petscRealSingle),PetscErrorCode,(IS{Float32},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function ISToGeneral(arg1::IS{Float32})
    err = ccall((:ISToGeneral,petscRealSingle),PetscErrorCode,(IS{Float32},),arg1)
    return err
end

function ISDuplicate(arg1::IS{Float32},arg2::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:ISDuplicate,petscRealSingle),PetscErrorCode,(IS{Float32},Ptr{IS{Float32}}),arg1,arg2)
    return err
end

function ISCopy(arg1::IS{Float32},arg2::IS{Float32})
    err = ccall((:ISCopy,petscRealSingle),PetscErrorCode,(IS{Float32},IS{Float32}),arg1,arg2)
    return err
end

function ISAllGather(arg1::IS{Float32},arg2::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:ISAllGather,petscRealSingle),PetscErrorCode,(IS{Float32},Ptr{IS{Float32}}),arg1,arg2)
    return err
end

function ISComplement(arg1::IS{Float32},arg2::Integer,arg3::Integer,arg4::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:ISComplement,petscRealSingle),PetscErrorCode,(IS{Float32},Int64,Int64,Ptr{IS{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function ISConcatenate(arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg4::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:ISConcatenate,petscRealSingle),PetscErrorCode,(comm_type,Int64,Ptr{IS{Float32}},Ptr{IS{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function ISListToPair(arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg4::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg5::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:ISListToPair,petscRealSingle),PetscErrorCode,(comm_type,Int64,Ptr{IS{Float32}},Ptr{IS{Float32}},Ptr{IS{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function ISPairToList(arg1::IS{Float32},arg2::IS{Float32},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{IS{Float32}}},StridedArray{Ptr{IS{Float32}}},Ptr{Ptr{IS{Float32}}},Ref{Ptr{IS{Float32}}}})
    err = ccall((:ISPairToList,petscRealSingle),PetscErrorCode,(IS{Float32},IS{Float32},Ptr{Int64},Ptr{Ptr{IS{Float32}}}),arg1,arg2,arg3,arg4)
    return err
end

function ISEmbed(arg1::IS{Float32},arg2::IS{Float32},arg3::PetscBool,arg4::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:ISEmbed,petscRealSingle),PetscErrorCode,(IS{Float32},IS{Float32},PetscBool,Ptr{IS{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function ISSortPermutation(arg1::IS{Float32},arg2::PetscBool,arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:ISSortPermutation,petscRealSingle),PetscErrorCode,(IS{Float32},PetscBool,Ptr{IS{Float32}}),arg1,arg2,arg3)
    return err
end

function ISOnComm(arg1::IS{Float32},arg2::MPI_Comm,arg3::PetscCopyMode,arg4::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:ISOnComm,petscRealSingle),PetscErrorCode,(IS{Float32},comm_type,PetscCopyMode,Ptr{IS{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function ISLocalToGlobalMappingCreate(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::PetscCopyMode,arg6::Union{Ptr{ISLocalToGlobalMapping{Float32}},StridedArray{ISLocalToGlobalMapping{Float32}},Ptr{ISLocalToGlobalMapping{Float32}},Ref{ISLocalToGlobalMapping{Float32}}})
    err = ccall((:ISLocalToGlobalMappingCreate,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Ptr{Int64},PetscCopyMode,Ptr{ISLocalToGlobalMapping{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function ISLocalToGlobalMappingCreateIS(arg1::IS{Float32},arg2::Union{Ptr{ISLocalToGlobalMapping{Float32}},StridedArray{ISLocalToGlobalMapping{Float32}},Ptr{ISLocalToGlobalMapping{Float32}},Ref{ISLocalToGlobalMapping{Float32}}})
    err = ccall((:ISLocalToGlobalMappingCreateIS,petscRealSingle),PetscErrorCode,(IS{Float32},Ptr{ISLocalToGlobalMapping{Float32}}),arg1,arg2)
    return err
end

function ISLocalToGlobalMappingCreateSF(arg1::PetscSF,arg2::Integer,arg3::Union{Ptr{ISLocalToGlobalMapping{Float32}},StridedArray{ISLocalToGlobalMapping{Float32}},Ptr{ISLocalToGlobalMapping{Float32}},Ref{ISLocalToGlobalMapping{Float32}}})
    err = ccall((:ISLocalToGlobalMappingCreateSF,petscRealSingle),PetscErrorCode,(PetscSF,Int64,Ptr{ISLocalToGlobalMapping{Float32}}),arg1,arg2,arg3)
    return err
end

function ISLocalToGlobalMappingView(arg1::ISLocalToGlobalMapping{Float32},arg2::PetscViewer{Float32})
    err = ccall((:ISLocalToGlobalMappingView,petscRealSingle),PetscErrorCode,(ISLocalToGlobalMapping{Float32},PetscViewer{Float32}),arg1,arg2)
    return err
end

function ISLocalToGlobalMappingDestroy(arg1::Union{Ptr{ISLocalToGlobalMapping{Float32}},StridedArray{ISLocalToGlobalMapping{Float32}},Ptr{ISLocalToGlobalMapping{Float32}},Ref{ISLocalToGlobalMapping{Float32}}})
    err = ccall((:ISLocalToGlobalMappingDestroy,petscRealSingle),PetscErrorCode,(Ptr{ISLocalToGlobalMapping{Float32}},),arg1)
    return err
end

function ISLocalToGlobalMappingApply(arg1::ISLocalToGlobalMapping{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISLocalToGlobalMappingApply,petscRealSingle),PetscErrorCode,(ISLocalToGlobalMapping{Float32},Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function ISLocalToGlobalMappingApplyBlock(arg1::ISLocalToGlobalMapping{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISLocalToGlobalMappingApplyBlock,petscRealSingle),PetscErrorCode,(ISLocalToGlobalMapping{Float32},Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function ISLocalToGlobalMappingApplyIS(arg1::ISLocalToGlobalMapping{Float32},arg2::IS{Float32},arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:ISLocalToGlobalMappingApplyIS,petscRealSingle),PetscErrorCode,(ISLocalToGlobalMapping{Float32},IS{Float32},Ptr{IS{Float32}}),arg1,arg2,arg3)
    return err
end

function ISGlobalToLocalMappingApply(arg1::ISLocalToGlobalMapping{Float32},arg2::ISGlobalToLocalMappingType,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISGlobalToLocalMappingApply,petscRealSingle),PetscErrorCode,(ISLocalToGlobalMapping{Float32},ISGlobalToLocalMappingType,Int64,Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function ISGlobalToLocalMappingApplyBlock(arg1::ISLocalToGlobalMapping{Float32},arg2::ISGlobalToLocalMappingType,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISGlobalToLocalMappingApplyBlock,petscRealSingle),PetscErrorCode,(ISLocalToGlobalMapping{Float32},ISGlobalToLocalMappingType,Int64,Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function ISGlobalToLocalMappingApplyIS(arg1::ISLocalToGlobalMapping{Float32},arg2::ISGlobalToLocalMappingType,arg3::IS{Float32},arg4::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:ISGlobalToLocalMappingApplyIS,petscRealSingle),PetscErrorCode,(ISLocalToGlobalMapping{Float32},ISGlobalToLocalMappingType,IS{Float32},Ptr{IS{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function ISLocalToGlobalMappingGetSize(arg1::ISLocalToGlobalMapping{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISLocalToGlobalMappingGetSize,petscRealSingle),PetscErrorCode,(ISLocalToGlobalMapping{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function ISLocalToGlobalMappingGetInfo(arg1::ISLocalToGlobalMapping{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg5::Union{Ptr{Ptr{Ptr{Int64}}},StridedArray{Ptr{Ptr{Int64}}},Ptr{Ptr{Ptr{Int64}}},Ref{Ptr{Ptr{Int64}}}})
    err = ccall((:ISLocalToGlobalMappingGetInfo,petscRealSingle),PetscErrorCode,(ISLocalToGlobalMapping{Float32},Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}},Ptr{Ptr{Ptr{Int64}}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function ISLocalToGlobalMappingRestoreInfo(arg1::ISLocalToGlobalMapping{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg5::Union{Ptr{Ptr{Ptr{Int64}}},StridedArray{Ptr{Ptr{Int64}}},Ptr{Ptr{Ptr{Int64}}},Ref{Ptr{Ptr{Int64}}}})
    err = ccall((:ISLocalToGlobalMappingRestoreInfo,petscRealSingle),PetscErrorCode,(ISLocalToGlobalMapping{Float32},Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}},Ptr{Ptr{Ptr{Int64}}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function ISLocalToGlobalMappingGetBlockInfo(arg1::ISLocalToGlobalMapping{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg5::Union{Ptr{Ptr{Ptr{Int64}}},StridedArray{Ptr{Ptr{Int64}}},Ptr{Ptr{Ptr{Int64}}},Ref{Ptr{Ptr{Int64}}}})
    err = ccall((:ISLocalToGlobalMappingGetBlockInfo,petscRealSingle),PetscErrorCode,(ISLocalToGlobalMapping{Float32},Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}},Ptr{Ptr{Ptr{Int64}}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function ISLocalToGlobalMappingRestoreBlockInfo(arg1::ISLocalToGlobalMapping{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg5::Union{Ptr{Ptr{Ptr{Int64}}},StridedArray{Ptr{Ptr{Int64}}},Ptr{Ptr{Ptr{Int64}}},Ref{Ptr{Ptr{Int64}}}})
    err = ccall((:ISLocalToGlobalMappingRestoreBlockInfo,petscRealSingle),PetscErrorCode,(ISLocalToGlobalMapping{Float32},Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}},Ptr{Ptr{Ptr{Int64}}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function ISLocalToGlobalMappingGetIndices(arg1::ISLocalToGlobalMapping{Float32},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:ISLocalToGlobalMappingGetIndices,petscRealSingle),PetscErrorCode,(ISLocalToGlobalMapping{Float32},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function ISLocalToGlobalMappingRestoreIndices(arg1::ISLocalToGlobalMapping{Float32},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:ISLocalToGlobalMappingRestoreIndices,petscRealSingle),PetscErrorCode,(ISLocalToGlobalMapping{Float32},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function ISLocalToGlobalMappingGetBlockIndices(arg1::ISLocalToGlobalMapping{Float32},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:ISLocalToGlobalMappingGetBlockIndices,petscRealSingle),PetscErrorCode,(ISLocalToGlobalMapping{Float32},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function ISLocalToGlobalMappingRestoreBlockIndices(arg1::ISLocalToGlobalMapping{Float32},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:ISLocalToGlobalMappingRestoreBlockIndices,petscRealSingle),PetscErrorCode,(ISLocalToGlobalMapping{Float32},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function ISLocalToGlobalMappingConcatenate(arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{ISLocalToGlobalMapping{Float32}},StridedArray{ISLocalToGlobalMapping{Float32}},Ptr{ISLocalToGlobalMapping{Float32}},Ref{ISLocalToGlobalMapping{Float32}}},arg4::Union{Ptr{ISLocalToGlobalMapping{Float32}},StridedArray{ISLocalToGlobalMapping{Float32}},Ptr{ISLocalToGlobalMapping{Float32}},Ref{ISLocalToGlobalMapping{Float32}}})
    err = ccall((:ISLocalToGlobalMappingConcatenate,petscRealSingle),PetscErrorCode,(comm_type,Int64,Ptr{ISLocalToGlobalMapping{Float32}},Ptr{ISLocalToGlobalMapping{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function ISG2LMapApply(arg1::ISLocalToGlobalMapping{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISG2LMapApply,petscRealSingle),PetscErrorCode,(ISLocalToGlobalMapping{Float32},Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function ISLocalToGlobalMappingGetBlockSize(arg1::ISLocalToGlobalMapping{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISLocalToGlobalMappingGetBlockSize,petscRealSingle),PetscErrorCode,(ISLocalToGlobalMapping{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function ISAllGatherColors(arg0::Type{Float32},arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{ISColoringValue},StridedArray{ISColoringValue},Ptr{ISColoringValue},Ref{ISColoringValue}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Ptr{ISColoringValue}},StridedArray{Ptr{ISColoringValue}},Ptr{Ptr{ISColoringValue}},Ref{Ptr{ISColoringValue}}})
    err = ccall((:ISAllGatherColors,petscRealSingle),PetscErrorCode,(comm_type,Int64,Ptr{ISColoringValue},Ptr{Int64},Ptr{Ptr{ISColoringValue}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function ISColoringCreate(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Union{Ptr{ISColoringValue},StridedArray{ISColoringValue},Ptr{ISColoringValue},Ref{ISColoringValue}},arg5::PetscCopyMode,arg6::Union{Ptr{ISColoring{Float32}},StridedArray{ISColoring{Float32}},Ptr{ISColoring{Float32}},Ref{ISColoring{Float32}}})
    err = ccall((:ISColoringCreate,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Ptr{ISColoringValue},PetscCopyMode,Ptr{ISColoring{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function ISColoringDestroy(arg1::Union{Ptr{ISColoring{Float32}},StridedArray{ISColoring{Float32}},Ptr{ISColoring{Float32}},Ref{ISColoring{Float32}}})
    err = ccall((:ISColoringDestroy,petscRealSingle),PetscErrorCode,(Ptr{ISColoring{Float32}},),arg1)
    return err
end

function ISColoringView(arg1::ISColoring{Float32},arg2::PetscViewer{Float32})
    err = ccall((:ISColoringView,petscRealSingle),PetscErrorCode,(ISColoring{Float32},PetscViewer{Float32}),arg1,arg2)
    return err
end

function ISColoringViewFromOptions(arg1::ISColoring{Float32},arg2::PetscObject,arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:ISColoringViewFromOptions,petscRealSingle),PetscErrorCode,(ISColoring{Float32},PetscObject,Cstring),arg1,arg2,arg3)
    return err
end

function ISColoringGetIS(arg1::ISColoring{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{IS{Float32}}},StridedArray{Ptr{IS{Float32}}},Ptr{Ptr{IS{Float32}}},Ref{Ptr{IS{Float32}}}})
    err = ccall((:ISColoringGetIS,petscRealSingle),PetscErrorCode,(ISColoring{Float32},Ptr{Int64},Ptr{Ptr{IS{Float32}}}),arg1,arg2,arg3)
    return err
end

function ISColoringRestoreIS(arg1::ISColoring{Float32},arg2::Union{Ptr{Ptr{IS{Float32}}},StridedArray{Ptr{IS{Float32}}},Ptr{Ptr{IS{Float32}}},Ref{Ptr{IS{Float32}}}})
    err = ccall((:ISColoringRestoreIS,petscRealSingle),PetscErrorCode,(ISColoring{Float32},Ptr{Ptr{IS{Float32}}}),arg1,arg2)
    return err
end

function ISColoringReference(arg1::ISColoring{Float32})
    err = ccall((:ISColoringReference,petscRealSingle),PetscErrorCode,(ISColoring{Float32},),arg1)
    return err
end

function ISColoringSetType(arg1::ISColoring{Float32},arg2::ISColoringType)
    err = ccall((:ISColoringSetType,petscRealSingle),PetscErrorCode,(ISColoring{Float32},ISColoringType),arg1,arg2)
    return err
end

function ISPartitioningToNumbering(arg1::IS{Float32},arg2::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:ISPartitioningToNumbering,petscRealSingle),PetscErrorCode,(IS{Float32},Ptr{IS{Float32}}),arg1,arg2)
    return err
end

function ISPartitioningCount(arg1::IS{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISPartitioningCount,petscRealSingle),PetscErrorCode,(IS{Float32},Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function ISCompressIndicesGeneral(arg1::Integer,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg6::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:ISCompressIndicesGeneral,petscRealSingle),PetscErrorCode,(Int64,Int64,Int64,Int64,Ptr{IS{Float32}},Ptr{IS{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function ISCompressIndicesSorted(arg1::Integer,arg2::Integer,arg3::Integer,arg4::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg5::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:ISCompressIndicesSorted,petscRealSingle),PetscErrorCode,(Int64,Int64,Int64,Ptr{IS{Float32}},Ptr{IS{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function ISExpandIndicesGeneral(arg1::Integer,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg6::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:ISExpandIndicesGeneral,petscRealSingle),PetscErrorCode,(Int64,Int64,Int64,Int64,Ptr{IS{Float32}},Ptr{IS{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscLayoutFindOwner(map::PetscLayout{Float32},idx::Integer,owner::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscLayoutFindOwner,petscRealSingle),PetscErrorCode,(PetscLayout{Float32},Int64,Ptr{Int64}),map,idx,owner)
    return err
end

function PetscLayoutFindOwnerIndex(map::PetscLayout{Float32},idx::Integer,owner::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},lidx::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscLayoutFindOwnerIndex,petscRealSingle),PetscErrorCode,(PetscLayout{Float32},Int64,Ptr{Int64},Ptr{Int64}),map,idx,owner,lidx)
    return err
end

function PetscLayoutCreate(arg1::MPI_Comm,arg2::Union{Ptr{PetscLayout{Float32}},StridedArray{PetscLayout{Float32}},Ptr{PetscLayout{Float32}},Ref{PetscLayout{Float32}}})
    err = ccall((:PetscLayoutCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{PetscLayout{Float32}}),arg1,arg2)
    return err
end

function PetscLayoutSetUp(arg1::PetscLayout{Float32})
    err = ccall((:PetscLayoutSetUp,petscRealSingle),PetscErrorCode,(PetscLayout{Float32},),arg1)
    return err
end

function PetscLayoutDestroy(arg1::Union{Ptr{PetscLayout{Float32}},StridedArray{PetscLayout{Float32}},Ptr{PetscLayout{Float32}},Ref{PetscLayout{Float32}}})
    err = ccall((:PetscLayoutDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscLayout{Float32}},),arg1)
    return err
end

function PetscLayoutDuplicate(arg1::PetscLayout{Float32},arg2::Union{Ptr{PetscLayout{Float32}},StridedArray{PetscLayout{Float32}},Ptr{PetscLayout{Float32}},Ref{PetscLayout{Float32}}})
    err = ccall((:PetscLayoutDuplicate,petscRealSingle),PetscErrorCode,(PetscLayout{Float32},Ptr{PetscLayout{Float32}}),arg1,arg2)
    return err
end

function PetscLayoutReference(arg1::PetscLayout{Float32},arg2::Union{Ptr{PetscLayout{Float32}},StridedArray{PetscLayout{Float32}},Ptr{PetscLayout{Float32}},Ref{PetscLayout{Float32}}})
    err = ccall((:PetscLayoutReference,petscRealSingle),PetscErrorCode,(PetscLayout{Float32},Ptr{PetscLayout{Float32}}),arg1,arg2)
    return err
end

function PetscLayoutSetLocalSize(arg1::PetscLayout{Float32},arg2::Integer)
    err = ccall((:PetscLayoutSetLocalSize,petscRealSingle),PetscErrorCode,(PetscLayout{Float32},Int64),arg1,arg2)
    return err
end

function PetscLayoutGetLocalSize(arg1::PetscLayout{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscLayoutGetLocalSize,petscRealSingle),PetscErrorCode,(PetscLayout{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscLayoutSetSize(arg1::PetscLayout{Float32},arg2::Integer)
    err = ccall((:PetscLayoutSetSize,petscRealSingle),PetscErrorCode,(PetscLayout{Float32},Int64),arg1,arg2)
    return err
end

function PetscLayoutGetSize(arg1::PetscLayout{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscLayoutGetSize,petscRealSingle),PetscErrorCode,(PetscLayout{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscLayoutSetBlockSize(arg1::PetscLayout{Float32},arg2::Integer)
    err = ccall((:PetscLayoutSetBlockSize,petscRealSingle),PetscErrorCode,(PetscLayout{Float32},Int64),arg1,arg2)
    return err
end

function PetscLayoutGetBlockSize(arg1::PetscLayout{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscLayoutGetBlockSize,petscRealSingle),PetscErrorCode,(PetscLayout{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscLayoutGetRange(arg1::PetscLayout{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscLayoutGetRange,petscRealSingle),PetscErrorCode,(PetscLayout{Float32},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PetscLayoutGetRanges(arg1::PetscLayout{Float32},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:PetscLayoutGetRanges,petscRealSingle),PetscErrorCode,(PetscLayout{Float32},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function PetscLayoutSetISLocalToGlobalMapping(arg1::PetscLayout{Float32},arg2::ISLocalToGlobalMapping{Float32})
    err = ccall((:PetscLayoutSetISLocalToGlobalMapping,petscRealSingle),PetscErrorCode,(PetscLayout{Float32},ISLocalToGlobalMapping{Float32}),arg1,arg2)
    return err
end

function PetscSFSetGraphLayout(arg1::PetscSF,arg2::PetscLayout{Float32},arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::PetscCopyMode,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSFSetGraphLayout,petscRealSingle),PetscErrorCode,(PetscSF,PetscLayout{Float32},Int64,Ptr{Int64},PetscCopyMode,Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscSectionCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{PetscSection},StridedArray{PetscSection},Ptr{PetscSection},Ref{PetscSection}})
    err = ccall((:PetscSectionCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{PetscSection}),arg1,arg2)
    return err
end

function PetscSectionClone(arg0::Type{Float32},arg1::PetscSection,arg2::Union{Ptr{PetscSection},StridedArray{PetscSection},Ptr{PetscSection},Ref{PetscSection}})
    err = ccall((:PetscSectionClone,petscRealSingle),PetscErrorCode,(PetscSection,Ptr{PetscSection}),arg1,arg2)
    return err
end

function PetscSectionCopy(arg0::Type{Float32},arg1::PetscSection,arg2::PetscSection)
    err = ccall((:PetscSectionCopy,petscRealSingle),PetscErrorCode,(PetscSection,PetscSection),arg1,arg2)
    return err
end

function PetscSectionGetNumFields(arg0::Type{Float32},arg1::PetscSection,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSectionGetNumFields,petscRealSingle),PetscErrorCode,(PetscSection,Ptr{Int64}),arg1,arg2)
    return err
end

function PetscSectionSetNumFields(arg0::Type{Float32},arg1::PetscSection,arg2::Integer)
    err = ccall((:PetscSectionSetNumFields,petscRealSingle),PetscErrorCode,(PetscSection,Int64),arg1,arg2)
    return err
end

function PetscSectionGetFieldName(arg0::Type{Float32},arg1::PetscSection,arg2::Integer,arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscSectionGetFieldName,petscRealSingle),PetscErrorCode,(PetscSection,Int64,Ptr{Ptr{UInt8}}),arg1,arg2,arg3)
    return err
end

function PetscSectionSetFieldName(arg0::Type{Float32},arg1::PetscSection,arg2::Integer,arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscSectionSetFieldName,petscRealSingle),PetscErrorCode,(PetscSection,Int64,Cstring),arg1,arg2,arg3)
    return err
end

function PetscSectionGetFieldComponents(arg0::Type{Float32},arg1::PetscSection,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSectionGetFieldComponents,petscRealSingle),PetscErrorCode,(PetscSection,Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PetscSectionSetFieldComponents(arg0::Type{Float32},arg1::PetscSection,arg2::Integer,arg3::Integer)
    err = ccall((:PetscSectionSetFieldComponents,petscRealSingle),PetscErrorCode,(PetscSection,Int64,Int64),arg1,arg2,arg3)
    return err
end

function PetscSectionGetChart(arg0::Type{Float32},arg1::PetscSection,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSectionGetChart,petscRealSingle),PetscErrorCode,(PetscSection,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PetscSectionSetChart(arg0::Type{Float32},arg1::PetscSection,arg2::Integer,arg3::Integer)
    err = ccall((:PetscSectionSetChart,petscRealSingle),PetscErrorCode,(PetscSection,Int64,Int64),arg1,arg2,arg3)
    return err
end

function PetscSectionGetPermutation(arg1::PetscSection,arg2::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:PetscSectionGetPermutation,petscRealSingle),PetscErrorCode,(PetscSection,Ptr{IS{Float32}}),arg1,arg2)
    return err
end

function PetscSectionSetPermutation(arg1::PetscSection,arg2::IS{Float32})
    err = ccall((:PetscSectionSetPermutation,petscRealSingle),PetscErrorCode,(PetscSection,IS{Float32}),arg1,arg2)
    return err
end

function PetscSectionGetDof(arg0::Type{Float32},arg1::PetscSection,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSectionGetDof,petscRealSingle),PetscErrorCode,(PetscSection,Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PetscSectionSetDof(arg0::Type{Float32},arg1::PetscSection,arg2::Integer,arg3::Integer)
    err = ccall((:PetscSectionSetDof,petscRealSingle),PetscErrorCode,(PetscSection,Int64,Int64),arg1,arg2,arg3)
    return err
end

function PetscSectionAddDof(arg0::Type{Float32},arg1::PetscSection,arg2::Integer,arg3::Integer)
    err = ccall((:PetscSectionAddDof,petscRealSingle),PetscErrorCode,(PetscSection,Int64,Int64),arg1,arg2,arg3)
    return err
end

function PetscSectionGetFieldDof(arg0::Type{Float32},arg1::PetscSection,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSectionGetFieldDof,petscRealSingle),PetscErrorCode,(PetscSection,Int64,Int64,Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function PetscSectionSetFieldDof(arg0::Type{Float32},arg1::PetscSection,arg2::Integer,arg3::Integer,arg4::Integer)
    err = ccall((:PetscSectionSetFieldDof,petscRealSingle),PetscErrorCode,(PetscSection,Int64,Int64,Int64),arg1,arg2,arg3,arg4)
    return err
end

function PetscSectionAddFieldDof(arg0::Type{Float32},arg1::PetscSection,arg2::Integer,arg3::Integer,arg4::Integer)
    err = ccall((:PetscSectionAddFieldDof,petscRealSingle),PetscErrorCode,(PetscSection,Int64,Int64,Int64),arg1,arg2,arg3,arg4)
    return err
end

function PetscSectionHasConstraints(arg0::Type{Float32},arg1::PetscSection,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscSectionHasConstraints,petscRealSingle),PetscErrorCode,(PetscSection,Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscSectionGetConstraintDof(arg0::Type{Float32},arg1::PetscSection,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSectionGetConstraintDof,petscRealSingle),PetscErrorCode,(PetscSection,Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PetscSectionSetConstraintDof(arg0::Type{Float32},arg1::PetscSection,arg2::Integer,arg3::Integer)
    err = ccall((:PetscSectionSetConstraintDof,petscRealSingle),PetscErrorCode,(PetscSection,Int64,Int64),arg1,arg2,arg3)
    return err
end

function PetscSectionAddConstraintDof(arg0::Type{Float32},arg1::PetscSection,arg2::Integer,arg3::Integer)
    err = ccall((:PetscSectionAddConstraintDof,petscRealSingle),PetscErrorCode,(PetscSection,Int64,Int64),arg1,arg2,arg3)
    return err
end

function PetscSectionGetFieldConstraintDof(arg0::Type{Float32},arg1::PetscSection,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSectionGetFieldConstraintDof,petscRealSingle),PetscErrorCode,(PetscSection,Int64,Int64,Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function PetscSectionSetFieldConstraintDof(arg0::Type{Float32},arg1::PetscSection,arg2::Integer,arg3::Integer,arg4::Integer)
    err = ccall((:PetscSectionSetFieldConstraintDof,petscRealSingle),PetscErrorCode,(PetscSection,Int64,Int64,Int64),arg1,arg2,arg3,arg4)
    return err
end

function PetscSectionAddFieldConstraintDof(arg0::Type{Float32},arg1::PetscSection,arg2::Integer,arg3::Integer,arg4::Integer)
    err = ccall((:PetscSectionAddFieldConstraintDof,petscRealSingle),PetscErrorCode,(PetscSection,Int64,Int64,Int64),arg1,arg2,arg3,arg4)
    return err
end

function PetscSectionGetConstraintIndices(arg0::Type{Float32},arg1::PetscSection,arg2::Integer,arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:PetscSectionGetConstraintIndices,petscRealSingle),PetscErrorCode,(PetscSection,Int64,Ptr{Ptr{Int64}}),arg1,arg2,arg3)
    return err
end

function PetscSectionSetConstraintIndices(arg0::Type{Float32},arg1::PetscSection,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSectionSetConstraintIndices,petscRealSingle),PetscErrorCode,(PetscSection,Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PetscSectionGetFieldConstraintIndices(arg0::Type{Float32},arg1::PetscSection,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:PetscSectionGetFieldConstraintIndices,petscRealSingle),PetscErrorCode,(PetscSection,Int64,Int64,Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscSectionSetFieldConstraintIndices(arg0::Type{Float32},arg1::PetscSection,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSectionSetFieldConstraintIndices,petscRealSingle),PetscErrorCode,(PetscSection,Int64,Int64,Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function PetscSectionSetUpBC(arg0::Type{Float32},arg1::PetscSection)
    err = ccall((:PetscSectionSetUpBC,petscRealSingle),PetscErrorCode,(PetscSection,),arg1)
    return err
end

function PetscSectionSetUp(arg0::Type{Float32},arg1::PetscSection)
    err = ccall((:PetscSectionSetUp,petscRealSingle),PetscErrorCode,(PetscSection,),arg1)
    return err
end

function PetscSectionGetMaxDof(arg0::Type{Float32},arg1::PetscSection,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSectionGetMaxDof,petscRealSingle),PetscErrorCode,(PetscSection,Ptr{Int64}),arg1,arg2)
    return err
end

function PetscSectionGetStorageSize(arg0::Type{Float32},arg1::PetscSection,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSectionGetStorageSize,petscRealSingle),PetscErrorCode,(PetscSection,Ptr{Int64}),arg1,arg2)
    return err
end

function PetscSectionGetConstrainedStorageSize(arg0::Type{Float32},arg1::PetscSection,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSectionGetConstrainedStorageSize,petscRealSingle),PetscErrorCode,(PetscSection,Ptr{Int64}),arg1,arg2)
    return err
end

function PetscSectionGetOffset(arg0::Type{Float32},arg1::PetscSection,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSectionGetOffset,petscRealSingle),PetscErrorCode,(PetscSection,Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PetscSectionSetOffset(arg0::Type{Float32},arg1::PetscSection,arg2::Integer,arg3::Integer)
    err = ccall((:PetscSectionSetOffset,petscRealSingle),PetscErrorCode,(PetscSection,Int64,Int64),arg1,arg2,arg3)
    return err
end

function PetscSectionGetFieldOffset(arg0::Type{Float32},arg1::PetscSection,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSectionGetFieldOffset,petscRealSingle),PetscErrorCode,(PetscSection,Int64,Int64,Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function PetscSectionSetFieldOffset(arg0::Type{Float32},arg1::PetscSection,arg2::Integer,arg3::Integer,arg4::Integer)
    err = ccall((:PetscSectionSetFieldOffset,petscRealSingle),PetscErrorCode,(PetscSection,Int64,Int64,Int64),arg1,arg2,arg3,arg4)
    return err
end

function PetscSectionGetOffsetRange(arg0::Type{Float32},arg1::PetscSection,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSectionGetOffsetRange,petscRealSingle),PetscErrorCode,(PetscSection,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PetscSectionView(arg1::PetscSection,arg2::PetscViewer{Float32})
    err = ccall((:PetscSectionView,petscRealSingle),PetscErrorCode,(PetscSection,PetscViewer{Float32}),arg1,arg2)
    return err
end

function PetscSectionViewFromOptions(arg0::Type{Float32},A::PetscSection,obj::PetscObject,name::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscSectionViewFromOptions,petscRealSingle),PetscErrorCode,(PetscSection,PetscObject,Cstring),A,obj,name)
    return err
end

function PetscSectionReset(arg0::Type{Float32},arg1::PetscSection)
    err = ccall((:PetscSectionReset,petscRealSingle),PetscErrorCode,(PetscSection,),arg1)
    return err
end

function PetscSectionDestroy(arg0::Type{Float32},arg1::Union{Ptr{PetscSection},StridedArray{PetscSection},Ptr{PetscSection},Ref{PetscSection}})
    err = ccall((:PetscSectionDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscSection},),arg1)
    return err
end

function PetscSectionCreateGlobalSection(arg0::Type{Float32},arg1::PetscSection,arg2::PetscSF,arg3::PetscBool,arg4::Union{Ptr{PetscSection},StridedArray{PetscSection},Ptr{PetscSection},Ref{PetscSection}})
    err = ccall((:PetscSectionCreateGlobalSection,petscRealSingle),PetscErrorCode,(PetscSection,PetscSF,PetscBool,Ptr{PetscSection}),arg1,arg2,arg3,arg4)
    return err
end

function PetscSectionCreateGlobalSectionCensored(arg0::Type{Float32},arg1::PetscSection,arg2::PetscSF,arg3::PetscBool,arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{PetscSection},StridedArray{PetscSection},Ptr{PetscSection},Ref{PetscSection}})
    err = ccall((:PetscSectionCreateGlobalSectionCensored,petscRealSingle),PetscErrorCode,(PetscSection,PetscSF,PetscBool,Int64,Ptr{Int64},Ptr{PetscSection}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscSectionCreateSubsection(arg0::Type{Float32},arg1::PetscSection,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{PetscSection},StridedArray{PetscSection},Ptr{PetscSection},Ref{PetscSection}})
    err = ccall((:PetscSectionCreateSubsection,petscRealSingle),PetscErrorCode,(PetscSection,Int64,Ptr{Int64},Ptr{PetscSection}),arg1,arg2,arg3,arg4)
    return err
end

function PetscSectionCreateSubmeshSection(arg1::PetscSection,arg2::IS{Float32},arg3::Union{Ptr{PetscSection},StridedArray{PetscSection},Ptr{PetscSection},Ref{PetscSection}})
    err = ccall((:PetscSectionCreateSubmeshSection,petscRealSingle),PetscErrorCode,(PetscSection,IS{Float32},Ptr{PetscSection}),arg1,arg2,arg3)
    return err
end

function PetscSectionGetPointLayout(arg1::MPI_Comm,arg2::PetscSection,arg3::Union{Ptr{PetscLayout{Float32}},StridedArray{PetscLayout{Float32}},Ptr{PetscLayout{Float32}},Ref{PetscLayout{Float32}}})
    err = ccall((:PetscSectionGetPointLayout,petscRealSingle),PetscErrorCode,(comm_type,PetscSection,Ptr{PetscLayout{Float32}}),arg1,arg2,arg3)
    return err
end

function PetscSectionGetValueLayout(arg1::MPI_Comm,arg2::PetscSection,arg3::Union{Ptr{PetscLayout{Float32}},StridedArray{PetscLayout{Float32}},Ptr{PetscLayout{Float32}},Ref{PetscLayout{Float32}}})
    err = ccall((:PetscSectionGetValueLayout,petscRealSingle),PetscErrorCode,(comm_type,PetscSection,Ptr{PetscLayout{Float32}}),arg1,arg2,arg3)
    return err
end

function PetscSectionPermute(arg1::PetscSection,arg2::IS{Float32},arg3::Union{Ptr{PetscSection},StridedArray{PetscSection},Ptr{PetscSection},Ref{PetscSection}})
    err = ccall((:PetscSectionPermute,petscRealSingle),PetscErrorCode,(PetscSection,IS{Float32},Ptr{PetscSection}),arg1,arg2,arg3)
    return err
end

function PetscSectionGetField(arg0::Type{Float32},arg1::PetscSection,arg2::Integer,arg3::Union{Ptr{PetscSection},StridedArray{PetscSection},Ptr{PetscSection},Ref{PetscSection}})
    err = ccall((:PetscSectionGetField,petscRealSingle),PetscErrorCode,(PetscSection,Int64,Ptr{PetscSection}),arg1,arg2,arg3)
    return err
end

function PetscSectionSetClosureIndex(arg1::PetscSection,arg2::PetscObject,arg3::PetscSection,arg4::IS{Float32})
    err = ccall((:PetscSectionSetClosureIndex,petscRealSingle),PetscErrorCode,(PetscSection,PetscObject,PetscSection,IS{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function PetscSectionGetClosureIndex(arg1::PetscSection,arg2::PetscObject,arg3::Union{Ptr{PetscSection},StridedArray{PetscSection},Ptr{PetscSection},Ref{PetscSection}},arg4::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:PetscSectionGetClosureIndex,petscRealSingle),PetscErrorCode,(PetscSection,PetscObject,Ptr{PetscSection},Ptr{IS{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscSFConvertPartition(arg1::PetscSF,arg2::PetscSection,arg3::IS{Float32},arg4::Union{Ptr{ISLocalToGlobalMapping{Float32}},StridedArray{ISLocalToGlobalMapping{Float32}},Ptr{ISLocalToGlobalMapping{Float32}},Ref{ISLocalToGlobalMapping{Float32}}},arg5::Union{Ptr{PetscSF},StridedArray{PetscSF},Ptr{PetscSF},Ref{PetscSF}})
    err = ccall((:PetscSFConvertPartition,petscRealSingle),PetscErrorCode,(PetscSF,PetscSection,IS{Float32},Ptr{ISLocalToGlobalMapping{Float32}},Ptr{PetscSF}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscSFCreateRemoteOffsets(arg0::Type{Float32},arg1::PetscSF,arg2::PetscSection,arg3::PetscSection,arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:PetscSFCreateRemoteOffsets,petscRealSingle),PetscErrorCode,(PetscSF,PetscSection,PetscSection,Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscSFDistributeSection(arg0::Type{Float32},arg1::PetscSF,arg2::PetscSection,arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg4::PetscSection)
    err = ccall((:PetscSFDistributeSection,petscRealSingle),PetscErrorCode,(PetscSF,PetscSection,Ptr{Ptr{Int64}},PetscSection),arg1,arg2,arg3,arg4)
    return err
end

function PetscSFCreateSectionSF(arg0::Type{Float32},arg1::PetscSF,arg2::PetscSection,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::PetscSection,arg5::Union{Ptr{PetscSF},StridedArray{PetscSF},Ptr{PetscSF},Ref{PetscSF}})
    err = ccall((:PetscSFCreateSectionSF,petscRealSingle),PetscErrorCode,(PetscSF,PetscSection,Ptr{Int64},PetscSection,Ptr{PetscSF}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function VecInitializePackage(arg0::Type{Float32})
    err = ccall((:VecInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function VecFinalizePackage(arg0::Type{Float32})
    err = ccall((:VecFinalizePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function VecCreate(arg1::MPI_Comm,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:VecCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{Vec{Float32}}),arg1,arg2)
    return err
end

function VecCreateSeq(arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:VecCreateSeq,petscRealSingle),PetscErrorCode,(comm_type,Int64,Ptr{Vec{Float32}}),arg1,arg2,arg3)
    return err
end

function VecCreateMPI(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:VecCreateMPI,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Ptr{Vec{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function VecCreateSeqWithArray(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:VecCreateSeqWithArray,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Ptr{Float32},Ptr{Vec{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function VecCreateMPIWithArray(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:VecCreateMPIWithArray,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Ptr{Float32},Ptr{Vec{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function VecCreateShared(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:VecCreateShared,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Ptr{Vec{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function VecSetFromOptions(arg1::Vec{Float32})
    err = ccall((:VecSetFromOptions,petscRealSingle),PetscErrorCode,(Vec{Float32},),arg1)
    return err
end

function VecViewFromOptions(A::Vec{Float32},B::PetscObject,name::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:VecViewFromOptions,petscRealSingle),PetscErrorCode,(Vec{Float32},PetscObject,Cstring),A,B,name)
    return err
end

function VecSetUp(arg1::Vec{Float32})
    err = ccall((:VecSetUp,petscRealSingle),PetscErrorCode,(Vec{Float32},),arg1)
    return err
end

function VecDestroy(arg1::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:VecDestroy,petscRealSingle),PetscErrorCode,(Ptr{Vec{Float32}},),arg1)
    return err
end

function VecZeroEntries(arg1::Vec{Float32})
    err = ccall((:VecZeroEntries,petscRealSingle),PetscErrorCode,(Vec{Float32},),arg1)
    return err
end

function VecSetOptionsPrefix(arg1::Vec{Float32},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:VecSetOptionsPrefix,petscRealSingle),PetscErrorCode,(Vec{Float32},Cstring),arg1,arg2)
    return err
end

function VecAppendOptionsPrefix(arg1::Vec{Float32},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:VecAppendOptionsPrefix,petscRealSingle),PetscErrorCode,(Vec{Float32},Cstring),arg1,arg2)
    return err
end

function VecGetOptionsPrefix(arg1::Vec{Float32},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:VecGetOptionsPrefix,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function VecSetSizes(arg1::Vec{Float32},arg2::Integer,arg3::Integer)
    err = ccall((:VecSetSizes,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Int64),arg1,arg2,arg3)
    return err
end

function VecDotNorm2(arg1::Vec{Float32},arg2::Vec{Float32},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecDotNorm2,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32},Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function VecDot(arg1::Vec{Float32},arg2::Vec{Float32},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecDot,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32},Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function VecDotRealPart(arg1::Vec{Float32},arg2::Vec{Float32},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecDotRealPart,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32},Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function VecTDot(arg1::Vec{Float32},arg2::Vec{Float32},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecTDot,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32},Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function VecMDot(arg1::Vec{Float32},arg2::Integer,arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecMDot,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Ptr{Vec{Float32}},Ptr{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function VecMTDot(arg1::Vec{Float32},arg2::Integer,arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecMTDot,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Ptr{Vec{Float32}},Ptr{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function VecGetSubVector(arg1::Vec{Float32},arg2::IS{Float32},arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:VecGetSubVector,petscRealSingle),PetscErrorCode,(Vec{Float32},IS{Float32},Ptr{Vec{Float32}}),arg1,arg2,arg3)
    return err
end

function VecRestoreSubVector(arg1::Vec{Float32},arg2::IS{Float32},arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:VecRestoreSubVector,petscRealSingle),PetscErrorCode,(Vec{Float32},IS{Float32},Ptr{Vec{Float32}}),arg1,arg2,arg3)
    return err
end

function VecNorm(arg1::Vec{Float32},arg2::NormType,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecNorm,petscRealSingle),PetscErrorCode,(Vec{Float32},NormType,Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function VecNormAvailable(arg1::Vec{Float32},arg2::NormType,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecNormAvailable,petscRealSingle),PetscErrorCode,(Vec{Float32},NormType,Ptr{PetscBool},Ptr{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function VecNormalize(arg1::Vec{Float32},arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecNormalize,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{Float32}),arg1,arg2)
    return err
end

function VecSum(arg1::Vec{Float32},arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecSum,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{Float32}),arg1,arg2)
    return err
end

function VecMax(arg1::Vec{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecMax,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{Int64},Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function VecMin(arg1::Vec{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecMin,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{Int64},Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function VecScale(arg1::Vec{Float32},arg2::Float32)
    err = ccall((:VecScale,petscRealSingle),PetscErrorCode,(Vec{Float32},Float32),arg1,arg2)
    return err
end

function VecCopy(arg1::Vec{Float32},arg2::Vec{Float32})
    err = ccall((:VecCopy,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32}),arg1,arg2)
    return err
end

function VecSetRandom(arg1::Vec{Float32},arg2::PetscRandom)
    err = ccall((:VecSetRandom,petscRealSingle),PetscErrorCode,(Vec{Float32},PetscRandom),arg1,arg2)
    return err
end

function VecSet(arg1::Vec{Float32},arg2::Float32)
    err = ccall((:VecSet,petscRealSingle),PetscErrorCode,(Vec{Float32},Float32),arg1,arg2)
    return err
end

function VecSetInf(arg1::Vec{Float32})
    err = ccall((:VecSetInf,petscRealSingle),PetscErrorCode,(Vec{Float32},),arg1)
    return err
end

function VecSwap(arg1::Vec{Float32},arg2::Vec{Float32})
    err = ccall((:VecSwap,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32}),arg1,arg2)
    return err
end

function VecAXPY(arg1::Vec{Float32},arg2::Float32,arg3::Vec{Float32})
    err = ccall((:VecAXPY,petscRealSingle),PetscErrorCode,(Vec{Float32},Float32,Vec{Float32}),arg1,arg2,arg3)
    return err
end

function VecAXPBY(arg1::Vec{Float32},arg2::Float32,arg3::Float32,arg4::Vec{Float32})
    err = ccall((:VecAXPBY,petscRealSingle),PetscErrorCode,(Vec{Float32},Float32,Float32,Vec{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function VecMAXPY(arg1::Vec{Float32},arg2::Integer,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:VecMAXPY,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Ptr{Float32},Ptr{Vec{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function VecAYPX(arg1::Vec{Float32},arg2::Float32,arg3::Vec{Float32})
    err = ccall((:VecAYPX,petscRealSingle),PetscErrorCode,(Vec{Float32},Float32,Vec{Float32}),arg1,arg2,arg3)
    return err
end

function VecWAXPY(arg1::Vec{Float32},arg2::Float32,arg3::Vec{Float32},arg4::Vec{Float32})
    err = ccall((:VecWAXPY,petscRealSingle),PetscErrorCode,(Vec{Float32},Float32,Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function VecAXPBYPCZ(arg1::Vec{Float32},arg2::Float32,arg3::Float32,arg4::Float32,arg5::Vec{Float32},arg6::Vec{Float32})
    err = ccall((:VecAXPBYPCZ,petscRealSingle),PetscErrorCode,(Vec{Float32},Float32,Float32,Float32,Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function VecPointwiseMax(arg1::Vec{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:VecPointwiseMax,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function VecPointwiseMaxAbs(arg1::Vec{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:VecPointwiseMaxAbs,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function VecPointwiseMin(arg1::Vec{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:VecPointwiseMin,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function VecPointwiseMult(arg1::Vec{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:VecPointwiseMult,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function VecPointwiseDivide(arg1::Vec{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:VecPointwiseDivide,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function VecMaxPointwiseDivide(arg1::Vec{Float32},arg2::Vec{Float32},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecMaxPointwiseDivide,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32},Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function VecShift(arg1::Vec{Float32},arg2::Float32)
    err = ccall((:VecShift,petscRealSingle),PetscErrorCode,(Vec{Float32},Float32),arg1,arg2)
    return err
end

function VecReciprocal(arg1::Vec{Float32})
    err = ccall((:VecReciprocal,petscRealSingle),PetscErrorCode,(Vec{Float32},),arg1)
    return err
end

function VecPermute(arg1::Vec{Float32},arg2::IS{Float32},arg3::PetscBool)
    err = ccall((:VecPermute,petscRealSingle),PetscErrorCode,(Vec{Float32},IS{Float32},PetscBool),arg1,arg2,arg3)
    return err
end

function VecSqrtAbs(arg1::Vec{Float32})
    err = ccall((:VecSqrtAbs,petscRealSingle),PetscErrorCode,(Vec{Float32},),arg1)
    return err
end

function VecLog(arg1::Vec{Float32})
    err = ccall((:VecLog,petscRealSingle),PetscErrorCode,(Vec{Float32},),arg1)
    return err
end

function VecExp(arg1::Vec{Float32})
    err = ccall((:VecExp,petscRealSingle),PetscErrorCode,(Vec{Float32},),arg1)
    return err
end

function VecAbs(arg1::Vec{Float32})
    err = ccall((:VecAbs,petscRealSingle),PetscErrorCode,(Vec{Float32},),arg1)
    return err
end

function VecDuplicate(arg1::Vec{Float32},arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:VecDuplicate,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{Vec{Float32}}),arg1,arg2)
    return err
end

function VecDuplicateVecs(arg1::Vec{Float32},arg2::Integer,arg3::Union{Ptr{Ptr{Vec{Float32}}},StridedArray{Ptr{Vec{Float32}}},Ptr{Ptr{Vec{Float32}}},Ref{Ptr{Vec{Float32}}}})
    err = ccall((:VecDuplicateVecs,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Ptr{Ptr{Vec{Float32}}}),arg1,arg2,arg3)
    return err
end

function VecDestroyVecs(arg1::Integer,arg2::Union{Ptr{Ptr{Vec{Float32}}},StridedArray{Ptr{Vec{Float32}}},Ptr{Ptr{Vec{Float32}}},Ref{Ptr{Vec{Float32}}}})
    err = ccall((:VecDestroyVecs,petscRealSingle),PetscErrorCode,(Int64,Ptr{Ptr{Vec{Float32}}}),arg1,arg2)
    return err
end

function VecStrideNormAll(arg1::Vec{Float32},arg2::NormType,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecStrideNormAll,petscRealSingle),PetscErrorCode,(Vec{Float32},NormType,Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function VecStrideMaxAll(arg1::Vec{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecStrideMaxAll,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{Int64},Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function VecStrideMinAll(arg1::Vec{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecStrideMinAll,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{Int64},Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function VecStrideScaleAll(arg1::Vec{Float32},arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecStrideScaleAll,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{Float32}),arg1,arg2)
    return err
end

function VecUniqueEntries(arg1::Vec{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:VecUniqueEntries,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{Int64},Ptr{Ptr{Float32}}),arg1,arg2,arg3)
    return err
end

function VecStrideNorm(arg1::Vec{Float32},arg2::Integer,arg3::NormType,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecStrideNorm,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,NormType,Ptr{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function VecStrideMax(arg1::Vec{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecStrideMax,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Ptr{Int64},Ptr{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function VecStrideMin(arg1::Vec{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecStrideMin,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Ptr{Int64},Ptr{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function VecStrideScale(arg1::Vec{Float32},arg2::Integer,arg3::Float32)
    err = ccall((:VecStrideScale,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Float32),arg1,arg2,arg3)
    return err
end

function VecStrideSet(arg1::Vec{Float32},arg2::Integer,arg3::Float32)
    err = ccall((:VecStrideSet,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Float32),arg1,arg2,arg3)
    return err
end

function VecStrideGather(arg1::Vec{Float32},arg2::Integer,arg3::Vec{Float32},arg4::InsertMode)
    err = ccall((:VecStrideGather,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Vec{Float32},InsertMode),arg1,arg2,arg3,arg4)
    return err
end

function VecStrideScatter(arg1::Vec{Float32},arg2::Integer,arg3::Vec{Float32},arg4::InsertMode)
    err = ccall((:VecStrideScatter,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Vec{Float32},InsertMode),arg1,arg2,arg3,arg4)
    return err
end

function VecStrideGatherAll(arg1::Vec{Float32},arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg3::InsertMode)
    err = ccall((:VecStrideGatherAll,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{Vec{Float32}},InsertMode),arg1,arg2,arg3)
    return err
end

function VecStrideScatterAll(arg1::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg2::Vec{Float32},arg3::InsertMode)
    err = ccall((:VecStrideScatterAll,petscRealSingle),PetscErrorCode,(Ptr{Vec{Float32}},Vec{Float32},InsertMode),arg1,arg2,arg3)
    return err
end

function VecStrideSubSetScatter(arg1::Vec{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Vec{Float32},arg6::InsertMode)
    err = ccall((:VecStrideSubSetScatter,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Ptr{Int64},Ptr{Int64},Vec{Float32},InsertMode),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function VecStrideSubSetGather(arg1::Vec{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Vec{Float32},arg6::InsertMode)
    err = ccall((:VecStrideSubSetGather,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Ptr{Int64},Ptr{Int64},Vec{Float32},InsertMode),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function VecSetValues(arg1::Vec{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::InsertMode)
    err = ccall((:VecSetValues,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Ptr{Int64},Ptr{Float32},InsertMode),arg1,arg2,arg3,arg4,arg5)
    return err
end

function VecGetValues(arg1::Vec{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecGetValues,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Ptr{Int64},Ptr{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function VecAssemblyBegin(arg1::Vec{Float32})
    err = ccall((:VecAssemblyBegin,petscRealSingle),PetscErrorCode,(Vec{Float32},),arg1)
    return err
end

function VecAssemblyEnd(arg1::Vec{Float32})
    err = ccall((:VecAssemblyEnd,petscRealSingle),PetscErrorCode,(Vec{Float32},),arg1)
    return err
end

function VecStashSetInitialSize(arg1::Vec{Float32},arg2::Integer,arg3::Integer)
    err = ccall((:VecStashSetInitialSize,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Int64),arg1,arg2,arg3)
    return err
end

function VecStashView(arg1::Vec{Float32},arg2::PetscViewer{Float32})
    err = ccall((:VecStashView,petscRealSingle),PetscErrorCode,(Vec{Float32},PetscViewer{Float32}),arg1,arg2)
    return err
end

function VecStashViewFromOptions(arg1::Vec{Float32},arg2::PetscObject,arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:VecStashViewFromOptions,petscRealSingle),PetscErrorCode,(Vec{Float32},PetscObject,Cstring),arg1,arg2,arg3)
    return err
end

function VecStashGetInfo(arg1::Vec{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:VecStashGetInfo,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function VecSetValue(v::Vec{Float32},i::Integer,va::Float32,mode::InsertMode)
    err = ccall((:VecSetValue,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Float32,InsertMode),v,i,va,mode)
    return err
end

function VecSetBlockSize(arg1::Vec{Float32},arg2::Integer)
    err = ccall((:VecSetBlockSize,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64),arg1,arg2)
    return err
end

function VecGetBlockSize(arg1::Vec{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:VecGetBlockSize,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function VecSetValuesBlocked(arg1::Vec{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::InsertMode)
    err = ccall((:VecSetValuesBlocked,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Ptr{Int64},Ptr{Float32},InsertMode),arg1,arg2,arg3,arg4,arg5)
    return err
end

function VecSetType(arg1::Vec{Float32},arg2::VecType)
    err = ccall((:VecSetType,petscRealSingle),PetscErrorCode,(Vec{Float32},Cstring),arg1,arg2)
    return err
end

function VecGetType(arg1::Vec{Float32},arg2::Union{Ptr{VecType},StridedArray{VecType},Ptr{VecType},Ref{VecType}})
    (arg2_,tmp) = symbol_get_before(arg2)
    err = ccall((:VecGetType,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{Ptr{UInt8}}),arg1,arg2_)
    symbol_get_after(arg2_,arg2)
    return err
end

function VecRegister(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:VecRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function VecScatterCreate(arg1::Vec{Float32},arg2::IS{Float32},arg3::Vec{Float32},arg4::IS{Float32},arg5::Union{Ptr{VecScatter{Float32}},StridedArray{VecScatter{Float32}},Ptr{VecScatter{Float32}},Ref{VecScatter{Float32}}})
    err = ccall((:VecScatterCreate,petscRealSingle),PetscErrorCode,(Vec{Float32},IS{Float32},Vec{Float32},IS{Float32},Ptr{VecScatter{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function VecScatterCreateEmpty(arg1::MPI_Comm,arg2::Union{Ptr{VecScatter{Float32}},StridedArray{VecScatter{Float32}},Ptr{VecScatter{Float32}},Ref{VecScatter{Float32}}})
    err = ccall((:VecScatterCreateEmpty,petscRealSingle),PetscErrorCode,(comm_type,Ptr{VecScatter{Float32}}),arg1,arg2)
    return err
end

function VecScatterCreateLocal(arg1::VecScatter{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Integer,arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg9::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg10::Integer)
    err = ccall((:VecScatterCreateLocal,petscRealSingle),PetscErrorCode,(VecScatter{Float32},Int64,Ptr{Int64},Ptr{Int64},Ptr{Int64},Int64,Ptr{Int64},Ptr{Int64},Ptr{Int64},Int64),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function VecScatterBegin(arg1::VecScatter{Float32},arg2::Vec{Float32},arg3::Vec{Float32},arg4::InsertMode,arg5::ScatterMode)
    err = ccall((:VecScatterBegin,petscRealSingle),PetscErrorCode,(VecScatter{Float32},Vec{Float32},Vec{Float32},InsertMode,ScatterMode),arg1,arg2,arg3,arg4,arg5)
    return err
end

function VecScatterEnd(arg1::VecScatter{Float32},arg2::Vec{Float32},arg3::Vec{Float32},arg4::InsertMode,arg5::ScatterMode)
    err = ccall((:VecScatterEnd,petscRealSingle),PetscErrorCode,(VecScatter{Float32},Vec{Float32},Vec{Float32},InsertMode,ScatterMode),arg1,arg2,arg3,arg4,arg5)
    return err
end

function VecScatterDestroy(arg1::Union{Ptr{VecScatter{Float32}},StridedArray{VecScatter{Float32}},Ptr{VecScatter{Float32}},Ref{VecScatter{Float32}}})
    err = ccall((:VecScatterDestroy,petscRealSingle),PetscErrorCode,(Ptr{VecScatter{Float32}},),arg1)
    return err
end

function VecScatterCopy(arg1::VecScatter{Float32},arg2::Union{Ptr{VecScatter{Float32}},StridedArray{VecScatter{Float32}},Ptr{VecScatter{Float32}},Ref{VecScatter{Float32}}})
    err = ccall((:VecScatterCopy,petscRealSingle),PetscErrorCode,(VecScatter{Float32},Ptr{VecScatter{Float32}}),arg1,arg2)
    return err
end

function VecScatterView(arg1::VecScatter{Float32},arg2::PetscViewer{Float32})
    err = ccall((:VecScatterView,petscRealSingle),PetscErrorCode,(VecScatter{Float32},PetscViewer{Float32}),arg1,arg2)
    return err
end

function VecScatterViewFromOptions(A::VecScatter{Float32},obj::PetscObject,name::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:VecScatterViewFromOptions,petscRealSingle),PetscErrorCode,(VecScatter{Float32},PetscObject,Cstring),A,obj,name)
    return err
end

function VecScatterRemap(arg1::VecScatter{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:VecScatterRemap,petscRealSingle),PetscErrorCode,(VecScatter{Float32},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function VecScatterGetMerged(arg1::VecScatter{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:VecScatterGetMerged,petscRealSingle),PetscErrorCode,(VecScatter{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function VecGetArray4d(arg1::Vec{Float32},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Integer,arg9::Integer,arg10::Union{Ptr{Ptr{Ptr{Ptr{Ptr{Float32}}}}},StridedArray{Ptr{Ptr{Ptr{Ptr{Float32}}}}},Ptr{Ptr{Ptr{Ptr{Ptr{Float32}}}}},Ref{Ptr{Ptr{Ptr{Ptr{Float32}}}}}})
    err = ccall((:VecGetArray4d,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Ptr{Ptr{Ptr{Ptr{Float32}}}}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function VecRestoreArray4d(arg1::Vec{Float32},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Integer,arg9::Integer,arg10::Union{Ptr{Ptr{Ptr{Ptr{Ptr{Float32}}}}},StridedArray{Ptr{Ptr{Ptr{Ptr{Float32}}}}},Ptr{Ptr{Ptr{Ptr{Ptr{Float32}}}}},Ref{Ptr{Ptr{Ptr{Ptr{Float32}}}}}})
    err = ccall((:VecRestoreArray4d,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Ptr{Ptr{Ptr{Ptr{Float32}}}}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function VecGetArray3d(arg1::Vec{Float32},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Union{Ptr{Ptr{Ptr{Ptr{Float32}}}},StridedArray{Ptr{Ptr{Ptr{Float32}}}},Ptr{Ptr{Ptr{Ptr{Float32}}}},Ref{Ptr{Ptr{Ptr{Float32}}}}})
    err = ccall((:VecGetArray3d,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Ptr{Ptr{Ptr{Float32}}}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function VecRestoreArray3d(arg1::Vec{Float32},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Union{Ptr{Ptr{Ptr{Ptr{Float32}}}},StridedArray{Ptr{Ptr{Ptr{Float32}}}},Ptr{Ptr{Ptr{Ptr{Float32}}}},Ref{Ptr{Ptr{Ptr{Float32}}}}})
    err = ccall((:VecRestoreArray3d,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Ptr{Ptr{Ptr{Float32}}}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function VecGetArray2d(arg1::Vec{Float32},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Ptr{Ptr{Float32}}},StridedArray{Ptr{Ptr{Float32}}},Ptr{Ptr{Ptr{Float32}}},Ref{Ptr{Ptr{Float32}}}})
    err = ccall((:VecGetArray2d,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Int64,Int64,Int64,Ptr{Ptr{Ptr{Float32}}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function VecRestoreArray2d(arg1::Vec{Float32},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Ptr{Ptr{Float32}}},StridedArray{Ptr{Ptr{Float32}}},Ptr{Ptr{Ptr{Float32}}},Ref{Ptr{Ptr{Float32}}}})
    err = ccall((:VecRestoreArray2d,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Int64,Int64,Int64,Ptr{Ptr{Ptr{Float32}}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function VecGetArray1d(arg1::Vec{Float32},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:VecGetArray1d,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Int64,Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function VecRestoreArray1d(arg1::Vec{Float32},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:VecRestoreArray1d,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Int64,Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function VecGetArray4dRead(arg1::Vec{Float32},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Integer,arg9::Integer,arg10::Union{Ptr{Ptr{Ptr{Ptr{Ptr{Float32}}}}},StridedArray{Ptr{Ptr{Ptr{Ptr{Float32}}}}},Ptr{Ptr{Ptr{Ptr{Ptr{Float32}}}}},Ref{Ptr{Ptr{Ptr{Ptr{Float32}}}}}})
    err = ccall((:VecGetArray4dRead,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Ptr{Ptr{Ptr{Ptr{Float32}}}}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function VecRestoreArray4dRead(arg1::Vec{Float32},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Integer,arg9::Integer,arg10::Union{Ptr{Ptr{Ptr{Ptr{Ptr{Float32}}}}},StridedArray{Ptr{Ptr{Ptr{Ptr{Float32}}}}},Ptr{Ptr{Ptr{Ptr{Ptr{Float32}}}}},Ref{Ptr{Ptr{Ptr{Ptr{Float32}}}}}})
    err = ccall((:VecRestoreArray4dRead,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Ptr{Ptr{Ptr{Ptr{Float32}}}}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function VecGetArray3dRead(arg1::Vec{Float32},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Union{Ptr{Ptr{Ptr{Ptr{Float32}}}},StridedArray{Ptr{Ptr{Ptr{Float32}}}},Ptr{Ptr{Ptr{Ptr{Float32}}}},Ref{Ptr{Ptr{Ptr{Float32}}}}})
    err = ccall((:VecGetArray3dRead,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Ptr{Ptr{Ptr{Float32}}}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function VecRestoreArray3dRead(arg1::Vec{Float32},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Union{Ptr{Ptr{Ptr{Ptr{Float32}}}},StridedArray{Ptr{Ptr{Ptr{Float32}}}},Ptr{Ptr{Ptr{Ptr{Float32}}}},Ref{Ptr{Ptr{Ptr{Float32}}}}})
    err = ccall((:VecRestoreArray3dRead,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Ptr{Ptr{Ptr{Float32}}}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function VecGetArray2dRead(arg1::Vec{Float32},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Ptr{Ptr{Float32}}},StridedArray{Ptr{Ptr{Float32}}},Ptr{Ptr{Ptr{Float32}}},Ref{Ptr{Ptr{Float32}}}})
    err = ccall((:VecGetArray2dRead,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Int64,Int64,Int64,Ptr{Ptr{Ptr{Float32}}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function VecRestoreArray2dRead(arg1::Vec{Float32},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Ptr{Ptr{Float32}}},StridedArray{Ptr{Ptr{Float32}}},Ptr{Ptr{Ptr{Float32}}},Ref{Ptr{Ptr{Float32}}}})
    err = ccall((:VecRestoreArray2dRead,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Int64,Int64,Int64,Ptr{Ptr{Ptr{Float32}}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function VecGetArray1dRead(arg1::Vec{Float32},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:VecGetArray1dRead,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Int64,Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function VecRestoreArray1dRead(arg1::Vec{Float32},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:VecRestoreArray1dRead,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Int64,Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function VecPlaceArray(arg1::Vec{Float32},arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecPlaceArray,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{Float32}),arg1,arg2)
    return err
end

function VecResetArray(arg1::Vec{Float32})
    err = ccall((:VecResetArray,petscRealSingle),PetscErrorCode,(Vec{Float32},),arg1)
    return err
end

function VecReplaceArray(arg1::Vec{Float32},arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecReplaceArray,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{Float32}),arg1,arg2)
    return err
end

function VecGetArrays(arg1::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg2::Integer,arg3::Union{Ptr{Ptr{Ptr{Float32}}},StridedArray{Ptr{Ptr{Float32}}},Ptr{Ptr{Ptr{Float32}}},Ref{Ptr{Ptr{Float32}}}})
    err = ccall((:VecGetArrays,petscRealSingle),PetscErrorCode,(Ptr{Vec{Float32}},Int64,Ptr{Ptr{Ptr{Float32}}}),arg1,arg2,arg3)
    return err
end

function VecRestoreArrays(arg1::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg2::Integer,arg3::Union{Ptr{Ptr{Ptr{Float32}}},StridedArray{Ptr{Ptr{Float32}}},Ptr{Ptr{Ptr{Float32}}},Ref{Ptr{Ptr{Float32}}}})
    err = ccall((:VecRestoreArrays,petscRealSingle),PetscErrorCode,(Ptr{Vec{Float32}},Int64,Ptr{Ptr{Ptr{Float32}}}),arg1,arg2,arg3)
    return err
end

function VecView(arg1::Vec{Float32},arg2::PetscViewer{Float32})
    err = ccall((:VecView,petscRealSingle),PetscErrorCode,(Vec{Float32},PetscViewer{Float32}),arg1,arg2)
    return err
end

function VecEqual(arg1::Vec{Float32},arg2::Vec{Float32},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:VecEqual,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32},Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function VecLoad(arg1::Vec{Float32},arg2::PetscViewer{Float32})
    err = ccall((:VecLoad,petscRealSingle),PetscErrorCode,(Vec{Float32},PetscViewer{Float32}),arg1,arg2)
    return err
end

function VecGetSize(arg1::Vec{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:VecGetSize,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function VecGetLocalSize(arg1::Vec{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:VecGetLocalSize,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function VecGetOwnershipRange(arg1::Vec{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:VecGetOwnershipRange,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function VecGetOwnershipRanges(arg1::Vec{Float32},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:VecGetOwnershipRanges,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function VecSetLocalToGlobalMapping(arg1::Vec{Float32},arg2::ISLocalToGlobalMapping{Float32})
    err = ccall((:VecSetLocalToGlobalMapping,petscRealSingle),PetscErrorCode,(Vec{Float32},ISLocalToGlobalMapping{Float32}),arg1,arg2)
    return err
end

function VecSetValuesLocal(arg1::Vec{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::InsertMode)
    err = ccall((:VecSetValuesLocal,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Ptr{Int64},Ptr{Float32},InsertMode),arg1,arg2,arg3,arg4,arg5)
    return err
end

function VecSetValueLocal(v::Vec{Float32},i::Integer,va::Float32,mode::InsertMode)
    err = ccall((:VecSetValueLocal,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Float32,InsertMode),v,i,va,mode)
    return err
end

function VecSetValuesBlockedLocal(arg1::Vec{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::InsertMode)
    err = ccall((:VecSetValuesBlockedLocal,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Ptr{Int64},Ptr{Float32},InsertMode),arg1,arg2,arg3,arg4,arg5)
    return err
end

function VecGetLocalToGlobalMapping(arg1::Vec{Float32},arg2::Union{Ptr{ISLocalToGlobalMapping{Float32}},StridedArray{ISLocalToGlobalMapping{Float32}},Ptr{ISLocalToGlobalMapping{Float32}},Ref{ISLocalToGlobalMapping{Float32}}})
    err = ccall((:VecGetLocalToGlobalMapping,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{ISLocalToGlobalMapping{Float32}}),arg1,arg2)
    return err
end

function VecDotBegin(arg1::Vec{Float32},arg2::Vec{Float32},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecDotBegin,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32},Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function VecDotEnd(arg1::Vec{Float32},arg2::Vec{Float32},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecDotEnd,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32},Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function VecTDotBegin(arg1::Vec{Float32},arg2::Vec{Float32},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecTDotBegin,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32},Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function VecTDotEnd(arg1::Vec{Float32},arg2::Vec{Float32},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecTDotEnd,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32},Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function VecNormBegin(arg1::Vec{Float32},arg2::NormType,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecNormBegin,petscRealSingle),PetscErrorCode,(Vec{Float32},NormType,Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function VecNormEnd(arg1::Vec{Float32},arg2::NormType,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecNormEnd,petscRealSingle),PetscErrorCode,(Vec{Float32},NormType,Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function VecMDotBegin(arg1::Vec{Float32},arg2::Integer,arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecMDotBegin,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Ptr{Vec{Float32}},Ptr{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function VecMDotEnd(arg1::Vec{Float32},arg2::Integer,arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecMDotEnd,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Ptr{Vec{Float32}},Ptr{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function VecMTDotBegin(arg1::Vec{Float32},arg2::Integer,arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecMTDotBegin,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Ptr{Vec{Float32}},Ptr{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function VecMTDotEnd(arg1::Vec{Float32},arg2::Integer,arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecMTDotEnd,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Ptr{Vec{Float32}},Ptr{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function PetscCommSplitReductionBegin(arg0::Type{Float32},arg1::MPI_Comm)
    err = ccall((:PetscCommSplitReductionBegin,petscRealSingle),PetscErrorCode,(comm_type,),arg1)
    return err
end

function VecSetOption(arg1::Vec{Float32},arg2::VecOption,arg3::PetscBool)
    err = ccall((:VecSetOption,petscRealSingle),PetscErrorCode,(Vec{Float32},VecOption,PetscBool),arg1,arg2,arg3)
    return err
end

function VecGetArray(arg1::Vec{Float32},arg2::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:VecGetArray,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{Ptr{Float32}}),arg1,arg2)
    return err
end

function VecGetArrayRead(arg1::Vec{Float32},arg2::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:VecGetArrayRead,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{Ptr{Float32}}),arg1,arg2)
    return err
end

function VecRestoreArray(arg1::Vec{Float32},arg2::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:VecRestoreArray,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{Ptr{Float32}}),arg1,arg2)
    return err
end

function VecRestoreArrayRead(arg1::Vec{Float32},arg2::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:VecRestoreArrayRead,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{Ptr{Float32}}),arg1,arg2)
    return err
end

function VecGetLocalVector(arg1::Vec{Float32},arg2::Vec{Float32})
    err = ccall((:VecGetLocalVector,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32}),arg1,arg2)
    return err
end

function VecRestoreLocalVector(arg1::Vec{Float32},arg2::Vec{Float32})
    err = ccall((:VecRestoreLocalVector,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32}),arg1,arg2)
    return err
end

function VecGetLocalVectorRead(arg1::Vec{Float32},arg2::Vec{Float32})
    err = ccall((:VecGetLocalVectorRead,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32}),arg1,arg2)
    return err
end

function VecRestoreLocalVectorRead(arg1::Vec{Float32},arg2::Vec{Float32})
    err = ccall((:VecRestoreLocalVectorRead,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32}),arg1,arg2)
    return err
end

function VecGetArrayPair(x::Vec{Float32},y::Vec{Float32},xv::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},yv::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:VecGetArrayPair,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32},Ptr{Ptr{Float32}},Ptr{Ptr{Float32}}),x,y,xv,yv)
    return err
end

function VecRestoreArrayPair(x::Vec{Float32},y::Vec{Float32},xv::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},yv::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:VecRestoreArrayPair,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32},Ptr{Ptr{Float32}},Ptr{Ptr{Float32}}),x,y,xv,yv)
    return err
end

function VecLockGet(arg1::Vec{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:VecLockGet,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function VecLockPush(arg1::Vec{Float32})
    err = ccall((:VecLockPush,petscRealSingle),PetscErrorCode,(Vec{Float32},),arg1)
    return err
end

function VecLockPop(arg1::Vec{Float32})
    err = ccall((:VecLockPop,petscRealSingle),PetscErrorCode,(Vec{Float32},),arg1)
    return err
end

function VecValidValues(arg1::Vec{Float32},arg2::Integer,arg3::PetscBool)
    err = ccall((:VecValidValues,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,PetscBool),arg1,arg2,arg3)
    return err
end

function VecContourScale(arg1::Vec{Float32},arg2::Float32,arg3::Float32)
    err = ccall((:VecContourScale,petscRealSingle),PetscErrorCode,(Vec{Float32},Float32,Float32),arg1,arg2,arg3)
    return err
end

function VecSetOperation(arg1::Vec{Float32},arg2::VecOperation,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:VecSetOperation,petscRealSingle),PetscErrorCode,(Vec{Float32},VecOperation,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function VecMPISetGhost(arg1::Vec{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:VecMPISetGhost,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function VecCreateGhost(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:VecCreateGhost,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Ptr{Int64},Ptr{Vec{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function VecCreateGhostWithArray(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:VecCreateGhostWithArray,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Ptr{Int64},Ptr{Float32},Ptr{Vec{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function VecCreateGhostBlock(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:VecCreateGhostBlock,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Vec{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function VecCreateGhostBlockWithArray(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg8::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:VecCreateGhostBlockWithArray,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Float32},Ptr{Vec{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function VecGhostGetLocalForm(arg1::Vec{Float32},arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:VecGhostGetLocalForm,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{Vec{Float32}}),arg1,arg2)
    return err
end

function VecGhostRestoreLocalForm(arg1::Vec{Float32},arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:VecGhostRestoreLocalForm,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{Vec{Float32}}),arg1,arg2)
    return err
end

function VecGhostIsLocalForm(arg1::Vec{Float32},arg2::Vec{Float32},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:VecGhostIsLocalForm,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32},Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function VecGhostUpdateBegin(arg1::Vec{Float32},arg2::InsertMode,arg3::ScatterMode)
    err = ccall((:VecGhostUpdateBegin,petscRealSingle),PetscErrorCode,(Vec{Float32},InsertMode,ScatterMode),arg1,arg2,arg3)
    return err
end

function VecGhostUpdateEnd(arg1::Vec{Float32},arg2::InsertMode,arg3::ScatterMode)
    err = ccall((:VecGhostUpdateEnd,petscRealSingle),PetscErrorCode,(Vec{Float32},InsertMode,ScatterMode),arg1,arg2,arg3)
    return err
end

function VecConjugate(arg1::Vec{Float32})
    err = ccall((:VecConjugate,petscRealSingle),PetscErrorCode,(Vec{Float32},),arg1)
    return err
end

function VecScatterCreateToAll(arg1::Vec{Float32},arg2::Union{Ptr{VecScatter{Float32}},StridedArray{VecScatter{Float32}},Ptr{VecScatter{Float32}},Ref{VecScatter{Float32}}},arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:VecScatterCreateToAll,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{VecScatter{Float32}},Ptr{Vec{Float32}}),arg1,arg2,arg3)
    return err
end

function VecScatterCreateToZero(arg1::Vec{Float32},arg2::Union{Ptr{VecScatter{Float32}},StridedArray{VecScatter{Float32}},Ptr{VecScatter{Float32}},Ref{VecScatter{Float32}}},arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:VecScatterCreateToZero,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{VecScatter{Float32}},Ptr{Vec{Float32}}),arg1,arg2,arg3)
    return err
end

function ISComplementVec(arg1::IS{Float32},arg2::Vec{Float32},arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:ISComplementVec,petscRealSingle),PetscErrorCode,(IS{Float32},Vec{Float32},Ptr{IS{Float32}}),arg1,arg2,arg3)
    return err
end

function VecPow(arg1::Vec{Float32},arg2::Float32)
    err = ccall((:VecPow,petscRealSingle),PetscErrorCode,(Vec{Float32},Float32),arg1,arg2)
    return err
end

function VecMedian(arg1::Vec{Float32},arg2::Vec{Float32},arg3::Vec{Float32},arg4::Vec{Float32})
    err = ccall((:VecMedian,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function VecWhichBetween(arg1::Vec{Float32},arg2::Vec{Float32},arg3::Vec{Float32},arg4::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:VecWhichBetween,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32},Vec{Float32},Ptr{IS{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function VecWhichBetweenOrEqual(arg1::Vec{Float32},arg2::Vec{Float32},arg3::Vec{Float32},arg4::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:VecWhichBetweenOrEqual,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32},Vec{Float32},Ptr{IS{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function VecWhichGreaterThan(arg1::Vec{Float32},arg2::Vec{Float32},arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:VecWhichGreaterThan,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32},Ptr{IS{Float32}}),arg1,arg2,arg3)
    return err
end

function VecWhichLessThan(arg1::Vec{Float32},arg2::Vec{Float32},arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:VecWhichLessThan,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32},Ptr{IS{Float32}}),arg1,arg2,arg3)
    return err
end

function VecWhichEqual(arg1::Vec{Float32},arg2::Vec{Float32},arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:VecWhichEqual,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32},Ptr{IS{Float32}}),arg1,arg2,arg3)
    return err
end

function VecISAXPY(arg1::Vec{Float32},arg2::IS{Float32},arg3::Float32,arg4::Vec{Float32})
    err = ccall((:VecISAXPY,petscRealSingle),PetscErrorCode,(Vec{Float32},IS{Float32},Float32,Vec{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function VecISSet(arg1::Vec{Float32},arg2::IS{Float32},arg3::Float32)
    err = ccall((:VecISSet,petscRealSingle),PetscErrorCode,(Vec{Float32},IS{Float32},Float32),arg1,arg2,arg3)
    return err
end

function VecBoundGradientProjection(arg1::Vec{Float32},arg2::Vec{Float32},arg3::Vec{Float32},arg4::Vec{Float32},arg5::Vec{Float32})
    err = ccall((:VecBoundGradientProjection,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32},Vec{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function VecStepBoundInfo(arg1::Vec{Float32},arg2::Vec{Float32},arg3::Vec{Float32},arg4::Vec{Float32},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecStepBoundInfo,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32},Vec{Float32},Vec{Float32},Ptr{Float32},Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function VecStepMax(arg1::Vec{Float32},arg2::Vec{Float32},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecStepMax,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32},Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function VecStepMaxBounded(arg1::Vec{Float32},arg2::Vec{Float32},arg3::Vec{Float32},arg4::Vec{Float32},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecStepMaxBounded,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32},Vec{Float32},Vec{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscViewerMathematicaGetVector(arg1::PetscViewer{Float32},arg2::Vec{Float32})
    err = ccall((:PetscViewerMathematicaGetVector,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Vec{Float32}),arg1,arg2)
    return err
end

function PetscViewerMathematicaPutVector(arg1::PetscViewer{Float32},arg2::Vec{Float32})
    err = ccall((:PetscViewerMathematicaPutVector,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Vec{Float32}),arg1,arg2)
    return err
end

#= skipping function with undefined symbols: 
 function VecsDestroy(arg0::Type{Float32},arg1::Vecs)
    ccall((:VecsDestroy,petscRealSingle),PetscErrorCode,(Vecs,),arg1)
end 
=#
#= skipping function with undefined symbols: 
 function VecsCreateSeq(arg0::Type{Float32},arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Vecs},StridedArray{Vecs},Ptr{Vecs},Ref{Vecs}})
    ccall((:VecsCreateSeq,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Ptr{Vecs}),arg1,arg2,arg3,arg4)
end 
=#
#= skipping function with undefined symbols: 
 function VecsCreateSeqWithArray(arg0::Type{Float32},arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Vecs},StridedArray{Vecs},Ptr{Vecs},Ref{Vecs}})
    ccall((:VecsCreateSeqWithArray,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Ptr{Float32},Ptr{Vecs}),arg1,arg2,arg3,arg4,arg5)
end 
=#
#= skipping function with undefined symbols: 
 function VecsDuplicate(arg0::Type{Float32},arg1::Vecs,arg2::Union{Ptr{Vecs},StridedArray{Vecs},Ptr{Vecs},Ref{Vecs}})
    ccall((:VecsDuplicate,petscRealSingle),PetscErrorCode,(Vecs,Ptr{Vecs}),arg1,arg2)
end 
=#
function VecNestGetSubVecs(arg1::Vec{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Vec{Float32}}},StridedArray{Ptr{Vec{Float32}}},Ptr{Ptr{Vec{Float32}}},Ref{Ptr{Vec{Float32}}}})
    err = ccall((:VecNestGetSubVecs,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{Int64},Ptr{Ptr{Vec{Float32}}}),arg1,arg2,arg3)
    return err
end

function VecNestGetSubVec(arg1::Vec{Float32},arg2::Integer,arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:VecNestGetSubVec,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Ptr{Vec{Float32}}),arg1,arg2,arg3)
    return err
end

function VecNestSetSubVecs(arg1::Vec{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:VecNestSetSubVecs,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Ptr{Int64},Ptr{Vec{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function VecNestSetSubVec(arg1::Vec{Float32},arg2::Integer,arg3::Vec{Float32})
    err = ccall((:VecNestSetSubVec,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Vec{Float32}),arg1,arg2,arg3)
    return err
end

function VecCreateNest(arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg4::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg5::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:VecCreateNest,petscRealSingle),PetscErrorCode,(comm_type,Int64,Ptr{IS{Float32}},Ptr{Vec{Float32}},Ptr{Vec{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function VecNestGetSize(arg1::Vec{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:VecNestGetSize,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscOptionsGetVec(arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Vec{Float32},arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetVec,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Vec{Float32},Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function VecChop(arg1::Vec{Float32},arg2::Float32)
    err = ccall((:VecChop,petscRealSingle),PetscErrorCode,(Vec{Float32},Float32),arg1,arg2)
    return err
end

function VecGetLayout(arg1::Vec{Float32},arg2::Union{Ptr{PetscLayout{Float32}},StridedArray{PetscLayout{Float32}},Ptr{PetscLayout{Float32}},Ref{PetscLayout{Float32}}})
    err = ccall((:VecGetLayout,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{PetscLayout{Float32}}),arg1,arg2)
    return err
end

function VecSetLayout(arg1::Vec{Float32},arg2::PetscLayout{Float32})
    err = ccall((:VecSetLayout,petscRealSingle),PetscErrorCode,(Vec{Float32},PetscLayout{Float32}),arg1,arg2)
    return err
end

function PetscSectionVecView(arg1::PetscSection,arg2::Vec{Float32},arg3::PetscViewer{Float32})
    err = ccall((:PetscSectionVecView,petscRealSingle),PetscErrorCode,(PetscSection,Vec{Float32},PetscViewer{Float32}),arg1,arg2,arg3)
    return err
end

function VecGetValuesSection(arg1::Vec{Float32},arg2::PetscSection,arg3::Integer,arg4::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:VecGetValuesSection,petscRealSingle),PetscErrorCode,(Vec{Float32},PetscSection,Int64,Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function VecSetValuesSection(arg1::Vec{Float32},arg2::PetscSection,arg3::Integer,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::InsertMode)
    err = ccall((:VecSetValuesSection,petscRealSingle),PetscErrorCode,(Vec{Float32},PetscSection,Int64,Ptr{Float32},InsertMode),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscSectionVecNorm(arg1::PetscSection,arg2::PetscSection,arg3::Vec{Float32},arg4::NormType,arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:PetscSectionVecNorm,petscRealSingle),PetscErrorCode,(PetscSection,PetscSection,Vec{Float32},NormType,Ptr{Float32}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatGetFactor(arg1::Mat{Float32},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::MatFactorType,arg4::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatGetFactor,petscRealSingle),PetscErrorCode,(Mat{Float32},Cstring,MatFactorType,Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function MatGetFactorAvailable(arg1::Mat{Float32},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::MatFactorType,arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatGetFactorAvailable,petscRealSingle),PetscErrorCode,(Mat{Float32},Cstring,MatFactorType,Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function MatFactorGetSolverPackage(arg1::Mat{Float32},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:MatFactorGetSolverPackage,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function MatGetFactorType(arg1::Mat{Float32},arg2::Union{Ptr{MatFactorType},StridedArray{MatFactorType},Ptr{MatFactorType},Ref{MatFactorType}})
    err = ccall((:MatGetFactorType,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{MatFactorType}),arg1,arg2)
    return err
end

function MatSolverPackageRegister(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::MatType,arg3::MatFactorType,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatSolverPackageRegister,petscRealSingle),PetscErrorCode,(Cstring,Cstring,MatFactorType,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function MatSolverPackageGet(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::MatType,arg3::MatFactorType,arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg6::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:MatSolverPackageGet,petscRealSingle),PetscErrorCode,(Cstring,Cstring,MatFactorType,Ptr{PetscBool},Ptr{PetscBool},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatInitializePackage(arg0::Type{Float32})
    err = ccall((:MatInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function MatCreate(arg1::MPI_Comm,arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{Mat{Float32}}),arg1,arg2)
    return err
end

function MatSetSizes(arg1::Mat{Float32},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer)
    err = ccall((:MatSetSizes,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Int64,Int64,Int64),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatSetType(arg1::Mat{Float32},arg2::MatType)
    err = ccall((:MatSetType,petscRealSingle),PetscErrorCode,(Mat{Float32},Cstring),arg1,arg2)
    return err
end

function MatSetFromOptions(arg1::Mat{Float32})
    err = ccall((:MatSetFromOptions,petscRealSingle),PetscErrorCode,(Mat{Float32},),arg1)
    return err
end

function MatViewFromOptions(A::Mat{Float32},obj::PetscObject,name::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:MatViewFromOptions,petscRealSingle),PetscErrorCode,(Mat{Float32},PetscObject,Cstring),A,obj,name)
    return err
end

function MatRegister(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function MatRegisterBaseName(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:MatRegisterBaseName,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Cstring),arg1,arg2,arg3)
    return err
end

function MatSetOptionsPrefix(arg1::Mat{Float32},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:MatSetOptionsPrefix,petscRealSingle),PetscErrorCode,(Mat{Float32},Cstring),arg1,arg2)
    return err
end

function MatAppendOptionsPrefix(arg1::Mat{Float32},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:MatAppendOptionsPrefix,petscRealSingle),PetscErrorCode,(Mat{Float32},Cstring),arg1,arg2)
    return err
end

function MatGetOptionsPrefix(arg1::Mat{Float32},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:MatGetOptionsPrefix,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function MatSetErrorIfFPE(arg1::Mat{Float32},arg2::PetscBool)
    err = ccall((:MatSetErrorIfFPE,petscRealSingle),PetscErrorCode,(Mat{Float32},PetscBool),arg1,arg2)
    return err
end

function MatCreateSeqDense(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateSeqDense,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Ptr{Float32},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatCreateDense(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateDense,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Ptr{Float32},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatCreateSeqAIJ(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateSeqAIJ,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Ptr{Int64},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatCreateAIJ(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Integer,arg9::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg10::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateAIJ,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Int64,Ptr{Int64},Int64,Ptr{Int64},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function MatCreateMPIAIJWithArrays(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg9::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateMPIAIJWithArrays,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Int64},Ptr{Float32},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
    return err
end

function MatCreateMPIAIJWithSplitArrays(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg9::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg10::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg11::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg12::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateMPIAIJWithSplitArrays,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Int64},Ptr{Float32},Ptr{Int64},Ptr{Int64},Ptr{Float32},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12)
    return err
end

function MatCreateSeqBAIJ(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateSeqBAIJ,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatCreateBAIJ(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg9::Integer,arg10::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg11::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateBAIJ,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Int64},Int64,Ptr{Int64},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11)
    return err
end

function MatCreateMPIBAIJWithArrays(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg9::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg10::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateMPIBAIJWithArrays,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Int64},Ptr{Float32},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function MatCreateMPIAdj(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateMPIAdj,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatCreateSeqSBAIJ(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateSeqSBAIJ,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatCreateSBAIJ(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg9::Integer,arg10::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg11::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateSBAIJ,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Int64},Int64,Ptr{Int64},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11)
    return err
end

function MatCreateMPISBAIJWithArrays(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg9::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg10::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateMPISBAIJWithArrays,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Int64},Ptr{Float32},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function MatSeqSBAIJSetPreallocationCSR(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:MatSeqSBAIJSetPreallocationCSR,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Int64},Ptr{Int64},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatMPISBAIJSetPreallocationCSR(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:MatMPISBAIJSetPreallocationCSR,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Int64},Ptr{Int64},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatXAIJSetPreallocation(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatXAIJSetPreallocation,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatCreateShell(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg7::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateShell,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Ptr{Void},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatCreateNormal(arg1::Mat{Float32},arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateNormal,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Mat{Float32}}),arg1,arg2)
    return err
end

function MatCreateLRC(arg1::Mat{Float32},arg2::Mat{Float32},arg3::Mat{Float32},arg4::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateLRC,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},Mat{Float32},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function MatCreateIS(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::ISLocalToGlobalMapping{Float32},arg8::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateIS,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Int64,ISLocalToGlobalMapping{Float32},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function MatCreateSeqAIJCRL(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateSeqAIJCRL,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Ptr{Int64},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatCreateMPIAIJCRL(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Integer,arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateMPIAIJCRL,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Ptr{Int64},Int64,Ptr{Int64},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function MatCreateSeqBSTRM(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateSeqBSTRM,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatCreateMPIBSTRM(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg9::Integer,arg10::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg11::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateMPIBSTRM,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Int64},Int64,Ptr{Int64},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11)
    return err
end

function MatCreateSeqSBSTRM(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateSeqSBSTRM,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatCreateMPISBSTRM(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg9::Integer,arg10::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg11::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateMPISBSTRM,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Int64},Int64,Ptr{Int64},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11)
    return err
end

function MatCreateScatter(arg1::MPI_Comm,arg2::VecScatter{Float32},arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateScatter,petscRealSingle),PetscErrorCode,(comm_type,VecScatter{Float32},Ptr{Mat{Float32}}),arg1,arg2,arg3)
    return err
end

function MatScatterSetVecScatter(arg1::Mat{Float32},arg2::VecScatter{Float32})
    err = ccall((:MatScatterSetVecScatter,petscRealSingle),PetscErrorCode,(Mat{Float32},VecScatter{Float32}),arg1,arg2)
    return err
end

function MatScatterGetVecScatter(arg1::Mat{Float32},arg2::Union{Ptr{VecScatter{Float32}},StridedArray{VecScatter{Float32}},Ptr{VecScatter{Float32}},Ref{VecScatter{Float32}}})
    err = ccall((:MatScatterGetVecScatter,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{VecScatter{Float32}}),arg1,arg2)
    return err
end

function MatCreateBlockMat(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateBlockMat,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatCompositeAddMat(arg1::Mat{Float32},arg2::Mat{Float32})
    err = ccall((:MatCompositeAddMat,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32}),arg1,arg2)
    return err
end

function MatCompositeMerge(arg1::Mat{Float32})
    err = ccall((:MatCompositeMerge,petscRealSingle),PetscErrorCode,(Mat{Float32},),arg1)
    return err
end

function MatCreateComposite(arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}},arg4::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateComposite,petscRealSingle),PetscErrorCode,(comm_type,Int64,Ptr{Mat{Float32}},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function MatCompositeSetType(arg1::Mat{Float32},arg2::MatCompositeType)
    err = ccall((:MatCompositeSetType,petscRealSingle),PetscErrorCode,(Mat{Float32},MatCompositeType),arg1,arg2)
    return err
end

function MatCreateFFT(arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::MatType,arg5::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateFFT,petscRealSingle),PetscErrorCode,(comm_type,Int64,Ptr{Int64},Cstring,Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatCreateSeqCUFFT(arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateSeqCUFFT,petscRealSingle),PetscErrorCode,(comm_type,Int64,Ptr{Int64},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function MatCreateTranspose(arg1::Mat{Float32},arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateTranspose,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Mat{Float32}}),arg1,arg2)
    return err
end

function MatCreateHermitianTranspose(arg1::Mat{Float32},arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateHermitianTranspose,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Mat{Float32}}),arg1,arg2)
    return err
end

function MatCreateSubMatrix(arg1::Mat{Float32},arg2::IS{Float32},arg3::IS{Float32},arg4::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateSubMatrix,petscRealSingle),PetscErrorCode,(Mat{Float32},IS{Float32},IS{Float32},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function MatSubMatrixUpdate(arg1::Mat{Float32},arg2::Mat{Float32},arg3::IS{Float32},arg4::IS{Float32})
    err = ccall((:MatSubMatrixUpdate,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},IS{Float32},IS{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function MatCreateLocalRef(arg1::Mat{Float32},arg2::IS{Float32},arg3::IS{Float32},arg4::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateLocalRef,petscRealSingle),PetscErrorCode,(Mat{Float32},IS{Float32},IS{Float32},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function MatPythonSetType(arg1::Mat{Float32},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:MatPythonSetType,petscRealSingle),PetscErrorCode,(Mat{Float32},Cstring),arg1,arg2)
    return err
end

function MatSetUp(arg1::Mat{Float32})
    err = ccall((:MatSetUp,petscRealSingle),PetscErrorCode,(Mat{Float32},),arg1)
    return err
end

function MatDestroy(arg1::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatDestroy,petscRealSingle),PetscErrorCode,(Ptr{Mat{Float32}},),arg1)
    return err
end

function MatGetNonzeroState(arg1::Mat{Float32},arg2::Union{Ptr{PetscObjectState},StridedArray{PetscObjectState},Ptr{PetscObjectState},Ref{PetscObjectState}})
    err = ccall((:MatGetNonzeroState,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{PetscObjectState}),arg1,arg2)
    return err
end

function MatConjugate(arg1::Mat{Float32})
    err = ccall((:MatConjugate,petscRealSingle),PetscErrorCode,(Mat{Float32},),arg1)
    return err
end

function MatRealPart(arg1::Mat{Float32})
    err = ccall((:MatRealPart,petscRealSingle),PetscErrorCode,(Mat{Float32},),arg1)
    return err
end

function MatImaginaryPart(arg1::Mat{Float32})
    err = ccall((:MatImaginaryPart,petscRealSingle),PetscErrorCode,(Mat{Float32},),arg1)
    return err
end

function MatGetDiagonalBlock(arg1::Mat{Float32},arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatGetDiagonalBlock,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Mat{Float32}}),arg1,arg2)
    return err
end

function MatGetTrace(arg1::Mat{Float32},arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:MatGetTrace,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Float32}),arg1,arg2)
    return err
end

function MatInvertBlockDiagonal(arg1::Mat{Float32},arg2::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:MatInvertBlockDiagonal,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Ptr{Float32}}),arg1,arg2)
    return err
end

function MatSetValues(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::InsertMode)
    err = ccall((:MatSetValues,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Int64},Int64,Ptr{Int64},Ptr{Float32},InsertMode),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatSetValuesBlocked(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::InsertMode)
    err = ccall((:MatSetValuesBlocked,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Int64},Int64,Ptr{Int64},Ptr{Float32},InsertMode),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatSetValuesRow(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:MatSetValuesRow,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function MatSetValuesRowLocal(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:MatSetValuesRowLocal,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function MatSetValuesBatch(arg1::Mat{Float32},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:MatSetValuesBatch,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Int64,Ptr{Int64},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatSetRandom(arg1::Mat{Float32},arg2::PetscRandom)
    err = ccall((:MatSetRandom,petscRealSingle),PetscErrorCode,(Mat{Float32},PetscRandom),arg1,arg2)
    return err
end

#= skipping function with undefined symbols: 
 function MatSetValuesStencil(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{MatStencil},StridedArray{MatStencil},Ptr{MatStencil},Ref{MatStencil}},arg4::Integer,arg5::Union{Ptr{MatStencil},StridedArray{MatStencil},Ptr{MatStencil},Ref{MatStencil}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::InsertMode)
    ccall((:MatSetValuesStencil,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{MatStencil},Int64,Ptr{MatStencil},Ptr{Float32},InsertMode),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end 
=#
#= skipping function with undefined symbols: 
 function MatSetValuesBlockedStencil(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{MatStencil},StridedArray{MatStencil},Ptr{MatStencil},Ref{MatStencil}},arg4::Integer,arg5::Union{Ptr{MatStencil},StridedArray{MatStencil},Ptr{MatStencil},Ref{MatStencil}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::InsertMode)
    ccall((:MatSetValuesBlockedStencil,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{MatStencil},Int64,Ptr{MatStencil},Ptr{Float32},InsertMode),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end 
=#
function MatSetStencil(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Integer)
    err = ccall((:MatSetStencil,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Int64},Ptr{Int64},Int64),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatSetColoring(arg1::Mat{Float32},arg2::ISColoring{Float32})
    err = ccall((:MatSetColoring,petscRealSingle),PetscErrorCode,(Mat{Float32},ISColoring{Float32}),arg1,arg2)
    return err
end

function MatSetValuesAdifor(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatSetValuesAdifor,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function MatAssemblyBegin(arg1::Mat{Float32},arg2::MatAssemblyType)
    err = ccall((:MatAssemblyBegin,petscRealSingle),PetscErrorCode,(Mat{Float32},MatAssemblyType),arg1,arg2)
    return err
end

function MatAssemblyEnd(arg1::Mat{Float32},arg2::MatAssemblyType)
    err = ccall((:MatAssemblyEnd,petscRealSingle),PetscErrorCode,(Mat{Float32},MatAssemblyType),arg1,arg2)
    return err
end

function MatAssembled(arg1::Mat{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatAssembled,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function MatSetOption(arg1::Mat{Float32},arg2::MatOption,arg3::PetscBool)
    err = ccall((:MatSetOption,petscRealSingle),PetscErrorCode,(Mat{Float32},MatOption,PetscBool),arg1,arg2,arg3)
    return err
end

function MatGetOption(arg1::Mat{Float32},arg2::MatOption,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatGetOption,petscRealSingle),PetscErrorCode,(Mat{Float32},MatOption,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function MatGetType(arg1::Mat{Float32},arg2::Union{Ptr{MatType},StridedArray{MatType},Ptr{MatType},Ref{MatType}})
    (arg2_,tmp) = symbol_get_before(arg2)
    err = ccall((:MatGetType,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Ptr{UInt8}}),arg1,arg2_)
    symbol_get_after(arg2_,arg2)
    return err
end

function MatGetValues(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:MatGetValues,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Int64},Int64,Ptr{Int64},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatGetRow(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg5::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:MatGetRow,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatRestoreRow(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg5::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:MatRestoreRow,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatGetRowUpperTriangular(arg1::Mat{Float32})
    err = ccall((:MatGetRowUpperTriangular,petscRealSingle),PetscErrorCode,(Mat{Float32},),arg1)
    return err
end

function MatRestoreRowUpperTriangular(arg1::Mat{Float32})
    err = ccall((:MatRestoreRowUpperTriangular,petscRealSingle),PetscErrorCode,(Mat{Float32},),arg1)
    return err
end

function MatGetColumn(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg5::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:MatGetColumn,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatRestoreColumn(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg5::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:MatRestoreColumn,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatGetColumnVector(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Integer)
    err = ccall((:MatGetColumnVector,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Int64),arg1,arg2,arg3)
    return err
end

function MatSeqAIJGetArray(arg1::Mat{Float32},arg2::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:MatSeqAIJGetArray,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Ptr{Float32}}),arg1,arg2)
    return err
end

function MatSeqAIJRestoreArray(arg1::Mat{Float32},arg2::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:MatSeqAIJRestoreArray,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Ptr{Float32}}),arg1,arg2)
    return err
end

function MatSeqAIJGetMaxRowNonzeros(arg1::Mat{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatSeqAIJGetMaxRowNonzeros,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function MatSeqAIJSetValuesLocalFast(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::InsertMode)
    err = ccall((:MatSeqAIJSetValuesLocalFast,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Int64},Int64,Ptr{Int64},Ptr{Float32},InsertMode),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatDenseGetArray(arg1::Mat{Float32},arg2::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:MatDenseGetArray,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Ptr{Float32}}),arg1,arg2)
    return err
end

function MatDenseRestoreArray(arg1::Mat{Float32},arg2::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:MatDenseRestoreArray,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Ptr{Float32}}),arg1,arg2)
    return err
end

function MatGetBlockSize(arg1::Mat{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatGetBlockSize,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function MatSetBlockSize(arg1::Mat{Float32},arg2::Integer)
    err = ccall((:MatSetBlockSize,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64),arg1,arg2)
    return err
end

function MatGetBlockSizes(arg1::Mat{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatGetBlockSizes,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function MatSetBlockSizes(arg1::Mat{Float32},arg2::Integer,arg3::Integer)
    err = ccall((:MatSetBlockSizes,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Int64),arg1,arg2,arg3)
    return err
end

function MatSetBlockSizesFromMats(arg1::Mat{Float32},arg2::Mat{Float32},arg3::Mat{Float32})
    err = ccall((:MatSetBlockSizesFromMats,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},Mat{Float32}),arg1,arg2,arg3)
    return err
end

function MatSetNThreads(arg1::Mat{Float32},arg2::Integer)
    err = ccall((:MatSetNThreads,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64),arg1,arg2)
    return err
end

function MatGetNThreads(arg1::Mat{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatGetNThreads,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function MatMult(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:MatMult,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function MatMultDiagonalBlock(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:MatMultDiagonalBlock,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function MatMultAdd(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Vec{Float32},arg4::Vec{Float32})
    err = ccall((:MatMultAdd,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function MatMultTranspose(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:MatMultTranspose,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function MatMultHermitianTranspose(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:MatMultHermitianTranspose,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function MatIsTranspose(arg1::Mat{Float32},arg2::Mat{Float32},arg3::Float32,arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatIsTranspose,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},Float32,Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function MatIsHermitianTranspose(arg1::Mat{Float32},arg2::Mat{Float32},arg3::Float32,arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatIsHermitianTranspose,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},Float32,Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function MatMultTransposeAdd(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Vec{Float32},arg4::Vec{Float32})
    err = ccall((:MatMultTransposeAdd,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function MatMultHermitianTransposeAdd(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Vec{Float32},arg4::Vec{Float32})
    err = ccall((:MatMultHermitianTransposeAdd,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function MatMultConstrained(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:MatMultConstrained,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function MatMultTransposeConstrained(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:MatMultTransposeConstrained,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function MatMatSolve(arg1::Mat{Float32},arg2::Mat{Float32},arg3::Mat{Float32})
    err = ccall((:MatMatSolve,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},Mat{Float32}),arg1,arg2,arg3)
    return err
end

function MatResidual(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Vec{Float32},arg4::Vec{Float32})
    err = ccall((:MatResidual,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function MatConvert(arg1::Mat{Float32},arg2::MatType,arg3::MatReuse,arg4::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatConvert,petscRealSingle),PetscErrorCode,(Mat{Float32},Cstring,MatReuse,Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function MatDuplicate(arg1::Mat{Float32},arg2::MatDuplicateOption,arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatDuplicate,petscRealSingle),PetscErrorCode,(Mat{Float32},MatDuplicateOption,Ptr{Mat{Float32}}),arg1,arg2,arg3)
    return err
end

function MatCopy(arg1::Mat{Float32},arg2::Mat{Float32},arg3::MatStructure)
    err = ccall((:MatCopy,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},MatStructure),arg1,arg2,arg3)
    return err
end

function MatView(arg1::Mat{Float32},arg2::PetscViewer{Float32})
    err = ccall((:MatView,petscRealSingle),PetscErrorCode,(Mat{Float32},PetscViewer{Float32}),arg1,arg2)
    return err
end

function MatIsSymmetric(arg1::Mat{Float32},arg2::Float32,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatIsSymmetric,petscRealSingle),PetscErrorCode,(Mat{Float32},Float32,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function MatIsStructurallySymmetric(arg1::Mat{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatIsStructurallySymmetric,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function MatIsHermitian(arg1::Mat{Float32},arg2::Float32,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatIsHermitian,petscRealSingle),PetscErrorCode,(Mat{Float32},Float32,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function MatIsSymmetricKnown(arg1::Mat{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatIsSymmetricKnown,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{PetscBool},Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function MatIsHermitianKnown(arg1::Mat{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatIsHermitianKnown,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{PetscBool},Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function MatMissingDiagonal(arg1::Mat{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatMissingDiagonal,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{PetscBool},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function MatLoad(arg1::Mat{Float32},arg2::PetscViewer{Float32})
    err = ccall((:MatLoad,petscRealSingle),PetscErrorCode,(Mat{Float32},PetscViewer{Float32}),arg1,arg2)
    return err
end

function MatGetRowIJ(arg1::Mat{Float32},arg2::Integer,arg3::PetscBool,arg4::PetscBool,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg7::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg8::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatGetRowIJ,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,PetscBool,PetscBool,Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function MatRestoreRowIJ(arg1::Mat{Float32},arg2::Integer,arg3::PetscBool,arg4::PetscBool,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg7::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg8::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatRestoreRowIJ,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,PetscBool,PetscBool,Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function MatGetColumnIJ(arg1::Mat{Float32},arg2::Integer,arg3::PetscBool,arg4::PetscBool,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg7::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg8::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatGetColumnIJ,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,PetscBool,PetscBool,Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function MatRestoreColumnIJ(arg1::Mat{Float32},arg2::Integer,arg3::PetscBool,arg4::PetscBool,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg7::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg8::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatRestoreColumnIJ,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,PetscBool,PetscBool,Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function MatGetInfo(arg1::Mat{Float32},arg2::MatInfoType,arg3::Union{Ptr{MatInfo},StridedArray{MatInfo},Ptr{MatInfo},Ref{MatInfo}})
    err = ccall((:MatGetInfo,petscRealSingle),PetscErrorCode,(Mat{Float32},MatInfoType,Ptr{MatInfo}),arg1,arg2,arg3)
    return err
end

function MatGetDiagonal(arg1::Mat{Float32},arg2::Vec{Float32})
    err = ccall((:MatGetDiagonal,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32}),arg1,arg2)
    return err
end

function MatGetRowMax(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatGetRowMax,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function MatGetRowMin(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatGetRowMin,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function MatGetRowMaxAbs(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatGetRowMaxAbs,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function MatGetRowMinAbs(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatGetRowMinAbs,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function MatGetRowSum(arg1::Mat{Float32},arg2::Vec{Float32})
    err = ccall((:MatGetRowSum,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32}),arg1,arg2)
    return err
end

function MatTranspose(arg1::Mat{Float32},arg2::MatReuse,arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatTranspose,petscRealSingle),PetscErrorCode,(Mat{Float32},MatReuse,Ptr{Mat{Float32}}),arg1,arg2,arg3)
    return err
end

function MatHermitianTranspose(arg1::Mat{Float32},arg2::MatReuse,arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatHermitianTranspose,petscRealSingle),PetscErrorCode,(Mat{Float32},MatReuse,Ptr{Mat{Float32}}),arg1,arg2,arg3)
    return err
end

function MatPermute(arg1::Mat{Float32},arg2::IS{Float32},arg3::IS{Float32},arg4::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatPermute,petscRealSingle),PetscErrorCode,(Mat{Float32},IS{Float32},IS{Float32},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function MatDiagonalScale(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:MatDiagonalScale,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function MatDiagonalSet(arg1::Mat{Float32},arg2::Vec{Float32},arg3::InsertMode)
    err = ccall((:MatDiagonalSet,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},InsertMode),arg1,arg2,arg3)
    return err
end

function MatEqual(arg1::Mat{Float32},arg2::Mat{Float32},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatEqual,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function MatMultEqual(arg1::Mat{Float32},arg2::Mat{Float32},arg3::Integer,arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatMultEqual,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},Int64,Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function MatMultAddEqual(arg1::Mat{Float32},arg2::Mat{Float32},arg3::Integer,arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatMultAddEqual,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},Int64,Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function MatMultTransposeEqual(arg1::Mat{Float32},arg2::Mat{Float32},arg3::Integer,arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatMultTransposeEqual,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},Int64,Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function MatMultTransposeAddEqual(arg1::Mat{Float32},arg2::Mat{Float32},arg3::Integer,arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatMultTransposeAddEqual,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},Int64,Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function MatNorm(arg1::Mat{Float32},arg2::NormType,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:MatNorm,petscRealSingle),PetscErrorCode,(Mat{Float32},NormType,Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function MatGetColumnNorms(arg1::Mat{Float32},arg2::NormType,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:MatGetColumnNorms,petscRealSingle),PetscErrorCode,(Mat{Float32},NormType,Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function MatZeroEntries(arg1::Mat{Float32})
    err = ccall((:MatZeroEntries,petscRealSingle),PetscErrorCode,(Mat{Float32},),arg1)
    return err
end

function MatZeroRows(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Float32,arg5::Vec{Float32},arg6::Vec{Float32})
    err = ccall((:MatZeroRows,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Int64},Float32,Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatZeroRowsIS(arg1::Mat{Float32},arg2::IS{Float32},arg3::Float32,arg4::Vec{Float32},arg5::Vec{Float32})
    err = ccall((:MatZeroRowsIS,petscRealSingle),PetscErrorCode,(Mat{Float32},IS{Float32},Float32,Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4,arg5)
    return err
end

#= skipping function with undefined symbols: 
 function MatZeroRowsStencil(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{MatStencil},StridedArray{MatStencil},Ptr{MatStencil},Ref{MatStencil}},arg4::Float32,arg5::Vec{Float32},arg6::Vec{Float32})
    ccall((:MatZeroRowsStencil,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{MatStencil},Float32,Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4,arg5,arg6)
end 
=#
#= skipping function with undefined symbols: 
 function MatZeroRowsColumnsStencil(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{MatStencil},StridedArray{MatStencil},Ptr{MatStencil},Ref{MatStencil}},arg4::Float32,arg5::Vec{Float32},arg6::Vec{Float32})
    ccall((:MatZeroRowsColumnsStencil,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{MatStencil},Float32,Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4,arg5,arg6)
end 
=#
function MatZeroRowsColumns(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Float32,arg5::Vec{Float32},arg6::Vec{Float32})
    err = ccall((:MatZeroRowsColumns,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Int64},Float32,Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatZeroRowsColumnsIS(arg1::Mat{Float32},arg2::IS{Float32},arg3::Float32,arg4::Vec{Float32},arg5::Vec{Float32})
    err = ccall((:MatZeroRowsColumnsIS,petscRealSingle),PetscErrorCode,(Mat{Float32},IS{Float32},Float32,Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatGetSize(arg1::Mat{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatGetSize,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function MatGetLocalSize(arg1::Mat{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatGetLocalSize,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function MatGetOwnershipRange(arg1::Mat{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatGetOwnershipRange,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function MatGetOwnershipRanges(arg1::Mat{Float32},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:MatGetOwnershipRanges,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function MatGetOwnershipRangeColumn(arg1::Mat{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatGetOwnershipRangeColumn,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function MatGetOwnershipRangesColumn(arg1::Mat{Float32},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:MatGetOwnershipRangesColumn,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function MatGetOwnershipIS(arg1::Mat{Float32},arg2::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:MatGetOwnershipIS,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{IS{Float32}},Ptr{IS{Float32}}),arg1,arg2,arg3)
    return err
end

function MatGetSubMatrices(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg4::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg5::MatReuse,arg6::Union{Ptr{Ptr{Mat{Float32}}},StridedArray{Ptr{Mat{Float32}}},Ptr{Ptr{Mat{Float32}}},Ref{Ptr{Mat{Float32}}}})
    err = ccall((:MatGetSubMatrices,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{IS{Float32}},Ptr{IS{Float32}},MatReuse,Ptr{Ptr{Mat{Float32}}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatGetSubMatricesMPI(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg4::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg5::MatReuse,arg6::Union{Ptr{Ptr{Mat{Float32}}},StridedArray{Ptr{Mat{Float32}}},Ptr{Ptr{Mat{Float32}}},Ref{Ptr{Mat{Float32}}}})
    err = ccall((:MatGetSubMatricesMPI,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{IS{Float32}},Ptr{IS{Float32}},MatReuse,Ptr{Ptr{Mat{Float32}}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatDestroyMatrices(arg1::Integer,arg2::Union{Ptr{Ptr{Mat{Float32}}},StridedArray{Ptr{Mat{Float32}}},Ptr{Ptr{Mat{Float32}}},Ref{Ptr{Mat{Float32}}}})
    err = ccall((:MatDestroyMatrices,petscRealSingle),PetscErrorCode,(Int64,Ptr{Ptr{Mat{Float32}}}),arg1,arg2)
    return err
end

function MatGetSubMatrix(arg1::Mat{Float32},arg2::IS{Float32},arg3::IS{Float32},arg4::MatReuse,arg5::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatGetSubMatrix,petscRealSingle),PetscErrorCode,(Mat{Float32},IS{Float32},IS{Float32},MatReuse,Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatGetLocalSubMatrix(arg1::Mat{Float32},arg2::IS{Float32},arg3::IS{Float32},arg4::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatGetLocalSubMatrix,petscRealSingle),PetscErrorCode,(Mat{Float32},IS{Float32},IS{Float32},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function MatRestoreLocalSubMatrix(arg1::Mat{Float32},arg2::IS{Float32},arg3::IS{Float32},arg4::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatRestoreLocalSubMatrix,petscRealSingle),PetscErrorCode,(Mat{Float32},IS{Float32},IS{Float32},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function MatGetSeqNonzeroStructure(arg1::Mat{Float32},arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatGetSeqNonzeroStructure,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Mat{Float32}}),arg1,arg2)
    return err
end

function MatDestroySeqNonzeroStructure(arg1::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatDestroySeqNonzeroStructure,petscRealSingle),PetscErrorCode,(Ptr{Mat{Float32}},),arg1)
    return err
end

function MatCreateMPIAIJSumSeqAIJ(arg1::MPI_Comm,arg2::Mat{Float32},arg3::Integer,arg4::Integer,arg5::MatReuse,arg6::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateMPIAIJSumSeqAIJ,petscRealSingle),PetscErrorCode,(comm_type,Mat{Float32},Int64,Int64,MatReuse,Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatCreateMPIAIJSumSeqAIJSymbolic(arg1::MPI_Comm,arg2::Mat{Float32},arg3::Integer,arg4::Integer,arg5::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateMPIAIJSumSeqAIJSymbolic,petscRealSingle),PetscErrorCode,(comm_type,Mat{Float32},Int64,Int64,Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatCreateMPIAIJSumSeqAIJNumeric(arg1::Mat{Float32},arg2::Mat{Float32})
    err = ccall((:MatCreateMPIAIJSumSeqAIJNumeric,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32}),arg1,arg2)
    return err
end

function MatMPIAIJGetLocalMat(arg1::Mat{Float32},arg2::MatReuse,arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatMPIAIJGetLocalMat,petscRealSingle),PetscErrorCode,(Mat{Float32},MatReuse,Ptr{Mat{Float32}}),arg1,arg2,arg3)
    return err
end

function MatMPIAIJGetLocalMatCondensed(arg1::Mat{Float32},arg2::MatReuse,arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg4::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg5::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatMPIAIJGetLocalMatCondensed,petscRealSingle),PetscErrorCode,(Mat{Float32},MatReuse,Ptr{IS{Float32}},Ptr{IS{Float32}},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatGetBrowsOfAcols(arg1::Mat{Float32},arg2::Mat{Float32},arg3::MatReuse,arg4::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg5::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg6::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatGetBrowsOfAcols,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},MatReuse,Ptr{IS{Float32}},Ptr{IS{Float32}},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatGetGhosts(arg1::Mat{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:MatGetGhosts,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3)
    return err
end

function MatIncreaseOverlap(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg4::Integer)
    err = ccall((:MatIncreaseOverlap,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{IS{Float32}},Int64),arg1,arg2,arg3,arg4)
    return err
end

function MatMatMult(arg1::Mat{Float32},arg2::Mat{Float32},arg3::MatReuse,arg4::Float32,arg5::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatMatMult,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},MatReuse,Float32,Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatMatMultSymbolic(arg1::Mat{Float32},arg2::Mat{Float32},arg3::Float32,arg4::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatMatMultSymbolic,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},Float32,Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function MatMatMultNumeric(arg1::Mat{Float32},arg2::Mat{Float32},arg3::Mat{Float32})
    err = ccall((:MatMatMultNumeric,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},Mat{Float32}),arg1,arg2,arg3)
    return err
end

function MatMatMatMult(arg1::Mat{Float32},arg2::Mat{Float32},arg3::Mat{Float32},arg4::MatReuse,arg5::Float32,arg6::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatMatMatMult,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},Mat{Float32},MatReuse,Float32,Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatMatMatMultSymbolic(arg1::Mat{Float32},arg2::Mat{Float32},arg3::Mat{Float32},arg4::Float32,arg5::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatMatMatMultSymbolic,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},Mat{Float32},Float32,Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatMatMatMultNumeric(arg1::Mat{Float32},arg2::Mat{Float32},arg3::Mat{Float32},arg4::Mat{Float32})
    err = ccall((:MatMatMatMultNumeric,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},Mat{Float32},Mat{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function MatPtAP(arg1::Mat{Float32},arg2::Mat{Float32},arg3::MatReuse,arg4::Float32,arg5::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatPtAP,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},MatReuse,Float32,Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatPtAPSymbolic(arg1::Mat{Float32},arg2::Mat{Float32},arg3::Float32,arg4::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatPtAPSymbolic,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},Float32,Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function MatPtAPNumeric(arg1::Mat{Float32},arg2::Mat{Float32},arg3::Mat{Float32})
    err = ccall((:MatPtAPNumeric,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},Mat{Float32}),arg1,arg2,arg3)
    return err
end

function MatRARt(arg1::Mat{Float32},arg2::Mat{Float32},arg3::MatReuse,arg4::Float32,arg5::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatRARt,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},MatReuse,Float32,Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatRARtSymbolic(arg1::Mat{Float32},arg2::Mat{Float32},arg3::Float32,arg4::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatRARtSymbolic,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},Float32,Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function MatRARtNumeric(arg1::Mat{Float32},arg2::Mat{Float32},arg3::Mat{Float32})
    err = ccall((:MatRARtNumeric,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},Mat{Float32}),arg1,arg2,arg3)
    return err
end

function MatTransposeMatMult(arg1::Mat{Float32},arg2::Mat{Float32},arg3::MatReuse,arg4::Float32,arg5::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatTransposeMatMult,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},MatReuse,Float32,Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatTransposetMatMultSymbolic(arg1::Mat{Float32},arg2::Mat{Float32},arg3::Float32,arg4::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatTransposetMatMultSymbolic,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},Float32,Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function MatTransposetMatMultNumeric(arg1::Mat{Float32},arg2::Mat{Float32},arg3::Mat{Float32})
    err = ccall((:MatTransposetMatMultNumeric,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},Mat{Float32}),arg1,arg2,arg3)
    return err
end

function MatMatTransposeMult(arg1::Mat{Float32},arg2::Mat{Float32},arg3::MatReuse,arg4::Float32,arg5::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatMatTransposeMult,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},MatReuse,Float32,Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatMatTransposeMultSymbolic(arg1::Mat{Float32},arg2::Mat{Float32},arg3::Float32,arg4::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatMatTransposeMultSymbolic,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},Float32,Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function MatMatTransposeMultNumeric(arg1::Mat{Float32},arg2::Mat{Float32},arg3::Mat{Float32})
    err = ccall((:MatMatTransposeMultNumeric,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},Mat{Float32}),arg1,arg2,arg3)
    return err
end

function MatAXPY(arg1::Mat{Float32},arg2::Float32,arg3::Mat{Float32},arg4::MatStructure)
    err = ccall((:MatAXPY,petscRealSingle),PetscErrorCode,(Mat{Float32},Float32,Mat{Float32},MatStructure),arg1,arg2,arg3,arg4)
    return err
end

function MatAYPX(arg1::Mat{Float32},arg2::Float32,arg3::Mat{Float32},arg4::MatStructure)
    err = ccall((:MatAYPX,petscRealSingle),PetscErrorCode,(Mat{Float32},Float32,Mat{Float32},MatStructure),arg1,arg2,arg3,arg4)
    return err
end

function MatScale(arg1::Mat{Float32},arg2::Float32)
    err = ccall((:MatScale,petscRealSingle),PetscErrorCode,(Mat{Float32},Float32),arg1,arg2)
    return err
end

function MatShift(arg1::Mat{Float32},arg2::Float32)
    err = ccall((:MatShift,petscRealSingle),PetscErrorCode,(Mat{Float32},Float32),arg1,arg2)
    return err
end

function MatSetLocalToGlobalMapping(arg1::Mat{Float32},arg2::ISLocalToGlobalMapping{Float32},arg3::ISLocalToGlobalMapping{Float32})
    err = ccall((:MatSetLocalToGlobalMapping,petscRealSingle),PetscErrorCode,(Mat{Float32},ISLocalToGlobalMapping{Float32},ISLocalToGlobalMapping{Float32}),arg1,arg2,arg3)
    return err
end

function MatGetLocalToGlobalMapping(arg1::Mat{Float32},arg2::Union{Ptr{ISLocalToGlobalMapping{Float32}},StridedArray{ISLocalToGlobalMapping{Float32}},Ptr{ISLocalToGlobalMapping{Float32}},Ref{ISLocalToGlobalMapping{Float32}}},arg3::Union{Ptr{ISLocalToGlobalMapping{Float32}},StridedArray{ISLocalToGlobalMapping{Float32}},Ptr{ISLocalToGlobalMapping{Float32}},Ref{ISLocalToGlobalMapping{Float32}}})
    err = ccall((:MatGetLocalToGlobalMapping,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{ISLocalToGlobalMapping{Float32}},Ptr{ISLocalToGlobalMapping{Float32}}),arg1,arg2,arg3)
    return err
end

function MatGetLayouts(arg1::Mat{Float32},arg2::Union{Ptr{PetscLayout{Float32}},StridedArray{PetscLayout{Float32}},Ptr{PetscLayout{Float32}},Ref{PetscLayout{Float32}}},arg3::Union{Ptr{PetscLayout{Float32}},StridedArray{PetscLayout{Float32}},Ptr{PetscLayout{Float32}},Ref{PetscLayout{Float32}}})
    err = ccall((:MatGetLayouts,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{PetscLayout{Float32}},Ptr{PetscLayout{Float32}}),arg1,arg2,arg3)
    return err
end

function MatZeroRowsLocal(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Float32,arg5::Vec{Float32},arg6::Vec{Float32})
    err = ccall((:MatZeroRowsLocal,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Int64},Float32,Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatZeroRowsLocalIS(arg1::Mat{Float32},arg2::IS{Float32},arg3::Float32,arg4::Vec{Float32},arg5::Vec{Float32})
    err = ccall((:MatZeroRowsLocalIS,petscRealSingle),PetscErrorCode,(Mat{Float32},IS{Float32},Float32,Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatZeroRowsColumnsLocal(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Float32,arg5::Vec{Float32},arg6::Vec{Float32})
    err = ccall((:MatZeroRowsColumnsLocal,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Int64},Float32,Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatZeroRowsColumnsLocalIS(arg1::Mat{Float32},arg2::IS{Float32},arg3::Float32,arg4::Vec{Float32},arg5::Vec{Float32})
    err = ccall((:MatZeroRowsColumnsLocalIS,petscRealSingle),PetscErrorCode,(Mat{Float32},IS{Float32},Float32,Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatSetValuesLocal(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::InsertMode)
    err = ccall((:MatSetValuesLocal,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Int64},Int64,Ptr{Int64},Ptr{Float32},InsertMode),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatSetValuesBlockedLocal(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::InsertMode)
    err = ccall((:MatSetValuesBlockedLocal,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Int64},Int64,Ptr{Int64},Ptr{Float32},InsertMode),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatStashSetInitialSize(arg1::Mat{Float32},arg2::Integer,arg3::Integer)
    err = ccall((:MatStashSetInitialSize,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Int64),arg1,arg2,arg3)
    return err
end

function MatStashGetInfo(arg1::Mat{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatStashGetInfo,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatInterpolate(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:MatInterpolate,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function MatInterpolateAdd(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Vec{Float32},arg4::Vec{Float32})
    err = ccall((:MatInterpolateAdd,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function MatRestrict(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:MatRestrict,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function MatCreateVecs(arg1::Mat{Float32},arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:MatCreateVecs,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Vec{Float32}},Ptr{Vec{Float32}}),arg1,arg2,arg3)
    return err
end

function MatGetVecs(mat::Mat{Float32},x::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},y::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:MatGetVecs,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Vec{Float32}},Ptr{Vec{Float32}}),mat,x,y)
    return err
end

function MatCreateRedundantMatrix(arg1::Mat{Float32},arg2::Integer,arg3::MPI_Comm,arg4::MatReuse,arg5::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateRedundantMatrix,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,comm_type,MatReuse,Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatGetMultiProcBlock(arg1::Mat{Float32},arg2::MPI_Comm,arg3::MatReuse,arg4::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatGetMultiProcBlock,petscRealSingle),PetscErrorCode,(Mat{Float32},comm_type,MatReuse,Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function MatFindZeroDiagonals(arg1::Mat{Float32},arg2::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:MatFindZeroDiagonals,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{IS{Float32}}),arg1,arg2)
    return err
end

function MatFindOffBlockDiagonalEntries(arg1::Mat{Float32},arg2::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:MatFindOffBlockDiagonalEntries,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{IS{Float32}}),arg1,arg2)
    return err
end

function MatCreateMPIMatConcatenateSeqMat(arg1::MPI_Comm,arg2::Mat{Float32},arg3::Integer,arg4::MatReuse,arg5::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateMPIMatConcatenateSeqMat,petscRealSingle),PetscErrorCode,(comm_type,Mat{Float32},Int64,MatReuse,Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatSetValue(v::Mat{Float32},i::Integer,j::Integer,va::Float32,mode::InsertMode)
    err = ccall((:MatSetValue,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Int64,Float32,InsertMode),v,i,j,va,mode)
    return err
end

function MatGetValue(v::Mat{Float32},i::Integer,j::Integer,va::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:MatGetValue,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Int64,Ptr{Float32}),v,i,j,va)
    return err
end

function MatSetValueLocal(v::Mat{Float32},i::Integer,j::Integer,va::Float32,mode::InsertMode)
    err = ccall((:MatSetValueLocal,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Int64,Float32,InsertMode),v,i,j,va,mode)
    return err
end

function MatShellGetContext(arg1::Mat{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatShellGetContext,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Void}),arg1,arg2)
    return err
end

function MatInodeAdjustForInodes(arg1::Mat{Float32},arg2::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:MatInodeAdjustForInodes,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{IS{Float32}},Ptr{IS{Float32}}),arg1,arg2,arg3)
    return err
end

function MatInodeGetInodeSizes(arg1::Mat{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatInodeGetInodeSizes,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function MatSeqAIJSetColumnIndices(arg1::Mat{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatSeqAIJSetColumnIndices,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function MatSeqBAIJSetColumnIndices(arg1::Mat{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatSeqBAIJSetColumnIndices,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function MatCreateSeqAIJWithArrays(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateSeqAIJWithArrays,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Ptr{Int64},Ptr{Int64},Ptr{Float32},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatCreateSeqBAIJWithArrays(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg8::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateSeqBAIJWithArrays,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Ptr{Int64},Ptr{Int64},Ptr{Float32},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function MatCreateSeqSBAIJWithArrays(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg8::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateSeqSBAIJWithArrays,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Ptr{Int64},Ptr{Int64},Ptr{Float32},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function MatCreateSeqAIJFromTriple(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}},arg8::Integer,arg9::PetscBool)
    err = ccall((:MatCreateSeqAIJFromTriple,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Ptr{Int64},Ptr{Int64},Ptr{Float32},Ptr{Mat{Float32}},Int64,PetscBool),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
    return err
end

function MatSeqBAIJSetPreallocation(arg1::Mat{Float32},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatSeqBAIJSetPreallocation,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Int64,Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function MatSeqSBAIJSetPreallocation(arg1::Mat{Float32},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatSeqSBAIJSetPreallocation,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Int64,Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function MatSeqAIJSetPreallocation(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatSeqAIJSetPreallocation,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function MatMPIBAIJSetPreallocation(arg1::Mat{Float32},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatMPIBAIJSetPreallocation,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Int64,Ptr{Int64},Int64,Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatMPISBAIJSetPreallocation(arg1::Mat{Float32},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatMPISBAIJSetPreallocation,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Int64,Ptr{Int64},Int64,Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatMPIAIJSetPreallocation(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatMPIAIJSetPreallocation,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Int64},Int64,Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatSeqAIJSetPreallocationCSR(arg1::Mat{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:MatSeqAIJSetPreallocationCSR,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Int64},Ptr{Int64},Ptr{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function MatSeqBAIJSetPreallocationCSR(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:MatSeqBAIJSetPreallocationCSR,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Int64},Ptr{Int64},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatMPIAIJSetPreallocationCSR(arg1::Mat{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:MatMPIAIJSetPreallocationCSR,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Int64},Ptr{Int64},Ptr{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function MatMPIBAIJSetPreallocationCSR(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:MatMPIBAIJSetPreallocationCSR,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Int64},Ptr{Int64},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatMPIAdjSetPreallocation(arg1::Mat{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatMPIAdjSetPreallocation,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function MatMPIDenseSetPreallocation(arg1::Mat{Float32},arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:MatMPIDenseSetPreallocation,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Float32}),arg1,arg2)
    return err
end

function MatSeqDenseSetPreallocation(arg1::Mat{Float32},arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:MatSeqDenseSetPreallocation,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Float32}),arg1,arg2)
    return err
end

function MatMPIAIJGetSeqAIJ(arg1::Mat{Float32},arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}},arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:MatMPIAIJGetSeqAIJ,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Mat{Float32}},Ptr{Mat{Float32}},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4)
    return err
end

function MatMPIBAIJGetSeqBAIJ(arg1::Mat{Float32},arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}},arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:MatMPIBAIJGetSeqBAIJ,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Mat{Float32}},Ptr{Mat{Float32}},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4)
    return err
end

function MatMPIAdjCreateNonemptySubcommMat(arg1::Mat{Float32},arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatMPIAdjCreateNonemptySubcommMat,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Mat{Float32}}),arg1,arg2)
    return err
end

function MatISSetPreallocation(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatISSetPreallocation,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Int64},Int64,Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatSeqDenseSetLDA(arg1::Mat{Float32},arg2::Integer)
    err = ccall((:MatSeqDenseSetLDA,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64),arg1,arg2)
    return err
end

function MatDenseGetLocalMatrix(arg1::Mat{Float32},arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatDenseGetLocalMatrix,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Mat{Float32}}),arg1,arg2)
    return err
end

function MatStoreValues(arg1::Mat{Float32})
    err = ccall((:MatStoreValues,petscRealSingle),PetscErrorCode,(Mat{Float32},),arg1)
    return err
end

function MatRetrieveValues(arg1::Mat{Float32})
    err = ccall((:MatRetrieveValues,petscRealSingle),PetscErrorCode,(Mat{Float32},),arg1)
    return err
end

function MatDAADSetCtx(arg1::Mat{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatDAADSetCtx,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Void}),arg1,arg2)
    return err
end

function MatFindNonzeroRows(arg1::Mat{Float32},arg2::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:MatFindNonzeroRows,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{IS{Float32}}),arg1,arg2)
    return err
end

function MatGetOrdering(arg1::Mat{Float32},arg2::MatOrderingType,arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg4::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:MatGetOrdering,petscRealSingle),PetscErrorCode,(Mat{Float32},Cstring,Ptr{IS{Float32}},Ptr{IS{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function MatGetOrderingList(arg0::Type{Float32},arg1::Union{Ptr{PetscFunctionList},StridedArray{PetscFunctionList},Ptr{PetscFunctionList},Ref{PetscFunctionList}})
    err = ccall((:MatGetOrderingList,petscRealSingle),PetscErrorCode,(Ptr{PetscFunctionList},),arg1)
    return err
end

function MatOrderingRegister(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatOrderingRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function MatReorderForNonzeroDiagonal(arg1::Mat{Float32},arg2::Float32,arg3::IS{Float32},arg4::IS{Float32})
    err = ccall((:MatReorderForNonzeroDiagonal,petscRealSingle),PetscErrorCode,(Mat{Float32},Float32,IS{Float32},IS{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function MatCreateLaplacian(arg1::Mat{Float32},arg2::Float32,arg3::PetscBool,arg4::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateLaplacian,petscRealSingle),PetscErrorCode,(Mat{Float32},Float32,PetscBool,Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

#= skipping function with undefined symbols: 
 function MatFactorInfoInitialize(arg0::Type{Float32},arg1::Union{Ptr{MatFactorInfo},StridedArray{MatFactorInfo},Ptr{MatFactorInfo},Ref{MatFactorInfo}})
    ccall((:MatFactorInfoInitialize,petscRealSingle),PetscErrorCode,(Ptr{MatFactorInfo},),arg1)
end 
=#
#= skipping function with undefined symbols: 
 function MatCholeskyFactor(arg1::Mat{Float32},arg2::IS{Float32},arg3::Union{Ptr{MatFactorInfo},StridedArray{MatFactorInfo},Ptr{MatFactorInfo},Ref{MatFactorInfo}})
    ccall((:MatCholeskyFactor,petscRealSingle),PetscErrorCode,(Mat{Float32},IS{Float32},Ptr{MatFactorInfo}),arg1,arg2,arg3)
end 
=#
#= skipping function with undefined symbols: 
 function MatCholeskyFactorSymbolic(arg1::Mat{Float32},arg2::Mat{Float32},arg3::IS{Float32},arg4::Union{Ptr{MatFactorInfo},StridedArray{MatFactorInfo},Ptr{MatFactorInfo},Ref{MatFactorInfo}})
    ccall((:MatCholeskyFactorSymbolic,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},IS{Float32},Ptr{MatFactorInfo}),arg1,arg2,arg3,arg4)
end 
=#
#= skipping function with undefined symbols: 
 function MatCholeskyFactorNumeric(arg1::Mat{Float32},arg2::Mat{Float32},arg3::Union{Ptr{MatFactorInfo},StridedArray{MatFactorInfo},Ptr{MatFactorInfo},Ref{MatFactorInfo}})
    ccall((:MatCholeskyFactorNumeric,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},Ptr{MatFactorInfo}),arg1,arg2,arg3)
end 
=#
#= skipping function with undefined symbols: 
 function MatLUFactor(arg1::Mat{Float32},arg2::IS{Float32},arg3::IS{Float32},arg4::Union{Ptr{MatFactorInfo},StridedArray{MatFactorInfo},Ptr{MatFactorInfo},Ref{MatFactorInfo}})
    ccall((:MatLUFactor,petscRealSingle),PetscErrorCode,(Mat{Float32},IS{Float32},IS{Float32},Ptr{MatFactorInfo}),arg1,arg2,arg3,arg4)
end 
=#
#= skipping function with undefined symbols: 
 function MatILUFactor(arg1::Mat{Float32},arg2::IS{Float32},arg3::IS{Float32},arg4::Union{Ptr{MatFactorInfo},StridedArray{MatFactorInfo},Ptr{MatFactorInfo},Ref{MatFactorInfo}})
    ccall((:MatILUFactor,petscRealSingle),PetscErrorCode,(Mat{Float32},IS{Float32},IS{Float32},Ptr{MatFactorInfo}),arg1,arg2,arg3,arg4)
end 
=#
#= skipping function with undefined symbols: 
 function MatLUFactorSymbolic(arg1::Mat{Float32},arg2::Mat{Float32},arg3::IS{Float32},arg4::IS{Float32},arg5::Union{Ptr{MatFactorInfo},StridedArray{MatFactorInfo},Ptr{MatFactorInfo},Ref{MatFactorInfo}})
    ccall((:MatLUFactorSymbolic,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},IS{Float32},IS{Float32},Ptr{MatFactorInfo}),arg1,arg2,arg3,arg4,arg5)
end 
=#
#= skipping function with undefined symbols: 
 function MatILUFactorSymbolic(arg1::Mat{Float32},arg2::Mat{Float32},arg3::IS{Float32},arg4::IS{Float32},arg5::Union{Ptr{MatFactorInfo},StridedArray{MatFactorInfo},Ptr{MatFactorInfo},Ref{MatFactorInfo}})
    ccall((:MatILUFactorSymbolic,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},IS{Float32},IS{Float32},Ptr{MatFactorInfo}),arg1,arg2,arg3,arg4,arg5)
end 
=#
#= skipping function with undefined symbols: 
 function MatICCFactorSymbolic(arg1::Mat{Float32},arg2::Mat{Float32},arg3::IS{Float32},arg4::Union{Ptr{MatFactorInfo},StridedArray{MatFactorInfo},Ptr{MatFactorInfo},Ref{MatFactorInfo}})
    ccall((:MatICCFactorSymbolic,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},IS{Float32},Ptr{MatFactorInfo}),arg1,arg2,arg3,arg4)
end 
=#
#= skipping function with undefined symbols: 
 function MatICCFactor(arg1::Mat{Float32},arg2::IS{Float32},arg3::Union{Ptr{MatFactorInfo},StridedArray{MatFactorInfo},Ptr{MatFactorInfo},Ref{MatFactorInfo}})
    ccall((:MatICCFactor,petscRealSingle),PetscErrorCode,(Mat{Float32},IS{Float32},Ptr{MatFactorInfo}),arg1,arg2,arg3)
end 
=#
#= skipping function with undefined symbols: 
 function MatLUFactorNumeric(arg1::Mat{Float32},arg2::Mat{Float32},arg3::Union{Ptr{MatFactorInfo},StridedArray{MatFactorInfo},Ptr{MatFactorInfo},Ref{MatFactorInfo}})
    ccall((:MatLUFactorNumeric,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},Ptr{MatFactorInfo}),arg1,arg2,arg3)
end 
=#
function MatGetInertia(arg1::Mat{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatGetInertia,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function MatSolve(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:MatSolve,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function MatForwardSolve(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:MatForwardSolve,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function MatBackwardSolve(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:MatBackwardSolve,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function MatSolveAdd(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Vec{Float32},arg4::Vec{Float32})
    err = ccall((:MatSolveAdd,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function MatSolveTranspose(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:MatSolveTranspose,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function MatSolveTransposeAdd(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Vec{Float32},arg4::Vec{Float32})
    err = ccall((:MatSolveTransposeAdd,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4)
    return err
end

#= skipping function with undefined symbols: 
 function MatSolves(arg1::Mat{Float32},arg2::Vecs,arg3::Vecs)
    ccall((:MatSolves,petscRealSingle),PetscErrorCode,(Mat{Float32},Vecs,Vecs),arg1,arg2,arg3)
end 
=#
function MatSetUnfactored(arg1::Mat{Float32})
    err = ccall((:MatSetUnfactored,petscRealSingle),PetscErrorCode,(Mat{Float32},),arg1)
    return err
end

function MatSOR(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Float32,arg4::MatSORType,arg5::Float32,arg6::Integer,arg7::Integer,arg8::Vec{Float32})
    err = ccall((:MatSOR,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Float32,MatSORType,Float32,Int64,Int64,Vec{Float32}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function MatColoringCreate(arg1::Mat{Float32},arg2::Union{Ptr{MatColoring},StridedArray{MatColoring},Ptr{MatColoring},Ref{MatColoring}})
    err = ccall((:MatColoringCreate,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{MatColoring}),arg1,arg2)
    return err
end

function MatColoringGetDegrees(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatColoringGetDegrees,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function MatColoringDestroy(arg0::Type{Float32},arg1::Union{Ptr{MatColoring},StridedArray{MatColoring},Ptr{MatColoring},Ref{MatColoring}})
    err = ccall((:MatColoringDestroy,petscRealSingle),PetscErrorCode,(Ptr{MatColoring},),arg1)
    return err
end

function MatColoringView(arg1::MatColoring,arg2::PetscViewer{Float32})
    err = ccall((:MatColoringView,petscRealSingle),PetscErrorCode,(MatColoring,PetscViewer{Float32}),arg1,arg2)
    return err
end

function MatColoringSetType(arg0::Type{Float32},arg1::MatColoring,arg2::MatColoringType)
    err = ccall((:MatColoringSetType,petscRealSingle),PetscErrorCode,(MatColoring,Cstring),arg1,arg2)
    return err
end

function MatColoringSetFromOptions(arg0::Type{Float32},arg1::MatColoring)
    err = ccall((:MatColoringSetFromOptions,petscRealSingle),PetscErrorCode,(MatColoring,),arg1)
    return err
end

function MatColoringSetDistance(arg0::Type{Float32},arg1::MatColoring,arg2::Integer)
    err = ccall((:MatColoringSetDistance,petscRealSingle),PetscErrorCode,(MatColoring,Int64),arg1,arg2)
    return err
end

function MatColoringGetDistance(arg0::Type{Float32},arg1::MatColoring,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatColoringGetDistance,petscRealSingle),PetscErrorCode,(MatColoring,Ptr{Int64}),arg1,arg2)
    return err
end

function MatColoringSetMaxColors(arg0::Type{Float32},arg1::MatColoring,arg2::Integer)
    err = ccall((:MatColoringSetMaxColors,petscRealSingle),PetscErrorCode,(MatColoring,Int64),arg1,arg2)
    return err
end

function MatColoringGetMaxColors(arg0::Type{Float32},arg1::MatColoring,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatColoringGetMaxColors,petscRealSingle),PetscErrorCode,(MatColoring,Ptr{Int64}),arg1,arg2)
    return err
end

function MatColoringApply(arg1::MatColoring,arg2::Union{Ptr{ISColoring{Float32}},StridedArray{ISColoring{Float32}},Ptr{ISColoring{Float32}},Ref{ISColoring{Float32}}})
    err = ccall((:MatColoringApply,petscRealSingle),PetscErrorCode,(MatColoring,Ptr{ISColoring{Float32}}),arg1,arg2)
    return err
end

function MatColoringRegister(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatColoringRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function MatColoringPatch(arg1::Mat{Float32},arg2::Integer,arg3::Integer,arg4::Union{Ptr{ISColoringValue},StridedArray{ISColoringValue},Ptr{ISColoringValue},Ref{ISColoringValue}},arg5::Union{Ptr{ISColoring{Float32}},StridedArray{ISColoring{Float32}},Ptr{ISColoring{Float32}},Ref{ISColoring{Float32}}})
    err = ccall((:MatColoringPatch,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Int64,Ptr{ISColoringValue},Ptr{ISColoring{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatColoringSetWeightType(arg0::Type{Float32},arg1::MatColoring,arg2::MatColoringWeightType)
    err = ccall((:MatColoringSetWeightType,petscRealSingle),PetscErrorCode,(MatColoring,MatColoringWeightType),arg1,arg2)
    return err
end

function MatColoringSetWeights(arg0::Type{Float32},arg1::MatColoring,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatColoringSetWeights,petscRealSingle),PetscErrorCode,(MatColoring,Ptr{Float32},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function MatColoringCreateWeights(arg0::Type{Float32},arg1::MatColoring,arg2::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},lperm::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:MatColoringCreateWeights,petscRealSingle),PetscErrorCode,(MatColoring,Ptr{Ptr{Float32}},Ptr{Ptr{Int64}}),arg1,arg2,lperm)
    return err
end

function MatFDColoringCreate(arg1::Mat{Float32},arg2::ISColoring{Float32},arg3::Union{Ptr{MatFDColoring},StridedArray{MatFDColoring},Ptr{MatFDColoring},Ref{MatFDColoring}})
    err = ccall((:MatFDColoringCreate,petscRealSingle),PetscErrorCode,(Mat{Float32},ISColoring{Float32},Ptr{MatFDColoring}),arg1,arg2,arg3)
    return err
end

function MatFDColoringDestroy(arg0::Type{Float32},arg1::Union{Ptr{MatFDColoring},StridedArray{MatFDColoring},Ptr{MatFDColoring},Ref{MatFDColoring}})
    err = ccall((:MatFDColoringDestroy,petscRealSingle),PetscErrorCode,(Ptr{MatFDColoring},),arg1)
    return err
end

function MatFDColoringView(arg1::MatFDColoring,arg2::PetscViewer{Float32})
    err = ccall((:MatFDColoringView,petscRealSingle),PetscErrorCode,(MatFDColoring,PetscViewer{Float32}),arg1,arg2)
    return err
end

function MatFDColoringSetFunction(arg0::Type{Float32},arg1::MatFDColoring,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatFDColoringSetFunction,petscRealSingle),PetscErrorCode,(MatFDColoring,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function MatFDColoringGetFunction(arg0::Type{Float32},arg1::MatFDColoring,arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:MatFDColoringGetFunction,petscRealSingle),PetscErrorCode,(MatFDColoring,Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function MatFDColoringSetParameters(arg0::Type{Float32},arg1::MatFDColoring,arg2::Float32,arg3::Float32)
    err = ccall((:MatFDColoringSetParameters,petscRealSingle),PetscErrorCode,(MatFDColoring,Float32,Float32),arg1,arg2,arg3)
    return err
end

function MatFDColoringSetFromOptions(arg0::Type{Float32},arg1::MatFDColoring)
    err = ccall((:MatFDColoringSetFromOptions,petscRealSingle),PetscErrorCode,(MatFDColoring,),arg1)
    return err
end

function MatFDColoringApply(arg1::Mat{Float32},arg2::MatFDColoring,arg3::Vec{Float32},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatFDColoringApply,petscRealSingle),PetscErrorCode,(Mat{Float32},MatFDColoring,Vec{Float32},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function MatFDColoringSetF(arg1::MatFDColoring,arg2::Vec{Float32})
    err = ccall((:MatFDColoringSetF,petscRealSingle),PetscErrorCode,(MatFDColoring,Vec{Float32}),arg1,arg2)
    return err
end

function MatFDColoringGetPerturbedColumns(arg0::Type{Float32},arg1::MatFDColoring,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:MatFDColoringGetPerturbedColumns,petscRealSingle),PetscErrorCode,(MatFDColoring,Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3)
    return err
end

function MatFDColoringSetUp(arg1::Mat{Float32},arg2::ISColoring{Float32},arg3::MatFDColoring)
    err = ccall((:MatFDColoringSetUp,petscRealSingle),PetscErrorCode,(Mat{Float32},ISColoring{Float32},MatFDColoring),arg1,arg2,arg3)
    return err
end

function MatFDColoringSetBlockSize(arg0::Type{Float32},arg1::MatFDColoring,arg2::Integer,arg3::Integer)
    err = ccall((:MatFDColoringSetBlockSize,petscRealSingle),PetscErrorCode,(MatFDColoring,Int64,Int64),arg1,arg2,arg3)
    return err
end

function MatTransposeColoringCreate(arg1::Mat{Float32},arg2::ISColoring{Float32},arg3::Union{Ptr{MatTransposeColoring},StridedArray{MatTransposeColoring},Ptr{MatTransposeColoring},Ref{MatTransposeColoring}})
    err = ccall((:MatTransposeColoringCreate,petscRealSingle),PetscErrorCode,(Mat{Float32},ISColoring{Float32},Ptr{MatTransposeColoring}),arg1,arg2,arg3)
    return err
end

function MatTransColoringApplySpToDen(arg1::MatTransposeColoring,arg2::Mat{Float32},arg3::Mat{Float32})
    err = ccall((:MatTransColoringApplySpToDen,petscRealSingle),PetscErrorCode,(MatTransposeColoring,Mat{Float32},Mat{Float32}),arg1,arg2,arg3)
    return err
end

function MatTransColoringApplyDenToSp(arg1::MatTransposeColoring,arg2::Mat{Float32},arg3::Mat{Float32})
    err = ccall((:MatTransColoringApplyDenToSp,petscRealSingle),PetscErrorCode,(MatTransposeColoring,Mat{Float32},Mat{Float32}),arg1,arg2,arg3)
    return err
end

function MatTransposeColoringDestroy(arg0::Type{Float32},arg1::Union{Ptr{MatTransposeColoring},StridedArray{MatTransposeColoring},Ptr{MatTransposeColoring},Ref{MatTransposeColoring}})
    err = ccall((:MatTransposeColoringDestroy,petscRealSingle),PetscErrorCode,(Ptr{MatTransposeColoring},),arg1)
    return err
end

function MatPartitioningCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{MatPartitioning},StridedArray{MatPartitioning},Ptr{MatPartitioning},Ref{MatPartitioning}})
    err = ccall((:MatPartitioningCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{MatPartitioning}),arg1,arg2)
    return err
end

function MatPartitioningSetType(arg0::Type{Float32},arg1::MatPartitioning,arg2::MatPartitioningType)
    err = ccall((:MatPartitioningSetType,petscRealSingle),PetscErrorCode,(MatPartitioning,Cstring),arg1,arg2)
    return err
end

function MatPartitioningSetNParts(arg0::Type{Float32},arg1::MatPartitioning,arg2::Integer)
    err = ccall((:MatPartitioningSetNParts,petscRealSingle),PetscErrorCode,(MatPartitioning,Int64),arg1,arg2)
    return err
end

function MatPartitioningSetAdjacency(arg1::MatPartitioning,arg2::Mat{Float32})
    err = ccall((:MatPartitioningSetAdjacency,petscRealSingle),PetscErrorCode,(MatPartitioning,Mat{Float32}),arg1,arg2)
    return err
end

function MatPartitioningSetVertexWeights(arg0::Type{Float32},arg1::MatPartitioning,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatPartitioningSetVertexWeights,petscRealSingle),PetscErrorCode,(MatPartitioning,Ptr{Int64}),arg1,arg2)
    return err
end

function MatPartitioningSetPartitionWeights(arg0::Type{Float32},arg1::MatPartitioning,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:MatPartitioningSetPartitionWeights,petscRealSingle),PetscErrorCode,(MatPartitioning,Ptr{Float32}),arg1,arg2)
    return err
end

function MatPartitioningApply(arg1::MatPartitioning,arg2::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:MatPartitioningApply,petscRealSingle),PetscErrorCode,(MatPartitioning,Ptr{IS{Float32}}),arg1,arg2)
    return err
end

function MatPartitioningDestroy(arg0::Type{Float32},arg1::Union{Ptr{MatPartitioning},StridedArray{MatPartitioning},Ptr{MatPartitioning},Ref{MatPartitioning}})
    err = ccall((:MatPartitioningDestroy,petscRealSingle),PetscErrorCode,(Ptr{MatPartitioning},),arg1)
    return err
end

function MatPartitioningRegister(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatPartitioningRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function MatPartitioningView(arg1::MatPartitioning,arg2::PetscViewer{Float32})
    err = ccall((:MatPartitioningView,petscRealSingle),PetscErrorCode,(MatPartitioning,PetscViewer{Float32}),arg1,arg2)
    return err
end

function MatPartitioningSetFromOptions(arg0::Type{Float32},arg1::MatPartitioning)
    err = ccall((:MatPartitioningSetFromOptions,petscRealSingle),PetscErrorCode,(MatPartitioning,),arg1)
    return err
end

function MatPartitioningGetType(arg0::Type{Float32},arg1::MatPartitioning,arg2::Union{Ptr{MatPartitioningType},StridedArray{MatPartitioningType},Ptr{MatPartitioningType},Ref{MatPartitioningType}})
    (arg2_,tmp) = symbol_get_before(arg2)
    err = ccall((:MatPartitioningGetType,petscRealSingle),PetscErrorCode,(MatPartitioning,Ptr{Ptr{UInt8}}),arg1,arg2_)
    symbol_get_after(arg2_,arg2)
    return err
end

function MatPartitioningParmetisSetCoarseSequential(arg0::Type{Float32},arg1::MatPartitioning)
    err = ccall((:MatPartitioningParmetisSetCoarseSequential,petscRealSingle),PetscErrorCode,(MatPartitioning,),arg1)
    return err
end

function MatPartitioningParmetisGetEdgeCut(arg0::Type{Float32},arg1::MatPartitioning,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatPartitioningParmetisGetEdgeCut,petscRealSingle),PetscErrorCode,(MatPartitioning,Ptr{Int64}),arg1,arg2)
    return err
end

function MatPartitioningChacoSetGlobal(arg0::Type{Float32},arg1::MatPartitioning,arg2::MPChacoGlobalType)
    err = ccall((:MatPartitioningChacoSetGlobal,petscRealSingle),PetscErrorCode,(MatPartitioning,MPChacoGlobalType),arg1,arg2)
    return err
end

function MatPartitioningChacoGetGlobal(arg0::Type{Float32},arg1::MatPartitioning,arg2::Union{Ptr{MPChacoGlobalType},StridedArray{MPChacoGlobalType},Ptr{MPChacoGlobalType},Ref{MPChacoGlobalType}})
    err = ccall((:MatPartitioningChacoGetGlobal,petscRealSingle),PetscErrorCode,(MatPartitioning,Ptr{MPChacoGlobalType}),arg1,arg2)
    return err
end

function MatPartitioningChacoSetLocal(arg0::Type{Float32},arg1::MatPartitioning,arg2::MPChacoLocalType)
    err = ccall((:MatPartitioningChacoSetLocal,petscRealSingle),PetscErrorCode,(MatPartitioning,MPChacoLocalType),arg1,arg2)
    return err
end

function MatPartitioningChacoGetLocal(arg0::Type{Float32},arg1::MatPartitioning,arg2::Union{Ptr{MPChacoLocalType},StridedArray{MPChacoLocalType},Ptr{MPChacoLocalType},Ref{MPChacoLocalType}})
    err = ccall((:MatPartitioningChacoGetLocal,petscRealSingle),PetscErrorCode,(MatPartitioning,Ptr{MPChacoLocalType}),arg1,arg2)
    return err
end

function MatPartitioningChacoSetCoarseLevel(arg0::Type{Float32},arg1::MatPartitioning,arg2::Float32)
    err = ccall((:MatPartitioningChacoSetCoarseLevel,petscRealSingle),PetscErrorCode,(MatPartitioning,Float32),arg1,arg2)
    return err
end

function MatPartitioningChacoSetEigenSolver(arg0::Type{Float32},arg1::MatPartitioning,arg2::MPChacoEigenType)
    err = ccall((:MatPartitioningChacoSetEigenSolver,petscRealSingle),PetscErrorCode,(MatPartitioning,MPChacoEigenType),arg1,arg2)
    return err
end

function MatPartitioningChacoGetEigenSolver(arg0::Type{Float32},arg1::MatPartitioning,arg2::Union{Ptr{MPChacoEigenType},StridedArray{MPChacoEigenType},Ptr{MPChacoEigenType},Ref{MPChacoEigenType}})
    err = ccall((:MatPartitioningChacoGetEigenSolver,petscRealSingle),PetscErrorCode,(MatPartitioning,Ptr{MPChacoEigenType}),arg1,arg2)
    return err
end

function MatPartitioningChacoSetEigenTol(arg0::Type{Float32},arg1::MatPartitioning,arg2::Float32)
    err = ccall((:MatPartitioningChacoSetEigenTol,petscRealSingle),PetscErrorCode,(MatPartitioning,Float32),arg1,arg2)
    return err
end

function MatPartitioningChacoGetEigenTol(arg0::Type{Float32},arg1::MatPartitioning,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:MatPartitioningChacoGetEigenTol,petscRealSingle),PetscErrorCode,(MatPartitioning,Ptr{Float32}),arg1,arg2)
    return err
end

function MatPartitioningChacoSetEigenNumber(arg0::Type{Float32},arg1::MatPartitioning,arg2::Integer)
    err = ccall((:MatPartitioningChacoSetEigenNumber,petscRealSingle),PetscErrorCode,(MatPartitioning,Int64),arg1,arg2)
    return err
end

function MatPartitioningChacoGetEigenNumber(arg0::Type{Float32},arg1::MatPartitioning,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatPartitioningChacoGetEigenNumber,petscRealSingle),PetscErrorCode,(MatPartitioning,Ptr{Int64}),arg1,arg2)
    return err
end

function MatPartitioningPartySetGlobal(arg0::Type{Float32},arg1::MatPartitioning,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:MatPartitioningPartySetGlobal,petscRealSingle),PetscErrorCode,(MatPartitioning,Cstring),arg1,arg2)
    return err
end

function MatPartitioningPartySetLocal(arg0::Type{Float32},arg1::MatPartitioning,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:MatPartitioningPartySetLocal,petscRealSingle),PetscErrorCode,(MatPartitioning,Cstring),arg1,arg2)
    return err
end

function MatPartitioningPartySetCoarseLevel(arg0::Type{Float32},arg1::MatPartitioning,arg2::Float32)
    err = ccall((:MatPartitioningPartySetCoarseLevel,petscRealSingle),PetscErrorCode,(MatPartitioning,Float32),arg1,arg2)
    return err
end

function MatPartitioningPartySetBipart(arg0::Type{Float32},arg1::MatPartitioning,arg2::PetscBool)
    err = ccall((:MatPartitioningPartySetBipart,petscRealSingle),PetscErrorCode,(MatPartitioning,PetscBool),arg1,arg2)
    return err
end

function MatPartitioningPartySetMatchOptimization(arg0::Type{Float32},arg1::MatPartitioning,arg2::PetscBool)
    err = ccall((:MatPartitioningPartySetMatchOptimization,petscRealSingle),PetscErrorCode,(MatPartitioning,PetscBool),arg1,arg2)
    return err
end

function MatPartitioningPTScotchSetImbalance(arg0::Type{Float32},arg1::MatPartitioning,arg2::Float32)
    err = ccall((:MatPartitioningPTScotchSetImbalance,petscRealSingle),PetscErrorCode,(MatPartitioning,Float32),arg1,arg2)
    return err
end

function MatPartitioningPTScotchGetImbalance(arg0::Type{Float32},arg1::MatPartitioning,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:MatPartitioningPTScotchGetImbalance,petscRealSingle),PetscErrorCode,(MatPartitioning,Ptr{Float32}),arg1,arg2)
    return err
end

function MatPartitioningPTScotchSetStrategy(arg0::Type{Float32},arg1::MatPartitioning,arg2::MPPTScotchStrategyType)
    err = ccall((:MatPartitioningPTScotchSetStrategy,petscRealSingle),PetscErrorCode,(MatPartitioning,MPPTScotchStrategyType),arg1,arg2)
    return err
end

function MatPartitioningPTScotchGetStrategy(arg0::Type{Float32},arg1::MatPartitioning,arg2::Union{Ptr{MPPTScotchStrategyType},StridedArray{MPPTScotchStrategyType},Ptr{MPPTScotchStrategyType},Ref{MPPTScotchStrategyType}})
    err = ccall((:MatPartitioningPTScotchGetStrategy,petscRealSingle),PetscErrorCode,(MatPartitioning,Ptr{MPPTScotchStrategyType}),arg1,arg2)
    return err
end

function MatCoarsenCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{MatCoarsen},StridedArray{MatCoarsen},Ptr{MatCoarsen},Ref{MatCoarsen}})
    err = ccall((:MatCoarsenCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{MatCoarsen}),arg1,arg2)
    return err
end

function MatCoarsenSetType(arg0::Type{Float32},arg1::MatCoarsen,arg2::MatCoarsenType)
    err = ccall((:MatCoarsenSetType,petscRealSingle),PetscErrorCode,(MatCoarsen,Cstring),arg1,arg2)
    return err
end

function MatCoarsenSetAdjacency(arg1::MatCoarsen,arg2::Mat{Float32})
    err = ccall((:MatCoarsenSetAdjacency,petscRealSingle),PetscErrorCode,(MatCoarsen,Mat{Float32}),arg1,arg2)
    return err
end

function MatCoarsenSetGreedyOrdering(arg1::MatCoarsen,arg2::IS{Float32})
    err = ccall((:MatCoarsenSetGreedyOrdering,petscRealSingle),PetscErrorCode,(MatCoarsen,IS{Float32}),arg1,arg2)
    return err
end

function MatCoarsenSetStrictAggs(arg0::Type{Float32},arg1::MatCoarsen,arg2::PetscBool)
    err = ccall((:MatCoarsenSetStrictAggs,petscRealSingle),PetscErrorCode,(MatCoarsen,PetscBool),arg1,arg2)
    return err
end

#= skipping function with undefined symbols: 
 function MatCoarsenGetData(arg0::Type{Float32},arg1::MatCoarsen,arg2::Union{Ptr{Ptr{PetscCoarsenData}},StridedArray{Ptr{PetscCoarsenData}},Ptr{Ptr{PetscCoarsenData}},Ref{Ptr{PetscCoarsenData}}})
    ccall((:MatCoarsenGetData,petscRealSingle),PetscErrorCode,(MatCoarsen,Ptr{Ptr{PetscCoarsenData}}),arg1,arg2)
end 
=#
function MatCoarsenApply(arg0::Type{Float32},arg1::MatCoarsen)
    err = ccall((:MatCoarsenApply,petscRealSingle),PetscErrorCode,(MatCoarsen,),arg1)
    return err
end

function MatCoarsenDestroy(arg0::Type{Float32},arg1::Union{Ptr{MatCoarsen},StridedArray{MatCoarsen},Ptr{MatCoarsen},Ref{MatCoarsen}})
    err = ccall((:MatCoarsenDestroy,petscRealSingle),PetscErrorCode,(Ptr{MatCoarsen},),arg1)
    return err
end

function MatCoarsenRegister(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatCoarsenRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function MatCoarsenView(arg1::MatCoarsen,arg2::PetscViewer{Float32})
    err = ccall((:MatCoarsenView,petscRealSingle),PetscErrorCode,(MatCoarsen,PetscViewer{Float32}),arg1,arg2)
    return err
end

function MatCoarsenSetFromOptions(arg0::Type{Float32},arg1::MatCoarsen)
    err = ccall((:MatCoarsenSetFromOptions,petscRealSingle),PetscErrorCode,(MatCoarsen,),arg1)
    return err
end

function MatCoarsenGetType(arg0::Type{Float32},arg1::MatCoarsen,arg2::Union{Ptr{MatCoarsenType},StridedArray{MatCoarsenType},Ptr{MatCoarsenType},Ref{MatCoarsenType}})
    (arg2_,tmp) = symbol_get_before(arg2)
    err = ccall((:MatCoarsenGetType,petscRealSingle),PetscErrorCode,(MatCoarsen,Ptr{Ptr{UInt8}}),arg1,arg2_)
    symbol_get_after(arg2_,arg2)
    return err
end

function MatCoarsenViewFromOptions(arg0::Type{Float32},A::MatCoarsen,obj::PetscObject,name::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:MatCoarsenViewFromOptions,petscRealSingle),PetscErrorCode,(MatCoarsen,PetscObject,Cstring),A,obj,name)
    return err
end

function MatMeshToVertexGraph(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatMeshToVertexGraph,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Mat{Float32}}),arg1,arg2,arg3)
    return err
end

function MatMeshToCellGraph(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatMeshToCellGraph,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Mat{Float32}}),arg1,arg2,arg3)
    return err
end

function MatHasOperation(arg1::Mat{Float32},arg2::MatOperation,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatHasOperation,petscRealSingle),PetscErrorCode,(Mat{Float32},MatOperation,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function MatShellSetOperation(arg1::Mat{Float32},arg2::MatOperation,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatShellSetOperation,petscRealSingle),PetscErrorCode,(Mat{Float32},MatOperation,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function MatShellGetOperation(arg1::Mat{Float32},arg2::MatOperation,arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:MatShellGetOperation,petscRealSingle),PetscErrorCode,(Mat{Float32},MatOperation,Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function MatShellSetContext(arg1::Mat{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatShellSetContext,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Void}),arg1,arg2)
    return err
end

function MatMPIBAIJSetHashTableFactor(arg1::Mat{Float32},arg2::Float32)
    err = ccall((:MatMPIBAIJSetHashTableFactor,petscRealSingle),PetscErrorCode,(Mat{Float32},Float32),arg1,arg2)
    return err
end

function MatISGetLocalMat(arg1::Mat{Float32},arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatISGetLocalMat,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Mat{Float32}}),arg1,arg2)
    return err
end

function MatISSetLocalMat(arg1::Mat{Float32},arg2::Mat{Float32})
    err = ccall((:MatISSetLocalMat,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32}),arg1,arg2)
    return err
end

function MatISGetMPIXAIJ(arg1::Mat{Float32},arg2::MatReuse,arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatISGetMPIXAIJ,petscRealSingle),PetscErrorCode,(Mat{Float32},MatReuse,Ptr{Mat{Float32}}),arg1,arg2,arg3)
    return err
end

function MatNullSpaceCreate(arg1::MPI_Comm,arg2::PetscBool,arg3::Integer,arg4::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg5::Union{Ptr{MatNullSpace},StridedArray{MatNullSpace},Ptr{MatNullSpace},Ref{MatNullSpace}})
    err = ccall((:MatNullSpaceCreate,petscRealSingle),PetscErrorCode,(comm_type,PetscBool,Int64,Ptr{Vec{Float32}},Ptr{MatNullSpace}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatNullSpaceSetFunction(arg0::Type{Float32},arg1::MatNullSpace,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatNullSpaceSetFunction,petscRealSingle),PetscErrorCode,(MatNullSpace,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function MatNullSpaceDestroy(arg0::Type{Float32},arg1::Union{Ptr{MatNullSpace},StridedArray{MatNullSpace},Ptr{MatNullSpace},Ref{MatNullSpace}})
    err = ccall((:MatNullSpaceDestroy,petscRealSingle),PetscErrorCode,(Ptr{MatNullSpace},),arg1)
    return err
end

function MatNullSpaceRemove(arg1::MatNullSpace,arg2::Vec{Float32})
    err = ccall((:MatNullSpaceRemove,petscRealSingle),PetscErrorCode,(MatNullSpace,Vec{Float32}),arg1,arg2)
    return err
end

function MatGetNullSpace(arg1::Mat{Float32},arg2::Union{Ptr{MatNullSpace},StridedArray{MatNullSpace},Ptr{MatNullSpace},Ref{MatNullSpace}})
    err = ccall((:MatGetNullSpace,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{MatNullSpace}),arg1,arg2)
    return err
end

function MatGetTransposeNullSpace(arg1::Mat{Float32},arg2::Union{Ptr{MatNullSpace},StridedArray{MatNullSpace},Ptr{MatNullSpace},Ref{MatNullSpace}})
    err = ccall((:MatGetTransposeNullSpace,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{MatNullSpace}),arg1,arg2)
    return err
end

function MatSetTransposeNullSpace(arg1::Mat{Float32},arg2::MatNullSpace)
    err = ccall((:MatSetTransposeNullSpace,petscRealSingle),PetscErrorCode,(Mat{Float32},MatNullSpace),arg1,arg2)
    return err
end

function MatSetNullSpace(arg1::Mat{Float32},arg2::MatNullSpace)
    err = ccall((:MatSetNullSpace,petscRealSingle),PetscErrorCode,(Mat{Float32},MatNullSpace),arg1,arg2)
    return err
end

function MatSetNearNullSpace(arg1::Mat{Float32},arg2::MatNullSpace)
    err = ccall((:MatSetNearNullSpace,petscRealSingle),PetscErrorCode,(Mat{Float32},MatNullSpace),arg1,arg2)
    return err
end

function MatGetNearNullSpace(arg1::Mat{Float32},arg2::Union{Ptr{MatNullSpace},StridedArray{MatNullSpace},Ptr{MatNullSpace},Ref{MatNullSpace}})
    err = ccall((:MatGetNearNullSpace,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{MatNullSpace}),arg1,arg2)
    return err
end

function MatNullSpaceTest(arg1::MatNullSpace,arg2::Mat{Float32},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatNullSpaceTest,petscRealSingle),PetscErrorCode,(MatNullSpace,Mat{Float32},Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function MatNullSpaceView(arg1::MatNullSpace,arg2::PetscViewer{Float32})
    err = ccall((:MatNullSpaceView,petscRealSingle),PetscErrorCode,(MatNullSpace,PetscViewer{Float32}),arg1,arg2)
    return err
end

function MatNullSpaceGetVecs(arg1::MatNullSpace,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{Vec{Float32}}},StridedArray{Ptr{Vec{Float32}}},Ptr{Ptr{Vec{Float32}}},Ref{Ptr{Vec{Float32}}}})
    err = ccall((:MatNullSpaceGetVecs,petscRealSingle),PetscErrorCode,(MatNullSpace,Ptr{PetscBool},Ptr{Int64},Ptr{Ptr{Vec{Float32}}}),arg1,arg2,arg3,arg4)
    return err
end

function MatNullSpaceCreateRigidBody(arg1::Vec{Float32},arg2::Union{Ptr{MatNullSpace},StridedArray{MatNullSpace},Ptr{MatNullSpace},Ref{MatNullSpace}})
    err = ccall((:MatNullSpaceCreateRigidBody,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{MatNullSpace}),arg1,arg2)
    return err
end

function MatReorderingSeqSBAIJ(arg1::Mat{Float32},arg2::IS{Float32})
    err = ccall((:MatReorderingSeqSBAIJ,petscRealSingle),PetscErrorCode,(Mat{Float32},IS{Float32}),arg1,arg2)
    return err
end

function MatMPISBAIJSetHashTableFactor(arg1::Mat{Float32},arg2::Float32)
    err = ccall((:MatMPISBAIJSetHashTableFactor,petscRealSingle),PetscErrorCode,(Mat{Float32},Float32),arg1,arg2)
    return err
end

function MatSeqSBAIJSetColumnIndices(arg1::Mat{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatSeqSBAIJSetColumnIndices,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function MatSeqBAIJInvertBlockDiagonal(arg1::Mat{Float32})
    err = ccall((:MatSeqBAIJInvertBlockDiagonal,petscRealSingle),PetscErrorCode,(Mat{Float32},),arg1)
    return err
end

function MatCreateMAIJ(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateMAIJ,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Mat{Float32}}),arg1,arg2,arg3)
    return err
end

function MatMAIJRedimension(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatMAIJRedimension,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Mat{Float32}}),arg1,arg2,arg3)
    return err
end

function MatMAIJGetAIJ(arg1::Mat{Float32},arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatMAIJGetAIJ,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Mat{Float32}}),arg1,arg2)
    return err
end

function MatComputeExplicitOperator(arg1::Mat{Float32},arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatComputeExplicitOperator,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Mat{Float32}}),arg1,arg2)
    return err
end

function MatDiagonalScaleLocal(arg1::Mat{Float32},arg2::Vec{Float32})
    err = ccall((:MatDiagonalScaleLocal,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32}),arg1,arg2)
    return err
end

function MatCreateMFFD(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateMFFD,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatMFFDSetBase(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:MatMFFDSetBase,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function MatMFFDSetFunction(arg1::Mat{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatMFFDSetFunction,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function MatMFFDSetFunctioni(arg1::Mat{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatMFFDSetFunctioni,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Void}),arg1,arg2)
    return err
end

function MatMFFDSetFunctioniBase(arg1::Mat{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatMFFDSetFunctioniBase,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Void}),arg1,arg2)
    return err
end

function MatMFFDAddNullSpace(arg1::Mat{Float32},arg2::MatNullSpace)
    err = ccall((:MatMFFDAddNullSpace,petscRealSingle),PetscErrorCode,(Mat{Float32},MatNullSpace),arg1,arg2)
    return err
end

function MatMFFDSetHHistory(arg1::Mat{Float32},arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Integer)
    err = ccall((:MatMFFDSetHHistory,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Float32},Int64),arg1,arg2,arg3)
    return err
end

function MatMFFDResetHHistory(arg1::Mat{Float32})
    err = ccall((:MatMFFDResetHHistory,petscRealSingle),PetscErrorCode,(Mat{Float32},),arg1)
    return err
end

function MatMFFDSetFunctionError(arg1::Mat{Float32},arg2::Float32)
    err = ccall((:MatMFFDSetFunctionError,petscRealSingle),PetscErrorCode,(Mat{Float32},Float32),arg1,arg2)
    return err
end

function MatMFFDSetPeriod(arg1::Mat{Float32},arg2::Integer)
    err = ccall((:MatMFFDSetPeriod,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64),arg1,arg2)
    return err
end

function MatMFFDGetH(arg1::Mat{Float32},arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:MatMFFDGetH,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Float32}),arg1,arg2)
    return err
end

function MatMFFDSetOptionsPrefix(arg1::Mat{Float32},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:MatMFFDSetOptionsPrefix,petscRealSingle),PetscErrorCode,(Mat{Float32},Cstring),arg1,arg2)
    return err
end

function MatMFFDCheckPositivity(arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg2::Vec{Float32},arg3::Vec{Float32},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:MatMFFDCheckPositivity,petscRealSingle),PetscErrorCode,(Ptr{Void},Vec{Float32},Vec{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function MatMFFDSetCheckh(arg1::Mat{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatMFFDSetCheckh,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function MatMFFDSetType(arg1::Mat{Float32},arg2::MatMFFDType)
    err = ccall((:MatMFFDSetType,petscRealSingle),PetscErrorCode,(Mat{Float32},Cstring),arg1,arg2)
    return err
end

function MatMFFDRegister(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatMFFDRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function MatMFFDDSSetUmin(arg1::Mat{Float32},arg2::Float32)
    err = ccall((:MatMFFDDSSetUmin,petscRealSingle),PetscErrorCode,(Mat{Float32},Float32),arg1,arg2)
    return err
end

function MatMFFDWPSetComputeNormU(arg1::Mat{Float32},arg2::PetscBool)
    err = ccall((:MatMFFDWPSetComputeNormU,petscRealSingle),PetscErrorCode,(Mat{Float32},PetscBool),arg1,arg2)
    return err
end

function PetscViewerMathematicaPutMatrix(arg1::PetscViewer{Float32},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:PetscViewerMathematicaPutMatrix,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Int64,Int64,Ptr{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function PetscViewerMathematicaPutCSRMatrix(arg1::PetscViewer{Float32},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:PetscViewerMathematicaPutCSRMatrix,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Int64,Int64,Ptr{Int64},Ptr{Int64},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatCreateNest(arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg4::Integer,arg5::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg6::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}},arg7::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateNest,petscRealSingle),PetscErrorCode,(comm_type,Int64,Ptr{IS{Float32}},Int64,Ptr{IS{Float32}},Ptr{Mat{Float32}},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatNestGetSize(arg1::Mat{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatNestGetSize,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function MatNestGetISs(arg1::Mat{Float32},arg2::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:MatNestGetISs,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{IS{Float32}},Ptr{IS{Float32}}),arg1,arg2,arg3)
    return err
end

function MatNestGetLocalISs(arg1::Mat{Float32},arg2::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:MatNestGetLocalISs,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{IS{Float32}},Ptr{IS{Float32}}),arg1,arg2,arg3)
    return err
end

function MatNestGetSubMats(arg1::Mat{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{Ptr{Mat{Float32}}}},StridedArray{Ptr{Ptr{Mat{Float32}}}},Ptr{Ptr{Ptr{Mat{Float32}}}},Ref{Ptr{Ptr{Mat{Float32}}}}})
    err = ccall((:MatNestGetSubMats,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Int64},Ptr{Int64},Ptr{Ptr{Ptr{Mat{Float32}}}}),arg1,arg2,arg3,arg4)
    return err
end

function MatNestGetSubMat(arg1::Mat{Float32},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatNestGetSubMat,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Int64,Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function MatNestSetVecType(arg1::Mat{Float32},arg2::VecType)
    err = ccall((:MatNestSetVecType,petscRealSingle),PetscErrorCode,(Mat{Float32},Cstring),arg1,arg2)
    return err
end

function MatNestSetSubMats(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg4::Integer,arg5::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg6::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatNestSetSubMats,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{IS{Float32}},Int64,Ptr{IS{Float32}},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatNestSetSubMat(arg1::Mat{Float32},arg2::Integer,arg3::Integer,arg4::Mat{Float32})
    err = ccall((:MatNestSetSubMat,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Int64,Mat{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function MatChop(arg1::Mat{Float32},arg2::Float32)
    err = ccall((:MatChop,petscRealSingle),PetscErrorCode,(Mat{Float32},Float32),arg1,arg2)
    return err
end

function MatComputeBandwidth(arg1::Mat{Float32},arg2::Float32,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatComputeBandwidth,petscRealSingle),PetscErrorCode,(Mat{Float32},Float32,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function MatSubdomainsCreateCoalesce(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{IS{Float32}}},StridedArray{Ptr{IS{Float32}}},Ptr{Ptr{IS{Float32}}},Ref{Ptr{IS{Float32}}}})
    err = ccall((:MatSubdomainsCreateCoalesce,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Int64},Ptr{Ptr{IS{Float32}}}),arg1,arg2,arg3,arg4)
    return err
end

function DMInitializePackage(arg0::Type{Float32})
    err = ccall((:DMInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function DMCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:DMCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{DM}),arg1,arg2)
    return err
end

function DMClone(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:DMClone,petscRealSingle),PetscErrorCode,(DM,Ptr{DM}),arg1,arg2)
    return err
end

function DMSetType(arg0::Type{Float32},arg1::DM,arg2::DMType)
    err = ccall((:DMSetType,petscRealSingle),PetscErrorCode,(DM,Cstring),arg1,arg2)
    return err
end

function DMGetType(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{DMType},StridedArray{DMType},Ptr{DMType},Ref{DMType}})
    (arg2_,tmp) = symbol_get_before(arg2)
    err = ccall((:DMGetType,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{UInt8}}),arg1,arg2_)
    symbol_get_after(arg2_,arg2)
    return err
end

function DMRegister(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function DMRegisterDestroy(arg0::Type{Float32})
    err = ccall((:DMRegisterDestroy,petscRealSingle),PetscErrorCode,())
    return err
end

function DMView(arg1::DM,arg2::PetscViewer{Float32})
    err = ccall((:DMView,petscRealSingle),PetscErrorCode,(DM,PetscViewer{Float32}),arg1,arg2)
    return err
end

function DMLoad(arg1::DM,arg2::PetscViewer{Float32})
    err = ccall((:DMLoad,petscRealSingle),PetscErrorCode,(DM,PetscViewer{Float32}),arg1,arg2)
    return err
end

function DMDestroy(arg0::Type{Float32},arg1::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:DMDestroy,petscRealSingle),PetscErrorCode,(Ptr{DM},),arg1)
    return err
end

function DMCreateGlobalVector(arg1::DM,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:DMCreateGlobalVector,petscRealSingle),PetscErrorCode,(DM,Ptr{Vec{Float32}}),arg1,arg2)
    return err
end

function DMCreateLocalVector(arg1::DM,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:DMCreateLocalVector,petscRealSingle),PetscErrorCode,(DM,Ptr{Vec{Float32}}),arg1,arg2)
    return err
end

function DMGetLocalVector(arg1::DM,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:DMGetLocalVector,petscRealSingle),PetscErrorCode,(DM,Ptr{Vec{Float32}}),arg1,arg2)
    return err
end

function DMRestoreLocalVector(arg1::DM,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:DMRestoreLocalVector,petscRealSingle),PetscErrorCode,(DM,Ptr{Vec{Float32}}),arg1,arg2)
    return err
end

function DMGetGlobalVector(arg1::DM,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:DMGetGlobalVector,petscRealSingle),PetscErrorCode,(DM,Ptr{Vec{Float32}}),arg1,arg2)
    return err
end

function DMRestoreGlobalVector(arg1::DM,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:DMRestoreGlobalVector,petscRealSingle),PetscErrorCode,(DM,Ptr{Vec{Float32}}),arg1,arg2)
    return err
end

function DMClearGlobalVectors(arg0::Type{Float32},arg1::DM)
    err = ccall((:DMClearGlobalVectors,petscRealSingle),PetscErrorCode,(DM,),arg1)
    return err
end

function DMGetNamedGlobalVector(arg1::DM,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:DMGetNamedGlobalVector,petscRealSingle),PetscErrorCode,(DM,Cstring,Ptr{Vec{Float32}}),arg1,arg2,arg3)
    return err
end

function DMRestoreNamedGlobalVector(arg1::DM,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:DMRestoreNamedGlobalVector,petscRealSingle),PetscErrorCode,(DM,Cstring,Ptr{Vec{Float32}}),arg1,arg2,arg3)
    return err
end

function DMGetNamedLocalVector(arg1::DM,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:DMGetNamedLocalVector,petscRealSingle),PetscErrorCode,(DM,Cstring,Ptr{Vec{Float32}}),arg1,arg2,arg3)
    return err
end

function DMRestoreNamedLocalVector(arg1::DM,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:DMRestoreNamedLocalVector,petscRealSingle),PetscErrorCode,(DM,Cstring,Ptr{Vec{Float32}}),arg1,arg2,arg3)
    return err
end

function DMGetLocalToGlobalMapping(arg1::DM,arg2::Union{Ptr{ISLocalToGlobalMapping{Float32}},StridedArray{ISLocalToGlobalMapping{Float32}},Ptr{ISLocalToGlobalMapping{Float32}},Ref{ISLocalToGlobalMapping{Float32}}})
    err = ccall((:DMGetLocalToGlobalMapping,petscRealSingle),PetscErrorCode,(DM,Ptr{ISLocalToGlobalMapping{Float32}}),arg1,arg2)
    return err
end

function DMCreateFieldIS(arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}},arg4::Union{Ptr{Ptr{IS{Float32}}},StridedArray{Ptr{IS{Float32}}},Ptr{Ptr{IS{Float32}}},Ref{Ptr{IS{Float32}}}})
    err = ccall((:DMCreateFieldIS,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64},Ptr{Ptr{Ptr{UInt8}}},Ptr{Ptr{IS{Float32}}}),arg1,arg2,arg3,arg4)
    return err
end

function DMGetBlockSize(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMGetBlockSize,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64}),arg1,arg2)
    return err
end

function DMCreateColoring(arg1::DM,arg2::ISColoringType,arg3::Union{Ptr{ISColoring{Float32}},StridedArray{ISColoring{Float32}},Ptr{ISColoring{Float32}},Ref{ISColoring{Float32}}})
    err = ccall((:DMCreateColoring,petscRealSingle),PetscErrorCode,(DM,ISColoringType,Ptr{ISColoring{Float32}}),arg1,arg2,arg3)
    return err
end

function DMCreateMatrix(arg1::DM,arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:DMCreateMatrix,petscRealSingle),PetscErrorCode,(DM,Ptr{Mat{Float32}}),arg1,arg2)
    return err
end

function DMSetMatrixPreallocateOnly(arg0::Type{Float32},arg1::DM,arg2::PetscBool)
    err = ccall((:DMSetMatrixPreallocateOnly,petscRealSingle),PetscErrorCode,(DM,PetscBool),arg1,arg2)
    return err
end

function DMCreateInterpolation(arg1::DM,arg2::DM,arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}},arg4::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:DMCreateInterpolation,petscRealSingle),PetscErrorCode,(DM,DM,Ptr{Mat{Float32}},Ptr{Vec{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function DMCreateInjection(arg1::DM,arg2::DM,arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:DMCreateInjection,petscRealSingle),PetscErrorCode,(DM,DM,Ptr{Mat{Float32}}),arg1,arg2,arg3)
    return err
end

function DMGetWorkArray(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::PetscDataType,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMGetWorkArray,petscRealSingle),PetscErrorCode,(DM,Int64,PetscDataType,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function DMRestoreWorkArray(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::PetscDataType,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMRestoreWorkArray,petscRealSingle),PetscErrorCode,(DM,Int64,PetscDataType,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function DMRefine(arg0::Type{Float32},arg1::DM,arg2::MPI_Comm,arg3::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:DMRefine,petscRealSingle),PetscErrorCode,(DM,comm_type,Ptr{DM}),arg1,arg2,arg3)
    return err
end

function DMCoarsen(arg0::Type{Float32},arg1::DM,arg2::MPI_Comm,arg3::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:DMCoarsen,petscRealSingle),PetscErrorCode,(DM,comm_type,Ptr{DM}),arg1,arg2,arg3)
    return err
end

function DMRefineHierarchy(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:DMRefineHierarchy,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{DM}),arg1,arg2,arg3)
    return err
end

function DMCoarsenHierarchy(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:DMCoarsenHierarchy,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{DM}),arg1,arg2,arg3)
    return err
end

function DMCoarsenHookAdd(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMCoarsenHookAdd,petscRealSingle),PetscErrorCode,(DM,Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function DMRefineHookAdd(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMRefineHookAdd,petscRealSingle),PetscErrorCode,(DM,Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function DMRestrict(arg1::DM,arg2::Mat{Float32},arg3::Vec{Float32},arg4::Mat{Float32},arg5::DM)
    err = ccall((:DMRestrict,petscRealSingle),PetscErrorCode,(DM,Mat{Float32},Vec{Float32},Mat{Float32},DM),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMInterpolate(arg1::DM,arg2::Mat{Float32},arg3::DM)
    err = ccall((:DMInterpolate,petscRealSingle),PetscErrorCode,(DM,Mat{Float32},DM),arg1,arg2,arg3)
    return err
end

function DMSetFromOptions(arg0::Type{Float32},arg1::DM)
    err = ccall((:DMSetFromOptions,petscRealSingle),PetscErrorCode,(DM,),arg1)
    return err
end

function DMViewFromOptions(arg0::Type{Float32},A::DM,obj::PetscObject,name::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:DMViewFromOptions,petscRealSingle),PetscErrorCode,(DM,PetscObject,Cstring),A,obj,name)
    return err
end

function DMSetUp(arg0::Type{Float32},arg1::DM)
    err = ccall((:DMSetUp,petscRealSingle),PetscErrorCode,(DM,),arg1)
    return err
end

function DMCreateInterpolationScale(arg1::DM,arg2::DM,arg3::Mat{Float32},arg4::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:DMCreateInterpolationScale,petscRealSingle),PetscErrorCode,(DM,DM,Mat{Float32},Ptr{Vec{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function DMCreateAggregates(arg1::DM,arg2::DM,arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:DMCreateAggregates,petscRealSingle),PetscErrorCode,(DM,DM,Ptr{Mat{Float32}}),arg1,arg2,arg3)
    return err
end

function DMGlobalToLocalHookAdd(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMGlobalToLocalHookAdd,petscRealSingle),PetscErrorCode,(DM,Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function DMLocalToGlobalHookAdd(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMLocalToGlobalHookAdd,petscRealSingle),PetscErrorCode,(DM,Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function DMGlobalToLocalBegin(arg1::DM,arg2::Vec{Float32},arg3::InsertMode,arg4::Vec{Float32})
    err = ccall((:DMGlobalToLocalBegin,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},InsertMode,Vec{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function DMGlobalToLocalEnd(arg1::DM,arg2::Vec{Float32},arg3::InsertMode,arg4::Vec{Float32})
    err = ccall((:DMGlobalToLocalEnd,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},InsertMode,Vec{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function DMLocalToGlobalBegin(arg1::DM,arg2::Vec{Float32},arg3::InsertMode,arg4::Vec{Float32})
    err = ccall((:DMLocalToGlobalBegin,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},InsertMode,Vec{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function DMLocalToGlobalEnd(arg1::DM,arg2::Vec{Float32},arg3::InsertMode,arg4::Vec{Float32})
    err = ccall((:DMLocalToGlobalEnd,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},InsertMode,Vec{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function DMLocalToLocalBegin(arg1::DM,arg2::Vec{Float32},arg3::InsertMode,arg4::Vec{Float32})
    err = ccall((:DMLocalToLocalBegin,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},InsertMode,Vec{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function DMLocalToLocalEnd(arg1::DM,arg2::Vec{Float32},arg3::InsertMode,arg4::Vec{Float32})
    err = ccall((:DMLocalToLocalEnd,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},InsertMode,Vec{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function DMConvert(arg0::Type{Float32},arg1::DM,arg2::DMType,arg3::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:DMConvert,petscRealSingle),PetscErrorCode,(DM,Cstring,Ptr{DM}),arg1,arg2,arg3)
    return err
end

function DMGetDimension(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMGetDimension,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64}),arg1,arg2)
    return err
end

function DMSetDimension(arg0::Type{Float32},arg1::DM,arg2::Integer)
    err = ccall((:DMSetDimension,petscRealSingle),PetscErrorCode,(DM,Int64),arg1,arg2)
    return err
end

function DMGetDimPoints(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMGetDimPoints,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function DMGetCoordinateDM(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:DMGetCoordinateDM,petscRealSingle),PetscErrorCode,(DM,Ptr{DM}),arg1,arg2)
    return err
end

function DMSetCoordinateDM(arg0::Type{Float32},arg1::DM,arg2::DM)
    err = ccall((:DMSetCoordinateDM,petscRealSingle),PetscErrorCode,(DM,DM),arg1,arg2)
    return err
end

function DMGetCoordinateDim(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMGetCoordinateDim,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64}),arg1,arg2)
    return err
end

function DMSetCoordinateDim(arg0::Type{Float32},arg1::DM,arg2::Integer)
    err = ccall((:DMSetCoordinateDim,petscRealSingle),PetscErrorCode,(DM,Int64),arg1,arg2)
    return err
end

function DMGetCoordinateSection(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{PetscSection},StridedArray{PetscSection},Ptr{PetscSection},Ref{PetscSection}})
    err = ccall((:DMGetCoordinateSection,petscRealSingle),PetscErrorCode,(DM,Ptr{PetscSection}),arg1,arg2)
    return err
end

function DMSetCoordinateSection(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::PetscSection)
    err = ccall((:DMSetCoordinateSection,petscRealSingle),PetscErrorCode,(DM,Int64,PetscSection),arg1,arg2,arg3)
    return err
end

function DMGetCoordinates(arg1::DM,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:DMGetCoordinates,petscRealSingle),PetscErrorCode,(DM,Ptr{Vec{Float32}}),arg1,arg2)
    return err
end

function DMSetCoordinates(arg1::DM,arg2::Vec{Float32})
    err = ccall((:DMSetCoordinates,petscRealSingle),PetscErrorCode,(DM,Vec{Float32}),arg1,arg2)
    return err
end

function DMGetCoordinatesLocal(arg1::DM,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:DMGetCoordinatesLocal,petscRealSingle),PetscErrorCode,(DM,Ptr{Vec{Float32}}),arg1,arg2)
    return err
end

function DMSetCoordinatesLocal(arg1::DM,arg2::Vec{Float32})
    err = ccall((:DMSetCoordinatesLocal,petscRealSingle),PetscErrorCode,(DM,Vec{Float32}),arg1,arg2)
    return err
end

function DMLocatePoints(arg1::DM,arg2::Vec{Float32},arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:DMLocatePoints,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},Ptr{IS{Float32}}),arg1,arg2,arg3)
    return err
end

function DMGetPeriodicity(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg3::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg4::Union{Ptr{Ptr{DMBoundaryType}},StridedArray{Ptr{DMBoundaryType}},Ptr{Ptr{DMBoundaryType}},Ref{Ptr{DMBoundaryType}}})
    err = ccall((:DMGetPeriodicity,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{Float32}},Ptr{Ptr{Float32}},Ptr{Ptr{DMBoundaryType}}),arg1,arg2,arg3,arg4)
    return err
end

function DMSetPeriodicity(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{DMBoundaryType},StridedArray{DMBoundaryType},Ptr{DMBoundaryType},Ref{DMBoundaryType}})
    err = ccall((:DMSetPeriodicity,petscRealSingle),PetscErrorCode,(DM,Ptr{Float32},Ptr{Float32},Ptr{DMBoundaryType}),arg1,arg2,arg3,arg4)
    return err
end

function DMSubDomainHookAdd(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMSubDomainHookAdd,petscRealSingle),PetscErrorCode,(DM,Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function DMSubDomainRestrict(arg1::DM,arg2::VecScatter{Float32},arg3::VecScatter{Float32},arg4::DM)
    err = ccall((:DMSubDomainRestrict,petscRealSingle),PetscErrorCode,(DM,VecScatter{Float32},VecScatter{Float32},DM),arg1,arg2,arg3,arg4)
    return err
end

function DMSetOptionsPrefix(arg0::Type{Float32},arg1::DM,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:DMSetOptionsPrefix,petscRealSingle),PetscErrorCode,(DM,Cstring),arg1,arg2)
    return err
end

function DMSetVecType(arg0::Type{Float32},arg1::DM,arg2::VecType)
    err = ccall((:DMSetVecType,petscRealSingle),PetscErrorCode,(DM,Cstring),arg1,arg2)
    return err
end

function DMGetVecType(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{VecType},StridedArray{VecType},Ptr{VecType},Ref{VecType}})
    (arg2_,tmp) = symbol_get_before(arg2)
    err = ccall((:DMGetVecType,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{UInt8}}),arg1,arg2_)
    symbol_get_after(arg2_,arg2)
    return err
end

function DMSetMatType(arg0::Type{Float32},arg1::DM,arg2::MatType)
    err = ccall((:DMSetMatType,petscRealSingle),PetscErrorCode,(DM,Cstring),arg1,arg2)
    return err
end

function DMGetMatType(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{MatType},StridedArray{MatType},Ptr{MatType},Ref{MatType}})
    (arg2_,tmp) = symbol_get_before(arg2)
    err = ccall((:DMGetMatType,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{UInt8}}),arg1,arg2_)
    symbol_get_after(arg2_,arg2)
    return err
end

function DMSetApplicationContext(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMSetApplicationContext,petscRealSingle),PetscErrorCode,(DM,Ptr{Void}),arg1,arg2)
    return err
end

function DMSetApplicationContextDestroy(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMSetApplicationContextDestroy,petscRealSingle),PetscErrorCode,(DM,Ptr{Void}),arg1,arg2)
    return err
end

function DMGetApplicationContext(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMGetApplicationContext,petscRealSingle),PetscErrorCode,(DM,Ptr{Void}),arg1,arg2)
    return err
end

function DMSetVariableBounds(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMSetVariableBounds,petscRealSingle),PetscErrorCode,(DM,Ptr{Void}),arg1,arg2)
    return err
end

function DMHasVariableBounds(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:DMHasVariableBounds,petscRealSingle),PetscErrorCode,(DM,Ptr{PetscBool}),arg1,arg2)
    return err
end

function DMHasColoring(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:DMHasColoring,petscRealSingle),PetscErrorCode,(DM,Ptr{PetscBool}),arg1,arg2)
    return err
end

function DMComputeVariableBounds(arg1::DM,arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:DMComputeVariableBounds,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function DMCreateSubDM(arg1::DM,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg5::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:DMCreateSubDM,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Int64},Ptr{IS{Float32}},Ptr{DM}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMCreateFieldDecomposition(arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}},arg4::Union{Ptr{Ptr{IS{Float32}}},StridedArray{Ptr{IS{Float32}}},Ptr{Ptr{IS{Float32}}},Ref{Ptr{IS{Float32}}}},arg5::Union{Ptr{Ptr{DM}},StridedArray{Ptr{DM}},Ptr{Ptr{DM}},Ref{Ptr{DM}}})
    err = ccall((:DMCreateFieldDecomposition,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64},Ptr{Ptr{Ptr{UInt8}}},Ptr{Ptr{IS{Float32}}},Ptr{Ptr{DM}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMCreateDomainDecomposition(arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}},arg4::Union{Ptr{Ptr{IS{Float32}}},StridedArray{Ptr{IS{Float32}}},Ptr{Ptr{IS{Float32}}},Ref{Ptr{IS{Float32}}}},arg5::Union{Ptr{Ptr{IS{Float32}}},StridedArray{Ptr{IS{Float32}}},Ptr{Ptr{IS{Float32}}},Ref{Ptr{IS{Float32}}}},arg6::Union{Ptr{Ptr{DM}},StridedArray{Ptr{DM}},Ptr{Ptr{DM}},Ref{Ptr{DM}}})
    err = ccall((:DMCreateDomainDecomposition,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64},Ptr{Ptr{Ptr{UInt8}}},Ptr{Ptr{IS{Float32}}},Ptr{Ptr{IS{Float32}}},Ptr{Ptr{DM}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMCreateDomainDecompositionScatters(arg1::DM,arg2::Integer,arg3::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}},arg4::Union{Ptr{Ptr{VecScatter{Float32}}},StridedArray{Ptr{VecScatter{Float32}}},Ptr{Ptr{VecScatter{Float32}}},Ref{Ptr{VecScatter{Float32}}}},arg5::Union{Ptr{Ptr{VecScatter{Float32}}},StridedArray{Ptr{VecScatter{Float32}}},Ptr{Ptr{VecScatter{Float32}}},Ref{Ptr{VecScatter{Float32}}}},arg6::Union{Ptr{Ptr{VecScatter{Float32}}},StridedArray{Ptr{VecScatter{Float32}}},Ptr{Ptr{VecScatter{Float32}}},Ref{Ptr{VecScatter{Float32}}}})
    err = ccall((:DMCreateDomainDecompositionScatters,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{DM},Ptr{Ptr{VecScatter{Float32}}},Ptr{Ptr{VecScatter{Float32}}},Ptr{Ptr{VecScatter{Float32}}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMGetRefineLevel(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMGetRefineLevel,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64}),arg1,arg2)
    return err
end

function DMGetCoarsenLevel(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMGetCoarsenLevel,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64}),arg1,arg2)
    return err
end

function DMFinalizePackage(arg0::Type{Float32})
    err = ccall((:DMFinalizePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function VecGetDM(arg1::Vec{Float32},arg2::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:VecGetDM,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{DM}),arg1,arg2)
    return err
end

function VecSetDM(arg1::Vec{Float32},arg2::DM)
    err = ccall((:VecSetDM,petscRealSingle),PetscErrorCode,(Vec{Float32},DM),arg1,arg2)
    return err
end

function MatGetDM(arg1::Mat{Float32},arg2::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:MatGetDM,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{DM}),arg1,arg2)
    return err
end

function MatSetDM(arg1::Mat{Float32},arg2::DM)
    err = ccall((:MatSetDM,petscRealSingle),PetscErrorCode,(Mat{Float32},DM),arg1,arg2)
    return err
end

function DMPrintCellVector(arg0::Type{Float32},arg1::Integer,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:DMPrintCellVector,petscRealSingle),PetscErrorCode,(Int64,Cstring,Int64,Ptr{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function DMPrintCellMatrix(arg0::Type{Float32},arg1::Integer,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer,arg4::Integer,arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:DMPrintCellMatrix,petscRealSingle),PetscErrorCode,(Int64,Cstring,Int64,Int64,Ptr{Float32}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPrintLocalVec(arg1::DM,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Float32,arg4::Vec{Float32})
    err = ccall((:DMPrintLocalVec,petscRealSingle),PetscErrorCode,(DM,Cstring,Float32,Vec{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function DMGetDefaultSection(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{PetscSection},StridedArray{PetscSection},Ptr{PetscSection},Ref{PetscSection}})
    err = ccall((:DMGetDefaultSection,petscRealSingle),PetscErrorCode,(DM,Ptr{PetscSection}),arg1,arg2)
    return err
end

function DMSetDefaultSection(arg0::Type{Float32},arg1::DM,arg2::PetscSection)
    err = ccall((:DMSetDefaultSection,petscRealSingle),PetscErrorCode,(DM,PetscSection),arg1,arg2)
    return err
end

function DMGetDefaultConstraints(arg1::DM,arg2::Union{Ptr{PetscSection},StridedArray{PetscSection},Ptr{PetscSection},Ref{PetscSection}},arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:DMGetDefaultConstraints,petscRealSingle),PetscErrorCode,(DM,Ptr{PetscSection},Ptr{Mat{Float32}}),arg1,arg2,arg3)
    return err
end

function DMSetDefaultConstraints(arg1::DM,arg2::PetscSection,arg3::Mat{Float32})
    err = ccall((:DMSetDefaultConstraints,petscRealSingle),PetscErrorCode,(DM,PetscSection,Mat{Float32}),arg1,arg2,arg3)
    return err
end

function DMGetDefaultGlobalSection(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{PetscSection},StridedArray{PetscSection},Ptr{PetscSection},Ref{PetscSection}})
    err = ccall((:DMGetDefaultGlobalSection,petscRealSingle),PetscErrorCode,(DM,Ptr{PetscSection}),arg1,arg2)
    return err
end

function DMSetDefaultGlobalSection(arg0::Type{Float32},arg1::DM,arg2::PetscSection)
    err = ccall((:DMSetDefaultGlobalSection,petscRealSingle),PetscErrorCode,(DM,PetscSection),arg1,arg2)
    return err
end

function DMGetDefaultSF(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{PetscSF},StridedArray{PetscSF},Ptr{PetscSF},Ref{PetscSF}})
    err = ccall((:DMGetDefaultSF,petscRealSingle),PetscErrorCode,(DM,Ptr{PetscSF}),arg1,arg2)
    return err
end

function DMSetDefaultSF(arg0::Type{Float32},arg1::DM,arg2::PetscSF)
    err = ccall((:DMSetDefaultSF,petscRealSingle),PetscErrorCode,(DM,PetscSF),arg1,arg2)
    return err
end

function DMCreateDefaultSF(arg0::Type{Float32},arg1::DM,arg2::PetscSection,arg3::PetscSection)
    err = ccall((:DMCreateDefaultSF,petscRealSingle),PetscErrorCode,(DM,PetscSection,PetscSection),arg1,arg2,arg3)
    return err
end

function DMGetPointSF(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{PetscSF},StridedArray{PetscSF},Ptr{PetscSF},Ref{PetscSF}})
    err = ccall((:DMGetPointSF,petscRealSingle),PetscErrorCode,(DM,Ptr{PetscSF}),arg1,arg2)
    return err
end

function DMSetPointSF(arg0::Type{Float32},arg1::DM,arg2::PetscSF)
    err = ccall((:DMSetPointSF,petscRealSingle),PetscErrorCode,(DM,PetscSF),arg1,arg2)
    return err
end

function DMGetOutputDM(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:DMGetOutputDM,petscRealSingle),PetscErrorCode,(DM,Ptr{DM}),arg1,arg2)
    return err
end

function DMGetOutputSequenceNumber(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:DMGetOutputSequenceNumber,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64},Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function DMSetOutputSequenceNumber(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Float32)
    err = ccall((:DMSetOutputSequenceNumber,petscRealSingle),PetscErrorCode,(DM,Int64,Float32),arg1,arg2,arg3)
    return err
end

function DMOutputSequenceLoad(arg1::DM,arg2::PetscViewer{Float32},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Integer,arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:DMOutputSequenceLoad,petscRealSingle),PetscErrorCode,(DM,PetscViewer{Float32},Cstring,Int64,Ptr{Float32}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMGetDS(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{PetscDS},StridedArray{PetscDS},Ptr{PetscDS},Ref{PetscDS}})
    err = ccall((:DMGetDS,petscRealSingle),PetscErrorCode,(DM,Ptr{PetscDS}),arg1,arg2)
    return err
end

function DMSetDS(arg0::Type{Float32},arg1::DM,arg2::PetscDS)
    err = ccall((:DMSetDS,petscRealSingle),PetscErrorCode,(DM,PetscDS),arg1,arg2)
    return err
end

function DMGetNumFields(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMGetNumFields,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64}),arg1,arg2)
    return err
end

function DMSetNumFields(arg0::Type{Float32},arg1::DM,arg2::Integer)
    err = ccall((:DMSetNumFields,petscRealSingle),PetscErrorCode,(DM,Int64),arg1,arg2)
    return err
end

function DMGetField(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{PetscObject},StridedArray{PetscObject},Ptr{PetscObject},Ref{PetscObject}})
    err = ccall((:DMGetField,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{PetscObject}),arg1,arg2,arg3)
    return err
end

function DMSetField(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::PetscObject)
    err = ccall((:DMSetField,petscRealSingle),PetscErrorCode,(DM,Int64,PetscObject),arg1,arg2,arg3)
    return err
end

#= skipping function with undefined symbols: 
 function DMInterpolationCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{DMInterpolationInfo},StridedArray{DMInterpolationInfo},Ptr{DMInterpolationInfo},Ref{DMInterpolationInfo}})
    ccall((:DMInterpolationCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{DMInterpolationInfo}),arg1,arg2)
end 
=#
#= skipping function with undefined symbols: 
 function DMInterpolationSetDim(arg0::Type{Float32},arg1::DMInterpolationInfo,arg2::Integer)
    ccall((:DMInterpolationSetDim,petscRealSingle),PetscErrorCode,(DMInterpolationInfo,Int64),arg1,arg2)
end 
=#
#= skipping function with undefined symbols: 
 function DMInterpolationGetDim(arg0::Type{Float32},arg1::DMInterpolationInfo,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMInterpolationGetDim,petscRealSingle),PetscErrorCode,(DMInterpolationInfo,Ptr{Int64}),arg1,arg2)
end 
=#
#= skipping function with undefined symbols: 
 function DMInterpolationSetDof(arg0::Type{Float32},arg1::DMInterpolationInfo,arg2::Integer)
    ccall((:DMInterpolationSetDof,petscRealSingle),PetscErrorCode,(DMInterpolationInfo,Int64),arg1,arg2)
end 
=#
#= skipping function with undefined symbols: 
 function DMInterpolationGetDof(arg0::Type{Float32},arg1::DMInterpolationInfo,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMInterpolationGetDof,petscRealSingle),PetscErrorCode,(DMInterpolationInfo,Ptr{Int64}),arg1,arg2)
end 
=#
#= skipping function with undefined symbols: 
 function DMInterpolationAddPoints(arg0::Type{Float32},arg1::DMInterpolationInfo,arg2::Integer,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:DMInterpolationAddPoints,petscRealSingle),PetscErrorCode,(DMInterpolationInfo,Int64,Ptr{Float32}),arg1,arg2,arg3)
end 
=#
#= skipping function with undefined symbols: 
 function DMInterpolationSetUp(arg0::Type{Float32},arg1::DMInterpolationInfo,arg2::DM,arg3::PetscBool)
    ccall((:DMInterpolationSetUp,petscRealSingle),PetscErrorCode,(DMInterpolationInfo,DM,PetscBool),arg1,arg2,arg3)
end 
=#
#= skipping function with undefined symbols: 
 function DMInterpolationGetCoordinates(arg1::DMInterpolationInfo,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    ccall((:DMInterpolationGetCoordinates,petscRealSingle),PetscErrorCode,(DMInterpolationInfo,Ptr{Vec{Float32}}),arg1,arg2)
end 
=#
#= skipping function with undefined symbols: 
 function DMInterpolationGetVector(arg1::DMInterpolationInfo,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    ccall((:DMInterpolationGetVector,petscRealSingle),PetscErrorCode,(DMInterpolationInfo,Ptr{Vec{Float32}}),arg1,arg2)
end 
=#
#= skipping function with undefined symbols: 
 function DMInterpolationRestoreVector(arg1::DMInterpolationInfo,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    ccall((:DMInterpolationRestoreVector,petscRealSingle),PetscErrorCode,(DMInterpolationInfo,Ptr{Vec{Float32}}),arg1,arg2)
end 
=#
#= skipping function with undefined symbols: 
 function DMInterpolationEvaluate(arg1::DMInterpolationInfo,arg2::DM,arg3::Vec{Float32},arg4::Vec{Float32})
    ccall((:DMInterpolationEvaluate,petscRealSingle),PetscErrorCode,(DMInterpolationInfo,DM,Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4)
end 
=#
#= skipping function with undefined symbols: 
 function DMInterpolationDestroy(arg0::Type{Float32},arg1::Union{Ptr{DMInterpolationInfo},StridedArray{DMInterpolationInfo},Ptr{DMInterpolationInfo},Ref{DMInterpolationInfo}})
    ccall((:DMInterpolationDestroy,petscRealSingle),PetscErrorCode,(Ptr{DMInterpolationInfo},),arg1)
end 
=#
function PFCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Union{Ptr{PF},StridedArray{PF},Ptr{PF},Ref{PF}})
    err = ccall((:PFCreate,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Ptr{PF}),arg1,arg2,arg3,arg4)
    return err
end

function PFSetType(arg0::Type{Float32},arg1::PF,arg2::PFType,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PFSetType,petscRealSingle),PetscErrorCode,(PF,Cstring,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function PFSet(arg0::Type{Float32},arg1::PF,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PFSet,petscRealSingle),PetscErrorCode,(PF,Ptr{Void},Ptr{Void},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PFApply(arg0::Type{Float32},arg1::PF,arg2::Integer,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:PFApply,petscRealSingle),PetscErrorCode,(PF,Int64,Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function PFApplyVec(arg1::PF,arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:PFApplyVec,petscRealSingle),PetscErrorCode,(PF,Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function PFInitializePackage(arg0::Type{Float32})
    err = ccall((:PFInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function PFRegister(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PFRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function PFDestroy(arg0::Type{Float32},arg1::Union{Ptr{PF},StridedArray{PF},Ptr{PF},Ref{PF}})
    err = ccall((:PFDestroy,petscRealSingle),PetscErrorCode,(Ptr{PF},),arg1)
    return err
end

function PFSetFromOptions(arg0::Type{Float32},arg1::PF)
    err = ccall((:PFSetFromOptions,petscRealSingle),PetscErrorCode,(PF,),arg1)
    return err
end

function PFGetType(arg0::Type{Float32},arg1::PF,arg2::Union{Ptr{PFType},StridedArray{PFType},Ptr{PFType},Ref{PFType}})
    (arg2_,tmp) = symbol_get_before(arg2)
    err = ccall((:PFGetType,petscRealSingle),PetscErrorCode,(PF,Ptr{Ptr{UInt8}}),arg1,arg2_)
    symbol_get_after(arg2_,arg2)
    return err
end

function PFView(arg1::PF,arg2::PetscViewer{Float32})
    err = ccall((:PFView,petscRealSingle),PetscErrorCode,(PF,PetscViewer{Float32}),arg1,arg2)
    return err
end

function PFViewFromOptions(arg0::Type{Float32},A::PF,obj::PetscObject,name::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PFViewFromOptions,petscRealSingle),PetscErrorCode,(PF,PetscObject,Cstring),A,obj,name)
    return err
end

function AOInitializePackage(arg0::Type{Float32})
    err = ccall((:AOInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function AOCreate(arg1::MPI_Comm,arg2::Union{Ptr{AO{Float32}},StridedArray{AO{Float32}},Ptr{AO{Float32}},Ref{AO{Float32}}})
    err = ccall((:AOCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{AO{Float32}}),arg1,arg2)
    return err
end

function AOSetIS(arg1::AO{Float32},arg2::IS{Float32},arg3::IS{Float32})
    err = ccall((:AOSetIS,petscRealSingle),PetscErrorCode,(AO{Float32},IS{Float32},IS{Float32}),arg1,arg2,arg3)
    return err
end

function AOSetFromOptions(arg1::AO{Float32})
    err = ccall((:AOSetFromOptions,petscRealSingle),PetscErrorCode,(AO{Float32},),arg1)
    return err
end

function AOCreateBasic(arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{AO{Float32}},StridedArray{AO{Float32}},Ptr{AO{Float32}},Ref{AO{Float32}}})
    err = ccall((:AOCreateBasic,petscRealSingle),PetscErrorCode,(comm_type,Int64,Ptr{Int64},Ptr{Int64},Ptr{AO{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function AOCreateBasicIS(arg1::IS{Float32},arg2::IS{Float32},arg3::Union{Ptr{AO{Float32}},StridedArray{AO{Float32}},Ptr{AO{Float32}},Ref{AO{Float32}}})
    err = ccall((:AOCreateBasicIS,petscRealSingle),PetscErrorCode,(IS{Float32},IS{Float32},Ptr{AO{Float32}}),arg1,arg2,arg3)
    return err
end

function AOCreateMemoryScalable(arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{AO{Float32}},StridedArray{AO{Float32}},Ptr{AO{Float32}},Ref{AO{Float32}}})
    err = ccall((:AOCreateMemoryScalable,petscRealSingle),PetscErrorCode,(comm_type,Int64,Ptr{Int64},Ptr{Int64},Ptr{AO{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function AOCreateMemoryScalableIS(arg1::IS{Float32},arg2::IS{Float32},arg3::Union{Ptr{AO{Float32}},StridedArray{AO{Float32}},Ptr{AO{Float32}},Ref{AO{Float32}}})
    err = ccall((:AOCreateMemoryScalableIS,petscRealSingle),PetscErrorCode,(IS{Float32},IS{Float32},Ptr{AO{Float32}}),arg1,arg2,arg3)
    return err
end

function AOCreateMapping(arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{AO{Float32}},StridedArray{AO{Float32}},Ptr{AO{Float32}},Ref{AO{Float32}}})
    err = ccall((:AOCreateMapping,petscRealSingle),PetscErrorCode,(comm_type,Int64,Ptr{Int64},Ptr{Int64},Ptr{AO{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function AOCreateMappingIS(arg1::IS{Float32},arg2::IS{Float32},arg3::Union{Ptr{AO{Float32}},StridedArray{AO{Float32}},Ptr{AO{Float32}},Ref{AO{Float32}}})
    err = ccall((:AOCreateMappingIS,petscRealSingle),PetscErrorCode,(IS{Float32},IS{Float32},Ptr{AO{Float32}}),arg1,arg2,arg3)
    return err
end

function AOView(arg1::AO{Float32},arg2::PetscViewer{Float32})
    err = ccall((:AOView,petscRealSingle),PetscErrorCode,(AO{Float32},PetscViewer{Float32}),arg1,arg2)
    return err
end

function AOViewFromOptions(A::AO{Float32},obj::PetscObject,name::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:AOViewFromOptions,petscRealSingle),PetscErrorCode,(AO{Float32},PetscObject,Cstring),A,obj,name)
    return err
end

function AODestroy(arg1::Union{Ptr{AO{Float32}},StridedArray{AO{Float32}},Ptr{AO{Float32}},Ref{AO{Float32}}})
    err = ccall((:AODestroy,petscRealSingle),PetscErrorCode,(Ptr{AO{Float32}},),arg1)
    return err
end

function AOSetType(arg1::AO{Float32},arg2::AOType)
    err = ccall((:AOSetType,petscRealSingle),PetscErrorCode,(AO{Float32},Cstring),arg1,arg2)
    return err
end

function AOGetType(arg1::AO{Float32},arg2::Union{Ptr{AOType},StridedArray{AOType},Ptr{AOType},Ref{AOType}})
    (arg2_,tmp) = symbol_get_before(arg2)
    err = ccall((:AOGetType,petscRealSingle),PetscErrorCode,(AO{Float32},Ptr{Ptr{UInt8}}),arg1,arg2_)
    symbol_get_after(arg2_,arg2)
    return err
end

function AORegister(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:AORegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function AOPetscToApplication(arg1::AO{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:AOPetscToApplication,petscRealSingle),PetscErrorCode,(AO{Float32},Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function AOApplicationToPetsc(arg1::AO{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:AOApplicationToPetsc,petscRealSingle),PetscErrorCode,(AO{Float32},Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function AOPetscToApplicationIS(arg1::AO{Float32},arg2::IS{Float32})
    err = ccall((:AOPetscToApplicationIS,petscRealSingle),PetscErrorCode,(AO{Float32},IS{Float32}),arg1,arg2)
    return err
end

function AOApplicationToPetscIS(arg1::AO{Float32},arg2::IS{Float32})
    err = ccall((:AOApplicationToPetscIS,petscRealSingle),PetscErrorCode,(AO{Float32},IS{Float32}),arg1,arg2)
    return err
end

function AOPetscToApplicationPermuteInt(arg1::AO{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:AOPetscToApplicationPermuteInt,petscRealSingle),PetscErrorCode,(AO{Float32},Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function AOApplicationToPetscPermuteInt(arg1::AO{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:AOApplicationToPetscPermuteInt,petscRealSingle),PetscErrorCode,(AO{Float32},Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function AOPetscToApplicationPermuteReal(arg1::AO{Float32},arg2::Integer,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:AOPetscToApplicationPermuteReal,petscRealSingle),PetscErrorCode,(AO{Float32},Int64,Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function AOApplicationToPetscPermuteReal(arg1::AO{Float32},arg2::Integer,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:AOApplicationToPetscPermuteReal,petscRealSingle),PetscErrorCode,(AO{Float32},Int64,Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function AOMappingHasApplicationIndex(arg1::AO{Float32},arg2::Integer,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:AOMappingHasApplicationIndex,petscRealSingle),PetscErrorCode,(AO{Float32},Int64,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function AOMappingHasPetscIndex(arg1::AO{Float32},arg2::Integer,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:AOMappingHasPetscIndex,petscRealSingle),PetscErrorCode,(AO{Float32},Int64,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function PetscQuadratureCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{PetscQuadrature},StridedArray{PetscQuadrature},Ptr{PetscQuadrature},Ref{PetscQuadrature}})
    err = ccall((:PetscQuadratureCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{PetscQuadrature}),arg1,arg2)
    return err
end

function PetscQuadratureDuplicate(arg0::Type{Float32},arg1::PetscQuadrature,arg2::Union{Ptr{PetscQuadrature},StridedArray{PetscQuadrature},Ptr{PetscQuadrature},Ref{PetscQuadrature}})
    err = ccall((:PetscQuadratureDuplicate,petscRealSingle),PetscErrorCode,(PetscQuadrature,Ptr{PetscQuadrature}),arg1,arg2)
    return err
end

function PetscQuadratureGetOrder(arg0::Type{Float32},arg1::PetscQuadrature,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscQuadratureGetOrder,petscRealSingle),PetscErrorCode,(PetscQuadrature,Ptr{Int64}),arg1,arg2)
    return err
end

function PetscQuadratureSetOrder(arg0::Type{Float32},arg1::PetscQuadrature,arg2::Integer)
    err = ccall((:PetscQuadratureSetOrder,petscRealSingle),PetscErrorCode,(PetscQuadrature,Int64),arg1,arg2)
    return err
end

function PetscQuadratureGetData(arg0::Type{Float32},arg1::PetscQuadrature,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg5::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:PetscQuadratureGetData,petscRealSingle),PetscErrorCode,(PetscQuadrature,Ptr{Int64},Ptr{Int64},Ptr{Ptr{Float32}},Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscQuadratureSetData(arg0::Type{Float32},arg1::PetscQuadrature,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:PetscQuadratureSetData,petscRealSingle),PetscErrorCode,(PetscQuadrature,Int64,Int64,Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscQuadratureView(arg1::PetscQuadrature,arg2::PetscViewer{Float32})
    err = ccall((:PetscQuadratureView,petscRealSingle),PetscErrorCode,(PetscQuadrature,PetscViewer{Float32}),arg1,arg2)
    return err
end

function PetscQuadratureDestroy(arg0::Type{Float32},arg1::Union{Ptr{PetscQuadrature},StridedArray{PetscQuadrature},Ptr{PetscQuadrature},Ref{PetscQuadrature}})
    err = ccall((:PetscQuadratureDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscQuadrature},),arg1)
    return err
end

function PetscQuadratureExpandComposite(arg0::Type{Float32},arg1::PetscQuadrature,arg2::Integer,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{PetscQuadrature},StridedArray{PetscQuadrature},Ptr{PetscQuadrature},Ref{PetscQuadrature}})
    err = ccall((:PetscQuadratureExpandComposite,petscRealSingle),PetscErrorCode,(PetscQuadrature,Int64,Ptr{Float32},Ptr{Float32},Ptr{PetscQuadrature}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDTLegendreEval(arg0::Type{Float32},arg1::Integer,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:PetscDTLegendreEval,petscRealSingle),PetscErrorCode,(Int64,Ptr{Float32},Int64,Ptr{Int64},Ptr{Float32},Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function PetscDTGaussQuadrature(arg0::Type{Float32},arg1::Integer,arg2::Float32,arg3::Float32,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:PetscDTGaussQuadrature,petscRealSingle),PetscErrorCode,(Int64,Float32,Float32,Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDTReconstructPoly(arg0::Type{Float32},arg1::Integer,arg2::Integer,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Integer,arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:PetscDTReconstructPoly,petscRealSingle),PetscErrorCode,(Int64,Int64,Ptr{Float32},Int64,Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscDTGaussTensorQuadrature(arg0::Type{Float32},arg1::Integer,arg2::Integer,arg3::Float32,arg4::Float32,arg5::Union{Ptr{PetscQuadrature},StridedArray{PetscQuadrature},Ptr{PetscQuadrature},Ref{PetscQuadrature}})
    err = ccall((:PetscDTGaussTensorQuadrature,petscRealSingle),PetscErrorCode,(Int64,Int64,Float32,Float32,Ptr{PetscQuadrature}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDTGaussJacobiQuadrature(arg0::Type{Float32},arg1::Integer,arg2::Integer,arg3::Float32,arg4::Float32,arg5::Union{Ptr{PetscQuadrature},StridedArray{PetscQuadrature},Ptr{PetscQuadrature},Ref{PetscQuadrature}})
    err = ccall((:PetscDTGaussJacobiQuadrature,petscRealSingle),PetscErrorCode,(Int64,Int64,Float32,Float32,Ptr{PetscQuadrature}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscFEInitializePackage(arg0::Type{Float32})
    err = ccall((:PetscFEInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscSpaceCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{PetscSpace},StridedArray{PetscSpace},Ptr{PetscSpace},Ref{PetscSpace}})
    err = ccall((:PetscSpaceCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{PetscSpace}),arg1,arg2)
    return err
end

function PetscSpaceDestroy(arg0::Type{Float32},arg1::Union{Ptr{PetscSpace},StridedArray{PetscSpace},Ptr{PetscSpace},Ref{PetscSpace}})
    err = ccall((:PetscSpaceDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscSpace},),arg1)
    return err
end

function PetscSpaceSetType(arg0::Type{Float32},arg1::PetscSpace,arg2::PetscSpaceType)
    err = ccall((:PetscSpaceSetType,petscRealSingle),PetscErrorCode,(PetscSpace,Cstring),arg1,arg2)
    return err
end

function PetscSpaceGetType(arg0::Type{Float32},arg1::PetscSpace,arg2::Union{Ptr{PetscSpaceType},StridedArray{PetscSpaceType},Ptr{PetscSpaceType},Ref{PetscSpaceType}})
    (arg2_,tmp) = symbol_get_before(arg2)
    err = ccall((:PetscSpaceGetType,petscRealSingle),PetscErrorCode,(PetscSpace,Ptr{Ptr{UInt8}}),arg1,arg2_)
    symbol_get_after(arg2_,arg2)
    return err
end

function PetscSpaceSetUp(arg0::Type{Float32},arg1::PetscSpace)
    err = ccall((:PetscSpaceSetUp,petscRealSingle),PetscErrorCode,(PetscSpace,),arg1)
    return err
end

function PetscSpaceSetFromOptions(arg0::Type{Float32},arg1::PetscSpace)
    err = ccall((:PetscSpaceSetFromOptions,petscRealSingle),PetscErrorCode,(PetscSpace,),arg1)
    return err
end

function PetscSpaceViewFromOptions(arg0::Type{Float32},A::PetscSpace,B::PetscObject,name::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscSpaceViewFromOptions,petscRealSingle),PetscErrorCode,(PetscSpace,PetscObject,Cstring),A,B,name)
    return err
end

function PetscSpaceView(arg1::PetscSpace,arg2::PetscViewer{Float32})
    err = ccall((:PetscSpaceView,petscRealSingle),PetscErrorCode,(PetscSpace,PetscViewer{Float32}),arg1,arg2)
    return err
end

function PetscSpaceRegister(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscSpaceRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function PetscSpaceRegisterDestroy(arg0::Type{Float32})
    err = ccall((:PetscSpaceRegisterDestroy,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscSpaceGetDimension(arg0::Type{Float32},arg1::PetscSpace,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSpaceGetDimension,petscRealSingle),PetscErrorCode,(PetscSpace,Ptr{Int64}),arg1,arg2)
    return err
end

function PetscSpaceSetOrder(arg0::Type{Float32},arg1::PetscSpace,arg2::Integer)
    err = ccall((:PetscSpaceSetOrder,petscRealSingle),PetscErrorCode,(PetscSpace,Int64),arg1,arg2)
    return err
end

function PetscSpaceGetOrder(arg0::Type{Float32},arg1::PetscSpace,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSpaceGetOrder,petscRealSingle),PetscErrorCode,(PetscSpace,Ptr{Int64}),arg1,arg2)
    return err
end

function PetscSpaceEvaluate(arg0::Type{Float32},arg1::PetscSpace,arg2::Integer,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:PetscSpaceEvaluate,petscRealSingle),PetscErrorCode,(PetscSpace,Int64,Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscSpacePolynomialSetNumVariables(arg0::Type{Float32},arg1::PetscSpace,arg2::Integer)
    err = ccall((:PetscSpacePolynomialSetNumVariables,petscRealSingle),PetscErrorCode,(PetscSpace,Int64),arg1,arg2)
    return err
end

function PetscSpacePolynomialGetNumVariables(arg0::Type{Float32},arg1::PetscSpace,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSpacePolynomialGetNumVariables,petscRealSingle),PetscErrorCode,(PetscSpace,Ptr{Int64}),arg1,arg2)
    return err
end

function PetscSpacePolynomialSetSymmetric(arg0::Type{Float32},arg1::PetscSpace,arg2::PetscBool)
    err = ccall((:PetscSpacePolynomialSetSymmetric,petscRealSingle),PetscErrorCode,(PetscSpace,PetscBool),arg1,arg2)
    return err
end

function PetscSpacePolynomialGetSymmetric(arg0::Type{Float32},arg1::PetscSpace,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscSpacePolynomialGetSymmetric,petscRealSingle),PetscErrorCode,(PetscSpace,Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscSpacePolynomialSetTensor(arg0::Type{Float32},arg1::PetscSpace,arg2::PetscBool)
    err = ccall((:PetscSpacePolynomialSetTensor,petscRealSingle),PetscErrorCode,(PetscSpace,PetscBool),arg1,arg2)
    return err
end

function PetscSpacePolynomialGetTensor(arg0::Type{Float32},arg1::PetscSpace,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscSpacePolynomialGetTensor,petscRealSingle),PetscErrorCode,(PetscSpace,Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscSpaceDGSetQuadrature(arg0::Type{Float32},arg1::PetscSpace,arg2::PetscQuadrature)
    err = ccall((:PetscSpaceDGSetQuadrature,petscRealSingle),PetscErrorCode,(PetscSpace,PetscQuadrature),arg1,arg2)
    return err
end

function PetscSpaceDGGetQuadrature(arg0::Type{Float32},arg1::PetscSpace,arg2::Union{Ptr{PetscQuadrature},StridedArray{PetscQuadrature},Ptr{PetscQuadrature},Ref{PetscQuadrature}})
    err = ccall((:PetscSpaceDGGetQuadrature,petscRealSingle),PetscErrorCode,(PetscSpace,Ptr{PetscQuadrature}),arg1,arg2)
    return err
end

function PetscDualSpaceCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{PetscDualSpace},StridedArray{PetscDualSpace},Ptr{PetscDualSpace},Ref{PetscDualSpace}})
    err = ccall((:PetscDualSpaceCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{PetscDualSpace}),arg1,arg2)
    return err
end

function PetscDualSpaceDestroy(arg0::Type{Float32},arg1::Union{Ptr{PetscDualSpace},StridedArray{PetscDualSpace},Ptr{PetscDualSpace},Ref{PetscDualSpace}})
    err = ccall((:PetscDualSpaceDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscDualSpace},),arg1)
    return err
end

function PetscDualSpaceDuplicate(arg0::Type{Float32},arg1::PetscDualSpace,arg2::Union{Ptr{PetscDualSpace},StridedArray{PetscDualSpace},Ptr{PetscDualSpace},Ref{PetscDualSpace}})
    err = ccall((:PetscDualSpaceDuplicate,petscRealSingle),PetscErrorCode,(PetscDualSpace,Ptr{PetscDualSpace}),arg1,arg2)
    return err
end

function PetscDualSpaceSetType(arg0::Type{Float32},arg1::PetscDualSpace,arg2::PetscDualSpaceType)
    err = ccall((:PetscDualSpaceSetType,petscRealSingle),PetscErrorCode,(PetscDualSpace,Cstring),arg1,arg2)
    return err
end

function PetscDualSpaceGetType(arg0::Type{Float32},arg1::PetscDualSpace,arg2::Union{Ptr{PetscDualSpaceType},StridedArray{PetscDualSpaceType},Ptr{PetscDualSpaceType},Ref{PetscDualSpaceType}})
    (arg2_,tmp) = symbol_get_before(arg2)
    err = ccall((:PetscDualSpaceGetType,petscRealSingle),PetscErrorCode,(PetscDualSpace,Ptr{Ptr{UInt8}}),arg1,arg2_)
    symbol_get_after(arg2_,arg2)
    return err
end

function PetscDualSpaceSetUp(arg0::Type{Float32},arg1::PetscDualSpace)
    err = ccall((:PetscDualSpaceSetUp,petscRealSingle),PetscErrorCode,(PetscDualSpace,),arg1)
    return err
end

function PetscDualSpaceSetFromOptions(arg0::Type{Float32},arg1::PetscDualSpace)
    err = ccall((:PetscDualSpaceSetFromOptions,petscRealSingle),PetscErrorCode,(PetscDualSpace,),arg1)
    return err
end

function PetscDualSpaceViewFromOptions(arg0::Type{Float32},A::PetscDualSpace,B::PetscObject,name::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscDualSpaceViewFromOptions,petscRealSingle),PetscErrorCode,(PetscDualSpace,PetscObject,Cstring),A,B,name)
    return err
end

function PetscDualSpaceView(arg1::PetscDualSpace,arg2::PetscViewer{Float32})
    err = ccall((:PetscDualSpaceView,petscRealSingle),PetscErrorCode,(PetscDualSpace,PetscViewer{Float32}),arg1,arg2)
    return err
end

function PetscDualSpaceRegister(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscDualSpaceRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function PetscDualSpaceRegisterDestroy(arg0::Type{Float32})
    err = ccall((:PetscDualSpaceRegisterDestroy,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscDualSpaceGetDimension(arg0::Type{Float32},arg1::PetscDualSpace,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscDualSpaceGetDimension,petscRealSingle),PetscErrorCode,(PetscDualSpace,Ptr{Int64}),arg1,arg2)
    return err
end

function PetscDualSpaceSetOrder(arg0::Type{Float32},arg1::PetscDualSpace,arg2::Integer)
    err = ccall((:PetscDualSpaceSetOrder,petscRealSingle),PetscErrorCode,(PetscDualSpace,Int64),arg1,arg2)
    return err
end

function PetscDualSpaceGetOrder(arg0::Type{Float32},arg1::PetscDualSpace,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscDualSpaceGetOrder,petscRealSingle),PetscErrorCode,(PetscDualSpace,Ptr{Int64}),arg1,arg2)
    return err
end

function PetscDualSpaceSetDM(arg0::Type{Float32},arg1::PetscDualSpace,arg2::DM)
    err = ccall((:PetscDualSpaceSetDM,petscRealSingle),PetscErrorCode,(PetscDualSpace,DM),arg1,arg2)
    return err
end

function PetscDualSpaceGetDM(arg0::Type{Float32},arg1::PetscDualSpace,arg2::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:PetscDualSpaceGetDM,petscRealSingle),PetscErrorCode,(PetscDualSpace,Ptr{DM}),arg1,arg2)
    return err
end

function PetscDualSpaceGetFunctional(arg0::Type{Float32},arg1::PetscDualSpace,arg2::Integer,arg3::Union{Ptr{PetscQuadrature},StridedArray{PetscQuadrature},Ptr{PetscQuadrature},Ref{PetscQuadrature}})
    err = ccall((:PetscDualSpaceGetFunctional,petscRealSingle),PetscErrorCode,(PetscDualSpace,Int64,Ptr{PetscQuadrature}),arg1,arg2,arg3)
    return err
end

function PetscDualSpaceCreateReferenceCell(arg0::Type{Float32},arg1::PetscDualSpace,arg2::Integer,arg3::PetscBool,arg4::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:PetscDualSpaceCreateReferenceCell,petscRealSingle),PetscErrorCode,(PetscDualSpace,Int64,PetscBool,Ptr{DM}),arg1,arg2,arg3,arg4)
    return err
end

#= skipping function with undefined symbols: 
 function PetscDualSpaceApply(arg0::Type{Float32},arg1::PetscDualSpace,arg2::Integer,arg3::Union{Ptr{PetscFECellGeom},StridedArray{PetscFECellGeom},Ptr{PetscFECellGeom},Ref{PetscFECellGeom}},arg4::Integer,arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg7::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:PetscDualSpaceApply,petscRealSingle),PetscErrorCode,(PetscDualSpace,Int64,Ptr{PetscFECellGeom},Int64,Ptr{Void},Ptr{Void},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end 
=#
function PetscDualSpaceLagrangeGetContinuity(arg0::Type{Float32},arg1::PetscDualSpace,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscDualSpaceLagrangeGetContinuity,petscRealSingle),PetscErrorCode,(PetscDualSpace,Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscDualSpaceLagrangeSetContinuity(arg0::Type{Float32},arg1::PetscDualSpace,arg2::PetscBool)
    err = ccall((:PetscDualSpaceLagrangeSetContinuity,petscRealSingle),PetscErrorCode,(PetscDualSpace,PetscBool),arg1,arg2)
    return err
end

function PetscDualSpaceGetHeightSubspace(arg0::Type{Float32},arg1::PetscDualSpace,arg2::Integer,arg3::Union{Ptr{PetscDualSpace},StridedArray{PetscDualSpace},Ptr{PetscDualSpace},Ref{PetscDualSpace}})
    err = ccall((:PetscDualSpaceGetHeightSubspace,petscRealSingle),PetscErrorCode,(PetscDualSpace,Int64,Ptr{PetscDualSpace}),arg1,arg2,arg3)
    return err
end

function PetscDualSpaceSimpleSetDimension(arg0::Type{Float32},arg1::PetscDualSpace,arg2::Integer)
    err = ccall((:PetscDualSpaceSimpleSetDimension,petscRealSingle),PetscErrorCode,(PetscDualSpace,Int64),arg1,arg2)
    return err
end

function PetscDualSpaceSimpleSetFunctional(arg0::Type{Float32},arg1::PetscDualSpace,arg2::Integer,arg3::PetscQuadrature)
    err = ccall((:PetscDualSpaceSimpleSetFunctional,petscRealSingle),PetscErrorCode,(PetscDualSpace,Int64,PetscQuadrature),arg1,arg2,arg3)
    return err
end

function PetscFECreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{PetscFE},StridedArray{PetscFE},Ptr{PetscFE},Ref{PetscFE}})
    err = ccall((:PetscFECreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{PetscFE}),arg1,arg2)
    return err
end

function PetscFEDestroy(arg0::Type{Float32},arg1::Union{Ptr{PetscFE},StridedArray{PetscFE},Ptr{PetscFE},Ref{PetscFE}})
    err = ccall((:PetscFEDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscFE},),arg1)
    return err
end

function PetscFESetType(arg0::Type{Float32},arg1::PetscFE,arg2::PetscFEType)
    err = ccall((:PetscFESetType,petscRealSingle),PetscErrorCode,(PetscFE,Cstring),arg1,arg2)
    return err
end

function PetscFEGetType(arg0::Type{Float32},arg1::PetscFE,arg2::Union{Ptr{PetscFEType},StridedArray{PetscFEType},Ptr{PetscFEType},Ref{PetscFEType}})
    (arg2_,tmp) = symbol_get_before(arg2)
    err = ccall((:PetscFEGetType,petscRealSingle),PetscErrorCode,(PetscFE,Ptr{Ptr{UInt8}}),arg1,arg2_)
    symbol_get_after(arg2_,arg2)
    return err
end

function PetscFESetUp(arg0::Type{Float32},arg1::PetscFE)
    err = ccall((:PetscFESetUp,petscRealSingle),PetscErrorCode,(PetscFE,),arg1)
    return err
end

function PetscFESetFromOptions(arg0::Type{Float32},arg1::PetscFE)
    err = ccall((:PetscFESetFromOptions,petscRealSingle),PetscErrorCode,(PetscFE,),arg1)
    return err
end

function PetscFEViewFromOptions(arg0::Type{Float32},A::PetscFE,B::PetscObject,name::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscFEViewFromOptions,petscRealSingle),PetscErrorCode,(PetscFE,PetscObject,Cstring),A,B,name)
    return err
end

function PetscFEView(arg1::PetscFE,arg2::PetscViewer{Float32})
    err = ccall((:PetscFEView,petscRealSingle),PetscErrorCode,(PetscFE,PetscViewer{Float32}),arg1,arg2)
    return err
end

function PetscFERegister(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscFERegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function PetscFERegisterDestroy(arg0::Type{Float32})
    err = ccall((:PetscFERegisterDestroy,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscFECreateDefault(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Integer,arg4::PetscBool,arg5::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg6::Integer,arg7::Union{Ptr{PetscFE},StridedArray{PetscFE},Ptr{PetscFE},Ref{PetscFE}})
    err = ccall((:PetscFECreateDefault,petscRealSingle),PetscErrorCode,(DM,Int64,Int64,PetscBool,Cstring,Int64,Ptr{PetscFE}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function PetscFEGetDimension(arg0::Type{Float32},arg1::PetscFE,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscFEGetDimension,petscRealSingle),PetscErrorCode,(PetscFE,Ptr{Int64}),arg1,arg2)
    return err
end

function PetscFEGetSpatialDimension(arg0::Type{Float32},arg1::PetscFE,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscFEGetSpatialDimension,petscRealSingle),PetscErrorCode,(PetscFE,Ptr{Int64}),arg1,arg2)
    return err
end

function PetscFESetNumComponents(arg0::Type{Float32},arg1::PetscFE,arg2::Integer)
    err = ccall((:PetscFESetNumComponents,petscRealSingle),PetscErrorCode,(PetscFE,Int64),arg1,arg2)
    return err
end

function PetscFEGetNumComponents(arg0::Type{Float32},arg1::PetscFE,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscFEGetNumComponents,petscRealSingle),PetscErrorCode,(PetscFE,Ptr{Int64}),arg1,arg2)
    return err
end

function PetscFEGetTileSizes(arg0::Type{Float32},arg1::PetscFE,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscFEGetTileSizes,petscRealSingle),PetscErrorCode,(PetscFE,Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscFESetTileSizes(arg0::Type{Float32},arg1::PetscFE,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer)
    err = ccall((:PetscFESetTileSizes,petscRealSingle),PetscErrorCode,(PetscFE,Int64,Int64,Int64,Int64),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscFESetBasisSpace(arg0::Type{Float32},arg1::PetscFE,arg2::PetscSpace)
    err = ccall((:PetscFESetBasisSpace,petscRealSingle),PetscErrorCode,(PetscFE,PetscSpace),arg1,arg2)
    return err
end

function PetscFEGetBasisSpace(arg0::Type{Float32},arg1::PetscFE,arg2::Union{Ptr{PetscSpace},StridedArray{PetscSpace},Ptr{PetscSpace},Ref{PetscSpace}})
    err = ccall((:PetscFEGetBasisSpace,petscRealSingle),PetscErrorCode,(PetscFE,Ptr{PetscSpace}),arg1,arg2)
    return err
end

function PetscFESetDualSpace(arg0::Type{Float32},arg1::PetscFE,arg2::PetscDualSpace)
    err = ccall((:PetscFESetDualSpace,petscRealSingle),PetscErrorCode,(PetscFE,PetscDualSpace),arg1,arg2)
    return err
end

function PetscFEGetDualSpace(arg0::Type{Float32},arg1::PetscFE,arg2::Union{Ptr{PetscDualSpace},StridedArray{PetscDualSpace},Ptr{PetscDualSpace},Ref{PetscDualSpace}})
    err = ccall((:PetscFEGetDualSpace,petscRealSingle),PetscErrorCode,(PetscFE,Ptr{PetscDualSpace}),arg1,arg2)
    return err
end

function PetscFESetQuadrature(arg0::Type{Float32},arg1::PetscFE,arg2::PetscQuadrature)
    err = ccall((:PetscFESetQuadrature,petscRealSingle),PetscErrorCode,(PetscFE,PetscQuadrature),arg1,arg2)
    return err
end

function PetscFEGetQuadrature(arg0::Type{Float32},arg1::PetscFE,arg2::Union{Ptr{PetscQuadrature},StridedArray{PetscQuadrature},Ptr{PetscQuadrature},Ref{PetscQuadrature}})
    err = ccall((:PetscFEGetQuadrature,petscRealSingle),PetscErrorCode,(PetscFE,Ptr{PetscQuadrature}),arg1,arg2)
    return err
end

function PetscFEGetNumDof(arg0::Type{Float32},arg1::PetscFE,arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:PetscFEGetNumDof,petscRealSingle),PetscErrorCode,(PetscFE,Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function PetscFEGetDefaultTabulation(arg0::Type{Float32},arg1::PetscFE,arg2::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg3::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg4::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:PetscFEGetDefaultTabulation,petscRealSingle),PetscErrorCode,(PetscFE,Ptr{Ptr{Float32}},Ptr{Ptr{Float32}},Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscFEGetFaceTabulation(arg0::Type{Float32},arg1::PetscFE,arg2::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:PetscFEGetFaceTabulation,petscRealSingle),PetscErrorCode,(PetscFE,Ptr{Ptr{Float32}}),arg1,arg2)
    return err
end

function PetscFEGetTabulation(arg0::Type{Float32},arg1::PetscFE,arg2::Integer,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg5::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg6::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:PetscFEGetTabulation,petscRealSingle),PetscErrorCode,(PetscFE,Int64,Ptr{Float32},Ptr{Ptr{Float32}},Ptr{Ptr{Float32}},Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscFERestoreTabulation(arg0::Type{Float32},arg1::PetscFE,arg2::Integer,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg5::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg6::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:PetscFERestoreTabulation,petscRealSingle),PetscErrorCode,(PetscFE,Int64,Ptr{Float32},Ptr{Ptr{Float32}},Ptr{Ptr{Float32}},Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscFERefine(arg0::Type{Float32},arg1::PetscFE,arg2::Union{Ptr{PetscFE},StridedArray{PetscFE},Ptr{PetscFE},Ref{PetscFE}})
    err = ccall((:PetscFERefine,petscRealSingle),PetscErrorCode,(PetscFE,Ptr{PetscFE}),arg1,arg2)
    return err
end

#= skipping function with undefined symbols: 
 function PetscFEIntegrate(arg0::Type{Float32},arg1::PetscFE,arg2::PetscDS,arg3::Integer,arg4::Integer,arg5::Union{Ptr{PetscFECellGeom},StridedArray{PetscFECellGeom},Ptr{PetscFECellGeom},Ref{PetscFECellGeom}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::PetscDS,arg8::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg9::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:PetscFEIntegrate,petscRealSingle),PetscErrorCode,(PetscFE,PetscDS,Int64,Int64,Ptr{PetscFECellGeom},Ptr{Float32},PetscDS,Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
end 
=#
#= skipping function with undefined symbols: 
 function PetscFEIntegrateResidual(arg0::Type{Float32},arg1::PetscFE,arg2::PetscDS,arg3::Integer,arg4::Integer,arg5::Union{Ptr{PetscFECellGeom},StridedArray{PetscFECellGeom},Ptr{PetscFECellGeom},Ref{PetscFECellGeom}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg8::PetscDS,arg9::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg10::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:PetscFEIntegrateResidual,petscRealSingle),PetscErrorCode,(PetscFE,PetscDS,Int64,Int64,Ptr{PetscFECellGeom},Ptr{Float32},Ptr{Float32},PetscDS,Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
end 
=#
#= skipping function with undefined symbols: 
 function PetscFEIntegrateBdResidual(arg0::Type{Float32},arg1::PetscFE,arg2::PetscDS,arg3::Integer,arg4::Integer,arg5::Union{Ptr{PetscFECellGeom},StridedArray{PetscFECellGeom},Ptr{PetscFECellGeom},Ref{PetscFECellGeom}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg8::PetscDS,arg9::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg10::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:PetscFEIntegrateBdResidual,petscRealSingle),PetscErrorCode,(PetscFE,PetscDS,Int64,Int64,Ptr{PetscFECellGeom},Ptr{Float32},Ptr{Float32},PetscDS,Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
end 
=#
#= skipping function with undefined symbols: 
 function PetscFEIntegrateJacobian(arg0::Type{Float32},arg1::PetscFE,arg2::PetscDS,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{PetscFECellGeom},StridedArray{PetscFECellGeom},Ptr{PetscFECellGeom},Ref{PetscFECellGeom}},arg7::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg8::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg9::PetscDS,arg10::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg11::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:PetscFEIntegrateJacobian,petscRealSingle),PetscErrorCode,(PetscFE,PetscDS,Int64,Int64,Int64,Ptr{PetscFECellGeom},Ptr{Float32},Ptr{Float32},PetscDS,Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11)
end 
=#
#= skipping function with undefined symbols: 
 function PetscFEIntegrateBdJacobian(arg0::Type{Float32},arg1::PetscFE,arg2::PetscDS,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{PetscFECellGeom},StridedArray{PetscFECellGeom},Ptr{PetscFECellGeom},Ref{PetscFECellGeom}},arg7::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg8::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg9::PetscDS,arg10::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg11::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:PetscFEIntegrateBdJacobian,petscRealSingle),PetscErrorCode,(PetscFE,PetscDS,Int64,Int64,Int64,Ptr{PetscFECellGeom},Ptr{Float32},Ptr{Float32},PetscDS,Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11)
end 
=#
function PetscFECompositeGetMapping(arg0::Type{Float32},arg1::PetscFE,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg4::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg5::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:PetscFECompositeGetMapping,petscRealSingle),PetscErrorCode,(PetscFE,Ptr{Int64},Ptr{Ptr{Float32}},Ptr{Ptr{Float32}},Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscFEOpenCLSetRealType(arg0::Type{Float32},arg1::PetscFE,arg2::PetscDataType)
    err = ccall((:PetscFEOpenCLSetRealType,petscRealSingle),PetscErrorCode,(PetscFE,PetscDataType),arg1,arg2)
    return err
end

function PetscFEOpenCLGetRealType(arg0::Type{Float32},arg1::PetscFE,arg2::Union{Ptr{PetscDataType},StridedArray{PetscDataType},Ptr{PetscDataType},Ref{PetscDataType}})
    err = ccall((:PetscFEOpenCLGetRealType,petscRealSingle),PetscErrorCode,(PetscFE,Ptr{PetscDataType}),arg1,arg2)
    return err
end

function DMDASetInterpolationType(arg0::Type{Float32},arg1::DM,arg2::DMDAInterpolationType)
    err = ccall((:DMDASetInterpolationType,petscRealSingle),PetscErrorCode,(DM,DMDAInterpolationType),arg1,arg2)
    return err
end

function DMDAGetInterpolationType(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{DMDAInterpolationType},StridedArray{DMDAInterpolationType},Ptr{DMDAInterpolationType},Ref{DMDAInterpolationType}})
    err = ccall((:DMDAGetInterpolationType,petscRealSingle),PetscErrorCode,(DM,Ptr{DMDAInterpolationType}),arg1,arg2)
    return err
end

function DMDASetElementType(arg0::Type{Float32},arg1::DM,arg2::DMDAElementType)
    err = ccall((:DMDASetElementType,petscRealSingle),PetscErrorCode,(DM,DMDAElementType),arg1,arg2)
    return err
end

function DMDAGetElementType(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{DMDAElementType},StridedArray{DMDAElementType},Ptr{DMDAElementType},Ref{DMDAElementType}})
    err = ccall((:DMDAGetElementType,petscRealSingle),PetscErrorCode,(DM,Ptr{DMDAElementType}),arg1,arg2)
    return err
end

function DMDAGetElements(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMDAGetElements,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64},Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4)
    return err
end

function DMDARestoreElements(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMDARestoreElements,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64},Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4)
    return err
end

function DMDACreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:DMDACreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{DM}),arg1,arg2)
    return err
end

function DMDASetSizes(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Integer,arg4::Integer)
    err = ccall((:DMDASetSizes,petscRealSingle),PetscErrorCode,(DM,Int64,Int64,Int64),arg1,arg2,arg3,arg4)
    return err
end

function DMDACreate1d(arg0::Type{Float32},arg1::MPI_Comm,arg2::DMBoundaryType,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:DMDACreate1d,petscRealSingle),PetscErrorCode,(comm_type,DMBoundaryType,Int64,Int64,Int64,Ptr{Int64},Ptr{DM}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function DMDACreate2d(arg0::Type{Float32},arg1::MPI_Comm,arg2::DMBoundaryType,arg3::DMBoundaryType,arg4::DMDAStencilType,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Integer,arg9::Integer,arg10::Integer,arg11::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg12::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg13::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:DMDACreate2d,petscRealSingle),PetscErrorCode,(comm_type,DMBoundaryType,DMBoundaryType,DMDAStencilType,Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Int64},Ptr{DM}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13)
    return err
end

function DMDACreate3d(arg0::Type{Float32},arg1::MPI_Comm,arg2::DMBoundaryType,arg3::DMBoundaryType,arg4::DMBoundaryType,arg5::DMDAStencilType,arg6::Integer,arg7::Integer,arg8::Integer,arg9::Integer,arg10::Integer,arg11::Integer,arg12::Integer,arg13::Integer,arg14::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg15::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg16::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg17::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:DMDACreate3d,petscRealSingle),PetscErrorCode,(comm_type,DMBoundaryType,DMBoundaryType,DMBoundaryType,DMDAStencilType,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{DM}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17)
    return err
end

function DMDAGlobalToNaturalBegin(arg1::DM,arg2::Vec{Float32},arg3::InsertMode,arg4::Vec{Float32})
    err = ccall((:DMDAGlobalToNaturalBegin,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},InsertMode,Vec{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function DMDAGlobalToNaturalEnd(arg1::DM,arg2::Vec{Float32},arg3::InsertMode,arg4::Vec{Float32})
    err = ccall((:DMDAGlobalToNaturalEnd,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},InsertMode,Vec{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function DMDANaturalToGlobalBegin(arg1::DM,arg2::Vec{Float32},arg3::InsertMode,arg4::Vec{Float32})
    err = ccall((:DMDANaturalToGlobalBegin,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},InsertMode,Vec{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function DMDANaturalToGlobalEnd(arg1::DM,arg2::Vec{Float32},arg3::InsertMode,arg4::Vec{Float32})
    err = ccall((:DMDANaturalToGlobalEnd,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},InsertMode,Vec{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function DMDALocalToLocalBegin(dm::DM,g::Vec{Float32},mode::InsertMode,l::Vec{Float32})
    err = ccall((:DMDALocalToLocalBegin,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},InsertMode,Vec{Float32}),dm,g,mode,l)
    return err
end

function DMDALocalToLocalEnd(dm::DM,g::Vec{Float32},mode::InsertMode,l::Vec{Float32})
    err = ccall((:DMDALocalToLocalEnd,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},InsertMode,Vec{Float32}),dm,g,mode,l)
    return err
end

function DMDACreateNaturalVector(arg1::DM,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:DMDACreateNaturalVector,petscRealSingle),PetscErrorCode,(DM,Ptr{Vec{Float32}}),arg1,arg2)
    return err
end

function DMDAGetCorners(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMDAGetCorners,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function DMDAGetGhostCorners(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMDAGetGhostCorners,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function DMDAGetInfo(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg9::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg10::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg11::Union{Ptr{DMBoundaryType},StridedArray{DMBoundaryType},Ptr{DMBoundaryType},Ref{DMBoundaryType}},arg12::Union{Ptr{DMBoundaryType},StridedArray{DMBoundaryType},Ptr{DMBoundaryType},Ref{DMBoundaryType}},arg13::Union{Ptr{DMBoundaryType},StridedArray{DMBoundaryType},Ptr{DMBoundaryType},Ref{DMBoundaryType}},arg14::Union{Ptr{DMDAStencilType},StridedArray{DMDAStencilType},Ptr{DMDAStencilType},Ref{DMDAStencilType}})
    err = ccall((:DMDAGetInfo,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{DMBoundaryType},Ptr{DMBoundaryType},Ptr{DMBoundaryType},Ptr{DMDAStencilType}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14)
    return err
end

function DMDAGetProcessorSubset(arg0::Type{Float32},arg1::DM,arg2::DMDADirection,arg3::Integer,arg4::Union{Ptr{MPI_Comm},StridedArray{MPI_Comm},Ptr{MPI_Comm},Ref{MPI_Comm}})
    err = ccall((:DMDAGetProcessorSubset,petscRealSingle),PetscErrorCode,(DM,DMDADirection,Int64,Ptr{comm_type}),arg1,arg2,arg3,arg4)
    return err
end

function DMDAGetProcessorSubsets(arg0::Type{Float32},arg1::DM,arg2::DMDADirection,arg3::Union{Ptr{MPI_Comm},StridedArray{MPI_Comm},Ptr{MPI_Comm},Ref{MPI_Comm}})
    err = ccall((:DMDAGetProcessorSubsets,petscRealSingle),PetscErrorCode,(DM,DMDADirection,Ptr{comm_type}),arg1,arg2,arg3)
    return err
end

function DMDAGetRay(arg1::DM,arg2::DMDADirection,arg3::Integer,arg4::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg5::Union{Ptr{VecScatter{Float32}},StridedArray{VecScatter{Float32}},Ptr{VecScatter{Float32}},Ref{VecScatter{Float32}}})
    err = ccall((:DMDAGetRay,petscRealSingle),PetscErrorCode,(DM,DMDADirection,Int64,Ptr{Vec{Float32}},Ptr{VecScatter{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMDAGlobalToNaturalAllCreate(arg1::DM,arg2::Union{Ptr{VecScatter{Float32}},StridedArray{VecScatter{Float32}},Ptr{VecScatter{Float32}},Ref{VecScatter{Float32}}})
    err = ccall((:DMDAGlobalToNaturalAllCreate,petscRealSingle),PetscErrorCode,(DM,Ptr{VecScatter{Float32}}),arg1,arg2)
    return err
end

function DMDANaturalAllToGlobalCreate(arg1::DM,arg2::Union{Ptr{VecScatter{Float32}},StridedArray{VecScatter{Float32}},Ptr{VecScatter{Float32}},Ref{VecScatter{Float32}}})
    err = ccall((:DMDANaturalAllToGlobalCreate,petscRealSingle),PetscErrorCode,(DM,Ptr{VecScatter{Float32}}),arg1,arg2)
    return err
end

function DMDAGetScatter(arg1::DM,arg2::Union{Ptr{VecScatter{Float32}},StridedArray{VecScatter{Float32}},Ptr{VecScatter{Float32}},Ref{VecScatter{Float32}}},arg3::Union{Ptr{VecScatter{Float32}},StridedArray{VecScatter{Float32}},Ptr{VecScatter{Float32}},Ref{VecScatter{Float32}}})
    err = ccall((:DMDAGetScatter,petscRealSingle),PetscErrorCode,(DM,Ptr{VecScatter{Float32}},Ptr{VecScatter{Float32}}),arg1,arg2,arg3)
    return err
end

function DMDAGetNeighbors(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Ptr{PetscMPIInt}},StridedArray{Ptr{PetscMPIInt}},Ptr{Ptr{PetscMPIInt}},Ref{Ptr{PetscMPIInt}}})
    err = ccall((:DMDAGetNeighbors,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{PetscMPIInt}}),arg1,arg2)
    return err
end

function DMDASetAOType(arg0::Type{Float32},arg1::DM,arg2::AOType)
    err = ccall((:DMDASetAOType,petscRealSingle),PetscErrorCode,(DM,Cstring),arg1,arg2)
    return err
end

function DMDAGetAO(arg1::DM,arg2::Union{Ptr{AO{Float32}},StridedArray{AO{Float32}},Ptr{AO{Float32}},Ref{AO{Float32}}})
    err = ccall((:DMDAGetAO,petscRealSingle),PetscErrorCode,(DM,Ptr{AO{Float32}}),arg1,arg2)
    return err
end

function DMDASetUniformCoordinates(arg0::Type{Float32},arg1::DM,arg2::Float32,arg3::Float32,arg4::Float32,arg5::Float32,arg6::Float32,arg7::Float32)
    err = ccall((:DMDASetUniformCoordinates,petscRealSingle),PetscErrorCode,(DM,Float32,Float32,Float32,Float32,Float32,Float32),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function DMDAGetCoordinateArray(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDAGetCoordinateArray,petscRealSingle),PetscErrorCode,(DM,Ptr{Void}),arg1,arg2)
    return err
end

function DMDARestoreCoordinateArray(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDARestoreCoordinateArray,petscRealSingle),PetscErrorCode,(DM,Ptr{Void}),arg1,arg2)
    return err
end

function DMDAGetBoundingBox(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:DMDAGetBoundingBox,petscRealSingle),PetscErrorCode,(DM,Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function DMDAGetLocalBoundingBox(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:DMDAGetLocalBoundingBox,petscRealSingle),PetscErrorCode,(DM,Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function DMDAGetLogicalCoordinate(arg0::Type{Float32},arg1::DM,arg2::Float32,arg3::Float32,arg4::Float32,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg9::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg10::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:DMDAGetLogicalCoordinate,petscRealSingle),PetscErrorCode,(DM,Float32,Float32,Float32,Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Float32},Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function DMDAMapCoordsToPeriodicDomain(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:DMDAMapCoordsToPeriodicDomain,petscRealSingle),PetscErrorCode,(DM,Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function DMDAGetReducedDMDA(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:DMDAGetReducedDMDA,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{DM}),arg1,arg2,arg3)
    return err
end

function DMDASetFieldName(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:DMDASetFieldName,petscRealSingle),PetscErrorCode,(DM,Int64,Cstring),arg1,arg2,arg3)
    return err
end

function DMDAGetFieldName(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:DMDAGetFieldName,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Ptr{UInt8}}),arg1,arg2,arg3)
    return err
end

function DMDASetFieldNames(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:DMDASetFieldNames,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function DMDAGetFieldNames(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}})
    err = ccall((:DMDAGetFieldNames,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{Ptr{UInt8}}}),arg1,arg2)
    return err
end

function DMDASetCoordinateName(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:DMDASetCoordinateName,petscRealSingle),PetscErrorCode,(DM,Int64,Cstring),arg1,arg2,arg3)
    return err
end

function DMDAGetCoordinateName(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:DMDAGetCoordinateName,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Ptr{UInt8}}),arg1,arg2,arg3)
    return err
end

function DMDASetBoundaryType(arg0::Type{Float32},arg1::DM,arg2::DMBoundaryType,arg3::DMBoundaryType,arg4::DMBoundaryType)
    err = ccall((:DMDASetBoundaryType,petscRealSingle),PetscErrorCode,(DM,DMBoundaryType,DMBoundaryType,DMBoundaryType),arg1,arg2,arg3,arg4)
    return err
end

function DMDASetDof(arg0::Type{Float32},arg1::DM,arg2::Integer)
    err = ccall((:DMDASetDof,petscRealSingle),PetscErrorCode,(DM,Int64),arg1,arg2)
    return err
end

function DMDASetOverlap(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Integer,arg4::Integer)
    err = ccall((:DMDASetOverlap,petscRealSingle),PetscErrorCode,(DM,Int64,Int64,Int64),arg1,arg2,arg3,arg4)
    return err
end

function DMDAGetOverlap(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMDAGetOverlap,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function DMDASetNumLocalSubDomains(arg0::Type{Float32},arg1::DM,arg2::Integer)
    err = ccall((:DMDASetNumLocalSubDomains,petscRealSingle),PetscErrorCode,(DM,Int64),arg1,arg2)
    return err
end

function DMDAGetNumLocalSubDomains(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMDAGetNumLocalSubDomains,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64}),arg1,arg2)
    return err
end

function DMDAGetOffset(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMDAGetOffset,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function DMDASetOffset(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer)
    err = ccall((:DMDASetOffset,petscRealSingle),PetscErrorCode,(DM,Int64,Int64,Int64,Int64,Int64,Int64),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function DMDAGetNonOverlappingRegion(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMDAGetNonOverlappingRegion,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function DMDASetNonOverlappingRegion(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer)
    err = ccall((:DMDASetNonOverlappingRegion,petscRealSingle),PetscErrorCode,(DM,Int64,Int64,Int64,Int64,Int64,Int64),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function DMDASetStencilWidth(arg0::Type{Float32},arg1::DM,arg2::Integer)
    err = ccall((:DMDASetStencilWidth,petscRealSingle),PetscErrorCode,(DM,Int64),arg1,arg2)
    return err
end

function DMDASetOwnershipRanges(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMDASetOwnershipRanges,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function DMDAGetOwnershipRanges(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMDAGetOwnershipRanges,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{Int64}},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4)
    return err
end

function DMDASetNumProcs(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Integer,arg4::Integer)
    err = ccall((:DMDASetNumProcs,petscRealSingle),PetscErrorCode,(DM,Int64,Int64,Int64),arg1,arg2,arg3,arg4)
    return err
end

function DMDASetStencilType(arg0::Type{Float32},arg1::DM,arg2::DMDAStencilType)
    err = ccall((:DMDASetStencilType,petscRealSingle),PetscErrorCode,(DM,DMDAStencilType),arg1,arg2)
    return err
end

function DMDAVecGetArray(arg1::DM,arg2::Vec{Float32},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDAVecGetArray,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMDAVecRestoreArray(arg1::DM,arg2::Vec{Float32},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDAVecRestoreArray,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMDAVecGetArrayDOF(arg1::DM,arg2::Vec{Float32},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDAVecGetArrayDOF,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMDAVecRestoreArrayDOF(arg1::DM,arg2::Vec{Float32},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDAVecRestoreArrayDOF,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMDAVecGetArrayRead(arg1::DM,arg2::Vec{Float32},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDAVecGetArrayRead,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMDAVecRestoreArrayRead(arg1::DM,arg2::Vec{Float32},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDAVecRestoreArrayRead,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMDAVecGetArrayDOFRead(arg1::DM,arg2::Vec{Float32},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDAVecGetArrayDOFRead,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMDAVecRestoreArrayDOFRead(arg1::DM,arg2::Vec{Float32},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDAVecRestoreArrayDOFRead,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMDASplitComm2d(arg0::Type{Float32},arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{MPI_Comm},StridedArray{MPI_Comm},Ptr{MPI_Comm},Ref{MPI_Comm}})
    err = ccall((:DMDASplitComm2d,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Ptr{comm_type}),arg1,arg2,arg3,arg4,arg5)
    return err
end

#= skipping function with undefined symbols: 
 function DMDACreatePatchIS(arg1::DM,arg2::Union{Ptr{MatStencil},StridedArray{MatStencil},Ptr{MatStencil},Ref{MatStencil}},arg3::Union{Ptr{MatStencil},StridedArray{MatStencil},Ptr{MatStencil},Ref{MatStencil}},arg4::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    ccall((:DMDACreatePatchIS,petscRealSingle),PetscErrorCode,(DM,Ptr{MatStencil},Ptr{MatStencil},Ptr{IS{Float32}}),arg1,arg2,arg3,arg4)
end 
=#
#= skipping function with undefined symbols: 
 function DMDAGetLocalInfo(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{DMDALocalInfo},StridedArray{DMDALocalInfo},Ptr{DMDALocalInfo},Ref{DMDALocalInfo}})
    ccall((:DMDAGetLocalInfo,petscRealSingle),PetscErrorCode,(DM,Ptr{DMDALocalInfo}),arg1,arg2)
end 
=#
function MatRegisterDAAD(arg0::Type{Float32})
    err = ccall((:MatRegisterDAAD,petscRealSingle),PetscErrorCode,())
    return err
end

function MatCreateDAAD(arg1::DM,arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateDAAD,petscRealSingle),PetscErrorCode,(DM,Ptr{Mat{Float32}}),arg1,arg2)
    return err
end

function MatCreateSeqUSFFT(arg1::Vec{Float32},arg2::DM,arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateSeqUSFFT,petscRealSingle),PetscErrorCode,(Vec{Float32},DM,Ptr{Mat{Float32}}),arg1,arg2,arg3)
    return err
end

function DMDASetGetMatrix(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDASetGetMatrix,petscRealSingle),PetscErrorCode,(DM,Ptr{Void}),arg1,arg2)
    return err
end

function DMDASetBlockFills(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMDASetBlockFills,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function DMDASetRefinementFactor(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Integer,arg4::Integer)
    err = ccall((:DMDASetRefinementFactor,petscRealSingle),PetscErrorCode,(DM,Int64,Int64,Int64),arg1,arg2,arg3,arg4)
    return err
end

function DMDAGetRefinementFactor(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMDAGetRefinementFactor,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function DMDAGetArray(arg0::Type{Float32},arg1::DM,arg2::PetscBool,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDAGetArray,petscRealSingle),PetscErrorCode,(DM,PetscBool,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMDARestoreArray(arg0::Type{Float32},arg1::DM,arg2::PetscBool,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDARestoreArray,petscRealSingle),PetscErrorCode,(DM,PetscBool,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMDACreatePF(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{PF},StridedArray{PF},Ptr{PF},Ref{PF}})
    err = ccall((:DMDACreatePF,petscRealSingle),PetscErrorCode,(DM,Ptr{PF}),arg1,arg2)
    return err
end

function DMDAGetNumCells(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMDAGetNumCells,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMDAGetCellPoint(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMDAGetCellPoint,petscRealSingle),PetscErrorCode,(DM,Int64,Int64,Int64,Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMDAGetNumVertices(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMDAGetNumVertices,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMDAGetNumFaces(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMDAGetNumFaces,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function DMDAGetHeightStratum(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMDAGetHeightStratum,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function DMDAGetDepthStratum(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMDAGetDepthStratum,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function DMDACreateSection(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{PetscSection},StridedArray{PetscSection},Ptr{PetscSection},Ref{PetscSection}})
    err = ccall((:DMDACreateSection,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{PetscSection}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMDAComputeCellGeometryFEM(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::PetscQuadrature,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:DMDAComputeCellGeometryFEM,petscRealSingle),PetscErrorCode,(DM,Int64,PetscQuadrature,Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function DMDAGetTransitiveClosure(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::PetscBool,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMDAGetTransitiveClosure,petscRealSingle),PetscErrorCode,(DM,Int64,PetscBool,Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMDARestoreTransitiveClosure(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::PetscBool,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMDARestoreTransitiveClosure,petscRealSingle),PetscErrorCode,(DM,Int64,PetscBool,Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMDAVecGetClosure(arg1::DM,arg2::PetscSection,arg3::Vec{Float32},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:DMDAVecGetClosure,petscRealSingle),PetscErrorCode,(DM,PetscSection,Vec{Float32},Int64,Ptr{Int64},Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMDAVecRestoreClosure(arg1::DM,arg2::PetscSection,arg3::Vec{Float32},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:DMDAVecRestoreClosure,petscRealSingle),PetscErrorCode,(DM,PetscSection,Vec{Float32},Int64,Ptr{Int64},Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMDAVecSetClosure(arg1::DM,arg2::PetscSection,arg3::Vec{Float32},arg4::Integer,arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::InsertMode)
    err = ccall((:DMDAVecSetClosure,petscRealSingle),PetscErrorCode,(DM,PetscSection,Vec{Float32},Int64,Ptr{Float32},InsertMode),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMDAGetClosure(arg0::Type{Float32},arg1::DM,arg2::PetscSection,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMDAGetClosure,petscRealSingle),PetscErrorCode,(DM,PetscSection,Int64,Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMDARestoreClosure(arg0::Type{Float32},arg1::DM,arg2::PetscSection,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMDARestoreClosure,petscRealSingle),PetscErrorCode,(DM,PetscSection,Int64,Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMDAGetClosureScalar(arg0::Type{Float32},arg1::DM,arg2::PetscSection,arg3::Integer,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:DMDAGetClosureScalar,petscRealSingle),PetscErrorCode,(DM,PetscSection,Int64,Ptr{Float32},Ptr{Int64},Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMDARestoreClosureScalar(arg0::Type{Float32},arg1::DM,arg2::PetscSection,arg3::Integer,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:DMDARestoreClosureScalar,petscRealSingle),PetscErrorCode,(DM,PetscSection,Int64,Ptr{Float32},Ptr{Int64},Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMDASetClosureScalar(arg0::Type{Float32},arg1::DM,arg2::PetscSection,arg3::Integer,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::InsertMode)
    err = ccall((:DMDASetClosureScalar,petscRealSingle),PetscErrorCode,(DM,PetscSection,Int64,Ptr{Float32},Ptr{Float32},InsertMode),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

#= skipping function with undefined symbols: 
 function DMDAConvertToCell(arg0::Type{Float32},arg1::DM,arg2::MatStencil,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMDAConvertToCell,petscRealSingle),PetscErrorCode,(DM,MatStencil,Ptr{Int64}),arg1,arg2,arg3)
end 
=#
function DMDASetVertexCoordinates(arg0::Type{Float32},arg1::DM,arg2::Float32,arg3::Float32,arg4::Float32,arg5::Float32,arg6::Float32,arg7::Float32)
    err = ccall((:DMDASetVertexCoordinates,petscRealSingle),PetscErrorCode,(DM,Float32,Float32,Float32,Float32,Float32,Float32),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function DMDASetPreallocationCenterDimension(arg0::Type{Float32},arg1::DM,arg2::Integer)
    err = ccall((:DMDASetPreallocationCenterDimension,petscRealSingle),PetscErrorCode,(DM,Int64),arg1,arg2)
    return err
end

function DMDAGetPreallocationCenterDimension(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMDAGetPreallocationCenterDimension,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64}),arg1,arg2)
    return err
end

function DMDAProjectFunction(arg1::DM,arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::InsertMode,arg5::Vec{Float32})
    err = ccall((:DMDAProjectFunction,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{Void}},Ptr{Ptr{Void}},InsertMode,Vec{Float32}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMDAProjectFunctionLocal(arg1::DM,arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::InsertMode,arg5::Vec{Float32})
    err = ccall((:DMDAProjectFunctionLocal,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{Void}},Ptr{Ptr{Void}},InsertMode,Vec{Float32}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMDAComputeL2Diff(arg1::DM,arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::Vec{Float32},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:DMDAComputeL2Diff,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{Void}},Ptr{Ptr{Void}},Vec{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMDAComputeL2GradientDiff(arg1::DM,arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::Vec{Float32},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:DMDAComputeL2GradientDiff,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{Void}},Ptr{Ptr{Void}},Vec{Float32},Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMCompositeCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:DMCompositeCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{DM}),arg1,arg2)
    return err
end

function DMCompositeAddDM(arg0::Type{Float32},arg1::DM,arg2::DM)
    err = ccall((:DMCompositeAddDM,petscRealSingle),PetscErrorCode,(DM,DM),arg1,arg2)
    return err
end

function DMCompositeSetCoupling(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMCompositeSetCoupling,petscRealSingle),PetscErrorCode,(DM,Ptr{Void}),arg1,arg2)
    return err
end

function DMCompositeAddVecScatter(arg1::DM,arg2::VecScatter{Float32})
    err = ccall((:DMCompositeAddVecScatter,petscRealSingle),PetscErrorCode,(DM,VecScatter{Float32}),arg1,arg2)
    return err
end

function DMCompositeScatterArray(arg1::DM,arg2::Vec{Float32},arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:DMCompositeScatterArray,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},Ptr{Vec{Float32}}),arg1,arg2,arg3)
    return err
end

function DMCompositeGatherArray(arg1::DM,arg2::Vec{Float32},arg3::InsertMode,arg4::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:DMCompositeGatherArray,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},InsertMode,Ptr{Vec{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function DMCompositeGetNumberDM(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMCompositeGetNumberDM,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64}),arg1,arg2)
    return err
end

function DMCompositeGetAccessArray(arg1::DM,arg2::Vec{Float32},arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:DMCompositeGetAccessArray,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},Int64,Ptr{Int64},Ptr{Vec{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMCompositeRestoreAccessArray(arg1::DM,arg2::Vec{Float32},arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:DMCompositeRestoreAccessArray,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},Int64,Ptr{Int64},Ptr{Vec{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMCompositeGetEntriesArray(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:DMCompositeGetEntriesArray,petscRealSingle),PetscErrorCode,(DM,Ptr{DM}),arg1,arg2)
    return err
end

function DMCompositeGetGlobalISs(arg1::DM,arg2::Union{Ptr{Ptr{IS{Float32}}},StridedArray{Ptr{IS{Float32}}},Ptr{Ptr{IS{Float32}}},Ref{Ptr{IS{Float32}}}})
    err = ccall((:DMCompositeGetGlobalISs,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{IS{Float32}}}),arg1,arg2)
    return err
end

function DMCompositeGetLocalISs(arg1::DM,arg2::Union{Ptr{Ptr{IS{Float32}}},StridedArray{Ptr{IS{Float32}}},Ptr{Ptr{IS{Float32}}},Ref{Ptr{IS{Float32}}}})
    err = ccall((:DMCompositeGetLocalISs,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{IS{Float32}}}),arg1,arg2)
    return err
end

function DMCompositeGetISLocalToGlobalMappings(arg1::DM,arg2::Union{Ptr{Ptr{ISLocalToGlobalMapping{Float32}}},StridedArray{Ptr{ISLocalToGlobalMapping{Float32}}},Ptr{Ptr{ISLocalToGlobalMapping{Float32}}},Ref{Ptr{ISLocalToGlobalMapping{Float32}}}})
    err = ccall((:DMCompositeGetISLocalToGlobalMappings,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{ISLocalToGlobalMapping{Float32}}}),arg1,arg2)
    return err
end

function DMPatchCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:DMPatchCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{DM}),arg1,arg2)
    return err
end

#= skipping function with undefined symbols: 
 function DMPatchZoom(arg1::DM,arg2::Vec{Float32},arg3::MatStencil,arg4::MatStencil,arg5::MPI_Comm,arg6::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}},arg7::Union{Ptr{PetscSF},StridedArray{PetscSF},Ptr{PetscSF},Ref{PetscSF}},arg8::Union{Ptr{PetscSF},StridedArray{PetscSF},Ptr{PetscSF},Ref{PetscSF}})
    ccall((:DMPatchZoom,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},MatStencil,MatStencil,comm_type,Ptr{DM},Ptr{PetscSF},Ptr{PetscSF}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
end 
=#
function DMPatchSolve(arg0::Type{Float32},arg1::DM)
    err = ccall((:DMPatchSolve,petscRealSingle),PetscErrorCode,(DM,),arg1)
    return err
end

#= skipping function with undefined symbols: 
 function DMPatchGetPatchSize(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{MatStencil},StridedArray{MatStencil},Ptr{MatStencil},Ref{MatStencil}})
    ccall((:DMPatchGetPatchSize,petscRealSingle),PetscErrorCode,(DM,Ptr{MatStencil}),arg1,arg2)
end 
=#
#= skipping function with undefined symbols: 
 function DMPatchSetPatchSize(arg0::Type{Float32},arg1::DM,arg2::MatStencil)
    ccall((:DMPatchSetPatchSize,petscRealSingle),PetscErrorCode,(DM,MatStencil),arg1,arg2)
end 
=#
#= skipping function with undefined symbols: 
 function DMPatchGetCommSize(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{MatStencil},StridedArray{MatStencil},Ptr{MatStencil},Ref{MatStencil}})
    ccall((:DMPatchGetCommSize,petscRealSingle),PetscErrorCode,(DM,Ptr{MatStencil}),arg1,arg2)
end 
=#
#= skipping function with undefined symbols: 
 function DMPatchSetCommSize(arg0::Type{Float32},arg1::DM,arg2::MatStencil)
    ccall((:DMPatchSetCommSize,petscRealSingle),PetscErrorCode,(DM,MatStencil),arg1,arg2)
end 
=#
function DMPatchGetCoarse(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:DMPatchGetCoarse,petscRealSingle),PetscErrorCode,(DM,Ptr{DM}),arg1,arg2)
    return err
end

#= skipping function with undefined symbols: 
 function DMPatchCreateGrid(arg0::Type{Float32},arg1::MPI_Comm,arg2::Integer,arg3::MatStencil,arg4::MatStencil,arg5::MatStencil,arg6::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:DMPatchCreateGrid,petscRealSingle),PetscErrorCode,(comm_type,Int64,MatStencil,MatStencil,MatStencil,Ptr{DM}),arg1,arg2,arg3,arg4,arg5,arg6)
end 
=#
function PetscLimiterCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{PetscLimiter},StridedArray{PetscLimiter},Ptr{PetscLimiter},Ref{PetscLimiter}})
    err = ccall((:PetscLimiterCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{PetscLimiter}),arg1,arg2)
    return err
end

function PetscLimiterDestroy(arg0::Type{Float32},arg1::Union{Ptr{PetscLimiter},StridedArray{PetscLimiter},Ptr{PetscLimiter},Ref{PetscLimiter}})
    err = ccall((:PetscLimiterDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscLimiter},),arg1)
    return err
end

function PetscLimiterSetType(arg0::Type{Float32},arg1::PetscLimiter,arg2::PetscLimiterType)
    err = ccall((:PetscLimiterSetType,petscRealSingle),PetscErrorCode,(PetscLimiter,Cstring),arg1,arg2)
    return err
end

function PetscLimiterGetType(arg0::Type{Float32},arg1::PetscLimiter,arg2::Union{Ptr{PetscLimiterType},StridedArray{PetscLimiterType},Ptr{PetscLimiterType},Ref{PetscLimiterType}})
    (arg2_,tmp) = symbol_get_before(arg2)
    err = ccall((:PetscLimiterGetType,petscRealSingle),PetscErrorCode,(PetscLimiter,Ptr{Ptr{UInt8}}),arg1,arg2_)
    symbol_get_after(arg2_,arg2)
    return err
end

function PetscLimiterSetUp(arg0::Type{Float32},arg1::PetscLimiter)
    err = ccall((:PetscLimiterSetUp,petscRealSingle),PetscErrorCode,(PetscLimiter,),arg1)
    return err
end

function PetscLimiterSetFromOptions(arg0::Type{Float32},arg1::PetscLimiter)
    err = ccall((:PetscLimiterSetFromOptions,petscRealSingle),PetscErrorCode,(PetscLimiter,),arg1)
    return err
end

function PetscLimiterViewFromOptions(arg0::Type{Float32},A::PetscLimiter,B::PetscObject,name::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscLimiterViewFromOptions,petscRealSingle),PetscErrorCode,(PetscLimiter,PetscObject,Cstring),A,B,name)
    return err
end

function PetscLimiterView(arg1::PetscLimiter,arg2::PetscViewer{Float32})
    err = ccall((:PetscLimiterView,petscRealSingle),PetscErrorCode,(PetscLimiter,PetscViewer{Float32}),arg1,arg2)
    return err
end

function PetscLimiterRegister(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscLimiterRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function PetscLimiterRegisterDestroy(arg0::Type{Float32})
    err = ccall((:PetscLimiterRegisterDestroy,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscLimiterLimit(arg0::Type{Float32},arg1::PetscLimiter,arg2::Float32,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:PetscLimiterLimit,petscRealSingle),PetscErrorCode,(PetscLimiter,Float32,Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function PetscFVInitializePackage(arg0::Type{Float32})
    err = ccall((:PetscFVInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscFVCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{PetscFV},StridedArray{PetscFV},Ptr{PetscFV},Ref{PetscFV}})
    err = ccall((:PetscFVCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{PetscFV}),arg1,arg2)
    return err
end

function PetscFVDestroy(arg0::Type{Float32},arg1::Union{Ptr{PetscFV},StridedArray{PetscFV},Ptr{PetscFV},Ref{PetscFV}})
    err = ccall((:PetscFVDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscFV},),arg1)
    return err
end

function PetscFVSetType(arg0::Type{Float32},arg1::PetscFV,arg2::PetscFVType)
    err = ccall((:PetscFVSetType,petscRealSingle),PetscErrorCode,(PetscFV,Cstring),arg1,arg2)
    return err
end

function PetscFVGetType(arg0::Type{Float32},arg1::PetscFV,arg2::Union{Ptr{PetscFVType},StridedArray{PetscFVType},Ptr{PetscFVType},Ref{PetscFVType}})
    (arg2_,tmp) = symbol_get_before(arg2)
    err = ccall((:PetscFVGetType,petscRealSingle),PetscErrorCode,(PetscFV,Ptr{Ptr{UInt8}}),arg1,arg2_)
    symbol_get_after(arg2_,arg2)
    return err
end

function PetscFVSetUp(arg0::Type{Float32},arg1::PetscFV)
    err = ccall((:PetscFVSetUp,petscRealSingle),PetscErrorCode,(PetscFV,),arg1)
    return err
end

function PetscFVSetFromOptions(arg0::Type{Float32},arg1::PetscFV)
    err = ccall((:PetscFVSetFromOptions,petscRealSingle),PetscErrorCode,(PetscFV,),arg1)
    return err
end

function PetscFVViewFromOptions(arg0::Type{Float32},A::PetscFV,B::PetscObject,name::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscFVViewFromOptions,petscRealSingle),PetscErrorCode,(PetscFV,PetscObject,Cstring),A,B,name)
    return err
end

function PetscFVView(arg1::PetscFV,arg2::PetscViewer{Float32})
    err = ccall((:PetscFVView,petscRealSingle),PetscErrorCode,(PetscFV,PetscViewer{Float32}),arg1,arg2)
    return err
end

function PetscFVRegister(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscFVRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function PetscFVRegisterDestroy(arg0::Type{Float32})
    err = ccall((:PetscFVRegisterDestroy,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscFVSetLimiter(arg0::Type{Float32},arg1::PetscFV,arg2::PetscLimiter)
    err = ccall((:PetscFVSetLimiter,petscRealSingle),PetscErrorCode,(PetscFV,PetscLimiter),arg1,arg2)
    return err
end

function PetscFVGetLimiter(arg0::Type{Float32},arg1::PetscFV,arg2::Union{Ptr{PetscLimiter},StridedArray{PetscLimiter},Ptr{PetscLimiter},Ref{PetscLimiter}})
    err = ccall((:PetscFVGetLimiter,petscRealSingle),PetscErrorCode,(PetscFV,Ptr{PetscLimiter}),arg1,arg2)
    return err
end

function PetscFVSetNumComponents(arg0::Type{Float32},arg1::PetscFV,arg2::Integer)
    err = ccall((:PetscFVSetNumComponents,petscRealSingle),PetscErrorCode,(PetscFV,Int64),arg1,arg2)
    return err
end

function PetscFVGetNumComponents(arg0::Type{Float32},arg1::PetscFV,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscFVGetNumComponents,petscRealSingle),PetscErrorCode,(PetscFV,Ptr{Int64}),arg1,arg2)
    return err
end

function PetscFVSetSpatialDimension(arg0::Type{Float32},arg1::PetscFV,arg2::Integer)
    err = ccall((:PetscFVSetSpatialDimension,petscRealSingle),PetscErrorCode,(PetscFV,Int64),arg1,arg2)
    return err
end

function PetscFVGetSpatialDimension(arg0::Type{Float32},arg1::PetscFV,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscFVGetSpatialDimension,petscRealSingle),PetscErrorCode,(PetscFV,Ptr{Int64}),arg1,arg2)
    return err
end

function PetscFVSetComputeGradients(arg0::Type{Float32},arg1::PetscFV,arg2::PetscBool)
    err = ccall((:PetscFVSetComputeGradients,petscRealSingle),PetscErrorCode,(PetscFV,PetscBool),arg1,arg2)
    return err
end

function PetscFVGetComputeGradients(arg0::Type{Float32},arg1::PetscFV,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscFVGetComputeGradients,petscRealSingle),PetscErrorCode,(PetscFV,Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscFVSetQuadrature(arg0::Type{Float32},arg1::PetscFV,arg2::PetscQuadrature)
    err = ccall((:PetscFVSetQuadrature,petscRealSingle),PetscErrorCode,(PetscFV,PetscQuadrature),arg1,arg2)
    return err
end

function PetscFVGetQuadrature(arg0::Type{Float32},arg1::PetscFV,arg2::Union{Ptr{PetscQuadrature},StridedArray{PetscQuadrature},Ptr{PetscQuadrature},Ref{PetscQuadrature}})
    err = ccall((:PetscFVGetQuadrature,petscRealSingle),PetscErrorCode,(PetscFV,Ptr{PetscQuadrature}),arg1,arg2)
    return err
end

function PetscFVSetDualSpace(arg0::Type{Float32},arg1::PetscFV,arg2::PetscDualSpace)
    err = ccall((:PetscFVSetDualSpace,petscRealSingle),PetscErrorCode,(PetscFV,PetscDualSpace),arg1,arg2)
    return err
end

function PetscFVGetDualSpace(arg0::Type{Float32},arg1::PetscFV,arg2::Union{Ptr{PetscDualSpace},StridedArray{PetscDualSpace},Ptr{PetscDualSpace},Ref{PetscDualSpace}})
    err = ccall((:PetscFVGetDualSpace,petscRealSingle),PetscErrorCode,(PetscFV,Ptr{PetscDualSpace}),arg1,arg2)
    return err
end

function PetscFVRefine(arg0::Type{Float32},arg1::PetscFV,arg2::Union{Ptr{PetscFV},StridedArray{PetscFV},Ptr{PetscFV},Ref{PetscFV}})
    err = ccall((:PetscFVRefine,petscRealSingle),PetscErrorCode,(PetscFV,Ptr{PetscFV}),arg1,arg2)
    return err
end

function PetscFVGetDefaultTabulation(arg0::Type{Float32},arg1::PetscFV,arg2::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg3::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg4::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:PetscFVGetDefaultTabulation,petscRealSingle),PetscErrorCode,(PetscFV,Ptr{Ptr{Float32}},Ptr{Ptr{Float32}},Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscFVGetTabulation(arg0::Type{Float32},arg1::PetscFV,arg2::Integer,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg5::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg6::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:PetscFVGetTabulation,petscRealSingle),PetscErrorCode,(PetscFV,Int64,Ptr{Float32},Ptr{Ptr{Float32}},Ptr{Ptr{Float32}},Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscFVRestoreTabulation(arg0::Type{Float32},arg1::PetscFV,arg2::Integer,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg5::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg6::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:PetscFVRestoreTabulation,petscRealSingle),PetscErrorCode,(PetscFV,Int64,Ptr{Float32},Ptr{Ptr{Float32}},Ptr{Ptr{Float32}},Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscFVComputeGradient(arg0::Type{Float32},arg1::PetscFV,arg2::Integer,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:PetscFVComputeGradient,petscRealSingle),PetscErrorCode,(PetscFV,Int64,Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4)
    return err
end

#= skipping function with undefined symbols: 
 function PetscFVIntegrateRHSFunction(arg0::Type{Float32},arg1::PetscFV,arg2::PetscDS,arg3::Integer,arg4::Integer,arg5::Union{Ptr{PetscFVFaceGeom},StridedArray{PetscFVFaceGeom},Ptr{PetscFVFaceGeom},Ref{PetscFVFaceGeom}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg8::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg9::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg10::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:PetscFVIntegrateRHSFunction,petscRealSingle),PetscErrorCode,(PetscFV,PetscDS,Int64,Int64,Ptr{PetscFVFaceGeom},Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
end 
=#
function PetscFVLeastSquaresSetMaxFaces(arg0::Type{Float32},arg1::PetscFV,arg2::Integer)
    err = ccall((:PetscFVLeastSquaresSetMaxFaces,petscRealSingle),PetscErrorCode,(PetscFV,Int64),arg1,arg2)
    return err
end

function PetscPartitionerCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{PetscPartitioner},StridedArray{PetscPartitioner},Ptr{PetscPartitioner},Ref{PetscPartitioner}})
    err = ccall((:PetscPartitionerCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{PetscPartitioner}),arg1,arg2)
    return err
end

function PetscPartitionerDestroy(arg0::Type{Float32},arg1::Union{Ptr{PetscPartitioner},StridedArray{PetscPartitioner},Ptr{PetscPartitioner},Ref{PetscPartitioner}})
    err = ccall((:PetscPartitionerDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscPartitioner},),arg1)
    return err
end

function PetscPartitionerSetType(arg0::Type{Float32},arg1::PetscPartitioner,arg2::PetscPartitionerType)
    err = ccall((:PetscPartitionerSetType,petscRealSingle),PetscErrorCode,(PetscPartitioner,Cstring),arg1,arg2)
    return err
end

function PetscPartitionerGetType(arg0::Type{Float32},arg1::PetscPartitioner,arg2::Union{Ptr{PetscPartitionerType},StridedArray{PetscPartitionerType},Ptr{PetscPartitionerType},Ref{PetscPartitionerType}})
    (arg2_,tmp) = symbol_get_before(arg2)
    err = ccall((:PetscPartitionerGetType,petscRealSingle),PetscErrorCode,(PetscPartitioner,Ptr{Ptr{UInt8}}),arg1,arg2_)
    symbol_get_after(arg2_,arg2)
    return err
end

function PetscPartitionerSetUp(arg0::Type{Float32},arg1::PetscPartitioner)
    err = ccall((:PetscPartitionerSetUp,petscRealSingle),PetscErrorCode,(PetscPartitioner,),arg1)
    return err
end

function PetscPartitionerSetFromOptions(arg0::Type{Float32},arg1::PetscPartitioner)
    err = ccall((:PetscPartitionerSetFromOptions,petscRealSingle),PetscErrorCode,(PetscPartitioner,),arg1)
    return err
end

function PetscPartitionerViewFromOptions(arg0::Type{Float32},A::PetscPartitioner,B::PetscObject,name::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscPartitionerViewFromOptions,petscRealSingle),PetscErrorCode,(PetscPartitioner,PetscObject,Cstring),A,B,name)
    return err
end

function PetscPartitionerView(arg1::PetscPartitioner,arg2::PetscViewer{Float32})
    err = ccall((:PetscPartitionerView,petscRealSingle),PetscErrorCode,(PetscPartitioner,PetscViewer{Float32}),arg1,arg2)
    return err
end

function PetscPartitionerRegister(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscPartitionerRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function PetscPartitionerRegisterDestroy(arg0::Type{Float32})
    err = ccall((:PetscPartitionerRegisterDestroy,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscPartitionerPartition(arg1::PetscPartitioner,arg2::DM,arg3::PetscSection,arg4::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:PetscPartitionerPartition,petscRealSingle),PetscErrorCode,(PetscPartitioner,DM,PetscSection,Ptr{IS{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscPartitionerShellSetPartition(arg0::Type{Float32},arg1::PetscPartitioner,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscPartitionerShellSetPartition,petscRealSingle),PetscErrorCode,(PetscPartitioner,Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:DMPlexCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{DM}),arg1,arg2)
    return err
end

function DMPlexCreateCohesiveSubmesh(arg0::Type{Float32},arg1::DM,arg2::PetscBool,arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Integer,arg5::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:DMPlexCreateCohesiveSubmesh,petscRealSingle),PetscErrorCode,(DM,PetscBool,Cstring,Int64,Ptr{DM}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexCreateFromCellList(arg0::Type{Float32},arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::PetscBool,arg7::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}},arg8::Integer,arg9::Union{Ptr{Cdouble},StridedArray{Cdouble},Ptr{Cdouble},Ref{Cdouble}},arg10::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:DMPlexCreateFromCellList,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,PetscBool,Ptr{Cint},Int64,Ptr{Cdouble},Ptr{DM}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function DMPlexCreateFromDAG(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:DMPlexCreateFromDAG,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function DMPlexCreateReferenceCell(arg0::Type{Float32},arg1::MPI_Comm,arg2::Integer,arg3::PetscBool,arg4::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:DMPlexCreateReferenceCell,petscRealSingle),PetscErrorCode,(comm_type,Int64,PetscBool,Ptr{DM}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexGetChart(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetChart,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function DMPlexSetChart(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Integer)
    err = ccall((:DMPlexSetChart,petscRealSingle),PetscErrorCode,(DM,Int64,Int64),arg1,arg2,arg3)
    return err
end

function DMPlexGetConeSize(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetConeSize,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function DMPlexSetConeSize(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Integer)
    err = ccall((:DMPlexSetConeSize,petscRealSingle),PetscErrorCode,(DM,Int64,Int64),arg1,arg2,arg3)
    return err
end

function DMPlexAddConeSize(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Integer)
    err = ccall((:DMPlexAddConeSize,petscRealSingle),PetscErrorCode,(DM,Int64,Int64),arg1,arg2,arg3)
    return err
end

function DMPlexGetCone(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMPlexGetCone,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Ptr{Int64}}),arg1,arg2,arg3)
    return err
end

function DMPlexSetCone(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexSetCone,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function DMPlexInsertCone(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Integer,arg4::Integer)
    err = ccall((:DMPlexInsertCone,petscRealSingle),PetscErrorCode,(DM,Int64,Int64,Int64),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexInsertConeOrientation(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Integer,arg4::Integer)
    err = ccall((:DMPlexInsertConeOrientation,petscRealSingle),PetscErrorCode,(DM,Int64,Int64,Int64),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexGetConeOrientation(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMPlexGetConeOrientation,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Ptr{Int64}}),arg1,arg2,arg3)
    return err
end

function DMPlexSetConeOrientation(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexSetConeOrientation,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function DMPlexGetSupportSize(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetSupportSize,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function DMPlexSetSupportSize(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Integer)
    err = ccall((:DMPlexSetSupportSize,petscRealSingle),PetscErrorCode,(DM,Int64,Int64),arg1,arg2,arg3)
    return err
end

function DMPlexGetSupport(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMPlexGetSupport,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Ptr{Int64}}),arg1,arg2,arg3)
    return err
end

function DMPlexSetSupport(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexSetSupport,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function DMPlexInsertSupport(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Integer,arg4::Integer)
    err = ccall((:DMPlexInsertSupport,petscRealSingle),PetscErrorCode,(DM,Int64,Int64,Int64),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexGetConeSection(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{PetscSection},StridedArray{PetscSection},Ptr{PetscSection},Ref{PetscSection}})
    err = ccall((:DMPlexGetConeSection,petscRealSingle),PetscErrorCode,(DM,Ptr{PetscSection}),arg1,arg2)
    return err
end

function DMPlexGetSupportSection(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{PetscSection},StridedArray{PetscSection},Ptr{PetscSection},Ref{PetscSection}})
    err = ccall((:DMPlexGetSupportSection,petscRealSingle),PetscErrorCode,(DM,Ptr{PetscSection}),arg1,arg2)
    return err
end

function DMPlexGetCones(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMPlexGetCones,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function DMPlexGetConeOrientations(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMPlexGetConeOrientations,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function DMPlexGetMaxSizes(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetMaxSizes,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function DMPlexSymmetrize(arg0::Type{Float32},arg1::DM)
    err = ccall((:DMPlexSymmetrize,petscRealSingle),PetscErrorCode,(DM,),arg1)
    return err
end

function DMPlexStratify(arg0::Type{Float32},arg1::DM)
    err = ccall((:DMPlexStratify,petscRealSingle),PetscErrorCode,(DM,),arg1)
    return err
end

function DMPlexEqual(arg0::Type{Float32},arg1::DM,arg2::DM,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:DMPlexEqual,petscRealSingle),PetscErrorCode,(DM,DM,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function DMPlexReverseCell(arg0::Type{Float32},arg1::DM,arg2::Integer)
    err = ccall((:DMPlexReverseCell,petscRealSingle),PetscErrorCode,(DM,Int64),arg1,arg2)
    return err
end

function DMPlexOrient(arg0::Type{Float32},arg1::DM)
    err = ccall((:DMPlexOrient,petscRealSingle),PetscErrorCode,(DM,),arg1)
    return err
end

function DMPlexInterpolate(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:DMPlexInterpolate,petscRealSingle),PetscErrorCode,(DM,Ptr{DM}),arg1,arg2)
    return err
end

function DMPlexUninterpolate(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:DMPlexUninterpolate,petscRealSingle),PetscErrorCode,(DM,Ptr{DM}),arg1,arg2)
    return err
end

function DMPlexLoad(arg1::PetscViewer{Float32},arg2::DM)
    err = ccall((:DMPlexLoad,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},DM),arg1,arg2)
    return err
end

function DMPlexPreallocateOperator(arg1::DM,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Mat{Float32},arg8::PetscBool)
    err = ccall((:DMPlexPreallocateOperator,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Mat{Float32},PetscBool),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function DMPlexGetPointLocal(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetPointLocal,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexPointLocalRead(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMPlexPointLocalRead,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Float32},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexPointLocalRef(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMPlexPointLocalRef,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Float32},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexGetPointLocalField(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetPointLocalField,petscRealSingle),PetscErrorCode,(DM,Int64,Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexPointLocalFieldRef(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMPlexPointLocalFieldRef,petscRealSingle),PetscErrorCode,(DM,Int64,Int64,Ptr{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexPointLocalFieldRead(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMPlexPointLocalFieldRead,petscRealSingle),PetscErrorCode,(DM,Int64,Int64,Ptr{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexGetPointGlobal(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetPointGlobal,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexPointGlobalRead(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMPlexPointGlobalRead,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Float32},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexPointGlobalRef(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMPlexPointGlobalRef,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Float32},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexGetPointGlobalField(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetPointGlobalField,petscRealSingle),PetscErrorCode,(DM,Int64,Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexPointGlobalFieldRef(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMPlexPointGlobalFieldRef,petscRealSingle),PetscErrorCode,(DM,Int64,Int64,Ptr{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexPointGlobalFieldRead(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMPlexPointGlobalFieldRead,petscRealSingle),PetscErrorCode,(DM,Int64,Int64,Ptr{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMLabelCreate(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{DMLabel},StridedArray{DMLabel},Ptr{DMLabel},Ref{DMLabel}})
    err = ccall((:DMLabelCreate,petscRealSingle),PetscErrorCode,(Cstring,Ptr{DMLabel}),arg1,arg2)
    return err
end

function DMLabelView(arg1::DMLabel,arg2::PetscViewer{Float32})
    err = ccall((:DMLabelView,petscRealSingle),PetscErrorCode,(DMLabel,PetscViewer{Float32}),arg1,arg2)
    return err
end

function DMLabelDestroy(arg0::Type{Float32},arg1::Union{Ptr{DMLabel},StridedArray{DMLabel},Ptr{DMLabel},Ref{DMLabel}})
    err = ccall((:DMLabelDestroy,petscRealSingle),PetscErrorCode,(Ptr{DMLabel},),arg1)
    return err
end

function DMLabelDuplicate(arg0::Type{Float32},arg1::DMLabel,arg2::Union{Ptr{DMLabel},StridedArray{DMLabel},Ptr{DMLabel},Ref{DMLabel}})
    err = ccall((:DMLabelDuplicate,petscRealSingle),PetscErrorCode,(DMLabel,Ptr{DMLabel}),arg1,arg2)
    return err
end

function DMLabelGetName(arg0::Type{Float32},arg1::DMLabel,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:DMLabelGetName,petscRealSingle),PetscErrorCode,(DMLabel,Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function DMLabelGetValue(arg0::Type{Float32},arg1::DMLabel,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMLabelGetValue,petscRealSingle),PetscErrorCode,(DMLabel,Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function DMLabelSetValue(arg0::Type{Float32},arg1::DMLabel,arg2::Integer,arg3::Integer)
    err = ccall((:DMLabelSetValue,petscRealSingle),PetscErrorCode,(DMLabel,Int64,Int64),arg1,arg2,arg3)
    return err
end

function DMLabelClearValue(arg0::Type{Float32},arg1::DMLabel,arg2::Integer,arg3::Integer)
    err = ccall((:DMLabelClearValue,petscRealSingle),PetscErrorCode,(DMLabel,Int64,Int64),arg1,arg2,arg3)
    return err
end

function DMLabelInsertIS(arg1::DMLabel,arg2::IS{Float32},arg3::Integer)
    err = ccall((:DMLabelInsertIS,petscRealSingle),PetscErrorCode,(DMLabel,IS{Float32},Int64),arg1,arg2,arg3)
    return err
end

function DMLabelGetNumValues(arg0::Type{Float32},arg1::DMLabel,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMLabelGetNumValues,petscRealSingle),PetscErrorCode,(DMLabel,Ptr{Int64}),arg1,arg2)
    return err
end

function DMLabelGetStratumBounds(arg0::Type{Float32},arg1::DMLabel,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMLabelGetStratumBounds,petscRealSingle),PetscErrorCode,(DMLabel,Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function DMLabelGetValueIS(arg1::DMLabel,arg2::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:DMLabelGetValueIS,petscRealSingle),PetscErrorCode,(DMLabel,Ptr{IS{Float32}}),arg1,arg2)
    return err
end

function DMLabelStratumHasPoint(arg0::Type{Float32},arg1::DMLabel,arg2::Integer,arg3::Integer,arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:DMLabelStratumHasPoint,petscRealSingle),PetscErrorCode,(DMLabel,Int64,Int64,Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function DMLabelGetStratumSize(arg0::Type{Float32},arg1::DMLabel,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMLabelGetStratumSize,petscRealSingle),PetscErrorCode,(DMLabel,Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function DMLabelGetStratumIS(arg1::DMLabel,arg2::Integer,arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:DMLabelGetStratumIS,petscRealSingle),PetscErrorCode,(DMLabel,Int64,Ptr{IS{Float32}}),arg1,arg2,arg3)
    return err
end

function DMLabelClearStratum(arg0::Type{Float32},arg1::DMLabel,arg2::Integer)
    err = ccall((:DMLabelClearStratum,petscRealSingle),PetscErrorCode,(DMLabel,Int64),arg1,arg2)
    return err
end

function DMLabelCreateIndex(arg0::Type{Float32},arg1::DMLabel,arg2::Integer,arg3::Integer)
    err = ccall((:DMLabelCreateIndex,petscRealSingle),PetscErrorCode,(DMLabel,Int64,Int64),arg1,arg2,arg3)
    return err
end

function DMLabelDestroyIndex(arg0::Type{Float32},arg1::DMLabel)
    err = ccall((:DMLabelDestroyIndex,petscRealSingle),PetscErrorCode,(DMLabel,),arg1)
    return err
end

function DMLabelHasValue(arg0::Type{Float32},arg1::DMLabel,arg2::Integer,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:DMLabelHasValue,petscRealSingle),PetscErrorCode,(DMLabel,Int64,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function DMLabelHasPoint(arg0::Type{Float32},arg1::DMLabel,arg2::Integer,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:DMLabelHasPoint,petscRealSingle),PetscErrorCode,(DMLabel,Int64,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function DMLabelFilter(arg0::Type{Float32},arg1::DMLabel,arg2::Integer,arg3::Integer)
    err = ccall((:DMLabelFilter,petscRealSingle),PetscErrorCode,(DMLabel,Int64,Int64),arg1,arg2,arg3)
    return err
end

function DMLabelPermute(arg1::DMLabel,arg2::IS{Float32},arg3::Union{Ptr{DMLabel},StridedArray{DMLabel},Ptr{DMLabel},Ref{DMLabel}})
    err = ccall((:DMLabelPermute,petscRealSingle),PetscErrorCode,(DMLabel,IS{Float32},Ptr{DMLabel}),arg1,arg2,arg3)
    return err
end

function DMLabelDistribute(arg0::Type{Float32},arg1::DMLabel,arg2::PetscSF,arg3::Union{Ptr{DMLabel},StridedArray{DMLabel},Ptr{DMLabel},Ref{DMLabel}})
    err = ccall((:DMLabelDistribute,petscRealSingle),PetscErrorCode,(DMLabel,PetscSF,Ptr{DMLabel}),arg1,arg2,arg3)
    return err
end

function DMPlexCreateLabel(arg0::Type{Float32},arg1::DM,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:DMPlexCreateLabel,petscRealSingle),PetscErrorCode,(DM,Cstring),arg1,arg2)
    return err
end

function DMPlexGetLabelValue(arg0::Type{Float32},arg1::DM,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetLabelValue,petscRealSingle),PetscErrorCode,(DM,Cstring,Int64,Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexSetLabelValue(arg0::Type{Float32},arg1::DM,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer,arg4::Integer)
    err = ccall((:DMPlexSetLabelValue,petscRealSingle),PetscErrorCode,(DM,Cstring,Int64,Int64),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexClearLabelValue(arg0::Type{Float32},arg1::DM,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer,arg4::Integer)
    err = ccall((:DMPlexClearLabelValue,petscRealSingle),PetscErrorCode,(DM,Cstring,Int64,Int64),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexGetLabelSize(arg0::Type{Float32},arg1::DM,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetLabelSize,petscRealSingle),PetscErrorCode,(DM,Cstring,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function DMPlexGetLabelIdIS(arg1::DM,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:DMPlexGetLabelIdIS,petscRealSingle),PetscErrorCode,(DM,Cstring,Ptr{IS{Float32}}),arg1,arg2,arg3)
    return err
end

function DMPlexGetStratumSize(arg0::Type{Float32},arg1::DM,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetStratumSize,petscRealSingle),PetscErrorCode,(DM,Cstring,Int64,Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexGetStratumIS(arg1::DM,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer,arg4::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:DMPlexGetStratumIS,petscRealSingle),PetscErrorCode,(DM,Cstring,Int64,Ptr{IS{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexClearLabelStratum(arg0::Type{Float32},arg1::DM,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer)
    err = ccall((:DMPlexClearLabelStratum,petscRealSingle),PetscErrorCode,(DM,Cstring,Int64),arg1,arg2,arg3)
    return err
end

function DMPlexGetLabelOutput(arg0::Type{Float32},arg1::DM,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:DMPlexGetLabelOutput,petscRealSingle),PetscErrorCode,(DM,Cstring,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function DMPlexSetLabelOutput(arg0::Type{Float32},arg1::DM,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::PetscBool)
    err = ccall((:DMPlexSetLabelOutput,petscRealSingle),PetscErrorCode,(DM,Cstring,PetscBool),arg1,arg2,arg3)
    return err
end

function PetscSectionCreateGlobalSectionLabel(arg0::Type{Float32},arg1::PetscSection,arg2::PetscSF,arg3::PetscBool,arg4::DMLabel,arg5::Integer,arg6::Union{Ptr{PetscSection},StridedArray{PetscSection},Ptr{PetscSection},Ref{PetscSection}})
    err = ccall((:PetscSectionCreateGlobalSectionLabel,petscRealSingle),PetscErrorCode,(PetscSection,PetscSF,PetscBool,DMLabel,Int64,Ptr{PetscSection}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMPlexGetNumLabels(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetNumLabels,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64}),arg1,arg2)
    return err
end

function DMPlexGetLabelName(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:DMPlexGetLabelName,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Ptr{UInt8}}),arg1,arg2,arg3)
    return err
end

function DMPlexHasLabel(arg0::Type{Float32},arg1::DM,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:DMPlexHasLabel,petscRealSingle),PetscErrorCode,(DM,Cstring,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function DMPlexGetLabel(arg0::Type{Float32},arg1::DM,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{DMLabel},StridedArray{DMLabel},Ptr{DMLabel},Ref{DMLabel}})
    err = ccall((:DMPlexGetLabel,petscRealSingle),PetscErrorCode,(DM,Cstring,Ptr{DMLabel}),arg1,arg2,arg3)
    return err
end

function DMPlexGetLabelByNum(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{DMLabel},StridedArray{DMLabel},Ptr{DMLabel},Ref{DMLabel}})
    err = ccall((:DMPlexGetLabelByNum,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{DMLabel}),arg1,arg2,arg3)
    return err
end

function DMPlexAddLabel(arg0::Type{Float32},arg1::DM,arg2::DMLabel)
    err = ccall((:DMPlexAddLabel,petscRealSingle),PetscErrorCode,(DM,DMLabel),arg1,arg2)
    return err
end

function DMPlexRemoveLabel(arg0::Type{Float32},arg1::DM,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{DMLabel},StridedArray{DMLabel},Ptr{DMLabel},Ref{DMLabel}})
    err = ccall((:DMPlexRemoveLabel,petscRealSingle),PetscErrorCode,(DM,Cstring,Ptr{DMLabel}),arg1,arg2,arg3)
    return err
end

function DMPlexGetCellNumbering(arg1::DM,arg2::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:DMPlexGetCellNumbering,petscRealSingle),PetscErrorCode,(DM,Ptr{IS{Float32}}),arg1,arg2)
    return err
end

function DMPlexGetVertexNumbering(arg1::DM,arg2::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:DMPlexGetVertexNumbering,petscRealSingle),PetscErrorCode,(DM,Ptr{IS{Float32}}),arg1,arg2)
    return err
end

function DMPlexCreatePointNumbering(arg1::DM,arg2::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:DMPlexCreatePointNumbering,petscRealSingle),PetscErrorCode,(DM,Ptr{IS{Float32}}),arg1,arg2)
    return err
end

function DMPlexGetDepth(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetDepth,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64}),arg1,arg2)
    return err
end

function DMPlexGetDepthLabel(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{DMLabel},StridedArray{DMLabel},Ptr{DMLabel},Ref{DMLabel}})
    err = ccall((:DMPlexGetDepthLabel,petscRealSingle),PetscErrorCode,(DM,Ptr{DMLabel}),arg1,arg2)
    return err
end

function DMPlexGetDepthStratum(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetDepthStratum,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexGetHeightStratum(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetHeightStratum,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexGetMeet(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMPlexGetMeet,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Int64},Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexGetFullMeet(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMPlexGetFullMeet,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Int64},Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexRestoreMeet(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMPlexRestoreMeet,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Int64},Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexGetJoin(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMPlexGetJoin,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Int64},Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexGetFullJoin(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMPlexGetFullJoin,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Int64},Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexRestoreJoin(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMPlexRestoreJoin,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Int64},Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexGetTransitiveClosure(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::PetscBool,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMPlexGetTransitiveClosure,petscRealSingle),PetscErrorCode,(DM,Int64,PetscBool,Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexRestoreTransitiveClosure(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::PetscBool,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMPlexRestoreTransitiveClosure,petscRealSingle),PetscErrorCode,(DM,Int64,PetscBool,Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexGenerate(arg0::Type{Float32},arg1::DM,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::PetscBool,arg4::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:DMPlexGenerate,petscRealSingle),PetscErrorCode,(DM,Cstring,PetscBool,Ptr{DM}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexCopyCoordinates(arg0::Type{Float32},arg1::DM,arg2::DM)
    err = ccall((:DMPlexCopyCoordinates,petscRealSingle),PetscErrorCode,(DM,DM),arg1,arg2)
    return err
end

function DMPlexCopyLabels(arg0::Type{Float32},arg1::DM,arg2::DM)
    err = ccall((:DMPlexCopyLabels,petscRealSingle),PetscErrorCode,(DM,DM),arg1,arg2)
    return err
end

function DMPlexCreateDoublet(arg0::Type{Float32},arg1::MPI_Comm,arg2::Integer,arg3::PetscBool,arg4::PetscBool,arg5::PetscBool,arg6::Float32,arg7::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:DMPlexCreateDoublet,petscRealSingle),PetscErrorCode,(comm_type,Int64,PetscBool,PetscBool,PetscBool,Float32,Ptr{DM}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function DMPlexCreateSquareBoundary(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexCreateSquareBoundary,petscRealSingle),PetscErrorCode,(DM,Ptr{Float32},Ptr{Float32},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexCreateCubeBoundary(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexCreateCubeBoundary,petscRealSingle),PetscErrorCode,(DM,Ptr{Float32},Ptr{Float32},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexCreateSquareMesh(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::DMBoundaryType,arg6::DMBoundaryType)
    err = ccall((:DMPlexCreateSquareMesh,petscRealSingle),PetscErrorCode,(DM,Ptr{Float32},Ptr{Float32},Ptr{Int64},DMBoundaryType,DMBoundaryType),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMPlexCreateBoxMesh(arg0::Type{Float32},arg1::MPI_Comm,arg2::Integer,arg3::PetscBool,arg4::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:DMPlexCreateBoxMesh,petscRealSingle),PetscErrorCode,(comm_type,Int64,PetscBool,Ptr{DM}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexCreateHexBoxMesh(arg0::Type{Float32},arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::DMBoundaryType,arg5::DMBoundaryType,arg6::DMBoundaryType,arg7::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:DMPlexCreateHexBoxMesh,petscRealSingle),PetscErrorCode,(comm_type,Int64,Ptr{Int64},DMBoundaryType,DMBoundaryType,DMBoundaryType,Ptr{DM}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function DMPlexCreateConeSection(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{PetscSection},StridedArray{PetscSection},Ptr{PetscSection},Ref{PetscSection}})
    err = ccall((:DMPlexCreateConeSection,petscRealSingle),PetscErrorCode,(DM,Ptr{PetscSection}),arg1,arg2)
    return err
end

function DMPlexInvertCell(arg0::Type{Float32},arg1::Integer,arg2::Integer,arg3::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:DMPlexInvertCell,petscRealSingle),PetscErrorCode,(Int64,Int64,Ptr{Cint}),arg1,arg2,arg3)
    return err
end

function DMPlexLocalizeCoordinate(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:DMPlexLocalizeCoordinate,petscRealSingle),PetscErrorCode,(DM,Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function DMPlexLocalizeCoordinates(arg0::Type{Float32},arg1::DM)
    err = ccall((:DMPlexLocalizeCoordinates,petscRealSingle),PetscErrorCode,(DM,),arg1)
    return err
end

function DMPlexCheckSymmetry(arg0::Type{Float32},arg1::DM)
    err = ccall((:DMPlexCheckSymmetry,petscRealSingle),PetscErrorCode,(DM,),arg1)
    return err
end

function DMPlexCheckSkeleton(arg0::Type{Float32},arg1::DM,arg2::PetscBool,arg3::Integer)
    err = ccall((:DMPlexCheckSkeleton,petscRealSingle),PetscErrorCode,(DM,PetscBool,Int64),arg1,arg2,arg3)
    return err
end

function DMPlexCheckFaces(arg0::Type{Float32},arg1::DM,arg2::PetscBool,arg3::Integer)
    err = ccall((:DMPlexCheckFaces,petscRealSingle),PetscErrorCode,(DM,PetscBool,Int64),arg1,arg2,arg3)
    return err
end

function DMPlexTriangleSetOptions(arg0::Type{Float32},arg1::DM,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:DMPlexTriangleSetOptions,petscRealSingle),PetscErrorCode,(DM,Cstring),arg1,arg2)
    return err
end

function DMPlexTetgenSetOptions(arg0::Type{Float32},arg1::DM,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:DMPlexTetgenSetOptions,petscRealSingle),PetscErrorCode,(DM,Cstring),arg1,arg2)
    return err
end

function DMPlexCreateNeighborCSR(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMPlexCreateNeighborCSR,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexGetPartitioner(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{PetscPartitioner},StridedArray{PetscPartitioner},Ptr{PetscPartitioner},Ref{PetscPartitioner}})
    err = ccall((:DMPlexGetPartitioner,petscRealSingle),PetscErrorCode,(DM,Ptr{PetscPartitioner}),arg1,arg2)
    return err
end

function DMPlexSetPartitioner(arg0::Type{Float32},arg1::DM,arg2::PetscPartitioner)
    err = ccall((:DMPlexSetPartitioner,petscRealSingle),PetscErrorCode,(DM,PetscPartitioner),arg1,arg2)
    return err
end

function DMPlexCreatePartition(arg1::DM,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer,arg4::PetscBool,arg5::Union{Ptr{PetscSection},StridedArray{PetscSection},Ptr{PetscSection},Ref{PetscSection}},arg6::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg7::Union{Ptr{PetscSection},StridedArray{PetscSection},Ptr{PetscSection},Ref{PetscSection}},arg8::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:DMPlexCreatePartition,petscRealSingle),PetscErrorCode,(DM,Cstring,Int64,PetscBool,Ptr{PetscSection},Ptr{IS{Float32}},Ptr{PetscSection},Ptr{IS{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function DMPlexCreatePartitionerGraph(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMPlexCreatePartitionerGraph,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexCreatePartitionClosure(arg1::DM,arg2::PetscSection,arg3::IS{Float32},arg4::Union{Ptr{PetscSection},StridedArray{PetscSection},Ptr{PetscSection},Ref{PetscSection}},arg5::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:DMPlexCreatePartitionClosure,petscRealSingle),PetscErrorCode,(DM,PetscSection,IS{Float32},Ptr{PetscSection},Ptr{IS{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexPartitionLabelInvert(arg0::Type{Float32},arg1::DM,arg2::DMLabel,arg3::PetscSF,arg4::DMLabel)
    err = ccall((:DMPlexPartitionLabelInvert,petscRealSingle),PetscErrorCode,(DM,DMLabel,PetscSF,DMLabel),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexPartitionLabelClosure(arg0::Type{Float32},arg1::DM,arg2::DMLabel)
    err = ccall((:DMPlexPartitionLabelClosure,petscRealSingle),PetscErrorCode,(DM,DMLabel),arg1,arg2)
    return err
end

function DMPlexPartitionLabelAdjacency(arg0::Type{Float32},arg1::DM,arg2::DMLabel)
    err = ccall((:DMPlexPartitionLabelAdjacency,petscRealSingle),PetscErrorCode,(DM,DMLabel),arg1,arg2)
    return err
end

function DMPlexPartitionLabelCreateSF(arg0::Type{Float32},arg1::DM,arg2::DMLabel,arg3::Union{Ptr{PetscSF},StridedArray{PetscSF},Ptr{PetscSF},Ref{PetscSF}})
    err = ccall((:DMPlexPartitionLabelCreateSF,petscRealSingle),PetscErrorCode,(DM,DMLabel,Ptr{PetscSF}),arg1,arg2,arg3)
    return err
end

function DMPlexDistribute(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{PetscSF},StridedArray{PetscSF},Ptr{PetscSF},Ref{PetscSF}},arg4::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:DMPlexDistribute,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{PetscSF},Ptr{DM}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexDistributeOverlap(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{PetscSF},StridedArray{PetscSF},Ptr{PetscSF},Ref{PetscSF}},arg4::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:DMPlexDistributeOverlap,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{PetscSF},Ptr{DM}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexDistributeField(arg1::DM,arg2::PetscSF,arg3::PetscSection,arg4::Vec{Float32},arg5::PetscSection,arg6::Vec{Float32})
    err = ccall((:DMPlexDistributeField,petscRealSingle),PetscErrorCode,(DM,PetscSF,PetscSection,Vec{Float32},PetscSection,Vec{Float32}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMPlexDistributeFieldIS(arg1::DM,arg2::PetscSF,arg3::PetscSection,arg4::IS{Float32},arg5::PetscSection,arg6::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:DMPlexDistributeFieldIS,petscRealSingle),PetscErrorCode,(DM,PetscSF,PetscSection,IS{Float32},PetscSection,Ptr{IS{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

#= skipping function with undefined symbols: 
 function DMPlexDistributeData(arg0::Type{Float32},arg1::DM,arg2::PetscSF,arg3::PetscSection,arg4::MPI_Datatype,arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg6::PetscSection,arg7::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    ccall((:DMPlexDistributeData,petscRealSingle),PetscErrorCode,(DM,PetscSF,PetscSection,MPI_Datatype,Ptr{Void},PetscSection,Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end 
=#
function DMPlexMigrate(arg0::Type{Float32},arg1::DM,arg2::PetscSF,arg3::DM)
    err = ccall((:DMPlexMigrate,petscRealSingle),PetscErrorCode,(DM,PetscSF,DM),arg1,arg2,arg3)
    return err
end

function DMPlexSetAdjacencyUseCone(arg0::Type{Float32},arg1::DM,arg2::PetscBool)
    err = ccall((:DMPlexSetAdjacencyUseCone,petscRealSingle),PetscErrorCode,(DM,PetscBool),arg1,arg2)
    return err
end

function DMPlexGetAdjacencyUseCone(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:DMPlexGetAdjacencyUseCone,petscRealSingle),PetscErrorCode,(DM,Ptr{PetscBool}),arg1,arg2)
    return err
end

function DMPlexSetAdjacencyUseClosure(arg0::Type{Float32},arg1::DM,arg2::PetscBool)
    err = ccall((:DMPlexSetAdjacencyUseClosure,petscRealSingle),PetscErrorCode,(DM,PetscBool),arg1,arg2)
    return err
end

function DMPlexGetAdjacencyUseClosure(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:DMPlexGetAdjacencyUseClosure,petscRealSingle),PetscErrorCode,(DM,Ptr{PetscBool}),arg1,arg2)
    return err
end

function DMPlexSetAdjacencyUseAnchors(arg0::Type{Float32},arg1::DM,arg2::PetscBool)
    err = ccall((:DMPlexSetAdjacencyUseAnchors,petscRealSingle),PetscErrorCode,(DM,PetscBool),arg1,arg2)
    return err
end

function DMPlexGetAdjacencyUseAnchors(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:DMPlexGetAdjacencyUseAnchors,petscRealSingle),PetscErrorCode,(DM,Ptr{PetscBool}),arg1,arg2)
    return err
end

function DMPlexGetAdjacency(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMPlexGetAdjacency,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexGetOrdering(arg1::DM,arg2::MatOrderingType,arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:DMPlexGetOrdering,petscRealSingle),PetscErrorCode,(DM,Cstring,Ptr{IS{Float32}}),arg1,arg2,arg3)
    return err
end

function DMPlexPermute(arg1::DM,arg2::IS{Float32},arg3::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:DMPlexPermute,petscRealSingle),PetscErrorCode,(DM,IS{Float32},Ptr{DM}),arg1,arg2,arg3)
    return err
end

function DMPlexCreateProcessSF(arg1::DM,arg2::PetscSF,arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg4::Union{Ptr{PetscSF},StridedArray{PetscSF},Ptr{PetscSF},Ref{PetscSF}})
    err = ccall((:DMPlexCreateProcessSF,petscRealSingle),PetscErrorCode,(DM,PetscSF,Ptr{IS{Float32}},Ptr{PetscSF}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexCreateTwoSidedProcessSF(arg1::DM,arg2::PetscSF,arg3::PetscSection,arg4::IS{Float32},arg5::PetscSection,arg6::IS{Float32},arg7::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg8::Union{Ptr{PetscSF},StridedArray{PetscSF},Ptr{PetscSF},Ref{PetscSF}})
    err = ccall((:DMPlexCreateTwoSidedProcessSF,petscRealSingle),PetscErrorCode,(DM,PetscSF,PetscSection,IS{Float32},PetscSection,IS{Float32},Ptr{IS{Float32}},Ptr{PetscSF}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function DMPlexDistributeOwnership(arg1::DM,arg2::PetscSection,arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg4::PetscSection,arg5::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:DMPlexDistributeOwnership,petscRealSingle),PetscErrorCode,(DM,PetscSection,Ptr{IS{Float32}},PetscSection,Ptr{IS{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexCreateOverlap(arg1::DM,arg2::Integer,arg3::PetscSection,arg4::IS{Float32},arg5::PetscSection,arg6::IS{Float32},arg7::Union{Ptr{DMLabel},StridedArray{DMLabel},Ptr{DMLabel},Ref{DMLabel}})
    err = ccall((:DMPlexCreateOverlap,petscRealSingle),PetscErrorCode,(DM,Int64,PetscSection,IS{Float32},PetscSection,IS{Float32},Ptr{DMLabel}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function DMPlexCreateOverlapMigrationSF(arg0::Type{Float32},arg1::DM,arg2::PetscSF,arg3::Union{Ptr{PetscSF},StridedArray{PetscSF},Ptr{PetscSF},Ref{PetscSF}})
    err = ccall((:DMPlexCreateOverlapMigrationSF,petscRealSingle),PetscErrorCode,(DM,PetscSF,Ptr{PetscSF}),arg1,arg2,arg3)
    return err
end

function DMPlexStratifyMigrationSF(arg0::Type{Float32},arg1::DM,arg2::PetscSF,arg3::Union{Ptr{PetscSF},StridedArray{PetscSF},Ptr{PetscSF},Ref{PetscSF}})
    err = ccall((:DMPlexStratifyMigrationSF,petscRealSingle),PetscErrorCode,(DM,PetscSF,Ptr{PetscSF}),arg1,arg2,arg3)
    return err
end

function DMPlexCreateSubmesh(arg0::Type{Float32},arg1::DM,arg2::DMLabel,arg3::Integer,arg4::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:DMPlexCreateSubmesh,petscRealSingle),PetscErrorCode,(DM,DMLabel,Int64,Ptr{DM}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexCreateHybridMesh(arg0::Type{Float32},arg1::DM,arg2::DMLabel,arg3::Union{Ptr{DMLabel},StridedArray{DMLabel},Ptr{DMLabel},Ref{DMLabel}},arg4::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:DMPlexCreateHybridMesh,petscRealSingle),PetscErrorCode,(DM,DMLabel,Ptr{DMLabel},Ptr{DM}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexGetSubpointMap(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{DMLabel},StridedArray{DMLabel},Ptr{DMLabel},Ref{DMLabel}})
    err = ccall((:DMPlexGetSubpointMap,petscRealSingle),PetscErrorCode,(DM,Ptr{DMLabel}),arg1,arg2)
    return err
end

function DMPlexSetSubpointMap(arg0::Type{Float32},arg1::DM,arg2::DMLabel)
    err = ccall((:DMPlexSetSubpointMap,petscRealSingle),PetscErrorCode,(DM,DMLabel),arg1,arg2)
    return err
end

function DMPlexCreateSubpointIS(arg1::DM,arg2::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:DMPlexCreateSubpointIS,petscRealSingle),PetscErrorCode,(DM,Ptr{IS{Float32}}),arg1,arg2)
    return err
end

function DMPlexMarkBoundaryFaces(arg0::Type{Float32},arg1::DM,arg2::DMLabel)
    err = ccall((:DMPlexMarkBoundaryFaces,petscRealSingle),PetscErrorCode,(DM,DMLabel),arg1,arg2)
    return err
end

function DMPlexLabelComplete(arg0::Type{Float32},arg1::DM,arg2::DMLabel)
    err = ccall((:DMPlexLabelComplete,petscRealSingle),PetscErrorCode,(DM,DMLabel),arg1,arg2)
    return err
end

function DMPlexLabelCohesiveComplete(arg0::Type{Float32},arg1::DM,arg2::DMLabel,arg3::DMLabel,arg4::PetscBool,arg5::DM)
    err = ccall((:DMPlexLabelCohesiveComplete,petscRealSingle),PetscErrorCode,(DM,DMLabel,DMLabel,PetscBool,DM),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexLabelAddCells(arg0::Type{Float32},arg1::DM,arg2::DMLabel)
    err = ccall((:DMPlexLabelAddCells,petscRealSingle),PetscErrorCode,(DM,DMLabel),arg1,arg2)
    return err
end

function DMPlexGetRefinementLimit(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:DMPlexGetRefinementLimit,petscRealSingle),PetscErrorCode,(DM,Ptr{Float32}),arg1,arg2)
    return err
end

function DMPlexSetRefinementLimit(arg0::Type{Float32},arg1::DM,arg2::Float32)
    err = ccall((:DMPlexSetRefinementLimit,petscRealSingle),PetscErrorCode,(DM,Float32),arg1,arg2)
    return err
end

function DMPlexGetRefinementUniform(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:DMPlexGetRefinementUniform,petscRealSingle),PetscErrorCode,(DM,Ptr{PetscBool}),arg1,arg2)
    return err
end

function DMPlexSetRefinementUniform(arg0::Type{Float32},arg1::DM,arg2::PetscBool)
    err = ccall((:DMPlexSetRefinementUniform,petscRealSingle),PetscErrorCode,(DM,PetscBool),arg1,arg2)
    return err
end

function DMPlexGetCoarseDM(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:DMPlexGetCoarseDM,petscRealSingle),PetscErrorCode,(DM,Ptr{DM}),arg1,arg2)
    return err
end

function DMPlexSetCoarseDM(arg0::Type{Float32},arg1::DM,arg2::DM)
    err = ccall((:DMPlexSetCoarseDM,petscRealSingle),PetscErrorCode,(DM,DM),arg1,arg2)
    return err
end

function DMPlexCreateCoarsePointIS(arg1::DM,arg2::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:DMPlexCreateCoarsePointIS,petscRealSingle),PetscErrorCode,(DM,Ptr{IS{Float32}}),arg1,arg2)
    return err
end

function DMPlexGetNumFaceVertices(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetNumFaceVertices,petscRealSingle),PetscErrorCode,(DM,Int64,Int64,Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexGetOrientedFace(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg9::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:DMPlexGetOrientedFace,petscRealSingle),PetscErrorCode,(DM,Int64,Int64,Ptr{Int64},Int64,Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
    return err
end

function DMPlexGetMinRadius(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:DMPlexGetMinRadius,petscRealSingle),PetscErrorCode,(DM,Ptr{Float32}),arg1,arg2)
    return err
end

function DMPlexSetMinRadius(arg0::Type{Float32},arg1::DM,arg2::Float32)
    err = ccall((:DMPlexSetMinRadius,petscRealSingle),PetscErrorCode,(DM,Float32),arg1,arg2)
    return err
end

function DMPlexComputeCellGeometryFVM(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:DMPlexComputeCellGeometryFVM,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Float32},Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexComputeGeometryFVM(arg1::DM,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:DMPlexComputeGeometryFVM,petscRealSingle),PetscErrorCode,(DM,Ptr{Vec{Float32}},Ptr{Vec{Float32}}),arg1,arg2,arg3)
    return err
end

function DMPlexComputeGradientFVM(arg1::DM,arg2::PetscFV,arg3::Vec{Float32},arg4::Vec{Float32},arg5::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:DMPlexComputeGradientFVM,petscRealSingle),PetscErrorCode,(DM,PetscFV,Vec{Float32},Vec{Float32},Ptr{DM}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexInsertBoundaryValues(arg1::DM,arg2::Vec{Float32},arg3::Float32,arg4::Vec{Float32},arg5::Vec{Float32},arg6::Vec{Float32})
    err = ccall((:DMPlexInsertBoundaryValues,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},Float32,Vec{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMPlexCreateSection(arg1::DM,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Integer,arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg9::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg10::IS{Float32},arg11::Union{Ptr{PetscSection},StridedArray{PetscSection},Ptr{PetscSection},Ref{PetscSection}})
    err = ccall((:DMPlexCreateSection,petscRealSingle),PetscErrorCode,(DM,Int64,Int64,Ptr{Int64},Ptr{Int64},Int64,Ptr{Int64},Ptr{IS{Float32}},Ptr{IS{Float32}},IS{Float32},Ptr{PetscSection}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11)
    return err
end

function DMPlexComputeCellGeometryAffineFEM(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:DMPlexComputeCellGeometryAffineFEM,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMPlexComputeCellGeometryFEM(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::PetscFE,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:DMPlexComputeCellGeometryFEM,petscRealSingle),PetscErrorCode,(DM,Int64,PetscFE,Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function DMPlexComputeGeometryFEM(arg1::DM,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:DMPlexComputeGeometryFEM,petscRealSingle),PetscErrorCode,(DM,Ptr{Vec{Float32}}),arg1,arg2)
    return err
end

function DMPlexVecGetClosure(arg1::DM,arg2::PetscSection,arg3::Vec{Float32},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:DMPlexVecGetClosure,petscRealSingle),PetscErrorCode,(DM,PetscSection,Vec{Float32},Int64,Ptr{Int64},Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMPlexVecRestoreClosure(arg1::DM,arg2::PetscSection,arg3::Vec{Float32},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:DMPlexVecRestoreClosure,petscRealSingle),PetscErrorCode,(DM,PetscSection,Vec{Float32},Int64,Ptr{Int64},Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMPlexVecSetClosure(arg1::DM,arg2::PetscSection,arg3::Vec{Float32},arg4::Integer,arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::InsertMode)
    err = ccall((:DMPlexVecSetClosure,petscRealSingle),PetscErrorCode,(DM,PetscSection,Vec{Float32},Int64,Ptr{Float32},InsertMode),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMPlexMatSetClosure(arg1::DM,arg2::PetscSection,arg3::PetscSection,arg4::Mat{Float32},arg5::Integer,arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::InsertMode)
    err = ccall((:DMPlexMatSetClosure,petscRealSingle),PetscErrorCode,(DM,PetscSection,PetscSection,Mat{Float32},Int64,Ptr{Float32},InsertMode),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function DMPlexMatSetClosureRefined(arg1::DM,arg2::PetscSection,arg3::PetscSection,arg4::DM,arg5::PetscSection,arg6::PetscSection,arg7::Mat{Float32},arg8::Integer,arg9::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg10::InsertMode)
    err = ccall((:DMPlexMatSetClosureRefined,petscRealSingle),PetscErrorCode,(DM,PetscSection,PetscSection,DM,PetscSection,PetscSection,Mat{Float32},Int64,Ptr{Float32},InsertMode),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function DMPlexMatGetClosureIndicesRefined(arg0::Type{Float32},arg1::DM,arg2::PetscSection,arg3::PetscSection,arg4::DM,arg5::PetscSection,arg6::PetscSection,arg7::Integer,arg8::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg9::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexMatGetClosureIndicesRefined,petscRealSingle),PetscErrorCode,(DM,PetscSection,PetscSection,DM,PetscSection,PetscSection,Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
    return err
end

function DMPlexCreateClosureIndex(arg0::Type{Float32},arg1::DM,arg2::PetscSection)
    err = ccall((:DMPlexCreateClosureIndex,petscRealSingle),PetscErrorCode,(DM,PetscSection),arg1,arg2)
    return err
end

function DMPlexCreateFromFile(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::PetscBool,arg4::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:DMPlexCreateFromFile,petscRealSingle),PetscErrorCode,(comm_type,Cstring,PetscBool,Ptr{DM}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexCreateExodus(arg0::Type{Float32},arg1::MPI_Comm,arg2::Integer,arg3::PetscBool,arg4::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:DMPlexCreateExodus,petscRealSingle),PetscErrorCode,(comm_type,Int64,PetscBool,Ptr{DM}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexCreateExodusFromFile(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::PetscBool,arg4::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:DMPlexCreateExodusFromFile,petscRealSingle),PetscErrorCode,(comm_type,Cstring,PetscBool,Ptr{DM}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexCreateCGNS(arg0::Type{Float32},arg1::MPI_Comm,arg2::Integer,arg3::PetscBool,arg4::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:DMPlexCreateCGNS,petscRealSingle),PetscErrorCode,(comm_type,Int64,PetscBool,Ptr{DM}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexCreateCGNSFromFile(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::PetscBool,arg4::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:DMPlexCreateCGNSFromFile,petscRealSingle),PetscErrorCode,(comm_type,Cstring,PetscBool,Ptr{DM}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexCreateGmsh(arg1::MPI_Comm,arg2::PetscViewer{Float32},arg3::PetscBool,arg4::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:DMPlexCreateGmsh,petscRealSingle),PetscErrorCode,(comm_type,PetscViewer{Float32},PetscBool,Ptr{DM}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexCreateGmshFromFile(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::PetscBool,arg4::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:DMPlexCreateGmshFromFile,petscRealSingle),PetscErrorCode,(comm_type,Cstring,PetscBool,Ptr{DM}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexCreateFluent(arg1::MPI_Comm,arg2::PetscViewer{Float32},arg3::PetscBool,arg4::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:DMPlexCreateFluent,petscRealSingle),PetscErrorCode,(comm_type,PetscViewer{Float32},PetscBool,Ptr{DM}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexCreateFluentFromFile(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::PetscBool,arg4::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:DMPlexCreateFluentFromFile,petscRealSingle),PetscErrorCode,(comm_type,Cstring,PetscBool,Ptr{DM}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexConstructGhostCells(arg0::Type{Float32},arg1::DM,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:DMPlexConstructGhostCells,petscRealSingle),PetscErrorCode,(DM,Cstring,Ptr{Int64},Ptr{DM}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexConstructCohesiveCells(arg0::Type{Float32},arg1::DM,arg2::DMLabel,arg3::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:DMPlexConstructCohesiveCells,petscRealSingle),PetscErrorCode,(DM,DMLabel,Ptr{DM}),arg1,arg2,arg3)
    return err
end

function DMPlexGetHybridBounds(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetHybridBounds,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexSetHybridBounds(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer)
    err = ccall((:DMPlexSetHybridBounds,petscRealSingle),PetscErrorCode,(DM,Int64,Int64,Int64,Int64),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexGetVTKCellHeight(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetVTKCellHeight,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64}),arg1,arg2)
    return err
end

function DMPlexSetVTKCellHeight(arg0::Type{Float32},arg1::DM,arg2::Integer)
    err = ccall((:DMPlexSetVTKCellHeight,petscRealSingle),PetscErrorCode,(DM,Int64),arg1,arg2)
    return err
end

function DMPlexVTKWriteAll(arg1::PetscObject,arg2::PetscViewer{Float32})
    err = ccall((:DMPlexVTKWriteAll,petscRealSingle),PetscErrorCode,(PetscObject,PetscViewer{Float32}),arg1,arg2)
    return err
end

function DMPlexGetScale(arg0::Type{Float32},arg1::DM,arg2::PetscUnit,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:DMPlexGetScale,petscRealSingle),PetscErrorCode,(DM,PetscUnit,Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function DMPlexSetScale(arg0::Type{Float32},arg1::DM,arg2::PetscUnit,arg3::Float32)
    err = ccall((:DMPlexSetScale,petscRealSingle),PetscErrorCode,(DM,PetscUnit,Float32),arg1,arg2,arg3)
    return err
end

function DMPlexAddBoundary(arg0::Type{Float32},arg1::DM,arg2::PetscBool,arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Integer,arg6::Integer,arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg9::Integer,arg10::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg11::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMPlexAddBoundary,petscRealSingle),PetscErrorCode,(DM,PetscBool,Cstring,Cstring,Int64,Int64,Ptr{Int64},Ptr{Void},Int64,Ptr{Int64},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11)
    return err
end

function DMPlexGetNumBoundary(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetNumBoundary,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64}),arg1,arg2)
    return err
end

function DMPlexGetBoundary(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg4::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg5::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg9::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg10::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg11::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg12::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:DMPlexGetBoundary,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{PetscBool},Ptr{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ptr{Int64},Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Void}},Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12)
    return err
end

function DMPlexIsBoundaryPoint(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:DMPlexIsBoundaryPoint,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function DMPlexCopyBoundary(arg0::Type{Float32},arg1::DM,arg2::DM)
    err = ccall((:DMPlexCopyBoundary,petscRealSingle),PetscErrorCode,(DM,DM),arg1,arg2)
    return err
end

function DMPlexInsertBoundaryValuesFEM(arg1::DM,arg2::Vec{Float32})
    err = ccall((:DMPlexInsertBoundaryValuesFEM,petscRealSingle),PetscErrorCode,(DM,Vec{Float32}),arg1,arg2)
    return err
end

function DMPlexSetMaxProjectionHeight(arg0::Type{Float32},arg1::DM,arg2::Integer)
    err = ccall((:DMPlexSetMaxProjectionHeight,petscRealSingle),PetscErrorCode,(DM,Int64),arg1,arg2)
    return err
end

function DMPlexGetMaxProjectionHeight(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetMaxProjectionHeight,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64}),arg1,arg2)
    return err
end

function DMPlexProjectFunction(arg1::DM,arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::InsertMode,arg5::Vec{Float32})
    err = ccall((:DMPlexProjectFunction,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{Void}},Ptr{Ptr{Void}},InsertMode,Vec{Float32}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexProjectFunctionLocal(arg1::DM,arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::InsertMode,arg5::Vec{Float32})
    err = ccall((:DMPlexProjectFunctionLocal,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{Void}},Ptr{Ptr{Void}},InsertMode,Vec{Float32}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexProjectFieldLocal(arg1::DM,arg2::Vec{Float32},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::InsertMode,arg5::Vec{Float32})
    err = ccall((:DMPlexProjectFieldLocal,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},Ptr{Ptr{Void}},InsertMode,Vec{Float32}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexComputeL2Diff(arg1::DM,arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::Vec{Float32},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:DMPlexComputeL2Diff,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{Void}},Ptr{Ptr{Void}},Vec{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexComputeL2GradientDiff(arg1::DM,arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::Vec{Float32},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:DMPlexComputeL2GradientDiff,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{Void}},Ptr{Ptr{Void}},Vec{Float32},Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMPlexComputeL2FieldDiff(arg1::DM,arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::Vec{Float32},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:DMPlexComputeL2FieldDiff,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{Void}},Ptr{Ptr{Void}},Vec{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexComputeIntegralFEM(arg1::DM,arg2::Vec{Float32},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMPlexComputeIntegralFEM,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},Ptr{Float32},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexComputeInterpolatorFEM(arg1::DM,arg2::DM,arg3::Mat{Float32},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMPlexComputeInterpolatorFEM,petscRealSingle),PetscErrorCode,(DM,DM,Mat{Float32},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexComputeInjectorFEM(arg1::DM,arg2::DM,arg3::Union{Ptr{VecScatter{Float32}},StridedArray{VecScatter{Float32}},Ptr{VecScatter{Float32}},Ref{VecScatter{Float32}}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMPlexComputeInjectorFEM,petscRealSingle),PetscErrorCode,(DM,DM,Ptr{VecScatter{Float32}},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexCreateRigidBody(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{MatNullSpace},StridedArray{MatNullSpace},Ptr{MatNullSpace},Ref{MatNullSpace}})
    err = ccall((:DMPlexCreateRigidBody,petscRealSingle),PetscErrorCode,(DM,Ptr{MatNullSpace}),arg1,arg2)
    return err
end

function DMPlexSNESComputeResidualFEM(arg1::DM,arg2::Vec{Float32},arg3::Vec{Float32},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMPlexSNESComputeResidualFEM,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},Vec{Float32},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexSNESComputeJacobianFEM(arg1::DM,arg2::Vec{Float32},arg3::Mat{Float32},arg4::Mat{Float32},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMPlexSNESComputeJacobianFEM,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},Mat{Float32},Mat{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexTSComputeRHSFunctionFVM(arg1::DM,arg2::Float32,arg3::Vec{Float32},arg4::Vec{Float32},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMPlexTSComputeRHSFunctionFVM,petscRealSingle),PetscErrorCode,(DM,Float32,Vec{Float32},Vec{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexTSComputeIFunctionFEM(arg1::DM,arg2::Float32,arg3::Vec{Float32},arg4::Vec{Float32},arg5::Vec{Float32},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMPlexTSComputeIFunctionFEM,petscRealSingle),PetscErrorCode,(DM,Float32,Vec{Float32},Vec{Float32},Vec{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMPlexComputeRHSFunctionFVM(arg1::DM,arg2::Float32,arg3::Vec{Float32},arg4::Vec{Float32},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMPlexComputeRHSFunctionFVM,petscRealSingle),PetscErrorCode,(DM,Float32,Vec{Float32},Vec{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexGetAnchors(arg1::DM,arg2::Union{Ptr{PetscSection},StridedArray{PetscSection},Ptr{PetscSection},Ref{PetscSection}},arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:DMPlexGetAnchors,petscRealSingle),PetscErrorCode,(DM,Ptr{PetscSection},Ptr{IS{Float32}}),arg1,arg2,arg3)
    return err
end

function DMPlexSetAnchors(arg1::DM,arg2::PetscSection,arg3::IS{Float32})
    err = ccall((:DMPlexSetAnchors,petscRealSingle),PetscErrorCode,(DM,PetscSection,IS{Float32}),arg1,arg2,arg3)
    return err
end

function DMPlexSetReferenceTree(arg0::Type{Float32},arg1::DM,arg2::DM)
    err = ccall((:DMPlexSetReferenceTree,petscRealSingle),PetscErrorCode,(DM,DM),arg1,arg2)
    return err
end

function DMPlexGetReferenceTree(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:DMPlexGetReferenceTree,petscRealSingle),PetscErrorCode,(DM,Ptr{DM}),arg1,arg2)
    return err
end

function DMPlexReferenceTreeGetChildSymmetry(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexReferenceTreeGetChildSymmetry,petscRealSingle),PetscErrorCode,(DM,Int64,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function DMPlexCreateDefaultReferenceTree(arg0::Type{Float32},arg1::MPI_Comm,arg2::Integer,arg3::PetscBool,arg4::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:DMPlexCreateDefaultReferenceTree,petscRealSingle),PetscErrorCode,(comm_type,Int64,PetscBool,Ptr{DM}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexSetTree(arg0::Type{Float32},arg1::DM,arg2::PetscSection,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexSetTree,petscRealSingle),PetscErrorCode,(DM,PetscSection,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexGetTree(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{PetscSection},StridedArray{PetscSection},Ptr{PetscSection},Ref{PetscSection}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg5::Union{Ptr{PetscSection},StridedArray{PetscSection},Ptr{PetscSection},Ref{PetscSection}},arg6::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMPlexGetTree,petscRealSingle),PetscErrorCode,(DM,Ptr{PetscSection},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}},Ptr{PetscSection},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMPlexGetTreeParent(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetTreeParent,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexGetTreeChildren(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMPlexGetTreeChildren,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexTreeRefineCell(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:DMPlexTreeRefineCell,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{DM}),arg1,arg2,arg3)
    return err
end

function DMRedundantCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::PetscMPIInt,arg3::Integer,arg4::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:DMRedundantCreate,petscRealSingle),PetscErrorCode,(comm_type,PetscMPIInt,Int64,Ptr{DM}),arg1,arg2,arg3,arg4)
    return err
end

function DMRedundantSetSize(arg0::Type{Float32},arg1::DM,arg2::PetscMPIInt,arg3::Integer)
    err = ccall((:DMRedundantSetSize,petscRealSingle),PetscErrorCode,(DM,PetscMPIInt,Int64),arg1,arg2,arg3)
    return err
end

function DMRedundantGetSize(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMRedundantGetSize,petscRealSingle),PetscErrorCode,(DM,Ptr{PetscMPIInt},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function DMShellCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:DMShellCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{DM}),arg1,arg2)
    return err
end

function DMShellSetMatrix(arg1::DM,arg2::Mat{Float32})
    err = ccall((:DMShellSetMatrix,petscRealSingle),PetscErrorCode,(DM,Mat{Float32}),arg1,arg2)
    return err
end

function DMShellSetGlobalVector(arg1::DM,arg2::Vec{Float32})
    err = ccall((:DMShellSetGlobalVector,petscRealSingle),PetscErrorCode,(DM,Vec{Float32}),arg1,arg2)
    return err
end

function DMShellSetLocalVector(arg1::DM,arg2::Vec{Float32})
    err = ccall((:DMShellSetLocalVector,petscRealSingle),PetscErrorCode,(DM,Vec{Float32}),arg1,arg2)
    return err
end

function DMShellSetCreateGlobalVector(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMShellSetCreateGlobalVector,petscRealSingle),PetscErrorCode,(DM,Ptr{Void}),arg1,arg2)
    return err
end

function DMShellSetCreateLocalVector(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMShellSetCreateLocalVector,petscRealSingle),PetscErrorCode,(DM,Ptr{Void}),arg1,arg2)
    return err
end

function DMShellSetGlobalToLocal(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMShellSetGlobalToLocal,petscRealSingle),PetscErrorCode,(DM,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMShellSetGlobalToLocalVecScatter(arg1::DM,arg2::VecScatter{Float32})
    err = ccall((:DMShellSetGlobalToLocalVecScatter,petscRealSingle),PetscErrorCode,(DM,VecScatter{Float32}),arg1,arg2)
    return err
end

function DMShellSetLocalToGlobal(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMShellSetLocalToGlobal,petscRealSingle),PetscErrorCode,(DM,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMShellSetLocalToGlobalVecScatter(arg1::DM,arg2::VecScatter{Float32})
    err = ccall((:DMShellSetLocalToGlobalVecScatter,petscRealSingle),PetscErrorCode,(DM,VecScatter{Float32}),arg1,arg2)
    return err
end

function DMShellSetLocalToLocal(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMShellSetLocalToLocal,petscRealSingle),PetscErrorCode,(DM,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMShellSetLocalToLocalVecScatter(arg1::DM,arg2::VecScatter{Float32})
    err = ccall((:DMShellSetLocalToLocalVecScatter,petscRealSingle),PetscErrorCode,(DM,VecScatter{Float32}),arg1,arg2)
    return err
end

function DMShellSetCreateMatrix(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMShellSetCreateMatrix,petscRealSingle),PetscErrorCode,(DM,Ptr{Void}),arg1,arg2)
    return err
end

function DMShellSetCoarsen(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMShellSetCoarsen,petscRealSingle),PetscErrorCode,(DM,Ptr{Void}),arg1,arg2)
    return err
end

function DMShellSetRefine(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMShellSetRefine,petscRealSingle),PetscErrorCode,(DM,Ptr{Void}),arg1,arg2)
    return err
end

function DMShellSetCreateInterpolation(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMShellSetCreateInterpolation,petscRealSingle),PetscErrorCode,(DM,Ptr{Void}),arg1,arg2)
    return err
end

function DMShellSetCreateInjection(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMShellSetCreateInjection,petscRealSingle),PetscErrorCode,(DM,Ptr{Void}),arg1,arg2)
    return err
end

function DMShellSetCreateFieldDecomposition(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMShellSetCreateFieldDecomposition,petscRealSingle),PetscErrorCode,(DM,Ptr{Void}),arg1,arg2)
    return err
end

function DMGlobalToLocalBeginDefaultShell(arg1::DM,arg2::Vec{Float32},arg3::InsertMode,arg4::Vec{Float32})
    err = ccall((:DMGlobalToLocalBeginDefaultShell,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},InsertMode,Vec{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function DMGlobalToLocalEndDefaultShell(arg1::DM,arg2::Vec{Float32},arg3::InsertMode,arg4::Vec{Float32})
    err = ccall((:DMGlobalToLocalEndDefaultShell,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},InsertMode,Vec{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function DMLocalToGlobalBeginDefaultShell(arg1::DM,arg2::Vec{Float32},arg3::InsertMode,arg4::Vec{Float32})
    err = ccall((:DMLocalToGlobalBeginDefaultShell,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},InsertMode,Vec{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function DMLocalToGlobalEndDefaultShell(arg1::DM,arg2::Vec{Float32},arg3::InsertMode,arg4::Vec{Float32})
    err = ccall((:DMLocalToGlobalEndDefaultShell,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},InsertMode,Vec{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function DMLocalToLocalBeginDefaultShell(arg1::DM,arg2::Vec{Float32},arg3::InsertMode,arg4::Vec{Float32})
    err = ccall((:DMLocalToLocalBeginDefaultShell,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},InsertMode,Vec{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function DMLocalToLocalEndDefaultShell(arg1::DM,arg2::Vec{Float32},arg3::InsertMode,arg4::Vec{Float32})
    err = ccall((:DMLocalToLocalEndDefaultShell,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},InsertMode,Vec{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function DMSlicedCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:DMSlicedCreate,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{DM}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function DMSlicedSetPreallocation(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMSlicedSetPreallocation,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Int64},Int64,Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMSlicedSetBlockFills(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMSlicedSetBlockFills,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function DMSlicedSetGhosts(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMSlicedSetGhosts,petscRealSingle),PetscErrorCode,(DM,Int64,Int64,Int64,Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDSInitializePackage(arg0::Type{Float32})
    err = ccall((:PetscDSInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscDSCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{PetscDS},StridedArray{PetscDS},Ptr{PetscDS},Ref{PetscDS}})
    err = ccall((:PetscDSCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{PetscDS}),arg1,arg2)
    return err
end

function PetscDSDestroy(arg0::Type{Float32},arg1::Union{Ptr{PetscDS},StridedArray{PetscDS},Ptr{PetscDS},Ref{PetscDS}})
    err = ccall((:PetscDSDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscDS},),arg1)
    return err
end

function PetscDSSetType(arg0::Type{Float32},arg1::PetscDS,arg2::PetscDSType)
    err = ccall((:PetscDSSetType,petscRealSingle),PetscErrorCode,(PetscDS,Cstring),arg1,arg2)
    return err
end

function PetscDSGetType(arg0::Type{Float32},arg1::PetscDS,arg2::Union{Ptr{PetscDSType},StridedArray{PetscDSType},Ptr{PetscDSType},Ref{PetscDSType}})
    (arg2_,tmp) = symbol_get_before(arg2)
    err = ccall((:PetscDSGetType,petscRealSingle),PetscErrorCode,(PetscDS,Ptr{Ptr{UInt8}}),arg1,arg2_)
    symbol_get_after(arg2_,arg2)
    return err
end

function PetscDSSetUp(arg0::Type{Float32},arg1::PetscDS)
    err = ccall((:PetscDSSetUp,petscRealSingle),PetscErrorCode,(PetscDS,),arg1)
    return err
end

function PetscDSSetFromOptions(arg0::Type{Float32},arg1::PetscDS)
    err = ccall((:PetscDSSetFromOptions,petscRealSingle),PetscErrorCode,(PetscDS,),arg1)
    return err
end

function PetscDSViewFromOptions(arg0::Type{Float32},A::PetscDS,B::PetscObject,name::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscDSViewFromOptions,petscRealSingle),PetscErrorCode,(PetscDS,PetscObject,Cstring),A,B,name)
    return err
end

function PetscDSView(arg1::PetscDS,arg2::PetscViewer{Float32})
    err = ccall((:PetscDSView,petscRealSingle),PetscErrorCode,(PetscDS,PetscViewer{Float32}),arg1,arg2)
    return err
end

function PetscDSRegister(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscDSRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function PetscDSRegisterDestroy(arg0::Type{Float32})
    err = ccall((:PetscDSRegisterDestroy,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscDSGetSpatialDimension(arg0::Type{Float32},arg1::PetscDS,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscDSGetSpatialDimension,petscRealSingle),PetscErrorCode,(PetscDS,Ptr{Int64}),arg1,arg2)
    return err
end

function PetscDSGetNumFields(arg0::Type{Float32},arg1::PetscDS,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscDSGetNumFields,petscRealSingle),PetscErrorCode,(PetscDS,Ptr{Int64}),arg1,arg2)
    return err
end

function PetscDSGetTotalDimension(arg0::Type{Float32},arg1::PetscDS,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscDSGetTotalDimension,petscRealSingle),PetscErrorCode,(PetscDS,Ptr{Int64}),arg1,arg2)
    return err
end

function PetscDSGetTotalBdDimension(arg0::Type{Float32},arg1::PetscDS,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscDSGetTotalBdDimension,petscRealSingle),PetscErrorCode,(PetscDS,Ptr{Int64}),arg1,arg2)
    return err
end

function PetscDSGetTotalComponents(arg0::Type{Float32},arg1::PetscDS,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscDSGetTotalComponents,petscRealSingle),PetscErrorCode,(PetscDS,Ptr{Int64}),arg1,arg2)
    return err
end

function PetscDSGetFieldOffset(arg0::Type{Float32},arg1::PetscDS,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscDSGetFieldOffset,petscRealSingle),PetscErrorCode,(PetscDS,Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PetscDSGetBdFieldOffset(arg0::Type{Float32},arg1::PetscDS,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscDSGetBdFieldOffset,petscRealSingle),PetscErrorCode,(PetscDS,Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PetscDSGetComponentOffset(arg0::Type{Float32},arg1::PetscDS,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscDSGetComponentOffset,petscRealSingle),PetscErrorCode,(PetscDS,Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PetscDSGetComponentOffsets(arg0::Type{Float32},arg1::PetscDS,arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:PetscDSGetComponentOffsets,petscRealSingle),PetscErrorCode,(PetscDS,Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function PetscDSGetComponentBdOffsets(arg0::Type{Float32},arg1::PetscDS,arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:PetscDSGetComponentBdOffsets,petscRealSingle),PetscErrorCode,(PetscDS,Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function PetscDSGetComponentDerivativeOffsets(arg0::Type{Float32},arg1::PetscDS,arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:PetscDSGetComponentDerivativeOffsets,petscRealSingle),PetscErrorCode,(PetscDS,Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function PetscDSGetComponentBdDerivativeOffsets(arg0::Type{Float32},arg1::PetscDS,arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:PetscDSGetComponentBdDerivativeOffsets,petscRealSingle),PetscErrorCode,(PetscDS,Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function PetscDSGetDiscretization(arg0::Type{Float32},arg1::PetscDS,arg2::Integer,arg3::Union{Ptr{PetscObject},StridedArray{PetscObject},Ptr{PetscObject},Ref{PetscObject}})
    err = ccall((:PetscDSGetDiscretization,petscRealSingle),PetscErrorCode,(PetscDS,Int64,Ptr{PetscObject}),arg1,arg2,arg3)
    return err
end

function PetscDSSetDiscretization(arg0::Type{Float32},arg1::PetscDS,arg2::Integer,arg3::PetscObject)
    err = ccall((:PetscDSSetDiscretization,petscRealSingle),PetscErrorCode,(PetscDS,Int64,PetscObject),arg1,arg2,arg3)
    return err
end

function PetscDSAddDiscretization(arg0::Type{Float32},arg1::PetscDS,arg2::PetscObject)
    err = ccall((:PetscDSAddDiscretization,petscRealSingle),PetscErrorCode,(PetscDS,PetscObject),arg1,arg2)
    return err
end

function PetscDSGetBdDiscretization(arg0::Type{Float32},arg1::PetscDS,arg2::Integer,arg3::Union{Ptr{PetscObject},StridedArray{PetscObject},Ptr{PetscObject},Ref{PetscObject}})
    err = ccall((:PetscDSGetBdDiscretization,petscRealSingle),PetscErrorCode,(PetscDS,Int64,Ptr{PetscObject}),arg1,arg2,arg3)
    return err
end

function PetscDSSetBdDiscretization(arg0::Type{Float32},arg1::PetscDS,arg2::Integer,arg3::PetscObject)
    err = ccall((:PetscDSSetBdDiscretization,petscRealSingle),PetscErrorCode,(PetscDS,Int64,PetscObject),arg1,arg2,arg3)
    return err
end

function PetscDSAddBdDiscretization(arg0::Type{Float32},arg1::PetscDS,arg2::PetscObject)
    err = ccall((:PetscDSAddBdDiscretization,petscRealSingle),PetscErrorCode,(PetscDS,PetscObject),arg1,arg2)
    return err
end

function PetscDSGetImplicit(arg0::Type{Float32},arg1::PetscDS,arg2::Integer,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscDSGetImplicit,petscRealSingle),PetscErrorCode,(PetscDS,Int64,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function PetscDSSetImplicit(arg0::Type{Float32},arg1::PetscDS,arg2::Integer,arg3::PetscBool)
    err = ccall((:PetscDSSetImplicit,petscRealSingle),PetscErrorCode,(PetscDS,Int64,PetscBool),arg1,arg2,arg3)
    return err
end

function PetscDSGetAdjacency(arg0::Type{Float32},arg1::PetscDS,arg2::Integer,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscDSGetAdjacency,petscRealSingle),PetscErrorCode,(PetscDS,Int64,Ptr{PetscBool},Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function PetscDSSetAdjacency(arg0::Type{Float32},arg1::PetscDS,arg2::Integer,arg3::PetscBool,arg4::PetscBool)
    err = ccall((:PetscDSSetAdjacency,petscRealSingle),PetscErrorCode,(PetscDS,Int64,PetscBool,PetscBool),arg1,arg2,arg3,arg4)
    return err
end

function PetscDSGetObjective(arg0::Type{Float32},arg1::PetscDS,arg2::Integer,arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:PetscDSGetObjective,petscRealSingle),PetscErrorCode,(PetscDS,Int64,Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function PetscDSSetObjective(arg0::Type{Float32},arg1::PetscDS,arg2::Integer,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscDSSetObjective,petscRealSingle),PetscErrorCode,(PetscDS,Int64,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function PetscDSGetResidual(arg0::Type{Float32},arg1::PetscDS,arg2::Integer,arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:PetscDSGetResidual,petscRealSingle),PetscErrorCode,(PetscDS,Int64,Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscDSSetResidual(arg0::Type{Float32},arg1::PetscDS,arg2::Integer,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscDSSetResidual,petscRealSingle),PetscErrorCode,(PetscDS,Int64,Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function PetscDSGetJacobian(arg0::Type{Float32},arg1::PetscDS,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg5::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg6::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg7::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:PetscDSGetJacobian,petscRealSingle),PetscErrorCode,(PetscDS,Int64,Int64,Ptr{Ptr{Void}},Ptr{Ptr{Void}},Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function PetscDSSetJacobian(arg0::Type{Float32},arg1::PetscDS,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg7::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscDSSetJacobian,petscRealSingle),PetscErrorCode,(PetscDS,Int64,Int64,Ptr{Void},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function PetscDSGetRiemannSolver(arg0::Type{Float32},arg1::PetscDS,arg2::Integer,arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:PetscDSGetRiemannSolver,petscRealSingle),PetscErrorCode,(PetscDS,Int64,Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function PetscDSSetRiemannSolver(arg0::Type{Float32},arg1::PetscDS,arg2::Integer,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscDSSetRiemannSolver,petscRealSingle),PetscErrorCode,(PetscDS,Int64,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function PetscDSGetContext(arg0::Type{Float32},arg1::PetscDS,arg2::Integer,arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:PetscDSGetContext,petscRealSingle),PetscErrorCode,(PetscDS,Int64,Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function PetscDSSetContext(arg0::Type{Float32},arg1::PetscDS,arg2::Integer,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscDSSetContext,petscRealSingle),PetscErrorCode,(PetscDS,Int64,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function PetscDSGetBdResidual(arg0::Type{Float32},arg1::PetscDS,arg2::Integer,arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:PetscDSGetBdResidual,petscRealSingle),PetscErrorCode,(PetscDS,Int64,Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscDSSetBdResidual(arg0::Type{Float32},arg1::PetscDS,arg2::Integer,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscDSSetBdResidual,petscRealSingle),PetscErrorCode,(PetscDS,Int64,Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function PetscDSGetBdJacobian(arg0::Type{Float32},arg1::PetscDS,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg5::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg6::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg7::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:PetscDSGetBdJacobian,petscRealSingle),PetscErrorCode,(PetscDS,Int64,Int64,Ptr{Ptr{Void}},Ptr{Ptr{Void}},Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function PetscDSSetBdJacobian(arg0::Type{Float32},arg1::PetscDS,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg7::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscDSSetBdJacobian,petscRealSingle),PetscErrorCode,(PetscDS,Int64,Int64,Ptr{Void},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function PetscDSGetTabulation(arg0::Type{Float32},arg1::PetscDS,arg2::Union{Ptr{Ptr{Ptr{Float32}}},StridedArray{Ptr{Ptr{Float32}}},Ptr{Ptr{Ptr{Float32}}},Ref{Ptr{Ptr{Float32}}}},arg3::Union{Ptr{Ptr{Ptr{Float32}}},StridedArray{Ptr{Ptr{Float32}}},Ptr{Ptr{Ptr{Float32}}},Ref{Ptr{Ptr{Float32}}}})
    err = ccall((:PetscDSGetTabulation,petscRealSingle),PetscErrorCode,(PetscDS,Ptr{Ptr{Ptr{Float32}}},Ptr{Ptr{Ptr{Float32}}}),arg1,arg2,arg3)
    return err
end

function PetscDSGetBdTabulation(arg0::Type{Float32},arg1::PetscDS,arg2::Union{Ptr{Ptr{Ptr{Float32}}},StridedArray{Ptr{Ptr{Float32}}},Ptr{Ptr{Ptr{Float32}}},Ref{Ptr{Ptr{Float32}}}},arg3::Union{Ptr{Ptr{Ptr{Float32}}},StridedArray{Ptr{Ptr{Float32}}},Ptr{Ptr{Ptr{Float32}}},Ref{Ptr{Ptr{Float32}}}})
    err = ccall((:PetscDSGetBdTabulation,petscRealSingle),PetscErrorCode,(PetscDS,Ptr{Ptr{Ptr{Float32}}},Ptr{Ptr{Ptr{Float32}}}),arg1,arg2,arg3)
    return err
end

function PetscDSGetEvaluationArrays(arg0::Type{Float32},arg1::PetscDS,arg2::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg3::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg4::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:PetscDSGetEvaluationArrays,petscRealSingle),PetscErrorCode,(PetscDS,Ptr{Ptr{Float32}},Ptr{Ptr{Float32}},Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscDSGetWeakFormArrays(arg0::Type{Float32},arg1::PetscDS,arg2::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg3::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg4::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg5::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg6::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg7::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:PetscDSGetWeakFormArrays,petscRealSingle),PetscErrorCode,(PetscDS,Ptr{Ptr{Float32}},Ptr{Ptr{Float32}},Ptr{Ptr{Float32}},Ptr{Ptr{Float32}},Ptr{Ptr{Float32}},Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function PetscDSGetRefCoordArrays(arg0::Type{Float32},arg1::PetscDS,arg2::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg3::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:PetscDSGetRefCoordArrays,petscRealSingle),PetscErrorCode,(PetscDS,Ptr{Ptr{Float32}},Ptr{Ptr{Float32}}),arg1,arg2,arg3)
    return err
end

function CharacteristicInitializePackage(arg0::Type{Float32})
    err = ccall((:CharacteristicInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function CharacteristicCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{Characteristic},StridedArray{Characteristic},Ptr{Characteristic},Ref{Characteristic}})
    err = ccall((:CharacteristicCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{Characteristic}),arg1,arg2)
    return err
end

function CharacteristicSetType(arg0::Type{Float32},arg1::Characteristic,arg2::CharacteristicType)
    err = ccall((:CharacteristicSetType,petscRealSingle),PetscErrorCode,(Characteristic,Cstring),arg1,arg2)
    return err
end

function CharacteristicSetUp(arg0::Type{Float32},arg1::Characteristic)
    err = ccall((:CharacteristicSetUp,petscRealSingle),PetscErrorCode,(Characteristic,),arg1)
    return err
end

function CharacteristicSetVelocityInterpolation(arg1::Characteristic,arg2::DM,arg3::Vec{Float32},arg4::Vec{Float32},arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg8::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:CharacteristicSetVelocityInterpolation,petscRealSingle),PetscErrorCode,(Characteristic,DM,Vec{Float32},Vec{Float32},Int64,Ptr{Int64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function CharacteristicSetVelocityInterpolationLocal(arg1::Characteristic,arg2::DM,arg3::Vec{Float32},arg4::Vec{Float32},arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg8::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:CharacteristicSetVelocityInterpolationLocal,petscRealSingle),PetscErrorCode,(Characteristic,DM,Vec{Float32},Vec{Float32},Int64,Ptr{Int64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function CharacteristicSetFieldInterpolation(arg1::Characteristic,arg2::DM,arg3::Vec{Float32},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg7::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:CharacteristicSetFieldInterpolation,petscRealSingle),PetscErrorCode,(Characteristic,DM,Vec{Float32},Int64,Ptr{Int64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function CharacteristicSetFieldInterpolationLocal(arg1::Characteristic,arg2::DM,arg3::Vec{Float32},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg7::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:CharacteristicSetFieldInterpolationLocal,petscRealSingle),PetscErrorCode,(Characteristic,DM,Vec{Float32},Int64,Ptr{Int64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function CharacteristicSolve(arg1::Characteristic,arg2::Float32,arg3::Vec{Float32})
    err = ccall((:CharacteristicSolve,petscRealSingle),PetscErrorCode,(Characteristic,Float32,Vec{Float32}),arg1,arg2,arg3)
    return err
end

function CharacteristicDestroy(arg0::Type{Float32},arg1::Union{Ptr{Characteristic},StridedArray{Characteristic},Ptr{Characteristic},Ref{Characteristic}})
    err = ccall((:CharacteristicDestroy,petscRealSingle),PetscErrorCode,(Ptr{Characteristic},),arg1)
    return err
end

function CharacteristicRegister(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:CharacteristicRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function PCExoticSetType(arg1::PC{Float32},arg2::PCExoticType)
    err = ccall((:PCExoticSetType,petscRealSingle),PetscErrorCode,(PC{Float32},PCExoticType),arg1,arg2)
    return err
end

function PCInitializePackage(arg0::Type{Float32})
    err = ccall((:PCInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function PCCreate(arg1::MPI_Comm,arg2::Union{Ptr{PC{Float32}},StridedArray{PC{Float32}},Ptr{PC{Float32}},Ref{PC{Float32}}})
    err = ccall((:PCCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{PC{Float32}}),arg1,arg2)
    return err
end

function PCSetType(arg1::PC{Float32},arg2::PCType)
    err = ccall((:PCSetType,petscRealSingle),PetscErrorCode,(PC{Float32},Cstring),arg1,arg2)
    return err
end

function PCGetType(arg1::PC{Float32},arg2::Union{Ptr{PCType},StridedArray{PCType},Ptr{PCType},Ref{PCType}})
    (arg2_,tmp) = symbol_get_before(arg2)
    err = ccall((:PCGetType,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Ptr{UInt8}}),arg1,arg2_)
    symbol_get_after(arg2_,arg2)
    return err
end

function PCSetUp(arg1::PC{Float32})
    err = ccall((:PCSetUp,petscRealSingle),PetscErrorCode,(PC{Float32},),arg1)
    return err
end

function PCGetSetUpFailedReason(arg1::PC{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PCGetSetUpFailedReason,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function PCSetUpOnBlocks(arg1::PC{Float32})
    err = ccall((:PCSetUpOnBlocks,petscRealSingle),PetscErrorCode,(PC{Float32},),arg1)
    return err
end

function PCApply(arg1::PC{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:PCApply,petscRealSingle),PetscErrorCode,(PC{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function PCApplySymmetricLeft(arg1::PC{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:PCApplySymmetricLeft,petscRealSingle),PetscErrorCode,(PC{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function PCApplySymmetricRight(arg1::PC{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:PCApplySymmetricRight,petscRealSingle),PetscErrorCode,(PC{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function PCApplyBAorAB(arg1::PC{Float32},arg2::PCSide,arg3::Vec{Float32},arg4::Vec{Float32},arg5::Vec{Float32})
    err = ccall((:PCApplyBAorAB,petscRealSingle),PetscErrorCode,(PC{Float32},PCSide,Vec{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PCApplyTranspose(arg1::PC{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:PCApplyTranspose,petscRealSingle),PetscErrorCode,(PC{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function PCApplyTransposeExists(arg1::PC{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCApplyTransposeExists,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCApplyBAorABTranspose(arg1::PC{Float32},arg2::PCSide,arg3::Vec{Float32},arg4::Vec{Float32},arg5::Vec{Float32})
    err = ccall((:PCApplyBAorABTranspose,petscRealSingle),PetscErrorCode,(PC{Float32},PCSide,Vec{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PCSetReusePreconditioner(arg1::PC{Float32},arg2::PetscBool)
    err = ccall((:PCSetReusePreconditioner,petscRealSingle),PetscErrorCode,(PC{Float32},PetscBool),arg1,arg2)
    return err
end

function PCGetReusePreconditioner(arg1::PC{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCGetReusePreconditioner,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCSetErrorIfFailure(arg1::PC{Float32},arg2::PetscBool)
    err = ccall((:PCSetErrorIfFailure,petscRealSingle),PetscErrorCode,(PC{Float32},PetscBool),arg1,arg2)
    return err
end

function PCApplyRichardson(arg1::PC{Float32},arg2::Vec{Float32},arg3::Vec{Float32},arg4::Vec{Float32},arg5::Float32,arg6::Float32,arg7::Float32,arg8::Integer,arg9::PetscBool,arg10::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg11::Union{Ptr{PCRichardsonConvergedReason},StridedArray{PCRichardsonConvergedReason},Ptr{PCRichardsonConvergedReason},Ref{PCRichardsonConvergedReason}})
    err = ccall((:PCApplyRichardson,petscRealSingle),PetscErrorCode,(PC{Float32},Vec{Float32},Vec{Float32},Vec{Float32},Float32,Float32,Float32,Int64,PetscBool,Ptr{Int64},Ptr{PCRichardsonConvergedReason}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11)
    return err
end

function PCApplyRichardsonExists(arg1::PC{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCApplyRichardsonExists,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCSetInitialGuessNonzero(arg1::PC{Float32},arg2::PetscBool)
    err = ccall((:PCSetInitialGuessNonzero,petscRealSingle),PetscErrorCode,(PC{Float32},PetscBool),arg1,arg2)
    return err
end

function PCGetInitialGuessNonzero(arg1::PC{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCGetInitialGuessNonzero,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCSetUseAmat(arg1::PC{Float32},arg2::PetscBool)
    err = ccall((:PCSetUseAmat,petscRealSingle),PetscErrorCode,(PC{Float32},PetscBool),arg1,arg2)
    return err
end

function PCGetUseAmat(arg1::PC{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCGetUseAmat,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCRegister(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function PCReset(arg1::PC{Float32})
    err = ccall((:PCReset,petscRealSingle),PetscErrorCode,(PC{Float32},),arg1)
    return err
end

function PCDestroy(arg1::Union{Ptr{PC{Float32}},StridedArray{PC{Float32}},Ptr{PC{Float32}},Ref{PC{Float32}}})
    err = ccall((:PCDestroy,petscRealSingle),PetscErrorCode,(Ptr{PC{Float32}},),arg1)
    return err
end

function PCSetFromOptions(arg1::PC{Float32})
    err = ccall((:PCSetFromOptions,petscRealSingle),PetscErrorCode,(PC{Float32},),arg1)
    return err
end

function PCFactorGetMatrix(arg1::PC{Float32},arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:PCFactorGetMatrix,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Mat{Float32}}),arg1,arg2)
    return err
end

function PCSetModifySubMatrices(arg1::PC{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCSetModifySubMatrices,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function PCModifySubMatrices(arg1::PC{Float32},arg2::Integer,arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg4::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg5::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCModifySubMatrices,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,Ptr{IS{Float32}},Ptr{IS{Float32}},Ptr{Mat{Float32}},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PCSetOperators(arg1::PC{Float32},arg2::Mat{Float32},arg3::Mat{Float32})
    err = ccall((:PCSetOperators,petscRealSingle),PetscErrorCode,(PC{Float32},Mat{Float32},Mat{Float32}),arg1,arg2,arg3)
    return err
end

function PCGetOperators(arg1::PC{Float32},arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}},arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:PCGetOperators,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Mat{Float32}},Ptr{Mat{Float32}}),arg1,arg2,arg3)
    return err
end

function PCGetOperatorsSet(arg1::PC{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCGetOperatorsSet,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{PetscBool},Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function PCView(arg1::PC{Float32},arg2::PetscViewer{Float32})
    err = ccall((:PCView,petscRealSingle),PetscErrorCode,(PC{Float32},PetscViewer{Float32}),arg1,arg2)
    return err
end

function PCLoad(arg1::PC{Float32},arg2::PetscViewer{Float32})
    err = ccall((:PCLoad,petscRealSingle),PetscErrorCode,(PC{Float32},PetscViewer{Float32}),arg1,arg2)
    return err
end

function PCViewFromOptions(A::PC{Float32},obj::PetscObject,name::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PCViewFromOptions,petscRealSingle),PetscErrorCode,(PC{Float32},PetscObject,Cstring),A,obj,name)
    return err
end

function PCSetOptionsPrefix(arg1::PC{Float32},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PCSetOptionsPrefix,petscRealSingle),PetscErrorCode,(PC{Float32},Cstring),arg1,arg2)
    return err
end

function PCAppendOptionsPrefix(arg1::PC{Float32},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PCAppendOptionsPrefix,petscRealSingle),PetscErrorCode,(PC{Float32},Cstring),arg1,arg2)
    return err
end

function PCGetOptionsPrefix(arg1::PC{Float32},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PCGetOptionsPrefix,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PCComputeExplicitOperator(arg1::PC{Float32},arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:PCComputeExplicitOperator,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Mat{Float32}}),arg1,arg2)
    return err
end

function PCGetDiagonalScale(arg1::PC{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCGetDiagonalScale,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCDiagonalScaleLeft(arg1::PC{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:PCDiagonalScaleLeft,petscRealSingle),PetscErrorCode,(PC{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function PCDiagonalScaleRight(arg1::PC{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:PCDiagonalScaleRight,petscRealSingle),PetscErrorCode,(PC{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function PCSetDiagonalScale(arg1::PC{Float32},arg2::Vec{Float32})
    err = ccall((:PCSetDiagonalScale,petscRealSingle),PetscErrorCode,(PC{Float32},Vec{Float32}),arg1,arg2)
    return err
end

function PCJacobiSetType(arg1::PC{Float32},arg2::PCJacobiType)
    err = ccall((:PCJacobiSetType,petscRealSingle),PetscErrorCode,(PC{Float32},PCJacobiType),arg1,arg2)
    return err
end

function PCJacobiGetType(arg1::PC{Float32},arg2::Union{Ptr{PCJacobiType},StridedArray{PCJacobiType},Ptr{PCJacobiType},Ref{PCJacobiType}})
    err = ccall((:PCJacobiGetType,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{PCJacobiType}),arg1,arg2)
    return err
end

function PCJacobiSetUseAbs(arg1::PC{Float32},arg2::PetscBool)
    err = ccall((:PCJacobiSetUseAbs,petscRealSingle),PetscErrorCode,(PC{Float32},PetscBool),arg1,arg2)
    return err
end

function PCJacobiGetUseAbs(arg1::PC{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCJacobiGetUseAbs,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCSORSetSymmetric(arg1::PC{Float32},arg2::MatSORType)
    err = ccall((:PCSORSetSymmetric,petscRealSingle),PetscErrorCode,(PC{Float32},MatSORType),arg1,arg2)
    return err
end

function PCSORGetSymmetric(arg1::PC{Float32},arg2::Union{Ptr{MatSORType},StridedArray{MatSORType},Ptr{MatSORType},Ref{MatSORType}})
    err = ccall((:PCSORGetSymmetric,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{MatSORType}),arg1,arg2)
    return err
end

function PCSORSetOmega(arg1::PC{Float32},arg2::Float32)
    err = ccall((:PCSORSetOmega,petscRealSingle),PetscErrorCode,(PC{Float32},Float32),arg1,arg2)
    return err
end

function PCSORGetOmega(arg1::PC{Float32},arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:PCSORGetOmega,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Float32}),arg1,arg2)
    return err
end

function PCSORSetIterations(arg1::PC{Float32},arg2::Integer,arg3::Integer)
    err = ccall((:PCSORSetIterations,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,Int64),arg1,arg2,arg3)
    return err
end

function PCSORGetIterations(arg1::PC{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PCSORGetIterations,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PCEisenstatSetOmega(arg1::PC{Float32},arg2::Float32)
    err = ccall((:PCEisenstatSetOmega,petscRealSingle),PetscErrorCode,(PC{Float32},Float32),arg1,arg2)
    return err
end

function PCEisenstatGetOmega(arg1::PC{Float32},arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:PCEisenstatGetOmega,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Float32}),arg1,arg2)
    return err
end

function PCEisenstatSetNoDiagonalScaling(arg1::PC{Float32},arg2::PetscBool)
    err = ccall((:PCEisenstatSetNoDiagonalScaling,petscRealSingle),PetscErrorCode,(PC{Float32},PetscBool),arg1,arg2)
    return err
end

function PCEisenstatGetNoDiagonalScaling(arg1::PC{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCEisenstatGetNoDiagonalScaling,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCBJacobiSetTotalBlocks(arg1::PC{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PCBJacobiSetTotalBlocks,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PCBJacobiGetTotalBlocks(arg1::PC{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:PCBJacobiGetTotalBlocks,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3)
    return err
end

function PCBJacobiSetLocalBlocks(arg1::PC{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PCBJacobiSetLocalBlocks,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PCBJacobiGetLocalBlocks(arg1::PC{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:PCBJacobiGetLocalBlocks,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3)
    return err
end

function PCShellSetApply(arg1::PC{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCShellSetApply,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Void}),arg1,arg2)
    return err
end

function PCShellSetApplyBA(arg1::PC{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCShellSetApplyBA,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Void}),arg1,arg2)
    return err
end

function PCShellSetApplyTranspose(arg1::PC{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCShellSetApplyTranspose,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Void}),arg1,arg2)
    return err
end

function PCShellSetSetUp(arg1::PC{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCShellSetSetUp,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Void}),arg1,arg2)
    return err
end

function PCShellSetApplyRichardson(arg1::PC{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCShellSetApplyRichardson,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Void}),arg1,arg2)
    return err
end

function PCShellSetView(arg1::PC{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCShellSetView,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Void}),arg1,arg2)
    return err
end

function PCShellSetDestroy(arg1::PC{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCShellSetDestroy,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Void}),arg1,arg2)
    return err
end

function PCShellSetContext(arg1::PC{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCShellSetContext,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Void}),arg1,arg2)
    return err
end

function PCShellGetContext(arg1::PC{Float32},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:PCShellGetContext,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Ptr{Void}}),arg1,arg2)
    return err
end

function PCShellSetName(arg1::PC{Float32},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PCShellSetName,petscRealSingle),PetscErrorCode,(PC{Float32},Cstring),arg1,arg2)
    return err
end

function PCShellGetName(arg1::PC{Float32},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PCShellGetName,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PCFactorSetZeroPivot(arg1::PC{Float32},arg2::Float32)
    err = ccall((:PCFactorSetZeroPivot,petscRealSingle),PetscErrorCode,(PC{Float32},Float32),arg1,arg2)
    return err
end

function PCFactorSetShiftType(arg1::PC{Float32},arg2::MatFactorShiftType)
    err = ccall((:PCFactorSetShiftType,petscRealSingle),PetscErrorCode,(PC{Float32},MatFactorShiftType),arg1,arg2)
    return err
end

function PCFactorSetShiftAmount(arg1::PC{Float32},arg2::Float32)
    err = ccall((:PCFactorSetShiftAmount,petscRealSingle),PetscErrorCode,(PC{Float32},Float32),arg1,arg2)
    return err
end

function PCFactorSetMatSolverPackage(arg1::PC{Float32},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PCFactorSetMatSolverPackage,petscRealSingle),PetscErrorCode,(PC{Float32},Cstring),arg1,arg2)
    return err
end

function PCFactorGetMatSolverPackage(arg1::PC{Float32},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PCFactorGetMatSolverPackage,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PCFactorSetUpMatSolverPackage(arg1::PC{Float32})
    err = ccall((:PCFactorSetUpMatSolverPackage,petscRealSingle),PetscErrorCode,(PC{Float32},),arg1)
    return err
end

function PCFactorSetFill(arg1::PC{Float32},arg2::Float32)
    err = ccall((:PCFactorSetFill,petscRealSingle),PetscErrorCode,(PC{Float32},Float32),arg1,arg2)
    return err
end

function PCFactorSetColumnPivot(arg1::PC{Float32},arg2::Float32)
    err = ccall((:PCFactorSetColumnPivot,petscRealSingle),PetscErrorCode,(PC{Float32},Float32),arg1,arg2)
    return err
end

function PCFactorReorderForNonzeroDiagonal(arg1::PC{Float32},arg2::Float32)
    err = ccall((:PCFactorReorderForNonzeroDiagonal,petscRealSingle),PetscErrorCode,(PC{Float32},Float32),arg1,arg2)
    return err
end

function PCFactorSetMatOrderingType(arg1::PC{Float32},arg2::MatOrderingType)
    err = ccall((:PCFactorSetMatOrderingType,petscRealSingle),PetscErrorCode,(PC{Float32},Cstring),arg1,arg2)
    return err
end

function PCFactorSetReuseOrdering(arg1::PC{Float32},arg2::PetscBool)
    err = ccall((:PCFactorSetReuseOrdering,petscRealSingle),PetscErrorCode,(PC{Float32},PetscBool),arg1,arg2)
    return err
end

function PCFactorSetReuseFill(arg1::PC{Float32},arg2::PetscBool)
    err = ccall((:PCFactorSetReuseFill,petscRealSingle),PetscErrorCode,(PC{Float32},PetscBool),arg1,arg2)
    return err
end

function PCFactorSetUseInPlace(arg1::PC{Float32},arg2::PetscBool)
    err = ccall((:PCFactorSetUseInPlace,petscRealSingle),PetscErrorCode,(PC{Float32},PetscBool),arg1,arg2)
    return err
end

function PCFactorGetUseInPlace(arg1::PC{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCFactorGetUseInPlace,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCFactorSetAllowDiagonalFill(arg1::PC{Float32},arg2::PetscBool)
    err = ccall((:PCFactorSetAllowDiagonalFill,petscRealSingle),PetscErrorCode,(PC{Float32},PetscBool),arg1,arg2)
    return err
end

function PCFactorGetAllowDiagonalFill(arg1::PC{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCFactorGetAllowDiagonalFill,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCFactorSetPivotInBlocks(arg1::PC{Float32},arg2::PetscBool)
    err = ccall((:PCFactorSetPivotInBlocks,petscRealSingle),PetscErrorCode,(PC{Float32},PetscBool),arg1,arg2)
    return err
end

function PCFactorSetLevels(arg1::PC{Float32},arg2::Integer)
    err = ccall((:PCFactorSetLevels,petscRealSingle),PetscErrorCode,(PC{Float32},Int64),arg1,arg2)
    return err
end

function PCFactorGetLevels(arg1::PC{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PCFactorGetLevels,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function PCFactorSetDropTolerance(arg1::PC{Float32},arg2::Float32,arg3::Float32,arg4::Integer)
    err = ccall((:PCFactorSetDropTolerance,petscRealSingle),PetscErrorCode,(PC{Float32},Float32,Float32,Int64),arg1,arg2,arg3,arg4)
    return err
end

function PCASMSetLocalSubdomains(arg1::PC{Float32},arg2::Integer,arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg4::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:PCASMSetLocalSubdomains,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,Ptr{IS{Float32}},Ptr{IS{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function PCASMSetTotalSubdomains(arg1::PC{Float32},arg2::Integer,arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg4::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:PCASMSetTotalSubdomains,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,Ptr{IS{Float32}},Ptr{IS{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function PCASMSetOverlap(arg1::PC{Float32},arg2::Integer)
    err = ccall((:PCASMSetOverlap,petscRealSingle),PetscErrorCode,(PC{Float32},Int64),arg1,arg2)
    return err
end

function PCASMSetDMSubdomains(arg1::PC{Float32},arg2::PetscBool)
    err = ccall((:PCASMSetDMSubdomains,petscRealSingle),PetscErrorCode,(PC{Float32},PetscBool),arg1,arg2)
    return err
end

function PCASMGetDMSubdomains(arg1::PC{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCASMGetDMSubdomains,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCASMSetSortIndices(arg1::PC{Float32},arg2::PetscBool)
    err = ccall((:PCASMSetSortIndices,petscRealSingle),PetscErrorCode,(PC{Float32},PetscBool),arg1,arg2)
    return err
end

function PCASMSetType(arg1::PC{Float32},arg2::PCASMType)
    err = ccall((:PCASMSetType,petscRealSingle),PetscErrorCode,(PC{Float32},PCASMType),arg1,arg2)
    return err
end

function PCASMGetType(arg1::PC{Float32},arg2::Union{Ptr{PCASMType},StridedArray{PCASMType},Ptr{PCASMType},Ref{PCASMType}})
    err = ccall((:PCASMGetType,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{PCASMType}),arg1,arg2)
    return err
end

function PCASMSetLocalType(arg1::PC{Float32},arg2::PCCompositeType)
    err = ccall((:PCASMSetLocalType,petscRealSingle),PetscErrorCode,(PC{Float32},PCCompositeType),arg1,arg2)
    return err
end

function PCASMGetLocalType(arg1::PC{Float32},arg2::Union{Ptr{PCCompositeType},StridedArray{PCCompositeType},Ptr{PCCompositeType},Ref{PCCompositeType}})
    err = ccall((:PCASMGetLocalType,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{PCCompositeType}),arg1,arg2)
    return err
end

function PCASMCreateSubdomains(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Ptr{IS{Float32}}},StridedArray{Ptr{IS{Float32}}},Ptr{Ptr{IS{Float32}}},Ref{Ptr{IS{Float32}}}})
    err = ccall((:PCASMCreateSubdomains,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Ptr{IS{Float32}}}),arg1,arg2,arg3)
    return err
end

function PCASMDestroySubdomains(arg1::Integer,arg2::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:PCASMDestroySubdomains,petscRealSingle),PetscErrorCode,(Int64,Ptr{IS{Float32}},Ptr{IS{Float32}}),arg1,arg2,arg3)
    return err
end

function PCASMCreateSubdomains2D(arg1::Integer,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Ptr{IS{Float32}}},StridedArray{Ptr{IS{Float32}}},Ptr{Ptr{IS{Float32}}},Ref{Ptr{IS{Float32}}}},arg9::Union{Ptr{Ptr{IS{Float32}}},StridedArray{Ptr{IS{Float32}}},Ptr{Ptr{IS{Float32}}},Ref{Ptr{IS{Float32}}}})
    err = ccall((:PCASMCreateSubdomains2D,petscRealSingle),PetscErrorCode,(Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Ptr{IS{Float32}}},Ptr{Ptr{IS{Float32}}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
    return err
end

function PCASMGetLocalSubdomains(arg1::PC{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{IS{Float32}}},StridedArray{Ptr{IS{Float32}}},Ptr{Ptr{IS{Float32}}},Ref{Ptr{IS{Float32}}}},arg4::Union{Ptr{Ptr{IS{Float32}}},StridedArray{Ptr{IS{Float32}}},Ptr{Ptr{IS{Float32}}},Ref{Ptr{IS{Float32}}}})
    err = ccall((:PCASMGetLocalSubdomains,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Int64},Ptr{Ptr{IS{Float32}}},Ptr{Ptr{IS{Float32}}}),arg1,arg2,arg3,arg4)
    return err
end

function PCASMGetLocalSubmatrices(arg1::PC{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Mat{Float32}}},StridedArray{Ptr{Mat{Float32}}},Ptr{Ptr{Mat{Float32}}},Ref{Ptr{Mat{Float32}}}})
    err = ccall((:PCASMGetLocalSubmatrices,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Int64},Ptr{Ptr{Mat{Float32}}}),arg1,arg2,arg3)
    return err
end

function PCGASMSetTotalSubdomains(arg1::PC{Float32},arg2::Integer)
    err = ccall((:PCGASMSetTotalSubdomains,petscRealSingle),PetscErrorCode,(PC{Float32},Int64),arg1,arg2)
    return err
end

function PCGASMSetSubdomains(arg1::PC{Float32},arg2::Integer,arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg4::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:PCGASMSetSubdomains,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,Ptr{IS{Float32}},Ptr{IS{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function PCGASMSetOverlap(arg1::PC{Float32},arg2::Integer)
    err = ccall((:PCGASMSetOverlap,petscRealSingle),PetscErrorCode,(PC{Float32},Int64),arg1,arg2)
    return err
end

function PCGASMSetUseDMSubdomains(arg1::PC{Float32},arg2::PetscBool)
    err = ccall((:PCGASMSetUseDMSubdomains,petscRealSingle),PetscErrorCode,(PC{Float32},PetscBool),arg1,arg2)
    return err
end

function PCGASMGetUseDMSubdomains(arg1::PC{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCGASMGetUseDMSubdomains,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCGASMSetSortIndices(arg1::PC{Float32},arg2::PetscBool)
    err = ccall((:PCGASMSetSortIndices,petscRealSingle),PetscErrorCode,(PC{Float32},PetscBool),arg1,arg2)
    return err
end

function PCGASMSetType(arg1::PC{Float32},arg2::PCGASMType)
    err = ccall((:PCGASMSetType,petscRealSingle),PetscErrorCode,(PC{Float32},PCGASMType),arg1,arg2)
    return err
end

function PCGASMCreateSubdomains(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{IS{Float32}}},StridedArray{Ptr{IS{Float32}}},Ptr{Ptr{IS{Float32}}},Ref{Ptr{IS{Float32}}}})
    err = ccall((:PCGASMCreateSubdomains,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Int64},Ptr{Ptr{IS{Float32}}}),arg1,arg2,arg3,arg4)
    return err
end

function PCGASMDestroySubdomains(arg1::Integer,arg2::Union{Ptr{Ptr{IS{Float32}}},StridedArray{Ptr{IS{Float32}}},Ptr{Ptr{IS{Float32}}},Ref{Ptr{IS{Float32}}}},arg3::Union{Ptr{Ptr{IS{Float32}}},StridedArray{Ptr{IS{Float32}}},Ptr{Ptr{IS{Float32}}},Ref{Ptr{IS{Float32}}}})
    err = ccall((:PCGASMDestroySubdomains,petscRealSingle),PetscErrorCode,(Int64,Ptr{Ptr{IS{Float32}}},Ptr{Ptr{IS{Float32}}}),arg1,arg2,arg3)
    return err
end

function PCGASMCreateSubdomains2D(arg1::PC{Float32},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg9::Union{Ptr{Ptr{IS{Float32}}},StridedArray{Ptr{IS{Float32}}},Ptr{Ptr{IS{Float32}}},Ref{Ptr{IS{Float32}}}},arg10::Union{Ptr{Ptr{IS{Float32}}},StridedArray{Ptr{IS{Float32}}},Ptr{Ptr{IS{Float32}}},Ref{Ptr{IS{Float32}}}})
    err = ccall((:PCGASMCreateSubdomains2D,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Ptr{IS{Float32}}},Ptr{Ptr{IS{Float32}}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function PCGASMGetSubdomains(arg1::PC{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{IS{Float32}}},StridedArray{Ptr{IS{Float32}}},Ptr{Ptr{IS{Float32}}},Ref{Ptr{IS{Float32}}}},arg4::Union{Ptr{Ptr{IS{Float32}}},StridedArray{Ptr{IS{Float32}}},Ptr{Ptr{IS{Float32}}},Ref{Ptr{IS{Float32}}}})
    err = ccall((:PCGASMGetSubdomains,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Int64},Ptr{Ptr{IS{Float32}}},Ptr{Ptr{IS{Float32}}}),arg1,arg2,arg3,arg4)
    return err
end

function PCGASMGetSubmatrices(arg1::PC{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Mat{Float32}}},StridedArray{Ptr{Mat{Float32}}},Ptr{Ptr{Mat{Float32}}},Ref{Ptr{Mat{Float32}}}})
    err = ccall((:PCGASMGetSubmatrices,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Int64},Ptr{Ptr{Mat{Float32}}}),arg1,arg2,arg3)
    return err
end

function PCCompositeSetType(arg1::PC{Float32},arg2::PCCompositeType)
    err = ccall((:PCCompositeSetType,petscRealSingle),PetscErrorCode,(PC{Float32},PCCompositeType),arg1,arg2)
    return err
end

function PCCompositeGetType(arg1::PC{Float32},arg2::Union{Ptr{PCCompositeType},StridedArray{PCCompositeType},Ptr{PCCompositeType},Ref{PCCompositeType}})
    err = ccall((:PCCompositeGetType,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{PCCompositeType}),arg1,arg2)
    return err
end

function PCCompositeAddPC(arg1::PC{Float32},arg2::PCType)
    err = ccall((:PCCompositeAddPC,petscRealSingle),PetscErrorCode,(PC{Float32},Cstring),arg1,arg2)
    return err
end

function PCCompositeGetPC(arg1::PC{Float32},arg2::Integer,arg3::Union{Ptr{PC{Float32}},StridedArray{PC{Float32}},Ptr{PC{Float32}},Ref{PC{Float32}}})
    err = ccall((:PCCompositeGetPC,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,Ptr{PC{Float32}}),arg1,arg2,arg3)
    return err
end

function PCCompositeSpecialSetAlpha(arg1::PC{Float32},arg2::Float32)
    err = ccall((:PCCompositeSpecialSetAlpha,petscRealSingle),PetscErrorCode,(PC{Float32},Float32),arg1,arg2)
    return err
end

function PCRedundantSetNumber(arg1::PC{Float32},arg2::Integer)
    err = ccall((:PCRedundantSetNumber,petscRealSingle),PetscErrorCode,(PC{Float32},Int64),arg1,arg2)
    return err
end

function PCRedundantSetScatter(arg1::PC{Float32},arg2::VecScatter{Float32},arg3::VecScatter{Float32})
    err = ccall((:PCRedundantSetScatter,petscRealSingle),PetscErrorCode,(PC{Float32},VecScatter{Float32},VecScatter{Float32}),arg1,arg2,arg3)
    return err
end

function PCRedundantGetOperators(arg1::PC{Float32},arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}},arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:PCRedundantGetOperators,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Mat{Float32}},Ptr{Mat{Float32}}),arg1,arg2,arg3)
    return err
end

function PCSPAISetEpsilon(arg1::PC{Float32},arg2::Cdouble)
    err = ccall((:PCSPAISetEpsilon,petscRealSingle),PetscErrorCode,(PC{Float32},Cdouble),arg1,arg2)
    return err
end

function PCSPAISetNBSteps(arg1::PC{Float32},arg2::Integer)
    err = ccall((:PCSPAISetNBSteps,petscRealSingle),PetscErrorCode,(PC{Float32},Int64),arg1,arg2)
    return err
end

function PCSPAISetMax(arg1::PC{Float32},arg2::Integer)
    err = ccall((:PCSPAISetMax,petscRealSingle),PetscErrorCode,(PC{Float32},Int64),arg1,arg2)
    return err
end

function PCSPAISetMaxNew(arg1::PC{Float32},arg2::Integer)
    err = ccall((:PCSPAISetMaxNew,petscRealSingle),PetscErrorCode,(PC{Float32},Int64),arg1,arg2)
    return err
end

function PCSPAISetBlockSize(arg1::PC{Float32},arg2::Integer)
    err = ccall((:PCSPAISetBlockSize,petscRealSingle),PetscErrorCode,(PC{Float32},Int64),arg1,arg2)
    return err
end

function PCSPAISetCacheSize(arg1::PC{Float32},arg2::Integer)
    err = ccall((:PCSPAISetCacheSize,petscRealSingle),PetscErrorCode,(PC{Float32},Int64),arg1,arg2)
    return err
end

function PCSPAISetVerbose(arg1::PC{Float32},arg2::Integer)
    err = ccall((:PCSPAISetVerbose,petscRealSingle),PetscErrorCode,(PC{Float32},Int64),arg1,arg2)
    return err
end

function PCSPAISetSp(arg1::PC{Float32},arg2::Integer)
    err = ccall((:PCSPAISetSp,petscRealSingle),PetscErrorCode,(PC{Float32},Int64),arg1,arg2)
    return err
end

function PCHYPRESetType(arg1::PC{Float32},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PCHYPRESetType,petscRealSingle),PetscErrorCode,(PC{Float32},Cstring),arg1,arg2)
    return err
end

function PCHYPREGetType(arg1::PC{Float32},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PCHYPREGetType,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PCHYPRESetDiscreteGradient(arg1::PC{Float32},arg2::Mat{Float32})
    err = ccall((:PCHYPRESetDiscreteGradient,petscRealSingle),PetscErrorCode,(PC{Float32},Mat{Float32}),arg1,arg2)
    return err
end

function PCHYPRESetDiscreteCurl(arg1::PC{Float32},arg2::Mat{Float32})
    err = ccall((:PCHYPRESetDiscreteCurl,petscRealSingle),PetscErrorCode,(PC{Float32},Mat{Float32}),arg1,arg2)
    return err
end

function PCHYPRESetEdgeConstantVectors(arg1::PC{Float32},arg2::Vec{Float32},arg3::Vec{Float32},arg4::Vec{Float32})
    err = ccall((:PCHYPRESetEdgeConstantVectors,petscRealSingle),PetscErrorCode,(PC{Float32},Vec{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function PCHYPRESetAlphaPoissonMatrix(arg1::PC{Float32},arg2::Mat{Float32})
    err = ccall((:PCHYPRESetAlphaPoissonMatrix,petscRealSingle),PetscErrorCode,(PC{Float32},Mat{Float32}),arg1,arg2)
    return err
end

function PCHYPRESetBetaPoissonMatrix(arg1::PC{Float32},arg2::Mat{Float32})
    err = ccall((:PCHYPRESetBetaPoissonMatrix,petscRealSingle),PetscErrorCode,(PC{Float32},Mat{Float32}),arg1,arg2)
    return err
end

function PCBJacobiGetLocalBlocks(arg1::PC{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:PCBJacobiGetLocalBlocks,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3)
    return err
end

function PCBJacobiGetTotalBlocks(arg1::PC{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:PCBJacobiGetTotalBlocks,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3)
    return err
end

function PCFieldSplitSetFields(arg1::PC{Float32},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PCFieldSplitSetFields,petscRealSingle),PetscErrorCode,(PC{Float32},Cstring,Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PCFieldSplitSetType(arg1::PC{Float32},arg2::PCCompositeType)
    err = ccall((:PCFieldSplitSetType,petscRealSingle),PetscErrorCode,(PC{Float32},PCCompositeType),arg1,arg2)
    return err
end

function PCFieldSplitGetType(arg1::PC{Float32},arg2::Union{Ptr{PCCompositeType},StridedArray{PCCompositeType},Ptr{PCCompositeType},Ref{PCCompositeType}})
    err = ccall((:PCFieldSplitGetType,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{PCCompositeType}),arg1,arg2)
    return err
end

function PCFieldSplitSetBlockSize(arg1::PC{Float32},arg2::Integer)
    err = ccall((:PCFieldSplitSetBlockSize,petscRealSingle),PetscErrorCode,(PC{Float32},Int64),arg1,arg2)
    return err
end

function PCFieldSplitSetIS(arg1::PC{Float32},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::IS{Float32})
    err = ccall((:PCFieldSplitSetIS,petscRealSingle),PetscErrorCode,(PC{Float32},Cstring,IS{Float32}),arg1,arg2,arg3)
    return err
end

function PCFieldSplitGetIS(arg1::PC{Float32},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:PCFieldSplitGetIS,petscRealSingle),PetscErrorCode,(PC{Float32},Cstring,Ptr{IS{Float32}}),arg1,arg2,arg3)
    return err
end

function PCFieldSplitSetDMSplits(arg1::PC{Float32},arg2::PetscBool)
    err = ccall((:PCFieldSplitSetDMSplits,petscRealSingle),PetscErrorCode,(PC{Float32},PetscBool),arg1,arg2)
    return err
end

function PCFieldSplitGetDMSplits(arg1::PC{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCFieldSplitGetDMSplits,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCFieldSplitSetDiagUseAmat(arg1::PC{Float32},arg2::PetscBool)
    err = ccall((:PCFieldSplitSetDiagUseAmat,petscRealSingle),PetscErrorCode,(PC{Float32},PetscBool),arg1,arg2)
    return err
end

function PCFieldSplitGetDiagUseAmat(arg1::PC{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCFieldSplitGetDiagUseAmat,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCFieldSplitSetOffDiagUseAmat(arg1::PC{Float32},arg2::PetscBool)
    err = ccall((:PCFieldSplitSetOffDiagUseAmat,petscRealSingle),PetscErrorCode,(PC{Float32},PetscBool),arg1,arg2)
    return err
end

function PCFieldSplitGetOffDiagUseAmat(arg1::PC{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCFieldSplitGetOffDiagUseAmat,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCFieldSplitSchurPrecondition(arg1::PC{Float32},arg2::PCFieldSplitSchurPreType,arg3::Mat{Float32})
    err = ccall((:PCFieldSplitSchurPrecondition,petscRealSingle),PetscErrorCode,(PC{Float32},PCFieldSplitSchurPreType,Mat{Float32}),arg1,arg2,arg3)
    return err
end

function PCFieldSplitSetSchurPre(arg1::PC{Float32},arg2::PCFieldSplitSchurPreType,arg3::Mat{Float32})
    err = ccall((:PCFieldSplitSetSchurPre,petscRealSingle),PetscErrorCode,(PC{Float32},PCFieldSplitSchurPreType,Mat{Float32}),arg1,arg2,arg3)
    return err
end

function PCFieldSplitGetSchurPre(arg1::PC{Float32},arg2::Union{Ptr{PCFieldSplitSchurPreType},StridedArray{PCFieldSplitSchurPreType},Ptr{PCFieldSplitSchurPreType},Ref{PCFieldSplitSchurPreType}},arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:PCFieldSplitGetSchurPre,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{PCFieldSplitSchurPreType},Ptr{Mat{Float32}}),arg1,arg2,arg3)
    return err
end

function PCFieldSplitSetSchurFactType(arg1::PC{Float32},arg2::PCFieldSplitSchurFactType)
    err = ccall((:PCFieldSplitSetSchurFactType,petscRealSingle),PetscErrorCode,(PC{Float32},PCFieldSplitSchurFactType),arg1,arg2)
    return err
end

function PCFieldSplitGetSchurBlocks(arg1::PC{Float32},arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}},arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}},arg4::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}},arg5::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:PCFieldSplitGetSchurBlocks,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Mat{Float32}},Ptr{Mat{Float32}},Ptr{Mat{Float32}},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PCFieldSplitSchurGetS(arg1::PC{Float32},S::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:PCFieldSplitSchurGetS,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Mat{Float32}}),arg1,S)
    return err
end

function PCFieldSplitSchurRestoreS(arg1::PC{Float32},S::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:PCFieldSplitSchurRestoreS,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Mat{Float32}}),arg1,S)
    return err
end

function PCGalerkinSetRestriction(arg1::PC{Float32},arg2::Mat{Float32})
    err = ccall((:PCGalerkinSetRestriction,petscRealSingle),PetscErrorCode,(PC{Float32},Mat{Float32}),arg1,arg2)
    return err
end

function PCGalerkinSetInterpolation(arg1::PC{Float32},arg2::Mat{Float32})
    err = ccall((:PCGalerkinSetInterpolation,petscRealSingle),PetscErrorCode,(PC{Float32},Mat{Float32}),arg1,arg2)
    return err
end

function PCSetCoordinates(arg1::PC{Float32},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:PCSetCoordinates,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,Int64,Ptr{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function PCPythonSetType(arg1::PC{Float32},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PCPythonSetType,petscRealSingle),PetscErrorCode,(PC{Float32},Cstring),arg1,arg2)
    return err
end

function PCSetDM(arg1::PC{Float32},arg2::DM)
    err = ccall((:PCSetDM,petscRealSingle),PetscErrorCode,(PC{Float32},DM),arg1,arg2)
    return err
end

function PCGetDM(arg1::PC{Float32},arg2::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:PCGetDM,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{DM}),arg1,arg2)
    return err
end

function PCSetApplicationContext(arg1::PC{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCSetApplicationContext,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Void}),arg1,arg2)
    return err
end

function PCGetApplicationContext(arg1::PC{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCGetApplicationContext,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Void}),arg1,arg2)
    return err
end

function PCBiCGStabCUSPSetTolerance(arg1::PC{Float32},arg2::Float32)
    err = ccall((:PCBiCGStabCUSPSetTolerance,petscRealSingle),PetscErrorCode,(PC{Float32},Float32),arg1,arg2)
    return err
end

function PCBiCGStabCUSPSetIterations(arg1::PC{Float32},arg2::Integer)
    err = ccall((:PCBiCGStabCUSPSetIterations,petscRealSingle),PetscErrorCode,(PC{Float32},Int64),arg1,arg2)
    return err
end

function PCBiCGStabCUSPSetUseVerboseMonitor(arg1::PC{Float32},arg2::PetscBool)
    err = ccall((:PCBiCGStabCUSPSetUseVerboseMonitor,petscRealSingle),PetscErrorCode,(PC{Float32},PetscBool),arg1,arg2)
    return err
end

function PCAINVCUSPSetDropTolerance(arg1::PC{Float32},arg2::Float32)
    err = ccall((:PCAINVCUSPSetDropTolerance,petscRealSingle),PetscErrorCode,(PC{Float32},Float32),arg1,arg2)
    return err
end

function PCAINVCUSPUseScaling(arg1::PC{Float32},arg2::PetscBool)
    err = ccall((:PCAINVCUSPUseScaling,petscRealSingle),PetscErrorCode,(PC{Float32},PetscBool),arg1,arg2)
    return err
end

function PCAINVCUSPSetNonzeros(arg1::PC{Float32},arg2::Integer)
    err = ccall((:PCAINVCUSPSetNonzeros,petscRealSingle),PetscErrorCode,(PC{Float32},Int64),arg1,arg2)
    return err
end

function PCAINVCUSPSetLinParameter(arg1::PC{Float32},arg2::Integer)
    err = ccall((:PCAINVCUSPSetLinParameter,petscRealSingle),PetscErrorCode,(PC{Float32},Int64),arg1,arg2)
    return err
end

function PCPARMSSetGlobal(arg1::PC{Float32},arg2::PCPARMSGlobalType)
    err = ccall((:PCPARMSSetGlobal,petscRealSingle),PetscErrorCode,(PC{Float32},PCPARMSGlobalType),arg1,arg2)
    return err
end

function PCPARMSSetLocal(arg1::PC{Float32},arg2::PCPARMSLocalType)
    err = ccall((:PCPARMSSetLocal,petscRealSingle),PetscErrorCode,(PC{Float32},PCPARMSLocalType),arg1,arg2)
    return err
end

function PCPARMSSetSolveTolerances(arg1::PC{Float32},arg2::Float32,arg3::Integer)
    err = ccall((:PCPARMSSetSolveTolerances,petscRealSingle),PetscErrorCode,(PC{Float32},Float32,Int64),arg1,arg2,arg3)
    return err
end

function PCPARMSSetSolveRestart(arg1::PC{Float32},arg2::Integer)
    err = ccall((:PCPARMSSetSolveRestart,petscRealSingle),PetscErrorCode,(PC{Float32},Int64),arg1,arg2)
    return err
end

function PCPARMSSetNonsymPerm(arg1::PC{Float32},arg2::PetscBool)
    err = ccall((:PCPARMSSetNonsymPerm,petscRealSingle),PetscErrorCode,(PC{Float32},PetscBool),arg1,arg2)
    return err
end

function PCPARMSSetFill(arg1::PC{Float32},arg2::Integer,arg3::Integer,arg4::Integer)
    err = ccall((:PCPARMSSetFill,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,Int64,Int64),arg1,arg2,arg3,arg4)
    return err
end

function PCGAMGSetType(arg1::PC{Float32},arg2::PCGAMGType)
    err = ccall((:PCGAMGSetType,petscRealSingle),PetscErrorCode,(PC{Float32},Cstring),arg1,arg2)
    return err
end

function PCGAMGGetType(arg1::PC{Float32},arg2::Union{Ptr{PCGAMGType},StridedArray{PCGAMGType},Ptr{PCGAMGType},Ref{PCGAMGType}})
    (arg2_,tmp) = symbol_get_before(arg2)
    err = ccall((:PCGAMGGetType,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Ptr{UInt8}}),arg1,arg2_)
    symbol_get_after(arg2_,arg2)
    return err
end

function PCGAMGSetProcEqLim(arg1::PC{Float32},arg2::Integer)
    err = ccall((:PCGAMGSetProcEqLim,petscRealSingle),PetscErrorCode,(PC{Float32},Int64),arg1,arg2)
    return err
end

function PCGAMGSetRepartitioning(arg1::PC{Float32},arg2::PetscBool)
    err = ccall((:PCGAMGSetRepartitioning,petscRealSingle),PetscErrorCode,(PC{Float32},PetscBool),arg1,arg2)
    return err
end

function PCGAMGSetUseASMAggs(arg1::PC{Float32},arg2::PetscBool)
    err = ccall((:PCGAMGSetUseASMAggs,petscRealSingle),PetscErrorCode,(PC{Float32},PetscBool),arg1,arg2)
    return err
end

function PCGAMGSetSolverType(arg1::PC{Float32},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer)
    err = ccall((:PCGAMGSetSolverType,petscRealSingle),PetscErrorCode,(PC{Float32},Cstring,Int64),arg1,arg2,arg3)
    return err
end

function PCGAMGSetThreshold(arg1::PC{Float32},arg2::Float32)
    err = ccall((:PCGAMGSetThreshold,petscRealSingle),PetscErrorCode,(PC{Float32},Float32),arg1,arg2)
    return err
end

function PCGAMGSetCoarseEqLim(arg1::PC{Float32},arg2::Integer)
    err = ccall((:PCGAMGSetCoarseEqLim,petscRealSingle),PetscErrorCode,(PC{Float32},Int64),arg1,arg2)
    return err
end

function PCGAMGSetNlevels(arg1::PC{Float32},arg2::Integer)
    err = ccall((:PCGAMGSetNlevels,petscRealSingle),PetscErrorCode,(PC{Float32},Int64),arg1,arg2)
    return err
end

function PCGAMGSetNSmooths(arg1::PC{Float32},arg2::Integer)
    err = ccall((:PCGAMGSetNSmooths,petscRealSingle),PetscErrorCode,(PC{Float32},Int64),arg1,arg2)
    return err
end

function PCGAMGSetSymGraph(arg1::PC{Float32},arg2::PetscBool)
    err = ccall((:PCGAMGSetSymGraph,petscRealSingle),PetscErrorCode,(PC{Float32},PetscBool),arg1,arg2)
    return err
end

function PCGAMGSetSquareGraph(arg1::PC{Float32},arg2::Integer)
    err = ccall((:PCGAMGSetSquareGraph,petscRealSingle),PetscErrorCode,(PC{Float32},Int64),arg1,arg2)
    return err
end

function PCGAMGSetReuseInterpolation(arg1::PC{Float32},arg2::PetscBool)
    err = ccall((:PCGAMGSetReuseInterpolation,petscRealSingle),PetscErrorCode,(PC{Float32},PetscBool),arg1,arg2)
    return err
end

function PCGAMGFinalizePackage(arg0::Type{Float32})
    err = ccall((:PCGAMGFinalizePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function PCGAMGInitializePackage(arg0::Type{Float32})
    err = ccall((:PCGAMGInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function PCGAMGRegister(arg0::Type{Float32},arg1::PCGAMGType,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCGAMGRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function PCGAMGClassicalSetType(arg1::PC{Float32},arg2::PCGAMGClassicalType)
    err = ccall((:PCGAMGClassicalSetType,petscRealSingle),PetscErrorCode,(PC{Float32},Cstring),arg1,arg2)
    return err
end

function PCGAMGClassicalGetType(arg1::PC{Float32},arg2::Union{Ptr{PCGAMGClassicalType},StridedArray{PCGAMGClassicalType},Ptr{PCGAMGClassicalType},Ref{PCGAMGClassicalType}})
    (arg2_,tmp) = symbol_get_before(arg2)
    err = ccall((:PCGAMGClassicalGetType,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Ptr{UInt8}}),arg1,arg2_)
    symbol_get_after(arg2_,arg2)
    return err
end

function PCBDDCSetChangeOfBasisMat(arg1::PC{Float32},arg2::Mat{Float32})
    err = ccall((:PCBDDCSetChangeOfBasisMat,petscRealSingle),PetscErrorCode,(PC{Float32},Mat{Float32}),arg1,arg2)
    return err
end

function PCBDDCSetPrimalVerticesLocalIS(arg1::PC{Float32},arg2::IS{Float32})
    err = ccall((:PCBDDCSetPrimalVerticesLocalIS,petscRealSingle),PetscErrorCode,(PC{Float32},IS{Float32}),arg1,arg2)
    return err
end

function PCBDDCSetCoarseningRatio(arg1::PC{Float32},arg2::Integer)
    err = ccall((:PCBDDCSetCoarseningRatio,petscRealSingle),PetscErrorCode,(PC{Float32},Int64),arg1,arg2)
    return err
end

function PCBDDCSetLevels(arg1::PC{Float32},arg2::Integer)
    err = ccall((:PCBDDCSetLevels,petscRealSingle),PetscErrorCode,(PC{Float32},Int64),arg1,arg2)
    return err
end

function PCBDDCSetNullSpace(arg1::PC{Float32},arg2::MatNullSpace)
    err = ccall((:PCBDDCSetNullSpace,petscRealSingle),PetscErrorCode,(PC{Float32},MatNullSpace),arg1,arg2)
    return err
end

function PCBDDCSetDirichletBoundaries(arg1::PC{Float32},arg2::IS{Float32})
    err = ccall((:PCBDDCSetDirichletBoundaries,petscRealSingle),PetscErrorCode,(PC{Float32},IS{Float32}),arg1,arg2)
    return err
end

function PCBDDCSetDirichletBoundariesLocal(arg1::PC{Float32},arg2::IS{Float32})
    err = ccall((:PCBDDCSetDirichletBoundariesLocal,petscRealSingle),PetscErrorCode,(PC{Float32},IS{Float32}),arg1,arg2)
    return err
end

function PCBDDCGetDirichletBoundaries(arg1::PC{Float32},arg2::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:PCBDDCGetDirichletBoundaries,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{IS{Float32}}),arg1,arg2)
    return err
end

function PCBDDCGetDirichletBoundariesLocal(arg1::PC{Float32},arg2::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:PCBDDCGetDirichletBoundariesLocal,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{IS{Float32}}),arg1,arg2)
    return err
end

function PCBDDCSetNeumannBoundaries(arg1::PC{Float32},arg2::IS{Float32})
    err = ccall((:PCBDDCSetNeumannBoundaries,petscRealSingle),PetscErrorCode,(PC{Float32},IS{Float32}),arg1,arg2)
    return err
end

function PCBDDCSetNeumannBoundariesLocal(arg1::PC{Float32},arg2::IS{Float32})
    err = ccall((:PCBDDCSetNeumannBoundariesLocal,petscRealSingle),PetscErrorCode,(PC{Float32},IS{Float32}),arg1,arg2)
    return err
end

function PCBDDCGetNeumannBoundaries(arg1::PC{Float32},arg2::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:PCBDDCGetNeumannBoundaries,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{IS{Float32}}),arg1,arg2)
    return err
end

function PCBDDCGetNeumannBoundariesLocal(arg1::PC{Float32},arg2::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:PCBDDCGetNeumannBoundariesLocal,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{IS{Float32}}),arg1,arg2)
    return err
end

function PCBDDCSetDofsSplitting(arg1::PC{Float32},arg2::Integer,arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:PCBDDCSetDofsSplitting,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,Ptr{IS{Float32}}),arg1,arg2,arg3)
    return err
end

function PCBDDCSetDofsSplittingLocal(arg1::PC{Float32},arg2::Integer,arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:PCBDDCSetDofsSplittingLocal,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,Ptr{IS{Float32}}),arg1,arg2,arg3)
    return err
end

function PCBDDCSetLocalAdjacencyGraph(arg1::PC{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::PetscCopyMode)
    err = ccall((:PCBDDCSetLocalAdjacencyGraph,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,Ptr{Int64},Ptr{Int64},PetscCopyMode),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PCBDDCCreateFETIDPOperators(arg1::PC{Float32},arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}},arg3::Union{Ptr{PC{Float32}},StridedArray{PC{Float32}},Ptr{PC{Float32}},Ref{PC{Float32}}})
    err = ccall((:PCBDDCCreateFETIDPOperators,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Mat{Float32}},Ptr{PC{Float32}}),arg1,arg2,arg3)
    return err
end

function PCBDDCMatFETIDPGetRHS(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:PCBDDCMatFETIDPGetRHS,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function PCBDDCMatFETIDPGetSolution(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:PCBDDCMatFETIDPGetSolution,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function PCISSetUseStiffnessScaling(arg1::PC{Float32},arg2::PetscBool)
    err = ccall((:PCISSetUseStiffnessScaling,petscRealSingle),PetscErrorCode,(PC{Float32},PetscBool),arg1,arg2)
    return err
end

function PCISSetSubdomainScalingFactor(arg1::PC{Float32},arg2::Float32)
    err = ccall((:PCISSetSubdomainScalingFactor,petscRealSingle),PetscErrorCode,(PC{Float32},Float32),arg1,arg2)
    return err
end

function PCISSetSubdomainDiagonalScaling(arg1::PC{Float32},arg2::Vec{Float32})
    err = ccall((:PCISSetSubdomainDiagonalScaling,petscRealSingle),PetscErrorCode,(PC{Float32},Vec{Float32}),arg1,arg2)
    return err
end

function PCMGSetType(arg1::PC{Float32},arg2::PCMGType)
    err = ccall((:PCMGSetType,petscRealSingle),PetscErrorCode,(PC{Float32},PCMGType),arg1,arg2)
    return err
end

function PCMGGetType(arg1::PC{Float32},arg2::Union{Ptr{PCMGType},StridedArray{PCMGType},Ptr{PCMGType},Ref{PCMGType}})
    err = ccall((:PCMGGetType,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{PCMGType}),arg1,arg2)
    return err
end

function PCMGSetLevels(arg1::PC{Float32},arg2::Integer,arg3::Union{Ptr{MPI_Comm},StridedArray{MPI_Comm},Ptr{MPI_Comm},Ref{MPI_Comm}})
    err = ccall((:PCMGSetLevels,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,Ptr{comm_type}),arg1,arg2,arg3)
    return err
end

function PCMGGetLevels(arg1::PC{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PCMGGetLevels,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function PCMGSetNumberSmoothUp(arg1::PC{Float32},arg2::Integer)
    err = ccall((:PCMGSetNumberSmoothUp,petscRealSingle),PetscErrorCode,(PC{Float32},Int64),arg1,arg2)
    return err
end

function PCMGSetNumberSmoothDown(arg1::PC{Float32},arg2::Integer)
    err = ccall((:PCMGSetNumberSmoothDown,petscRealSingle),PetscErrorCode,(PC{Float32},Int64),arg1,arg2)
    return err
end

function PCMGSetCycleType(arg1::PC{Float32},arg2::PCMGCycleType)
    err = ccall((:PCMGSetCycleType,petscRealSingle),PetscErrorCode,(PC{Float32},PCMGCycleType),arg1,arg2)
    return err
end

function PCMGSetCycleTypeOnLevel(arg1::PC{Float32},arg2::Integer,arg3::PCMGCycleType)
    err = ccall((:PCMGSetCycleTypeOnLevel,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,PCMGCycleType),arg1,arg2,arg3)
    return err
end

function PCMGSetCyclesOnLevel(arg1::PC{Float32},arg2::Integer,arg3::Integer)
    err = ccall((:PCMGSetCyclesOnLevel,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,Int64),arg1,arg2,arg3)
    return err
end

function PCMGMultiplicativeSetCycles(arg1::PC{Float32},arg2::Integer)
    err = ccall((:PCMGMultiplicativeSetCycles,petscRealSingle),PetscErrorCode,(PC{Float32},Int64),arg1,arg2)
    return err
end

function PCMGSetGalerkin(arg1::PC{Float32},arg2::PetscBool)
    err = ccall((:PCMGSetGalerkin,petscRealSingle),PetscErrorCode,(PC{Float32},PetscBool),arg1,arg2)
    return err
end

function PCMGGetGalerkin(arg1::PC{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCMGGetGalerkin,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCMGSetRhs(arg1::PC{Float32},arg2::Integer,arg3::Vec{Float32})
    err = ccall((:PCMGSetRhs,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,Vec{Float32}),arg1,arg2,arg3)
    return err
end

function PCMGSetX(arg1::PC{Float32},arg2::Integer,arg3::Vec{Float32})
    err = ccall((:PCMGSetX,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,Vec{Float32}),arg1,arg2,arg3)
    return err
end

function PCMGSetR(arg1::PC{Float32},arg2::Integer,arg3::Vec{Float32})
    err = ccall((:PCMGSetR,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,Vec{Float32}),arg1,arg2,arg3)
    return err
end

function PCMGSetRestriction(arg1::PC{Float32},arg2::Integer,arg3::Mat{Float32})
    err = ccall((:PCMGSetRestriction,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,Mat{Float32}),arg1,arg2,arg3)
    return err
end

function PCMGGetRestriction(arg1::PC{Float32},arg2::Integer,arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:PCMGGetRestriction,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,Ptr{Mat{Float32}}),arg1,arg2,arg3)
    return err
end

function PCMGSetInterpolation(arg1::PC{Float32},arg2::Integer,arg3::Mat{Float32})
    err = ccall((:PCMGSetInterpolation,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,Mat{Float32}),arg1,arg2,arg3)
    return err
end

function PCMGGetInterpolation(arg1::PC{Float32},arg2::Integer,arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:PCMGGetInterpolation,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,Ptr{Mat{Float32}}),arg1,arg2,arg3)
    return err
end

function PCMGSetRScale(arg1::PC{Float32},arg2::Integer,arg3::Vec{Float32})
    err = ccall((:PCMGSetRScale,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,Vec{Float32}),arg1,arg2,arg3)
    return err
end

function PCMGGetRScale(arg1::PC{Float32},arg2::Integer,arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:PCMGGetRScale,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,Ptr{Vec{Float32}}),arg1,arg2,arg3)
    return err
end

function PCMGSetResidual(arg1::PC{Float32},arg2::Integer,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Mat{Float32})
    err = ccall((:PCMGSetResidual,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,Ptr{Void},Mat{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function PCMGResidualDefault(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Vec{Float32},arg4::Vec{Float32})
    err = ccall((:PCMGResidualDefault,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function KSPInitializePackage(arg0::Type{Float32})
    err = ccall((:KSPInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function KSPCreate(arg1::MPI_Comm,arg2::Union{Ptr{KSP{Float32}},StridedArray{KSP{Float32}},Ptr{KSP{Float32}},Ref{KSP{Float32}}})
    err = ccall((:KSPCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{KSP{Float32}}),arg1,arg2)
    return err
end

function KSPSetType(arg1::KSP{Float32},arg2::KSPType)
    err = ccall((:KSPSetType,petscRealSingle),PetscErrorCode,(KSP{Float32},Cstring),arg1,arg2)
    return err
end

function KSPGetType(arg1::KSP{Float32},arg2::Union{Ptr{KSPType},StridedArray{KSPType},Ptr{KSPType},Ref{KSPType}})
    (arg2_,tmp) = symbol_get_before(arg2)
    err = ccall((:KSPGetType,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Ptr{UInt8}}),arg1,arg2_)
    symbol_get_after(arg2_,arg2)
    return err
end

function KSPSetUp(arg1::KSP{Float32})
    err = ccall((:KSPSetUp,petscRealSingle),PetscErrorCode,(KSP{Float32},),arg1)
    return err
end

function KSPSetUpOnBlocks(arg1::KSP{Float32})
    err = ccall((:KSPSetUpOnBlocks,petscRealSingle),PetscErrorCode,(KSP{Float32},),arg1)
    return err
end

function KSPSolve(arg1::KSP{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:KSPSolve,petscRealSingle),PetscErrorCode,(KSP{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function KSPSolveTranspose(arg1::KSP{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:KSPSolveTranspose,petscRealSingle),PetscErrorCode,(KSP{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function KSPReset(arg1::KSP{Float32})
    err = ccall((:KSPReset,petscRealSingle),PetscErrorCode,(KSP{Float32},),arg1)
    return err
end

function KSPDestroy(arg1::Union{Ptr{KSP{Float32}},StridedArray{KSP{Float32}},Ptr{KSP{Float32}},Ref{KSP{Float32}}})
    err = ccall((:KSPDestroy,petscRealSingle),PetscErrorCode,(Ptr{KSP{Float32}},),arg1)
    return err
end

function KSPSetReusePreconditioner(arg1::KSP{Float32},arg2::PetscBool)
    err = ccall((:KSPSetReusePreconditioner,petscRealSingle),PetscErrorCode,(KSP{Float32},PetscBool),arg1,arg2)
    return err
end

function KSPSetSkipPCSetFromOptions(arg1::KSP{Float32},arg2::PetscBool)
    err = ccall((:KSPSetSkipPCSetFromOptions,petscRealSingle),PetscErrorCode,(KSP{Float32},PetscBool),arg1,arg2)
    return err
end

function KSPRegister(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function KSPSetPCSide(arg1::KSP{Float32},arg2::PCSide)
    err = ccall((:KSPSetPCSide,petscRealSingle),PetscErrorCode,(KSP{Float32},PCSide),arg1,arg2)
    return err
end

function KSPGetPCSide(arg1::KSP{Float32},arg2::Union{Ptr{PCSide},StridedArray{PCSide},Ptr{PCSide},Ref{PCSide}})
    err = ccall((:KSPGetPCSide,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{PCSide}),arg1,arg2)
    return err
end

function KSPSetTolerances(arg1::KSP{Float32},arg2::Float32,arg3::Float32,arg4::Float32,arg5::Integer)
    err = ccall((:KSPSetTolerances,petscRealSingle),PetscErrorCode,(KSP{Float32},Float32,Float32,Float32,Int64),arg1,arg2,arg3,arg4,arg5)
    return err
end

function KSPGetTolerances(arg1::KSP{Float32},arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:KSPGetTolerances,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function KSPSetInitialGuessNonzero(arg1::KSP{Float32},arg2::PetscBool)
    err = ccall((:KSPSetInitialGuessNonzero,petscRealSingle),PetscErrorCode,(KSP{Float32},PetscBool),arg1,arg2)
    return err
end

function KSPGetInitialGuessNonzero(arg1::KSP{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:KSPGetInitialGuessNonzero,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function KSPSetInitialGuessKnoll(arg1::KSP{Float32},arg2::PetscBool)
    err = ccall((:KSPSetInitialGuessKnoll,petscRealSingle),PetscErrorCode,(KSP{Float32},PetscBool),arg1,arg2)
    return err
end

function KSPGetInitialGuessKnoll(arg1::KSP{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:KSPGetInitialGuessKnoll,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function KSPSetErrorIfNotConverged(arg1::KSP{Float32},arg2::PetscBool)
    err = ccall((:KSPSetErrorIfNotConverged,petscRealSingle),PetscErrorCode,(KSP{Float32},PetscBool),arg1,arg2)
    return err
end

function KSPGetErrorIfNotConverged(arg1::KSP{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:KSPGetErrorIfNotConverged,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function KSPSetComputeEigenvalues(arg1::KSP{Float32},arg2::PetscBool)
    err = ccall((:KSPSetComputeEigenvalues,petscRealSingle),PetscErrorCode,(KSP{Float32},PetscBool),arg1,arg2)
    return err
end

function KSPGetComputeEigenvalues(arg1::KSP{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:KSPGetComputeEigenvalues,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function KSPSetComputeSingularValues(arg1::KSP{Float32},arg2::PetscBool)
    err = ccall((:KSPSetComputeSingularValues,petscRealSingle),PetscErrorCode,(KSP{Float32},PetscBool),arg1,arg2)
    return err
end

function KSPGetComputeSingularValues(arg1::KSP{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:KSPGetComputeSingularValues,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function KSPGetRhs(arg1::KSP{Float32},arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:KSPGetRhs,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Vec{Float32}}),arg1,arg2)
    return err
end

function KSPGetSolution(arg1::KSP{Float32},arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:KSPGetSolution,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Vec{Float32}}),arg1,arg2)
    return err
end

function KSPGetResidualNorm(arg1::KSP{Float32},arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:KSPGetResidualNorm,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Float32}),arg1,arg2)
    return err
end

function KSPGetIterationNumber(arg1::KSP{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:KSPGetIterationNumber,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function KSPGetTotalIterations(arg1::KSP{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:KSPGetTotalIterations,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function KSPCreateVecs(arg1::KSP{Float32},arg2::Integer,arg3::Union{Ptr{Ptr{Vec{Float32}}},StridedArray{Ptr{Vec{Float32}}},Ptr{Ptr{Vec{Float32}}},Ref{Ptr{Vec{Float32}}}},arg4::Integer,arg5::Union{Ptr{Ptr{Vec{Float32}}},StridedArray{Ptr{Vec{Float32}}},Ptr{Ptr{Vec{Float32}}},Ref{Ptr{Vec{Float32}}}})
    err = ccall((:KSPCreateVecs,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64,Ptr{Ptr{Vec{Float32}}},Int64,Ptr{Ptr{Vec{Float32}}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function KSPGetVecs(ksp::KSP{Float32},n::Integer,x::Union{Ptr{Ptr{Vec{Float32}}},StridedArray{Ptr{Vec{Float32}}},Ptr{Ptr{Vec{Float32}}},Ref{Ptr{Vec{Float32}}}},m::Integer,y::Union{Ptr{Ptr{Vec{Float32}}},StridedArray{Ptr{Vec{Float32}}},Ptr{Ptr{Vec{Float32}}},Ref{Ptr{Vec{Float32}}}})
    err = ccall((:KSPGetVecs,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64,Ptr{Ptr{Vec{Float32}}},Int64,Ptr{Ptr{Vec{Float32}}}),ksp,n,x,m,y)
    return err
end

function KSPSetPreSolve(arg1::KSP{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPSetPreSolve,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function KSPSetPostSolve(arg1::KSP{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPSetPostSolve,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function KSPSetPC(arg1::KSP{Float32},arg2::PC{Float32})
    err = ccall((:KSPSetPC,petscRealSingle),PetscErrorCode,(KSP{Float32},PC{Float32}),arg1,arg2)
    return err
end

function KSPGetPC(arg1::KSP{Float32},arg2::Union{Ptr{PC{Float32}},StridedArray{PC{Float32}},Ptr{PC{Float32}},Ref{PC{Float32}}})
    err = ccall((:KSPGetPC,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{PC{Float32}}),arg1,arg2)
    return err
end

function KSPMonitor(arg1::KSP{Float32},arg2::Integer,arg3::Float32)
    err = ccall((:KSPMonitor,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64,Float32),arg1,arg2,arg3)
    return err
end

function KSPMonitorSet(arg1::KSP{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPMonitorSet,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPMonitorCancel(arg1::KSP{Float32})
    err = ccall((:KSPMonitorCancel,petscRealSingle),PetscErrorCode,(KSP{Float32},),arg1)
    return err
end

function KSPGetMonitorContext(arg1::KSP{Float32},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:KSPGetMonitorContext,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Ptr{Void}}),arg1,arg2)
    return err
end

function KSPGetResidualHistory(arg1::KSP{Float32},arg2::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:KSPGetResidualHistory,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Ptr{Float32}},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function KSPSetResidualHistory(arg1::KSP{Float32},arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Integer,arg4::PetscBool)
    err = ccall((:KSPSetResidualHistory,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Float32},Int64,PetscBool),arg1,arg2,arg3,arg4)
    return err
end

function KSPBuildSolutionDefault(arg1::KSP{Float32},arg2::Vec{Float32},arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:KSPBuildSolutionDefault,petscRealSingle),PetscErrorCode,(KSP{Float32},Vec{Float32},Ptr{Vec{Float32}}),arg1,arg2,arg3)
    return err
end

function KSPBuildResidualDefault(arg1::KSP{Float32},arg2::Vec{Float32},arg3::Vec{Float32},arg4::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:KSPBuildResidualDefault,petscRealSingle),PetscErrorCode,(KSP{Float32},Vec{Float32},Vec{Float32},Ptr{Vec{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function KSPDestroyDefault(arg1::KSP{Float32})
    err = ccall((:KSPDestroyDefault,petscRealSingle),PetscErrorCode,(KSP{Float32},),arg1)
    return err
end

function KSPSetWorkVecs(arg1::KSP{Float32},arg2::Integer)
    err = ccall((:KSPSetWorkVecs,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64),arg1,arg2)
    return err
end

function PCKSPGetKSP(arg1::PC{Float32},arg2::Union{Ptr{KSP{Float32}},StridedArray{KSP{Float32}},Ptr{KSP{Float32}},Ref{KSP{Float32}}})
    err = ccall((:PCKSPGetKSP,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{KSP{Float32}}),arg1,arg2)
    return err
end

function PCBJacobiGetSubKSP(arg1::PC{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{KSP{Float32}}},StridedArray{Ptr{KSP{Float32}}},Ptr{Ptr{KSP{Float32}}},Ref{Ptr{KSP{Float32}}}})
    err = ccall((:PCBJacobiGetSubKSP,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Int64},Ptr{Int64},Ptr{Ptr{KSP{Float32}}}),arg1,arg2,arg3,arg4)
    return err
end

function PCASMGetSubKSP(arg1::PC{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{KSP{Float32}}},StridedArray{Ptr{KSP{Float32}}},Ptr{Ptr{KSP{Float32}}},Ref{Ptr{KSP{Float32}}}})
    err = ccall((:PCASMGetSubKSP,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Int64},Ptr{Int64},Ptr{Ptr{KSP{Float32}}}),arg1,arg2,arg3,arg4)
    return err
end

function PCGASMGetSubKSP(arg1::PC{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{KSP{Float32}}},StridedArray{Ptr{KSP{Float32}}},Ptr{Ptr{KSP{Float32}}},Ref{Ptr{KSP{Float32}}}})
    err = ccall((:PCGASMGetSubKSP,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Int64},Ptr{Int64},Ptr{Ptr{KSP{Float32}}}),arg1,arg2,arg3,arg4)
    return err
end

function PCFieldSplitGetSubKSP(arg1::PC{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{KSP{Float32}}},StridedArray{Ptr{KSP{Float32}}},Ptr{Ptr{KSP{Float32}}},Ref{Ptr{KSP{Float32}}}})
    err = ccall((:PCFieldSplitGetSubKSP,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Int64},Ptr{Ptr{KSP{Float32}}}),arg1,arg2,arg3)
    return err
end

function PCMGGetSmoother(arg1::PC{Float32},arg2::Integer,arg3::Union{Ptr{KSP{Float32}},StridedArray{KSP{Float32}},Ptr{KSP{Float32}},Ref{KSP{Float32}}})
    err = ccall((:PCMGGetSmoother,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,Ptr{KSP{Float32}}),arg1,arg2,arg3)
    return err
end

function PCMGGetSmootherDown(arg1::PC{Float32},arg2::Integer,arg3::Union{Ptr{KSP{Float32}},StridedArray{KSP{Float32}},Ptr{KSP{Float32}},Ref{KSP{Float32}}})
    err = ccall((:PCMGGetSmootherDown,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,Ptr{KSP{Float32}}),arg1,arg2,arg3)
    return err
end

function PCMGGetSmootherUp(arg1::PC{Float32},arg2::Integer,arg3::Union{Ptr{KSP{Float32}},StridedArray{KSP{Float32}},Ptr{KSP{Float32}},Ref{KSP{Float32}}})
    err = ccall((:PCMGGetSmootherUp,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,Ptr{KSP{Float32}}),arg1,arg2,arg3)
    return err
end

function PCMGGetCoarseSolve(arg1::PC{Float32},arg2::Union{Ptr{KSP{Float32}},StridedArray{KSP{Float32}},Ptr{KSP{Float32}},Ref{KSP{Float32}}})
    err = ccall((:PCMGGetCoarseSolve,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{KSP{Float32}}),arg1,arg2)
    return err
end

function PCGalerkinGetKSP(arg1::PC{Float32},arg2::Union{Ptr{KSP{Float32}},StridedArray{KSP{Float32}},Ptr{KSP{Float32}},Ref{KSP{Float32}}})
    err = ccall((:PCGalerkinGetKSP,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{KSP{Float32}}),arg1,arg2)
    return err
end

function KSPBuildSolution(arg1::KSP{Float32},arg2::Vec{Float32},arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:KSPBuildSolution,petscRealSingle),PetscErrorCode,(KSP{Float32},Vec{Float32},Ptr{Vec{Float32}}),arg1,arg2,arg3)
    return err
end

function KSPBuildResidual(arg1::KSP{Float32},arg2::Vec{Float32},arg3::Vec{Float32},arg4::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:KSPBuildResidual,petscRealSingle),PetscErrorCode,(KSP{Float32},Vec{Float32},Vec{Float32},Ptr{Vec{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function KSPRichardsonSetScale(arg1::KSP{Float32},arg2::Float32)
    err = ccall((:KSPRichardsonSetScale,petscRealSingle),PetscErrorCode,(KSP{Float32},Float32),arg1,arg2)
    return err
end

function KSPRichardsonSetSelfScale(arg1::KSP{Float32},arg2::PetscBool)
    err = ccall((:KSPRichardsonSetSelfScale,petscRealSingle),PetscErrorCode,(KSP{Float32},PetscBool),arg1,arg2)
    return err
end

function KSPChebyshevSetEigenvalues(arg1::KSP{Float32},arg2::Float32,arg3::Float32)
    err = ccall((:KSPChebyshevSetEigenvalues,petscRealSingle),PetscErrorCode,(KSP{Float32},Float32,Float32),arg1,arg2,arg3)
    return err
end

function KSPChebyshevEstEigSet(arg1::KSP{Float32},arg2::Float32,arg3::Float32,arg4::Float32,arg5::Float32)
    err = ccall((:KSPChebyshevEstEigSet,petscRealSingle),PetscErrorCode,(KSP{Float32},Float32,Float32,Float32,Float32),arg1,arg2,arg3,arg4,arg5)
    return err
end

function KSPChebyshevEstEigSetRandom(arg1::KSP{Float32},arg2::PetscRandom)
    err = ccall((:KSPChebyshevEstEigSetRandom,petscRealSingle),PetscErrorCode,(KSP{Float32},PetscRandom),arg1,arg2)
    return err
end

function KSPChebyshevEstEigGetKSP(arg1::KSP{Float32},arg2::Union{Ptr{KSP{Float32}},StridedArray{KSP{Float32}},Ptr{KSP{Float32}},Ref{KSP{Float32}}})
    err = ccall((:KSPChebyshevEstEigGetKSP,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{KSP{Float32}}),arg1,arg2)
    return err
end

function KSPComputeExtremeSingularValues(arg1::KSP{Float32},arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:KSPComputeExtremeSingularValues,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function KSPComputeEigenvalues(arg1::KSP{Float32},arg2::Integer,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:KSPComputeEigenvalues,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64,Ptr{Float32},Ptr{Float32},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function KSPComputeEigenvaluesExplicitly(arg1::KSP{Float32},arg2::Integer,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:KSPComputeEigenvaluesExplicitly,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64,Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function KSPFCGSetMmax(arg1::KSP{Float32},arg2::Integer)
    err = ccall((:KSPFCGSetMmax,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64),arg1,arg2)
    return err
end

function KSPFCGGetMmax(arg1::KSP{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:KSPFCGGetMmax,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function KSPFCGSetNprealloc(arg1::KSP{Float32},arg2::Integer)
    err = ccall((:KSPFCGSetNprealloc,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64),arg1,arg2)
    return err
end

function KSPFCGGetNprealloc(arg1::KSP{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:KSPFCGGetNprealloc,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function KSPFCGSetTruncationType(arg1::KSP{Float32},arg2::KSPFCGTruncationType)
    err = ccall((:KSPFCGSetTruncationType,petscRealSingle),PetscErrorCode,(KSP{Float32},KSPFCGTruncationType),arg1,arg2)
    return err
end

function KSPFCGGetTruncationType(arg1::KSP{Float32},arg2::Union{Ptr{KSPFCGTruncationType},StridedArray{KSPFCGTruncationType},Ptr{KSPFCGTruncationType},Ref{KSPFCGTruncationType}})
    err = ccall((:KSPFCGGetTruncationType,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{KSPFCGTruncationType}),arg1,arg2)
    return err
end

function KSPGMRESSetRestart(arg1::KSP{Float32},arg2::Integer)
    err = ccall((:KSPGMRESSetRestart,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64),arg1,arg2)
    return err
end

function KSPGMRESGetRestart(arg1::KSP{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:KSPGMRESGetRestart,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function KSPGMRESSetHapTol(arg1::KSP{Float32},arg2::Float32)
    err = ccall((:KSPGMRESSetHapTol,petscRealSingle),PetscErrorCode,(KSP{Float32},Float32),arg1,arg2)
    return err
end

function KSPGMRESSetPreAllocateVectors(arg1::KSP{Float32})
    err = ccall((:KSPGMRESSetPreAllocateVectors,petscRealSingle),PetscErrorCode,(KSP{Float32},),arg1)
    return err
end

function KSPGMRESSetOrthogonalization(arg1::KSP{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPGMRESSetOrthogonalization,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Void}),arg1,arg2)
    return err
end

function KSPGMRESGetOrthogonalization(arg1::KSP{Float32},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:KSPGMRESGetOrthogonalization,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Ptr{Void}}),arg1,arg2)
    return err
end

function KSPGMRESModifiedGramSchmidtOrthogonalization(arg1::KSP{Float32},arg2::Integer)
    err = ccall((:KSPGMRESModifiedGramSchmidtOrthogonalization,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64),arg1,arg2)
    return err
end

function KSPGMRESClassicalGramSchmidtOrthogonalization(arg1::KSP{Float32},arg2::Integer)
    err = ccall((:KSPGMRESClassicalGramSchmidtOrthogonalization,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64),arg1,arg2)
    return err
end

function KSPLGMRESSetAugDim(arg1::KSP{Float32},arg2::Integer)
    err = ccall((:KSPLGMRESSetAugDim,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64),arg1,arg2)
    return err
end

function KSPLGMRESSetConstant(arg1::KSP{Float32})
    err = ccall((:KSPLGMRESSetConstant,petscRealSingle),PetscErrorCode,(KSP{Float32},),arg1)
    return err
end

function KSPGCRSetRestart(arg1::KSP{Float32},arg2::Integer)
    err = ccall((:KSPGCRSetRestart,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64),arg1,arg2)
    return err
end

function KSPGCRGetRestart(arg1::KSP{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:KSPGCRGetRestart,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function KSPGCRSetModifyPC(arg1::KSP{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPGCRSetModifyPC,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPGMRESSetCGSRefinementType(arg1::KSP{Float32},arg2::KSPGMRESCGSRefinementType)
    err = ccall((:KSPGMRESSetCGSRefinementType,petscRealSingle),PetscErrorCode,(KSP{Float32},KSPGMRESCGSRefinementType),arg1,arg2)
    return err
end

function KSPGMRESGetCGSRefinementType(arg1::KSP{Float32},arg2::Union{Ptr{KSPGMRESCGSRefinementType},StridedArray{KSPGMRESCGSRefinementType},Ptr{KSPGMRESCGSRefinementType},Ref{KSPGMRESCGSRefinementType}})
    err = ccall((:KSPGMRESGetCGSRefinementType,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{KSPGMRESCGSRefinementType}),arg1,arg2)
    return err
end

function KSPFGMRESModifyPCNoChange(arg1::KSP{Float32},arg2::Integer,arg3::Integer,arg4::Float32,arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPFGMRESModifyPCNoChange,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64,Int64,Float32,Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function KSPFGMRESModifyPCKSP(arg1::KSP{Float32},arg2::Integer,arg3::Integer,arg4::Float32,arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPFGMRESModifyPCKSP,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64,Int64,Float32,Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function KSPFGMRESSetModifyPC(arg1::KSP{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPFGMRESSetModifyPC,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPQCGSetTrustRegionRadius(arg1::KSP{Float32},arg2::Float32)
    err = ccall((:KSPQCGSetTrustRegionRadius,petscRealSingle),PetscErrorCode,(KSP{Float32},Float32),arg1,arg2)
    return err
end

function KSPQCGGetQuadratic(arg1::KSP{Float32},arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:KSPQCGGetQuadratic,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Float32}),arg1,arg2)
    return err
end

function KSPQCGGetTrialStepNorm(arg1::KSP{Float32},arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:KSPQCGGetTrialStepNorm,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Float32}),arg1,arg2)
    return err
end

function KSPBCGSLSetXRes(arg1::KSP{Float32},arg2::Float32)
    err = ccall((:KSPBCGSLSetXRes,petscRealSingle),PetscErrorCode,(KSP{Float32},Float32),arg1,arg2)
    return err
end

function KSPBCGSLSetPol(arg1::KSP{Float32},arg2::PetscBool)
    err = ccall((:KSPBCGSLSetPol,petscRealSingle),PetscErrorCode,(KSP{Float32},PetscBool),arg1,arg2)
    return err
end

function KSPBCGSLSetEll(arg1::KSP{Float32},arg2::Integer)
    err = ccall((:KSPBCGSLSetEll,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64),arg1,arg2)
    return err
end

function KSPBCGSLSetUsePseudoinverse(arg1::KSP{Float32},arg2::PetscBool)
    err = ccall((:KSPBCGSLSetUsePseudoinverse,petscRealSingle),PetscErrorCode,(KSP{Float32},PetscBool),arg1,arg2)
    return err
end

function KSPSetFromOptions(arg1::KSP{Float32})
    err = ccall((:KSPSetFromOptions,petscRealSingle),PetscErrorCode,(KSP{Float32},),arg1)
    return err
end

function KSPAddOptionsChecker(arg0::Type{Float32},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPAddOptionsChecker,petscRealSingle),PetscErrorCode,(Ptr{Void},),arg1)
    return err
end

function KSPMonitorSingularValue(arg1::KSP{Float32},arg2::Integer,arg3::Float32,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPMonitorSingularValue,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64,Float32,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPMonitorDefault(arg1::KSP{Float32},arg2::Integer,arg3::Float32,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPMonitorDefault,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64,Float32,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPLSQRMonitorDefault(arg1::KSP{Float32},arg2::Integer,arg3::Float32,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPLSQRMonitorDefault,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64,Float32,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPMonitorRange(arg1::KSP{Float32},arg2::Integer,arg3::Float32,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPMonitorRange,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64,Float32,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPMonitorDynamicTolerance(ksp::KSP{Float32},its::Integer,fnorm::Float32,dummy::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPMonitorDynamicTolerance,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64,Float32,Ptr{Void}),ksp,its,fnorm,dummy)
    return err
end

function KSPMonitorDynamicToleranceDestroy(arg0::Type{Float32},dummy::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:KSPMonitorDynamicToleranceDestroy,petscRealSingle),PetscErrorCode,(Ptr{Ptr{Void}},),dummy)
    return err
end

function KSPMonitorTrueResidualNorm(arg1::KSP{Float32},arg2::Integer,arg3::Float32,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPMonitorTrueResidualNorm,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64,Float32,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPMonitorTrueResidualMaxNorm(arg1::KSP{Float32},arg2::Integer,arg3::Float32,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPMonitorTrueResidualMaxNorm,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64,Float32,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPMonitorDefaultShort(arg1::KSP{Float32},arg2::Integer,arg3::Float32,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPMonitorDefaultShort,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64,Float32,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPMonitorSolution(arg1::KSP{Float32},arg2::Integer,arg3::Float32,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPMonitorSolution,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64,Float32,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPMonitorSAWs(arg1::KSP{Float32},arg2::Integer,arg3::Float32,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPMonitorSAWs,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64,Float32,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPMonitorSAWsCreate(arg1::KSP{Float32},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:KSPMonitorSAWsCreate,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Ptr{Void}}),arg1,arg2)
    return err
end

function KSPMonitorSAWsDestroy(arg0::Type{Float32},arg1::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:KSPMonitorSAWsDestroy,petscRealSingle),PetscErrorCode,(Ptr{Ptr{Void}},),arg1)
    return err
end

function KSPGMRESMonitorKrylov(arg1::KSP{Float32},arg2::Integer,arg3::Float32,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPGMRESMonitorKrylov,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64,Float32,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPUnwindPreconditioner(arg1::KSP{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:KSPUnwindPreconditioner,petscRealSingle),PetscErrorCode,(KSP{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function KSPInitialResidual(arg1::KSP{Float32},arg2::Vec{Float32},arg3::Vec{Float32},arg4::Vec{Float32},arg5::Vec{Float32},arg6::Vec{Float32})
    err = ccall((:KSPInitialResidual,petscRealSingle),PetscErrorCode,(KSP{Float32},Vec{Float32},Vec{Float32},Vec{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function KSPSetOperators(arg1::KSP{Float32},arg2::Mat{Float32},arg3::Mat{Float32})
    err = ccall((:KSPSetOperators,petscRealSingle),PetscErrorCode,(KSP{Float32},Mat{Float32},Mat{Float32}),arg1,arg2,arg3)
    return err
end

function KSPGetOperators(arg1::KSP{Float32},arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}},arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:KSPGetOperators,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Mat{Float32}},Ptr{Mat{Float32}}),arg1,arg2,arg3)
    return err
end

function KSPGetOperatorsSet(arg1::KSP{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:KSPGetOperatorsSet,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{PetscBool},Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function KSPSetOptionsPrefix(arg1::KSP{Float32},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:KSPSetOptionsPrefix,petscRealSingle),PetscErrorCode,(KSP{Float32},Cstring),arg1,arg2)
    return err
end

function KSPAppendOptionsPrefix(arg1::KSP{Float32},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:KSPAppendOptionsPrefix,petscRealSingle),PetscErrorCode,(KSP{Float32},Cstring),arg1,arg2)
    return err
end

function KSPGetOptionsPrefix(arg1::KSP{Float32},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:KSPGetOptionsPrefix,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function KSPSetTabLevel(arg1::KSP{Float32},arg2::Integer)
    err = ccall((:KSPSetTabLevel,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64),arg1,arg2)
    return err
end

function KSPGetTabLevel(arg1::KSP{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:KSPGetTabLevel,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function KSPSetDiagonalScale(arg1::KSP{Float32},arg2::PetscBool)
    err = ccall((:KSPSetDiagonalScale,petscRealSingle),PetscErrorCode,(KSP{Float32},PetscBool),arg1,arg2)
    return err
end

function KSPGetDiagonalScale(arg1::KSP{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:KSPGetDiagonalScale,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function KSPSetDiagonalScaleFix(arg1::KSP{Float32},arg2::PetscBool)
    err = ccall((:KSPSetDiagonalScaleFix,petscRealSingle),PetscErrorCode,(KSP{Float32},PetscBool),arg1,arg2)
    return err
end

function KSPGetDiagonalScaleFix(arg1::KSP{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:KSPGetDiagonalScaleFix,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function KSPView(arg1::KSP{Float32},arg2::PetscViewer{Float32})
    err = ccall((:KSPView,petscRealSingle),PetscErrorCode,(KSP{Float32},PetscViewer{Float32}),arg1,arg2)
    return err
end

function KSPLoad(arg1::KSP{Float32},arg2::PetscViewer{Float32})
    err = ccall((:KSPLoad,petscRealSingle),PetscErrorCode,(KSP{Float32},PetscViewer{Float32}),arg1,arg2)
    return err
end

function KSPViewFromOptions(A::KSP{Float32},obj::PetscObject,name::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:KSPViewFromOptions,petscRealSingle),PetscErrorCode,(KSP{Float32},PetscObject,Cstring),A,obj,name)
    return err
end

function KSPReasonView(arg1::KSP{Float32},arg2::PetscViewer{Float32})
    err = ccall((:KSPReasonView,petscRealSingle),PetscErrorCode,(KSP{Float32},PetscViewer{Float32}),arg1,arg2)
    return err
end

function KSPReasonViewFromOptions(arg1::KSP{Float32})
    err = ccall((:KSPReasonViewFromOptions,petscRealSingle),PetscErrorCode,(KSP{Float32},),arg1)
    return err
end

function KSPLSQRSetStandardErrorVec(arg1::KSP{Float32},arg2::Vec{Float32})
    err = ccall((:KSPLSQRSetStandardErrorVec,petscRealSingle),PetscErrorCode,(KSP{Float32},Vec{Float32}),arg1,arg2)
    return err
end

function KSPLSQRGetStandardErrorVec(arg1::KSP{Float32},arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:KSPLSQRGetStandardErrorVec,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Vec{Float32}}),arg1,arg2)
    return err
end

function PCRedundantGetKSP(arg1::PC{Float32},arg2::Union{Ptr{KSP{Float32}},StridedArray{KSP{Float32}},Ptr{KSP{Float32}},Ref{KSP{Float32}}})
    err = ccall((:PCRedundantGetKSP,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{KSP{Float32}}),arg1,arg2)
    return err
end

function PCRedistributeGetKSP(arg1::PC{Float32},arg2::Union{Ptr{KSP{Float32}},StridedArray{KSP{Float32}},Ptr{KSP{Float32}},Ref{KSP{Float32}}})
    err = ccall((:PCRedistributeGetKSP,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{KSP{Float32}}),arg1,arg2)
    return err
end

function KSPSetNormType(arg1::KSP{Float32},arg2::KSPNormType)
    err = ccall((:KSPSetNormType,petscRealSingle),PetscErrorCode,(KSP{Float32},KSPNormType),arg1,arg2)
    return err
end

function KSPGetNormType(arg1::KSP{Float32},arg2::Union{Ptr{KSPNormType},StridedArray{KSPNormType},Ptr{KSPNormType},Ref{KSPNormType}})
    err = ccall((:KSPGetNormType,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{KSPNormType}),arg1,arg2)
    return err
end

function KSPSetSupportedNorm(ksp::KSP{Float32},arg1::KSPNormType,arg2::PCSide,arg3::Integer)
    err = ccall((:KSPSetSupportedNorm,petscRealSingle),PetscErrorCode,(KSP{Float32},KSPNormType,PCSide,Int64),ksp,arg1,arg2,arg3)
    return err
end

function KSPSetCheckNormIteration(arg1::KSP{Float32},arg2::Integer)
    err = ccall((:KSPSetCheckNormIteration,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64),arg1,arg2)
    return err
end

function KSPSetLagNorm(arg1::KSP{Float32},arg2::PetscBool)
    err = ccall((:KSPSetLagNorm,petscRealSingle),PetscErrorCode,(KSP{Float32},PetscBool),arg1,arg2)
    return err
end

function KSPSetConvergenceTest(arg1::KSP{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPSetConvergenceTest,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPGetConvergenceContext(arg1::KSP{Float32},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:KSPGetConvergenceContext,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Ptr{Void}}),arg1,arg2)
    return err
end

function KSPConvergedDefault(arg1::KSP{Float32},arg2::Integer,arg3::Float32,arg4::Union{Ptr{KSPConvergedReason},StridedArray{KSPConvergedReason},Ptr{KSPConvergedReason},Ref{KSPConvergedReason}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPConvergedDefault,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64,Float32,Ptr{KSPConvergedReason},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function KSPConvergedLSQR(arg1::KSP{Float32},arg2::Integer,arg3::Float32,arg4::Union{Ptr{KSPConvergedReason},StridedArray{KSPConvergedReason},Ptr{KSPConvergedReason},Ref{KSPConvergedReason}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPConvergedLSQR,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64,Float32,Ptr{KSPConvergedReason},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function KSPConvergedDefaultDestroy(arg0::Type{Float32},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPConvergedDefaultDestroy,petscRealSingle),PetscErrorCode,(Ptr{Void},),arg1)
    return err
end

function KSPConvergedDefaultCreate(arg0::Type{Float32},arg1::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:KSPConvergedDefaultCreate,petscRealSingle),PetscErrorCode,(Ptr{Ptr{Void}},),arg1)
    return err
end

function KSPConvergedDefaultSetUIRNorm(arg1::KSP{Float32})
    err = ccall((:KSPConvergedDefaultSetUIRNorm,petscRealSingle),PetscErrorCode,(KSP{Float32},),arg1)
    return err
end

function KSPConvergedDefaultSetUMIRNorm(arg1::KSP{Float32})
    err = ccall((:KSPConvergedDefaultSetUMIRNorm,petscRealSingle),PetscErrorCode,(KSP{Float32},),arg1)
    return err
end

function KSPConvergedSkip(arg1::KSP{Float32},arg2::Integer,arg3::Float32,arg4::Union{Ptr{KSPConvergedReason},StridedArray{KSPConvergedReason},Ptr{KSPConvergedReason},Ref{KSPConvergedReason}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPConvergedSkip,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64,Float32,Ptr{KSPConvergedReason},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function KSPGetConvergedReason(arg1::KSP{Float32},arg2::Union{Ptr{KSPConvergedReason},StridedArray{KSPConvergedReason},Ptr{KSPConvergedReason},Ref{KSPConvergedReason}})
    err = ccall((:KSPGetConvergedReason,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{KSPConvergedReason}),arg1,arg2)
    return err
end

function KSPDefaultConverged(arg0::Type{Float32})
    err = ccall((:KSPDefaultConverged,petscRealSingle),Void,())
    return err
end

function KSPDefaultConvergedDestroy(arg0::Type{Float32})
    err = ccall((:KSPDefaultConvergedDestroy,petscRealSingle),Void,())
    return err
end

function KSPDefaultConvergedCreate(arg0::Type{Float32})
    err = ccall((:KSPDefaultConvergedCreate,petscRealSingle),Void,())
    return err
end

function KSPDefaultConvergedSetUIRNorm(arg0::Type{Float32})
    err = ccall((:KSPDefaultConvergedSetUIRNorm,petscRealSingle),Void,())
    return err
end

function KSPDefaultConvergedSetUMIRNorm(arg0::Type{Float32})
    err = ccall((:KSPDefaultConvergedSetUMIRNorm,petscRealSingle),Void,())
    return err
end

function KSPSkipConverged(arg0::Type{Float32})
    err = ccall((:KSPSkipConverged,petscRealSingle),Void,())
    return err
end

function KSPComputeExplicitOperator(arg1::KSP{Float32},arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:KSPComputeExplicitOperator,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Mat{Float32}}),arg1,arg2)
    return err
end

function KSPCGSetType(arg1::KSP{Float32},arg2::KSPCGType)
    err = ccall((:KSPCGSetType,petscRealSingle),PetscErrorCode,(KSP{Float32},KSPCGType),arg1,arg2)
    return err
end

function KSPCGUseSingleReduction(arg1::KSP{Float32},arg2::PetscBool)
    err = ccall((:KSPCGUseSingleReduction,petscRealSingle),PetscErrorCode,(KSP{Float32},PetscBool),arg1,arg2)
    return err
end

function KSPNASHSetRadius(arg1::KSP{Float32},arg2::Float32)
    err = ccall((:KSPNASHSetRadius,petscRealSingle),PetscErrorCode,(KSP{Float32},Float32),arg1,arg2)
    return err
end

function KSPNASHGetNormD(arg1::KSP{Float32},arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:KSPNASHGetNormD,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Float32}),arg1,arg2)
    return err
end

function KSPNASHGetObjFcn(arg1::KSP{Float32},arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:KSPNASHGetObjFcn,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Float32}),arg1,arg2)
    return err
end

function KSPSTCGSetRadius(arg1::KSP{Float32},arg2::Float32)
    err = ccall((:KSPSTCGSetRadius,petscRealSingle),PetscErrorCode,(KSP{Float32},Float32),arg1,arg2)
    return err
end

function KSPSTCGGetNormD(arg1::KSP{Float32},arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:KSPSTCGGetNormD,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Float32}),arg1,arg2)
    return err
end

function KSPSTCGGetObjFcn(arg1::KSP{Float32},arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:KSPSTCGGetObjFcn,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Float32}),arg1,arg2)
    return err
end

function KSPGLTRSetRadius(arg1::KSP{Float32},arg2::Float32)
    err = ccall((:KSPGLTRSetRadius,petscRealSingle),PetscErrorCode,(KSP{Float32},Float32),arg1,arg2)
    return err
end

function KSPGLTRGetNormD(arg1::KSP{Float32},arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:KSPGLTRGetNormD,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Float32}),arg1,arg2)
    return err
end

function KSPGLTRGetObjFcn(arg1::KSP{Float32},arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:KSPGLTRGetObjFcn,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Float32}),arg1,arg2)
    return err
end

function KSPGLTRGetMinEig(arg1::KSP{Float32},arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:KSPGLTRGetMinEig,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Float32}),arg1,arg2)
    return err
end

function KSPGLTRGetLambda(arg1::KSP{Float32},arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:KSPGLTRGetLambda,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Float32}),arg1,arg2)
    return err
end

function KSPPythonSetType(arg1::KSP{Float32},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:KSPPythonSetType,petscRealSingle),PetscErrorCode,(KSP{Float32},Cstring),arg1,arg2)
    return err
end

function PCPreSolve(arg1::PC{Float32},arg2::KSP{Float32})
    err = ccall((:PCPreSolve,petscRealSingle),PetscErrorCode,(PC{Float32},KSP{Float32}),arg1,arg2)
    return err
end

function PCPostSolve(arg1::PC{Float32},arg2::KSP{Float32})
    err = ccall((:PCPostSolve,petscRealSingle),PetscErrorCode,(PC{Float32},KSP{Float32}),arg1,arg2)
    return err
end

function KSPMonitorLGResidualNormCreate(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Union{Ptr{Ptr{PetscObject}},StridedArray{Ptr{PetscObject}},Ptr{Ptr{PetscObject}},Ref{Ptr{PetscObject}}})
    err = ccall((:KSPMonitorLGResidualNormCreate,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Cint,Cint,Cint,Cint,Ptr{Ptr{PetscObject}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function KSPMonitorLGResidualNorm(arg1::KSP{Float32},arg2::Integer,arg3::Float32,arg4::Union{Ptr{PetscObject},StridedArray{PetscObject},Ptr{PetscObject},Ref{PetscObject}})
    err = ccall((:KSPMonitorLGResidualNorm,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64,Float32,Ptr{PetscObject}),arg1,arg2,arg3,arg4)
    return err
end

function KSPMonitorLGResidualNormDestroy(arg0::Type{Float32},arg1::Union{Ptr{Ptr{PetscObject}},StridedArray{Ptr{PetscObject}},Ptr{Ptr{PetscObject}},Ref{Ptr{PetscObject}}})
    err = ccall((:KSPMonitorLGResidualNormDestroy,petscRealSingle),PetscErrorCode,(Ptr{Ptr{PetscObject}},),arg1)
    return err
end

function KSPMonitorLGTrueResidualNormCreate(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Union{Ptr{Ptr{PetscObject}},StridedArray{Ptr{PetscObject}},Ptr{Ptr{PetscObject}},Ref{Ptr{PetscObject}}})
    err = ccall((:KSPMonitorLGTrueResidualNormCreate,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Cint,Cint,Cint,Cint,Ptr{Ptr{PetscObject}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function KSPMonitorLGTrueResidualNorm(arg1::KSP{Float32},arg2::Integer,arg3::Float32,arg4::Union{Ptr{PetscObject},StridedArray{PetscObject},Ptr{PetscObject},Ref{PetscObject}})
    err = ccall((:KSPMonitorLGTrueResidualNorm,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64,Float32,Ptr{PetscObject}),arg1,arg2,arg3,arg4)
    return err
end

function KSPMonitorLGTrueResidualNormDestroy(arg0::Type{Float32},arg1::Union{Ptr{Ptr{PetscObject}},StridedArray{Ptr{PetscObject}},Ptr{Ptr{PetscObject}},Ref{Ptr{PetscObject}}})
    err = ccall((:KSPMonitorLGTrueResidualNormDestroy,petscRealSingle),PetscErrorCode,(Ptr{Ptr{PetscObject}},),arg1)
    return err
end

function KSPMonitorLGRange(arg1::KSP{Float32},arg2::Integer,arg3::Float32,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPMonitorLGRange,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64,Float32,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function PCShellSetPreSolve(arg1::PC{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCShellSetPreSolve,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Void}),arg1,arg2)
    return err
end

function PCShellSetPostSolve(arg1::PC{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCShellSetPostSolve,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Void}),arg1,arg2)
    return err
end

#= skipping function with undefined symbols: 
 function KSPFischerGuessCreate(arg1::KSP{Float32},arg2::Integer,arg3::Integer,arg4::Union{Ptr{KSPFischerGuess},StridedArray{KSPFischerGuess},Ptr{KSPFischerGuess},Ref{KSPFischerGuess}})
    ccall((:KSPFischerGuessCreate,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64,Int64,Ptr{KSPFischerGuess}),arg1,arg2,arg3,arg4)
end 
=#
#= skipping function with undefined symbols: 
 function KSPFischerGuessDestroy(arg0::Type{Float32},arg1::Union{Ptr{KSPFischerGuess},StridedArray{KSPFischerGuess},Ptr{KSPFischerGuess},Ref{KSPFischerGuess}})
    ccall((:KSPFischerGuessDestroy,petscRealSingle),PetscErrorCode,(Ptr{KSPFischerGuess},),arg1)
end 
=#
#= skipping function with undefined symbols: 
 function KSPFischerGuessReset(arg0::Type{Float32},arg1::KSPFischerGuess)
    ccall((:KSPFischerGuessReset,petscRealSingle),PetscErrorCode,(KSPFischerGuess,),arg1)
end 
=#
#= skipping function with undefined symbols: 
 function KSPFischerGuessUpdate(arg1::KSPFischerGuess,arg2::Vec{Float32})
    ccall((:KSPFischerGuessUpdate,petscRealSingle),PetscErrorCode,(KSPFischerGuess,Vec{Float32}),arg1,arg2)
end 
=#
#= skipping function with undefined symbols: 
 function KSPFischerGuessFormGuess(arg1::KSPFischerGuess,arg2::Vec{Float32},arg3::Vec{Float32})
    ccall((:KSPFischerGuessFormGuess,petscRealSingle),PetscErrorCode,(KSPFischerGuess,Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
end 
=#
#= skipping function with undefined symbols: 
 function KSPFischerGuessSetFromOptions(arg0::Type{Float32},arg1::KSPFischerGuess)
    ccall((:KSPFischerGuessSetFromOptions,petscRealSingle),PetscErrorCode,(KSPFischerGuess,),arg1)
end 
=#
function KSPSetUseFischerGuess(arg1::KSP{Float32},arg2::Integer,arg3::Integer)
    err = ccall((:KSPSetUseFischerGuess,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64,Int64),arg1,arg2,arg3)
    return err
end

#= skipping function with undefined symbols: 
 function KSPSetFischerGuess(arg1::KSP{Float32},arg2::KSPFischerGuess)
    ccall((:KSPSetFischerGuess,petscRealSingle),PetscErrorCode,(KSP{Float32},KSPFischerGuess),arg1,arg2)
end 
=#
#= skipping function with undefined symbols: 
 function KSPGetFischerGuess(arg1::KSP{Float32},arg2::Union{Ptr{KSPFischerGuess},StridedArray{KSPFischerGuess},Ptr{KSPFischerGuess},Ref{KSPFischerGuess}})
    ccall((:KSPGetFischerGuess,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{KSPFischerGuess}),arg1,arg2)
end 
=#
function MatCreateSchurComplement(arg1::Mat{Float32},arg2::Mat{Float32},arg3::Mat{Float32},arg4::Mat{Float32},arg5::Mat{Float32},arg6::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateSchurComplement,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},Mat{Float32},Mat{Float32},Mat{Float32},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatSchurComplementGetKSP(arg1::Mat{Float32},arg2::Union{Ptr{KSP{Float32}},StridedArray{KSP{Float32}},Ptr{KSP{Float32}},Ref{KSP{Float32}}})
    err = ccall((:MatSchurComplementGetKSP,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{KSP{Float32}}),arg1,arg2)
    return err
end

function MatSchurComplementSetKSP(arg1::Mat{Float32},arg2::KSP{Float32})
    err = ccall((:MatSchurComplementSetKSP,petscRealSingle),PetscErrorCode,(Mat{Float32},KSP{Float32}),arg1,arg2)
    return err
end

function MatSchurComplementSetSubMatrices(arg1::Mat{Float32},arg2::Mat{Float32},arg3::Mat{Float32},arg4::Mat{Float32},arg5::Mat{Float32},arg6::Mat{Float32})
    err = ccall((:MatSchurComplementSetSubMatrices,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},Mat{Float32},Mat{Float32},Mat{Float32},Mat{Float32}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatSchurComplementUpdateSubMatrices(arg1::Mat{Float32},arg2::Mat{Float32},arg3::Mat{Float32},arg4::Mat{Float32},arg5::Mat{Float32},arg6::Mat{Float32})
    err = ccall((:MatSchurComplementUpdateSubMatrices,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},Mat{Float32},Mat{Float32},Mat{Float32},Mat{Float32}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatSchurComplementGetSubMatrices(arg1::Mat{Float32},arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}},arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}},arg4::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}},arg5::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}},arg6::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatSchurComplementGetSubMatrices,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Mat{Float32}},Ptr{Mat{Float32}},Ptr{Mat{Float32}},Ptr{Mat{Float32}},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatSchurComplementSetAinvType(arg1::Mat{Float32},arg2::MatSchurComplementAinvType)
    err = ccall((:MatSchurComplementSetAinvType,petscRealSingle),PetscErrorCode,(Mat{Float32},MatSchurComplementAinvType),arg1,arg2)
    return err
end

function MatSchurComplementGetAinvType(arg1::Mat{Float32},arg2::Union{Ptr{MatSchurComplementAinvType},StridedArray{MatSchurComplementAinvType},Ptr{MatSchurComplementAinvType},Ref{MatSchurComplementAinvType}})
    err = ccall((:MatSchurComplementGetAinvType,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{MatSchurComplementAinvType}),arg1,arg2)
    return err
end

function MatSchurComplementGetPmat(arg1::Mat{Float32},arg2::MatReuse,arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatSchurComplementGetPmat,petscRealSingle),PetscErrorCode,(Mat{Float32},MatReuse,Ptr{Mat{Float32}}),arg1,arg2,arg3)
    return err
end

function MatSchurComplementComputeExplicitOperator(arg1::Mat{Float32},arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatSchurComplementComputeExplicitOperator,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Mat{Float32}}),arg1,arg2)
    return err
end

function MatGetSchurComplement(arg1::Mat{Float32},arg2::IS{Float32},arg3::IS{Float32},arg4::IS{Float32},arg5::IS{Float32},arg6::MatReuse,arg7::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}},arg8::MatSchurComplementAinvType,arg9::MatReuse,arg10::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatGetSchurComplement,petscRealSingle),PetscErrorCode,(Mat{Float32},IS{Float32},IS{Float32},IS{Float32},IS{Float32},MatReuse,Ptr{Mat{Float32}},MatSchurComplementAinvType,MatReuse,Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function MatCreateSchurComplementPmat(arg1::Mat{Float32},arg2::Mat{Float32},arg3::Mat{Float32},arg4::Mat{Float32},arg5::MatSchurComplementAinvType,arg6::MatReuse,arg7::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateSchurComplementPmat,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},Mat{Float32},Mat{Float32},MatSchurComplementAinvType,MatReuse,Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function KSPSetDM(arg1::KSP{Float32},arg2::DM)
    err = ccall((:KSPSetDM,petscRealSingle),PetscErrorCode,(KSP{Float32},DM),arg1,arg2)
    return err
end

function KSPSetDMActive(arg1::KSP{Float32},arg2::PetscBool)
    err = ccall((:KSPSetDMActive,petscRealSingle),PetscErrorCode,(KSP{Float32},PetscBool),arg1,arg2)
    return err
end

function KSPGetDM(arg1::KSP{Float32},arg2::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:KSPGetDM,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{DM}),arg1,arg2)
    return err
end

function KSPSetApplicationContext(arg1::KSP{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPSetApplicationContext,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Void}),arg1,arg2)
    return err
end

function KSPGetApplicationContext(arg1::KSP{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPGetApplicationContext,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Void}),arg1,arg2)
    return err
end

function KSPSetComputeRHS(arg1::KSP{Float32},func::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPSetComputeRHS,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Void},Ptr{Void}),arg1,func,arg2)
    return err
end

function KSPSetComputeOperators(arg1::KSP{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPSetComputeOperators,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function KSPSetComputeInitialGuess(arg1::KSP{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPSetComputeInitialGuess,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMKSPSetComputeOperators(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMKSPSetComputeOperators,petscRealSingle),PetscErrorCode,(DM,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMKSPGetComputeOperators(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMKSPGetComputeOperators,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{Void}},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMKSPSetComputeRHS(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMKSPSetComputeRHS,petscRealSingle),PetscErrorCode,(DM,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMKSPGetComputeRHS(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMKSPGetComputeRHS,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{Void}},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMKSPSetComputeInitialGuess(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMKSPSetComputeInitialGuess,petscRealSingle),PetscErrorCode,(DM,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMKSPGetComputeInitialGuess(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMKSPGetComputeInitialGuess,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{Void}},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMGlobalToLocalSolve(arg1::DM,arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:DMGlobalToLocalSolve,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function DMPlexProjectField(arg1::DM,arg2::Vec{Float32},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::InsertMode,arg5::Vec{Float32})
    err = ccall((:DMPlexProjectField,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},Ptr{Ptr{Void}},InsertMode,Vec{Float32}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function SNESInitializePackage(arg0::Type{Float32})
    err = ccall((:SNESInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function SNESCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{SNES},StridedArray{SNES},Ptr{SNES},Ref{SNES}})
    err = ccall((:SNESCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{SNES}),arg1,arg2)
    return err
end

function SNESReset(arg0::Type{Float32},arg1::SNES)
    err = ccall((:SNESReset,petscRealSingle),PetscErrorCode,(SNES,),arg1)
    return err
end

function SNESDestroy(arg0::Type{Float32},arg1::Union{Ptr{SNES},StridedArray{SNES},Ptr{SNES},Ref{SNES}})
    err = ccall((:SNESDestroy,petscRealSingle),PetscErrorCode,(Ptr{SNES},),arg1)
    return err
end

function SNESSetType(arg0::Type{Float32},arg1::SNES,arg2::SNESType)
    err = ccall((:SNESSetType,petscRealSingle),PetscErrorCode,(SNES,Cstring),arg1,arg2)
    return err
end

function SNESMonitor(arg0::Type{Float32},arg1::SNES,arg2::Integer,arg3::Float32)
    err = ccall((:SNESMonitor,petscRealSingle),PetscErrorCode,(SNES,Int64,Float32),arg1,arg2,arg3)
    return err
end

function SNESMonitorSet(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESMonitorSet,petscRealSingle),PetscErrorCode,(SNES,Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function SNESMonitorCancel(arg0::Type{Float32},arg1::SNES)
    err = ccall((:SNESMonitorCancel,petscRealSingle),PetscErrorCode,(SNES,),arg1)
    return err
end

function SNESMonitorSAWs(arg0::Type{Float32},arg1::SNES,arg2::Integer,arg3::Float32,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESMonitorSAWs,petscRealSingle),PetscErrorCode,(SNES,Int64,Float32,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function SNESMonitorSAWsCreate(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:SNESMonitorSAWsCreate,petscRealSingle),PetscErrorCode,(SNES,Ptr{Ptr{Void}}),arg1,arg2)
    return err
end

function SNESMonitorSAWsDestroy(arg0::Type{Float32},arg1::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:SNESMonitorSAWsDestroy,petscRealSingle),PetscErrorCode,(Ptr{Ptr{Void}},),arg1)
    return err
end

function SNESSetConvergenceHistory(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Integer,arg5::PetscBool)
    err = ccall((:SNESSetConvergenceHistory,petscRealSingle),PetscErrorCode,(SNES,Ptr{Float32},Ptr{Int64},Int64,PetscBool),arg1,arg2,arg3,arg4,arg5)
    return err
end

function SNESGetConvergenceHistory(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:SNESGetConvergenceHistory,petscRealSingle),PetscErrorCode,(SNES,Ptr{Ptr{Float32}},Ptr{Ptr{Int64}},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function SNESSetUp(arg0::Type{Float32},arg1::SNES)
    err = ccall((:SNESSetUp,petscRealSingle),PetscErrorCode,(SNES,),arg1)
    return err
end

function SNESSolve(arg1::SNES,arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:SNESSolve,petscRealSingle),PetscErrorCode,(SNES,Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function SNESSetErrorIfNotConverged(arg0::Type{Float32},arg1::SNES,arg2::PetscBool)
    err = ccall((:SNESSetErrorIfNotConverged,petscRealSingle),PetscErrorCode,(SNES,PetscBool),arg1,arg2)
    return err
end

function SNESGetErrorIfNotConverged(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:SNESGetErrorIfNotConverged,petscRealSingle),PetscErrorCode,(SNES,Ptr{PetscBool}),arg1,arg2)
    return err
end

function SNESSetWorkVecs(arg0::Type{Float32},arg1::SNES,arg2::Integer)
    err = ccall((:SNESSetWorkVecs,petscRealSingle),PetscErrorCode,(SNES,Int64),arg1,arg2)
    return err
end

function SNESAddOptionsChecker(arg0::Type{Float32},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESAddOptionsChecker,petscRealSingle),PetscErrorCode,(Ptr{Void},),arg1)
    return err
end

function SNESSetUpdate(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESSetUpdate,petscRealSingle),PetscErrorCode,(SNES,Ptr{Void}),arg1,arg2)
    return err
end

function SNESRegister(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function SNESGetKSP(arg1::SNES,arg2::Union{Ptr{KSP{Float32}},StridedArray{KSP{Float32}},Ptr{KSP{Float32}},Ref{KSP{Float32}}})
    err = ccall((:SNESGetKSP,petscRealSingle),PetscErrorCode,(SNES,Ptr{KSP{Float32}}),arg1,arg2)
    return err
end

function SNESSetKSP(arg1::SNES,arg2::KSP{Float32})
    err = ccall((:SNESSetKSP,petscRealSingle),PetscErrorCode,(SNES,KSP{Float32}),arg1,arg2)
    return err
end

function SNESSetSolution(arg1::SNES,arg2::Vec{Float32})
    err = ccall((:SNESSetSolution,petscRealSingle),PetscErrorCode,(SNES,Vec{Float32}),arg1,arg2)
    return err
end

function SNESGetSolution(arg1::SNES,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:SNESGetSolution,petscRealSingle),PetscErrorCode,(SNES,Ptr{Vec{Float32}}),arg1,arg2)
    return err
end

function SNESGetSolutionUpdate(arg1::SNES,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:SNESGetSolutionUpdate,petscRealSingle),PetscErrorCode,(SNES,Ptr{Vec{Float32}}),arg1,arg2)
    return err
end

function SNESGetRhs(arg1::SNES,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:SNESGetRhs,petscRealSingle),PetscErrorCode,(SNES,Ptr{Vec{Float32}}),arg1,arg2)
    return err
end

function SNESView(arg1::SNES,arg2::PetscViewer{Float32})
    err = ccall((:SNESView,petscRealSingle),PetscErrorCode,(SNES,PetscViewer{Float32}),arg1,arg2)
    return err
end

function SNESLoad(arg1::SNES,arg2::PetscViewer{Float32})
    err = ccall((:SNESLoad,petscRealSingle),PetscErrorCode,(SNES,PetscViewer{Float32}),arg1,arg2)
    return err
end

function SNESViewFromOptions(arg0::Type{Float32},A::SNES,obj::PetscObject,name::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:SNESViewFromOptions,petscRealSingle),PetscErrorCode,(SNES,PetscObject,Cstring),A,obj,name)
    return err
end

function SNESReasonView(arg1::SNES,arg2::PetscViewer{Float32})
    err = ccall((:SNESReasonView,petscRealSingle),PetscErrorCode,(SNES,PetscViewer{Float32}),arg1,arg2)
    return err
end

function SNESReasonViewFromOptions(arg0::Type{Float32},arg1::SNES)
    err = ccall((:SNESReasonViewFromOptions,petscRealSingle),PetscErrorCode,(SNES,),arg1)
    return err
end

function SNESSetOptionsPrefix(arg0::Type{Float32},arg1::SNES,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:SNESSetOptionsPrefix,petscRealSingle),PetscErrorCode,(SNES,Cstring),arg1,arg2)
    return err
end

function SNESAppendOptionsPrefix(arg0::Type{Float32},arg1::SNES,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:SNESAppendOptionsPrefix,petscRealSingle),PetscErrorCode,(SNES,Cstring),arg1,arg2)
    return err
end

function SNESGetOptionsPrefix(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:SNESGetOptionsPrefix,petscRealSingle),PetscErrorCode,(SNES,Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function SNESSetFromOptions(arg0::Type{Float32},arg1::SNES)
    err = ccall((:SNESSetFromOptions,petscRealSingle),PetscErrorCode,(SNES,),arg1)
    return err
end

function MatCreateSNESMF(arg1::SNES,arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateSNESMF,petscRealSingle),PetscErrorCode,(SNES,Ptr{Mat{Float32}}),arg1,arg2)
    return err
end

function MatMFFDComputeJacobian(arg1::SNES,arg2::Vec{Float32},arg3::Mat{Float32},arg4::Mat{Float32},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatMFFDComputeJacobian,petscRealSingle),PetscErrorCode,(SNES,Vec{Float32},Mat{Float32},Mat{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatDAADSetSNES(arg1::Mat{Float32},arg2::SNES)
    err = ccall((:MatDAADSetSNES,petscRealSingle),PetscErrorCode,(Mat{Float32},SNES),arg1,arg2)
    return err
end

function SNESGetType(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{SNESType},StridedArray{SNESType},Ptr{SNESType},Ref{SNESType}})
    (arg2_,tmp) = symbol_get_before(arg2)
    err = ccall((:SNESGetType,petscRealSingle),PetscErrorCode,(SNES,Ptr{Ptr{UInt8}}),arg1,arg2_)
    symbol_get_after(arg2_,arg2)
    return err
end

function SNESMonitorDefault(arg0::Type{Float32},arg1::SNES,arg2::Integer,arg3::Float32,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESMonitorDefault,petscRealSingle),PetscErrorCode,(SNES,Int64,Float32,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function SNESMonitorRange(arg0::Type{Float32},arg1::SNES,arg2::Integer,arg3::Float32,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESMonitorRange,petscRealSingle),PetscErrorCode,(SNES,Int64,Float32,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function SNESMonitorRatio(arg0::Type{Float32},arg1::SNES,arg2::Integer,arg3::Float32,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESMonitorRatio,petscRealSingle),PetscErrorCode,(SNES,Int64,Float32,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function SNESMonitorSetRatio(arg1::SNES,arg2::PetscViewer{Float32})
    err = ccall((:SNESMonitorSetRatio,petscRealSingle),PetscErrorCode,(SNES,PetscViewer{Float32}),arg1,arg2)
    return err
end

function SNESMonitorSolution(arg0::Type{Float32},arg1::SNES,arg2::Integer,arg3::Float32,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESMonitorSolution,petscRealSingle),PetscErrorCode,(SNES,Int64,Float32,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function SNESMonitorResidual(arg0::Type{Float32},arg1::SNES,arg2::Integer,arg3::Float32,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESMonitorResidual,petscRealSingle),PetscErrorCode,(SNES,Int64,Float32,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function SNESMonitorSolutionUpdate(arg0::Type{Float32},arg1::SNES,arg2::Integer,arg3::Float32,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESMonitorSolutionUpdate,petscRealSingle),PetscErrorCode,(SNES,Int64,Float32,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function SNESMonitorDefaultShort(arg0::Type{Float32},arg1::SNES,arg2::Integer,arg3::Float32,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESMonitorDefaultShort,petscRealSingle),PetscErrorCode,(SNES,Int64,Float32,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function SNESMonitorDefaultField(arg0::Type{Float32},arg1::SNES,arg2::Integer,arg3::Float32,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESMonitorDefaultField,petscRealSingle),PetscErrorCode,(SNES,Int64,Float32,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function SNESMonitorJacUpdateSpectrum(arg0::Type{Float32},arg1::SNES,arg2::Integer,arg3::Float32,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESMonitorJacUpdateSpectrum,petscRealSingle),PetscErrorCode,(SNES,Int64,Float32,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function SNESMonitorFields(arg0::Type{Float32},arg1::SNES,arg2::Integer,arg3::Float32,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESMonitorFields,petscRealSingle),PetscErrorCode,(SNES,Int64,Float32,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPMonitorSNES(arg1::KSP{Float32},arg2::Integer,arg3::Float32,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPMonitorSNES,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64,Float32,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPMonitorSNESLGResidualNormCreate(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Union{Ptr{Ptr{PetscObject}},StridedArray{Ptr{PetscObject}},Ptr{Ptr{PetscObject}},Ref{Ptr{PetscObject}}})
    err = ccall((:KSPMonitorSNESLGResidualNormCreate,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Cint,Cint,Cint,Cint,Ptr{Ptr{PetscObject}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function KSPMonitorSNESLGResidualNorm(arg1::KSP{Float32},arg2::Integer,arg3::Float32,arg4::Union{Ptr{PetscObject},StridedArray{PetscObject},Ptr{PetscObject},Ref{PetscObject}})
    err = ccall((:KSPMonitorSNESLGResidualNorm,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64,Float32,Ptr{PetscObject}),arg1,arg2,arg3,arg4)
    return err
end

function KSPMonitorSNESLGResidualNormDestroy(arg0::Type{Float32},arg1::Union{Ptr{Ptr{PetscObject}},StridedArray{Ptr{PetscObject}},Ptr{Ptr{PetscObject}},Ref{Ptr{PetscObject}}})
    err = ccall((:KSPMonitorSNESLGResidualNormDestroy,petscRealSingle),PetscErrorCode,(Ptr{Ptr{PetscObject}},),arg1)
    return err
end

function SNESSetTolerances(arg0::Type{Float32},arg1::SNES,arg2::Float32,arg3::Float32,arg4::Float32,arg5::Integer,arg6::Integer)
    err = ccall((:SNESSetTolerances,petscRealSingle),PetscErrorCode,(SNES,Float32,Float32,Float32,Int64,Int64),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function SNESGetTolerances(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:SNESGetTolerances,petscRealSingle),PetscErrorCode,(SNES,Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function SNESSetTrustRegionTolerance(arg0::Type{Float32},arg1::SNES,arg2::Float32)
    err = ccall((:SNESSetTrustRegionTolerance,petscRealSingle),PetscErrorCode,(SNES,Float32),arg1,arg2)
    return err
end

function SNESGetIterationNumber(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:SNESGetIterationNumber,petscRealSingle),PetscErrorCode,(SNES,Ptr{Int64}),arg1,arg2)
    return err
end

function SNESSetIterationNumber(arg0::Type{Float32},arg1::SNES,arg2::Integer)
    err = ccall((:SNESSetIterationNumber,petscRealSingle),PetscErrorCode,(SNES,Int64),arg1,arg2)
    return err
end

function SNESGetNonlinearStepFailures(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:SNESGetNonlinearStepFailures,petscRealSingle),PetscErrorCode,(SNES,Ptr{Int64}),arg1,arg2)
    return err
end

function SNESSetMaxNonlinearStepFailures(arg0::Type{Float32},arg1::SNES,arg2::Integer)
    err = ccall((:SNESSetMaxNonlinearStepFailures,petscRealSingle),PetscErrorCode,(SNES,Int64),arg1,arg2)
    return err
end

function SNESGetMaxNonlinearStepFailures(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:SNESGetMaxNonlinearStepFailures,petscRealSingle),PetscErrorCode,(SNES,Ptr{Int64}),arg1,arg2)
    return err
end

function SNESGetNumberFunctionEvals(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:SNESGetNumberFunctionEvals,petscRealSingle),PetscErrorCode,(SNES,Ptr{Int64}),arg1,arg2)
    return err
end

function SNESSetLagPreconditioner(arg0::Type{Float32},arg1::SNES,arg2::Integer)
    err = ccall((:SNESSetLagPreconditioner,petscRealSingle),PetscErrorCode,(SNES,Int64),arg1,arg2)
    return err
end

function SNESGetLagPreconditioner(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:SNESGetLagPreconditioner,petscRealSingle),PetscErrorCode,(SNES,Ptr{Int64}),arg1,arg2)
    return err
end

function SNESSetLagJacobian(arg0::Type{Float32},arg1::SNES,arg2::Integer)
    err = ccall((:SNESSetLagJacobian,petscRealSingle),PetscErrorCode,(SNES,Int64),arg1,arg2)
    return err
end

function SNESGetLagJacobian(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:SNESGetLagJacobian,petscRealSingle),PetscErrorCode,(SNES,Ptr{Int64}),arg1,arg2)
    return err
end

function SNESSetLagPreconditionerPersists(arg0::Type{Float32},arg1::SNES,arg2::PetscBool)
    err = ccall((:SNESSetLagPreconditionerPersists,petscRealSingle),PetscErrorCode,(SNES,PetscBool),arg1,arg2)
    return err
end

function SNESSetLagJacobianPersists(arg0::Type{Float32},arg1::SNES,arg2::PetscBool)
    err = ccall((:SNESSetLagJacobianPersists,petscRealSingle),PetscErrorCode,(SNES,PetscBool),arg1,arg2)
    return err
end

function SNESSetGridSequence(arg0::Type{Float32},arg1::SNES,arg2::Integer)
    err = ccall((:SNESSetGridSequence,petscRealSingle),PetscErrorCode,(SNES,Int64),arg1,arg2)
    return err
end

function SNESGetGridSequence(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:SNESGetGridSequence,petscRealSingle),PetscErrorCode,(SNES,Ptr{Int64}),arg1,arg2)
    return err
end

function SNESGetLinearSolveIterations(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:SNESGetLinearSolveIterations,petscRealSingle),PetscErrorCode,(SNES,Ptr{Int64}),arg1,arg2)
    return err
end

function SNESGetLinearSolveFailures(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:SNESGetLinearSolveFailures,petscRealSingle),PetscErrorCode,(SNES,Ptr{Int64}),arg1,arg2)
    return err
end

function SNESSetMaxLinearSolveFailures(arg0::Type{Float32},arg1::SNES,arg2::Integer)
    err = ccall((:SNESSetMaxLinearSolveFailures,petscRealSingle),PetscErrorCode,(SNES,Int64),arg1,arg2)
    return err
end

function SNESGetMaxLinearSolveFailures(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:SNESGetMaxLinearSolveFailures,petscRealSingle),PetscErrorCode,(SNES,Ptr{Int64}),arg1,arg2)
    return err
end

function SNESSetCountersReset(arg0::Type{Float32},arg1::SNES,arg2::PetscBool)
    err = ccall((:SNESSetCountersReset,petscRealSingle),PetscErrorCode,(SNES,PetscBool),arg1,arg2)
    return err
end

function SNESKSPSetUseEW(arg0::Type{Float32},arg1::SNES,arg2::PetscBool)
    err = ccall((:SNESKSPSetUseEW,petscRealSingle),PetscErrorCode,(SNES,PetscBool),arg1,arg2)
    return err
end

function SNESKSPGetUseEW(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:SNESKSPGetUseEW,petscRealSingle),PetscErrorCode,(SNES,Ptr{PetscBool}),arg1,arg2)
    return err
end

function SNESKSPSetParametersEW(arg0::Type{Float32},arg1::SNES,arg2::Integer,arg3::Float32,arg4::Float32,arg5::Float32,arg6::Float32,arg7::Float32,arg8::Float32)
    err = ccall((:SNESKSPSetParametersEW,petscRealSingle),PetscErrorCode,(SNES,Int64,Float32,Float32,Float32,Float32,Float32,Float32),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function SNESKSPGetParametersEW(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg8::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:SNESKSPGetParametersEW,petscRealSingle),PetscErrorCode,(SNES,Ptr{Int64},Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function SNESMonitorLGCreate(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Union{Ptr{Ptr{PetscObject}},StridedArray{Ptr{PetscObject}},Ptr{Ptr{PetscObject}},Ref{Ptr{PetscObject}}})
    err = ccall((:SNESMonitorLGCreate,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Cint,Cint,Cint,Cint,Ptr{Ptr{PetscObject}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function SNESMonitorLGResidualNorm(arg0::Type{Float32},arg1::SNES,arg2::Integer,arg3::Float32,arg4::Union{Ptr{PetscObject},StridedArray{PetscObject},Ptr{PetscObject},Ref{PetscObject}})
    err = ccall((:SNESMonitorLGResidualNorm,petscRealSingle),PetscErrorCode,(SNES,Int64,Float32,Ptr{PetscObject}),arg1,arg2,arg3,arg4)
    return err
end

function SNESMonitorLGDestroy(arg0::Type{Float32},arg1::Union{Ptr{Ptr{PetscObject}},StridedArray{Ptr{PetscObject}},Ptr{Ptr{PetscObject}},Ref{Ptr{PetscObject}}})
    err = ccall((:SNESMonitorLGDestroy,petscRealSingle),PetscErrorCode,(Ptr{Ptr{PetscObject}},),arg1)
    return err
end

function SNESMonitorLGRange(arg0::Type{Float32},arg1::SNES,arg2::Integer,arg3::Float32,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESMonitorLGRange,petscRealSingle),PetscErrorCode,(SNES,Int64,Float32,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function SNESSetApplicationContext(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESSetApplicationContext,petscRealSingle),PetscErrorCode,(SNES,Ptr{Void}),arg1,arg2)
    return err
end

function SNESGetApplicationContext(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESGetApplicationContext,petscRealSingle),PetscErrorCode,(SNES,Ptr{Void}),arg1,arg2)
    return err
end

function SNESSetComputeApplicationContext(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESSetComputeApplicationContext,petscRealSingle),PetscErrorCode,(SNES,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function SNESPythonSetType(arg0::Type{Float32},arg1::SNES,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:SNESPythonSetType,petscRealSingle),PetscErrorCode,(SNES,Cstring),arg1,arg2)
    return err
end

function SNESSetFunctionDomainError(arg0::Type{Float32},arg1::SNES)
    err = ccall((:SNESSetFunctionDomainError,petscRealSingle),PetscErrorCode,(SNES,),arg1)
    return err
end

function SNESGetFunctionDomainError(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:SNESGetFunctionDomainError,petscRealSingle),PetscErrorCode,(SNES,Ptr{PetscBool}),arg1,arg2)
    return err
end

function SNESSetConvergenceTest(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESSetConvergenceTest,petscRealSingle),PetscErrorCode,(SNES,Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function SNESConvergedDefault(arg0::Type{Float32},arg1::SNES,arg2::Integer,arg3::Float32,arg4::Float32,arg5::Float32,arg6::Union{Ptr{SNESConvergedReason},StridedArray{SNESConvergedReason},Ptr{SNESConvergedReason},Ref{SNESConvergedReason}},arg7::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESConvergedDefault,petscRealSingle),PetscErrorCode,(SNES,Int64,Float32,Float32,Float32,Ptr{SNESConvergedReason},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function SNESConvergedSkip(arg0::Type{Float32},arg1::SNES,arg2::Integer,arg3::Float32,arg4::Float32,arg5::Float32,arg6::Union{Ptr{SNESConvergedReason},StridedArray{SNESConvergedReason},Ptr{SNESConvergedReason},Ref{SNESConvergedReason}},arg7::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESConvergedSkip,petscRealSingle),PetscErrorCode,(SNES,Int64,Float32,Float32,Float32,Ptr{SNESConvergedReason},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function SNESGetConvergedReason(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{SNESConvergedReason},StridedArray{SNESConvergedReason},Ptr{SNESConvergedReason},Ref{SNESConvergedReason}})
    err = ccall((:SNESGetConvergedReason,petscRealSingle),PetscErrorCode,(SNES,Ptr{SNESConvergedReason}),arg1,arg2)
    return err
end

function SNESSkipConverged(arg0::Type{Float32})
    err = ccall((:SNESSkipConverged,petscRealSingle),Void,())
    return err
end

function SNESSetFunction(arg1::SNES,arg2::Vec{Float32},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESSetFunction,petscRealSingle),PetscErrorCode,(SNES,Vec{Float32},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function SNESGetFunction(arg1::SNES,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:SNESGetFunction,petscRealSingle),PetscErrorCode,(SNES,Ptr{Vec{Float32}},Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4)
    return err
end

function SNESComputeFunction(arg1::SNES,arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:SNESComputeFunction,petscRealSingle),PetscErrorCode,(SNES,Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function SNESSetJacobian(arg1::SNES,arg2::Mat{Float32},arg3::Mat{Float32},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESSetJacobian,petscRealSingle),PetscErrorCode,(SNES,Mat{Float32},Mat{Float32},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function SNESGetJacobian(arg1::SNES,arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}},arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}},arg4::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg5::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:SNESGetJacobian,petscRealSingle),PetscErrorCode,(SNES,Ptr{Mat{Float32}},Ptr{Mat{Float32}},Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function SNESObjectiveComputeFunctionDefaultFD(arg1::SNES,arg2::Vec{Float32},arg3::Vec{Float32},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESObjectiveComputeFunctionDefaultFD,petscRealSingle),PetscErrorCode,(SNES,Vec{Float32},Vec{Float32},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function SNESComputeJacobianDefault(arg1::SNES,arg2::Vec{Float32},arg3::Mat{Float32},arg4::Mat{Float32},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESComputeJacobianDefault,petscRealSingle),PetscErrorCode,(SNES,Vec{Float32},Mat{Float32},Mat{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function SNESComputeJacobianDefaultColor(arg1::SNES,arg2::Vec{Float32},arg3::Mat{Float32},arg4::Mat{Float32},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESComputeJacobianDefaultColor,petscRealSingle),PetscErrorCode,(SNES,Vec{Float32},Mat{Float32},Mat{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function SNESSetComputeInitialGuess(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESSetComputeInitialGuess,petscRealSingle),PetscErrorCode,(SNES,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function SNESSetPicard(arg1::SNES,arg2::Vec{Float32},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Mat{Float32},arg5::Mat{Float32},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg7::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESSetPicard,petscRealSingle),PetscErrorCode,(SNES,Vec{Float32},Ptr{Void},Mat{Float32},Mat{Float32},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function SNESGetPicard(arg1::SNES,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}},arg5::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}},arg6::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg7::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:SNESGetPicard,petscRealSingle),PetscErrorCode,(SNES,Ptr{Vec{Float32}},Ptr{Ptr{Void}},Ptr{Mat{Float32}},Ptr{Mat{Float32}},Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function SNESSetInitialFunction(arg1::SNES,arg2::Vec{Float32})
    err = ccall((:SNESSetInitialFunction,petscRealSingle),PetscErrorCode,(SNES,Vec{Float32}),arg1,arg2)
    return err
end

function SNESSetObjective(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESSetObjective,petscRealSingle),PetscErrorCode,(SNES,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function SNESGetObjective(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:SNESGetObjective,petscRealSingle),PetscErrorCode,(SNES,Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function SNESComputeObjective(arg1::SNES,arg2::Vec{Float32},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:SNESComputeObjective,petscRealSingle),PetscErrorCode,(SNES,Vec{Float32},Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function SNESSetNormSchedule(arg0::Type{Float32},arg1::SNES,arg2::SNESNormSchedule)
    err = ccall((:SNESSetNormSchedule,petscRealSingle),PetscErrorCode,(SNES,SNESNormSchedule),arg1,arg2)
    return err
end

function SNESGetNormSchedule(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{SNESNormSchedule},StridedArray{SNESNormSchedule},Ptr{SNESNormSchedule},Ref{SNESNormSchedule}})
    err = ccall((:SNESGetNormSchedule,petscRealSingle),PetscErrorCode,(SNES,Ptr{SNESNormSchedule}),arg1,arg2)
    return err
end

function SNESSetFunctionType(arg0::Type{Float32},arg1::SNES,arg2::SNESFunctionType)
    err = ccall((:SNESSetFunctionType,petscRealSingle),PetscErrorCode,(SNES,SNESFunctionType),arg1,arg2)
    return err
end

function SNESGetFunctionType(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{SNESFunctionType},StridedArray{SNESFunctionType},Ptr{SNESFunctionType},Ref{SNESFunctionType}})
    err = ccall((:SNESGetFunctionType,petscRealSingle),PetscErrorCode,(SNES,Ptr{SNESFunctionType}),arg1,arg2)
    return err
end

function SNESSetNGS(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESSetNGS,petscRealSingle),PetscErrorCode,(SNES,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function SNESGetNGS(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:SNESGetNGS,petscRealSingle),PetscErrorCode,(SNES,Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function SNESSetUseNGS(arg0::Type{Float32},arg1::SNES,arg2::PetscBool)
    err = ccall((:SNESSetUseNGS,petscRealSingle),PetscErrorCode,(SNES,PetscBool),arg1,arg2)
    return err
end

function SNESGetUseNGS(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:SNESGetUseNGS,petscRealSingle),PetscErrorCode,(SNES,Ptr{PetscBool}),arg1,arg2)
    return err
end

function SNESComputeNGS(arg1::SNES,arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:SNESComputeNGS,petscRealSingle),PetscErrorCode,(SNES,Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function SNESNGSSetSweeps(arg0::Type{Float32},arg1::SNES,arg2::Integer)
    err = ccall((:SNESNGSSetSweeps,petscRealSingle),PetscErrorCode,(SNES,Int64),arg1,arg2)
    return err
end

function SNESNGSGetSweeps(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:SNESNGSGetSweeps,petscRealSingle),PetscErrorCode,(SNES,Ptr{Int64}),arg1,arg2)
    return err
end

function SNESNGSSetTolerances(arg0::Type{Float32},arg1::SNES,arg2::Float32,arg3::Float32,arg4::Float32,arg5::Integer)
    err = ccall((:SNESNGSSetTolerances,petscRealSingle),PetscErrorCode,(SNES,Float32,Float32,Float32,Int64),arg1,arg2,arg3,arg4,arg5)
    return err
end

function SNESNGSGetTolerances(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:SNESNGSGetTolerances,petscRealSingle),PetscErrorCode,(SNES,Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function SNESUpdateCheckJacobian(arg0::Type{Float32},arg1::SNES,arg2::Integer)
    err = ccall((:SNESUpdateCheckJacobian,petscRealSingle),PetscErrorCode,(SNES,Int64),arg1,arg2)
    return err
end

function SNESShellGetContext(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:SNESShellGetContext,petscRealSingle),PetscErrorCode,(SNES,Ptr{Ptr{Void}}),arg1,arg2)
    return err
end

function SNESShellSetContext(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESShellSetContext,petscRealSingle),PetscErrorCode,(SNES,Ptr{Void}),arg1,arg2)
    return err
end

function SNESShellSetSolve(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESShellSetSolve,petscRealSingle),PetscErrorCode,(SNES,Ptr{Void}),arg1,arg2)
    return err
end

function SNESLineSearchCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{SNESLineSearch},StridedArray{SNESLineSearch},Ptr{SNESLineSearch},Ref{SNESLineSearch}})
    err = ccall((:SNESLineSearchCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{SNESLineSearch}),arg1,arg2)
    return err
end

function SNESLineSearchReset(arg0::Type{Float32},arg1::SNESLineSearch)
    err = ccall((:SNESLineSearchReset,petscRealSingle),PetscErrorCode,(SNESLineSearch,),arg1)
    return err
end

function SNESLineSearchView(arg1::SNESLineSearch,arg2::PetscViewer{Float32})
    err = ccall((:SNESLineSearchView,petscRealSingle),PetscErrorCode,(SNESLineSearch,PetscViewer{Float32}),arg1,arg2)
    return err
end

function SNESLineSearchDestroy(arg0::Type{Float32},arg1::Union{Ptr{SNESLineSearch},StridedArray{SNESLineSearch},Ptr{SNESLineSearch},Ref{SNESLineSearch}})
    err = ccall((:SNESLineSearchDestroy,petscRealSingle),PetscErrorCode,(Ptr{SNESLineSearch},),arg1)
    return err
end

function SNESLineSearchSetType(arg0::Type{Float32},arg1::SNESLineSearch,arg2::SNESLineSearchType)
    err = ccall((:SNESLineSearchSetType,petscRealSingle),PetscErrorCode,(SNESLineSearch,Cstring),arg1,arg2)
    return err
end

function SNESLineSearchSetFromOptions(arg0::Type{Float32},arg1::SNESLineSearch)
    err = ccall((:SNESLineSearchSetFromOptions,petscRealSingle),PetscErrorCode,(SNESLineSearch,),arg1)
    return err
end

function SNESLineSearchSetFunction(arg0::Type{Float32},arg1::SNESLineSearch,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESLineSearchSetFunction,petscRealSingle),PetscErrorCode,(SNESLineSearch,Ptr{Void}),arg1,arg2)
    return err
end

function SNESLineSearchSetUp(arg0::Type{Float32},arg1::SNESLineSearch)
    err = ccall((:SNESLineSearchSetUp,petscRealSingle),PetscErrorCode,(SNESLineSearch,),arg1)
    return err
end

function SNESLineSearchApply(arg1::SNESLineSearch,arg2::Vec{Float32},arg3::Vec{Float32},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Vec{Float32})
    err = ccall((:SNESLineSearchApply,petscRealSingle),PetscErrorCode,(SNESLineSearch,Vec{Float32},Vec{Float32},Ptr{Float32},Vec{Float32}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function SNESLineSearchPreCheck(arg1::SNESLineSearch,arg2::Vec{Float32},arg3::Vec{Float32},arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:SNESLineSearchPreCheck,petscRealSingle),PetscErrorCode,(SNESLineSearch,Vec{Float32},Vec{Float32},Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function SNESLineSearchPostCheck(arg1::SNESLineSearch,arg2::Vec{Float32},arg3::Vec{Float32},arg4::Vec{Float32},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg6::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:SNESLineSearchPostCheck,petscRealSingle),PetscErrorCode,(SNESLineSearch,Vec{Float32},Vec{Float32},Vec{Float32},Ptr{PetscBool},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function SNESLineSearchSetWorkVecs(arg0::Type{Float32},arg1::SNESLineSearch,arg2::Integer)
    err = ccall((:SNESLineSearchSetWorkVecs,petscRealSingle),PetscErrorCode,(SNESLineSearch,Int64),arg1,arg2)
    return err
end

function SNESLineSearchSetPreCheck(arg0::Type{Float32},arg1::SNESLineSearch,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},ctx::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESLineSearchSetPreCheck,petscRealSingle),PetscErrorCode,(SNESLineSearch,Ptr{Void},Ptr{Void}),arg1,arg2,ctx)
    return err
end

function SNESLineSearchSetPostCheck(arg0::Type{Float32},arg1::SNESLineSearch,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},ctx::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESLineSearchSetPostCheck,petscRealSingle),PetscErrorCode,(SNESLineSearch,Ptr{Void},Ptr{Void}),arg1,arg2,ctx)
    return err
end

function SNESLineSearchGetPreCheck(arg0::Type{Float32},arg1::SNESLineSearch,arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},ctx::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:SNESLineSearchGetPreCheck,petscRealSingle),PetscErrorCode,(SNESLineSearch,Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,ctx)
    return err
end

function SNESLineSearchGetPostCheck(arg0::Type{Float32},arg1::SNESLineSearch,arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},ctx::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:SNESLineSearchGetPostCheck,petscRealSingle),PetscErrorCode,(SNESLineSearch,Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,ctx)
    return err
end

function SNESLineSearchSetVIFunctions(arg0::Type{Float32},arg1::SNESLineSearch,arg2::SNESLineSearchVIProjectFunc,arg3::SNESLineSearchVINormFunc)
    err = ccall((:SNESLineSearchSetVIFunctions,petscRealSingle),PetscErrorCode,(SNESLineSearch,SNESLineSearchVIProjectFunc,SNESLineSearchVINormFunc),arg1,arg2,arg3)
    return err
end

function SNESLineSearchGetVIFunctions(arg0::Type{Float32},arg1::SNESLineSearch,arg2::Union{Ptr{SNESLineSearchVIProjectFunc},StridedArray{SNESLineSearchVIProjectFunc},Ptr{SNESLineSearchVIProjectFunc},Ref{SNESLineSearchVIProjectFunc}},arg3::Union{Ptr{SNESLineSearchVINormFunc},StridedArray{SNESLineSearchVINormFunc},Ptr{SNESLineSearchVINormFunc},Ref{SNESLineSearchVINormFunc}})
    err = ccall((:SNESLineSearchGetVIFunctions,petscRealSingle),PetscErrorCode,(SNESLineSearch,Ptr{SNESLineSearchVIProjectFunc},Ptr{SNESLineSearchVINormFunc}),arg1,arg2,arg3)
    return err
end

function SNESLineSearchSetSNES(arg0::Type{Float32},arg1::SNESLineSearch,arg2::SNES)
    err = ccall((:SNESLineSearchSetSNES,petscRealSingle),PetscErrorCode,(SNESLineSearch,SNES),arg1,arg2)
    return err
end

function SNESLineSearchGetSNES(arg0::Type{Float32},arg1::SNESLineSearch,arg2::Union{Ptr{SNES},StridedArray{SNES},Ptr{SNES},Ref{SNES}})
    err = ccall((:SNESLineSearchGetSNES,petscRealSingle),PetscErrorCode,(SNESLineSearch,Ptr{SNES}),arg1,arg2)
    return err
end

function SNESLineSearchGetTolerances(arg0::Type{Float32},arg1::SNESLineSearch,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:SNESLineSearchGetTolerances,petscRealSingle),PetscErrorCode,(SNESLineSearch,Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function SNESLineSearchSetTolerances(arg0::Type{Float32},arg1::SNESLineSearch,arg2::Float32,arg3::Float32,arg4::Float32,arg5::Float32,arg6::Float32,arg7::Integer)
    err = ccall((:SNESLineSearchSetTolerances,petscRealSingle),PetscErrorCode,(SNESLineSearch,Float32,Float32,Float32,Float32,Float32,Int64),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function SNESLineSearchPreCheckPicard(arg1::SNESLineSearch,arg2::Vec{Float32},arg3::Vec{Float32},arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESLineSearchPreCheckPicard,petscRealSingle),PetscErrorCode,(SNESLineSearch,Vec{Float32},Vec{Float32},Ptr{PetscBool},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function SNESLineSearchGetLambda(arg0::Type{Float32},arg1::SNESLineSearch,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:SNESLineSearchGetLambda,petscRealSingle),PetscErrorCode,(SNESLineSearch,Ptr{Float32}),arg1,arg2)
    return err
end

function SNESLineSearchSetLambda(arg0::Type{Float32},arg1::SNESLineSearch,arg2::Float32)
    err = ccall((:SNESLineSearchSetLambda,petscRealSingle),PetscErrorCode,(SNESLineSearch,Float32),arg1,arg2)
    return err
end

function SNESLineSearchGetDamping(arg0::Type{Float32},arg1::SNESLineSearch,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:SNESLineSearchGetDamping,petscRealSingle),PetscErrorCode,(SNESLineSearch,Ptr{Float32}),arg1,arg2)
    return err
end

function SNESLineSearchSetDamping(arg0::Type{Float32},arg1::SNESLineSearch,arg2::Float32)
    err = ccall((:SNESLineSearchSetDamping,petscRealSingle),PetscErrorCode,(SNESLineSearch,Float32),arg1,arg2)
    return err
end

function SNESLineSearchGetOrder(arg0::Type{Float32},arg1::SNESLineSearch,order::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:SNESLineSearchGetOrder,petscRealSingle),PetscErrorCode,(SNESLineSearch,Ptr{Int64}),arg1,order)
    return err
end

function SNESLineSearchSetOrder(arg0::Type{Float32},arg1::SNESLineSearch,order::Integer)
    err = ccall((:SNESLineSearchSetOrder,petscRealSingle),PetscErrorCode,(SNESLineSearch,Int64),arg1,order)
    return err
end

function SNESLineSearchGetReason(arg0::Type{Float32},arg1::SNESLineSearch,arg2::Union{Ptr{SNESLineSearchReason},StridedArray{SNESLineSearchReason},Ptr{SNESLineSearchReason},Ref{SNESLineSearchReason}})
    err = ccall((:SNESLineSearchGetReason,petscRealSingle),PetscErrorCode,(SNESLineSearch,Ptr{SNESLineSearchReason}),arg1,arg2)
    return err
end

function SNESLineSearchSetReason(arg0::Type{Float32},arg1::SNESLineSearch,arg2::SNESLineSearchReason)
    err = ccall((:SNESLineSearchSetReason,petscRealSingle),PetscErrorCode,(SNESLineSearch,SNESLineSearchReason),arg1,arg2)
    return err
end

function SNESLineSearchGetVecs(arg1::SNESLineSearch,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg4::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg5::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg6::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:SNESLineSearchGetVecs,petscRealSingle),PetscErrorCode,(SNESLineSearch,Ptr{Vec{Float32}},Ptr{Vec{Float32}},Ptr{Vec{Float32}},Ptr{Vec{Float32}},Ptr{Vec{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function SNESLineSearchSetVecs(arg1::SNESLineSearch,arg2::Vec{Float32},arg3::Vec{Float32},arg4::Vec{Float32},arg5::Vec{Float32},arg6::Vec{Float32})
    err = ccall((:SNESLineSearchSetVecs,petscRealSingle),PetscErrorCode,(SNESLineSearch,Vec{Float32},Vec{Float32},Vec{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function SNESLineSearchGetNorms(arg0::Type{Float32},arg1::SNESLineSearch,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:SNESLineSearchGetNorms,petscRealSingle),PetscErrorCode,(SNESLineSearch,Ptr{Float32},Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function SNESLineSearchSetNorms(arg0::Type{Float32},arg1::SNESLineSearch,arg2::Float32,arg3::Float32,arg4::Float32)
    err = ccall((:SNESLineSearchSetNorms,petscRealSingle),PetscErrorCode,(SNESLineSearch,Float32,Float32,Float32),arg1,arg2,arg3,arg4)
    return err
end

function SNESLineSearchComputeNorms(arg0::Type{Float32},arg1::SNESLineSearch)
    err = ccall((:SNESLineSearchComputeNorms,petscRealSingle),PetscErrorCode,(SNESLineSearch,),arg1)
    return err
end

function SNESLineSearchSetComputeNorms(arg0::Type{Float32},arg1::SNESLineSearch,arg2::PetscBool)
    err = ccall((:SNESLineSearchSetComputeNorms,petscRealSingle),PetscErrorCode,(SNESLineSearch,PetscBool),arg1,arg2)
    return err
end

function SNESLineSearchSetMonitor(arg0::Type{Float32},arg1::SNESLineSearch,arg2::PetscBool)
    err = ccall((:SNESLineSearchSetMonitor,petscRealSingle),PetscErrorCode,(SNESLineSearch,PetscBool),arg1,arg2)
    return err
end

function SNESLineSearchGetMonitor(arg1::SNESLineSearch,arg2::Union{Ptr{PetscViewer{Float32}},StridedArray{PetscViewer{Float32}},Ptr{PetscViewer{Float32}},Ref{PetscViewer{Float32}}})
    err = ccall((:SNESLineSearchGetMonitor,petscRealSingle),PetscErrorCode,(SNESLineSearch,Ptr{PetscViewer{Float32}}),arg1,arg2)
    return err
end

function SNESLineSearchAppendOptionsPrefix(arg0::Type{Float32},arg1::SNESLineSearch,prefix::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:SNESLineSearchAppendOptionsPrefix,petscRealSingle),PetscErrorCode,(SNESLineSearch,Cstring),arg1,prefix)
    return err
end

function SNESLineSearchGetOptionsPrefix(arg0::Type{Float32},arg1::SNESLineSearch,prefix::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:SNESLineSearchGetOptionsPrefix,petscRealSingle),PetscErrorCode,(SNESLineSearch,Ptr{Ptr{UInt8}}),arg1,prefix)
    return err
end

function SNESLineSearchShellSetUserFunc(arg0::Type{Float32},arg1::SNESLineSearch,arg2::SNESLineSearchUserFunc,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESLineSearchShellSetUserFunc,petscRealSingle),PetscErrorCode,(SNESLineSearch,SNESLineSearchUserFunc,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function SNESLineSearchShellGetUserFunc(arg0::Type{Float32},arg1::SNESLineSearch,arg2::Union{Ptr{SNESLineSearchUserFunc},StridedArray{SNESLineSearchUserFunc},Ptr{SNESLineSearchUserFunc},Ref{SNESLineSearchUserFunc}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:SNESLineSearchShellGetUserFunc,petscRealSingle),PetscErrorCode,(SNESLineSearch,Ptr{SNESLineSearchUserFunc},Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function SNESLineSearchBTSetAlpha(arg0::Type{Float32},arg1::SNESLineSearch,arg2::Float32)
    err = ccall((:SNESLineSearchBTSetAlpha,petscRealSingle),PetscErrorCode,(SNESLineSearch,Float32),arg1,arg2)
    return err
end

function SNESLineSearchBTGetAlpha(arg0::Type{Float32},arg1::SNESLineSearch,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:SNESLineSearchBTGetAlpha,petscRealSingle),PetscErrorCode,(SNESLineSearch,Ptr{Float32}),arg1,arg2)
    return err
end

function SNESLineSearchRegister(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESLineSearchRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function SNESVISetVariableBounds(arg1::SNES,arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:SNESVISetVariableBounds,petscRealSingle),PetscErrorCode,(SNES,Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function SNESVISetComputeVariableBounds(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESVISetComputeVariableBounds,petscRealSingle),PetscErrorCode,(SNES,Ptr{Void}),arg1,arg2)
    return err
end

function SNESVIGetInactiveSet(arg1::SNES,arg2::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:SNESVIGetInactiveSet,petscRealSingle),PetscErrorCode,(SNES,Ptr{IS{Float32}}),arg1,arg2)
    return err
end

function SNESVIGetActiveSetIS(arg1::SNES,arg2::Vec{Float32},arg3::Vec{Float32},arg4::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:SNESVIGetActiveSetIS,petscRealSingle),PetscErrorCode,(SNES,Vec{Float32},Vec{Float32},Ptr{IS{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function SNESVIComputeInactiveSetFnorm(arg1::SNES,arg2::Vec{Float32},arg3::Vec{Float32},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:SNESVIComputeInactiveSetFnorm,petscRealSingle),PetscErrorCode,(SNES,Vec{Float32},Vec{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function SNESVISetRedundancyCheck(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESVISetRedundancyCheck,petscRealSingle),PetscErrorCode,(SNES,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function SNESTestLocalMin(arg0::Type{Float32},arg1::SNES)
    err = ccall((:SNESTestLocalMin,petscRealSingle),PetscErrorCode,(SNES,),arg1)
    return err
end

function SNESComputeJacobian(arg1::SNES,arg2::Vec{Float32},arg3::Mat{Float32},arg4::Mat{Float32})
    err = ccall((:SNESComputeJacobian,petscRealSingle),PetscErrorCode,(SNES,Vec{Float32},Mat{Float32},Mat{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function SNESSetDM(arg0::Type{Float32},arg1::SNES,arg2::DM)
    err = ccall((:SNESSetDM,petscRealSingle),PetscErrorCode,(SNES,DM),arg1,arg2)
    return err
end

function SNESGetDM(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:SNESGetDM,petscRealSingle),PetscErrorCode,(SNES,Ptr{DM}),arg1,arg2)
    return err
end

function SNESSetNPC(arg0::Type{Float32},arg1::SNES,arg2::SNES)
    err = ccall((:SNESSetNPC,petscRealSingle),PetscErrorCode,(SNES,SNES),arg1,arg2)
    return err
end

function SNESGetNPC(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{SNES},StridedArray{SNES},Ptr{SNES},Ref{SNES}})
    err = ccall((:SNESGetNPC,petscRealSingle),PetscErrorCode,(SNES,Ptr{SNES}),arg1,arg2)
    return err
end

function SNESHasNPC(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:SNESHasNPC,petscRealSingle),PetscErrorCode,(SNES,Ptr{PetscBool}),arg1,arg2)
    return err
end

function SNESApplyNPC(arg1::SNES,arg2::Vec{Float32},arg3::Vec{Float32},arg4::Vec{Float32})
    err = ccall((:SNESApplyNPC,petscRealSingle),PetscErrorCode,(SNES,Vec{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function SNESGetNPCFunction(arg1::SNES,arg2::Vec{Float32},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:SNESGetNPCFunction,petscRealSingle),PetscErrorCode,(SNES,Vec{Float32},Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function SNESComputeFunctionDefaultNPC(arg1::SNES,arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:SNESComputeFunctionDefaultNPC,petscRealSingle),PetscErrorCode,(SNES,Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function SNESSetNPCSide(arg0::Type{Float32},arg1::SNES,arg2::PCSide)
    err = ccall((:SNESSetNPCSide,petscRealSingle),PetscErrorCode,(SNES,PCSide),arg1,arg2)
    return err
end

function SNESGetNPCSide(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{PCSide},StridedArray{PCSide},Ptr{PCSide},Ref{PCSide}})
    err = ccall((:SNESGetNPCSide,petscRealSingle),PetscErrorCode,(SNES,Ptr{PCSide}),arg1,arg2)
    return err
end

function SNESSetLineSearch(arg0::Type{Float32},arg1::SNES,arg2::SNESLineSearch)
    err = ccall((:SNESSetLineSearch,petscRealSingle),PetscErrorCode,(SNES,SNESLineSearch),arg1,arg2)
    return err
end

function SNESGetLineSearch(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{SNESLineSearch},StridedArray{SNESLineSearch},Ptr{SNESLineSearch},Ref{SNESLineSearch}})
    err = ccall((:SNESGetLineSearch,petscRealSingle),PetscErrorCode,(SNES,Ptr{SNESLineSearch}),arg1,arg2)
    return err
end

function SNESRestrictHookAdd(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESRestrictHookAdd,petscRealSingle),PetscErrorCode,(SNES,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function SNESRestrictHooksRun(arg0::Type{Float32},arg1::SNES,arg2::SNES)
    err = ccall((:SNESRestrictHooksRun,petscRealSingle),PetscErrorCode,(SNES,SNES),arg1,arg2)
    return err
end

function SNESGetSNESLineSearch(arg0::Type{Float32},snes::SNES,ls::Union{Ptr{SNESLineSearch},StridedArray{SNESLineSearch},Ptr{SNESLineSearch},Ref{SNESLineSearch}})
    err = ccall((:SNESGetSNESLineSearch,petscRealSingle),PetscErrorCode,(SNES,Ptr{SNESLineSearch}),snes,ls)
    return err
end

function SNESSetSNESLineSearch(arg0::Type{Float32},snes::SNES,ls::SNESLineSearch)
    err = ccall((:SNESSetSNESLineSearch,petscRealSingle),PetscErrorCode,(SNES,SNESLineSearch),snes,ls)
    return err
end

function SNESSetUpMatrices(arg0::Type{Float32},arg1::SNES)
    err = ccall((:SNESSetUpMatrices,petscRealSingle),PetscErrorCode,(SNES,),arg1)
    return err
end

function DMSNESSetFunction(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMSNESSetFunction,petscRealSingle),PetscErrorCode,(DM,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMSNESGetFunction(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:DMSNESGetFunction,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function DMSNESSetNGS(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMSNESSetNGS,petscRealSingle),PetscErrorCode,(DM,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMSNESGetNGS(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:DMSNESGetNGS,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function DMSNESSetJacobian(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMSNESSetJacobian,petscRealSingle),PetscErrorCode,(DM,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMSNESGetJacobian(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:DMSNESGetJacobian,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function DMSNESSetPicard(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMSNESSetPicard,petscRealSingle),PetscErrorCode,(DM,Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function DMSNESGetPicard(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:DMSNESGetPicard,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{Void}},Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4)
    return err
end

function DMSNESSetObjective(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMSNESSetObjective,petscRealSingle),PetscErrorCode,(DM,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMSNESGetObjective(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:DMSNESGetObjective,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function DMDASNESSetFunctionLocal(arg0::Type{Float32},arg1::DM,arg2::InsertMode,arg3::DMDASNESFunction,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDASNESSetFunctionLocal,petscRealSingle),PetscErrorCode,(DM,InsertMode,DMDASNESFunction,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function DMDASNESSetJacobianLocal(arg0::Type{Float32},arg1::DM,arg2::DMDASNESJacobian,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDASNESSetJacobianLocal,petscRealSingle),PetscErrorCode,(DM,DMDASNESJacobian,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMDASNESSetObjectiveLocal(arg0::Type{Float32},arg1::DM,arg2::DMDASNESObjective,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDASNESSetObjectiveLocal,petscRealSingle),PetscErrorCode,(DM,DMDASNESObjective,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMDASNESSetPicardLocal(arg0::Type{Float32},arg1::DM,arg2::InsertMode,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDASNESSetPicardLocal,petscRealSingle),PetscErrorCode,(DM,InsertMode,Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexSNESGetGeometryFEM(arg1::DM,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:DMPlexSNESGetGeometryFEM,petscRealSingle),PetscErrorCode,(DM,Ptr{Vec{Float32}}),arg1,arg2)
    return err
end

function DMPlexSNESGetGeometryFVM(arg1::DM,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:DMPlexSNESGetGeometryFVM,petscRealSingle),PetscErrorCode,(DM,Ptr{Vec{Float32}},Ptr{Vec{Float32}},Ptr{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexSNESGetGradientDM(arg0::Type{Float32},arg1::DM,arg2::PetscFV,arg3::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:DMPlexSNESGetGradientDM,petscRealSingle),PetscErrorCode,(DM,PetscFV,Ptr{DM}),arg1,arg2,arg3)
    return err
end

function DMPlexGetCellFields(arg1::DM,arg2::Integer,arg3::Integer,arg4::Vec{Float32},arg5::Vec{Float32},arg6::Vec{Float32},arg7::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg8::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg9::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:DMPlexGetCellFields,petscRealSingle),PetscErrorCode,(DM,Int64,Int64,Vec{Float32},Vec{Float32},Vec{Float32},Ptr{Ptr{Float32}},Ptr{Ptr{Float32}},Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
    return err
end

function DMPlexRestoreCellFields(arg1::DM,arg2::Integer,arg3::Integer,arg4::Vec{Float32},arg5::Vec{Float32},arg6::Vec{Float32},arg7::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg8::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg9::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:DMPlexRestoreCellFields,petscRealSingle),PetscErrorCode,(DM,Int64,Int64,Vec{Float32},Vec{Float32},Vec{Float32},Ptr{Ptr{Float32}},Ptr{Ptr{Float32}},Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
    return err
end

function DMPlexGetFaceFields(arg1::DM,arg2::Integer,arg3::Integer,arg4::Vec{Float32},arg5::Vec{Float32},arg6::Vec{Float32},arg7::Vec{Float32},arg8::Vec{Float32},arg9::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg10::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:DMPlexGetFaceFields,petscRealSingle),PetscErrorCode,(DM,Int64,Int64,Vec{Float32},Vec{Float32},Vec{Float32},Vec{Float32},Vec{Float32},Ptr{Ptr{Float32}},Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function DMPlexRestoreFaceFields(arg1::DM,arg2::Integer,arg3::Integer,arg4::Vec{Float32},arg5::Vec{Float32},arg6::Vec{Float32},arg7::Vec{Float32},arg8::Vec{Float32},arg9::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg10::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:DMPlexRestoreFaceFields,petscRealSingle),PetscErrorCode,(DM,Int64,Int64,Vec{Float32},Vec{Float32},Vec{Float32},Vec{Float32},Vec{Float32},Ptr{Ptr{Float32}},Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

#= skipping function with undefined symbols: 
 function DMPlexGetFaceGeometry(arg1::DM,arg2::Integer,arg3::Integer,arg4::Vec{Float32},arg5::Vec{Float32},arg6::Union{Ptr{Ptr{PetscFVFaceGeom}},StridedArray{Ptr{PetscFVFaceGeom}},Ptr{Ptr{PetscFVFaceGeom}},Ref{Ptr{PetscFVFaceGeom}}},arg7::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    ccall((:DMPlexGetFaceGeometry,petscRealSingle),PetscErrorCode,(DM,Int64,Int64,Vec{Float32},Vec{Float32},Ptr{Ptr{PetscFVFaceGeom}},Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end 
=#
#= skipping function with undefined symbols: 
 function DMPlexRestoreFaceGeometry(arg1::DM,arg2::Integer,arg3::Integer,arg4::Vec{Float32},arg5::Vec{Float32},arg6::Union{Ptr{Ptr{PetscFVFaceGeom}},StridedArray{Ptr{PetscFVFaceGeom}},Ptr{Ptr{PetscFVFaceGeom}},Ref{Ptr{PetscFVFaceGeom}}},arg7::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    ccall((:DMPlexRestoreFaceGeometry,petscRealSingle),PetscErrorCode,(DM,Int64,Int64,Vec{Float32},Vec{Float32},Ptr{Ptr{PetscFVFaceGeom}},Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end 
=#
function DMSNESSetFunctionLocal(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMSNESSetFunctionLocal,petscRealSingle),PetscErrorCode,(DM,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMSNESSetJacobianLocal(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMSNESSetJacobianLocal,petscRealSingle),PetscErrorCode,(DM,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function SNESMultiblockSetFields(arg0::Type{Float32},arg1::SNES,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:SNESMultiblockSetFields,petscRealSingle),PetscErrorCode,(SNES,Cstring,Int64,Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function SNESMultiblockSetIS(arg1::SNES,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::IS{Float32})
    err = ccall((:SNESMultiblockSetIS,petscRealSingle),PetscErrorCode,(SNES,Cstring,IS{Float32}),arg1,arg2,arg3)
    return err
end

function SNESMultiblockSetBlockSize(arg0::Type{Float32},arg1::SNES,arg2::Integer)
    err = ccall((:SNESMultiblockSetBlockSize,petscRealSingle),PetscErrorCode,(SNES,Int64),arg1,arg2)
    return err
end

function SNESMultiblockSetType(arg0::Type{Float32},arg1::SNES,arg2::PCCompositeType)
    err = ccall((:SNESMultiblockSetType,petscRealSingle),PetscErrorCode,(SNES,PCCompositeType),arg1,arg2)
    return err
end

function SNESMSRegister(arg0::Type{Float32},arg1::SNESMSType,arg2::Integer,arg3::Integer,arg4::Float32,arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:SNESMSRegister,petscRealSingle),PetscErrorCode,(Cstring,Int64,Int64,Float32,Ptr{Float32},Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function SNESMSSetType(arg0::Type{Float32},arg1::SNES,arg2::SNESMSType)
    err = ccall((:SNESMSSetType,petscRealSingle),PetscErrorCode,(SNES,Cstring),arg1,arg2)
    return err
end

function SNESMSFinalizePackage(arg0::Type{Float32})
    err = ccall((:SNESMSFinalizePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function SNESMSInitializePackage(arg0::Type{Float32})
    err = ccall((:SNESMSInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function SNESMSRegisterDestroy(arg0::Type{Float32})
    err = ccall((:SNESMSRegisterDestroy,petscRealSingle),PetscErrorCode,())
    return err
end

function SNESNGMRESSetRestartType(arg0::Type{Float32},arg1::SNES,arg2::SNESNGMRESRestartType)
    err = ccall((:SNESNGMRESSetRestartType,petscRealSingle),PetscErrorCode,(SNES,SNESNGMRESRestartType),arg1,arg2)
    return err
end

function SNESNGMRESSetSelectType(arg0::Type{Float32},arg1::SNES,arg2::SNESNGMRESSelectType)
    err = ccall((:SNESNGMRESSetSelectType,petscRealSingle),PetscErrorCode,(SNES,SNESNGMRESSelectType),arg1,arg2)
    return err
end

function SNESNCGSetType(arg0::Type{Float32},arg1::SNES,arg2::SNESNCGType)
    err = ccall((:SNESNCGSetType,petscRealSingle),PetscErrorCode,(SNES,SNESNCGType),arg1,arg2)
    return err
end

function SNESQNSetType(arg0::Type{Float32},arg1::SNES,arg2::SNESQNType)
    err = ccall((:SNESQNSetType,petscRealSingle),PetscErrorCode,(SNES,SNESQNType),arg1,arg2)
    return err
end

function SNESQNSetScaleType(arg0::Type{Float32},arg1::SNES,arg2::SNESQNScaleType)
    err = ccall((:SNESQNSetScaleType,petscRealSingle),PetscErrorCode,(SNES,SNESQNScaleType),arg1,arg2)
    return err
end

function SNESQNSetRestartType(arg0::Type{Float32},arg1::SNES,arg2::SNESQNRestartType)
    err = ccall((:SNESQNSetRestartType,petscRealSingle),PetscErrorCode,(SNES,SNESQNRestartType),arg1,arg2)
    return err
end

function SNESNASMGetType(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{PCASMType},StridedArray{PCASMType},Ptr{PCASMType},Ref{PCASMType}})
    err = ccall((:SNESNASMGetType,petscRealSingle),PetscErrorCode,(SNES,Ptr{PCASMType}),arg1,arg2)
    return err
end

function SNESNASMSetType(arg0::Type{Float32},arg1::SNES,arg2::PCASMType)
    err = ccall((:SNESNASMSetType,petscRealSingle),PetscErrorCode,(SNES,PCASMType),arg1,arg2)
    return err
end

function SNESNASMGetSubdomains(arg1::SNES,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{SNES}},StridedArray{Ptr{SNES}},Ptr{Ptr{SNES}},Ref{Ptr{SNES}}},arg4::Union{Ptr{Ptr{VecScatter{Float32}}},StridedArray{Ptr{VecScatter{Float32}}},Ptr{Ptr{VecScatter{Float32}}},Ref{Ptr{VecScatter{Float32}}}},arg5::Union{Ptr{Ptr{VecScatter{Float32}}},StridedArray{Ptr{VecScatter{Float32}}},Ptr{Ptr{VecScatter{Float32}}},Ref{Ptr{VecScatter{Float32}}}},arg6::Union{Ptr{Ptr{VecScatter{Float32}}},StridedArray{Ptr{VecScatter{Float32}}},Ptr{Ptr{VecScatter{Float32}}},Ref{Ptr{VecScatter{Float32}}}})
    err = ccall((:SNESNASMGetSubdomains,petscRealSingle),PetscErrorCode,(SNES,Ptr{Int64},Ptr{Ptr{SNES}},Ptr{Ptr{VecScatter{Float32}}},Ptr{Ptr{VecScatter{Float32}}},Ptr{Ptr{VecScatter{Float32}}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function SNESNASMSetSubdomains(arg1::SNES,arg2::Integer,arg3::Union{Ptr{SNES},StridedArray{SNES},Ptr{SNES},Ref{SNES}},arg4::Union{Ptr{VecScatter{Float32}},StridedArray{VecScatter{Float32}},Ptr{VecScatter{Float32}},Ref{VecScatter{Float32}}},arg5::Union{Ptr{VecScatter{Float32}},StridedArray{VecScatter{Float32}},Ptr{VecScatter{Float32}},Ref{VecScatter{Float32}}},arg6::Union{Ptr{VecScatter{Float32}},StridedArray{VecScatter{Float32}},Ptr{VecScatter{Float32}},Ref{VecScatter{Float32}}})
    err = ccall((:SNESNASMSetSubdomains,petscRealSingle),PetscErrorCode,(SNES,Int64,Ptr{SNES},Ptr{VecScatter{Float32}},Ptr{VecScatter{Float32}},Ptr{VecScatter{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function SNESNASMSetDamping(arg0::Type{Float32},arg1::SNES,arg2::Float32)
    err = ccall((:SNESNASMSetDamping,petscRealSingle),PetscErrorCode,(SNES,Float32),arg1,arg2)
    return err
end

function SNESNASMGetDamping(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:SNESNASMGetDamping,petscRealSingle),PetscErrorCode,(SNES,Ptr{Float32}),arg1,arg2)
    return err
end

function SNESNASMGetSubdomainVecs(arg1::SNES,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Vec{Float32}}},StridedArray{Ptr{Vec{Float32}}},Ptr{Ptr{Vec{Float32}}},Ref{Ptr{Vec{Float32}}}},arg4::Union{Ptr{Ptr{Vec{Float32}}},StridedArray{Ptr{Vec{Float32}}},Ptr{Ptr{Vec{Float32}}},Ref{Ptr{Vec{Float32}}}},arg5::Union{Ptr{Ptr{Vec{Float32}}},StridedArray{Ptr{Vec{Float32}}},Ptr{Ptr{Vec{Float32}}},Ref{Ptr{Vec{Float32}}}},arg6::Union{Ptr{Ptr{Vec{Float32}}},StridedArray{Ptr{Vec{Float32}}},Ptr{Ptr{Vec{Float32}}},Ref{Ptr{Vec{Float32}}}})
    err = ccall((:SNESNASMGetSubdomainVecs,petscRealSingle),PetscErrorCode,(SNES,Ptr{Int64},Ptr{Ptr{Vec{Float32}}},Ptr{Ptr{Vec{Float32}}},Ptr{Ptr{Vec{Float32}}},Ptr{Ptr{Vec{Float32}}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function SNESNASMSetComputeFinalJacobian(arg0::Type{Float32},arg1::SNES,arg2::PetscBool)
    err = ccall((:SNESNASMSetComputeFinalJacobian,petscRealSingle),PetscErrorCode,(SNES,PetscBool),arg1,arg2)
    return err
end

function SNESCompositeSetType(arg0::Type{Float32},arg1::SNES,arg2::SNESCompositeType)
    err = ccall((:SNESCompositeSetType,petscRealSingle),PetscErrorCode,(SNES,SNESCompositeType),arg1,arg2)
    return err
end

function SNESCompositeAddSNES(arg0::Type{Float32},arg1::SNES,arg2::SNESType)
    err = ccall((:SNESCompositeAddSNES,petscRealSingle),PetscErrorCode,(SNES,Cstring),arg1,arg2)
    return err
end

function SNESCompositeGetSNES(arg0::Type{Float32},arg1::SNES,arg2::Integer,arg3::Union{Ptr{SNES},StridedArray{SNES},Ptr{SNES},Ref{SNES}})
    err = ccall((:SNESCompositeGetSNES,petscRealSingle),PetscErrorCode,(SNES,Int64,Ptr{SNES}),arg1,arg2,arg3)
    return err
end

function SNESCompositeGetNumber(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:SNESCompositeGetNumber,petscRealSingle),PetscErrorCode,(SNES,Ptr{Int64}),arg1,arg2)
    return err
end

function SNESCompositeSetDamping(arg0::Type{Float32},arg1::SNES,arg2::Integer,arg3::Float32)
    err = ccall((:SNESCompositeSetDamping,petscRealSingle),PetscErrorCode,(SNES,Int64,Float32),arg1,arg2,arg3)
    return err
end

function SNESFASSetType(arg0::Type{Float32},arg1::SNES,arg2::SNESFASType)
    err = ccall((:SNESFASSetType,petscRealSingle),PetscErrorCode,(SNES,SNESFASType),arg1,arg2)
    return err
end

function SNESFASGetType(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{SNESFASType},StridedArray{SNESFASType},Ptr{SNESFASType},Ref{SNESFASType}})
    err = ccall((:SNESFASGetType,petscRealSingle),PetscErrorCode,(SNES,Ptr{SNESFASType}),arg1,arg2)
    return err
end

function SNESFASSetLevels(arg0::Type{Float32},arg1::SNES,arg2::Integer,arg3::Union{Ptr{MPI_Comm},StridedArray{MPI_Comm},Ptr{MPI_Comm},Ref{MPI_Comm}})
    err = ccall((:SNESFASSetLevels,petscRealSingle),PetscErrorCode,(SNES,Int64,Ptr{comm_type}),arg1,arg2,arg3)
    return err
end

function SNESFASGetLevels(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:SNESFASGetLevels,petscRealSingle),PetscErrorCode,(SNES,Ptr{Int64}),arg1,arg2)
    return err
end

function SNESFASGetCycleSNES(arg0::Type{Float32},arg1::SNES,arg2::Integer,arg3::Union{Ptr{SNES},StridedArray{SNES},Ptr{SNES},Ref{SNES}})
    err = ccall((:SNESFASGetCycleSNES,petscRealSingle),PetscErrorCode,(SNES,Int64,Ptr{SNES}),arg1,arg2,arg3)
    return err
end

function SNESFASSetNumberSmoothUp(arg0::Type{Float32},arg1::SNES,arg2::Integer)
    err = ccall((:SNESFASSetNumberSmoothUp,petscRealSingle),PetscErrorCode,(SNES,Int64),arg1,arg2)
    return err
end

function SNESFASSetNumberSmoothDown(arg0::Type{Float32},arg1::SNES,arg2::Integer)
    err = ccall((:SNESFASSetNumberSmoothDown,petscRealSingle),PetscErrorCode,(SNES,Int64),arg1,arg2)
    return err
end

function SNESFASSetCycles(arg0::Type{Float32},arg1::SNES,arg2::Integer)
    err = ccall((:SNESFASSetCycles,petscRealSingle),PetscErrorCode,(SNES,Int64),arg1,arg2)
    return err
end

function SNESFASSetMonitor(arg0::Type{Float32},arg1::SNES,arg2::PetscBool)
    err = ccall((:SNESFASSetMonitor,petscRealSingle),PetscErrorCode,(SNES,PetscBool),arg1,arg2)
    return err
end

function SNESFASSetLog(arg0::Type{Float32},arg1::SNES,arg2::PetscBool)
    err = ccall((:SNESFASSetLog,petscRealSingle),PetscErrorCode,(SNES,PetscBool),arg1,arg2)
    return err
end

function SNESFASSetGalerkin(arg0::Type{Float32},arg1::SNES,arg2::PetscBool)
    err = ccall((:SNESFASSetGalerkin,petscRealSingle),PetscErrorCode,(SNES,PetscBool),arg1,arg2)
    return err
end

function SNESFASGetGalerkin(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:SNESFASGetGalerkin,petscRealSingle),PetscErrorCode,(SNES,Ptr{PetscBool}),arg1,arg2)
    return err
end

function SNESFASCycleGetSmoother(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{SNES},StridedArray{SNES},Ptr{SNES},Ref{SNES}})
    err = ccall((:SNESFASCycleGetSmoother,petscRealSingle),PetscErrorCode,(SNES,Ptr{SNES}),arg1,arg2)
    return err
end

function SNESFASCycleGetSmootherUp(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{SNES},StridedArray{SNES},Ptr{SNES},Ref{SNES}})
    err = ccall((:SNESFASCycleGetSmootherUp,petscRealSingle),PetscErrorCode,(SNES,Ptr{SNES}),arg1,arg2)
    return err
end

function SNESFASCycleGetSmootherDown(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{SNES},StridedArray{SNES},Ptr{SNES},Ref{SNES}})
    err = ccall((:SNESFASCycleGetSmootherDown,petscRealSingle),PetscErrorCode,(SNES,Ptr{SNES}),arg1,arg2)
    return err
end

function SNESFASCycleGetCorrection(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{SNES},StridedArray{SNES},Ptr{SNES},Ref{SNES}})
    err = ccall((:SNESFASCycleGetCorrection,petscRealSingle),PetscErrorCode,(SNES,Ptr{SNES}),arg1,arg2)
    return err
end

function SNESFASCycleGetInterpolation(arg1::SNES,arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:SNESFASCycleGetInterpolation,petscRealSingle),PetscErrorCode,(SNES,Ptr{Mat{Float32}}),arg1,arg2)
    return err
end

function SNESFASCycleGetRestriction(arg1::SNES,arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:SNESFASCycleGetRestriction,petscRealSingle),PetscErrorCode,(SNES,Ptr{Mat{Float32}}),arg1,arg2)
    return err
end

function SNESFASCycleGetInjection(arg1::SNES,arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:SNESFASCycleGetInjection,petscRealSingle),PetscErrorCode,(SNES,Ptr{Mat{Float32}}),arg1,arg2)
    return err
end

function SNESFASCycleGetRScale(arg1::SNES,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:SNESFASCycleGetRScale,petscRealSingle),PetscErrorCode,(SNES,Ptr{Vec{Float32}}),arg1,arg2)
    return err
end

function SNESFASCycleSetCycles(arg0::Type{Float32},arg1::SNES,arg2::Integer)
    err = ccall((:SNESFASCycleSetCycles,petscRealSingle),PetscErrorCode,(SNES,Int64),arg1,arg2)
    return err
end

function SNESFASCycleIsFine(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:SNESFASCycleIsFine,petscRealSingle),PetscErrorCode,(SNES,Ptr{PetscBool}),arg1,arg2)
    return err
end

function SNESFASSetInterpolation(arg1::SNES,arg2::Integer,arg3::Mat{Float32})
    err = ccall((:SNESFASSetInterpolation,petscRealSingle),PetscErrorCode,(SNES,Int64,Mat{Float32}),arg1,arg2,arg3)
    return err
end

function SNESFASGetInterpolation(arg1::SNES,arg2::Integer,arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:SNESFASGetInterpolation,petscRealSingle),PetscErrorCode,(SNES,Int64,Ptr{Mat{Float32}}),arg1,arg2,arg3)
    return err
end

function SNESFASSetRestriction(arg1::SNES,arg2::Integer,arg3::Mat{Float32})
    err = ccall((:SNESFASSetRestriction,petscRealSingle),PetscErrorCode,(SNES,Int64,Mat{Float32}),arg1,arg2,arg3)
    return err
end

function SNESFASGetRestriction(arg1::SNES,arg2::Integer,arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:SNESFASGetRestriction,petscRealSingle),PetscErrorCode,(SNES,Int64,Ptr{Mat{Float32}}),arg1,arg2,arg3)
    return err
end

function SNESFASSetInjection(arg1::SNES,arg2::Integer,arg3::Mat{Float32})
    err = ccall((:SNESFASSetInjection,petscRealSingle),PetscErrorCode,(SNES,Int64,Mat{Float32}),arg1,arg2,arg3)
    return err
end

function SNESFASGetInjection(arg1::SNES,arg2::Integer,arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:SNESFASGetInjection,petscRealSingle),PetscErrorCode,(SNES,Int64,Ptr{Mat{Float32}}),arg1,arg2,arg3)
    return err
end

function SNESFASSetRScale(arg1::SNES,arg2::Integer,arg3::Vec{Float32})
    err = ccall((:SNESFASSetRScale,petscRealSingle),PetscErrorCode,(SNES,Int64,Vec{Float32}),arg1,arg2,arg3)
    return err
end

function SNESFASGetRScale(arg1::SNES,arg2::Integer,arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:SNESFASGetRScale,petscRealSingle),PetscErrorCode,(SNES,Int64,Ptr{Vec{Float32}}),arg1,arg2,arg3)
    return err
end

function SNESFASSetContinuation(arg0::Type{Float32},arg1::SNES,arg2::PetscBool)
    err = ccall((:SNESFASSetContinuation,petscRealSingle),PetscErrorCode,(SNES,PetscBool),arg1,arg2)
    return err
end

function SNESFASGetSmoother(arg0::Type{Float32},arg1::SNES,arg2::Integer,arg3::Union{Ptr{SNES},StridedArray{SNES},Ptr{SNES},Ref{SNES}})
    err = ccall((:SNESFASGetSmoother,petscRealSingle),PetscErrorCode,(SNES,Int64,Ptr{SNES}),arg1,arg2,arg3)
    return err
end

function SNESFASGetSmootherUp(arg0::Type{Float32},arg1::SNES,arg2::Integer,arg3::Union{Ptr{SNES},StridedArray{SNES},Ptr{SNES},Ref{SNES}})
    err = ccall((:SNESFASGetSmootherUp,petscRealSingle),PetscErrorCode,(SNES,Int64,Ptr{SNES}),arg1,arg2,arg3)
    return err
end

function SNESFASGetSmootherDown(arg0::Type{Float32},arg1::SNES,arg2::Integer,arg3::Union{Ptr{SNES},StridedArray{SNES},Ptr{SNES},Ref{SNES}})
    err = ccall((:SNESFASGetSmootherDown,petscRealSingle),PetscErrorCode,(SNES,Int64,Ptr{SNES}),arg1,arg2,arg3)
    return err
end

function SNESFASGetCoarseSolve(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{SNES},StridedArray{SNES},Ptr{SNES},Ref{SNES}})
    err = ccall((:SNESFASGetCoarseSolve,petscRealSingle),PetscErrorCode,(SNES,Ptr{SNES}),arg1,arg2)
    return err
end

function SNESFASFullSetDownSweep(arg0::Type{Float32},arg1::SNES,arg2::PetscBool)
    err = ccall((:SNESFASFullSetDownSweep,petscRealSingle),PetscErrorCode,(SNES,PetscBool),arg1,arg2)
    return err
end

function SNESFASCreateCoarseVec(arg1::SNES,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:SNESFASCreateCoarseVec,petscRealSingle),PetscErrorCode,(SNES,Ptr{Vec{Float32}}),arg1,arg2)
    return err
end

function SNESFASRestrict(arg1::SNES,arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:SNESFASRestrict,petscRealSingle),PetscErrorCode,(SNES,Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function DMSNESCheckFromOptions(arg1::SNES,arg2::Vec{Float32},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:DMSNESCheckFromOptions,petscRealSingle),PetscErrorCode,(SNES,Vec{Float32},Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4)
    return err
end

function TSInitializePackage(arg0::Type{Float32})
    err = ccall((:TSInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function TSCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{TS},StridedArray{TS},Ptr{TS},Ref{TS}})
    err = ccall((:TSCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{TS}),arg1,arg2)
    return err
end

function TSClone(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{TS},StridedArray{TS},Ptr{TS},Ref{TS}})
    err = ccall((:TSClone,petscRealSingle),PetscErrorCode,(TS,Ptr{TS}),arg1,arg2)
    return err
end

function TSDestroy(arg0::Type{Float32},arg1::Union{Ptr{TS},StridedArray{TS},Ptr{TS},Ref{TS}})
    err = ccall((:TSDestroy,petscRealSingle),PetscErrorCode,(Ptr{TS},),arg1)
    return err
end

function TSSetProblemType(arg0::Type{Float32},arg1::TS,arg2::TSProblemType)
    err = ccall((:TSSetProblemType,petscRealSingle),PetscErrorCode,(TS,TSProblemType),arg1,arg2)
    return err
end

function TSGetProblemType(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{TSProblemType},StridedArray{TSProblemType},Ptr{TSProblemType},Ref{TSProblemType}})
    err = ccall((:TSGetProblemType,petscRealSingle),PetscErrorCode,(TS,Ptr{TSProblemType}),arg1,arg2)
    return err
end

function TSMonitor(arg1::TS,arg2::Integer,arg3::Float32,arg4::Vec{Float32})
    err = ccall((:TSMonitor,petscRealSingle),PetscErrorCode,(TS,Int64,Float32,Vec{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function TSMonitorSet(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSMonitorSet,petscRealSingle),PetscErrorCode,(TS,Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function TSMonitorCancel(arg0::Type{Float32},arg1::TS)
    err = ccall((:TSMonitorCancel,petscRealSingle),PetscErrorCode,(TS,),arg1)
    return err
end

function TSSetOptionsPrefix(arg0::Type{Float32},arg1::TS,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:TSSetOptionsPrefix,petscRealSingle),PetscErrorCode,(TS,Cstring),arg1,arg2)
    return err
end

function TSAppendOptionsPrefix(arg0::Type{Float32},arg1::TS,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:TSAppendOptionsPrefix,petscRealSingle),PetscErrorCode,(TS,Cstring),arg1,arg2)
    return err
end

function TSGetOptionsPrefix(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:TSGetOptionsPrefix,petscRealSingle),PetscErrorCode,(TS,Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function TSSetFromOptions(arg0::Type{Float32},arg1::TS)
    err = ccall((:TSSetFromOptions,petscRealSingle),PetscErrorCode,(TS,),arg1)
    return err
end

function TSSetUp(arg0::Type{Float32},arg1::TS)
    err = ccall((:TSSetUp,petscRealSingle),PetscErrorCode,(TS,),arg1)
    return err
end

function TSReset(arg0::Type{Float32},arg1::TS)
    err = ccall((:TSReset,petscRealSingle),PetscErrorCode,(TS,),arg1)
    return err
end

function TSSetSolution(arg1::TS,arg2::Vec{Float32})
    err = ccall((:TSSetSolution,petscRealSingle),PetscErrorCode,(TS,Vec{Float32}),arg1,arg2)
    return err
end

function TSGetSolution(arg1::TS,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:TSGetSolution,petscRealSingle),PetscErrorCode,(TS,Ptr{Vec{Float32}}),arg1,arg2)
    return err
end

function TSSetSaveTrajectory(arg0::Type{Float32},arg1::TS)
    err = ccall((:TSSetSaveTrajectory,petscRealSingle),PetscErrorCode,(TS,),arg1)
    return err
end

function TSTrajectoryCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{TSTrajectory},StridedArray{TSTrajectory},Ptr{TSTrajectory},Ref{TSTrajectory}})
    err = ccall((:TSTrajectoryCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{TSTrajectory}),arg1,arg2)
    return err
end

function TSTrajectoryDestroy(arg0::Type{Float32},arg1::Union{Ptr{TSTrajectory},StridedArray{TSTrajectory},Ptr{TSTrajectory},Ref{TSTrajectory}})
    err = ccall((:TSTrajectoryDestroy,petscRealSingle),PetscErrorCode,(Ptr{TSTrajectory},),arg1)
    return err
end

function TSTrajectorySetType(arg0::Type{Float32},arg1::TSTrajectory,arg2::TSTrajectoryType)
    err = ccall((:TSTrajectorySetType,petscRealSingle),PetscErrorCode,(TSTrajectory,Cstring),arg1,arg2)
    return err
end

function TSTrajectorySet(arg1::TSTrajectory,arg2::TS,arg3::Integer,arg4::Float32,arg5::Vec{Float32})
    err = ccall((:TSTrajectorySet,petscRealSingle),PetscErrorCode,(TSTrajectory,TS,Int64,Float32,Vec{Float32}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSTrajectoryGet(arg0::Type{Float32},arg1::TSTrajectory,arg2::TS,arg3::Integer,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:TSTrajectoryGet,petscRealSingle),PetscErrorCode,(TSTrajectory,TS,Int64,Ptr{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function TSTrajectorySetFromOptions(arg0::Type{Float32},arg1::TSTrajectory)
    err = ccall((:TSTrajectorySetFromOptions,petscRealSingle),PetscErrorCode,(TSTrajectory,),arg1)
    return err
end

function TSTrajectoryRegisterAll(arg0::Type{Float32})
    err = ccall((:TSTrajectoryRegisterAll,petscRealSingle),PetscErrorCode,())
    return err
end

function TSSetCostGradients(arg1::TS,arg2::Integer,arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg4::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:TSSetCostGradients,petscRealSingle),PetscErrorCode,(TS,Int64,Ptr{Vec{Float32}},Ptr{Vec{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function TSGetCostGradients(arg1::TS,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Vec{Float32}}},StridedArray{Ptr{Vec{Float32}}},Ptr{Ptr{Vec{Float32}}},Ref{Ptr{Vec{Float32}}}},arg4::Union{Ptr{Ptr{Vec{Float32}}},StridedArray{Ptr{Vec{Float32}}},Ptr{Ptr{Vec{Float32}}},Ref{Ptr{Vec{Float32}}}})
    err = ccall((:TSGetCostGradients,petscRealSingle),PetscErrorCode,(TS,Ptr{Int64},Ptr{Ptr{Vec{Float32}}},Ptr{Ptr{Vec{Float32}}}),arg1,arg2,arg3,arg4)
    return err
end

function TSSetCostIntegrand(arg0::Type{Float32},arg1::TS,arg2::Integer,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSSetCostIntegrand,petscRealSingle),PetscErrorCode,(TS,Int64,Ptr{Void},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function TSGetCostIntegral(arg1::TS,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:TSGetCostIntegral,petscRealSingle),PetscErrorCode,(TS,Ptr{Vec{Float32}}),arg1,arg2)
    return err
end

function TSAdjointSetRHSJacobian(arg1::TS,arg2::Mat{Float32},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSAdjointSetRHSJacobian,petscRealSingle),PetscErrorCode,(TS,Mat{Float32},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function TSAdjointSolve(arg0::Type{Float32},arg1::TS)
    err = ccall((:TSAdjointSolve,petscRealSingle),PetscErrorCode,(TS,),arg1)
    return err
end

function TSAdjointSetSteps(arg0::Type{Float32},arg1::TS,arg2::Integer)
    err = ccall((:TSAdjointSetSteps,petscRealSingle),PetscErrorCode,(TS,Int64),arg1,arg2)
    return err
end

function TSAdjointComputeRHSJacobian(arg1::TS,arg2::Float32,arg3::Vec{Float32},arg4::Mat{Float32})
    err = ccall((:TSAdjointComputeRHSJacobian,petscRealSingle),PetscErrorCode,(TS,Float32,Vec{Float32},Mat{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function TSAdjointStep(arg0::Type{Float32},arg1::TS)
    err = ccall((:TSAdjointStep,petscRealSingle),PetscErrorCode,(TS,),arg1)
    return err
end

function TSAdjointSetUp(arg0::Type{Float32},arg1::TS)
    err = ccall((:TSAdjointSetUp,petscRealSingle),PetscErrorCode,(TS,),arg1)
    return err
end

function TSAdjointComputeDRDPFunction(arg1::TS,arg2::Float32,arg3::Vec{Float32},arg4::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:TSAdjointComputeDRDPFunction,petscRealSingle),PetscErrorCode,(TS,Float32,Vec{Float32},Ptr{Vec{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function TSAdjointComputeDRDYFunction(arg1::TS,arg2::Float32,arg3::Vec{Float32},arg4::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:TSAdjointComputeDRDYFunction,petscRealSingle),PetscErrorCode,(TS,Float32,Vec{Float32},Ptr{Vec{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function TSAdjointComputeCostIntegrand(arg1::TS,arg2::Float32,arg3::Vec{Float32},arg4::Vec{Float32})
    err = ccall((:TSAdjointComputeCostIntegrand,petscRealSingle),PetscErrorCode,(TS,Float32,Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function TSSetDuration(arg0::Type{Float32},arg1::TS,arg2::Integer,arg3::Float32)
    err = ccall((:TSSetDuration,petscRealSingle),PetscErrorCode,(TS,Int64,Float32),arg1,arg2,arg3)
    return err
end

function TSGetDuration(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:TSGetDuration,petscRealSingle),PetscErrorCode,(TS,Ptr{Int64},Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function TSSetExactFinalTime(arg0::Type{Float32},arg1::TS,arg2::TSExactFinalTimeOption)
    err = ccall((:TSSetExactFinalTime,petscRealSingle),PetscErrorCode,(TS,TSExactFinalTimeOption),arg1,arg2)
    return err
end

function TSMonitorDefault(arg1::TS,arg2::Integer,arg3::Float32,arg4::Vec{Float32},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSMonitorDefault,petscRealSingle),PetscErrorCode,(TS,Int64,Float32,Vec{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSMonitorDrawCtxCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Integer,arg9::Union{Ptr{TSMonitorDrawCtx},StridedArray{TSMonitorDrawCtx},Ptr{TSMonitorDrawCtx},Ref{TSMonitorDrawCtx}})
    err = ccall((:TSMonitorDrawCtxCreate,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Cstring,Cint,Cint,Cint,Cint,Int64,Ptr{TSMonitorDrawCtx}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
    return err
end

function TSMonitorDrawCtxDestroy(arg0::Type{Float32},arg1::Union{Ptr{TSMonitorDrawCtx},StridedArray{TSMonitorDrawCtx},Ptr{TSMonitorDrawCtx},Ref{TSMonitorDrawCtx}})
    err = ccall((:TSMonitorDrawCtxDestroy,petscRealSingle),PetscErrorCode,(Ptr{TSMonitorDrawCtx},),arg1)
    return err
end

function TSMonitorDrawSolution(arg1::TS,arg2::Integer,arg3::Float32,arg4::Vec{Float32},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSMonitorDrawSolution,petscRealSingle),PetscErrorCode,(TS,Int64,Float32,Vec{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSMonitorDrawSolutionPhase(arg1::TS,arg2::Integer,arg3::Float32,arg4::Vec{Float32},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSMonitorDrawSolutionPhase,petscRealSingle),PetscErrorCode,(TS,Int64,Float32,Vec{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSMonitorDrawError(arg1::TS,arg2::Integer,arg3::Float32,arg4::Vec{Float32},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSMonitorDrawError,petscRealSingle),PetscErrorCode,(TS,Int64,Float32,Vec{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSMonitorSolutionBinary(arg1::TS,arg2::Integer,arg3::Float32,arg4::Vec{Float32},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSMonitorSolutionBinary,petscRealSingle),PetscErrorCode,(TS,Int64,Float32,Vec{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSMonitorSolutionVTK(arg1::TS,arg2::Integer,arg3::Float32,arg4::Vec{Float32},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSMonitorSolutionVTK,petscRealSingle),PetscErrorCode,(TS,Int64,Float32,Vec{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSMonitorSolutionVTKDestroy(arg0::Type{Float32},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSMonitorSolutionVTKDestroy,petscRealSingle),PetscErrorCode,(Ptr{Void},),arg1)
    return err
end

function TSStep(arg0::Type{Float32},arg1::TS)
    err = ccall((:TSStep,petscRealSingle),PetscErrorCode,(TS,),arg1)
    return err
end

function TSEvaluateStep(arg1::TS,arg2::Integer,arg3::Vec{Float32},arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:TSEvaluateStep,petscRealSingle),PetscErrorCode,(TS,Int64,Vec{Float32},Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function TSSolve(arg1::TS,arg2::Vec{Float32})
    err = ccall((:TSSolve,petscRealSingle),PetscErrorCode,(TS,Vec{Float32}),arg1,arg2)
    return err
end

function TSGetEquationType(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{TSEquationType},StridedArray{TSEquationType},Ptr{TSEquationType},Ref{TSEquationType}})
    err = ccall((:TSGetEquationType,petscRealSingle),PetscErrorCode,(TS,Ptr{TSEquationType}),arg1,arg2)
    return err
end

function TSSetEquationType(arg0::Type{Float32},arg1::TS,arg2::TSEquationType)
    err = ccall((:TSSetEquationType,petscRealSingle),PetscErrorCode,(TS,TSEquationType),arg1,arg2)
    return err
end

function TSGetConvergedReason(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{TSConvergedReason},StridedArray{TSConvergedReason},Ptr{TSConvergedReason},Ref{TSConvergedReason}})
    err = ccall((:TSGetConvergedReason,petscRealSingle),PetscErrorCode,(TS,Ptr{TSConvergedReason}),arg1,arg2)
    return err
end

function TSSetConvergedReason(arg0::Type{Float32},arg1::TS,arg2::TSConvergedReason)
    err = ccall((:TSSetConvergedReason,petscRealSingle),PetscErrorCode,(TS,TSConvergedReason),arg1,arg2)
    return err
end

function TSGetSolveTime(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:TSGetSolveTime,petscRealSingle),PetscErrorCode,(TS,Ptr{Float32}),arg1,arg2)
    return err
end

function TSGetSNESIterations(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:TSGetSNESIterations,petscRealSingle),PetscErrorCode,(TS,Ptr{Int64}),arg1,arg2)
    return err
end

function TSGetKSPIterations(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:TSGetKSPIterations,petscRealSingle),PetscErrorCode,(TS,Ptr{Int64}),arg1,arg2)
    return err
end

function TSGetStepRejections(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:TSGetStepRejections,petscRealSingle),PetscErrorCode,(TS,Ptr{Int64}),arg1,arg2)
    return err
end

function TSSetMaxStepRejections(arg0::Type{Float32},arg1::TS,arg2::Integer)
    err = ccall((:TSSetMaxStepRejections,petscRealSingle),PetscErrorCode,(TS,Int64),arg1,arg2)
    return err
end

function TSGetSNESFailures(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:TSGetSNESFailures,petscRealSingle),PetscErrorCode,(TS,Ptr{Int64}),arg1,arg2)
    return err
end

function TSSetMaxSNESFailures(arg0::Type{Float32},arg1::TS,arg2::Integer)
    err = ccall((:TSSetMaxSNESFailures,petscRealSingle),PetscErrorCode,(TS,Int64),arg1,arg2)
    return err
end

function TSSetErrorIfStepFails(arg0::Type{Float32},arg1::TS,arg2::PetscBool)
    err = ccall((:TSSetErrorIfStepFails,petscRealSingle),PetscErrorCode,(TS,PetscBool),arg1,arg2)
    return err
end

function TSRollBack(arg0::Type{Float32},arg1::TS)
    err = ccall((:TSRollBack,petscRealSingle),PetscErrorCode,(TS,),arg1)
    return err
end

function TSGetTotalSteps(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:TSGetTotalSteps,petscRealSingle),PetscErrorCode,(TS,Ptr{Int64}),arg1,arg2)
    return err
end

function TSGetStages(arg1::TS,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Vec{Float32}}},StridedArray{Ptr{Vec{Float32}}},Ptr{Ptr{Vec{Float32}}},Ref{Ptr{Vec{Float32}}}})
    err = ccall((:TSGetStages,petscRealSingle),PetscErrorCode,(TS,Ptr{Int64},Ptr{Ptr{Vec{Float32}}}),arg1,arg2,arg3)
    return err
end

function TSSetInitialTimeStep(arg0::Type{Float32},arg1::TS,arg2::Float32,arg3::Float32)
    err = ccall((:TSSetInitialTimeStep,petscRealSingle),PetscErrorCode,(TS,Float32,Float32),arg1,arg2,arg3)
    return err
end

function TSGetTimeStep(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:TSGetTimeStep,petscRealSingle),PetscErrorCode,(TS,Ptr{Float32}),arg1,arg2)
    return err
end

function TSGetTime(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:TSGetTime,petscRealSingle),PetscErrorCode,(TS,Ptr{Float32}),arg1,arg2)
    return err
end

function TSSetTime(arg0::Type{Float32},arg1::TS,arg2::Float32)
    err = ccall((:TSSetTime,petscRealSingle),PetscErrorCode,(TS,Float32),arg1,arg2)
    return err
end

function TSGetTimeStepNumber(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:TSGetTimeStepNumber,petscRealSingle),PetscErrorCode,(TS,Ptr{Int64}),arg1,arg2)
    return err
end

function TSSetTimeStep(arg0::Type{Float32},arg1::TS,arg2::Float32)
    err = ccall((:TSSetTimeStep,petscRealSingle),PetscErrorCode,(TS,Float32),arg1,arg2)
    return err
end

function TSGetPrevTime(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:TSGetPrevTime,petscRealSingle),PetscErrorCode,(TS,Ptr{Float32}),arg1,arg2)
    return err
end

function TSSetRHSFunction(arg1::TS,arg2::Vec{Float32},arg3::TSRHSFunction,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSSetRHSFunction,petscRealSingle),PetscErrorCode,(TS,Vec{Float32},TSRHSFunction,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function TSGetRHSFunction(arg1::TS,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg3::Union{Ptr{TSRHSFunction},StridedArray{TSRHSFunction},Ptr{TSRHSFunction},Ref{TSRHSFunction}},arg4::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:TSGetRHSFunction,petscRealSingle),PetscErrorCode,(TS,Ptr{Vec{Float32}},Ptr{TSRHSFunction},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4)
    return err
end

function TSSetRHSJacobian(arg1::TS,arg2::Mat{Float32},arg3::Mat{Float32},arg4::TSRHSJacobian,arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSSetRHSJacobian,petscRealSingle),PetscErrorCode,(TS,Mat{Float32},Mat{Float32},TSRHSJacobian,Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSGetRHSJacobian(arg1::TS,arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}},arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}},arg4::Union{Ptr{TSRHSJacobian},StridedArray{TSRHSJacobian},Ptr{TSRHSJacobian},Ref{TSRHSJacobian}},arg5::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:TSGetRHSJacobian,petscRealSingle),PetscErrorCode,(TS,Ptr{Mat{Float32}},Ptr{Mat{Float32}},Ptr{TSRHSJacobian},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSRHSJacobianSetReuse(arg0::Type{Float32},arg1::TS,arg2::PetscBool)
    err = ccall((:TSRHSJacobianSetReuse,petscRealSingle),PetscErrorCode,(TS,PetscBool),arg1,arg2)
    return err
end

function TSSetSolutionFunction(arg0::Type{Float32},arg1::TS,arg2::TSSolutionFunction,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSSetSolutionFunction,petscRealSingle),PetscErrorCode,(TS,TSSolutionFunction,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function TSSetForcingFunction(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSSetForcingFunction,petscRealSingle),PetscErrorCode,(TS,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function TSSetIFunction(arg1::TS,arg2::Vec{Float32},arg3::TSIFunction,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSSetIFunction,petscRealSingle),PetscErrorCode,(TS,Vec{Float32},TSIFunction,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function TSGetIFunction(arg1::TS,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg3::Union{Ptr{TSIFunction},StridedArray{TSIFunction},Ptr{TSIFunction},Ref{TSIFunction}},arg4::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:TSGetIFunction,petscRealSingle),PetscErrorCode,(TS,Ptr{Vec{Float32}},Ptr{TSIFunction},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4)
    return err
end

function TSSetIJacobian(arg1::TS,arg2::Mat{Float32},arg3::Mat{Float32},arg4::TSIJacobian,arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSSetIJacobian,petscRealSingle),PetscErrorCode,(TS,Mat{Float32},Mat{Float32},TSIJacobian,Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSGetIJacobian(arg1::TS,arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}},arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}},arg4::Union{Ptr{TSIJacobian},StridedArray{TSIJacobian},Ptr{TSIJacobian},Ref{TSIJacobian}},arg5::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:TSGetIJacobian,petscRealSingle),PetscErrorCode,(TS,Ptr{Mat{Float32}},Ptr{Mat{Float32}},Ptr{TSIJacobian},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSComputeRHSFunctionLinear(arg1::TS,arg2::Float32,arg3::Vec{Float32},arg4::Vec{Float32},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSComputeRHSFunctionLinear,petscRealSingle),PetscErrorCode,(TS,Float32,Vec{Float32},Vec{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSComputeRHSJacobianConstant(arg1::TS,arg2::Float32,arg3::Vec{Float32},arg4::Mat{Float32},arg5::Mat{Float32},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSComputeRHSJacobianConstant,petscRealSingle),PetscErrorCode,(TS,Float32,Vec{Float32},Mat{Float32},Mat{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function TSComputeIFunctionLinear(arg1::TS,arg2::Float32,arg3::Vec{Float32},arg4::Vec{Float32},arg5::Vec{Float32},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSComputeIFunctionLinear,petscRealSingle),PetscErrorCode,(TS,Float32,Vec{Float32},Vec{Float32},Vec{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function TSComputeIJacobianConstant(arg1::TS,arg2::Float32,arg3::Vec{Float32},arg4::Vec{Float32},arg5::Float32,arg6::Mat{Float32},arg7::Mat{Float32},arg8::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSComputeIJacobianConstant,petscRealSingle),PetscErrorCode,(TS,Float32,Vec{Float32},Vec{Float32},Float32,Mat{Float32},Mat{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function TSComputeSolutionFunction(arg1::TS,arg2::Float32,arg3::Vec{Float32})
    err = ccall((:TSComputeSolutionFunction,petscRealSingle),PetscErrorCode,(TS,Float32,Vec{Float32}),arg1,arg2,arg3)
    return err
end

function TSComputeForcingFunction(arg1::TS,arg2::Float32,arg3::Vec{Float32})
    err = ccall((:TSComputeForcingFunction,petscRealSingle),PetscErrorCode,(TS,Float32,Vec{Float32}),arg1,arg2,arg3)
    return err
end

function TSComputeIJacobianDefaultColor(arg1::TS,arg2::Float32,arg3::Vec{Float32},arg4::Vec{Float32},arg5::Float32,arg6::Mat{Float32},arg7::Mat{Float32},arg8::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSComputeIJacobianDefaultColor,petscRealSingle),PetscErrorCode,(TS,Float32,Vec{Float32},Vec{Float32},Float32,Mat{Float32},Mat{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function TSSetPreStep(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSSetPreStep,petscRealSingle),PetscErrorCode,(TS,Ptr{Void}),arg1,arg2)
    return err
end

function TSSetPreStage(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSSetPreStage,petscRealSingle),PetscErrorCode,(TS,Ptr{Void}),arg1,arg2)
    return err
end

function TSSetPostStage(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSSetPostStage,petscRealSingle),PetscErrorCode,(TS,Ptr{Void}),arg1,arg2)
    return err
end

function TSSetPostStep(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSSetPostStep,petscRealSingle),PetscErrorCode,(TS,Ptr{Void}),arg1,arg2)
    return err
end

function TSPreStep(arg0::Type{Float32},arg1::TS)
    err = ccall((:TSPreStep,petscRealSingle),PetscErrorCode,(TS,),arg1)
    return err
end

function TSPreStage(arg0::Type{Float32},arg1::TS,arg2::Float32)
    err = ccall((:TSPreStage,petscRealSingle),PetscErrorCode,(TS,Float32),arg1,arg2)
    return err
end

function TSPostStage(arg1::TS,arg2::Float32,arg3::Integer,arg4::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:TSPostStage,petscRealSingle),PetscErrorCode,(TS,Float32,Int64,Ptr{Vec{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function TSPostStep(arg0::Type{Float32},arg1::TS)
    err = ccall((:TSPostStep,petscRealSingle),PetscErrorCode,(TS,),arg1)
    return err
end

function TSSetRetainStages(arg0::Type{Float32},arg1::TS,arg2::PetscBool)
    err = ccall((:TSSetRetainStages,petscRealSingle),PetscErrorCode,(TS,PetscBool),arg1,arg2)
    return err
end

function TSInterpolate(arg1::TS,arg2::Float32,arg3::Vec{Float32})
    err = ccall((:TSInterpolate,petscRealSingle),PetscErrorCode,(TS,Float32,Vec{Float32}),arg1,arg2,arg3)
    return err
end

function TSSetTolerances(arg1::TS,arg2::Float32,arg3::Vec{Float32},arg4::Float32,arg5::Vec{Float32})
    err = ccall((:TSSetTolerances,petscRealSingle),PetscErrorCode,(TS,Float32,Vec{Float32},Float32,Vec{Float32}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSGetTolerances(arg1::TS,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:TSGetTolerances,petscRealSingle),PetscErrorCode,(TS,Ptr{Float32},Ptr{Vec{Float32}},Ptr{Float32},Ptr{Vec{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSErrorWeightedNormInfinity(arg1::TS,arg2::Vec{Float32},arg3::Vec{Float32},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:TSErrorWeightedNormInfinity,petscRealSingle),PetscErrorCode,(TS,Vec{Float32},Vec{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function TSErrorWeightedNorm2(arg1::TS,arg2::Vec{Float32},arg3::Vec{Float32},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:TSErrorWeightedNorm2,petscRealSingle),PetscErrorCode,(TS,Vec{Float32},Vec{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function TSErrorWeightedNorm(arg1::TS,arg2::Vec{Float32},arg3::Vec{Float32},arg4::NormType,arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:TSErrorWeightedNorm,petscRealSingle),PetscErrorCode,(TS,Vec{Float32},Vec{Float32},NormType,Ptr{Float32}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSSetCFLTimeLocal(arg0::Type{Float32},arg1::TS,arg2::Float32)
    err = ccall((:TSSetCFLTimeLocal,petscRealSingle),PetscErrorCode,(TS,Float32),arg1,arg2)
    return err
end

function TSGetCFLTime(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:TSGetCFLTime,petscRealSingle),PetscErrorCode,(TS,Ptr{Float32}),arg1,arg2)
    return err
end

function TSPseudoSetTimeStep(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSPseudoSetTimeStep,petscRealSingle),PetscErrorCode,(TS,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function TSPseudoTimeStepDefault(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSPseudoTimeStepDefault,petscRealSingle),PetscErrorCode,(TS,Ptr{Float32},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function TSPseudoComputeTimeStep(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:TSPseudoComputeTimeStep,petscRealSingle),PetscErrorCode,(TS,Ptr{Float32}),arg1,arg2)
    return err
end

function TSPseudoSetMaxTimeStep(arg0::Type{Float32},arg1::TS,arg2::Float32)
    err = ccall((:TSPseudoSetMaxTimeStep,petscRealSingle),PetscErrorCode,(TS,Float32),arg1,arg2)
    return err
end

function TSPseudoSetVerifyTimeStep(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSPseudoSetVerifyTimeStep,petscRealSingle),PetscErrorCode,(TS,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function TSPseudoVerifyTimeStepDefault(arg1::TS,arg2::Vec{Float32},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:TSPseudoVerifyTimeStepDefault,petscRealSingle),PetscErrorCode,(TS,Vec{Float32},Ptr{Void},Ptr{Float32},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSPseudoVerifyTimeStep(arg1::TS,arg2::Vec{Float32},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:TSPseudoVerifyTimeStep,petscRealSingle),PetscErrorCode,(TS,Vec{Float32},Ptr{Float32},Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function TSPseudoSetTimeStepIncrement(arg0::Type{Float32},arg1::TS,arg2::Float32)
    err = ccall((:TSPseudoSetTimeStepIncrement,petscRealSingle),PetscErrorCode,(TS,Float32),arg1,arg2)
    return err
end

function TSPseudoIncrementDtFromInitialDt(arg0::Type{Float32},arg1::TS)
    err = ccall((:TSPseudoIncrementDtFromInitialDt,petscRealSingle),PetscErrorCode,(TS,),arg1)
    return err
end

function TSPythonSetType(arg0::Type{Float32},arg1::TS,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:TSPythonSetType,petscRealSingle),PetscErrorCode,(TS,Cstring),arg1,arg2)
    return err
end

function TSComputeRHSFunction(arg1::TS,arg2::Float32,arg3::Vec{Float32},arg4::Vec{Float32})
    err = ccall((:TSComputeRHSFunction,petscRealSingle),PetscErrorCode,(TS,Float32,Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function TSComputeRHSJacobian(arg1::TS,arg2::Float32,arg3::Vec{Float32},arg4::Mat{Float32},arg5::Mat{Float32})
    err = ccall((:TSComputeRHSJacobian,petscRealSingle),PetscErrorCode,(TS,Float32,Vec{Float32},Mat{Float32},Mat{Float32}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSComputeIFunction(arg1::TS,arg2::Float32,arg3::Vec{Float32},arg4::Vec{Float32},arg5::Vec{Float32},arg6::PetscBool)
    err = ccall((:TSComputeIFunction,petscRealSingle),PetscErrorCode,(TS,Float32,Vec{Float32},Vec{Float32},Vec{Float32},PetscBool),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function TSComputeIJacobian(arg1::TS,arg2::Float32,arg3::Vec{Float32},arg4::Vec{Float32},arg5::Float32,arg6::Mat{Float32},arg7::Mat{Float32},arg8::PetscBool)
    err = ccall((:TSComputeIJacobian,petscRealSingle),PetscErrorCode,(TS,Float32,Vec{Float32},Vec{Float32},Float32,Mat{Float32},Mat{Float32},PetscBool),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function TSComputeLinearStability(arg0::Type{Float32},arg1::TS,arg2::Float32,arg3::Float32,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:TSComputeLinearStability,petscRealSingle),PetscErrorCode,(TS,Float32,Float32,Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSVISetVariableBounds(arg1::TS,arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:TSVISetVariableBounds,petscRealSingle),PetscErrorCode,(TS,Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function DMTSSetRHSFunction(arg0::Type{Float32},arg1::DM,arg2::TSRHSFunction,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMTSSetRHSFunction,petscRealSingle),PetscErrorCode,(DM,TSRHSFunction,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMTSGetRHSFunction(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{TSRHSFunction},StridedArray{TSRHSFunction},Ptr{TSRHSFunction},Ref{TSRHSFunction}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:DMTSGetRHSFunction,petscRealSingle),PetscErrorCode,(DM,Ptr{TSRHSFunction},Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function DMTSSetRHSJacobian(arg0::Type{Float32},arg1::DM,arg2::TSRHSJacobian,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMTSSetRHSJacobian,petscRealSingle),PetscErrorCode,(DM,TSRHSJacobian,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMTSGetRHSJacobian(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{TSRHSJacobian},StridedArray{TSRHSJacobian},Ptr{TSRHSJacobian},Ref{TSRHSJacobian}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:DMTSGetRHSJacobian,petscRealSingle),PetscErrorCode,(DM,Ptr{TSRHSJacobian},Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function DMTSSetIFunction(arg0::Type{Float32},arg1::DM,arg2::TSIFunction,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMTSSetIFunction,petscRealSingle),PetscErrorCode,(DM,TSIFunction,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMTSGetIFunction(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{TSIFunction},StridedArray{TSIFunction},Ptr{TSIFunction},Ref{TSIFunction}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:DMTSGetIFunction,petscRealSingle),PetscErrorCode,(DM,Ptr{TSIFunction},Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function DMTSSetIJacobian(arg0::Type{Float32},arg1::DM,arg2::TSIJacobian,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMTSSetIJacobian,petscRealSingle),PetscErrorCode,(DM,TSIJacobian,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMTSGetIJacobian(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{TSIJacobian},StridedArray{TSIJacobian},Ptr{TSIJacobian},Ref{TSIJacobian}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:DMTSGetIJacobian,petscRealSingle),PetscErrorCode,(DM,Ptr{TSIJacobian},Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function DMTSSetSolutionFunction(arg0::Type{Float32},arg1::DM,arg2::TSSolutionFunction,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMTSSetSolutionFunction,petscRealSingle),PetscErrorCode,(DM,TSSolutionFunction,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMTSGetSolutionFunction(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{TSSolutionFunction},StridedArray{TSSolutionFunction},Ptr{TSSolutionFunction},Ref{TSSolutionFunction}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:DMTSGetSolutionFunction,petscRealSingle),PetscErrorCode,(DM,Ptr{TSSolutionFunction},Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function DMTSSetForcingFunction(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMTSSetForcingFunction,petscRealSingle),PetscErrorCode,(DM,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMTSGetForcingFunction(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:DMTSGetForcingFunction,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function DMTSGetMinRadius(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:DMTSGetMinRadius,petscRealSingle),PetscErrorCode,(DM,Ptr{Float32}),arg1,arg2)
    return err
end

function DMTSSetMinRadius(arg0::Type{Float32},arg1::DM,arg2::Float32)
    err = ccall((:DMTSSetMinRadius,petscRealSingle),PetscErrorCode,(DM,Float32),arg1,arg2)
    return err
end

function DMTSCheckFromOptions(arg1::TS,arg2::Vec{Float32},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:DMTSCheckFromOptions,petscRealSingle),PetscErrorCode,(TS,Vec{Float32},Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4)
    return err
end

function DMTSSetIFunctionLocal(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMTSSetIFunctionLocal,petscRealSingle),PetscErrorCode,(DM,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMTSSetIJacobianLocal(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMTSSetIJacobianLocal,petscRealSingle),PetscErrorCode,(DM,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMTSSetRHSFunctionLocal(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMTSSetRHSFunctionLocal,petscRealSingle),PetscErrorCode,(DM,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMTSSetIFunctionSerialize(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMTSSetIFunctionSerialize,petscRealSingle),PetscErrorCode,(DM,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMTSSetIJacobianSerialize(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMTSSetIJacobianSerialize,petscRealSingle),PetscErrorCode,(DM,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMDATSSetRHSFunctionLocal(arg0::Type{Float32},arg1::DM,arg2::InsertMode,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDATSSetRHSFunctionLocal,petscRealSingle),PetscErrorCode,(DM,InsertMode,Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function DMDATSSetRHSJacobianLocal(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDATSSetRHSJacobianLocal,petscRealSingle),PetscErrorCode,(DM,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMDATSSetIFunctionLocal(arg0::Type{Float32},arg1::DM,arg2::InsertMode,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDATSSetIFunctionLocal,petscRealSingle),PetscErrorCode,(DM,InsertMode,Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function DMDATSSetIJacobianLocal(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDATSSetIJacobianLocal,petscRealSingle),PetscErrorCode,(DM,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMPlexTSGetGeometryFVM(arg1::DM,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:DMPlexTSGetGeometryFVM,petscRealSingle),PetscErrorCode,(DM,Ptr{Vec{Float32}},Ptr{Vec{Float32}},Ptr{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function TSMonitorDMDARayDestroy(arg0::Type{Float32},arg1::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:TSMonitorDMDARayDestroy,petscRealSingle),PetscErrorCode,(Ptr{Ptr{Void}},),arg1)
    return err
end

function TSMonitorDMDARay(arg1::TS,arg2::Integer,arg3::Float32,arg4::Vec{Float32},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSMonitorDMDARay,petscRealSingle),PetscErrorCode,(TS,Int64,Float32,Vec{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSMonitorLGDMDARay(arg1::TS,arg2::Integer,arg3::Float32,arg4::Vec{Float32},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSMonitorLGDMDARay,petscRealSingle),PetscErrorCode,(TS,Int64,Float32,Vec{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSGetType(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{TSType},StridedArray{TSType},Ptr{TSType},Ref{TSType}})
    (arg2_,tmp) = symbol_get_before(arg2)
    err = ccall((:TSGetType,petscRealSingle),PetscErrorCode,(TS,Ptr{Ptr{UInt8}}),arg1,arg2_)
    symbol_get_after(arg2_,arg2)
    return err
end

function TSSetType(arg0::Type{Float32},arg1::TS,arg2::TSType)
    err = ccall((:TSSetType,petscRealSingle),PetscErrorCode,(TS,Cstring),arg1,arg2)
    return err
end

function TSRegister(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function TSGetSNES(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{SNES},StridedArray{SNES},Ptr{SNES},Ref{SNES}})
    err = ccall((:TSGetSNES,petscRealSingle),PetscErrorCode,(TS,Ptr{SNES}),arg1,arg2)
    return err
end

function TSSetSNES(arg0::Type{Float32},arg1::TS,arg2::SNES)
    err = ccall((:TSSetSNES,petscRealSingle),PetscErrorCode,(TS,SNES),arg1,arg2)
    return err
end

function TSGetKSP(arg1::TS,arg2::Union{Ptr{KSP{Float32}},StridedArray{KSP{Float32}},Ptr{KSP{Float32}},Ref{KSP{Float32}}})
    err = ccall((:TSGetKSP,petscRealSingle),PetscErrorCode,(TS,Ptr{KSP{Float32}}),arg1,arg2)
    return err
end

function TSView(arg1::TS,arg2::PetscViewer{Float32})
    err = ccall((:TSView,petscRealSingle),PetscErrorCode,(TS,PetscViewer{Float32}),arg1,arg2)
    return err
end

function TSLoad(arg1::TS,arg2::PetscViewer{Float32})
    err = ccall((:TSLoad,petscRealSingle),PetscErrorCode,(TS,PetscViewer{Float32}),arg1,arg2)
    return err
end

function TSViewFromOptions(arg0::Type{Float32},A::TS,obj::PetscObject,name::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:TSViewFromOptions,petscRealSingle),PetscErrorCode,(TS,PetscObject,Cstring),A,obj,name)
    return err
end

function TSSetApplicationContext(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSSetApplicationContext,petscRealSingle),PetscErrorCode,(TS,Ptr{Void}),arg1,arg2)
    return err
end

function TSGetApplicationContext(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSGetApplicationContext,petscRealSingle),PetscErrorCode,(TS,Ptr{Void}),arg1,arg2)
    return err
end

function TSMonitorLGCtxCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Integer,arg9::Union{Ptr{TSMonitorLGCtx},StridedArray{TSMonitorLGCtx},Ptr{TSMonitorLGCtx},Ref{TSMonitorLGCtx}})
    err = ccall((:TSMonitorLGCtxCreate,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Cstring,Cint,Cint,Cint,Cint,Int64,Ptr{TSMonitorLGCtx}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
    return err
end

function TSMonitorLGCtxDestroy(arg0::Type{Float32},arg1::Union{Ptr{TSMonitorLGCtx},StridedArray{TSMonitorLGCtx},Ptr{TSMonitorLGCtx},Ref{TSMonitorLGCtx}})
    err = ccall((:TSMonitorLGCtxDestroy,petscRealSingle),PetscErrorCode,(Ptr{TSMonitorLGCtx},),arg1)
    return err
end

function TSMonitorLGTimeStep(arg1::TS,arg2::Integer,arg3::Float32,arg4::Vec{Float32},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSMonitorLGTimeStep,petscRealSingle),PetscErrorCode,(TS,Int64,Float32,Vec{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSMonitorLGSolution(arg1::TS,arg2::Integer,arg3::Float32,arg4::Vec{Float32},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSMonitorLGSolution,petscRealSingle),PetscErrorCode,(TS,Int64,Float32,Vec{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSMonitorLGSetVariableNames(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:TSMonitorLGSetVariableNames,petscRealSingle),PetscErrorCode,(TS,Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function TSMonitorLGGetVariableNames(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}})
    err = ccall((:TSMonitorLGGetVariableNames,petscRealSingle),PetscErrorCode,(TS,Ptr{Ptr{Ptr{UInt8}}}),arg1,arg2)
    return err
end

function TSMonitorLGCtxSetVariableNames(arg0::Type{Float32},arg1::TSMonitorLGCtx,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:TSMonitorLGCtxSetVariableNames,petscRealSingle),PetscErrorCode,(TSMonitorLGCtx,Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function TSMonitorLGSetDisplayVariables(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:TSMonitorLGSetDisplayVariables,petscRealSingle),PetscErrorCode,(TS,Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function TSMonitorLGCtxSetDisplayVariables(arg0::Type{Float32},arg1::TSMonitorLGCtx,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:TSMonitorLGCtxSetDisplayVariables,petscRealSingle),PetscErrorCode,(TSMonitorLGCtx,Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function TSMonitorLGSetTransform(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSMonitorLGSetTransform,petscRealSingle),PetscErrorCode,(TS,Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function TSMonitorLGCtxSetTransform(arg0::Type{Float32},arg1::TSMonitorLGCtx,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSMonitorLGCtxSetTransform,petscRealSingle),PetscErrorCode,(TSMonitorLGCtx,Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function TSMonitorLGError(arg1::TS,arg2::Integer,arg3::Float32,arg4::Vec{Float32},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSMonitorLGError,petscRealSingle),PetscErrorCode,(TS,Int64,Float32,Vec{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSMonitorLGSNESIterations(arg1::TS,arg2::Integer,arg3::Float32,arg4::Vec{Float32},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSMonitorLGSNESIterations,petscRealSingle),PetscErrorCode,(TS,Int64,Float32,Vec{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSMonitorLGKSPIterations(arg1::TS,arg2::Integer,arg3::Float32,arg4::Vec{Float32},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSMonitorLGKSPIterations,petscRealSingle),PetscErrorCode,(TS,Int64,Float32,Vec{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSMonitorEnvelopeCtxCreate(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{TSMonitorEnvelopeCtx},StridedArray{TSMonitorEnvelopeCtx},Ptr{TSMonitorEnvelopeCtx},Ref{TSMonitorEnvelopeCtx}})
    err = ccall((:TSMonitorEnvelopeCtxCreate,petscRealSingle),PetscErrorCode,(TS,Ptr{TSMonitorEnvelopeCtx}),arg1,arg2)
    return err
end

function TSMonitorEnvelope(arg1::TS,arg2::Integer,arg3::Float32,arg4::Vec{Float32},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSMonitorEnvelope,petscRealSingle),PetscErrorCode,(TS,Int64,Float32,Vec{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSMonitorEnvelopeGetBounds(arg1::TS,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:TSMonitorEnvelopeGetBounds,petscRealSingle),PetscErrorCode,(TS,Ptr{Vec{Float32}},Ptr{Vec{Float32}}),arg1,arg2,arg3)
    return err
end

function TSMonitorEnvelopeCtxDestroy(arg0::Type{Float32},arg1::Union{Ptr{TSMonitorEnvelopeCtx},StridedArray{TSMonitorEnvelopeCtx},Ptr{TSMonitorEnvelopeCtx},Ref{TSMonitorEnvelopeCtx}})
    err = ccall((:TSMonitorEnvelopeCtxDestroy,petscRealSingle),PetscErrorCode,(Ptr{TSMonitorEnvelopeCtx},),arg1)
    return err
end

function TSMonitorSPEigCtxCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Integer,arg9::Union{Ptr{TSMonitorSPEigCtx},StridedArray{TSMonitorSPEigCtx},Ptr{TSMonitorSPEigCtx},Ref{TSMonitorSPEigCtx}})
    err = ccall((:TSMonitorSPEigCtxCreate,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Cstring,Cint,Cint,Cint,Cint,Int64,Ptr{TSMonitorSPEigCtx}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
    return err
end

function TSMonitorSPEigCtxDestroy(arg0::Type{Float32},arg1::Union{Ptr{TSMonitorSPEigCtx},StridedArray{TSMonitorSPEigCtx},Ptr{TSMonitorSPEigCtx},Ref{TSMonitorSPEigCtx}})
    err = ccall((:TSMonitorSPEigCtxDestroy,petscRealSingle),PetscErrorCode,(Ptr{TSMonitorSPEigCtx},),arg1)
    return err
end

function TSMonitorSPEig(arg1::TS,arg2::Integer,arg3::Float32,arg4::Vec{Float32},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSMonitorSPEig,petscRealSingle),PetscErrorCode,(TS,Int64,Float32,Vec{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSSetEventMonitor(arg0::Type{Float32},arg1::TS,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg7::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSSetEventMonitor,petscRealSingle),PetscErrorCode,(TS,Int64,Ptr{Int64},Ptr{PetscBool},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function TSSetEventTolerances(arg0::Type{Float32},arg1::TS,arg2::Float32,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:TSSetEventTolerances,petscRealSingle),PetscErrorCode,(TS,Float32,Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function TSSSPSetType(arg0::Type{Float32},arg1::TS,arg2::TSSSPType)
    err = ccall((:TSSSPSetType,petscRealSingle),PetscErrorCode,(TS,Cstring),arg1,arg2)
    return err
end

function TSSSPGetType(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{TSSSPType},StridedArray{TSSSPType},Ptr{TSSSPType},Ref{TSSSPType}})
    (arg2_,tmp) = symbol_get_before(arg2)
    err = ccall((:TSSSPGetType,petscRealSingle),PetscErrorCode,(TS,Ptr{Ptr{UInt8}}),arg1,arg2_)
    symbol_get_after(arg2_,arg2)
    return err
end

function TSSSPSetNumStages(arg0::Type{Float32},arg1::TS,arg2::Integer)
    err = ccall((:TSSSPSetNumStages,petscRealSingle),PetscErrorCode,(TS,Int64),arg1,arg2)
    return err
end

function TSSSPGetNumStages(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:TSSSPGetNumStages,petscRealSingle),PetscErrorCode,(TS,Ptr{Int64}),arg1,arg2)
    return err
end

function TSSSPFinalizePackage(arg0::Type{Float32})
    err = ccall((:TSSSPFinalizePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function TSSSPInitializePackage(arg0::Type{Float32})
    err = ccall((:TSSSPInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function TSGetAdapt(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{TSAdapt},StridedArray{TSAdapt},Ptr{TSAdapt},Ref{TSAdapt}})
    err = ccall((:TSGetAdapt,petscRealSingle),PetscErrorCode,(TS,Ptr{TSAdapt}),arg1,arg2)
    return err
end

function TSAdaptRegister(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSAdaptRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function TSAdaptInitializePackage(arg0::Type{Float32})
    err = ccall((:TSAdaptInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function TSAdaptFinalizePackage(arg0::Type{Float32})
    err = ccall((:TSAdaptFinalizePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function TSAdaptCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{TSAdapt},StridedArray{TSAdapt},Ptr{TSAdapt},Ref{TSAdapt}})
    err = ccall((:TSAdaptCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{TSAdapt}),arg1,arg2)
    return err
end

function TSAdaptSetType(arg0::Type{Float32},arg1::TSAdapt,arg2::TSAdaptType)
    err = ccall((:TSAdaptSetType,petscRealSingle),PetscErrorCode,(TSAdapt,Cstring),arg1,arg2)
    return err
end

function TSAdaptSetOptionsPrefix(arg0::Type{Float32},arg1::TSAdapt,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:TSAdaptSetOptionsPrefix,petscRealSingle),PetscErrorCode,(TSAdapt,Cstring),arg1,arg2)
    return err
end

function TSAdaptCandidatesClear(arg0::Type{Float32},arg1::TSAdapt)
    err = ccall((:TSAdaptCandidatesClear,petscRealSingle),PetscErrorCode,(TSAdapt,),arg1)
    return err
end

function TSAdaptCandidateAdd(arg0::Type{Float32},arg1::TSAdapt,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer,arg4::Integer,arg5::Float32,arg6::Float32,arg7::PetscBool)
    err = ccall((:TSAdaptCandidateAdd,petscRealSingle),PetscErrorCode,(TSAdapt,Cstring,Int64,Int64,Float32,Float32,PetscBool),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function TSAdaptCandidatesGet(arg0::Type{Float32},arg1::TSAdapt,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg5::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg6::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:TSAdaptCandidatesGet,petscRealSingle),PetscErrorCode,(TSAdapt,Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}},Ptr{Ptr{Float32}},Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function TSAdaptChoose(arg0::Type{Float32},arg1::TSAdapt,arg2::TS,arg3::Float32,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:TSAdaptChoose,petscRealSingle),PetscErrorCode,(TSAdapt,TS,Float32,Ptr{Int64},Ptr{Float32},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function TSAdaptCheckStage(arg0::Type{Float32},arg1::TSAdapt,arg2::TS,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:TSAdaptCheckStage,petscRealSingle),PetscErrorCode,(TSAdapt,TS,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function TSAdaptView(arg1::TSAdapt,arg2::PetscViewer{Float32})
    err = ccall((:TSAdaptView,petscRealSingle),PetscErrorCode,(TSAdapt,PetscViewer{Float32}),arg1,arg2)
    return err
end

function TSAdaptLoad(arg1::TSAdapt,arg2::PetscViewer{Float32})
    err = ccall((:TSAdaptLoad,petscRealSingle),PetscErrorCode,(TSAdapt,PetscViewer{Float32}),arg1,arg2)
    return err
end

#= skipping function with undefined symbols: 
 function TSAdaptSetFromOptions(arg0::Type{Float32},arg1::Union{Ptr{PetscOptions},StridedArray{PetscOptions},Ptr{PetscOptions},Ref{PetscOptions}},arg2::TSAdapt)
    ccall((:TSAdaptSetFromOptions,petscRealSingle),PetscErrorCode,(Ptr{PetscOptions},TSAdapt),arg1,arg2)
end 
=#
function TSAdaptReset(arg0::Type{Float32},arg1::TSAdapt)
    err = ccall((:TSAdaptReset,petscRealSingle),PetscErrorCode,(TSAdapt,),arg1)
    return err
end

function TSAdaptDestroy(arg0::Type{Float32},arg1::Union{Ptr{TSAdapt},StridedArray{TSAdapt},Ptr{TSAdapt},Ref{TSAdapt}})
    err = ccall((:TSAdaptDestroy,petscRealSingle),PetscErrorCode,(Ptr{TSAdapt},),arg1)
    return err
end

function TSAdaptSetMonitor(arg0::Type{Float32},arg1::TSAdapt,arg2::PetscBool)
    err = ccall((:TSAdaptSetMonitor,petscRealSingle),PetscErrorCode,(TSAdapt,PetscBool),arg1,arg2)
    return err
end

function TSAdaptSetStepLimits(arg0::Type{Float32},arg1::TSAdapt,arg2::Float32,arg3::Float32)
    err = ccall((:TSAdaptSetStepLimits,petscRealSingle),PetscErrorCode,(TSAdapt,Float32,Float32),arg1,arg2,arg3)
    return err
end

function TSAdaptSetCheckStage(arg0::Type{Float32},arg1::TSAdapt,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSAdaptSetCheckStage,petscRealSingle),PetscErrorCode,(TSAdapt,Ptr{Void}),arg1,arg2)
    return err
end

function TSGLAdaptRegister(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSGLAdaptRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function TSGLAdaptInitializePackage(arg0::Type{Float32})
    err = ccall((:TSGLAdaptInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function TSGLAdaptFinalizePackage(arg0::Type{Float32})
    err = ccall((:TSGLAdaptFinalizePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function TSGLAdaptCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{TSGLAdapt},StridedArray{TSGLAdapt},Ptr{TSGLAdapt},Ref{TSGLAdapt}})
    err = ccall((:TSGLAdaptCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{TSGLAdapt}),arg1,arg2)
    return err
end

function TSGLAdaptSetType(arg0::Type{Float32},arg1::TSGLAdapt,arg2::TSGLAdaptType)
    err = ccall((:TSGLAdaptSetType,petscRealSingle),PetscErrorCode,(TSGLAdapt,Cstring),arg1,arg2)
    return err
end

function TSGLAdaptSetOptionsPrefix(arg0::Type{Float32},arg1::TSGLAdapt,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:TSGLAdaptSetOptionsPrefix,petscRealSingle),PetscErrorCode,(TSGLAdapt,Cstring),arg1,arg2)
    return err
end

function TSGLAdaptChoose(arg0::Type{Float32},arg1::TSGLAdapt,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::Integer,arg7::Float32,arg8::Float32,arg9::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg10::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg11::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:TSGLAdaptChoose,petscRealSingle),PetscErrorCode,(TSGLAdapt,Int64,Ptr{Int64},Ptr{Float32},Ptr{Float32},Int64,Float32,Float32,Ptr{Int64},Ptr{Float32},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11)
    return err
end

function TSGLAdaptView(arg1::TSGLAdapt,arg2::PetscViewer{Float32})
    err = ccall((:TSGLAdaptView,petscRealSingle),PetscErrorCode,(TSGLAdapt,PetscViewer{Float32}),arg1,arg2)
    return err
end

#= skipping function with undefined symbols: 
 function TSGLAdaptSetFromOptions(arg0::Type{Float32},arg1::Union{Ptr{PetscOptions},StridedArray{PetscOptions},Ptr{PetscOptions},Ref{PetscOptions}},arg2::TSGLAdapt)
    ccall((:TSGLAdaptSetFromOptions,petscRealSingle),PetscErrorCode,(Ptr{PetscOptions},TSGLAdapt),arg1,arg2)
end 
=#
function TSGLAdaptDestroy(arg0::Type{Float32},arg1::Union{Ptr{TSGLAdapt},StridedArray{TSGLAdapt},Ptr{TSGLAdapt},Ref{TSGLAdapt}})
    err = ccall((:TSGLAdaptDestroy,petscRealSingle),PetscErrorCode,(Ptr{TSGLAdapt},),arg1)
    return err
end

function TSGLAcceptRegister(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::TSGLAcceptFunction)
    err = ccall((:TSGLAcceptRegister,petscRealSingle),PetscErrorCode,(Cstring,TSGLAcceptFunction),arg1,arg2)
    return err
end

function TSGLRegister(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSGLRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function TSGLInitializePackage(arg0::Type{Float32})
    err = ccall((:TSGLInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function TSGLFinalizePackage(arg0::Type{Float32})
    err = ccall((:TSGLFinalizePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function TSGLSetType(arg0::Type{Float32},arg1::TS,arg2::TSGLType)
    err = ccall((:TSGLSetType,petscRealSingle),PetscErrorCode,(TS,Cstring),arg1,arg2)
    return err
end

function TSGLGetAdapt(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{TSGLAdapt},StridedArray{TSGLAdapt},Ptr{TSGLAdapt},Ref{TSGLAdapt}})
    err = ccall((:TSGLGetAdapt,petscRealSingle),PetscErrorCode,(TS,Ptr{TSGLAdapt}),arg1,arg2)
    return err
end

function TSGLSetAcceptType(arg0::Type{Float32},arg1::TS,arg2::TSGLAcceptType)
    err = ccall((:TSGLSetAcceptType,petscRealSingle),PetscErrorCode,(TS,Cstring),arg1,arg2)
    return err
end

function TSEIMEXSetMaxRows(arg0::Type{Float32},ts::TS,arg1::Integer)
    err = ccall((:TSEIMEXSetMaxRows,petscRealSingle),PetscErrorCode,(TS,Int64),ts,arg1)
    return err
end

function TSEIMEXSetRowCol(arg0::Type{Float32},ts::TS,arg1::Integer,arg2::Integer)
    err = ccall((:TSEIMEXSetRowCol,petscRealSingle),PetscErrorCode,(TS,Int64,Int64),ts,arg1,arg2)
    return err
end

function TSEIMEXSetOrdAdapt(arg0::Type{Float32},arg1::TS,arg2::PetscBool)
    err = ccall((:TSEIMEXSetOrdAdapt,petscRealSingle),PetscErrorCode,(TS,PetscBool),arg1,arg2)
    return err
end

function TSRKGetType(arg0::Type{Float32},ts::TS,arg1::Union{Ptr{TSRKType},StridedArray{TSRKType},Ptr{TSRKType},Ref{TSRKType}})
    (arg1_,tmp) = symbol_get_before(arg1)
    err = ccall((:TSRKGetType,petscRealSingle),PetscErrorCode,(TS,Ptr{Ptr{UInt8}}),ts,arg1_)
    symbol_get_after(arg1_,arg1)
    return err
end

function TSRKSetType(arg0::Type{Float32},ts::TS,arg1::TSRKType)
    err = ccall((:TSRKSetType,petscRealSingle),PetscErrorCode,(TS,Cstring),ts,arg1)
    return err
end

function TSRKSetFullyImplicit(arg0::Type{Float32},arg1::TS,arg2::PetscBool)
    err = ccall((:TSRKSetFullyImplicit,petscRealSingle),PetscErrorCode,(TS,PetscBool),arg1,arg2)
    return err
end

function TSRKRegister(arg0::Type{Float32},arg1::TSRKType,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg8::Integer,arg9::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:TSRKRegister,petscRealSingle),PetscErrorCode,(Cstring,Int64,Int64,Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Float32},Int64,Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
    return err
end

function TSRKFinalizePackage(arg0::Type{Float32})
    err = ccall((:TSRKFinalizePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function TSRKInitializePackage(arg0::Type{Float32})
    err = ccall((:TSRKInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function TSRKRegisterDestroy(arg0::Type{Float32})
    err = ccall((:TSRKRegisterDestroy,petscRealSingle),PetscErrorCode,())
    return err
end

function TSARKIMEXGetType(arg0::Type{Float32},ts::TS,arg1::Union{Ptr{TSARKIMEXType},StridedArray{TSARKIMEXType},Ptr{TSARKIMEXType},Ref{TSARKIMEXType}})
    (arg1_,tmp) = symbol_get_before(arg1)
    err = ccall((:TSARKIMEXGetType,petscRealSingle),PetscErrorCode,(TS,Ptr{Ptr{UInt8}}),ts,arg1_)
    symbol_get_after(arg1_,arg1)
    return err
end

function TSARKIMEXSetType(arg0::Type{Float32},ts::TS,arg1::TSARKIMEXType)
    err = ccall((:TSARKIMEXSetType,petscRealSingle),PetscErrorCode,(TS,Cstring),ts,arg1)
    return err
end

function TSARKIMEXSetFullyImplicit(arg0::Type{Float32},arg1::TS,arg2::PetscBool)
    err = ccall((:TSARKIMEXSetFullyImplicit,petscRealSingle),PetscErrorCode,(TS,PetscBool),arg1,arg2)
    return err
end

function TSARKIMEXRegister(arg0::Type{Float32},arg1::TSARKIMEXType,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg8::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg9::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg10::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg11::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg12::Integer,arg13::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg14::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:TSARKIMEXRegister,petscRealSingle),PetscErrorCode,(Cstring,Int64,Int64,Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Float32},Int64,Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14)
    return err
end

function TSARKIMEXFinalizePackage(arg0::Type{Float32})
    err = ccall((:TSARKIMEXFinalizePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function TSARKIMEXInitializePackage(arg0::Type{Float32})
    err = ccall((:TSARKIMEXInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function TSARKIMEXRegisterDestroy(arg0::Type{Float32})
    err = ccall((:TSARKIMEXRegisterDestroy,petscRealSingle),PetscErrorCode,())
    return err
end

function TSRosWGetType(arg0::Type{Float32},ts::TS,arg1::Union{Ptr{TSRosWType},StridedArray{TSRosWType},Ptr{TSRosWType},Ref{TSRosWType}})
    (arg1_,tmp) = symbol_get_before(arg1)
    err = ccall((:TSRosWGetType,petscRealSingle),PetscErrorCode,(TS,Ptr{Ptr{UInt8}}),ts,arg1_)
    symbol_get_after(arg1_,arg1)
    return err
end

function TSRosWSetType(arg0::Type{Float32},ts::TS,arg1::TSRosWType)
    err = ccall((:TSRosWSetType,petscRealSingle),PetscErrorCode,(TS,Cstring),ts,arg1)
    return err
end

function TSRosWSetRecomputeJacobian(arg0::Type{Float32},arg1::TS,arg2::PetscBool)
    err = ccall((:TSRosWSetRecomputeJacobian,petscRealSingle),PetscErrorCode,(TS,PetscBool),arg1,arg2)
    return err
end

function TSRosWRegister(arg0::Type{Float32},arg1::TSRosWType,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg8::Integer,arg9::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:TSRosWRegister,petscRealSingle),PetscErrorCode,(Cstring,Int64,Int64,Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Float32},Int64,Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
    return err
end

function TSRosWRegisterRos4(arg0::Type{Float32},arg1::TSRosWType,arg2::Float32,arg3::Float32,arg4::Float32,arg5::Float32,arg6::Float32)
    err = ccall((:TSRosWRegisterRos4,petscRealSingle),PetscErrorCode,(Cstring,Float32,Float32,Float32,Float32,Float32),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function TSRosWFinalizePackage(arg0::Type{Float32})
    err = ccall((:TSRosWFinalizePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function TSRosWInitializePackage(arg0::Type{Float32})
    err = ccall((:TSRosWInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function TSRosWRegisterDestroy(arg0::Type{Float32})
    err = ccall((:TSRosWRegisterDestroy,petscRealSingle),PetscErrorCode,())
    return err
end

function TSThetaSetTheta(arg0::Type{Float32},arg1::TS,arg2::Float32)
    err = ccall((:TSThetaSetTheta,petscRealSingle),PetscErrorCode,(TS,Float32),arg1,arg2)
    return err
end

function TSThetaGetTheta(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:TSThetaGetTheta,petscRealSingle),PetscErrorCode,(TS,Ptr{Float32}),arg1,arg2)
    return err
end

function TSThetaGetEndpoint(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:TSThetaGetEndpoint,petscRealSingle),PetscErrorCode,(TS,Ptr{PetscBool}),arg1,arg2)
    return err
end

function TSThetaSetEndpoint(arg0::Type{Float32},arg1::TS,arg2::PetscBool)
    err = ccall((:TSThetaSetEndpoint,petscRealSingle),PetscErrorCode,(TS,PetscBool),arg1,arg2)
    return err
end

function TSAlphaSetAdapt(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSAlphaSetAdapt,petscRealSingle),PetscErrorCode,(TS,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function TSAlphaAdaptDefault(arg1::TS,arg2::Float32,arg3::Vec{Float32},arg4::Vec{Float32},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg7::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSAlphaAdaptDefault,petscRealSingle),PetscErrorCode,(TS,Float32,Vec{Float32},Vec{Float32},Ptr{Float32},Ptr{PetscBool},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function TSAlphaSetRadius(arg0::Type{Float32},arg1::TS,arg2::Float32)
    err = ccall((:TSAlphaSetRadius,petscRealSingle),PetscErrorCode,(TS,Float32),arg1,arg2)
    return err
end

function TSAlphaSetParams(arg0::Type{Float32},arg1::TS,arg2::Float32,arg3::Float32,arg4::Float32)
    err = ccall((:TSAlphaSetParams,petscRealSingle),PetscErrorCode,(TS,Float32,Float32,Float32),arg1,arg2,arg3,arg4)
    return err
end

function TSAlphaGetParams(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:TSAlphaGetParams,petscRealSingle),PetscErrorCode,(TS,Ptr{Float32},Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function TSSetDM(arg0::Type{Float32},arg1::TS,arg2::DM)
    err = ccall((:TSSetDM,petscRealSingle),PetscErrorCode,(TS,DM),arg1,arg2)
    return err
end

function TSGetDM(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    err = ccall((:TSGetDM,petscRealSingle),PetscErrorCode,(TS,Ptr{DM}),arg1,arg2)
    return err
end

function SNESTSFormFunction(arg1::SNES,arg2::Vec{Float32},arg3::Vec{Float32},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESTSFormFunction,petscRealSingle),PetscErrorCode,(SNES,Vec{Float32},Vec{Float32},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function SNESTSFormJacobian(arg1::SNES,arg2::Vec{Float32},arg3::Mat{Float32},arg4::Mat{Float32},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESTSFormJacobian,petscRealSingle),PetscErrorCode,(SNES,Vec{Float32},Mat{Float32},Mat{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function VecFischer(arg1::Vec{Float32},arg2::Vec{Float32},arg3::Vec{Float32},arg4::Vec{Float32},arg5::Vec{Float32})
    err = ccall((:VecFischer,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32},Vec{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function VecSFischer(arg1::Vec{Float32},arg2::Vec{Float32},arg3::Vec{Float32},arg4::Vec{Float32},arg5::Float32,arg6::Vec{Float32})
    err = ccall((:VecSFischer,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32},Vec{Float32},Vec{Float32},Float32,Vec{Float32}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatDFischer(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Vec{Float32},arg4::Vec{Float32},arg5::Vec{Float32},arg6::Vec{Float32},arg7::Vec{Float32},arg8::Vec{Float32},arg9::Vec{Float32})
    err = ccall((:MatDFischer,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Vec{Float32},Vec{Float32},Vec{Float32},Vec{Float32},Vec{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
    return err
end

function MatDSFischer(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Vec{Float32},arg4::Vec{Float32},arg5::Vec{Float32},arg6::Float32,arg7::Vec{Float32},arg8::Vec{Float32},arg9::Vec{Float32},arg10::Vec{Float32},arg11::Vec{Float32})
    err = ccall((:MatDSFischer,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Vec{Float32},Vec{Float32},Vec{Float32},Float32,Vec{Float32},Vec{Float32},Vec{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11)
    return err
end

function TaoInitializePackage(arg0::Type{Float32})
    err = ccall((:TaoInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function TaoFinalizePackage(arg0::Type{Float32})
    err = ccall((:TaoFinalizePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function TaoCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{Tao},StridedArray{Tao},Ptr{Tao},Ref{Tao}})
    err = ccall((:TaoCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{Tao}),arg1,arg2)
    return err
end

function TaoSetFromOptions(arg0::Type{Float32},arg1::Tao)
    err = ccall((:TaoSetFromOptions,petscRealSingle),PetscErrorCode,(Tao,),arg1)
    return err
end

function TaoSetUp(arg0::Type{Float32},arg1::Tao)
    err = ccall((:TaoSetUp,petscRealSingle),PetscErrorCode,(Tao,),arg1)
    return err
end

function TaoSetType(arg0::Type{Float32},arg1::Tao,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:TaoSetType,petscRealSingle),PetscErrorCode,(Tao,Cstring),arg1,arg2)
    return err
end

function TaoGetType(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:TaoGetType,petscRealSingle),PetscErrorCode,(Tao,Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function TaoSetApplicationContext(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoSetApplicationContext,petscRealSingle),PetscErrorCode,(Tao,Ptr{Void}),arg1,arg2)
    return err
end

function TaoGetApplicationContext(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoGetApplicationContext,petscRealSingle),PetscErrorCode,(Tao,Ptr{Void}),arg1,arg2)
    return err
end

function TaoDestroy(arg0::Type{Float32},arg1::Union{Ptr{Tao},StridedArray{Tao},Ptr{Tao},Ref{Tao}})
    err = ccall((:TaoDestroy,petscRealSingle),PetscErrorCode,(Ptr{Tao},),arg1)
    return err
end

function TaoSetOptionsPrefix(arg0::Type{Float32},arg1::Tao,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:TaoSetOptionsPrefix,petscRealSingle),PetscErrorCode,(Tao,Cstring),arg1,arg2)
    return err
end

function TaoView(arg1::Tao,arg2::PetscViewer{Float32})
    err = ccall((:TaoView,petscRealSingle),PetscErrorCode,(Tao,PetscViewer{Float32}),arg1,arg2)
    return err
end

function TaoViewFromOptions(arg0::Type{Float32},A::Tao,obj::PetscObject,name::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:TaoViewFromOptions,petscRealSingle),PetscErrorCode,(Tao,PetscObject,Cstring),A,obj,name)
    return err
end

function TaoSolve(arg0::Type{Float32},arg1::Tao)
    err = ccall((:TaoSolve,petscRealSingle),PetscErrorCode,(Tao,),arg1)
    return err
end

function TaoRegister(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function TaoRegisterDestroy(arg0::Type{Float32})
    err = ccall((:TaoRegisterDestroy,petscRealSingle),PetscErrorCode,())
    return err
end

function TaoGetConvergedReason(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{TaoConvergedReason},StridedArray{TaoConvergedReason},Ptr{TaoConvergedReason},Ref{TaoConvergedReason}})
    err = ccall((:TaoGetConvergedReason,petscRealSingle),PetscErrorCode,(Tao,Ptr{TaoConvergedReason}),arg1,arg2)
    return err
end

function TaoGetSolutionStatus(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::Union{Ptr{TaoConvergedReason},StridedArray{TaoConvergedReason},Ptr{TaoConvergedReason},Ref{TaoConvergedReason}})
    err = ccall((:TaoGetSolutionStatus,petscRealSingle),PetscErrorCode,(Tao,Ptr{Int64},Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{TaoConvergedReason}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function TaoSetConvergedReason(arg0::Type{Float32},arg1::Tao,arg2::TaoConvergedReason)
    err = ccall((:TaoSetConvergedReason,petscRealSingle),PetscErrorCode,(Tao,TaoConvergedReason),arg1,arg2)
    return err
end

function TaoSetInitialVector(arg1::Tao,arg2::Vec{Float32})
    err = ccall((:TaoSetInitialVector,petscRealSingle),PetscErrorCode,(Tao,Vec{Float32}),arg1,arg2)
    return err
end

function TaoGetSolutionVector(arg1::Tao,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:TaoGetSolutionVector,petscRealSingle),PetscErrorCode,(Tao,Ptr{Vec{Float32}}),arg1,arg2)
    return err
end

function TaoGetGradientVector(arg1::Tao,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:TaoGetGradientVector,petscRealSingle),PetscErrorCode,(Tao,Ptr{Vec{Float32}}),arg1,arg2)
    return err
end

function TaoSetObjectiveRoutine(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoSetObjectiveRoutine,petscRealSingle),PetscErrorCode,(Tao,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function TaoSetGradientRoutine(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoSetGradientRoutine,petscRealSingle),PetscErrorCode,(Tao,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function TaoSetObjectiveAndGradientRoutine(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoSetObjectiveAndGradientRoutine,petscRealSingle),PetscErrorCode,(Tao,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function TaoSetHessianRoutine(arg1::Tao,arg2::Mat{Float32},arg3::Mat{Float32},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoSetHessianRoutine,petscRealSingle),PetscErrorCode,(Tao,Mat{Float32},Mat{Float32},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TaoSetSeparableObjectiveRoutine(arg1::Tao,arg2::Vec{Float32},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoSetSeparableObjectiveRoutine,petscRealSingle),PetscErrorCode,(Tao,Vec{Float32},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function TaoSetConstraintsRoutine(arg1::Tao,arg2::Vec{Float32},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoSetConstraintsRoutine,petscRealSingle),PetscErrorCode,(Tao,Vec{Float32},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function TaoSetInequalityConstraintsRoutine(arg1::Tao,arg2::Vec{Float32},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoSetInequalityConstraintsRoutine,petscRealSingle),PetscErrorCode,(Tao,Vec{Float32},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function TaoSetEqualityConstraintsRoutine(arg1::Tao,arg2::Vec{Float32},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoSetEqualityConstraintsRoutine,petscRealSingle),PetscErrorCode,(Tao,Vec{Float32},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function TaoSetJacobianRoutine(arg1::Tao,arg2::Mat{Float32},arg3::Mat{Float32},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoSetJacobianRoutine,petscRealSingle),PetscErrorCode,(Tao,Mat{Float32},Mat{Float32},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TaoSetJacobianStateRoutine(arg1::Tao,arg2::Mat{Float32},arg3::Mat{Float32},arg4::Mat{Float32},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoSetJacobianStateRoutine,petscRealSingle),PetscErrorCode,(Tao,Mat{Float32},Mat{Float32},Mat{Float32},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function TaoSetJacobianDesignRoutine(arg1::Tao,arg2::Mat{Float32},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoSetJacobianDesignRoutine,petscRealSingle),PetscErrorCode,(Tao,Mat{Float32},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function TaoSetJacobianInequalityRoutine(arg1::Tao,arg2::Mat{Float32},arg3::Mat{Float32},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoSetJacobianInequalityRoutine,petscRealSingle),PetscErrorCode,(Tao,Mat{Float32},Mat{Float32},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TaoSetJacobianEqualityRoutine(arg1::Tao,arg2::Mat{Float32},arg3::Mat{Float32},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoSetJacobianEqualityRoutine,petscRealSingle),PetscErrorCode,(Tao,Mat{Float32},Mat{Float32},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TaoSetStateDesignIS(arg1::Tao,arg2::IS{Float32},arg3::IS{Float32})
    err = ccall((:TaoSetStateDesignIS,petscRealSingle),PetscErrorCode,(Tao,IS{Float32},IS{Float32}),arg1,arg2,arg3)
    return err
end

function TaoComputeObjective(arg1::Tao,arg2::Vec{Float32},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:TaoComputeObjective,petscRealSingle),PetscErrorCode,(Tao,Vec{Float32},Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function TaoComputeSeparableObjective(arg1::Tao,arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:TaoComputeSeparableObjective,petscRealSingle),PetscErrorCode,(Tao,Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function TaoComputeGradient(arg1::Tao,arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:TaoComputeGradient,petscRealSingle),PetscErrorCode,(Tao,Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function TaoComputeObjectiveAndGradient(arg1::Tao,arg2::Vec{Float32},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Vec{Float32})
    err = ccall((:TaoComputeObjectiveAndGradient,petscRealSingle),PetscErrorCode,(Tao,Vec{Float32},Ptr{Float32},Vec{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function TaoComputeConstraints(arg1::Tao,arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:TaoComputeConstraints,petscRealSingle),PetscErrorCode,(Tao,Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function TaoComputeInequalityConstraints(arg1::Tao,arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:TaoComputeInequalityConstraints,petscRealSingle),PetscErrorCode,(Tao,Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function TaoComputeEqualityConstraints(arg1::Tao,arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:TaoComputeEqualityConstraints,petscRealSingle),PetscErrorCode,(Tao,Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function TaoDefaultComputeGradient(arg1::Tao,arg2::Vec{Float32},arg3::Vec{Float32},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoDefaultComputeGradient,petscRealSingle),PetscErrorCode,(Tao,Vec{Float32},Vec{Float32},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function TaoIsObjectiveDefined(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:TaoIsObjectiveDefined,petscRealSingle),PetscErrorCode,(Tao,Ptr{PetscBool}),arg1,arg2)
    return err
end

function TaoIsGradientDefined(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:TaoIsGradientDefined,petscRealSingle),PetscErrorCode,(Tao,Ptr{PetscBool}),arg1,arg2)
    return err
end

function TaoIsObjectiveAndGradientDefined(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:TaoIsObjectiveAndGradientDefined,petscRealSingle),PetscErrorCode,(Tao,Ptr{PetscBool}),arg1,arg2)
    return err
end

function TaoComputeHessian(arg1::Tao,arg2::Vec{Float32},arg3::Mat{Float32},arg4::Mat{Float32})
    err = ccall((:TaoComputeHessian,petscRealSingle),PetscErrorCode,(Tao,Vec{Float32},Mat{Float32},Mat{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function TaoComputeJacobian(arg1::Tao,arg2::Vec{Float32},arg3::Mat{Float32},arg4::Mat{Float32})
    err = ccall((:TaoComputeJacobian,petscRealSingle),PetscErrorCode,(Tao,Vec{Float32},Mat{Float32},Mat{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function TaoComputeJacobianState(arg1::Tao,arg2::Vec{Float32},arg3::Mat{Float32},arg4::Mat{Float32},arg5::Mat{Float32})
    err = ccall((:TaoComputeJacobianState,petscRealSingle),PetscErrorCode,(Tao,Vec{Float32},Mat{Float32},Mat{Float32},Mat{Float32}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TaoComputeJacobianEquality(arg1::Tao,arg2::Vec{Float32},arg3::Mat{Float32},arg4::Mat{Float32})
    err = ccall((:TaoComputeJacobianEquality,petscRealSingle),PetscErrorCode,(Tao,Vec{Float32},Mat{Float32},Mat{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function TaoComputeJacobianInequality(arg1::Tao,arg2::Vec{Float32},arg3::Mat{Float32},arg4::Mat{Float32})
    err = ccall((:TaoComputeJacobianInequality,petscRealSingle),PetscErrorCode,(Tao,Vec{Float32},Mat{Float32},Mat{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function TaoComputeJacobianDesign(arg1::Tao,arg2::Vec{Float32},arg3::Mat{Float32})
    err = ccall((:TaoComputeJacobianDesign,petscRealSingle),PetscErrorCode,(Tao,Vec{Float32},Mat{Float32}),arg1,arg2,arg3)
    return err
end

function TaoDefaultComputeHessian(arg1::Tao,arg2::Vec{Float32},arg3::Mat{Float32},arg4::Mat{Float32},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoDefaultComputeHessian,petscRealSingle),PetscErrorCode,(Tao,Vec{Float32},Mat{Float32},Mat{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TaoDefaultComputeHessianColor(arg1::Tao,arg2::Vec{Float32},arg3::Mat{Float32},arg4::Mat{Float32},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoDefaultComputeHessianColor,petscRealSingle),PetscErrorCode,(Tao,Vec{Float32},Mat{Float32},Mat{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TaoComputeDualVariables(arg1::Tao,arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:TaoComputeDualVariables,petscRealSingle),PetscErrorCode,(Tao,Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function TaoComputeDualVariables(arg1::Tao,arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:TaoComputeDualVariables,petscRealSingle),PetscErrorCode,(Tao,Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function TaoSetVariableBounds(arg1::Tao,arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:TaoSetVariableBounds,petscRealSingle),PetscErrorCode,(Tao,Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function TaoGetVariableBounds(arg1::Tao,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:TaoGetVariableBounds,petscRealSingle),PetscErrorCode,(Tao,Ptr{Vec{Float32}},Ptr{Vec{Float32}}),arg1,arg2,arg3)
    return err
end

function TaoGetDualVariables(arg1::Tao,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:TaoGetDualVariables,petscRealSingle),PetscErrorCode,(Tao,Ptr{Vec{Float32}},Ptr{Vec{Float32}}),arg1,arg2,arg3)
    return err
end

function TaoSetInequalityBounds(arg1::Tao,arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:TaoSetInequalityBounds,petscRealSingle),PetscErrorCode,(Tao,Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function TaoGetInequalityBounds(arg1::Tao,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:TaoGetInequalityBounds,petscRealSingle),PetscErrorCode,(Tao,Ptr{Vec{Float32}},Ptr{Vec{Float32}}),arg1,arg2,arg3)
    return err
end

function TaoSetVariableBoundsRoutine(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoSetVariableBoundsRoutine,petscRealSingle),PetscErrorCode,(Tao,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function TaoComputeVariableBounds(arg0::Type{Float32},arg1::Tao)
    err = ccall((:TaoComputeVariableBounds,petscRealSingle),PetscErrorCode,(Tao,),arg1)
    return err
end

function TaoGetTolerances(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:TaoGetTolerances,petscRealSingle),PetscErrorCode,(Tao,Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function TaoSetTolerances(arg0::Type{Float32},arg1::Tao,arg2::Float32,arg3::Float32,arg4::Float32,arg5::Float32,arg6::Float32)
    err = ccall((:TaoSetTolerances,petscRealSingle),PetscErrorCode,(Tao,Float32,Float32,Float32,Float32,Float32),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function TaoGetConstraintTolerances(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:TaoGetConstraintTolerances,petscRealSingle),PetscErrorCode,(Tao,Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function TaoSetConstraintTolerances(arg0::Type{Float32},arg1::Tao,arg2::Float32,arg3::Float32)
    err = ccall((:TaoSetConstraintTolerances,petscRealSingle),PetscErrorCode,(Tao,Float32,Float32),arg1,arg2,arg3)
    return err
end

function TaoSetFunctionLowerBound(arg0::Type{Float32},arg1::Tao,arg2::Float32)
    err = ccall((:TaoSetFunctionLowerBound,petscRealSingle),PetscErrorCode,(Tao,Float32),arg1,arg2)
    return err
end

function TaoSetInitialTrustRegionRadius(arg0::Type{Float32},arg1::Tao,arg2::Float32)
    err = ccall((:TaoSetInitialTrustRegionRadius,petscRealSingle),PetscErrorCode,(Tao,Float32),arg1,arg2)
    return err
end

function TaoSetMaximumIterations(arg0::Type{Float32},arg1::Tao,arg2::Integer)
    err = ccall((:TaoSetMaximumIterations,petscRealSingle),PetscErrorCode,(Tao,Int64),arg1,arg2)
    return err
end

function TaoSetMaximumFunctionEvaluations(arg0::Type{Float32},arg1::Tao,arg2::Integer)
    err = ccall((:TaoSetMaximumFunctionEvaluations,petscRealSingle),PetscErrorCode,(Tao,Int64),arg1,arg2)
    return err
end

function TaoGetFunctionLowerBound(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:TaoGetFunctionLowerBound,petscRealSingle),PetscErrorCode,(Tao,Ptr{Float32}),arg1,arg2)
    return err
end

function TaoGetInitialTrustRegionRadius(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:TaoGetInitialTrustRegionRadius,petscRealSingle),PetscErrorCode,(Tao,Ptr{Float32}),arg1,arg2)
    return err
end

function TaoGetCurrentTrustRegionRadius(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:TaoGetCurrentTrustRegionRadius,petscRealSingle),PetscErrorCode,(Tao,Ptr{Float32}),arg1,arg2)
    return err
end

function TaoGetMaximumIterations(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:TaoGetMaximumIterations,petscRealSingle),PetscErrorCode,(Tao,Ptr{Int64}),arg1,arg2)
    return err
end

function TaoGetCurrentFunctionEvaluations(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:TaoGetCurrentFunctionEvaluations,petscRealSingle),PetscErrorCode,(Tao,Ptr{Int64}),arg1,arg2)
    return err
end

function TaoGetMaximumFunctionEvaluations(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:TaoGetMaximumFunctionEvaluations,petscRealSingle),PetscErrorCode,(Tao,Ptr{Int64}),arg1,arg2)
    return err
end

function TaoGetIterationNumber(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:TaoGetIterationNumber,petscRealSingle),PetscErrorCode,(Tao,Ptr{Int64}),arg1,arg2)
    return err
end

function TaoSetIterationNumber(arg0::Type{Float32},arg1::Tao,arg2::Integer)
    err = ccall((:TaoSetIterationNumber,petscRealSingle),PetscErrorCode,(Tao,Int64),arg1,arg2)
    return err
end

function TaoGetTotalIterationNumber(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:TaoGetTotalIterationNumber,petscRealSingle),PetscErrorCode,(Tao,Ptr{Int64}),arg1,arg2)
    return err
end

function TaoSetTotalIterationNumber(arg0::Type{Float32},arg1::Tao,arg2::Integer)
    err = ccall((:TaoSetTotalIterationNumber,petscRealSingle),PetscErrorCode,(Tao,Int64),arg1,arg2)
    return err
end

function TaoSetOptionsPrefix(arg0::Type{Float32},arg1::Tao,p::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:TaoSetOptionsPrefix,petscRealSingle),PetscErrorCode,(Tao,Cstring),arg1,p)
    return err
end

function TaoAppendOptionsPrefix(arg0::Type{Float32},arg1::Tao,p::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:TaoAppendOptionsPrefix,petscRealSingle),PetscErrorCode,(Tao,Cstring),arg1,p)
    return err
end

function TaoGetOptionsPrefix(arg0::Type{Float32},arg1::Tao,p::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:TaoGetOptionsPrefix,petscRealSingle),PetscErrorCode,(Tao,Ptr{Ptr{UInt8}}),arg1,p)
    return err
end

function TaoResetStatistics(arg0::Type{Float32},arg1::Tao)
    err = ccall((:TaoResetStatistics,petscRealSingle),PetscErrorCode,(Tao,),arg1)
    return err
end

function TaoGetKSP(arg1::Tao,arg2::Union{Ptr{KSP{Float32}},StridedArray{KSP{Float32}},Ptr{KSP{Float32}},Ref{KSP{Float32}}})
    err = ccall((:TaoGetKSP,petscRealSingle),PetscErrorCode,(Tao,Ptr{KSP{Float32}}),arg1,arg2)
    return err
end

function TaoGetLinearSolveIterations(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:TaoGetLinearSolveIterations,petscRealSingle),PetscErrorCode,(Tao,Ptr{Int64}),arg1,arg2)
    return err
end

function TaoLineSearchCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{TaoLineSearch},StridedArray{TaoLineSearch},Ptr{TaoLineSearch},Ref{TaoLineSearch}})
    err = ccall((:TaoLineSearchCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{TaoLineSearch}),arg1,arg2)
    return err
end

function TaoLineSearchSetFromOptions(arg0::Type{Float32},arg1::TaoLineSearch)
    err = ccall((:TaoLineSearchSetFromOptions,petscRealSingle),PetscErrorCode,(TaoLineSearch,),arg1)
    return err
end

function TaoLineSearchSetUp(arg0::Type{Float32},arg1::TaoLineSearch)
    err = ccall((:TaoLineSearchSetUp,petscRealSingle),PetscErrorCode,(TaoLineSearch,),arg1)
    return err
end

function TaoLineSearchDestroy(arg0::Type{Float32},arg1::Union{Ptr{TaoLineSearch},StridedArray{TaoLineSearch},Ptr{TaoLineSearch},Ref{TaoLineSearch}})
    err = ccall((:TaoLineSearchDestroy,petscRealSingle),PetscErrorCode,(Ptr{TaoLineSearch},),arg1)
    return err
end

function TaoLineSearchView(arg1::TaoLineSearch,arg2::PetscViewer{Float32})
    err = ccall((:TaoLineSearchView,petscRealSingle),PetscErrorCode,(TaoLineSearch,PetscViewer{Float32}),arg1,arg2)
    return err
end

function TaoLineSearchViewFromOptions(arg0::Type{Float32},A::TaoLineSearch,obj::PetscObject,name::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:TaoLineSearchViewFromOptions,petscRealSingle),PetscErrorCode,(TaoLineSearch,PetscObject,Cstring),A,obj,name)
    return err
end

function TaoLineSearchSetOptionsPrefix(arg0::Type{Float32},arg1::TaoLineSearch,prefix::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:TaoLineSearchSetOptionsPrefix,petscRealSingle),PetscErrorCode,(TaoLineSearch,Cstring),arg1,prefix)
    return err
end

function TaoLineSearchReset(arg0::Type{Float32},arg1::TaoLineSearch)
    err = ccall((:TaoLineSearchReset,petscRealSingle),PetscErrorCode,(TaoLineSearch,),arg1)
    return err
end

function TaoLineSearchAppendOptionsPrefix(arg0::Type{Float32},arg1::TaoLineSearch,prefix::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:TaoLineSearchAppendOptionsPrefix,petscRealSingle),PetscErrorCode,(TaoLineSearch,Cstring),arg1,prefix)
    return err
end

function TaoLineSearchGetOptionsPrefix(arg0::Type{Float32},arg1::TaoLineSearch,prefix::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:TaoLineSearchGetOptionsPrefix,petscRealSingle),PetscErrorCode,(TaoLineSearch,Ptr{Ptr{UInt8}}),arg1,prefix)
    return err
end

function TaoLineSearchApply(arg1::TaoLineSearch,arg2::Vec{Float32},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Vec{Float32},arg5::Vec{Float32},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::Union{Ptr{TaoLineSearchConvergedReason},StridedArray{TaoLineSearchConvergedReason},Ptr{TaoLineSearchConvergedReason},Ref{TaoLineSearchConvergedReason}})
    err = ccall((:TaoLineSearchApply,petscRealSingle),PetscErrorCode,(TaoLineSearch,Vec{Float32},Ptr{Float32},Vec{Float32},Vec{Float32},Ptr{Float32},Ptr{TaoLineSearchConvergedReason}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function TaoLineSearchGetStepLength(arg0::Type{Float32},arg1::TaoLineSearch,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:TaoLineSearchGetStepLength,petscRealSingle),PetscErrorCode,(TaoLineSearch,Ptr{Float32}),arg1,arg2)
    return err
end

function TaoLineSearchGetStartingVector(arg1::TaoLineSearch,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:TaoLineSearchGetStartingVector,petscRealSingle),PetscErrorCode,(TaoLineSearch,Ptr{Vec{Float32}}),arg1,arg2)
    return err
end

function TaoLineSearchGetStepDirection(arg1::TaoLineSearch,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:TaoLineSearchGetStepDirection,petscRealSingle),PetscErrorCode,(TaoLineSearch,Ptr{Vec{Float32}}),arg1,arg2)
    return err
end

function TaoLineSearchSetInitialStepLength(arg0::Type{Float32},arg1::TaoLineSearch,arg2::Float32)
    err = ccall((:TaoLineSearchSetInitialStepLength,petscRealSingle),PetscErrorCode,(TaoLineSearch,Float32),arg1,arg2)
    return err
end

function TaoLineSearchGetSolution(arg1::TaoLineSearch,arg2::Vec{Float32},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Vec{Float32},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::Union{Ptr{TaoLineSearchConvergedReason},StridedArray{TaoLineSearchConvergedReason},Ptr{TaoLineSearchConvergedReason},Ref{TaoLineSearchConvergedReason}})
    err = ccall((:TaoLineSearchGetSolution,petscRealSingle),PetscErrorCode,(TaoLineSearch,Vec{Float32},Ptr{Float32},Vec{Float32},Ptr{Float32},Ptr{TaoLineSearchConvergedReason}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function TaoLineSearchGetFullStepObjective(arg0::Type{Float32},arg1::TaoLineSearch,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:TaoLineSearchGetFullStepObjective,petscRealSingle),PetscErrorCode,(TaoLineSearch,Ptr{Float32}),arg1,arg2)
    return err
end

function TaoLineSearchGetNumberFunctionEvaluations(arg0::Type{Float32},arg1::TaoLineSearch,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:TaoLineSearchGetNumberFunctionEvaluations,petscRealSingle),PetscErrorCode,(TaoLineSearch,Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function TaoLineSearchGetType(arg0::Type{Float32},arg1::TaoLineSearch,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:TaoLineSearchGetType,petscRealSingle),PetscErrorCode,(TaoLineSearch,Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function TaoLineSearchSetType(arg0::Type{Float32},arg1::TaoLineSearch,arg2::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:TaoLineSearchSetType,petscRealSingle),PetscErrorCode,(TaoLineSearch,Cstring),arg1,arg2)
    return err
end

function TaoLineSearchIsUsingTaoRoutines(arg0::Type{Float32},arg1::TaoLineSearch,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:TaoLineSearchIsUsingTaoRoutines,petscRealSingle),PetscErrorCode,(TaoLineSearch,Ptr{PetscBool}),arg1,arg2)
    return err
end

function TaoLineSearchSetObjectiveAndGTSRoutine(arg0::Type{Float32},arg1::TaoLineSearch,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoLineSearchSetObjectiveAndGTSRoutine,petscRealSingle),PetscErrorCode,(TaoLineSearch,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function TaoLineSearchSetObjectiveRoutine(arg0::Type{Float32},arg1::TaoLineSearch,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoLineSearchSetObjectiveRoutine,petscRealSingle),PetscErrorCode,(TaoLineSearch,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function TaoLineSearchSetGradientRoutine(arg0::Type{Float32},arg1::TaoLineSearch,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoLineSearchSetGradientRoutine,petscRealSingle),PetscErrorCode,(TaoLineSearch,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function TaoLineSearchSetObjectiveAndGradientRoutine(arg0::Type{Float32},arg1::TaoLineSearch,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoLineSearchSetObjectiveAndGradientRoutine,petscRealSingle),PetscErrorCode,(TaoLineSearch,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function TaoLineSearchComputeObjective(arg1::TaoLineSearch,arg2::Vec{Float32},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:TaoLineSearchComputeObjective,petscRealSingle),PetscErrorCode,(TaoLineSearch,Vec{Float32},Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function TaoLineSearchComputeGradient(arg1::TaoLineSearch,arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:TaoLineSearchComputeGradient,petscRealSingle),PetscErrorCode,(TaoLineSearch,Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function TaoLineSearchComputeObjectiveAndGradient(arg1::TaoLineSearch,arg2::Vec{Float32},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Vec{Float32})
    err = ccall((:TaoLineSearchComputeObjectiveAndGradient,petscRealSingle),PetscErrorCode,(TaoLineSearch,Vec{Float32},Ptr{Float32},Vec{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function TaoLineSearchComputeObjectiveAndGTS(arg1::TaoLineSearch,arg2::Vec{Float32},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:TaoLineSearchComputeObjectiveAndGTS,petscRealSingle),PetscErrorCode,(TaoLineSearch,Vec{Float32},Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function TaoLineSearchSetVariableBounds(arg1::TaoLineSearch,arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:TaoLineSearchSetVariableBounds,petscRealSingle),PetscErrorCode,(TaoLineSearch,Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function TaoLineSearchInitializePackage(arg0::Type{Float32})
    err = ccall((:TaoLineSearchInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function TaoLineSearchFinalizePackage(arg0::Type{Float32})
    err = ccall((:TaoLineSearchFinalizePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function TaoLineSearchRegister(arg0::Type{Float32},arg1::Union{ByteString,Cstring,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoLineSearchRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function TaoLineSearchUseTaoRoutines(arg0::Type{Float32},arg1::TaoLineSearch,arg2::Tao)
    err = ccall((:TaoLineSearchUseTaoRoutines,petscRealSingle),PetscErrorCode,(TaoLineSearch,Tao),arg1,arg2)
    return err
end

function TaoGetLineSearch(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{TaoLineSearch},StridedArray{TaoLineSearch},Ptr{TaoLineSearch},Ref{TaoLineSearch}})
    err = ccall((:TaoGetLineSearch,petscRealSingle),PetscErrorCode,(Tao,Ptr{TaoLineSearch}),arg1,arg2)
    return err
end

function TaoSetConvergenceHistory(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Integer,arg7::PetscBool)
    err = ccall((:TaoSetConvergenceHistory,petscRealSingle),PetscErrorCode,(Tao,Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Int64},Int64,PetscBool),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function TaoGetConvergenceHistory(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg3::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg4::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:TaoGetConvergenceHistory,petscRealSingle),PetscErrorCode,(Tao,Ptr{Ptr{Float32}},Ptr{Ptr{Float32}},Ptr{Ptr{Float32}},Ptr{Ptr{Int64}},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function TaoSetMonitor(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoSetMonitor,petscRealSingle),PetscErrorCode,(Tao,Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function TaoCancelMonitors(arg0::Type{Float32},arg1::Tao)
    err = ccall((:TaoCancelMonitors,petscRealSingle),PetscErrorCode,(Tao,),arg1)
    return err
end

function TaoDefaultMonitor(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoDefaultMonitor,petscRealSingle),PetscErrorCode,(Tao,Ptr{Void}),arg1,arg2)
    return err
end

function TaoDefaultSMonitor(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoDefaultSMonitor,petscRealSingle),PetscErrorCode,(Tao,Ptr{Void}),arg1,arg2)
    return err
end

function TaoDefaultCMonitor(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoDefaultCMonitor,petscRealSingle),PetscErrorCode,(Tao,Ptr{Void}),arg1,arg2)
    return err
end

function TaoSolutionMonitor(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoSolutionMonitor,petscRealSingle),PetscErrorCode,(Tao,Ptr{Void}),arg1,arg2)
    return err
end

function TaoSeparableObjectiveMonitor(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoSeparableObjectiveMonitor,petscRealSingle),PetscErrorCode,(Tao,Ptr{Void}),arg1,arg2)
    return err
end

function TaoGradientMonitor(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoGradientMonitor,petscRealSingle),PetscErrorCode,(Tao,Ptr{Void}),arg1,arg2)
    return err
end

function TaoStepDirectionMonitor(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoStepDirectionMonitor,petscRealSingle),PetscErrorCode,(Tao,Ptr{Void}),arg1,arg2)
    return err
end

function TaoDrawSolutionMonitor(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoDrawSolutionMonitor,petscRealSingle),PetscErrorCode,(Tao,Ptr{Void}),arg1,arg2)
    return err
end

function TaoDrawStepMonitor(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoDrawStepMonitor,petscRealSingle),PetscErrorCode,(Tao,Ptr{Void}),arg1,arg2)
    return err
end

function TaoDrawGradientMonitor(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoDrawGradientMonitor,petscRealSingle),PetscErrorCode,(Tao,Ptr{Void}),arg1,arg2)
    return err
end

function TaoAddLineSearchCounts(arg0::Type{Float32},arg1::Tao)
    err = ccall((:TaoAddLineSearchCounts,petscRealSingle),PetscErrorCode,(Tao,),arg1)
    return err
end

function TaoDefaultConvergenceTest(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoDefaultConvergenceTest,petscRealSingle),PetscErrorCode,(Tao,Ptr{Void}),arg1,arg2)
    return err
end

function TaoSetConvergenceTest(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoSetConvergenceTest,petscRealSingle),PetscErrorCode,(Tao,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function TaoSQPCONSetStateDesignIS(arg1::Tao,arg2::IS{Float32},arg3::IS{Float32})
    err = ccall((:TaoSQPCONSetStateDesignIS,petscRealSingle),PetscErrorCode,(Tao,IS{Float32},IS{Float32}),arg1,arg2,arg3)
    return err
end

function TaoLCLSetStateDesignIS(arg1::Tao,arg2::IS{Float32},arg3::IS{Float32})
    err = ccall((:TaoLCLSetStateDesignIS,petscRealSingle),PetscErrorCode,(Tao,IS{Float32},IS{Float32}),arg1,arg2,arg3)
    return err
end

function TaoMonitor(arg0::Type{Float32},arg1::Tao,arg2::Integer,arg3::Float32,arg4::Float32,arg5::Float32,arg6::Float32,arg7::Union{Ptr{TaoConvergedReason},StridedArray{TaoConvergedReason},Ptr{TaoConvergedReason},Ref{TaoConvergedReason}})
    err = ccall((:TaoMonitor,petscRealSingle),PetscErrorCode,(Tao,Int64,Float32,Float32,Float32,Float32,Ptr{TaoConvergedReason}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end
