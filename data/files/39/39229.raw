#=
@author titus 
=#
using   Base.Test
include("../khypot.jl")

exports = isdefined(:exports)?
    exports : Dict{ASCIIString,Function}()

exports["test_hypot"] = function test_hypot()
  @test ==(hypot([1, 1]), sqrt(2));
  @test ==(hypot([1, 1, 1]), sqrt(2));
  @test ==(
    round(hypot([1, 1, 1],3),8), 
    round(1.7320508075688774,8)
    );  
  @test ==(
    round(hypot([1, 1, 1, 3],3),8), 
    round(1.7320508075688774,8)
    );
  @test ==(
    round(hypot([ -3, 2 , 12], 3), 8),
    round(12.529964086141668, 8)
  );
  @test ==(
    round(hypot([ -3, 2 , 12]), 8),
    round(3.605551275463989, 8)
  );
  @test ==(hypot([3, 4]), 5);

  @test ==(hypot(4.587), 4.587);

	m1 = hypot((1, 1, 1, 3), 3)
	a = [[2, 3, 4, 5] [1, 1, 1, 3]]

	 m2 = hypot(a, col=2, dim=3)
	 @test ==(m1, m2)
	 @test ==(hypot(a, col=2), sqrt(2)) #sqrt(2) - default 2d

  @test ==(hypot(4.587), 4.587);
  @test_throws MethodError hypot()
end