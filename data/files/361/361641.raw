# Julia wrapper for header: ../../deps/ComplexDouble/petsc-3.6.0/include/petsc.h
# Automatically generated using Clang.jl wrap_c, version 0.0.0


function PetscIsInfOrNanReal(arg0::Type{Complex128},arg1::Float64)
    err = ccall((:PetscIsInfOrNanReal,petscComplexDouble),PetscErrorCode,(Float64,),arg1)
    return err
end

function PetscIsNormalReal(arg0::Type{Complex128},arg1::Float64)
    err = ccall((:PetscIsNormalReal,petscComplexDouble),PetscBool,(Float64,),arg1)
    return err
end

function PetscSetHelpVersionFunctions(arg0::Type{Complex128},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscSetHelpVersionFunctions,petscComplexDouble),PetscErrorCode,(Ptr{Void},Ptr{Void}),arg1,arg2)
    return err
end

function PetscCommDuplicate(arg0::Type{Complex128},arg1::MPI_Comm,arg2::Union{Ptr{MPI_Comm},StridedArray{MPI_Comm},Ptr{MPI_Comm},Ref{MPI_Comm}},arg3::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:PetscCommDuplicate,petscComplexDouble),PetscErrorCode,(comm_type,Ptr{comm_type},Ptr{Cint}),arg1,arg2,arg3)
    return err
end

function PetscCommDestroy(arg0::Type{Complex128},arg1::Union{Ptr{MPI_Comm},StridedArray{MPI_Comm},Ptr{MPI_Comm},Ref{MPI_Comm}})
    err = ccall((:PetscCommDestroy,petscComplexDouble),PetscErrorCode,(Ptr{comm_type},),arg1)
    return err
end

function PetscMallocSet(arg0::Type{Complex128},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscMallocSet,petscComplexDouble),PetscErrorCode,(Ptr{Void},Ptr{Void}),arg1,arg2)
    return err
end

function PetscMallocClear(arg0::Type{Complex128})
    err = ccall((:PetscMallocClear,petscComplexDouble),PetscErrorCode,())
    return err
end

#= skipping function with undefined symbols: 
 function PetscMallocDump(arg0::Type{Complex128},arg1::Union{Ptr{FILE},StridedArray{FILE},Ptr{FILE},Ref{FILE}})
    ccall((:PetscMallocDump,petscComplexDouble),PetscErrorCode,(Ptr{FILE},),arg1)
end 
=#
#= skipping function with undefined symbols: 
 function PetscMallocDumpLog(arg0::Type{Complex128},arg1::Union{Ptr{FILE},StridedArray{FILE},Ptr{FILE},Ref{FILE}})
    ccall((:PetscMallocDumpLog,petscComplexDouble),PetscErrorCode,(Ptr{FILE},),arg1)
end 
=#
function PetscMallocGetCurrentUsage(arg0::Type{Complex128},arg1::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscMallocGetCurrentUsage,petscComplexDouble),PetscErrorCode,(Ptr{Float64},),arg1)
    return err
end

function PetscMallocGetMaximumUsage(arg0::Type{Complex128},arg1::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscMallocGetMaximumUsage,petscComplexDouble),PetscErrorCode,(Ptr{Float64},),arg1)
    return err
end

function PetscMallocDebug(arg0::Type{Complex128},arg1::PetscBool)
    err = ccall((:PetscMallocDebug,petscComplexDouble),PetscErrorCode,(PetscBool,),arg1)
    return err
end

function PetscMallocGetDebug(arg0::Type{Complex128},arg1::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscMallocGetDebug,petscComplexDouble),PetscErrorCode,(Ptr{PetscBool},),arg1)
    return err
end

function PetscMallocValidate(arg0::Type{Complex128},arg1::Integer,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscMallocValidate,petscComplexDouble),PetscErrorCode,(Cint,Cstring,Cstring),arg1,arg2,arg3)
    return err
end

function PetscMallocSetDumpLog(arg0::Type{Complex128})
    err = ccall((:PetscMallocSetDumpLog,petscComplexDouble),PetscErrorCode,())
    return err
end

function PetscMallocSetDumpLogThreshold(arg0::Type{Complex128},arg1::Float64)
    err = ccall((:PetscMallocSetDumpLogThreshold,petscComplexDouble),PetscErrorCode,(Float64,),arg1)
    return err
end

function PetscMallocGetDumpLog(arg0::Type{Complex128},arg1::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscMallocGetDumpLog,petscComplexDouble),PetscErrorCode,(Ptr{PetscBool},),arg1)
    return err
end

#= skipping function with undefined symbols: 
 function PetscDataTypeToMPIDataType(arg0::Type{Complex128},arg1::PetscDataType,arg2::Union{Ptr{MPI_Datatype},StridedArray{MPI_Datatype},Ptr{MPI_Datatype},Ref{MPI_Datatype}})
    ccall((:PetscDataTypeToMPIDataType,petscComplexDouble),PetscErrorCode,(PetscDataType,Ptr{MPI_Datatype}),arg1,arg2)
end 
=#
#= skipping function with undefined symbols: 
 function PetscMPIDataTypeToPetscDataType(arg0::Type{Complex128},arg1::MPI_Datatype,arg2::Union{Ptr{PetscDataType},StridedArray{PetscDataType},Ptr{PetscDataType},Ref{PetscDataType}})
    ccall((:PetscMPIDataTypeToPetscDataType,petscComplexDouble),PetscErrorCode,(MPI_Datatype,Ptr{PetscDataType}),arg1,arg2)
end 
=#
function PetscDataTypeGetSize(arg0::Type{Complex128},arg1::PetscDataType,arg2::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:PetscDataTypeGetSize,petscComplexDouble),PetscErrorCode,(PetscDataType,Ptr{Cint}),arg1,arg2)
    return err
end

function PetscDataTypeFromString(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{PetscDataType},StridedArray{PetscDataType},Ptr{PetscDataType},Ref{PetscDataType}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscDataTypeFromString,petscComplexDouble),PetscErrorCode,(Cstring,Ptr{PetscDataType},Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function PetscBitMemcpy(arg0::Type{Complex128},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg2::Integer,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Integer,arg5::Integer,arg6::PetscDataType)
    err = ccall((:PetscBitMemcpy,petscComplexDouble),PetscErrorCode,(Ptr{Void},Int64,Ptr{Void},Int64,Int64,PetscDataType),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscMemmove(arg0::Type{Complex128},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},size_t::Integer)
    err = ccall((:PetscMemmove,petscComplexDouble),PetscErrorCode,(Ptr{Void},Ptr{Void},Cint),arg1,arg2,size_t)
    return err
end

function PetscMemcmp(arg0::Type{Complex128},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},size_t::Integer,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscMemcmp,petscComplexDouble),PetscErrorCode,(Ptr{Void},Ptr{Void},Cint,Ptr{PetscBool}),arg1,arg2,size_t,arg3)
    return err
end

function PetscStrlen(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:PetscStrlen,petscComplexDouble),PetscErrorCode,(Cstring,Ptr{Cint}),arg1,arg2)
    return err
end

function PetscStrToArray(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::UInt8,arg3::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}},arg4::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}})
    err = ccall((:PetscStrToArray,petscComplexDouble),PetscErrorCode,(Cstring,UInt8,Ptr{Cint},Ptr{Ptr{Ptr{UInt8}}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscStrToArrayDestroy(arg0::Type{Complex128},arg1::Integer,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscStrToArrayDestroy,petscComplexDouble),PetscErrorCode,(Cint,Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PetscStrcmp(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscStrcmp,petscComplexDouble),PetscErrorCode,(Cstring,Cstring,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function PetscStrgrt(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscStrgrt,petscComplexDouble),PetscErrorCode,(Cstring,Cstring,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function PetscStrcasecmp(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscStrcasecmp,petscComplexDouble),PetscErrorCode,(Cstring,Cstring,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function PetscStrncmp(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscStrncmp,petscComplexDouble),PetscErrorCode,(Cstring,Cstring,Cint,Ptr{PetscBool}),arg1,arg2,size_t,arg3)
    return err
end

function PetscStrcpy(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscStrcpy,petscComplexDouble),PetscErrorCode,(Cstring,Cstring),arg1,arg2)
    return err
end

function PetscStrcat(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscStrcat,petscComplexDouble),PetscErrorCode,(Cstring,Cstring),arg1,arg2)
    return err
end

function PetscStrncat(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer)
    err = ccall((:PetscStrncat,petscComplexDouble),PetscErrorCode,(Cstring,Cstring,Cint),arg1,arg2,size_t)
    return err
end

function PetscStrncpy(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer)
    err = ccall((:PetscStrncpy,petscComplexDouble),PetscErrorCode,(Cstring,Cstring,Cint),arg1,arg2,size_t)
    return err
end

function PetscStrchr(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::UInt8,arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscStrchr,petscComplexDouble),PetscErrorCode,(Cstring,UInt8,Ptr{Ptr{UInt8}}),arg1,arg2,arg3)
    return err
end

function PetscStrtolower(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscStrtolower,petscComplexDouble),PetscErrorCode,(Cstring,),arg1)
    return err
end

function PetscStrtoupper(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscStrtoupper,petscComplexDouble),PetscErrorCode,(Cstring,),arg1)
    return err
end

function PetscStrrchr(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::UInt8,arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscStrrchr,petscComplexDouble),PetscErrorCode,(Cstring,UInt8,Ptr{Ptr{UInt8}}),arg1,arg2,arg3)
    return err
end

function PetscStrstr(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscStrstr,petscComplexDouble),PetscErrorCode,(Cstring,Cstring,Ptr{Ptr{UInt8}}),arg1,arg2,arg3)
    return err
end

function PetscStrrstr(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscStrrstr,petscComplexDouble),PetscErrorCode,(Cstring,Cstring,Ptr{Ptr{UInt8}}),arg1,arg2,arg3)
    return err
end

function PetscStrendswith(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscStrendswith,petscComplexDouble),PetscErrorCode,(Cstring,Cstring,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function PetscStrbeginswith(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscStrbeginswith,petscComplexDouble),PetscErrorCode,(Cstring,Cstring,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function PetscStrendswithwhich(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscStrendswithwhich,petscComplexDouble),PetscErrorCode,(Cstring,Ptr{Ptr{UInt8}},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PetscStrallocpy(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscStrallocpy,petscComplexDouble),PetscErrorCode,(Cstring,Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PetscStrArrayallocpy(arg0::Type{Complex128},arg1::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg2::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}})
    err = ccall((:PetscStrArrayallocpy,petscComplexDouble),PetscErrorCode,(Ptr{Ptr{UInt8}},Ptr{Ptr{Ptr{UInt8}}}),arg1,arg2)
    return err
end

function PetscStrArrayDestroy(arg0::Type{Complex128},arg1::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}})
    err = ccall((:PetscStrArrayDestroy,petscComplexDouble),PetscErrorCode,(Ptr{Ptr{Ptr{UInt8}}},),arg1)
    return err
end

function PetscStrNArrayallocpy(arg0::Type{Complex128},arg1::Integer,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg3::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}})
    err = ccall((:PetscStrNArrayallocpy,petscComplexDouble),PetscErrorCode,(Int64,Ptr{Ptr{UInt8}},Ptr{Ptr{Ptr{UInt8}}}),arg1,arg2,arg3)
    return err
end

function PetscStrNArrayDestroy(arg0::Type{Complex128},arg1::Integer,arg2::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}})
    err = ccall((:PetscStrNArrayDestroy,petscComplexDouble),PetscErrorCode,(Int64,Ptr{Ptr{Ptr{UInt8}}}),arg1,arg2)
    return err
end

function PetscStrreplace(arg0::Type{Complex128},arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer)
    err = ccall((:PetscStrreplace,petscComplexDouble),PetscErrorCode,(comm_type,Cstring,Cstring,Cint),arg1,arg2,arg3,size_t)
    return err
end

function PetscStrcmpNoError(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscStrcmpNoError,petscComplexDouble),Void,(Cstring,Cstring,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function PetscTokenCreate(arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::UInt8,arg3::Union{Ptr{PetscToken{Complex128}},StridedArray{PetscToken{Complex128}},Ptr{PetscToken{Complex128}},Ref{PetscToken{Complex128}}})
    err = ccall((:PetscTokenCreate,petscComplexDouble),PetscErrorCode,(Cstring,UInt8,Ptr{PetscToken}),arg1,arg2,arg3)
    return err
end

function PetscTokenFind(arg1::PetscToken{Complex128},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscTokenFind,petscComplexDouble),PetscErrorCode,(PetscToken,Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PetscTokenDestroy(arg1::Union{Ptr{PetscToken{Complex128}},StridedArray{PetscToken{Complex128}},Ptr{PetscToken{Complex128}},Ref{PetscToken{Complex128}}})
    err = ccall((:PetscTokenDestroy,petscComplexDouble),PetscErrorCode,(Ptr{PetscToken},),arg1)
    return err
end

function PetscEListFind(arg0::Type{Complex128},arg1::Integer,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscEListFind,petscComplexDouble),PetscErrorCode,(Int64,Ptr{Ptr{UInt8}},Cstring,Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscEnumFind(arg0::Type{Complex128},arg1::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{PetscEnum},StridedArray{PetscEnum},Ptr{PetscEnum},Ref{PetscEnum}},arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscEnumFind,petscComplexDouble),PetscErrorCode,(Ptr{Ptr{UInt8}},Cstring,Ptr{PetscEnum},Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function PetscMaxSum(arg0::Type{Complex128},arg1::MPI_Comm,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscMaxSum,petscComplexDouble),PetscErrorCode,(comm_type,Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

#= skipping function with undefined symbols: 
 function MPIULong_Send(arg0::Type{Complex128},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg2::Integer,arg3::MPI_Datatype,arg4::PetscMPIInt,arg5::PetscMPIInt,arg6::MPI_Comm)
    ccall((:MPIULong_Send,petscComplexDouble),PetscErrorCode,(Ptr{Void},Int64,MPI_Datatype,PetscMPIInt,PetscMPIInt,comm_type),arg1,arg2,arg3,arg4,arg5,arg6)
end 
=#
#= skipping function with undefined symbols: 
 function MPIULong_Recv(arg0::Type{Complex128},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg2::Integer,arg3::MPI_Datatype,arg4::PetscMPIInt,arg5::PetscMPIInt,arg6::MPI_Comm)
    ccall((:MPIULong_Recv,petscComplexDouble),PetscErrorCode,(Ptr{Void},Int64,MPI_Datatype,PetscMPIInt,PetscMPIInt,comm_type),arg1,arg2,arg3,arg4,arg5,arg6)
end 
=#
function PetscErrorPrintfInitialize(arg0::Type{Complex128})
    err = ccall((:PetscErrorPrintfInitialize,petscComplexDouble),PetscErrorCode,())
    return err
end

function PetscErrorMessage(arg0::Type{Complex128},arg1::Integer,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscErrorMessage,petscComplexDouble),PetscErrorCode,(Cint,Ptr{Ptr{UInt8}},Ptr{Ptr{UInt8}}),arg1,arg2,arg3)
    return err
end

function PetscTraceBackErrorHandler(arg0::Type{Complex128},arg1::MPI_Comm,arg2::Integer,arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::PetscErrorCode,arg6::PetscErrorType,arg7::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg8::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscTraceBackErrorHandler,petscComplexDouble),PetscErrorCode,(comm_type,Cint,Cstring,Cstring,PetscErrorCode,PetscErrorType,Cstring,Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function PetscIgnoreErrorHandler(arg0::Type{Complex128},arg1::MPI_Comm,arg2::Integer,arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::PetscErrorCode,arg6::PetscErrorType,arg7::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg8::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscIgnoreErrorHandler,petscComplexDouble),PetscErrorCode,(comm_type,Cint,Cstring,Cstring,PetscErrorCode,PetscErrorType,Cstring,Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function PetscEmacsClientErrorHandler(arg0::Type{Complex128},arg1::MPI_Comm,arg2::Integer,arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::PetscErrorCode,arg6::PetscErrorType,arg7::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg8::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscEmacsClientErrorHandler,petscComplexDouble),PetscErrorCode,(comm_type,Cint,Cstring,Cstring,PetscErrorCode,PetscErrorType,Cstring,Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function PetscMPIAbortErrorHandler(arg0::Type{Complex128},arg1::MPI_Comm,arg2::Integer,arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::PetscErrorCode,arg6::PetscErrorType,arg7::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg8::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscMPIAbortErrorHandler,petscComplexDouble),PetscErrorCode,(comm_type,Cint,Cstring,Cstring,PetscErrorCode,PetscErrorType,Cstring,Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function PetscAbortErrorHandler(arg0::Type{Complex128},arg1::MPI_Comm,arg2::Integer,arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::PetscErrorCode,arg6::PetscErrorType,arg7::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg8::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscAbortErrorHandler,petscComplexDouble),PetscErrorCode,(comm_type,Cint,Cstring,Cstring,PetscErrorCode,PetscErrorType,Cstring,Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function PetscAttachDebuggerErrorHandler(arg0::Type{Complex128},arg1::MPI_Comm,arg2::Integer,arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::PetscErrorCode,arg6::PetscErrorType,arg7::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg8::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscAttachDebuggerErrorHandler,petscComplexDouble),PetscErrorCode,(comm_type,Cint,Cstring,Cstring,PetscErrorCode,PetscErrorType,Cstring,Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function PetscReturnErrorHandler(arg0::Type{Complex128},arg1::MPI_Comm,arg2::Integer,arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::PetscErrorCode,arg6::PetscErrorType,arg7::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg8::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscReturnErrorHandler,petscComplexDouble),PetscErrorCode,(comm_type,Cint,Cstring,Cstring,PetscErrorCode,PetscErrorType,Cstring,Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function PetscPushErrorHandler(arg0::Type{Complex128},handler::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscPushErrorHandler,petscComplexDouble),PetscErrorCode,(Ptr{Void},Ptr{Void}),handler,arg1)
    return err
end

function PetscPopErrorHandler(arg0::Type{Complex128})
    err = ccall((:PetscPopErrorHandler,petscComplexDouble),PetscErrorCode,())
    return err
end

function PetscSignalHandlerDefault(arg0::Type{Complex128},arg1::Integer,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscSignalHandlerDefault,petscComplexDouble),PetscErrorCode,(Cint,Ptr{Void}),arg1,arg2)
    return err
end

function PetscPushSignalHandler(arg0::Type{Complex128},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscPushSignalHandler,petscComplexDouble),PetscErrorCode,(Ptr{Void},Ptr{Void}),arg1,arg2)
    return err
end

function PetscPopSignalHandler(arg0::Type{Complex128})
    err = ccall((:PetscPopSignalHandler,petscComplexDouble),PetscErrorCode,())
    return err
end

function PetscCheckPointerSetIntensity(arg0::Type{Complex128},arg1::Integer)
    err = ccall((:PetscCheckPointerSetIntensity,petscComplexDouble),PetscErrorCode,(Int64,),arg1)
    return err
end

function PetscSetFPTrap(arg0::Type{Complex128},arg1::PetscFPTrap)
    err = ccall((:PetscSetFPTrap,petscComplexDouble),PetscErrorCode,(PetscFPTrap,),arg1)
    return err
end

function PetscFPTrapPush(arg0::Type{Complex128},arg1::PetscFPTrap)
    err = ccall((:PetscFPTrapPush,petscComplexDouble),PetscErrorCode,(PetscFPTrap,),arg1)
    return err
end

function PetscFPTrapPop(arg0::Type{Complex128})
    err = ccall((:PetscFPTrapPop,petscComplexDouble),PetscErrorCode,())
    return err
end

function PetscStackCopy(arg0::Type{Complex128},arg1::Union{Ptr{PetscStack},StridedArray{PetscStack},Ptr{PetscStack},Ref{PetscStack}},arg2::Union{Ptr{PetscStack},StridedArray{PetscStack},Ptr{PetscStack},Ref{PetscStack}})
    err = ccall((:PetscStackCopy,petscComplexDouble),PetscErrorCode,(Ptr{PetscStack},Ptr{PetscStack}),arg1,arg2)
    return err
end

#= skipping function with undefined symbols: 
 function PetscStackPrint(arg0::Type{Complex128},arg1::Union{Ptr{PetscStack},StridedArray{PetscStack},Ptr{PetscStack},Ref{PetscStack}},arg2::Union{Ptr{FILE},StridedArray{FILE},Ptr{FILE},Ref{FILE}})
    ccall((:PetscStackPrint,petscComplexDouble),PetscErrorCode,(Ptr{PetscStack},Ptr{FILE}),arg1,arg2)
end 
=#
#= skipping function with undefined symbols: 
 function PetscStackView(arg0::Type{Complex128},arg1::Union{Ptr{FILE},StridedArray{FILE},Ptr{FILE},Ref{FILE}})
    ccall((:PetscStackView,petscComplexDouble),PetscErrorCode,(Ptr{FILE},),arg1)
end 
=#
function PetscStackDestroy(arg0::Type{Complex128})
    err = ccall((:PetscStackDestroy,petscComplexDouble),PetscErrorCode,())
    return err
end

function PetscClassIdRegister(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{PetscClassId},StridedArray{PetscClassId},Ptr{PetscClassId},Ref{PetscClassId}})
    err = ccall((:PetscClassIdRegister,petscComplexDouble),PetscErrorCode,(Cstring,Ptr{PetscClassId}),arg1,arg2)
    return err
end

function PetscMemoryGetCurrentUsage(arg0::Type{Complex128},arg1::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscMemoryGetCurrentUsage,petscComplexDouble),PetscErrorCode,(Ptr{Float64},),arg1)
    return err
end

function PetscMemoryGetMaximumUsage(arg0::Type{Complex128},arg1::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscMemoryGetMaximumUsage,petscComplexDouble),PetscErrorCode,(Ptr{Float64},),arg1)
    return err
end

function PetscMemorySetGetMaximumUsage(arg0::Type{Complex128})
    err = ccall((:PetscMemorySetGetMaximumUsage,petscComplexDouble),PetscErrorCode,())
    return err
end

function PetscMemoryTrace(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscMemoryTrace,petscComplexDouble),PetscErrorCode,(Cstring,),arg1)
    return err
end

function PetscInfoAllow(arg0::Type{Complex128},arg1::PetscBool,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscInfoAllow,petscComplexDouble),PetscErrorCode,(PetscBool,Cstring),arg1,arg2)
    return err
end

function PetscSleep(arg0::Type{Complex128},arg1::Float64)
    err = ccall((:PetscSleep,petscComplexDouble),PetscErrorCode,(Float64,),arg1)
    return err
end

function PetscInitialize(arg0::Type{Complex128},arg1::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}},arg2::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscInitialize,petscComplexDouble),PetscErrorCode,(Ptr{Cint},Ptr{Ptr{Ptr{UInt8}}},Cstring,Cstring),arg1,arg2,arg3,arg4)
    return err
end

function PetscInitializeNoPointers(arg0::Type{Complex128},arg1::Integer,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscInitializeNoPointers,petscComplexDouble),PetscErrorCode,(Cint,Ptr{Ptr{UInt8}},Cstring,Cstring),arg1,arg2,arg3,arg4)
    return err
end

function PetscInitializeNoArguments(arg0::Type{Complex128})
    err = ccall((:PetscInitializeNoArguments,petscComplexDouble),PetscErrorCode,())
    return err
end

function PetscInitialized(arg0::Type{Complex128},arg1::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscInitialized,petscComplexDouble),PetscErrorCode,(Ptr{PetscBool},),arg1)
    return err
end

function PetscFinalized(arg0::Type{Complex128},arg1::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscFinalized,petscComplexDouble),PetscErrorCode,(Ptr{PetscBool},),arg1)
    return err
end

function PetscFinalize(arg0::Type{Complex128})
    err = ccall((:PetscFinalize,petscComplexDouble),PetscErrorCode,())
    return err
end

function PetscInitializeFortran(arg0::Type{Complex128})
    err = ccall((:PetscInitializeFortran,petscComplexDouble),PetscErrorCode,())
    return err
end

function PetscGetArgs(arg0::Type{Complex128},arg1::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}},arg2::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}})
    err = ccall((:PetscGetArgs,petscComplexDouble),PetscErrorCode,(Ptr{Cint},Ptr{Ptr{Ptr{UInt8}}}),arg1,arg2)
    return err
end

function PetscGetArguments(arg0::Type{Complex128},arg1::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}})
    err = ccall((:PetscGetArguments,petscComplexDouble),PetscErrorCode,(Ptr{Ptr{Ptr{UInt8}}},),arg1)
    return err
end

function PetscFreeArguments(arg0::Type{Complex128},arg1::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscFreeArguments,petscComplexDouble),PetscErrorCode,(Ptr{Ptr{UInt8}},),arg1)
    return err
end

function PetscEnd(arg0::Type{Complex128})
    err = ccall((:PetscEnd,petscComplexDouble),PetscErrorCode,())
    return err
end

function PetscSysInitializePackage(arg0::Type{Complex128})
    err = ccall((:PetscSysInitializePackage,petscComplexDouble),PetscErrorCode,())
    return err
end

function PetscPythonInitialize(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscPythonInitialize,petscComplexDouble),PetscErrorCode,(Cstring,Cstring),arg1,arg2)
    return err
end

function PetscPythonFinalize(arg0::Type{Complex128})
    err = ccall((:PetscPythonFinalize,petscComplexDouble),PetscErrorCode,())
    return err
end

function PetscPythonPrintError(arg0::Type{Complex128})
    err = ccall((:PetscPythonPrintError,petscComplexDouble),PetscErrorCode,())
    return err
end

function PetscPythonMonitorSet(arg1::PetscObject{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscPythonMonitorSet,petscComplexDouble),PetscErrorCode,(PetscObject{Complex128},Cstring),arg1,arg2)
    return err
end

function PetscObjectDestroy(arg1::Union{Ptr{PetscObject{Complex128}},StridedArray{PetscObject{Complex128}},Ptr{PetscObject{Complex128}},Ref{PetscObject{Complex128}}})
    err = ccall((:PetscObjectDestroy,petscComplexDouble),PetscErrorCode,(Ptr{PetscObject{Complex128}},),arg1)
    return err
end

function PetscObjectGetComm(arg1::PetscObject{Complex128},arg2::Union{Ptr{MPI_Comm},StridedArray{MPI_Comm},Ptr{MPI_Comm},Ref{MPI_Comm}})
    err = ccall((:PetscObjectGetComm,petscComplexDouble),PetscErrorCode,(PetscObject{Complex128},Ptr{comm_type}),arg1,arg2)
    return err
end

function PetscObjectGetClassId(arg1::PetscObject{Complex128},arg2::Union{Ptr{PetscClassId},StridedArray{PetscClassId},Ptr{PetscClassId},Ref{PetscClassId}})
    err = ccall((:PetscObjectGetClassId,petscComplexDouble),PetscErrorCode,(PetscObject{Complex128},Ptr{PetscClassId}),arg1,arg2)
    return err
end

function PetscObjectGetClassName(arg1::PetscObject{Complex128},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscObjectGetClassName,petscComplexDouble),PetscErrorCode,(PetscObject{Complex128},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PetscObjectSetType(arg1::PetscObject{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscObjectSetType,petscComplexDouble),PetscErrorCode,(PetscObject{Complex128},Cstring),arg1,arg2)
    return err
end

function PetscObjectSetPrecision(arg1::PetscObject{Complex128},arg2::PetscPrecision)
    err = ccall((:PetscObjectSetPrecision,petscComplexDouble),PetscErrorCode,(PetscObject{Complex128},PetscPrecision),arg1,arg2)
    return err
end

function PetscObjectGetType(arg1::PetscObject{Complex128},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscObjectGetType,petscComplexDouble),PetscErrorCode,(PetscObject{Complex128},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PetscObjectSetName(arg1::PetscObject{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscObjectSetName,petscComplexDouble),PetscErrorCode,(PetscObject{Complex128},Cstring),arg1,arg2)
    return err
end

function PetscObjectGetName(arg1::PetscObject{Complex128},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscObjectGetName,petscComplexDouble),PetscErrorCode,(PetscObject{Complex128},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PetscObjectSetTabLevel(arg1::PetscObject{Complex128},arg2::Integer)
    err = ccall((:PetscObjectSetTabLevel,petscComplexDouble),PetscErrorCode,(PetscObject{Complex128},Int64),arg1,arg2)
    return err
end

function PetscObjectGetTabLevel(arg1::PetscObject{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscObjectGetTabLevel,petscComplexDouble),PetscErrorCode,(PetscObject{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscObjectIncrementTabLevel(arg1::PetscObject{Complex128},arg2::PetscObject{Complex128},arg3::Integer)
    err = ccall((:PetscObjectIncrementTabLevel,petscComplexDouble),PetscErrorCode,(PetscObject{Complex128},PetscObject{Complex128},Int64),arg1,arg2,arg3)
    return err
end

function PetscObjectReference(arg1::PetscObject{Complex128})
    err = ccall((:PetscObjectReference,petscComplexDouble),PetscErrorCode,(PetscObject{Complex128},),arg1)
    return err
end

function PetscObjectGetReference(arg1::PetscObject{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscObjectGetReference,petscComplexDouble),PetscErrorCode,(PetscObject{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscObjectDereference(arg1::PetscObject{Complex128})
    err = ccall((:PetscObjectDereference,petscComplexDouble),PetscErrorCode,(PetscObject{Complex128},),arg1)
    return err
end

function PetscObjectGetNewTag(arg1::PetscObject{Complex128},arg2::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}})
    err = ccall((:PetscObjectGetNewTag,petscComplexDouble),PetscErrorCode,(PetscObject{Complex128},Ptr{PetscMPIInt}),arg1,arg2)
    return err
end

function PetscObjectCompose(arg1::PetscObject{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::PetscObject{Complex128})
    err = ccall((:PetscObjectCompose,petscComplexDouble),PetscErrorCode,(PetscObject{Complex128},Cstring,PetscObject{Complex128}),arg1,arg2,arg3)
    return err
end

function PetscObjectRemoveReference(arg1::PetscObject{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscObjectRemoveReference,petscComplexDouble),PetscErrorCode,(PetscObject{Complex128},Cstring),arg1,arg2)
    return err
end

function PetscObjectQuery(arg1::PetscObject{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{PetscObject{Complex128}},StridedArray{PetscObject{Complex128}},Ptr{PetscObject{Complex128}},Ref{PetscObject{Complex128}}})
    err = ccall((:PetscObjectQuery,petscComplexDouble),PetscErrorCode,(PetscObject{Complex128},Cstring,Ptr{PetscObject{Complex128}}),arg1,arg2,arg3)
    return err
end

function PetscObjectComposeFunction_Private(arg1::PetscObject{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscObjectComposeFunction_Private,petscComplexDouble),PetscErrorCode,(PetscObject{Complex128},Cstring,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function PetscObjectSetFromOptions(arg1::PetscObject{Complex128})
    err = ccall((:PetscObjectSetFromOptions,petscComplexDouble),PetscErrorCode,(PetscObject{Complex128},),arg1)
    return err
end

function PetscObjectSetUp(arg1::PetscObject{Complex128})
    err = ccall((:PetscObjectSetUp,petscComplexDouble),PetscErrorCode,(PetscObject{Complex128},),arg1)
    return err
end

function PetscCommGetNewTag(arg0::Type{Complex128},arg1::MPI_Comm,arg2::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}})
    err = ccall((:PetscCommGetNewTag,petscComplexDouble),PetscErrorCode,(comm_type,Ptr{PetscMPIInt}),arg1,arg2)
    return err
end

function PetscObjectAddOptionsHandler(arg1::PetscObject{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscObjectAddOptionsHandler,petscComplexDouble),PetscErrorCode,(PetscObject{Complex128},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function PetscObjectProcessOptionsHandlers(arg1::PetscObject{Complex128})
    err = ccall((:PetscObjectProcessOptionsHandlers,petscComplexDouble),PetscErrorCode,(PetscObject{Complex128},),arg1)
    return err
end

function PetscObjectDestroyOptionsHandlers(arg1::PetscObject{Complex128})
    err = ccall((:PetscObjectDestroyOptionsHandlers,petscComplexDouble),PetscErrorCode,(PetscObject{Complex128},),arg1)
    return err
end

function PetscObjectsListGetGlobalNumbering(arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{PetscObject{Complex128}},StridedArray{PetscObject{Complex128}},Ptr{PetscObject{Complex128}},Ref{PetscObject{Complex128}}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscObjectsListGetGlobalNumbering,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Ptr{PetscObject{Complex128}},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscOptionsHasName(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsHasName,petscComplexDouble),PetscErrorCode,(Cstring,Cstring,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function PetscOptionsGetInt(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetInt,petscComplexDouble),PetscErrorCode,(Cstring,Cstring,Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function PetscOptionsGetBool(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetBool,petscComplexDouble),PetscErrorCode,(Cstring,Cstring,Ptr{PetscBool},Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function PetscOptionsGetReal(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetReal,petscComplexDouble),PetscErrorCode,(Cstring,Cstring,Ptr{Float64},Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function PetscOptionsGetScalar(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetScalar,petscComplexDouble),PetscErrorCode,(Cstring,Cstring,Ptr{Complex128},Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function PetscOptionsGetIntArray(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetIntArray,petscComplexDouble),PetscErrorCode,(Cstring,Cstring,Ptr{Int64},Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscOptionsGetRealArray(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetRealArray,petscComplexDouble),PetscErrorCode,(Cstring,Cstring,Ptr{Float64},Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscOptionsGetScalarArray(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetScalarArray,petscComplexDouble),PetscErrorCode,(Cstring,Cstring,Ptr{Complex128},Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscOptionsGetBoolArray(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetBoolArray,petscComplexDouble),PetscErrorCode,(Cstring,Cstring,Ptr{PetscBool},Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscOptionsGetString(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer,arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetString,petscComplexDouble),PetscErrorCode,(Cstring,Cstring,Cstring,Cint,Ptr{PetscBool}),arg1,arg2,arg3,size_t,arg4)
    return err
end

function PetscOptionsGetStringArray(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetStringArray,petscComplexDouble),PetscErrorCode,(Cstring,Cstring,Ptr{Ptr{UInt8}},Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscOptionsGetEList(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetEList,petscComplexDouble),PetscErrorCode,(Cstring,Cstring,Ptr{Ptr{UInt8}},Int64,Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscOptionsGetEnum(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg4::Union{Ptr{PetscEnum},StridedArray{PetscEnum},Ptr{PetscEnum},Ref{PetscEnum}},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetEnum,petscComplexDouble),PetscErrorCode,(Cstring,Cstring,Ptr{Ptr{UInt8}},Ptr{PetscEnum},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscOptionsGetEnumArray(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg4::Union{Ptr{PetscEnum},StridedArray{PetscEnum},Ptr{PetscEnum},Ref{PetscEnum}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetEnumArray,petscComplexDouble),PetscErrorCode,(Cstring,Cstring,Ptr{Ptr{UInt8}},Ptr{PetscEnum},Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscOptionsValidKey(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsValidKey,petscComplexDouble),PetscErrorCode,(Cstring,Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscOptionsSetAlias(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscOptionsSetAlias,petscComplexDouble),PetscErrorCode,(Cstring,Cstring),arg1,arg2)
    return err
end

function PetscOptionsSetValue(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscOptionsSetValue,petscComplexDouble),PetscErrorCode,(Cstring,Cstring),arg1,arg2)
    return err
end

function PetscOptionsClearValue(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscOptionsClearValue,petscComplexDouble),PetscErrorCode,(Cstring,),arg1)
    return err
end

function PetscOptionsAllUsed(arg0::Type{Complex128},arg1::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscOptionsAllUsed,petscComplexDouble),PetscErrorCode,(Ptr{Int64},),arg1)
    return err
end

function PetscOptionsUsed(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsUsed,petscComplexDouble),PetscErrorCode,(Cstring,Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscOptionsLeft(arg0::Type{Complex128})
    err = ccall((:PetscOptionsLeft,petscComplexDouble),PetscErrorCode,())
    return err
end

function PetscOptionsView(arg1::PetscViewer{Complex128})
    err = ccall((:PetscOptionsView,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},),arg1)
    return err
end

function PetscOptionsCreate(arg0::Type{Complex128})
    err = ccall((:PetscOptionsCreate,petscComplexDouble),PetscErrorCode,())
    return err
end

function PetscOptionsInsert(arg0::Type{Complex128},arg1::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}},arg2::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscOptionsInsert,petscComplexDouble),PetscErrorCode,(Ptr{Cint},Ptr{Ptr{Ptr{UInt8}}},Cstring),arg1,arg2,arg3)
    return err
end

function PetscOptionsInsertFile(arg0::Type{Complex128},arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::PetscBool)
    err = ccall((:PetscOptionsInsertFile,petscComplexDouble),PetscErrorCode,(comm_type,Cstring,PetscBool),arg1,arg2,arg3)
    return err
end

function PetscOptionsInsertString(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscOptionsInsertString,petscComplexDouble),PetscErrorCode,(Cstring,),arg1)
    return err
end

function PetscOptionsDestroy(arg0::Type{Complex128})
    err = ccall((:PetscOptionsDestroy,petscComplexDouble),PetscErrorCode,())
    return err
end

function PetscOptionsClear(arg0::Type{Complex128})
    err = ccall((:PetscOptionsClear,petscComplexDouble),PetscErrorCode,())
    return err
end

function PetscOptionsPrefixPush(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscOptionsPrefixPush,petscComplexDouble),PetscErrorCode,(Cstring,),arg1)
    return err
end

function PetscOptionsPrefixPop(arg0::Type{Complex128})
    err = ccall((:PetscOptionsPrefixPop,petscComplexDouble),PetscErrorCode,())
    return err
end

function PetscOptionsReject(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscOptionsReject,petscComplexDouble),PetscErrorCode,(Cstring,Cstring),arg1,arg2)
    return err
end

function PetscOptionsGetAll(arg0::Type{Complex128},arg1::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscOptionsGetAll,petscComplexDouble),PetscErrorCode,(Ptr{Ptr{UInt8}},),arg1)
    return err
end

function PetscOptionsGetenv(arg0::Type{Complex128},arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer,arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetenv,petscComplexDouble),PetscErrorCode,(comm_type,Cstring,Cstring,Cint,Ptr{PetscBool}),arg1,arg2,arg3,size_t,arg4)
    return err
end

function PetscOptionsStringToInt(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscOptionsStringToInt,petscComplexDouble),PetscErrorCode,(Cstring,Ptr{Int64}),arg1,arg2)
    return err
end

function PetscOptionsStringToReal(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscOptionsStringToReal,petscComplexDouble),PetscErrorCode,(Cstring,Ptr{Float64}),arg1,arg2)
    return err
end

function PetscOptionsStringToBool(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsStringToBool,petscComplexDouble),PetscErrorCode,(Cstring,Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscOptionsMonitorSet(arg0::Type{Complex128},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscOptionsMonitorSet,petscComplexDouble),PetscErrorCode,(Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function PetscOptionsMonitorCancel(arg0::Type{Complex128})
    err = ccall((:PetscOptionsMonitorCancel,petscComplexDouble),PetscErrorCode,())
    return err
end

function PetscOptionsMonitorDefault(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscOptionsMonitorDefault,petscComplexDouble),PetscErrorCode,(Cstring,Cstring,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function PetscOptionsBegin_Private(arg1::Union{Ptr{PetscOptions{Complex128}},StridedArray{PetscOptions{Complex128}},Ptr{PetscOptions{Complex128}},Ref{PetscOptions{Complex128}}},arg2::MPI_Comm,arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscOptionsBegin_Private,petscComplexDouble),PetscErrorCode,(Ptr{PetscOptions{Complex128}},comm_type,Cstring,Cstring,Cstring),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscObjectOptionsBegin_Private(arg1::Union{Ptr{PetscOptions{Complex128}},StridedArray{PetscOptions{Complex128}},Ptr{PetscOptions{Complex128}},Ref{PetscOptions{Complex128}}},arg2::PetscObject{Complex128})
    err = ccall((:PetscObjectOptionsBegin_Private,petscComplexDouble),PetscErrorCode,(Ptr{PetscOptions{Complex128}},PetscObject{Complex128}),arg1,arg2)
    return err
end

function PetscOptionsEnd_Private(arg1::Union{Ptr{PetscOptions{Complex128}},StridedArray{PetscOptions{Complex128}},Ptr{PetscOptions{Complex128}},Ref{PetscOptions{Complex128}}})
    err = ccall((:PetscOptionsEnd_Private,petscComplexDouble),PetscErrorCode,(Ptr{PetscOptions{Complex128}},),arg1)
    return err
end

function PetscOptionsHead(arg1::Union{Ptr{PetscOptions{Complex128}},StridedArray{PetscOptions{Complex128}},Ptr{PetscOptions{Complex128}},Ref{PetscOptions{Complex128}}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscOptionsHead,petscComplexDouble),PetscErrorCode,(Ptr{PetscOptions{Complex128}},Cstring),arg1,arg2)
    return err
end

function PetscOptionsEnum_Private(arg1::Union{Ptr{PetscOptions{Complex128}},StridedArray{PetscOptions{Complex128}},Ptr{PetscOptions{Complex128}},Ref{PetscOptions{Complex128}}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg6::PetscEnum,arg7::Union{Ptr{PetscEnum},StridedArray{PetscEnum},Ptr{PetscEnum},Ref{PetscEnum}},arg8::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsEnum_Private,petscComplexDouble),PetscErrorCode,(Ptr{PetscOptions{Complex128}},Cstring,Cstring,Cstring,Ptr{Ptr{UInt8}},PetscEnum,Ptr{PetscEnum},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function PetscOptionsInt_Private(arg1::Union{Ptr{PetscOptions{Complex128}},StridedArray{PetscOptions{Complex128}},Ptr{PetscOptions{Complex128}},Ref{PetscOptions{Complex128}}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsInt_Private,petscComplexDouble),PetscErrorCode,(Ptr{PetscOptions{Complex128}},Cstring,Cstring,Cstring,Int64,Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function PetscOptionsReal_Private(arg1::Union{Ptr{PetscOptions{Complex128}},StridedArray{PetscOptions{Complex128}},Ptr{PetscOptions{Complex128}},Ref{PetscOptions{Complex128}}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Float64,arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg7::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsReal_Private,petscComplexDouble),PetscErrorCode,(Ptr{PetscOptions{Complex128}},Cstring,Cstring,Cstring,Float64,Ptr{Float64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function PetscOptionsScalar_Private(arg1::Union{Ptr{PetscOptions{Complex128}},StridedArray{PetscOptions{Complex128}},Ptr{PetscOptions{Complex128}},Ref{PetscOptions{Complex128}}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Complex128,arg6::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg7::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsScalar_Private,petscComplexDouble),PetscErrorCode,(Ptr{PetscOptions{Complex128}},Cstring,Cstring,Cstring,Complex128,Ptr{Complex128},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function PetscOptionsName_Private(arg1::Union{Ptr{PetscOptions{Complex128}},StridedArray{PetscOptions{Complex128}},Ptr{PetscOptions{Complex128}},Ref{PetscOptions{Complex128}}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsName_Private,petscComplexDouble),PetscErrorCode,(Ptr{PetscOptions{Complex128}},Cstring,Cstring,Cstring,Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscOptionsString_Private(arg1::Union{Ptr{PetscOptions{Complex128}},StridedArray{PetscOptions{Complex128}},Ptr{PetscOptions{Complex128}},Ref{PetscOptions{Complex128}}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg6::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer,arg7::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsString_Private,petscComplexDouble),PetscErrorCode,(Ptr{PetscOptions{Complex128}},Cstring,Cstring,Cstring,Cstring,Cstring,Cint,Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,size_t,arg7)
    return err
end

function PetscOptionsBool_Private(arg1::Union{Ptr{PetscOptions{Complex128}},StridedArray{PetscOptions{Complex128}},Ptr{PetscOptions{Complex128}},Ref{PetscOptions{Complex128}}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::PetscBool,arg6::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg7::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsBool_Private,petscComplexDouble),PetscErrorCode,(Ptr{PetscOptions{Complex128}},Cstring,Cstring,Cstring,PetscBool,Ptr{PetscBool},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function PetscOptionsBoolGroupBegin_Private(arg1::Union{Ptr{PetscOptions{Complex128}},StridedArray{PetscOptions{Complex128}},Ptr{PetscOptions{Complex128}},Ref{PetscOptions{Complex128}}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsBoolGroupBegin_Private,petscComplexDouble),PetscErrorCode,(Ptr{PetscOptions{Complex128}},Cstring,Cstring,Cstring,Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscOptionsBoolGroup_Private(arg1::Union{Ptr{PetscOptions{Complex128}},StridedArray{PetscOptions{Complex128}},Ptr{PetscOptions{Complex128}},Ref{PetscOptions{Complex128}}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsBoolGroup_Private,petscComplexDouble),PetscErrorCode,(Ptr{PetscOptions{Complex128}},Cstring,Cstring,Cstring,Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscOptionsBoolGroupEnd_Private(arg1::Union{Ptr{PetscOptions{Complex128}},StridedArray{PetscOptions{Complex128}},Ptr{PetscOptions{Complex128}},Ref{PetscOptions{Complex128}}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsBoolGroupEnd_Private,petscComplexDouble),PetscErrorCode,(Ptr{PetscOptions{Complex128}},Cstring,Cstring,Cstring,Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscOptionsFList_Private(arg1::Union{Ptr{PetscOptions{Complex128}},StridedArray{PetscOptions{Complex128}},Ptr{PetscOptions{Complex128}},Ref{PetscOptions{Complex128}}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::PetscFunctionList{Complex128},arg6::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg7::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer,arg8::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsFList_Private,petscComplexDouble),PetscErrorCode,(Ptr{PetscOptions{Complex128}},Cstring,Cstring,Cstring,PetscFunctionList,Cstring,Cstring,Cint,Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,size_t,arg8)
    return err
end

function PetscOptionsEList_Private(arg1::Union{Ptr{PetscOptions{Complex128}},StridedArray{PetscOptions{Complex128}},Ptr{PetscOptions{Complex128}},Ref{PetscOptions{Complex128}}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg6::Integer,arg7::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg8::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg9::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsEList_Private,petscComplexDouble),PetscErrorCode,(Ptr{PetscOptions{Complex128}},Cstring,Cstring,Cstring,Ptr{Ptr{UInt8}},Int64,Cstring,Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
    return err
end

function PetscOptionsRealArray_Private(arg1::Union{Ptr{PetscOptions{Complex128}},StridedArray{PetscOptions{Complex128}},Ptr{PetscOptions{Complex128}},Ref{PetscOptions{Complex128}}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsRealArray_Private,petscComplexDouble),PetscErrorCode,(Ptr{PetscOptions{Complex128}},Cstring,Cstring,Cstring,Ptr{Float64},Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function PetscOptionsScalarArray_Private(arg1::Union{Ptr{PetscOptions{Complex128}},StridedArray{PetscOptions{Complex128}},Ptr{PetscOptions{Complex128}},Ref{PetscOptions{Complex128}}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsScalarArray_Private,petscComplexDouble),PetscErrorCode,(Ptr{PetscOptions{Complex128}},Cstring,Cstring,Cstring,Ptr{Complex128},Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function PetscOptionsIntArray_Private(arg1::Union{Ptr{PetscOptions{Complex128}},StridedArray{PetscOptions{Complex128}},Ptr{PetscOptions{Complex128}},Ref{PetscOptions{Complex128}}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsIntArray_Private,petscComplexDouble),PetscErrorCode,(Ptr{PetscOptions{Complex128}},Cstring,Cstring,Cstring,Ptr{Int64},Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function PetscOptionsStringArray_Private(arg1::Union{Ptr{PetscOptions{Complex128}},StridedArray{PetscOptions{Complex128}},Ptr{PetscOptions{Complex128}},Ref{PetscOptions{Complex128}}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsStringArray_Private,petscComplexDouble),PetscErrorCode,(Ptr{PetscOptions{Complex128}},Cstring,Cstring,Cstring,Ptr{Ptr{UInt8}},Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function PetscOptionsBoolArray_Private(arg1::Union{Ptr{PetscOptions{Complex128}},StridedArray{PetscOptions{Complex128}},Ptr{PetscOptions{Complex128}},Ref{PetscOptions{Complex128}}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsBoolArray_Private,petscComplexDouble),PetscErrorCode,(Ptr{PetscOptions{Complex128}},Cstring,Cstring,Cstring,Ptr{PetscBool},Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function PetscOptionsEnumArray_Private(arg1::Union{Ptr{PetscOptions{Complex128}},StridedArray{PetscOptions{Complex128}},Ptr{PetscOptions{Complex128}},Ref{PetscOptions{Complex128}}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg6::Union{Ptr{PetscEnum},StridedArray{PetscEnum},Ptr{PetscEnum},Ref{PetscEnum}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsEnumArray_Private,petscComplexDouble),PetscErrorCode,(Ptr{PetscOptions{Complex128}},Cstring,Cstring,Cstring,Ptr{Ptr{UInt8}},Ptr{PetscEnum},Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function PetscOptionsSetFromOptions(arg0::Type{Complex128})
    err = ccall((:PetscOptionsSetFromOptions,petscComplexDouble),PetscErrorCode,())
    return err
end

function PetscOptionsSAWsDestroy(arg0::Type{Complex128})
    err = ccall((:PetscOptionsSAWsDestroy,petscComplexDouble),PetscErrorCode,())
    return err
end

function PetscMemoryShowUsage(arg1::PetscViewer{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscMemoryShowUsage,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Cstring),arg1,arg2)
    return err
end

function PetscObjectPrintClassNamePrefixType(arg1::PetscObject{Complex128},arg2::PetscViewer{Complex128})
    err = ccall((:PetscObjectPrintClassNamePrefixType,petscComplexDouble),PetscErrorCode,(PetscObject{Complex128},PetscViewer{Complex128}),arg1,arg2)
    return err
end

function PetscObjectView(arg1::PetscObject{Complex128},arg2::PetscViewer{Complex128})
    err = ccall((:PetscObjectView,petscComplexDouble),PetscErrorCode,(PetscObject{Complex128},PetscViewer{Complex128}),arg1,arg2)
    return err
end

function PetscObjectQueryFunction_Private(arg1::PetscObject{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:PetscObjectQueryFunction_Private,petscComplexDouble),PetscErrorCode,(PetscObject{Complex128},Cstring,Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function PetscObjectSetOptionsPrefix(arg1::PetscObject{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscObjectSetOptionsPrefix,petscComplexDouble),PetscErrorCode,(PetscObject{Complex128},Cstring),arg1,arg2)
    return err
end

function PetscObjectAppendOptionsPrefix(arg1::PetscObject{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscObjectAppendOptionsPrefix,petscComplexDouble),PetscErrorCode,(PetscObject{Complex128},Cstring),arg1,arg2)
    return err
end

function PetscObjectPrependOptionsPrefix(arg1::PetscObject{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscObjectPrependOptionsPrefix,petscComplexDouble),PetscErrorCode,(PetscObject{Complex128},Cstring),arg1,arg2)
    return err
end

function PetscObjectGetOptionsPrefix(arg1::PetscObject{Complex128},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscObjectGetOptionsPrefix,petscComplexDouble),PetscErrorCode,(PetscObject{Complex128},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PetscObjectChangeTypeName(arg1::PetscObject{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscObjectChangeTypeName,petscComplexDouble),PetscErrorCode,(PetscObject{Complex128},Cstring),arg1,arg2)
    return err
end

function PetscObjectRegisterDestroy(arg1::PetscObject{Complex128})
    err = ccall((:PetscObjectRegisterDestroy,petscComplexDouble),PetscErrorCode,(PetscObject{Complex128},),arg1)
    return err
end

function PetscObjectRegisterDestroyAll(arg0::Type{Complex128})
    err = ccall((:PetscObjectRegisterDestroyAll,petscComplexDouble),PetscErrorCode,())
    return err
end

function PetscObjectViewFromOptions(arg1::PetscObject{Complex128},arg2::PetscObject{Complex128},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscObjectViewFromOptions,petscComplexDouble),PetscErrorCode,(PetscObject{Complex128},PetscObject{Complex128},Cstring),arg1,arg2,arg3)
    return err
end

function PetscObjectName(arg1::PetscObject{Complex128})
    err = ccall((:PetscObjectName,petscComplexDouble),PetscErrorCode,(PetscObject{Complex128},),arg1)
    return err
end

function PetscObjectTypeCompare(arg1::PetscObject{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscObjectTypeCompare,petscComplexDouble),PetscErrorCode,(PetscObject{Complex128},Cstring,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function PetscRegisterFinalize(arg0::Type{Complex128},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscRegisterFinalize,petscComplexDouble),PetscErrorCode,(Ptr{Void},),arg1)
    return err
end

function PetscRegisterFinalizeAll(arg0::Type{Complex128})
    err = ccall((:PetscRegisterFinalizeAll,petscComplexDouble),PetscErrorCode,())
    return err
end

function PetscDLOpen(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::PetscDLMode,arg3::Union{Ptr{PetscDLHandle},StridedArray{PetscDLHandle},Ptr{PetscDLHandle},Ref{PetscDLHandle}})
    err = ccall((:PetscDLOpen,petscComplexDouble),PetscErrorCode,(Cstring,PetscDLMode,Ptr{PetscDLHandle}),arg1,arg2,arg3)
    return err
end

function PetscDLClose(arg0::Type{Complex128},arg1::Union{Ptr{PetscDLHandle},StridedArray{PetscDLHandle},Ptr{PetscDLHandle},Ref{PetscDLHandle}})
    err = ccall((:PetscDLClose,petscComplexDouble),PetscErrorCode,(Ptr{PetscDLHandle},),arg1)
    return err
end

function PetscDLSym(arg0::Type{Complex128},arg1::PetscDLHandle,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:PetscDLSym,petscComplexDouble),PetscErrorCode,(PetscDLHandle,Cstring,Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

#= skipping function with undefined symbols: 
 function PetscObjectsDump(arg0::Type{Complex128},arg1::Union{Ptr{FILE},StridedArray{FILE},Ptr{FILE},Ref{FILE}},arg2::PetscBool)
    ccall((:PetscObjectsDump,petscComplexDouble),PetscErrorCode,(Ptr{FILE},PetscBool),arg1,arg2)
end 
=#
function PetscObjectListDestroy(arg1::Union{Ptr{PetscObjectList{Complex128}},StridedArray{PetscObjectList{Complex128}},Ptr{PetscObjectList{Complex128}},Ref{PetscObjectList{Complex128}}})
    err = ccall((:PetscObjectListDestroy,petscComplexDouble),PetscErrorCode,(Ptr{PetscObjectList},),arg1)
    return err
end

function PetscObjectListFind(arg1::PetscObjectList{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{PetscObject{Complex128}},StridedArray{PetscObject{Complex128}},Ptr{PetscObject{Complex128}},Ref{PetscObject{Complex128}}})
    err = ccall((:PetscObjectListFind,petscComplexDouble),PetscErrorCode,(PetscObjectList,Cstring,Ptr{PetscObject{Complex128}}),arg1,arg2,arg3)
    return err
end

function PetscObjectListReverseFind(arg1::PetscObjectList{Complex128},arg2::PetscObject{Complex128},arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscObjectListReverseFind,petscComplexDouble),PetscErrorCode,(PetscObjectList,PetscObject{Complex128},Ptr{Ptr{UInt8}},Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function PetscObjectListAdd(arg1::Union{Ptr{PetscObjectList{Complex128}},StridedArray{PetscObjectList{Complex128}},Ptr{PetscObjectList{Complex128}},Ref{PetscObjectList{Complex128}}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::PetscObject{Complex128})
    err = ccall((:PetscObjectListAdd,petscComplexDouble),PetscErrorCode,(Ptr{PetscObjectList},Cstring,PetscObject{Complex128}),arg1,arg2,arg3)
    return err
end

function PetscObjectListRemoveReference(arg1::Union{Ptr{PetscObjectList{Complex128}},StridedArray{PetscObjectList{Complex128}},Ptr{PetscObjectList{Complex128}},Ref{PetscObjectList{Complex128}}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscObjectListRemoveReference,petscComplexDouble),PetscErrorCode,(Ptr{PetscObjectList},Cstring),arg1,arg2)
    return err
end

function PetscObjectListDuplicate(arg1::PetscObjectList{Complex128},arg2::Union{Ptr{PetscObjectList{Complex128}},StridedArray{PetscObjectList{Complex128}},Ptr{PetscObjectList{Complex128}},Ref{PetscObjectList{Complex128}}})
    err = ccall((:PetscObjectListDuplicate,petscComplexDouble),PetscErrorCode,(PetscObjectList,Ptr{PetscObjectList}),arg1,arg2)
    return err
end

function PetscFunctionListAdd_Private(arg1::Union{Ptr{PetscFunctionList{Complex128}},StridedArray{PetscFunctionList{Complex128}},Ptr{PetscFunctionList{Complex128}},Ref{PetscFunctionList{Complex128}}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscFunctionListAdd_Private,petscComplexDouble),PetscErrorCode,(Ptr{PetscFunctionList},Cstring,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function PetscFunctionListDestroy(arg1::Union{Ptr{PetscFunctionList{Complex128}},StridedArray{PetscFunctionList{Complex128}},Ptr{PetscFunctionList{Complex128}},Ref{PetscFunctionList{Complex128}}})
    err = ccall((:PetscFunctionListDestroy,petscComplexDouble),PetscErrorCode,(Ptr{PetscFunctionList},),arg1)
    return err
end

function PetscFunctionListFind_Private(arg1::PetscFunctionList{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:PetscFunctionListFind_Private,petscComplexDouble),PetscErrorCode,(PetscFunctionList,Cstring,Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

#= skipping function with undefined symbols: 
 function PetscFunctionListPrintTypes(arg1::MPI_Comm,arg2::Union{Ptr{FILE},StridedArray{FILE},Ptr{FILE},Ref{FILE}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg6::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg7::PetscFunctionList{Complex128},arg8::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    ccall((:PetscFunctionListPrintTypes,petscComplexDouble),PetscErrorCode,(comm_type,Ptr{FILE},Cstring,Cstring,Cstring,Cstring,PetscFunctionList,Cstring),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
end 
=#
function PetscFunctionListDuplicate(arg1::PetscFunctionList{Complex128},arg2::Union{Ptr{PetscFunctionList{Complex128}},StridedArray{PetscFunctionList{Complex128}},Ptr{PetscFunctionList{Complex128}},Ref{PetscFunctionList{Complex128}}})
    err = ccall((:PetscFunctionListDuplicate,petscComplexDouble),PetscErrorCode,(PetscFunctionList,Ptr{PetscFunctionList}),arg1,arg2)
    return err
end

function PetscFunctionListView(arg1::PetscFunctionList{Complex128},arg2::PetscViewer{Complex128})
    err = ccall((:PetscFunctionListView,petscComplexDouble),PetscErrorCode,(PetscFunctionList,PetscViewer{Complex128}),arg1,arg2)
    return err
end

function PetscFunctionListGet(arg1::PetscFunctionList{Complex128},arg2::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}},arg3::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:PetscFunctionListGet,petscComplexDouble),PetscErrorCode,(PetscFunctionList,Ptr{Ptr{Ptr{UInt8}}},Ptr{Cint}),arg1,arg2,arg3)
    return err
end

function PetscDLLibraryAppend(arg1::MPI_Comm,arg2::Union{Ptr{PetscDLLibrary{Complex128}},StridedArray{PetscDLLibrary{Complex128}},Ptr{PetscDLLibrary{Complex128}},Ref{PetscDLLibrary{Complex128}}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscDLLibraryAppend,petscComplexDouble),PetscErrorCode,(comm_type,Ptr{PetscDLLibrary},Cstring),arg1,arg2,arg3)
    return err
end

function PetscDLLibraryPrepend(arg1::MPI_Comm,arg2::Union{Ptr{PetscDLLibrary{Complex128}},StridedArray{PetscDLLibrary{Complex128}},Ptr{PetscDLLibrary{Complex128}},Ref{PetscDLLibrary{Complex128}}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscDLLibraryPrepend,petscComplexDouble),PetscErrorCode,(comm_type,Ptr{PetscDLLibrary},Cstring),arg1,arg2,arg3)
    return err
end

function PetscDLLibrarySym(arg1::MPI_Comm,arg2::Union{Ptr{PetscDLLibrary{Complex128}},StridedArray{PetscDLLibrary{Complex128}},Ptr{PetscDLLibrary{Complex128}},Ref{PetscDLLibrary{Complex128}}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:PetscDLLibrarySym,petscComplexDouble),PetscErrorCode,(comm_type,Ptr{PetscDLLibrary},Cstring,Cstring,Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDLLibraryPrintPath(arg1::PetscDLLibrary{Complex128})
    err = ccall((:PetscDLLibraryPrintPath,petscComplexDouble),PetscErrorCode,(PetscDLLibrary,),arg1)
    return err
end

function PetscDLLibraryRetrieve(arg0::Type{Complex128},arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer,arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscDLLibraryRetrieve,petscComplexDouble),PetscErrorCode,(comm_type,Cstring,Cstring,Cint,Ptr{PetscBool}),arg1,arg2,arg3,size_t,arg4)
    return err
end

function PetscDLLibraryOpen(arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{PetscDLLibrary{Complex128}},StridedArray{PetscDLLibrary{Complex128}},Ptr{PetscDLLibrary{Complex128}},Ref{PetscDLLibrary{Complex128}}})
    err = ccall((:PetscDLLibraryOpen,petscComplexDouble),PetscErrorCode,(comm_type,Cstring,Ptr{PetscDLLibrary}),arg1,arg2,arg3)
    return err
end

function PetscDLLibraryClose(arg1::PetscDLLibrary{Complex128})
    err = ccall((:PetscDLLibraryClose,petscComplexDouble),PetscErrorCode,(PetscDLLibrary,),arg1)
    return err
end

function PetscSplitOwnership(arg0::Type{Complex128},arg1::MPI_Comm,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSplitOwnership,petscComplexDouble),PetscErrorCode,(comm_type,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PetscSplitOwnershipBlock(arg0::Type{Complex128},arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSplitOwnershipBlock,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function PetscSequentialPhaseBegin(arg0::Type{Complex128},arg1::MPI_Comm,arg2::PetscMPIInt)
    err = ccall((:PetscSequentialPhaseBegin,petscComplexDouble),PetscErrorCode,(comm_type,PetscMPIInt),arg1,arg2)
    return err
end

function PetscSequentialPhaseEnd(arg0::Type{Complex128},arg1::MPI_Comm,arg2::PetscMPIInt)
    err = ccall((:PetscSequentialPhaseEnd,petscComplexDouble),PetscErrorCode,(comm_type,PetscMPIInt),arg1,arg2)
    return err
end

function PetscBarrier(arg1::PetscObject{Complex128})
    err = ccall((:PetscBarrier,petscComplexDouble),PetscErrorCode,(PetscObject{Complex128},),arg1)
    return err
end

#= skipping function with undefined symbols: 
 function PetscMPIDump(arg0::Type{Complex128},arg1::Union{Ptr{FILE},StridedArray{FILE},Ptr{FILE},Ref{FILE}})
    ccall((:PetscMPIDump,petscComplexDouble),PetscErrorCode,(Ptr{FILE},),arg1)
end 
=#
function PetscInfoDeactivateClass(arg0::Type{Complex128},arg1::PetscClassId)
    err = ccall((:PetscInfoDeactivateClass,petscComplexDouble),PetscErrorCode,(PetscClassId,),arg1)
    return err
end

function PetscInfoActivateClass(arg0::Type{Complex128},arg1::PetscClassId)
    err = ccall((:PetscInfoActivateClass,petscComplexDouble),PetscErrorCode,(PetscClassId,),arg1)
    return err
end

function PetscLogGetStageLog(arg1::Union{Ptr{PetscStageLog{Complex128}},StridedArray{PetscStageLog{Complex128}},Ptr{PetscStageLog{Complex128}},Ref{PetscStageLog{Complex128}}})
    err = ccall((:PetscLogGetStageLog,petscComplexDouble),PetscErrorCode,(Ptr{PetscStageLog},),arg1)
    return err
end

function PetscStageLogGetCurrent(arg1::PetscStageLog{Complex128},arg2::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:PetscStageLogGetCurrent,petscComplexDouble),PetscErrorCode,(PetscStageLog,Ptr{Cint}),arg1,arg2)
    return err
end

function PetscStageLogGetEventPerfLog(arg1::PetscStageLog{Complex128},arg2::Integer,arg3::Union{Ptr{PetscEventPerfLog{Complex128}},StridedArray{PetscEventPerfLog{Complex128}},Ptr{PetscEventPerfLog{Complex128}},Ref{PetscEventPerfLog{Complex128}}})
    err = ccall((:PetscStageLogGetEventPerfLog,petscComplexDouble),PetscErrorCode,(PetscStageLog,Cint,Ptr{PetscEventPerfLog}),arg1,arg2,arg3)
    return err
end

function PetscLogObjectParent(arg1::PetscObject{Complex128},arg2::PetscObject{Complex128})
    err = ccall((:PetscLogObjectParent,petscComplexDouble),PetscErrorCode,(PetscObject{Complex128},PetscObject{Complex128}),arg1,arg2)
    return err
end

function PetscLogObjectMemory(arg1::PetscObject{Complex128},arg2::Float64)
    err = ccall((:PetscLogObjectMemory,petscComplexDouble),PetscErrorCode,(PetscObject{Complex128},Float64),arg1,arg2)
    return err
end

function PetscIntStackCreate(arg1::Union{Ptr{PetscIntStack{Complex128}},StridedArray{PetscIntStack{Complex128}},Ptr{PetscIntStack{Complex128}},Ref{PetscIntStack{Complex128}}})
    err = ccall((:PetscIntStackCreate,petscComplexDouble),PetscErrorCode,(Ptr{PetscIntStack},),arg1)
    return err
end

function PetscIntStackDestroy(arg1::PetscIntStack{Complex128})
    err = ccall((:PetscIntStackDestroy,petscComplexDouble),PetscErrorCode,(PetscIntStack,),arg1)
    return err
end

function PetscIntStackPush(arg1::PetscIntStack{Complex128},arg2::Integer)
    err = ccall((:PetscIntStackPush,petscComplexDouble),PetscErrorCode,(PetscIntStack,Cint),arg1,arg2)
    return err
end

function PetscIntStackPop(arg1::PetscIntStack{Complex128},arg2::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:PetscIntStackPop,petscComplexDouble),PetscErrorCode,(PetscIntStack,Ptr{Cint}),arg1,arg2)
    return err
end

function PetscIntStackTop(arg1::PetscIntStack{Complex128},arg2::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:PetscIntStackTop,petscComplexDouble),PetscErrorCode,(PetscIntStack,Ptr{Cint}),arg1,arg2)
    return err
end

function PetscIntStackEmpty(arg1::PetscIntStack{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscIntStackEmpty,petscComplexDouble),PetscErrorCode,(PetscIntStack,Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscFixFilename(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscFixFilename,petscComplexDouble),PetscErrorCode,(Cstring,Cstring),arg1,arg2)
    return err
end

#= skipping function with undefined symbols: 
 function PetscFOpen(arg0::Type{Complex128},arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{Ptr{Ptr{FILE}},StridedArray{Ptr{FILE}},Ptr{Ptr{FILE}},Ref{Ptr{FILE}}})
    ccall((:PetscFOpen,petscComplexDouble),PetscErrorCode,(comm_type,Cstring,Cstring,Ptr{Ptr{FILE}}),arg1,arg2,arg3,arg4)
end 
=#
#= skipping function with undefined symbols: 
 function PetscFClose(arg0::Type{Complex128},arg1::MPI_Comm,arg2::Union{Ptr{FILE},StridedArray{FILE},Ptr{FILE},Ref{FILE}})
    ccall((:PetscFClose,petscComplexDouble),PetscErrorCode,(comm_type,Ptr{FILE}),arg1,arg2)
end 
=#
function PetscVSNPrintf(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}},va_list::Integer)
    err = ccall((:PetscVSNPrintf,petscComplexDouble),PetscErrorCode,(Cstring,Cint,Cstring,Ptr{Cint},Cint),arg1,size_t,arg2,arg3,va_list)
    return err
end

#= skipping function with undefined symbols: 
 function PetscVFPrintfDefault(arg0::Type{Complex128},arg1::Union{Ptr{FILE},StridedArray{FILE},Ptr{FILE},Ref{FILE}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},va_list::Integer)
    ccall((:PetscVFPrintfDefault,petscComplexDouble),PetscErrorCode,(Ptr{FILE},Cstring,Cint),arg1,arg2,va_list)
end 
=#
#= skipping function with undefined symbols: 
 function PetscSynchronizedFlush(arg0::Type{Complex128},arg1::MPI_Comm,arg2::Union{Ptr{FILE},StridedArray{FILE},Ptr{FILE},Ref{FILE}})
    ccall((:PetscSynchronizedFlush,petscComplexDouble),PetscErrorCode,(comm_type,Ptr{FILE}),arg1,arg2)
end 
=#
#= skipping function with undefined symbols: 
 function PetscSynchronizedFGets(arg0::Type{Complex128},arg1::MPI_Comm,arg2::Union{Ptr{FILE},StridedArray{FILE},Ptr{FILE},Ref{FILE}},size_t::Integer,arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    ccall((:PetscSynchronizedFGets,petscComplexDouble),PetscErrorCode,(comm_type,Ptr{FILE},Cint,Cstring),arg1,arg2,size_t,arg3)
end 
=#
#= skipping function with undefined symbols: 
 function PetscStartMatlab(arg0::Type{Complex128},arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{Ptr{Ptr{FILE}},StridedArray{Ptr{FILE}},Ptr{Ptr{FILE}},Ref{Ptr{FILE}}})
    ccall((:PetscStartMatlab,petscComplexDouble),PetscErrorCode,(comm_type,Cstring,Cstring,Ptr{Ptr{FILE}}),arg1,arg2,arg3,arg4)
end 
=#
#= skipping function with undefined symbols: 
 function PetscStartJava(arg0::Type{Complex128},arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{Ptr{Ptr{FILE}},StridedArray{Ptr{FILE}},Ptr{Ptr{FILE}},Ref{Ptr{FILE}}})
    ccall((:PetscStartJava,petscComplexDouble),PetscErrorCode,(comm_type,Cstring,Cstring,Ptr{Ptr{FILE}}),arg1,arg2,arg3,arg4)
end 
=#
function PetscGetPetscDir(arg0::Type{Complex128},arg1::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscGetPetscDir,petscComplexDouble),PetscErrorCode,(Ptr{Ptr{UInt8}},),arg1)
    return err
end

function PetscPopUpSelect(arg0::Type{Complex128},arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Integer,arg5::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg6::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:PetscPopUpSelect,petscComplexDouble),PetscErrorCode,(comm_type,Cstring,Cstring,Cint,Ptr{Ptr{UInt8}},Ptr{Cint}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscContainerGetPointer(arg1::PetscContainer{Complex128},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:PetscContainerGetPointer,petscComplexDouble),PetscErrorCode,(PetscContainer{Complex128},Ptr{Ptr{Void}}),arg1,arg2)
    return err
end

function PetscContainerSetPointer(arg1::PetscContainer{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscContainerSetPointer,petscComplexDouble),PetscErrorCode,(PetscContainer{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function PetscContainerDestroy(arg1::Union{Ptr{PetscContainer{Complex128}},StridedArray{PetscContainer{Complex128}},Ptr{PetscContainer{Complex128}},Ref{PetscContainer{Complex128}}})
    err = ccall((:PetscContainerDestroy,petscComplexDouble),PetscErrorCode,(Ptr{PetscContainer{Complex128}},),arg1)
    return err
end

function PetscContainerCreate(arg1::MPI_Comm,arg2::Union{Ptr{PetscContainer{Complex128}},StridedArray{PetscContainer{Complex128}},Ptr{PetscContainer{Complex128}},Ref{PetscContainer{Complex128}}})
    err = ccall((:PetscContainerCreate,petscComplexDouble),PetscErrorCode,(comm_type,Ptr{PetscContainer{Complex128}}),arg1,arg2)
    return err
end

function PetscContainerSetUserDestroy(arg1::PetscContainer{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscContainerSetUserDestroy,petscComplexDouble),PetscErrorCode,(PetscContainer{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function PetscIntView(arg1::Integer,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::PetscViewer{Complex128})
    err = ccall((:PetscIntView,petscComplexDouble),PetscErrorCode,(Int64,Ptr{Int64},PetscViewer{Complex128}),arg1,arg2,arg3)
    return err
end

function PetscRealView(arg1::Integer,arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::PetscViewer{Complex128})
    err = ccall((:PetscRealView,petscComplexDouble),PetscErrorCode,(Int64,Ptr{Float64},PetscViewer{Complex128}),arg1,arg2,arg3)
    return err
end

function PetscScalarView(arg1::Integer,arg2::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg3::PetscViewer{Complex128})
    err = ccall((:PetscScalarView,petscComplexDouble),PetscErrorCode,(Int64,Ptr{Complex128},PetscViewer{Complex128}),arg1,arg2,arg3)
    return err
end

function PetscGetHostName(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer)
    err = ccall((:PetscGetHostName,petscComplexDouble),PetscErrorCode,(Cstring,Cint),arg1,size_t)
    return err
end

function PetscGetUserName(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer)
    err = ccall((:PetscGetUserName,petscComplexDouble),PetscErrorCode,(Cstring,Cint),arg1,size_t)
    return err
end

function PetscGetProgramName(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer)
    err = ccall((:PetscGetProgramName,petscComplexDouble),PetscErrorCode,(Cstring,Cint),arg1,size_t)
    return err
end

function PetscSetProgramName(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscSetProgramName,petscComplexDouble),PetscErrorCode,(Cstring,),arg1)
    return err
end

function PetscGetDate(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer)
    err = ccall((:PetscGetDate,petscComplexDouble),PetscErrorCode,(Cstring,Cint),arg1,size_t)
    return err
end

function PetscGetVersion(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer)
    err = ccall((:PetscGetVersion,petscComplexDouble),PetscErrorCode,(Cstring,Cint),arg1,size_t)
    return err
end

function PetscSortInt(arg0::Type{Complex128},arg1::Integer,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSortInt,petscComplexDouble),PetscErrorCode,(Int64,Ptr{Int64}),arg1,arg2)
    return err
end

function PetscSortRemoveDupsInt(arg0::Type{Complex128},arg1::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSortRemoveDupsInt,petscComplexDouble),PetscErrorCode,(Ptr{Int64},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscFindInt(arg0::Type{Complex128},arg1::Integer,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscFindInt,petscComplexDouble),PetscErrorCode,(Int64,Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function PetscSortIntWithPermutation(arg0::Type{Complex128},arg1::Integer,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSortIntWithPermutation,petscComplexDouble),PetscErrorCode,(Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PetscSortStrWithPermutation(arg0::Type{Complex128},arg1::Integer,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSortStrWithPermutation,petscComplexDouble),PetscErrorCode,(Int64,Ptr{Ptr{UInt8}},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PetscSortIntWithArray(arg0::Type{Complex128},arg1::Integer,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSortIntWithArray,petscComplexDouble),PetscErrorCode,(Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PetscSortIntWithArrayPair(arg0::Type{Complex128},arg1::Integer,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSortIntWithArrayPair,petscComplexDouble),PetscErrorCode,(Int64,Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function PetscSortMPIInt(arg0::Type{Complex128},arg1::Integer,arg2::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}})
    err = ccall((:PetscSortMPIInt,petscComplexDouble),PetscErrorCode,(Int64,Ptr{PetscMPIInt}),arg1,arg2)
    return err
end

function PetscSortRemoveDupsMPIInt(arg0::Type{Complex128},arg1::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg2::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}})
    err = ccall((:PetscSortRemoveDupsMPIInt,petscComplexDouble),PetscErrorCode,(Ptr{Int64},Ptr{PetscMPIInt}),arg1,arg2)
    return err
end

function PetscSortMPIIntWithArray(arg0::Type{Complex128},arg1::PetscMPIInt,arg2::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}},arg3::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}})
    err = ccall((:PetscSortMPIIntWithArray,petscComplexDouble),PetscErrorCode,(PetscMPIInt,Ptr{PetscMPIInt},Ptr{PetscMPIInt}),arg1,arg2,arg3)
    return err
end

function PetscSortIntWithScalarArray(arg0::Type{Complex128},arg1::Integer,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}})
    err = ccall((:PetscSortIntWithScalarArray,petscComplexDouble),PetscErrorCode,(Int64,Ptr{Int64},Ptr{Complex128}),arg1,arg2,arg3)
    return err
end

function PetscSortIntWithDataArray(arg0::Type{Complex128},arg1::Integer,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},size_t::Integer,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscSortIntWithDataArray,petscComplexDouble),PetscErrorCode,(Int64,Ptr{Int64},Ptr{Void},Cint,Ptr{Void}),arg1,arg2,arg3,size_t,arg4)
    return err
end

function PetscSortReal(arg0::Type{Complex128},arg1::Integer,arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscSortReal,petscComplexDouble),PetscErrorCode,(Int64,Ptr{Float64}),arg1,arg2)
    return err
end

function PetscSortRealWithPermutation(arg0::Type{Complex128},arg1::Integer,arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSortRealWithPermutation,petscComplexDouble),PetscErrorCode,(Int64,Ptr{Float64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PetscSortRemoveDupsReal(arg0::Type{Complex128},arg1::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscSortRemoveDupsReal,petscComplexDouble),PetscErrorCode,(Ptr{Int64},Ptr{Float64}),arg1,arg2)
    return err
end

function PetscSortSplit(arg0::Type{Complex128},arg1::Integer,arg2::Integer,arg3::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSortSplit,petscComplexDouble),PetscErrorCode,(Int64,Int64,Ptr{Complex128},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function PetscSortSplitReal(arg0::Type{Complex128},arg1::Integer,arg2::Integer,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSortSplitReal,petscComplexDouble),PetscErrorCode,(Int64,Int64,Ptr{Float64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function PetscProcessTree(arg0::Type{Complex128},arg1::Integer,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg6::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg7::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg8::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:PetscProcessTree,petscComplexDouble),PetscErrorCode,(Int64,Ptr{PetscBool},Ptr{Int64},Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function PetscMergeIntArrayPair(arg0::Type{Complex128},arg1::Integer,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg9::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:PetscMergeIntArrayPair,petscComplexDouble),PetscErrorCode,(Int64,Ptr{Int64},Ptr{Int64},Int64,Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
    return err
end

function PetscMergeIntArray(arg0::Type{Complex128},arg1::Integer,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:PetscMergeIntArray,petscComplexDouble),PetscErrorCode,(Int64,Ptr{Int64},Int64,Ptr{Int64},Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscSetDisplay(arg0::Type{Complex128})
    err = ccall((:PetscSetDisplay,petscComplexDouble),PetscErrorCode,())
    return err
end

function PetscGetDisplay(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer)
    err = ccall((:PetscGetDisplay,petscComplexDouble),PetscErrorCode,(Cstring,Cint),arg1,size_t)
    return err
end

function PetscRandomInitializePackage(arg0::Type{Complex128})
    err = ccall((:PetscRandomInitializePackage,petscComplexDouble),PetscErrorCode,())
    return err
end

function PetscRandomRegister(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscRandomRegister,petscComplexDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function PetscRandomSetType(arg1::PetscRandom{Complex128},arg2::PetscRandomType)
    err = ccall((:PetscRandomSetType,petscComplexDouble),PetscErrorCode,(PetscRandom{Complex128},PetscRandomType),arg1,arg2)
    return err
end

function PetscRandomSetFromOptions(arg1::PetscRandom{Complex128})
    err = ccall((:PetscRandomSetFromOptions,petscComplexDouble),PetscErrorCode,(PetscRandom{Complex128},),arg1)
    return err
end

function PetscRandomGetType(arg1::PetscRandom{Complex128},arg2::Union{Ptr{PetscRandomType},StridedArray{PetscRandomType},Ptr{PetscRandomType},Ref{PetscRandomType}})
    err = ccall((:PetscRandomGetType,petscComplexDouble),PetscErrorCode,(PetscRandom{Complex128},Ptr{PetscRandomType}),arg1,arg2)
    return err
end

function PetscRandomCreate(arg1::MPI_Comm,arg2::Union{Ptr{PetscRandom{Complex128}},StridedArray{PetscRandom{Complex128}},Ptr{PetscRandom{Complex128}},Ref{PetscRandom{Complex128}}})
    err = ccall((:PetscRandomCreate,petscComplexDouble),PetscErrorCode,(comm_type,Ptr{PetscRandom{Complex128}}),arg1,arg2)
    return err
end

function PetscRandomGetValue(arg1::PetscRandom{Complex128},arg2::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}})
    err = ccall((:PetscRandomGetValue,petscComplexDouble),PetscErrorCode,(PetscRandom{Complex128},Ptr{Complex128}),arg1,arg2)
    return err
end

function PetscRandomGetValueReal(arg1::PetscRandom{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscRandomGetValueReal,petscComplexDouble),PetscErrorCode,(PetscRandom{Complex128},Ptr{Float64}),arg1,arg2)
    return err
end

function PetscRandomGetInterval(arg1::PetscRandom{Complex128},arg2::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg3::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}})
    err = ccall((:PetscRandomGetInterval,petscComplexDouble),PetscErrorCode,(PetscRandom{Complex128},Ptr{Complex128},Ptr{Complex128}),arg1,arg2,arg3)
    return err
end

function PetscRandomSetInterval(arg1::PetscRandom{Complex128},arg2::Complex128,arg3::Complex128)
    err = ccall((:PetscRandomSetInterval,petscComplexDouble),PetscErrorCode,(PetscRandom{Complex128},Complex128,Complex128),arg1,arg2,arg3)
    return err
end

function PetscRandomSetSeed(arg1::PetscRandom{Complex128},arg2::Culong)
    err = ccall((:PetscRandomSetSeed,petscComplexDouble),PetscErrorCode,(PetscRandom{Complex128},Culong),arg1,arg2)
    return err
end

function PetscRandomGetSeed(arg1::PetscRandom{Complex128},arg2::Union{Ptr{Culong},StridedArray{Culong},Ptr{Culong},Ref{Culong}})
    err = ccall((:PetscRandomGetSeed,petscComplexDouble),PetscErrorCode,(PetscRandom{Complex128},Ptr{Culong}),arg1,arg2)
    return err
end

function PetscRandomSeed(arg1::PetscRandom{Complex128})
    err = ccall((:PetscRandomSeed,petscComplexDouble),PetscErrorCode,(PetscRandom{Complex128},),arg1)
    return err
end

function PetscRandomDestroy(arg1::Union{Ptr{PetscRandom{Complex128}},StridedArray{PetscRandom{Complex128}},Ptr{PetscRandom{Complex128}},Ref{PetscRandom{Complex128}}})
    err = ccall((:PetscRandomDestroy,petscComplexDouble),PetscErrorCode,(Ptr{PetscRandom{Complex128}},),arg1)
    return err
end

function PetscGetFullPath(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer)
    err = ccall((:PetscGetFullPath,petscComplexDouble),PetscErrorCode,(Cstring,Cstring,Cint),arg1,arg2,size_t)
    return err
end

function PetscGetRelativePath(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer)
    err = ccall((:PetscGetRelativePath,petscComplexDouble),PetscErrorCode,(Cstring,Cstring,Cint),arg1,arg2,size_t)
    return err
end

function PetscGetWorkingDirectory(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer)
    err = ccall((:PetscGetWorkingDirectory,petscComplexDouble),PetscErrorCode,(Cstring,Cint),arg1,size_t)
    return err
end

function PetscGetRealPath(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscGetRealPath,petscComplexDouble),PetscErrorCode,(Cstring,Cstring),arg1,arg2)
    return err
end

function PetscGetHomeDirectory(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer)
    err = ccall((:PetscGetHomeDirectory,petscComplexDouble),PetscErrorCode,(Cstring,Cint),arg1,size_t)
    return err
end

function PetscTestFile(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::UInt8,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscTestFile,petscComplexDouble),PetscErrorCode,(Cstring,UInt8,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function PetscTestDirectory(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::UInt8,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscTestDirectory,petscComplexDouble),PetscErrorCode,(Cstring,UInt8,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function PetscBinaryRead(arg0::Type{Complex128},arg1::Integer,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Integer,arg4::PetscDataType)
    err = ccall((:PetscBinaryRead,petscComplexDouble),PetscErrorCode,(Cint,Ptr{Void},Int64,PetscDataType),arg1,arg2,arg3,arg4)
    return err
end

function PetscBinarySynchronizedRead(arg0::Type{Complex128},arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Integer,arg5::PetscDataType)
    err = ccall((:PetscBinarySynchronizedRead,petscComplexDouble),PetscErrorCode,(comm_type,Cint,Ptr{Void},Int64,PetscDataType),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscBinarySynchronizedWrite(arg0::Type{Complex128},arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Integer,arg5::PetscDataType,arg6::PetscBool)
    err = ccall((:PetscBinarySynchronizedWrite,petscComplexDouble),PetscErrorCode,(comm_type,Cint,Ptr{Void},Int64,PetscDataType,PetscBool),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscBinaryWrite(arg0::Type{Complex128},arg1::Integer,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Integer,arg4::PetscDataType,arg5::PetscBool)
    err = ccall((:PetscBinaryWrite,petscComplexDouble),PetscErrorCode,(Cint,Ptr{Void},Int64,PetscDataType,PetscBool),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscBinaryOpen(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::PetscFileMode,arg3::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:PetscBinaryOpen,petscComplexDouble),PetscErrorCode,(Cstring,PetscFileMode,Ptr{Cint}),arg1,arg2,arg3)
    return err
end

function PetscBinaryClose(arg0::Type{Complex128},arg1::Integer)
    err = ccall((:PetscBinaryClose,petscComplexDouble),PetscErrorCode,(Cint,),arg1)
    return err
end

function PetscSharedTmp(arg0::Type{Complex128},arg1::MPI_Comm,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscSharedTmp,petscComplexDouble),PetscErrorCode,(comm_type,Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscSharedWorkingDirectory(arg0::Type{Complex128},arg1::MPI_Comm,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscSharedWorkingDirectory,petscComplexDouble),PetscErrorCode,(comm_type,Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscGetTmp(arg0::Type{Complex128},arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer)
    err = ccall((:PetscGetTmp,petscComplexDouble),PetscErrorCode,(comm_type,Cstring,Cint),arg1,arg2,size_t)
    return err
end

function PetscFileRetrieve(arg0::Type{Complex128},arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer,arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscFileRetrieve,petscComplexDouble),PetscErrorCode,(comm_type,Cstring,Cstring,Cint,Ptr{PetscBool}),arg1,arg2,arg3,size_t,arg4)
    return err
end

function PetscLs(arg0::Type{Complex128},arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer,arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscLs,petscComplexDouble),PetscErrorCode,(comm_type,Cstring,Cstring,Cint,Ptr{PetscBool}),arg1,arg2,arg3,size_t,arg4)
    return err
end

function PetscOpenSocket(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Integer,arg3::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:PetscOpenSocket,petscComplexDouble),PetscErrorCode,(Cstring,Cint,Ptr{Cint}),arg1,arg2,arg3)
    return err
end

function PetscBinarySeek(arg0::Type{Complex128},arg1::Integer,off_t::Integer,arg2::PetscBinarySeekType,arg3::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:PetscBinarySeek,petscComplexDouble),PetscErrorCode,(Cint,Cint,PetscBinarySeekType,Ptr{Cint}),arg1,off_t,arg2,arg3)
    return err
end

function PetscBinarySynchronizedSeek(arg0::Type{Complex128},arg1::MPI_Comm,arg2::Integer,off_t::Integer,arg3::PetscBinarySeekType,arg4::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:PetscBinarySynchronizedSeek,petscComplexDouble),PetscErrorCode,(comm_type,Cint,Cint,PetscBinarySeekType,Ptr{Cint}),arg1,arg2,off_t,arg3,arg4)
    return err
end

function PetscByteSwap(arg0::Type{Complex128},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg2::PetscDataType,arg3::Integer)
    err = ccall((:PetscByteSwap,petscComplexDouble),PetscErrorCode,(Ptr{Void},PetscDataType,Int64),arg1,arg2,arg3)
    return err
end

function PetscSetDebugTerminal(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscSetDebugTerminal,petscComplexDouble),PetscErrorCode,(Cstring,),arg1)
    return err
end

function PetscSetDebugger(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::PetscBool)
    err = ccall((:PetscSetDebugger,petscComplexDouble),PetscErrorCode,(Cstring,PetscBool),arg1,arg2)
    return err
end

function PetscSetDefaultDebugger(arg0::Type{Complex128})
    err = ccall((:PetscSetDefaultDebugger,petscComplexDouble),PetscErrorCode,())
    return err
end

function PetscSetDebuggerFromString(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscSetDebuggerFromString,petscComplexDouble),PetscErrorCode,(Cstring,),arg1)
    return err
end

function PetscAttachDebugger(arg0::Type{Complex128})
    err = ccall((:PetscAttachDebugger,petscComplexDouble),PetscErrorCode,())
    return err
end

function PetscStopForDebugger(arg0::Type{Complex128})
    err = ccall((:PetscStopForDebugger,petscComplexDouble),PetscErrorCode,())
    return err
end

function PetscGatherNumberOfMessages(arg0::Type{Complex128},arg1::MPI_Comm,arg2::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}},arg3::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}},arg4::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}})
    err = ccall((:PetscGatherNumberOfMessages,petscComplexDouble),PetscErrorCode,(comm_type,Ptr{PetscMPIInt},Ptr{PetscMPIInt},Ptr{PetscMPIInt}),arg1,arg2,arg3,arg4)
    return err
end

function PetscGatherMessageLengths(arg0::Type{Complex128},arg1::MPI_Comm,arg2::PetscMPIInt,arg3::PetscMPIInt,arg4::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}},arg5::Union{Ptr{Ptr{PetscMPIInt}},StridedArray{Ptr{PetscMPIInt}},Ptr{Ptr{PetscMPIInt}},Ref{Ptr{PetscMPIInt}}},arg6::Union{Ptr{Ptr{PetscMPIInt}},StridedArray{Ptr{PetscMPIInt}},Ptr{Ptr{PetscMPIInt}},Ref{Ptr{PetscMPIInt}}})
    err = ccall((:PetscGatherMessageLengths,petscComplexDouble),PetscErrorCode,(comm_type,PetscMPIInt,PetscMPIInt,Ptr{PetscMPIInt},Ptr{Ptr{PetscMPIInt}},Ptr{Ptr{PetscMPIInt}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscGatherMessageLengths2(arg0::Type{Complex128},arg1::MPI_Comm,arg2::PetscMPIInt,arg3::PetscMPIInt,arg4::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}},arg5::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}},arg6::Union{Ptr{Ptr{PetscMPIInt}},StridedArray{Ptr{PetscMPIInt}},Ptr{Ptr{PetscMPIInt}},Ref{Ptr{PetscMPIInt}}},arg7::Union{Ptr{Ptr{PetscMPIInt}},StridedArray{Ptr{PetscMPIInt}},Ptr{Ptr{PetscMPIInt}},Ref{Ptr{PetscMPIInt}}},arg8::Union{Ptr{Ptr{PetscMPIInt}},StridedArray{Ptr{PetscMPIInt}},Ptr{Ptr{PetscMPIInt}},Ref{Ptr{PetscMPIInt}}})
    err = ccall((:PetscGatherMessageLengths2,petscComplexDouble),PetscErrorCode,(comm_type,PetscMPIInt,PetscMPIInt,Ptr{PetscMPIInt},Ptr{PetscMPIInt},Ptr{Ptr{PetscMPIInt}},Ptr{Ptr{PetscMPIInt}},Ptr{Ptr{PetscMPIInt}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

#= skipping function with undefined symbols: 
 function PetscPostIrecvInt(arg0::Type{Complex128},arg1::MPI_Comm,arg2::PetscMPIInt,arg3::PetscMPIInt,arg4::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}},arg5::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}},arg6::Union{Ptr{Ptr{Ptr{Int64}}},StridedArray{Ptr{Ptr{Int64}}},Ptr{Ptr{Ptr{Int64}}},Ref{Ptr{Ptr{Int64}}}},arg7::Union{Ptr{Ptr{MPI_Request}},StridedArray{Ptr{MPI_Request}},Ptr{Ptr{MPI_Request}},Ref{Ptr{MPI_Request}}})
    ccall((:PetscPostIrecvInt,petscComplexDouble),PetscErrorCode,(comm_type,PetscMPIInt,PetscMPIInt,Ptr{PetscMPIInt},Ptr{PetscMPIInt},Ptr{Ptr{Ptr{Int64}}},Ptr{Ptr{MPI_Request}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end 
=#
#= skipping function with undefined symbols: 
 function PetscPostIrecvScalar(arg0::Type{Complex128},arg1::MPI_Comm,arg2::PetscMPIInt,arg3::PetscMPIInt,arg4::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}},arg5::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}},arg6::Union{Ptr{Ptr{Ptr{Complex128}}},StridedArray{Ptr{Ptr{Complex128}}},Ptr{Ptr{Ptr{Complex128}}},Ref{Ptr{Ptr{Complex128}}}},arg7::Union{Ptr{Ptr{MPI_Request}},StridedArray{Ptr{MPI_Request}},Ptr{Ptr{MPI_Request}},Ref{Ptr{MPI_Request}}})
    ccall((:PetscPostIrecvScalar,petscComplexDouble),PetscErrorCode,(comm_type,PetscMPIInt,PetscMPIInt,Ptr{PetscMPIInt},Ptr{PetscMPIInt},Ptr{Ptr{Ptr{Complex128}}},Ptr{Ptr{MPI_Request}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end 
=#
#= skipping function with undefined symbols: 
 function PetscCommBuildTwoSided(arg0::Type{Complex128},arg1::MPI_Comm,arg2::PetscMPIInt,arg3::MPI_Datatype,arg4::Integer,arg5::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Ptr{PetscMPIInt}},StridedArray{Ptr{PetscMPIInt}},Ptr{Ptr{PetscMPIInt}},Ref{Ptr{PetscMPIInt}}},arg9::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:PetscCommBuildTwoSided,petscComplexDouble),PetscErrorCode,(comm_type,PetscMPIInt,MPI_Datatype,Int64,Ptr{PetscMPIInt},Ptr{Void},Ptr{Int64},Ptr{Ptr{PetscMPIInt}},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
end 
=#
function PetscCommBuildTwoSidedSetType(arg0::Type{Complex128},arg1::MPI_Comm,arg2::PetscBuildTwoSidedType)
    err = ccall((:PetscCommBuildTwoSidedSetType,petscComplexDouble),PetscErrorCode,(comm_type,PetscBuildTwoSidedType),arg1,arg2)
    return err
end

function PetscCommBuildTwoSidedGetType(arg0::Type{Complex128},arg1::MPI_Comm,arg2::Union{Ptr{PetscBuildTwoSidedType},StridedArray{PetscBuildTwoSidedType},Ptr{PetscBuildTwoSidedType},Ref{PetscBuildTwoSidedType}})
    err = ccall((:PetscCommBuildTwoSidedGetType,petscComplexDouble),PetscErrorCode,(comm_type,Ptr{PetscBuildTwoSidedType}),arg1,arg2)
    return err
end

function PetscSSEIsEnabled(arg0::Type{Complex128},arg1::MPI_Comm,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscSSEIsEnabled,petscComplexDouble),PetscErrorCode,(comm_type,Ptr{PetscBool},Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function PetscObjectComm(arg1::PetscObject{Complex128})
    err = ccall((:PetscObjectComm,petscComplexDouble),MPI_Comm,(PetscObject{Complex128},),arg1)
    return err
end

function PetscSubcommDestroy(arg1::Union{Ptr{PetscSubcomm{Complex128}},StridedArray{PetscSubcomm{Complex128}},Ptr{PetscSubcomm{Complex128}},Ref{PetscSubcomm{Complex128}}})
    err = ccall((:PetscSubcommDestroy,petscComplexDouble),PetscErrorCode,(Ptr{PetscSubcomm},),arg1)
    return err
end

function PetscSubcommSetNumber(arg1::PetscSubcomm{Complex128},arg2::Integer)
    err = ccall((:PetscSubcommSetNumber,petscComplexDouble),PetscErrorCode,(PetscSubcomm,Int64),arg1,arg2)
    return err
end

function PetscSubcommSetType(arg1::PetscSubcomm{Complex128},arg2::PetscSubcommType)
    err = ccall((:PetscSubcommSetType,petscComplexDouble),PetscErrorCode,(PetscSubcomm,PetscSubcommType),arg1,arg2)
    return err
end

function PetscSubcommSetTypeGeneral(arg1::PetscSubcomm{Complex128},arg2::PetscMPIInt,arg3::PetscMPIInt)
    err = ccall((:PetscSubcommSetTypeGeneral,petscComplexDouble),PetscErrorCode,(PetscSubcomm,PetscMPIInt,PetscMPIInt),arg1,arg2,arg3)
    return err
end

function PetscSubcommView(arg1::PetscSubcomm{Complex128},arg2::PetscViewer{Complex128})
    err = ccall((:PetscSubcommView,petscComplexDouble),PetscErrorCode,(PetscSubcomm,PetscViewer{Complex128}),arg1,arg2)
    return err
end

function PetscSubcommSetFromOptions(arg1::PetscSubcomm{Complex128})
    err = ccall((:PetscSubcommSetFromOptions,petscComplexDouble),PetscErrorCode,(PetscSubcomm,),arg1)
    return err
end

function PetscSegBufferCreate(arg0::Type{Complex128})
    err = ccall((:PetscSegBufferCreate,petscComplexDouble),PetscErrorCode,())
    return err
end

function PetscSegBufferDestroy(arg1::Union{Ptr{PetscSegBuffer{Complex128}},StridedArray{PetscSegBuffer{Complex128}},Ptr{PetscSegBuffer{Complex128}},Ref{PetscSegBuffer{Complex128}}})
    err = ccall((:PetscSegBufferDestroy,petscComplexDouble),PetscErrorCode,(Ptr{PetscSegBuffer},),arg1)
    return err
end

function PetscSegBufferGet(arg1::PetscSegBuffer{Complex128},size_t::Integer,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscSegBufferGet,petscComplexDouble),PetscErrorCode,(PetscSegBuffer,Cint,Ptr{Void}),arg1,size_t,arg2)
    return err
end

function PetscSegBufferExtractAlloc(arg1::PetscSegBuffer{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscSegBufferExtractAlloc,petscComplexDouble),PetscErrorCode,(PetscSegBuffer,Ptr{Void}),arg1,arg2)
    return err
end

function PetscSegBufferExtractTo(arg1::PetscSegBuffer{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscSegBufferExtractTo,petscComplexDouble),PetscErrorCode,(PetscSegBuffer,Ptr{Void}),arg1,arg2)
    return err
end

function PetscSegBufferExtractInPlace(arg1::PetscSegBuffer{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscSegBufferExtractInPlace,petscComplexDouble),PetscErrorCode,(PetscSegBuffer,Ptr{Void}),arg1,arg2)
    return err
end

function PetscSegBufferGetSize(arg1::PetscSegBuffer{Complex128},arg2::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:PetscSegBufferGetSize,petscComplexDouble),PetscErrorCode,(PetscSegBuffer,Ptr{Cint}),arg1,arg2)
    return err
end

function PetscSegBufferUnuse(arg1::PetscSegBuffer{Complex128},size_t::Integer)
    err = ccall((:PetscSegBufferUnuse,petscComplexDouble),PetscErrorCode,(PetscSegBuffer,Cint),arg1,size_t)
    return err
end

function PetscGoogleDriveAuthorize(arg0::Type{Complex128},arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer)
    err = ccall((:PetscGoogleDriveAuthorize,petscComplexDouble),PetscErrorCode,(comm_type,Cstring,Cstring,Cint),arg1,arg2,arg3,size_t)
    return err
end

function PetscGoogleDriveRefresh(arg0::Type{Complex128},arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer)
    err = ccall((:PetscGoogleDriveRefresh,petscComplexDouble),PetscErrorCode,(comm_type,Cstring,Cstring,Cint),arg1,arg2,arg3,size_t)
    return err
end

function PetscGoogleDriveUpload(arg0::Type{Complex128},arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscGoogleDriveUpload,petscComplexDouble),PetscErrorCode,(comm_type,Cstring,Cstring),arg1,arg2,arg3)
    return err
end

function PetscBoxAuthorize(arg0::Type{Complex128},arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer)
    err = ccall((:PetscBoxAuthorize,petscComplexDouble),PetscErrorCode,(comm_type,Cstring,Cstring,Cint),arg1,arg2,arg3,size_t)
    return err
end

function PetscBoxRefresh(arg0::Type{Complex128},arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer)
    err = ccall((:PetscBoxRefresh,petscComplexDouble),PetscErrorCode,(comm_type,Cstring,Cstring,Cstring,Cint),arg1,arg2,arg3,arg4,size_t)
    return err
end

function PetscTextBelt(arg0::Type{Complex128},arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscTextBelt,petscComplexDouble),PetscErrorCode,(comm_type,Cstring,Cstring,Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function PetscPullJSONValue(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer,arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscPullJSONValue,petscComplexDouble),PetscErrorCode,(Cstring,Cstring,Cstring,Cint,Ptr{PetscBool}),arg1,arg2,arg3,size_t,arg4)
    return err
end

function PetscPushJSONValue(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer)
    err = ccall((:PetscPushJSONValue,petscComplexDouble),PetscErrorCode,(Cstring,Cstring,Cstring,Cint),arg1,arg2,arg3,size_t)
    return err
end

function PetscBagCreate(arg1::MPI_Comm,size_t::Integer,arg2::Union{Ptr{PetscBag{Complex128}},StridedArray{PetscBag{Complex128}},Ptr{PetscBag{Complex128}},Ref{PetscBag{Complex128}}})
    err = ccall((:PetscBagCreate,petscComplexDouble),PetscErrorCode,(comm_type,Cint,Ptr{PetscBag}),arg1,size_t,arg2)
    return err
end

function PetscBagDestroy(arg1::Union{Ptr{PetscBag{Complex128}},StridedArray{PetscBag{Complex128}},Ptr{PetscBag{Complex128}},Ref{PetscBag{Complex128}}})
    err = ccall((:PetscBagDestroy,petscComplexDouble),PetscErrorCode,(Ptr{PetscBag},),arg1)
    return err
end

function PetscBagGetData(arg1::PetscBag{Complex128},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:PetscBagGetData,petscComplexDouble),PetscErrorCode,(PetscBag,Ptr{Ptr{Void}}),arg1,arg2)
    return err
end

function PetscBagRegisterReal(arg1::PetscBag{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Float64,arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscBagRegisterReal,petscComplexDouble),PetscErrorCode,(PetscBag,Ptr{Void},Float64,Cstring,Cstring),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscBagRegisterRealArray(arg1::PetscBag{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Integer,arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscBagRegisterRealArray,petscComplexDouble),PetscErrorCode,(PetscBag,Ptr{Void},Int64,Cstring,Cstring),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscBagRegisterString(arg1::PetscBag{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Integer,arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg6::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscBagRegisterString,petscComplexDouble),PetscErrorCode,(PetscBag,Ptr{Void},Int64,Cstring,Cstring,Cstring),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscBagRegisterScalar(arg1::PetscBag{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Complex128,arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscBagRegisterScalar,petscComplexDouble),PetscErrorCode,(PetscBag,Ptr{Void},Complex128,Cstring,Cstring),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscBagRegisterInt(arg1::PetscBag{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Integer,arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscBagRegisterInt,petscComplexDouble),PetscErrorCode,(PetscBag,Ptr{Void},Int64,Cstring,Cstring),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscBagRegister64bitInt(arg1::PetscBag{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Petsc64bitInt,arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscBagRegister64bitInt,petscComplexDouble),PetscErrorCode,(PetscBag,Ptr{Void},Petsc64bitInt,Cstring,Cstring),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscBagRegisterIntArray(arg1::PetscBag{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Integer,arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscBagRegisterIntArray,petscComplexDouble),PetscErrorCode,(PetscBag,Ptr{Void},Int64,Cstring,Cstring),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscBagRegisterEnum(arg1::PetscBag{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg4::PetscEnum,arg5::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg6::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscBagRegisterEnum,petscComplexDouble),PetscErrorCode,(PetscBag,Ptr{Void},Ptr{Ptr{UInt8}},PetscEnum,Cstring,Cstring),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscBagRegisterBool(arg1::PetscBag{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::PetscBool,arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscBagRegisterBool,petscComplexDouble),PetscErrorCode,(PetscBag,Ptr{Void},PetscBool,Cstring,Cstring),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscBagRegisterBoolArray(arg1::PetscBag{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Integer,arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscBagRegisterBoolArray,petscComplexDouble),PetscErrorCode,(PetscBag,Ptr{Void},Int64,Cstring,Cstring),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscBagGetNames(arg1::PetscBag{Complex128},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscBagGetNames,petscComplexDouble),PetscErrorCode,(PetscBag,Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PetscBagSetFromOptions(arg1::PetscBag{Complex128})
    err = ccall((:PetscBagSetFromOptions,petscComplexDouble),PetscErrorCode,(PetscBag,),arg1)
    return err
end

function PetscBagGetName(arg1::PetscBag{Complex128},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscBagGetName,petscComplexDouble),PetscErrorCode,(PetscBag,Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PetscBagSetName(arg1::PetscBag{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscBagSetName,petscComplexDouble),PetscErrorCode,(PetscBag,Cstring,Cstring),arg1,arg2,arg3)
    return err
end

function PetscBagSetOptionsPrefix(arg1::PetscBag{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscBagSetOptionsPrefix,petscComplexDouble),PetscErrorCode,(PetscBag,Cstring),arg1,arg2)
    return err
end

function PetscBagView(arg1::PetscBag{Complex128},arg2::PetscViewer{Complex128})
    err = ccall((:PetscBagView,petscComplexDouble),PetscErrorCode,(PetscBag,PetscViewer{Complex128}),arg1,arg2)
    return err
end

function PetscBagLoad(arg1::PetscViewer{Complex128},arg2::PetscBag{Complex128})
    err = ccall((:PetscBagLoad,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},PetscBag),arg1,arg2)
    return err
end

function PetscBagSetViewer(arg1::PetscBag{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscBagSetViewer,petscComplexDouble),PetscErrorCode,(PetscBag,Ptr{Void}),arg1,arg2)
    return err
end

function PetscBagSetLoader(arg1::PetscBag{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscBagSetLoader,petscComplexDouble),PetscErrorCode,(PetscBag,Ptr{Void}),arg1,arg2)
    return err
end

function PetscBagSetDestroy(arg1::PetscBag{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscBagSetDestroy,petscComplexDouble),PetscErrorCode,(PetscBag,Ptr{Void}),arg1,arg2)
    return err
end

function PetscGetCPUTime(arg0::Type{Complex128},arg1::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscGetCPUTime,petscComplexDouble),PetscErrorCode,(Ptr{Float64},),arg1)
    return err
end

function PetscViewerInitializePackage(arg0::Type{Complex128})
    err = ccall((:PetscViewerInitializePackage,petscComplexDouble),PetscErrorCode,())
    return err
end

function PetscViewerRegister(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscViewerRegister,petscComplexDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function PetscViewerCreate(arg1::MPI_Comm,arg2::Union{Ptr{PetscViewer{Complex128}},StridedArray{PetscViewer{Complex128}},Ptr{PetscViewer{Complex128}},Ref{PetscViewer{Complex128}}})
    err = ccall((:PetscViewerCreate,petscComplexDouble),PetscErrorCode,(comm_type,Ptr{PetscViewer{Complex128}}),arg1,arg2)
    return err
end

function PetscViewerSetFromOptions(arg1::PetscViewer{Complex128})
    err = ccall((:PetscViewerSetFromOptions,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},),arg1)
    return err
end

#= skipping function with undefined symbols: 
 function PetscViewerASCIIOpenWithFILE(arg1::MPI_Comm,arg2::Union{Ptr{FILE},StridedArray{FILE},Ptr{FILE},Ref{FILE}},arg3::Union{Ptr{PetscViewer{Complex128}},StridedArray{PetscViewer{Complex128}},Ptr{PetscViewer{Complex128}},Ref{PetscViewer{Complex128}}})
    ccall((:PetscViewerASCIIOpenWithFILE,petscComplexDouble),PetscErrorCode,(comm_type,Ptr{FILE},Ptr{PetscViewer{Complex128}}),arg1,arg2,arg3)
end 
=#
function PetscViewerASCIIOpen(arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{PetscViewer{Complex128}},StridedArray{PetscViewer{Complex128}},Ptr{PetscViewer{Complex128}},Ref{PetscViewer{Complex128}}})
    err = ccall((:PetscViewerASCIIOpen,petscComplexDouble),PetscErrorCode,(comm_type,Cstring,Ptr{PetscViewer{Complex128}}),arg1,arg2,arg3)
    return err
end

#= skipping function with undefined symbols: 
 function PetscViewerASCIISetFILE(arg1::PetscViewer{Complex128},arg2::Union{Ptr{FILE},StridedArray{FILE},Ptr{FILE},Ref{FILE}})
    ccall((:PetscViewerASCIISetFILE,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Ptr{FILE}),arg1,arg2)
end 
=#
function PetscViewerBinaryOpen(arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::PetscFileMode,arg4::Union{Ptr{PetscViewer{Complex128}},StridedArray{PetscViewer{Complex128}},Ptr{PetscViewer{Complex128}},Ref{PetscViewer{Complex128}}})
    err = ccall((:PetscViewerBinaryOpen,petscComplexDouble),PetscErrorCode,(comm_type,Cstring,PetscFileMode,Ptr{PetscViewer{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscViewerBinaryGetFlowControl(arg1::PetscViewer{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscViewerBinaryGetFlowControl,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscViewerBinarySetFlowControl(arg1::PetscViewer{Complex128},arg2::Integer)
    err = ccall((:PetscViewerBinarySetFlowControl,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Int64),arg1,arg2)
    return err
end

function PetscViewerBinarySetUseMPIIO(arg1::PetscViewer{Complex128},arg2::PetscBool)
    err = ccall((:PetscViewerBinarySetUseMPIIO,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},PetscBool),arg1,arg2)
    return err
end

function PetscViewerBinaryGetUseMPIIO(arg1::PetscViewer{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscViewerBinaryGetUseMPIIO,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscViewerSocketOpen(arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer,arg4::Union{Ptr{PetscViewer{Complex128}},StridedArray{PetscViewer{Complex128}},Ptr{PetscViewer{Complex128}},Ref{PetscViewer{Complex128}}})
    err = ccall((:PetscViewerSocketOpen,petscComplexDouble),PetscErrorCode,(comm_type,Cstring,Cint,Ptr{PetscViewer{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscViewerStringOpen(arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer,arg3::Union{Ptr{PetscViewer{Complex128}},StridedArray{PetscViewer{Complex128}},Ptr{PetscViewer{Complex128}},Ref{PetscViewer{Complex128}}})
    err = ccall((:PetscViewerStringOpen,petscComplexDouble),PetscErrorCode,(comm_type,Cstring,Cint,Ptr{PetscViewer{Complex128}}),arg1,arg2,size_t,arg3)
    return err
end

function PetscViewerDrawOpen(arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Union{Ptr{PetscViewer{Complex128}},StridedArray{PetscViewer{Complex128}},Ptr{PetscViewer{Complex128}},Ref{PetscViewer{Complex128}}})
    err = ccall((:PetscViewerDrawOpen,petscComplexDouble),PetscErrorCode,(comm_type,Cstring,Cstring,Cint,Cint,Cint,Cint,Ptr{PetscViewer{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function PetscViewerDrawSetDrawType(arg1::PetscViewer{Complex128},arg2::PetscDrawType)
    err = ccall((:PetscViewerDrawSetDrawType,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},PetscDrawType),arg1,arg2)
    return err
end

function PetscViewerMathematicaOpen(arg1::MPI_Comm,arg2::Integer,arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{Ptr{PetscViewer{Complex128}},StridedArray{PetscViewer{Complex128}},Ptr{PetscViewer{Complex128}},Ref{PetscViewer{Complex128}}})
    err = ccall((:PetscViewerMathematicaOpen,petscComplexDouble),PetscErrorCode,(comm_type,Cint,Cstring,Cstring,Ptr{PetscViewer{Complex128}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscViewerSiloOpen(arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{PetscViewer{Complex128}},StridedArray{PetscViewer{Complex128}},Ptr{PetscViewer{Complex128}},Ref{PetscViewer{Complex128}}})
    err = ccall((:PetscViewerSiloOpen,petscComplexDouble),PetscErrorCode,(comm_type,Cstring,Ptr{PetscViewer{Complex128}}),arg1,arg2,arg3)
    return err
end

function PetscViewerMatlabOpen(arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::PetscFileMode,arg4::Union{Ptr{PetscViewer{Complex128}},StridedArray{PetscViewer{Complex128}},Ptr{PetscViewer{Complex128}},Ref{PetscViewer{Complex128}}})
    err = ccall((:PetscViewerMatlabOpen,petscComplexDouble),PetscErrorCode,(comm_type,Cstring,PetscFileMode,Ptr{PetscViewer{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscViewerGetType(arg1::PetscViewer{Complex128},arg2::Union{Ptr{PetscViewerType},StridedArray{PetscViewerType},Ptr{PetscViewerType},Ref{PetscViewerType}})
    err = ccall((:PetscViewerGetType,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Ptr{PetscViewerType}),arg1,arg2)
    return err
end

function PetscViewerSetType(arg1::PetscViewer{Complex128},arg2::PetscViewerType)
    err = ccall((:PetscViewerSetType,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},PetscViewerType),arg1,arg2)
    return err
end

function PetscViewerDestroy(arg1::Union{Ptr{PetscViewer{Complex128}},StridedArray{PetscViewer{Complex128}},Ptr{PetscViewer{Complex128}},Ref{PetscViewer{Complex128}}})
    err = ccall((:PetscViewerDestroy,petscComplexDouble),PetscErrorCode,(Ptr{PetscViewer{Complex128}},),arg1)
    return err
end

function PetscViewerGetSingleton(arg1::PetscViewer{Complex128},arg2::Union{Ptr{PetscViewer{Complex128}},StridedArray{PetscViewer{Complex128}},Ptr{PetscViewer{Complex128}},Ref{PetscViewer{Complex128}}})
    err = ccall((:PetscViewerGetSingleton,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Ptr{PetscViewer{Complex128}}),arg1,arg2)
    return err
end

function PetscViewerRestoreSingleton(arg1::PetscViewer{Complex128},arg2::Union{Ptr{PetscViewer{Complex128}},StridedArray{PetscViewer{Complex128}},Ptr{PetscViewer{Complex128}},Ref{PetscViewer{Complex128}}})
    err = ccall((:PetscViewerRestoreSingleton,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Ptr{PetscViewer{Complex128}}),arg1,arg2)
    return err
end

function PetscViewerGetSubcomm(arg1::PetscViewer{Complex128},arg2::MPI_Comm,arg3::Union{Ptr{PetscViewer{Complex128}},StridedArray{PetscViewer{Complex128}},Ptr{PetscViewer{Complex128}},Ref{PetscViewer{Complex128}}})
    err = ccall((:PetscViewerGetSubcomm,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},comm_type,Ptr{PetscViewer{Complex128}}),arg1,arg2,arg3)
    return err
end

function PetscViewerRestoreSubcomm(arg1::PetscViewer{Complex128},arg2::MPI_Comm,arg3::Union{Ptr{PetscViewer{Complex128}},StridedArray{PetscViewer{Complex128}},Ptr{PetscViewer{Complex128}},Ref{PetscViewer{Complex128}}})
    err = ccall((:PetscViewerRestoreSubcomm,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},comm_type,Ptr{PetscViewer{Complex128}}),arg1,arg2,arg3)
    return err
end

function PetscViewerSetUp(arg1::PetscViewer{Complex128})
    err = ccall((:PetscViewerSetUp,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},),arg1)
    return err
end

function PetscViewerView(arg1::PetscViewer{Complex128},arg2::PetscViewer{Complex128})
    err = ccall((:PetscViewerView,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},PetscViewer{Complex128}),arg1,arg2)
    return err
end

function PetscViewerAppendOptionsPrefix(arg1::PetscViewer{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscViewerAppendOptionsPrefix,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Cstring),arg1,arg2)
    return err
end

function PetscViewerGetOptionsPrefix(arg1::PetscViewer{Complex128},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscViewerGetOptionsPrefix,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PetscViewerSetFormat(arg1::PetscViewer{Complex128},arg2::PetscViewerFormat)
    err = ccall((:PetscViewerSetFormat,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},PetscViewerFormat),arg1,arg2)
    return err
end

function PetscViewerPushFormat(arg1::PetscViewer{Complex128},arg2::PetscViewerFormat)
    err = ccall((:PetscViewerPushFormat,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},PetscViewerFormat),arg1,arg2)
    return err
end

function PetscViewerPopFormat(arg1::PetscViewer{Complex128})
    err = ccall((:PetscViewerPopFormat,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},),arg1)
    return err
end

function PetscViewerGetFormat(arg1::PetscViewer{Complex128},arg2::Union{Ptr{PetscViewerFormat},StridedArray{PetscViewerFormat},Ptr{PetscViewerFormat},Ref{PetscViewerFormat}})
    err = ccall((:PetscViewerGetFormat,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Ptr{PetscViewerFormat}),arg1,arg2)
    return err
end

function PetscViewerFlush(arg1::PetscViewer{Complex128})
    err = ccall((:PetscViewerFlush,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},),arg1)
    return err
end

function PetscOptionsGetViewer(arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{Ptr{PetscViewer{Complex128}},StridedArray{PetscViewer{Complex128}},Ptr{PetscViewer{Complex128}},Ref{PetscViewer{Complex128}}},arg5::Union{Ptr{PetscViewerFormat},StridedArray{PetscViewerFormat},Ptr{PetscViewerFormat},Ref{PetscViewerFormat}},arg6::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetViewer,petscComplexDouble),PetscErrorCode,(comm_type,Cstring,Cstring,Ptr{PetscViewer{Complex128}},Ptr{PetscViewerFormat},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscOptionsViewer_Private(arg1::Union{Ptr{PetscOptions{Complex128}},StridedArray{PetscOptions{Complex128}},Ptr{PetscOptions{Complex128}},Ref{PetscOptions{Complex128}}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{Ptr{PetscViewer{Complex128}},StridedArray{PetscViewer{Complex128}},Ptr{PetscViewer{Complex128}},Ref{PetscViewer{Complex128}}},arg6::Union{Ptr{PetscViewerFormat},StridedArray{PetscViewerFormat},Ptr{PetscViewerFormat},Ref{PetscViewerFormat}},arg7::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsViewer_Private,petscComplexDouble),PetscErrorCode,(Ptr{PetscOptions{Complex128}},Cstring,Cstring,Cstring,Ptr{PetscViewer{Complex128}},Ptr{PetscViewerFormat},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

#= skipping function with undefined symbols: 
 function PetscViewerASCIIGetPointer(arg1::PetscViewer{Complex128},arg2::Union{Ptr{Ptr{FILE}},StridedArray{Ptr{FILE}},Ptr{Ptr{FILE}},Ref{Ptr{FILE}}})
    ccall((:PetscViewerASCIIGetPointer,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Ptr{Ptr{FILE}}),arg1,arg2)
end 
=#
function PetscViewerFileGetMode(arg1::PetscViewer{Complex128},arg2::Union{Ptr{PetscFileMode},StridedArray{PetscFileMode},Ptr{PetscFileMode},Ref{PetscFileMode}})
    err = ccall((:PetscViewerFileGetMode,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Ptr{PetscFileMode}),arg1,arg2)
    return err
end

function PetscViewerFileSetMode(arg1::PetscViewer{Complex128},arg2::PetscFileMode)
    err = ccall((:PetscViewerFileSetMode,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},PetscFileMode),arg1,arg2)
    return err
end

function PetscViewerRead(arg1::PetscViewer{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::PetscDataType)
    err = ccall((:PetscViewerRead,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Ptr{Void},Int64,Ptr{Int64},PetscDataType),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscViewerASCIISynchronizedAllow(arg1::PetscViewer{Complex128},arg2::PetscBool)
    err = ccall((:PetscViewerASCIISynchronizedAllow,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},PetscBool),arg1,arg2)
    return err
end

function PetscViewerASCIIPushTab(arg1::PetscViewer{Complex128})
    err = ccall((:PetscViewerASCIIPushTab,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},),arg1)
    return err
end

function PetscViewerASCIIPopTab(arg1::PetscViewer{Complex128})
    err = ccall((:PetscViewerASCIIPopTab,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},),arg1)
    return err
end

function PetscViewerASCIIUseTabs(arg1::PetscViewer{Complex128},arg2::PetscBool)
    err = ccall((:PetscViewerASCIIUseTabs,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},PetscBool),arg1,arg2)
    return err
end

function PetscViewerASCIISetTab(arg1::PetscViewer{Complex128},arg2::Integer)
    err = ccall((:PetscViewerASCIISetTab,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Int64),arg1,arg2)
    return err
end

function PetscViewerASCIIGetTab(arg1::PetscViewer{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscViewerASCIIGetTab,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscViewerASCIIAddTab(arg1::PetscViewer{Complex128},arg2::Integer)
    err = ccall((:PetscViewerASCIIAddTab,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Int64),arg1,arg2)
    return err
end

function PetscViewerASCIISubtractTab(arg1::PetscViewer{Complex128},arg2::Integer)
    err = ccall((:PetscViewerASCIISubtractTab,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Int64),arg1,arg2)
    return err
end

function PetscViewerASCIIRead(arg1::PetscViewer{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::PetscDataType)
    err = ccall((:PetscViewerASCIIRead,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Ptr{Void},Int64,Ptr{Int64},PetscDataType),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscViewerBinaryGetDescriptor(arg1::PetscViewer{Complex128},arg2::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:PetscViewerBinaryGetDescriptor,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Ptr{Cint}),arg1,arg2)
    return err
end

#= skipping function with undefined symbols: 
 function PetscViewerBinaryGetInfoPointer(arg1::PetscViewer{Complex128},arg2::Union{Ptr{Ptr{FILE}},StridedArray{Ptr{FILE}},Ptr{Ptr{FILE}},Ref{Ptr{FILE}}})
    ccall((:PetscViewerBinaryGetInfoPointer,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Ptr{Ptr{FILE}}),arg1,arg2)
end 
=#
function PetscViewerBinaryRead(arg1::PetscViewer{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::PetscDataType)
    err = ccall((:PetscViewerBinaryRead,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Ptr{Void},Int64,Ptr{Int64},PetscDataType),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscViewerBinaryWrite(arg1::PetscViewer{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Integer,arg4::PetscDataType,arg5::PetscBool)
    err = ccall((:PetscViewerBinaryWrite,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Ptr{Void},Int64,PetscDataType,PetscBool),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscViewerStringSetString(arg1::PetscViewer{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer)
    err = ccall((:PetscViewerStringSetString,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Cstring,Int64),arg1,arg2,arg3)
    return err
end

function PetscViewerDrawClear(arg1::PetscViewer{Complex128})
    err = ccall((:PetscViewerDrawClear,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},),arg1)
    return err
end

function PetscViewerDrawSetHold(arg1::PetscViewer{Complex128},arg2::PetscBool)
    err = ccall((:PetscViewerDrawSetHold,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},PetscBool),arg1,arg2)
    return err
end

function PetscViewerDrawGetHold(arg1::PetscViewer{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscViewerDrawGetHold,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscViewerDrawSetPause(arg1::PetscViewer{Complex128},arg2::Float64)
    err = ccall((:PetscViewerDrawSetPause,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Float64),arg1,arg2)
    return err
end

function PetscViewerDrawGetPause(arg1::PetscViewer{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscViewerDrawGetPause,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Ptr{Float64}),arg1,arg2)
    return err
end

function PetscViewerDrawSetInfo(arg1::PetscViewer{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer)
    err = ccall((:PetscViewerDrawSetInfo,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Cstring,Cstring,Cint,Cint,Cint,Cint),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function PetscViewerDrawResize(arg1::PetscViewer{Complex128},arg2::Integer,arg3::Integer)
    err = ccall((:PetscViewerDrawResize,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Cint,Cint),arg1,arg2,arg3)
    return err
end

function PetscViewerDrawSetBounds(arg1::PetscViewer{Complex128},arg2::Integer,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscViewerDrawSetBounds,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Int64,Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function PetscViewerDrawGetBounds(arg1::PetscViewer{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:PetscViewerDrawGetBounds,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Ptr{Int64},Ptr{Ptr{Float64}}),arg1,arg2,arg3)
    return err
end

function PetscViewerSocketSetConnection(arg1::PetscViewer{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer)
    err = ccall((:PetscViewerSocketSetConnection,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Cstring,Cint),arg1,arg2,arg3)
    return err
end

function PetscViewerBinarySkipInfo(arg1::PetscViewer{Complex128})
    err = ccall((:PetscViewerBinarySkipInfo,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},),arg1)
    return err
end

function PetscViewerBinarySetSkipInfo(arg1::PetscViewer{Complex128},arg2::PetscBool)
    err = ccall((:PetscViewerBinarySetSkipInfo,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},PetscBool),arg1,arg2)
    return err
end

function PetscViewerBinaryGetSkipInfo(arg1::PetscViewer{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscViewerBinaryGetSkipInfo,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscViewerBinarySetSkipOptions(arg1::PetscViewer{Complex128},arg2::PetscBool)
    err = ccall((:PetscViewerBinarySetSkipOptions,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},PetscBool),arg1,arg2)
    return err
end

function PetscViewerBinaryGetSkipOptions(arg1::PetscViewer{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscViewerBinaryGetSkipOptions,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscViewerBinarySetSkipHeader(arg1::PetscViewer{Complex128},arg2::PetscBool)
    err = ccall((:PetscViewerBinarySetSkipHeader,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},PetscBool),arg1,arg2)
    return err
end

function PetscViewerBinaryGetSkipHeader(arg1::PetscViewer{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscViewerBinaryGetSkipHeader,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscViewerBinaryReadStringArray(arg1::PetscViewer{Complex128},arg2::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}})
    err = ccall((:PetscViewerBinaryReadStringArray,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Ptr{Ptr{Ptr{UInt8}}}),arg1,arg2)
    return err
end

function PetscViewerBinaryWriteStringArray(arg1::PetscViewer{Complex128},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscViewerBinaryWriteStringArray,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PetscViewerFileSetName(arg1::PetscViewer{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscViewerFileSetName,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Cstring),arg1,arg2)
    return err
end

function PetscViewerFileGetName(arg1::PetscViewer{Complex128},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscViewerFileGetName,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

#= skipping function with undefined symbols: 
 function PetscViewerVUGetPointer(arg1::PetscViewer{Complex128},arg2::Union{Ptr{Ptr{FILE}},StridedArray{Ptr{FILE}},Ptr{Ptr{FILE}},Ref{Ptr{FILE}}})
    ccall((:PetscViewerVUGetPointer,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Ptr{Ptr{FILE}}),arg1,arg2)
end 
=#
function PetscViewerVUSetVecSeen(arg1::PetscViewer{Complex128},arg2::PetscBool)
    err = ccall((:PetscViewerVUSetVecSeen,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},PetscBool),arg1,arg2)
    return err
end

function PetscViewerVUGetVecSeen(arg1::PetscViewer{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscViewerVUGetVecSeen,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscViewerVUFlushDeferred(arg1::PetscViewer{Complex128})
    err = ccall((:PetscViewerVUFlushDeferred,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},),arg1)
    return err
end

function PetscViewerMathematicaInitializePackage(arg0::Type{Complex128})
    err = ccall((:PetscViewerMathematicaInitializePackage,petscComplexDouble),PetscErrorCode,())
    return err
end

function PetscViewerMathematicaFinalizePackage(arg0::Type{Complex128})
    err = ccall((:PetscViewerMathematicaFinalizePackage,petscComplexDouble),PetscErrorCode,())
    return err
end

function PetscViewerMathematicaGetName(arg1::PetscViewer{Complex128},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscViewerMathematicaGetName,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PetscViewerMathematicaSetName(arg1::PetscViewer{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscViewerMathematicaSetName,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Cstring),arg1,arg2)
    return err
end

function PetscViewerMathematicaClearName(arg1::PetscViewer{Complex128})
    err = ccall((:PetscViewerMathematicaClearName,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},),arg1)
    return err
end

function PetscViewerMathematicaSkipPackets(arg1::PetscViewer{Complex128},arg2::Integer)
    err = ccall((:PetscViewerMathematicaSkipPackets,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Cint),arg1,arg2)
    return err
end

function PetscViewerSiloGetName(arg1::PetscViewer{Complex128},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscViewerSiloGetName,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PetscViewerSiloSetName(arg1::PetscViewer{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscViewerSiloSetName,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Cstring),arg1,arg2)
    return err
end

function PetscViewerSiloClearName(arg1::PetscViewer{Complex128})
    err = ccall((:PetscViewerSiloClearName,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},),arg1)
    return err
end

function PetscViewerSiloGetMeshName(arg1::PetscViewer{Complex128},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscViewerSiloGetMeshName,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PetscViewerSiloSetMeshName(arg1::PetscViewer{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscViewerSiloSetMeshName,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Cstring),arg1,arg2)
    return err
end

function PetscViewerSiloClearMeshName(arg1::PetscViewer{Complex128})
    err = ccall((:PetscViewerSiloClearMeshName,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},),arg1)
    return err
end

function PetscViewerNetcdfOpen(arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::PetscFileMode,arg4::Union{Ptr{PetscViewer{Complex128}},StridedArray{PetscViewer{Complex128}},Ptr{PetscViewer{Complex128}},Ref{PetscViewer{Complex128}}})
    err = ccall((:PetscViewerNetcdfOpen,petscComplexDouble),PetscErrorCode,(comm_type,Cstring,PetscFileMode,Ptr{PetscViewer{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscViewerNetcdfGetID(arg1::PetscViewer{Complex128},arg2::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:PetscViewerNetcdfGetID,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Ptr{Cint}),arg1,arg2)
    return err
end

function PetscViewerVTKAddField(arg1::PetscViewer{Complex128},arg2::PetscObject{Complex128},PetscViewerVTKWriteFunction::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::PetscViewerVTKFieldType,arg4::PetscObject{Complex128})
    err = ccall((:PetscViewerVTKAddField,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},PetscObject{Complex128},Ptr{Void},PetscViewerVTKFieldType,PetscObject{Complex128}),arg1,arg2,PetscViewerVTKWriteFunction,arg3,arg4)
    return err
end

function PetscViewerVTKOpen(arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::PetscFileMode,arg4::Union{Ptr{PetscViewer{Complex128}},StridedArray{PetscViewer{Complex128}},Ptr{PetscViewer{Complex128}},Ref{PetscViewer{Complex128}}})
    err = ccall((:PetscViewerVTKOpen,petscComplexDouble),PetscErrorCode,(comm_type,Cstring,PetscFileMode,Ptr{PetscViewer{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function PETSC_VIEWER_STDOUT_(arg0::Type{Complex128},arg1::MPI_Comm)
    err = ccall((:PETSC_VIEWER_STDOUT_,petscComplexDouble),PetscViewer,(comm_type,),arg1)
    return err
end

function PetscViewerASCIIGetStdout(arg1::MPI_Comm,arg2::Union{Ptr{PetscViewer{Complex128}},StridedArray{PetscViewer{Complex128}},Ptr{PetscViewer{Complex128}},Ref{PetscViewer{Complex128}}})
    err = ccall((:PetscViewerASCIIGetStdout,petscComplexDouble),PetscErrorCode,(comm_type,Ptr{PetscViewer{Complex128}}),arg1,arg2)
    return err
end

function PETSC_VIEWER_STDERR_(arg0::Type{Complex128},arg1::MPI_Comm)
    err = ccall((:PETSC_VIEWER_STDERR_,petscComplexDouble),PetscViewer,(comm_type,),arg1)
    return err
end

function PetscViewerASCIIGetStderr(arg1::MPI_Comm,arg2::Union{Ptr{PetscViewer{Complex128}},StridedArray{PetscViewer{Complex128}},Ptr{PetscViewer{Complex128}},Ref{PetscViewer{Complex128}}})
    err = ccall((:PetscViewerASCIIGetStderr,petscComplexDouble),PetscErrorCode,(comm_type,Ptr{PetscViewer{Complex128}}),arg1,arg2)
    return err
end

function PETSC_VIEWER_DRAW_(arg0::Type{Complex128},arg1::MPI_Comm)
    err = ccall((:PETSC_VIEWER_DRAW_,petscComplexDouble),PetscViewer,(comm_type,),arg1)
    return err
end

function PETSC_VIEWER_SOCKET_(arg0::Type{Complex128},arg1::MPI_Comm)
    err = ccall((:PETSC_VIEWER_SOCKET_,petscComplexDouble),PetscViewer,(comm_type,),arg1)
    return err
end

function PETSC_VIEWER_BINARY_(arg0::Type{Complex128},arg1::MPI_Comm)
    err = ccall((:PETSC_VIEWER_BINARY_,petscComplexDouble),PetscViewer,(comm_type,),arg1)
    return err
end

function PETSC_VIEWER_MATLAB_(arg0::Type{Complex128},arg1::MPI_Comm)
    err = ccall((:PETSC_VIEWER_MATLAB_,petscComplexDouble),PetscViewer,(comm_type,),arg1)
    return err
end

function PETSC_VIEWER_HDF5_(arg0::Type{Complex128},arg1::MPI_Comm)
    err = ccall((:PETSC_VIEWER_HDF5_,petscComplexDouble),PetscViewer,(comm_type,),arg1)
    return err
end

function PetscViewerMatlabGetArray(arg1::PetscViewer{Complex128},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg5::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscViewerMatlabGetArray,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Cint,Cint,Ptr{Complex128},Cstring),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscViewerMatlabPutVariable(arg1::PetscViewer{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscViewerMatlabPutVariable,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Cstring,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function PetscViewersCreate(arg1::MPI_Comm,arg2::Union{Ptr{PetscViewers{Complex128}},StridedArray{PetscViewers{Complex128}},Ptr{PetscViewers{Complex128}},Ref{PetscViewers{Complex128}}})
    err = ccall((:PetscViewersCreate,petscComplexDouble),PetscErrorCode,(comm_type,Ptr{PetscViewers}),arg1,arg2)
    return err
end

function PetscViewersDestroy(arg1::Union{Ptr{PetscViewers{Complex128}},StridedArray{PetscViewers{Complex128}},Ptr{PetscViewers{Complex128}},Ref{PetscViewers{Complex128}}})
    err = ccall((:PetscViewersDestroy,petscComplexDouble),PetscErrorCode,(Ptr{PetscViewers},),arg1)
    return err
end

function PetscViewersGetViewer(arg1::PetscViewers{Complex128},arg2::Integer,arg3::Union{Ptr{PetscViewer{Complex128}},StridedArray{PetscViewer{Complex128}},Ptr{PetscViewer{Complex128}},Ref{PetscViewer{Complex128}}})
    err = ccall((:PetscViewersGetViewer,petscComplexDouble),PetscErrorCode,(PetscViewers,Int64,Ptr{PetscViewer{Complex128}}),arg1,arg2,arg3)
    return err
end

function PetscTableCreate(arg1::Integer,arg2::Integer,arg3::Union{Ptr{PetscTable{Complex128}},StridedArray{PetscTable{Complex128}},Ptr{PetscTable{Complex128}},Ref{PetscTable{Complex128}}})
    err = ccall((:PetscTableCreate,petscComplexDouble),PetscErrorCode,(Int64,Int64,Ptr{PetscTable}),arg1,arg2,arg3)
    return err
end

function PetscTableCreateCopy(arg1::PetscTable{Complex128},arg2::Union{Ptr{PetscTable{Complex128}},StridedArray{PetscTable{Complex128}},Ptr{PetscTable{Complex128}},Ref{PetscTable{Complex128}}})
    err = ccall((:PetscTableCreateCopy,petscComplexDouble),PetscErrorCode,(PetscTable,Ptr{PetscTable}),arg1,arg2)
    return err
end

function PetscTableDestroy(arg1::Union{Ptr{PetscTable{Complex128}},StridedArray{PetscTable{Complex128}},Ptr{PetscTable{Complex128}},Ref{PetscTable{Complex128}}})
    err = ccall((:PetscTableDestroy,petscComplexDouble),PetscErrorCode,(Ptr{PetscTable},),arg1)
    return err
end

function PetscTableGetCount(arg1::PetscTable{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscTableGetCount,petscComplexDouble),PetscErrorCode,(PetscTable,Ptr{Int64}),arg1,arg2)
    return err
end

function PetscTableIsEmpty(arg1::PetscTable{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscTableIsEmpty,petscComplexDouble),PetscErrorCode,(PetscTable,Ptr{Int64}),arg1,arg2)
    return err
end

function PetscTableAddExpand(arg1::PetscTable{Complex128},arg2::Integer,arg3::Integer,arg4::InsertMode)
    err = ccall((:PetscTableAddExpand,petscComplexDouble),PetscErrorCode,(PetscTable,Int64,Int64,InsertMode),arg1,arg2,arg3,arg4)
    return err
end

function PetscTableAddCountExpand(arg1::PetscTable{Complex128},arg2::Integer)
    err = ccall((:PetscTableAddCountExpand,petscComplexDouble),PetscErrorCode,(PetscTable,Int64),arg1,arg2)
    return err
end

function PetscTableGetHeadPosition(arg1::PetscTable{Complex128},arg2::Union{Ptr{PetscTablePosition},StridedArray{PetscTablePosition},Ptr{PetscTablePosition},Ref{PetscTablePosition}})
    err = ccall((:PetscTableGetHeadPosition,petscComplexDouble),PetscErrorCode,(PetscTable,Ptr{PetscTablePosition}),arg1,arg2)
    return err
end

function PetscTableGetNext(arg1::PetscTable{Complex128},arg2::Union{Ptr{PetscTablePosition},StridedArray{PetscTablePosition},Ptr{PetscTablePosition},Ref{PetscTablePosition}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscTableGetNext,petscComplexDouble),PetscErrorCode,(PetscTable,Ptr{PetscTablePosition},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function PetscTableRemoveAll(arg1::PetscTable{Complex128})
    err = ccall((:PetscTableRemoveAll,petscComplexDouble),PetscErrorCode,(PetscTable,),arg1)
    return err
end

function PetscMatlabEngineCreate(arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{PetscMatlabEngine{Complex128}},StridedArray{PetscMatlabEngine{Complex128}},Ptr{PetscMatlabEngine{Complex128}},Ref{PetscMatlabEngine{Complex128}}})
    err = ccall((:PetscMatlabEngineCreate,petscComplexDouble),PetscErrorCode,(comm_type,Cstring,Ptr{PetscMatlabEngine{Complex128}}),arg1,arg2,arg3)
    return err
end

function PetscMatlabEngineDestroy(arg1::Union{Ptr{PetscMatlabEngine{Complex128}},StridedArray{PetscMatlabEngine{Complex128}},Ptr{PetscMatlabEngine{Complex128}},Ref{PetscMatlabEngine{Complex128}}})
    err = ccall((:PetscMatlabEngineDestroy,petscComplexDouble),PetscErrorCode,(Ptr{PetscMatlabEngine{Complex128}},),arg1)
    return err
end

function PetscMatlabEngineGetOutput(arg1::PetscMatlabEngine{Complex128},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscMatlabEngineGetOutput,petscComplexDouble),PetscErrorCode,(PetscMatlabEngine{Complex128},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

#= skipping function with undefined symbols: 
 function PetscMatlabEnginePrintOutput(arg1::PetscMatlabEngine{Complex128},arg2::Union{Ptr{FILE},StridedArray{FILE},Ptr{FILE},Ref{FILE}})
    ccall((:PetscMatlabEnginePrintOutput,petscComplexDouble),PetscErrorCode,(PetscMatlabEngine{Complex128},Ptr{FILE}),arg1,arg2)
end 
=#
function PetscMatlabEnginePut(arg1::PetscMatlabEngine{Complex128},arg2::PetscObject{Complex128})
    err = ccall((:PetscMatlabEnginePut,petscComplexDouble),PetscErrorCode,(PetscMatlabEngine{Complex128},PetscObject{Complex128}),arg1,arg2)
    return err
end

function PetscMatlabEngineGet(arg1::PetscMatlabEngine{Complex128},arg2::PetscObject{Complex128})
    err = ccall((:PetscMatlabEngineGet,petscComplexDouble),PetscErrorCode,(PetscMatlabEngine{Complex128},PetscObject{Complex128}),arg1,arg2)
    return err
end

function PetscMatlabEnginePutArray(arg1::PetscMatlabEngine{Complex128},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg5::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscMatlabEnginePutArray,petscComplexDouble),PetscErrorCode,(PetscMatlabEngine{Complex128},Cint,Cint,Ptr{Complex128},Cstring),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscMatlabEngineGetArray(arg1::PetscMatlabEngine{Complex128},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg5::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscMatlabEngineGetArray,petscComplexDouble),PetscErrorCode,(PetscMatlabEngine{Complex128},Cint,Cint,Ptr{Complex128},Cstring),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PETSC_MATLAB_ENGINE_(arg0::Type{Complex128},arg1::MPI_Comm)
    err = ccall((:PETSC_MATLAB_ENGINE_,petscComplexDouble),PetscMatlabEngine,(comm_type,),arg1)
    return err
end

function PetscDrawInitializePackage(arg0::Type{Complex128})
    err = ccall((:PetscDrawInitializePackage,petscComplexDouble),PetscErrorCode,())
    return err
end

function PetscDrawRegister(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscDrawRegister,petscComplexDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function PetscDrawGetType(arg1::PetscDraw{Complex128},arg2::Union{Ptr{PetscDrawType},StridedArray{PetscDrawType},Ptr{PetscDrawType},Ref{PetscDrawType}})
    err = ccall((:PetscDrawGetType,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},Ptr{PetscDrawType}),arg1,arg2)
    return err
end

function PetscDrawSetType(arg1::PetscDraw{Complex128},arg2::PetscDrawType)
    err = ccall((:PetscDrawSetType,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},PetscDrawType),arg1,arg2)
    return err
end

function PetscDrawCreate(arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Union{Ptr{PetscDraw{Complex128}},StridedArray{PetscDraw{Complex128}},Ptr{PetscDraw{Complex128}},Ref{PetscDraw{Complex128}}})
    err = ccall((:PetscDrawCreate,petscComplexDouble),PetscErrorCode,(comm_type,Cstring,Cstring,Cint,Cint,Cint,Cint,Ptr{PetscDraw{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function PetscDrawSetFromOptions(arg1::PetscDraw{Complex128})
    err = ccall((:PetscDrawSetFromOptions,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},),arg1)
    return err
end

function PetscDrawSetSave(arg1::PetscDraw{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::PetscBool)
    err = ccall((:PetscDrawSetSave,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},Cstring,PetscBool),arg1,arg2,arg3)
    return err
end

function PetscDrawSetSaveFinalImage(arg1::PetscDraw{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscDrawSetSaveFinalImage,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},Cstring),arg1,arg2)
    return err
end

function PetscDrawView(arg1::PetscDraw{Complex128},arg2::PetscViewer{Complex128})
    err = ccall((:PetscDrawView,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},PetscViewer{Complex128}),arg1,arg2)
    return err
end

function PetscDrawOpenGLUT(arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Union{Ptr{PetscDraw{Complex128}},StridedArray{PetscDraw{Complex128}},Ptr{PetscDraw{Complex128}},Ref{PetscDraw{Complex128}}})
    err = ccall((:PetscDrawOpenGLUT,petscComplexDouble),PetscErrorCode,(comm_type,Cstring,Cstring,Cint,Cint,Cint,Cint,Ptr{PetscDraw{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function PetscDrawOpenNull(arg1::MPI_Comm,arg2::Union{Ptr{PetscDraw{Complex128}},StridedArray{PetscDraw{Complex128}},Ptr{PetscDraw{Complex128}},Ref{PetscDraw{Complex128}}})
    err = ccall((:PetscDrawOpenNull,petscComplexDouble),PetscErrorCode,(comm_type,Ptr{PetscDraw{Complex128}}),arg1,arg2)
    return err
end

function PetscDrawDestroy(arg1::Union{Ptr{PetscDraw{Complex128}},StridedArray{PetscDraw{Complex128}},Ptr{PetscDraw{Complex128}},Ref{PetscDraw{Complex128}}})
    err = ccall((:PetscDrawDestroy,petscComplexDouble),PetscErrorCode,(Ptr{PetscDraw{Complex128}},),arg1)
    return err
end

function PetscDrawIsNull(arg1::PetscDraw{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscDrawIsNull,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscDrawGetPopup(arg1::PetscDraw{Complex128},arg2::Union{Ptr{PetscDraw{Complex128}},StridedArray{PetscDraw{Complex128}},Ptr{PetscDraw{Complex128}},Ref{PetscDraw{Complex128}}})
    err = ccall((:PetscDrawGetPopup,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},Ptr{PetscDraw{Complex128}}),arg1,arg2)
    return err
end

function PetscDrawCheckResizedWindow(arg1::PetscDraw{Complex128})
    err = ccall((:PetscDrawCheckResizedWindow,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},),arg1)
    return err
end

function PetscDrawResizeWindow(arg1::PetscDraw{Complex128},arg2::Integer,arg3::Integer)
    err = ccall((:PetscDrawResizeWindow,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},Cint,Cint),arg1,arg2,arg3)
    return err
end

function PetscDrawScalePopup(arg1::PetscDraw{Complex128},arg2::Float64,arg3::Float64)
    err = ccall((:PetscDrawScalePopup,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},Float64,Float64),arg1,arg2,arg3)
    return err
end

function PetscDrawPixelToCoordinate(arg1::PetscDraw{Complex128},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscDrawPixelToCoordinate,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},Int64,Int64,Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDrawCoordinateToPixel(arg1::PetscDraw{Complex128},arg2::Float64,arg3::Float64,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscDrawCoordinateToPixel,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},Float64,Float64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDrawIndicatorFunction(arg1::PetscDraw{Complex128},arg2::Float64,arg3::Float64,arg4::Float64,arg5::Float64,arg6::Integer,arg7::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg8::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscDrawIndicatorFunction,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},Float64,Float64,Float64,Float64,Cint,Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function PetscDrawLine(arg1::PetscDraw{Complex128},arg2::Float64,arg3::Float64,arg4::Float64,arg5::Float64,arg6::Integer)
    err = ccall((:PetscDrawLine,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},Float64,Float64,Float64,Float64,Cint),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscDrawArrow(arg1::PetscDraw{Complex128},arg2::Float64,arg3::Float64,arg4::Float64,arg5::Float64,arg6::Integer)
    err = ccall((:PetscDrawArrow,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},Float64,Float64,Float64,Float64,Cint),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscDrawLineSetWidth(arg1::PetscDraw{Complex128},arg2::Float64)
    err = ccall((:PetscDrawLineSetWidth,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},Float64),arg1,arg2)
    return err
end

function PetscDrawLineGetWidth(arg1::PetscDraw{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscDrawLineGetWidth,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},Ptr{Float64}),arg1,arg2)
    return err
end

function PetscDrawMarker(arg1::PetscDraw{Complex128},arg2::Float64,arg3::Float64,arg4::Integer)
    err = ccall((:PetscDrawMarker,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},Float64,Float64,Cint),arg1,arg2,arg3,arg4)
    return err
end

function PetscDrawSetMarkerType(arg1::PetscDraw{Complex128},arg2::PetscDrawMarkerType)
    err = ccall((:PetscDrawSetMarkerType,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},PetscDrawMarkerType),arg1,arg2)
    return err
end

function PetscDrawGetMarkerType(arg1::PetscDraw{Complex128},arg2::Union{Ptr{PetscDrawMarkerType},StridedArray{PetscDrawMarkerType},Ptr{PetscDrawMarkerType},Ref{PetscDrawMarkerType}})
    err = ccall((:PetscDrawGetMarkerType,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},Ptr{PetscDrawMarkerType}),arg1,arg2)
    return err
end

function PetscDrawPoint(arg1::PetscDraw{Complex128},arg2::Float64,arg3::Float64,arg4::Integer)
    err = ccall((:PetscDrawPoint,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},Float64,Float64,Cint),arg1,arg2,arg3,arg4)
    return err
end

function PetscDrawPointPixel(arg1::PetscDraw{Complex128},arg2::Integer,arg3::Integer,arg4::Integer)
    err = ccall((:PetscDrawPointPixel,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},Int64,Int64,Cint),arg1,arg2,arg3,arg4)
    return err
end

function PetscDrawPointSetSize(arg1::PetscDraw{Complex128},arg2::Float64)
    err = ccall((:PetscDrawPointSetSize,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},Float64),arg1,arg2)
    return err
end

function PetscDrawRectangle(arg1::PetscDraw{Complex128},arg2::Float64,arg3::Float64,arg4::Float64,arg5::Float64,arg6::Integer,arg7::Integer,arg8::Integer,arg9::Integer)
    err = ccall((:PetscDrawRectangle,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},Float64,Float64,Float64,Float64,Cint,Cint,Cint,Cint),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
    return err
end

function PetscDrawTriangle(arg1::PetscDraw{Complex128},arg2::Float64,arg3::Float64,arg4::Float64,arg5::Float64,arg6::Float64,arg7::Float64,arg8::Integer,arg9::Integer,arg10::Integer)
    err = ccall((:PetscDrawTriangle,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},Float64,Float64,Float64,Float64,Float64,Float64,Cint,Cint,Cint),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function PetscDrawEllipse(arg1::PetscDraw{Complex128},arg2::Float64,arg3::Float64,arg4::Float64,arg5::Float64,arg6::Integer)
    err = ccall((:PetscDrawEllipse,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},Float64,Float64,Float64,Float64,Cint),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscDrawTensorContourPatch(arg1::PetscDraw{Complex128},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg6::Float64,arg7::Float64,arg8::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscDrawTensorContourPatch,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},Cint,Cint,Ptr{Float64},Ptr{Float64},Float64,Float64,Ptr{Float64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function PetscDrawTensorContour(arg1::PetscDraw{Complex128},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscDrawTensorContour,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},Cint,Cint,Ptr{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscDrawString(arg1::PetscDraw{Complex128},arg2::Float64,arg3::Float64,arg4::Integer,arg5::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscDrawString,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},Float64,Float64,Cint,Cstring),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDrawStringCentered(arg1::PetscDraw{Complex128},arg2::Float64,arg3::Float64,arg4::Integer,arg5::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscDrawStringCentered,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},Float64,Float64,Cint,Cstring),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDrawStringBoxed(arg1::PetscDraw{Complex128},arg2::Float64,arg3::Float64,arg4::Integer,arg5::Integer,arg6::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg7::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg8::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscDrawStringBoxed,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},Float64,Float64,Cint,Cint,Cstring,Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function PetscDrawStringBoxedSize(arg1::PetscDraw{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscDrawStringBoxedSize,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},Cstring,Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function PetscDrawStringVertical(arg1::PetscDraw{Complex128},arg2::Float64,arg3::Float64,arg4::Integer,arg5::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscDrawStringVertical,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},Float64,Float64,Cint,Cstring),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDrawStringSetSize(arg1::PetscDraw{Complex128},arg2::Float64,arg3::Float64)
    err = ccall((:PetscDrawStringSetSize,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},Float64,Float64),arg1,arg2,arg3)
    return err
end

function PetscDrawStringGetSize(arg1::PetscDraw{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscDrawStringGetSize,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function PetscDrawSetViewPort(arg1::PetscDraw{Complex128},arg2::Float64,arg3::Float64,arg4::Float64,arg5::Float64)
    err = ccall((:PetscDrawSetViewPort,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},Float64,Float64,Float64,Float64),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDrawGetViewPort(arg1::PetscDraw{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscDrawGetViewPort,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDrawSplitViewPort(arg1::PetscDraw{Complex128})
    err = ccall((:PetscDrawSplitViewPort,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},),arg1)
    return err
end

function PetscDrawSetCoordinates(arg1::PetscDraw{Complex128},arg2::Float64,arg3::Float64,arg4::Float64,arg5::Float64)
    err = ccall((:PetscDrawSetCoordinates,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},Float64,Float64,Float64,Float64),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDrawGetCoordinates(arg1::PetscDraw{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscDrawGetCoordinates,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDrawSetTitle(arg1::PetscDraw{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscDrawSetTitle,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},Cstring),arg1,arg2)
    return err
end

function PetscDrawAppendTitle(arg1::PetscDraw{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscDrawAppendTitle,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},Cstring),arg1,arg2)
    return err
end

function PetscDrawGetTitle(arg1::PetscDraw{Complex128},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscDrawGetTitle,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PetscDrawSetPause(arg1::PetscDraw{Complex128},arg2::Float64)
    err = ccall((:PetscDrawSetPause,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},Float64),arg1,arg2)
    return err
end

function PetscDrawGetPause(arg1::PetscDraw{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscDrawGetPause,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},Ptr{Float64}),arg1,arg2)
    return err
end

function PetscDrawPause(arg1::PetscDraw{Complex128})
    err = ccall((:PetscDrawPause,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},),arg1)
    return err
end

function PetscDrawSetDoubleBuffer(arg1::PetscDraw{Complex128})
    err = ccall((:PetscDrawSetDoubleBuffer,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},),arg1)
    return err
end

function PetscDrawFlush(arg1::PetscDraw{Complex128})
    err = ccall((:PetscDrawFlush,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},),arg1)
    return err
end

function PetscDrawSynchronizedFlush(arg1::PetscDraw{Complex128})
    err = ccall((:PetscDrawSynchronizedFlush,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},),arg1)
    return err
end

function PetscDrawClear(arg1::PetscDraw{Complex128})
    err = ccall((:PetscDrawClear,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},),arg1)
    return err
end

function PetscDrawSave(arg1::PetscDraw{Complex128})
    err = ccall((:PetscDrawSave,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},),arg1)
    return err
end

function PetscDrawSynchronizedClear(arg1::PetscDraw{Complex128})
    err = ccall((:PetscDrawSynchronizedClear,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},),arg1)
    return err
end

function PetscDrawBOP(arg1::PetscDraw{Complex128})
    err = ccall((:PetscDrawBOP,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},),arg1)
    return err
end

function PetscDrawEOP(arg1::PetscDraw{Complex128})
    err = ccall((:PetscDrawEOP,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},),arg1)
    return err
end

function PetscDrawSetDisplay(arg1::PetscDraw{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscDrawSetDisplay,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},Cstring),arg1,arg2)
    return err
end

function PetscDrawGetSingleton(arg1::PetscDraw{Complex128},arg2::Union{Ptr{PetscDraw{Complex128}},StridedArray{PetscDraw{Complex128}},Ptr{PetscDraw{Complex128}},Ref{PetscDraw{Complex128}}})
    err = ccall((:PetscDrawGetSingleton,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},Ptr{PetscDraw{Complex128}}),arg1,arg2)
    return err
end

function PetscDrawRestoreSingleton(arg1::PetscDraw{Complex128},arg2::Union{Ptr{PetscDraw{Complex128}},StridedArray{PetscDraw{Complex128}},Ptr{PetscDraw{Complex128}},Ref{PetscDraw{Complex128}}})
    err = ccall((:PetscDrawRestoreSingleton,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},Ptr{PetscDraw{Complex128}}),arg1,arg2)
    return err
end

function PetscDrawGetCurrentPoint(arg1::PetscDraw{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscDrawGetCurrentPoint,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function PetscDrawSetCurrentPoint(arg1::PetscDraw{Complex128},arg2::Float64,arg3::Float64)
    err = ccall((:PetscDrawSetCurrentPoint,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},Float64,Float64),arg1,arg2,arg3)
    return err
end

function PetscDrawPushCurrentPoint(arg1::PetscDraw{Complex128},arg2::Float64,arg3::Float64)
    err = ccall((:PetscDrawPushCurrentPoint,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},Float64,Float64),arg1,arg2,arg3)
    return err
end

function PetscDrawPopCurrentPoint(arg1::PetscDraw{Complex128})
    err = ccall((:PetscDrawPopCurrentPoint,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},),arg1)
    return err
end

function PetscDrawGetBoundingBox(arg1::PetscDraw{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscDrawGetBoundingBox,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDrawGetMouseButton(arg1::PetscDraw{Complex128},arg2::Union{Ptr{PetscDrawButton},StridedArray{PetscDrawButton},Ptr{PetscDrawButton},Ref{PetscDrawButton}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscDrawGetMouseButton,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},Ptr{PetscDrawButton},Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscDrawSynchronizedGetMouseButton(arg1::PetscDraw{Complex128},arg2::Union{Ptr{PetscDrawButton},StridedArray{PetscDrawButton},Ptr{PetscDrawButton},Ref{PetscDrawButton}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscDrawSynchronizedGetMouseButton,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},Ptr{PetscDrawButton},Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscDrawZoom(arg1::PetscDraw{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscDrawZoom,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function PetscDrawViewPortsCreate(arg1::PetscDraw{Complex128},arg2::Integer,arg3::Union{Ptr{Ptr{PetscDrawViewPorts}},StridedArray{Ptr{PetscDrawViewPorts}},Ptr{Ptr{PetscDrawViewPorts}},Ref{Ptr{PetscDrawViewPorts}}})
    err = ccall((:PetscDrawViewPortsCreate,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},Int64,Ptr{Ptr{PetscDrawViewPorts}}),arg1,arg2,arg3)
    return err
end

function PetscDrawViewPortsCreateRect(arg1::PetscDraw{Complex128},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Ptr{PetscDrawViewPorts}},StridedArray{Ptr{PetscDrawViewPorts}},Ptr{Ptr{PetscDrawViewPorts}},Ref{Ptr{PetscDrawViewPorts}}})
    err = ccall((:PetscDrawViewPortsCreateRect,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},Int64,Int64,Ptr{Ptr{PetscDrawViewPorts}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscDrawViewPortsDestroy(arg0::Type{Complex128},arg1::Union{Ptr{PetscDrawViewPorts},StridedArray{PetscDrawViewPorts},Ptr{PetscDrawViewPorts},Ref{PetscDrawViewPorts}})
    err = ccall((:PetscDrawViewPortsDestroy,petscComplexDouble),PetscErrorCode,(Ptr{PetscDrawViewPorts},),arg1)
    return err
end

function PetscDrawViewPortsSet(arg0::Type{Complex128},arg1::Union{Ptr{PetscDrawViewPorts},StridedArray{PetscDrawViewPorts},Ptr{PetscDrawViewPorts},Ref{PetscDrawViewPorts}},arg2::Integer)
    err = ccall((:PetscDrawViewPortsSet,petscComplexDouble),PetscErrorCode,(Ptr{PetscDrawViewPorts},Int64),arg1,arg2)
    return err
end

function PetscDrawAxisCreate(arg1::PetscDraw{Complex128},arg2::Union{Ptr{PetscDrawAxis{Complex128}},StridedArray{PetscDrawAxis{Complex128}},Ptr{PetscDrawAxis{Complex128}},Ref{PetscDrawAxis{Complex128}}})
    err = ccall((:PetscDrawAxisCreate,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},Ptr{PetscDrawAxis{Complex128}}),arg1,arg2)
    return err
end

function PetscDrawAxisDestroy(arg1::Union{Ptr{PetscDrawAxis{Complex128}},StridedArray{PetscDrawAxis{Complex128}},Ptr{PetscDrawAxis{Complex128}},Ref{PetscDrawAxis{Complex128}}})
    err = ccall((:PetscDrawAxisDestroy,petscComplexDouble),PetscErrorCode,(Ptr{PetscDrawAxis{Complex128}},),arg1)
    return err
end

function PetscDrawAxisDraw(arg1::PetscDrawAxis{Complex128})
    err = ccall((:PetscDrawAxisDraw,petscComplexDouble),PetscErrorCode,(PetscDrawAxis{Complex128},),arg1)
    return err
end

function PetscDrawAxisSetLimits(arg1::PetscDrawAxis{Complex128},arg2::Float64,arg3::Float64,arg4::Float64,arg5::Float64)
    err = ccall((:PetscDrawAxisSetLimits,petscComplexDouble),PetscErrorCode,(PetscDrawAxis{Complex128},Float64,Float64,Float64,Float64),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDrawAxisGetLimits(arg1::PetscDrawAxis{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscDrawAxisGetLimits,petscComplexDouble),PetscErrorCode,(PetscDrawAxis{Complex128},Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDrawAxisSetHoldLimits(arg1::PetscDrawAxis{Complex128},arg2::PetscBool)
    err = ccall((:PetscDrawAxisSetHoldLimits,petscComplexDouble),PetscErrorCode,(PetscDrawAxis{Complex128},PetscBool),arg1,arg2)
    return err
end

function PetscDrawAxisSetColors(arg1::PetscDrawAxis{Complex128},arg2::Integer,arg3::Integer,arg4::Integer)
    err = ccall((:PetscDrawAxisSetColors,petscComplexDouble),PetscErrorCode,(PetscDrawAxis{Complex128},Cint,Cint,Cint),arg1,arg2,arg3,arg4)
    return err
end

function PetscDrawAxisSetLabels(arg1::PetscDrawAxis{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscDrawAxisSetLabels,petscComplexDouble),PetscErrorCode,(PetscDrawAxis{Complex128},Cstring,Cstring,Cstring),arg1,arg2,arg3,arg4)
    return err
end

function PetscDrawLGCreate(arg1::PetscDraw{Complex128},arg2::Integer,arg3::Union{Ptr{PetscDrawLG{Complex128}},StridedArray{PetscDrawLG{Complex128}},Ptr{PetscDrawLG{Complex128}},Ref{PetscDrawLG{Complex128}}})
    err = ccall((:PetscDrawLGCreate,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},Int64,Ptr{PetscDrawLG{Complex128}}),arg1,arg2,arg3)
    return err
end

function PetscDrawLGDestroy(arg1::Union{Ptr{PetscDrawLG{Complex128}},StridedArray{PetscDrawLG{Complex128}},Ptr{PetscDrawLG{Complex128}},Ref{PetscDrawLG{Complex128}}})
    err = ccall((:PetscDrawLGDestroy,petscComplexDouble),PetscErrorCode,(Ptr{PetscDrawLG{Complex128}},),arg1)
    return err
end

function PetscDrawLGAddPoint(arg1::PetscDrawLG{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscDrawLGAddPoint,petscComplexDouble),PetscErrorCode,(PetscDrawLG{Complex128},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function PetscDrawLGAddCommonPoint(arg1::PetscDrawLG{Complex128},arg2::Float64,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscDrawLGAddCommonPoint,petscComplexDouble),PetscErrorCode,(PetscDrawLG{Complex128},Float64,Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function PetscDrawLGAddPoints(arg1::PetscDrawLG{Complex128},arg2::Integer,arg3::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg4::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:PetscDrawLGAddPoints,petscComplexDouble),PetscErrorCode,(PetscDrawLG{Complex128},Int64,Ptr{Ptr{Float64}},Ptr{Ptr{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscDrawLGDraw(arg1::PetscDrawLG{Complex128})
    err = ccall((:PetscDrawLGDraw,petscComplexDouble),PetscErrorCode,(PetscDrawLG{Complex128},),arg1)
    return err
end

function PetscDrawLGView(arg1::PetscDrawLG{Complex128},arg2::PetscViewer{Complex128})
    err = ccall((:PetscDrawLGView,petscComplexDouble),PetscErrorCode,(PetscDrawLG{Complex128},PetscViewer{Complex128}),arg1,arg2)
    return err
end

function PetscDrawLGReset(arg1::PetscDrawLG{Complex128})
    err = ccall((:PetscDrawLGReset,petscComplexDouble),PetscErrorCode,(PetscDrawLG{Complex128},),arg1)
    return err
end

function PetscDrawLGSetDimension(arg1::PetscDrawLG{Complex128},arg2::Integer)
    err = ccall((:PetscDrawLGSetDimension,petscComplexDouble),PetscErrorCode,(PetscDrawLG{Complex128},Int64),arg1,arg2)
    return err
end

function PetscDrawLGGetDimension(arg1::PetscDrawLG{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscDrawLGGetDimension,petscComplexDouble),PetscErrorCode,(PetscDrawLG{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscDrawLGSetLegend(arg1::PetscDrawLG{Complex128},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscDrawLGSetLegend,petscComplexDouble),PetscErrorCode,(PetscDrawLG{Complex128},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PetscDrawLGGetAxis(arg1::PetscDrawLG{Complex128},arg2::Union{Ptr{PetscDrawAxis{Complex128}},StridedArray{PetscDrawAxis{Complex128}},Ptr{PetscDrawAxis{Complex128}},Ref{PetscDrawAxis{Complex128}}})
    err = ccall((:PetscDrawLGGetAxis,petscComplexDouble),PetscErrorCode,(PetscDrawLG{Complex128},Ptr{PetscDrawAxis{Complex128}}),arg1,arg2)
    return err
end

function PetscDrawLGGetDraw(arg1::PetscDrawLG{Complex128},arg2::Union{Ptr{PetscDraw{Complex128}},StridedArray{PetscDraw{Complex128}},Ptr{PetscDraw{Complex128}},Ref{PetscDraw{Complex128}}})
    err = ccall((:PetscDrawLGGetDraw,petscComplexDouble),PetscErrorCode,(PetscDrawLG{Complex128},Ptr{PetscDraw{Complex128}}),arg1,arg2)
    return err
end

function PetscDrawLGSetUseMarkers(arg1::PetscDrawLG{Complex128},arg2::PetscBool)
    err = ccall((:PetscDrawLGSetUseMarkers,petscComplexDouble),PetscErrorCode,(PetscDrawLG{Complex128},PetscBool),arg1,arg2)
    return err
end

function PetscDrawLGSetLimits(arg1::PetscDrawLG{Complex128},arg2::Float64,arg3::Float64,arg4::Float64,arg5::Float64)
    err = ccall((:PetscDrawLGSetLimits,petscComplexDouble),PetscErrorCode,(PetscDrawLG{Complex128},Float64,Float64,Float64,Float64),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDrawLGSetColors(arg1::PetscDrawLG{Complex128},arg2::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:PetscDrawLGSetColors,petscComplexDouble),PetscErrorCode,(PetscDrawLG{Complex128},Ptr{Cint}),arg1,arg2)
    return err
end

function PetscDrawLGSetFromOptions(arg1::PetscDrawLG{Complex128})
    err = ccall((:PetscDrawLGSetFromOptions,petscComplexDouble),PetscErrorCode,(PetscDrawLG{Complex128},),arg1)
    return err
end

function PetscDrawSPCreate(arg1::PetscDraw{Complex128},arg2::Integer,arg3::Union{Ptr{PetscDrawSP{Complex128}},StridedArray{PetscDrawSP{Complex128}},Ptr{PetscDrawSP{Complex128}},Ref{PetscDrawSP{Complex128}}})
    err = ccall((:PetscDrawSPCreate,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},Cint,Ptr{PetscDrawSP{Complex128}}),arg1,arg2,arg3)
    return err
end

function PetscDrawSPDestroy(arg1::Union{Ptr{PetscDrawSP{Complex128}},StridedArray{PetscDrawSP{Complex128}},Ptr{PetscDrawSP{Complex128}},Ref{PetscDrawSP{Complex128}}})
    err = ccall((:PetscDrawSPDestroy,petscComplexDouble),PetscErrorCode,(Ptr{PetscDrawSP{Complex128}},),arg1)
    return err
end

function PetscDrawSPAddPoint(arg1::PetscDrawSP{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscDrawSPAddPoint,petscComplexDouble),PetscErrorCode,(PetscDrawSP{Complex128},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function PetscDrawSPAddPoints(arg1::PetscDrawSP{Complex128},arg2::Integer,arg3::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg4::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:PetscDrawSPAddPoints,petscComplexDouble),PetscErrorCode,(PetscDrawSP{Complex128},Cint,Ptr{Ptr{Float64}},Ptr{Ptr{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscDrawSPDraw(arg1::PetscDrawSP{Complex128},arg2::PetscBool)
    err = ccall((:PetscDrawSPDraw,petscComplexDouble),PetscErrorCode,(PetscDrawSP{Complex128},PetscBool),arg1,arg2)
    return err
end

function PetscDrawSPReset(arg1::PetscDrawSP{Complex128})
    err = ccall((:PetscDrawSPReset,petscComplexDouble),PetscErrorCode,(PetscDrawSP{Complex128},),arg1)
    return err
end

function PetscDrawSPSetDimension(arg1::PetscDrawSP{Complex128},arg2::Integer)
    err = ccall((:PetscDrawSPSetDimension,petscComplexDouble),PetscErrorCode,(PetscDrawSP{Complex128},Cint),arg1,arg2)
    return err
end

function PetscDrawSPGetAxis(arg1::PetscDrawSP{Complex128},arg2::Union{Ptr{PetscDrawAxis{Complex128}},StridedArray{PetscDrawAxis{Complex128}},Ptr{PetscDrawAxis{Complex128}},Ref{PetscDrawAxis{Complex128}}})
    err = ccall((:PetscDrawSPGetAxis,petscComplexDouble),PetscErrorCode,(PetscDrawSP{Complex128},Ptr{PetscDrawAxis{Complex128}}),arg1,arg2)
    return err
end

function PetscDrawSPGetDraw(arg1::PetscDrawSP{Complex128},arg2::Union{Ptr{PetscDraw{Complex128}},StridedArray{PetscDraw{Complex128}},Ptr{PetscDraw{Complex128}},Ref{PetscDraw{Complex128}}})
    err = ccall((:PetscDrawSPGetDraw,petscComplexDouble),PetscErrorCode,(PetscDrawSP{Complex128},Ptr{PetscDraw{Complex128}}),arg1,arg2)
    return err
end

function PetscDrawSPSetLimits(arg1::PetscDrawSP{Complex128},arg2::Float64,arg3::Float64,arg4::Float64,arg5::Float64)
    err = ccall((:PetscDrawSPSetLimits,petscComplexDouble),PetscErrorCode,(PetscDrawSP{Complex128},Float64,Float64,Float64,Float64),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDrawLGSPDraw(arg1::PetscDrawLG{Complex128},arg2::PetscDrawSP{Complex128})
    err = ccall((:PetscDrawLGSPDraw,petscComplexDouble),PetscErrorCode,(PetscDrawLG{Complex128},PetscDrawSP{Complex128}),arg1,arg2)
    return err
end

function PetscDrawHGCreate(arg1::PetscDraw{Complex128},arg2::Integer,arg3::Union{Ptr{PetscDrawHG{Complex128}},StridedArray{PetscDrawHG{Complex128}},Ptr{PetscDrawHG{Complex128}},Ref{PetscDrawHG{Complex128}}})
    err = ccall((:PetscDrawHGCreate,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},Cint,Ptr{PetscDrawHG{Complex128}}),arg1,arg2,arg3)
    return err
end

function PetscDrawHGDestroy(arg1::Union{Ptr{PetscDrawHG{Complex128}},StridedArray{PetscDrawHG{Complex128}},Ptr{PetscDrawHG{Complex128}},Ref{PetscDrawHG{Complex128}}})
    err = ccall((:PetscDrawHGDestroy,petscComplexDouble),PetscErrorCode,(Ptr{PetscDrawHG{Complex128}},),arg1)
    return err
end

function PetscDrawHGAddValue(arg1::PetscDrawHG{Complex128},arg2::Float64)
    err = ccall((:PetscDrawHGAddValue,petscComplexDouble),PetscErrorCode,(PetscDrawHG{Complex128},Float64),arg1,arg2)
    return err
end

function PetscDrawHGDraw(arg1::PetscDrawHG{Complex128})
    err = ccall((:PetscDrawHGDraw,petscComplexDouble),PetscErrorCode,(PetscDrawHG{Complex128},),arg1)
    return err
end

function PetscDrawHGView(arg1::PetscDrawHG{Complex128},arg2::PetscViewer{Complex128})
    err = ccall((:PetscDrawHGView,petscComplexDouble),PetscErrorCode,(PetscDrawHG{Complex128},PetscViewer{Complex128}),arg1,arg2)
    return err
end

function PetscDrawHGReset(arg1::PetscDrawHG{Complex128})
    err = ccall((:PetscDrawHGReset,petscComplexDouble),PetscErrorCode,(PetscDrawHG{Complex128},),arg1)
    return err
end

function PetscDrawHGGetAxis(arg1::PetscDrawHG{Complex128},arg2::Union{Ptr{PetscDrawAxis{Complex128}},StridedArray{PetscDrawAxis{Complex128}},Ptr{PetscDrawAxis{Complex128}},Ref{PetscDrawAxis{Complex128}}})
    err = ccall((:PetscDrawHGGetAxis,petscComplexDouble),PetscErrorCode,(PetscDrawHG{Complex128},Ptr{PetscDrawAxis{Complex128}}),arg1,arg2)
    return err
end

function PetscDrawHGGetDraw(arg1::PetscDrawHG{Complex128},arg2::Union{Ptr{PetscDraw{Complex128}},StridedArray{PetscDraw{Complex128}},Ptr{PetscDraw{Complex128}},Ref{PetscDraw{Complex128}}})
    err = ccall((:PetscDrawHGGetDraw,petscComplexDouble),PetscErrorCode,(PetscDrawHG{Complex128},Ptr{PetscDraw{Complex128}}),arg1,arg2)
    return err
end

function PetscDrawHGSetLimits(arg1::PetscDrawHG{Complex128},arg2::Float64,arg3::Float64,arg4::Integer,arg5::Integer)
    err = ccall((:PetscDrawHGSetLimits,petscComplexDouble),PetscErrorCode,(PetscDrawHG{Complex128},Float64,Float64,Cint,Cint),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDrawHGSetNumberBins(arg1::PetscDrawHG{Complex128},arg2::Integer)
    err = ccall((:PetscDrawHGSetNumberBins,petscComplexDouble),PetscErrorCode,(PetscDrawHG{Complex128},Cint),arg1,arg2)
    return err
end

function PetscDrawHGSetColor(arg1::PetscDrawHG{Complex128},arg2::Integer)
    err = ccall((:PetscDrawHGSetColor,petscComplexDouble),PetscErrorCode,(PetscDrawHG{Complex128},Cint),arg1,arg2)
    return err
end

function PetscDrawHGCalcStats(arg1::PetscDrawHG{Complex128},arg2::PetscBool)
    err = ccall((:PetscDrawHGCalcStats,petscComplexDouble),PetscErrorCode,(PetscDrawHG{Complex128},PetscBool),arg1,arg2)
    return err
end

function PetscDrawHGIntegerBins(arg1::PetscDrawHG{Complex128},arg2::PetscBool)
    err = ccall((:PetscDrawHGIntegerBins,petscComplexDouble),PetscErrorCode,(PetscDrawHG{Complex128},PetscBool),arg1,arg2)
    return err
end

function PetscDrawBarCreate(arg1::PetscDraw{Complex128},arg2::Union{Ptr{PetscDrawBar{Complex128}},StridedArray{PetscDrawBar{Complex128}},Ptr{PetscDrawBar{Complex128}},Ref{PetscDrawBar{Complex128}}})
    err = ccall((:PetscDrawBarCreate,petscComplexDouble),PetscErrorCode,(PetscDraw{Complex128},Ptr{PetscDrawBar{Complex128}}),arg1,arg2)
    return err
end

function PetscDrawBarSetData(arg1::PetscDrawBar{Complex128},arg2::Integer,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscDrawBarSetData,petscComplexDouble),PetscErrorCode,(PetscDrawBar{Complex128},Int64,Ptr{Float64},Ptr{Ptr{UInt8}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscDrawBarDestroy(arg1::Union{Ptr{PetscDrawBar{Complex128}},StridedArray{PetscDrawBar{Complex128}},Ptr{PetscDrawBar{Complex128}},Ref{PetscDrawBar{Complex128}}})
    err = ccall((:PetscDrawBarDestroy,petscComplexDouble),PetscErrorCode,(Ptr{PetscDrawBar{Complex128}},),arg1)
    return err
end

function PetscDrawBarDraw(arg1::PetscDrawBar{Complex128})
    err = ccall((:PetscDrawBarDraw,petscComplexDouble),PetscErrorCode,(PetscDrawBar{Complex128},),arg1)
    return err
end

function PetscDrawBarSetColor(arg1::PetscDrawBar{Complex128},arg2::Integer)
    err = ccall((:PetscDrawBarSetColor,petscComplexDouble),PetscErrorCode,(PetscDrawBar{Complex128},Cint),arg1,arg2)
    return err
end

function PetscDrawBarSetLimits(arg1::PetscDrawBar{Complex128},arg2::Float64,arg3::Float64)
    err = ccall((:PetscDrawBarSetLimits,petscComplexDouble),PetscErrorCode,(PetscDrawBar{Complex128},Float64,Float64),arg1,arg2,arg3)
    return err
end

function PetscDrawBarSort(arg1::PetscDrawBar{Complex128},arg2::PetscBool,arg3::Float64)
    err = ccall((:PetscDrawBarSort,petscComplexDouble),PetscErrorCode,(PetscDrawBar{Complex128},PetscBool,Float64),arg1,arg2,arg3)
    return err
end

function PetscDrawBarSetFromOptions(arg1::PetscDrawBar{Complex128})
    err = ccall((:PetscDrawBarSetFromOptions,petscComplexDouble),PetscErrorCode,(PetscDrawBar{Complex128},),arg1)
    return err
end

function PetscDrawBarGetAxis(arg1::PetscDrawBar{Complex128},arg2::Union{Ptr{PetscDrawAxis{Complex128}},StridedArray{PetscDrawAxis{Complex128}},Ptr{PetscDrawAxis{Complex128}},Ref{PetscDrawAxis{Complex128}}})
    err = ccall((:PetscDrawBarGetAxis,petscComplexDouble),PetscErrorCode,(PetscDrawBar{Complex128},Ptr{PetscDrawAxis{Complex128}}),arg1,arg2)
    return err
end

function PetscDrawBarGetDraw(arg1::PetscDrawBar{Complex128},arg2::Union{Ptr{PetscDraw{Complex128}},StridedArray{PetscDraw{Complex128}},Ptr{PetscDraw{Complex128}},Ref{PetscDraw{Complex128}}})
    err = ccall((:PetscDrawBarGetDraw,petscComplexDouble),PetscErrorCode,(PetscDrawBar{Complex128},Ptr{PetscDraw{Complex128}}),arg1,arg2)
    return err
end

function PetscViewerDrawGetDraw(arg1::PetscViewer{Complex128},arg2::Integer,arg3::Union{Ptr{PetscDraw{Complex128}},StridedArray{PetscDraw{Complex128}},Ptr{PetscDraw{Complex128}},Ref{PetscDraw{Complex128}}})
    err = ccall((:PetscViewerDrawGetDraw,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Int64,Ptr{PetscDraw{Complex128}}),arg1,arg2,arg3)
    return err
end

function PetscViewerDrawBaseAdd(arg1::PetscViewer{Complex128},arg2::Integer)
    err = ccall((:PetscViewerDrawBaseAdd,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Int64),arg1,arg2)
    return err
end

function PetscViewerDrawBaseSet(arg1::PetscViewer{Complex128},arg2::Integer)
    err = ccall((:PetscViewerDrawBaseSet,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Int64),arg1,arg2)
    return err
end

function PetscViewerDrawGetDrawLG(arg1::PetscViewer{Complex128},arg2::Integer,arg3::Union{Ptr{PetscDrawLG{Complex128}},StridedArray{PetscDrawLG{Complex128}},Ptr{PetscDrawLG{Complex128}},Ref{PetscDrawLG{Complex128}}})
    err = ccall((:PetscViewerDrawGetDrawLG,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Int64,Ptr{PetscDrawLG{Complex128}}),arg1,arg2,arg3)
    return err
end

function PetscViewerDrawGetDrawAxis(arg1::PetscViewer{Complex128},arg2::Integer,arg3::Union{Ptr{PetscDrawAxis{Complex128}},StridedArray{PetscDrawAxis{Complex128}},Ptr{PetscDrawAxis{Complex128}},Ref{PetscDrawAxis{Complex128}}})
    err = ccall((:PetscViewerDrawGetDrawAxis,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Int64,Ptr{PetscDrawAxis{Complex128}}),arg1,arg2,arg3)
    return err
end

function PetscDrawUtilitySetCmapHue(arg0::Type{Complex128},arg1::Union{Ptr{Cuchar},StridedArray{Cuchar},Ptr{Cuchar},Ref{Cuchar}},arg2::Union{Ptr{Cuchar},StridedArray{Cuchar},Ptr{Cuchar},Ref{Cuchar}},arg3::Union{Ptr{Cuchar},StridedArray{Cuchar},Ptr{Cuchar},Ref{Cuchar}},arg4::Integer)
    err = ccall((:PetscDrawUtilitySetCmapHue,petscComplexDouble),PetscErrorCode,(Ptr{Cuchar},Ptr{Cuchar},Ptr{Cuchar},Cint),arg1,arg2,arg3,arg4)
    return err
end

function PetscDrawUtilitySetGamma(arg0::Type{Complex128},arg1::Float64)
    err = ccall((:PetscDrawUtilitySetGamma,petscComplexDouble),PetscErrorCode,(Float64,),arg1)
    return err
end

function ISInitializePackage(arg0::Type{Complex128})
    err = ccall((:ISInitializePackage,petscComplexDouble),PetscErrorCode,())
    return err
end

function ISSetType(arg1::IS{Complex128},arg2::ISType)
    err = ccall((:ISSetType,petscComplexDouble),PetscErrorCode,(IS{Complex128},ISType),arg1,arg2)
    return err
end

function ISGetType(arg1::IS{Complex128},arg2::Union{Ptr{ISType},StridedArray{ISType},Ptr{ISType},Ref{ISType}})
    err = ccall((:ISGetType,petscComplexDouble),PetscErrorCode,(IS{Complex128},Ptr{ISType}),arg1,arg2)
    return err
end

function ISRegister(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:ISRegister,petscComplexDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function ISCreate(arg1::MPI_Comm,arg2::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:ISCreate,petscComplexDouble),PetscErrorCode,(comm_type,Ptr{IS{Complex128}}),arg1,arg2)
    return err
end

function ISCreateGeneral(arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},PetscCopyMode::Integer,arg4::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:ISCreateGeneral,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Ptr{Int64},Cint,Ptr{IS{Complex128}}),arg1,arg2,arg3,PetscCopyMode,arg4)
    return err
end

function ISGeneralSetIndices(arg1::IS{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},PetscCopyMode::Integer)
    err = ccall((:ISGeneralSetIndices,petscComplexDouble),PetscErrorCode,(IS{Complex128},Int64,Ptr{Int64},Cint),arg1,arg2,arg3,PetscCopyMode)
    return err
end

function ISCreateBlock(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},PetscCopyMode::Integer,arg5::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:ISCreateBlock,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Int64,Ptr{Int64},Cint,Ptr{IS{Complex128}}),arg1,arg2,arg3,arg4,PetscCopyMode,arg5)
    return err
end

function ISBlockSetIndices(arg1::IS{Complex128},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},PetscCopyMode::Integer)
    err = ccall((:ISBlockSetIndices,petscComplexDouble),PetscErrorCode,(IS{Complex128},Int64,Int64,Ptr{Int64},Cint),arg1,arg2,arg3,arg4,PetscCopyMode)
    return err
end

function ISCreateStride(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:ISCreateStride,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Ptr{IS{Complex128}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function ISStrideSetStride(arg1::IS{Complex128},arg2::Integer,arg3::Integer,arg4::Integer)
    err = ccall((:ISStrideSetStride,petscComplexDouble),PetscErrorCode,(IS{Complex128},Int64,Int64,Int64),arg1,arg2,arg3,arg4)
    return err
end

function ISDestroy(arg1::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:ISDestroy,petscComplexDouble),PetscErrorCode,(Ptr{IS{Complex128}},),arg1)
    return err
end

function ISSetPermutation(arg1::IS{Complex128})
    err = ccall((:ISSetPermutation,petscComplexDouble),PetscErrorCode,(IS{Complex128},),arg1)
    return err
end

function ISPermutation(arg1::IS{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:ISPermutation,petscComplexDouble),PetscErrorCode,(IS{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function ISSetIdentity(arg1::IS{Complex128})
    err = ccall((:ISSetIdentity,petscComplexDouble),PetscErrorCode,(IS{Complex128},),arg1)
    return err
end

function ISIdentity(arg1::IS{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:ISIdentity,petscComplexDouble),PetscErrorCode,(IS{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function ISContiguousLocal(arg1::IS{Complex128},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:ISContiguousLocal,petscComplexDouble),PetscErrorCode,(IS{Complex128},Int64,Int64,Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function ISGetIndices(arg1::IS{Complex128},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:ISGetIndices,petscComplexDouble),PetscErrorCode,(IS{Complex128},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function ISRestoreIndices(arg1::IS{Complex128},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:ISRestoreIndices,petscComplexDouble),PetscErrorCode,(IS{Complex128},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function ISGetTotalIndices(arg1::IS{Complex128},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:ISGetTotalIndices,petscComplexDouble),PetscErrorCode,(IS{Complex128},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function ISRestoreTotalIndices(arg1::IS{Complex128},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:ISRestoreTotalIndices,petscComplexDouble),PetscErrorCode,(IS{Complex128},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function ISGetNonlocalIndices(arg1::IS{Complex128},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:ISGetNonlocalIndices,petscComplexDouble),PetscErrorCode,(IS{Complex128},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function ISRestoreNonlocalIndices(arg1::IS{Complex128},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:ISRestoreNonlocalIndices,petscComplexDouble),PetscErrorCode,(IS{Complex128},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function ISGetNonlocalIS(arg1::IS{Complex128},is::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:ISGetNonlocalIS,petscComplexDouble),PetscErrorCode,(IS{Complex128},Ptr{IS{Complex128}}),arg1,is)
    return err
end

function ISRestoreNonlocalIS(arg1::IS{Complex128},is::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:ISRestoreNonlocalIS,petscComplexDouble),PetscErrorCode,(IS{Complex128},Ptr{IS{Complex128}}),arg1,is)
    return err
end

function ISGetSize(arg1::IS{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISGetSize,petscComplexDouble),PetscErrorCode,(IS{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function ISGetLocalSize(arg1::IS{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISGetLocalSize,petscComplexDouble),PetscErrorCode,(IS{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function ISInvertPermutation(arg1::IS{Complex128},arg2::Integer,arg3::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:ISInvertPermutation,petscComplexDouble),PetscErrorCode,(IS{Complex128},Int64,Ptr{IS{Complex128}}),arg1,arg2,arg3)
    return err
end

function ISView(arg1::IS{Complex128},arg2::PetscViewer{Complex128})
    err = ccall((:ISView,petscComplexDouble),PetscErrorCode,(IS{Complex128},PetscViewer{Complex128}),arg1,arg2)
    return err
end

function ISEqual(arg1::IS{Complex128},arg2::IS{Complex128},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:ISEqual,petscComplexDouble),PetscErrorCode,(IS{Complex128},IS{Complex128},Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function ISSort(arg1::IS{Complex128})
    err = ccall((:ISSort,petscComplexDouble),PetscErrorCode,(IS{Complex128},),arg1)
    return err
end

function ISSortRemoveDups(arg1::IS{Complex128})
    err = ccall((:ISSortRemoveDups,petscComplexDouble),PetscErrorCode,(IS{Complex128},),arg1)
    return err
end

function ISSorted(arg1::IS{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:ISSorted,petscComplexDouble),PetscErrorCode,(IS{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function ISDifference(arg1::IS{Complex128},arg2::IS{Complex128},arg3::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:ISDifference,petscComplexDouble),PetscErrorCode,(IS{Complex128},IS{Complex128},Ptr{IS{Complex128}}),arg1,arg2,arg3)
    return err
end

function ISSum(arg1::IS{Complex128},arg2::IS{Complex128},arg3::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:ISSum,petscComplexDouble),PetscErrorCode,(IS{Complex128},IS{Complex128},Ptr{IS{Complex128}}),arg1,arg2,arg3)
    return err
end

function ISExpand(arg1::IS{Complex128},arg2::IS{Complex128},arg3::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:ISExpand,petscComplexDouble),PetscErrorCode,(IS{Complex128},IS{Complex128},Ptr{IS{Complex128}}),arg1,arg2,arg3)
    return err
end

function ISGetMinMax(arg1::IS{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISGetMinMax,petscComplexDouble),PetscErrorCode,(IS{Complex128},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function ISBlockGetIndices(arg1::IS{Complex128},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:ISBlockGetIndices,petscComplexDouble),PetscErrorCode,(IS{Complex128},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function ISBlockRestoreIndices(arg1::IS{Complex128},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:ISBlockRestoreIndices,petscComplexDouble),PetscErrorCode,(IS{Complex128},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function ISBlockGetLocalSize(arg1::IS{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISBlockGetLocalSize,petscComplexDouble),PetscErrorCode,(IS{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function ISBlockGetSize(arg1::IS{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISBlockGetSize,petscComplexDouble),PetscErrorCode,(IS{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function ISGetBlockSize(arg1::IS{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISGetBlockSize,petscComplexDouble),PetscErrorCode,(IS{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function ISSetBlockSize(arg1::IS{Complex128},arg2::Integer)
    err = ccall((:ISSetBlockSize,petscComplexDouble),PetscErrorCode,(IS{Complex128},Int64),arg1,arg2)
    return err
end

function ISStrideGetInfo(arg1::IS{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISStrideGetInfo,petscComplexDouble),PetscErrorCode,(IS{Complex128},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function ISToGeneral(arg1::IS{Complex128})
    err = ccall((:ISToGeneral,petscComplexDouble),PetscErrorCode,(IS{Complex128},),arg1)
    return err
end

function ISDuplicate(arg1::IS{Complex128},arg2::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:ISDuplicate,petscComplexDouble),PetscErrorCode,(IS{Complex128},Ptr{IS{Complex128}}),arg1,arg2)
    return err
end

function ISCopy(arg1::IS{Complex128},arg2::IS{Complex128})
    err = ccall((:ISCopy,petscComplexDouble),PetscErrorCode,(IS{Complex128},IS{Complex128}),arg1,arg2)
    return err
end

function ISAllGather(arg1::IS{Complex128},arg2::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:ISAllGather,petscComplexDouble),PetscErrorCode,(IS{Complex128},Ptr{IS{Complex128}}),arg1,arg2)
    return err
end

function ISComplement(arg1::IS{Complex128},arg2::Integer,arg3::Integer,arg4::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:ISComplement,petscComplexDouble),PetscErrorCode,(IS{Complex128},Int64,Int64,Ptr{IS{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function ISConcatenate(arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}},arg4::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:ISConcatenate,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Ptr{IS{Complex128}},Ptr{IS{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function ISListToPair(arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}},arg4::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}},arg5::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:ISListToPair,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Ptr{IS{Complex128}},Ptr{IS{Complex128}},Ptr{IS{Complex128}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function ISPairToList(arg1::IS{Complex128},arg2::IS{Complex128},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{IS{Complex128}}},StridedArray{Ptr{IS{Complex128}}},Ptr{Ptr{IS{Complex128}}},Ref{Ptr{IS{Complex128}}}})
    err = ccall((:ISPairToList,petscComplexDouble),PetscErrorCode,(IS{Complex128},IS{Complex128},Ptr{Int64},Ptr{Ptr{IS{Complex128}}}),arg1,arg2,arg3,arg4)
    return err
end

function ISEmbed(arg1::IS{Complex128},arg2::IS{Complex128},arg3::PetscBool,arg4::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:ISEmbed,petscComplexDouble),PetscErrorCode,(IS{Complex128},IS{Complex128},PetscBool,Ptr{IS{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function ISSortPermutation(arg1::IS{Complex128},arg2::PetscBool,arg3::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:ISSortPermutation,petscComplexDouble),PetscErrorCode,(IS{Complex128},PetscBool,Ptr{IS{Complex128}}),arg1,arg2,arg3)
    return err
end

function ISOnComm(arg1::IS{Complex128},arg2::MPI_Comm,PetscCopyMode::Integer,arg3::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:ISOnComm,petscComplexDouble),PetscErrorCode,(IS{Complex128},comm_type,Cint,Ptr{IS{Complex128}}),arg1,arg2,PetscCopyMode,arg3)
    return err
end

function ISLocalToGlobalMappingCreate(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},PetscCopyMode::Integer,arg5::Union{Ptr{ISLocalToGlobalMapping{Complex128}},StridedArray{ISLocalToGlobalMapping{Complex128}},Ptr{ISLocalToGlobalMapping{Complex128}},Ref{ISLocalToGlobalMapping{Complex128}}})
    err = ccall((:ISLocalToGlobalMappingCreate,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Int64,Ptr{Int64},Cint,Ptr{ISLocalToGlobalMapping{Complex128}}),arg1,arg2,arg3,arg4,PetscCopyMode,arg5)
    return err
end

function ISLocalToGlobalMappingCreateIS(arg1::IS{Complex128},arg2::Union{Ptr{ISLocalToGlobalMapping{Complex128}},StridedArray{ISLocalToGlobalMapping{Complex128}},Ptr{ISLocalToGlobalMapping{Complex128}},Ref{ISLocalToGlobalMapping{Complex128}}})
    err = ccall((:ISLocalToGlobalMappingCreateIS,petscComplexDouble),PetscErrorCode,(IS{Complex128},Ptr{ISLocalToGlobalMapping{Complex128}}),arg1,arg2)
    return err
end

function ISLocalToGlobalMappingCreateSF(arg1::PetscSF{Complex128},arg2::Integer,arg3::Union{Ptr{ISLocalToGlobalMapping{Complex128}},StridedArray{ISLocalToGlobalMapping{Complex128}},Ptr{ISLocalToGlobalMapping{Complex128}},Ref{ISLocalToGlobalMapping{Complex128}}})
    err = ccall((:ISLocalToGlobalMappingCreateSF,petscComplexDouble),PetscErrorCode,(PetscSF{Complex128},Int64,Ptr{ISLocalToGlobalMapping{Complex128}}),arg1,arg2,arg3)
    return err
end

function ISLocalToGlobalMappingView(arg1::ISLocalToGlobalMapping{Complex128},arg2::PetscViewer{Complex128})
    err = ccall((:ISLocalToGlobalMappingView,petscComplexDouble),PetscErrorCode,(ISLocalToGlobalMapping{Complex128},PetscViewer{Complex128}),arg1,arg2)
    return err
end

function ISLocalToGlobalMappingDestroy(arg1::Union{Ptr{ISLocalToGlobalMapping{Complex128}},StridedArray{ISLocalToGlobalMapping{Complex128}},Ptr{ISLocalToGlobalMapping{Complex128}},Ref{ISLocalToGlobalMapping{Complex128}}})
    err = ccall((:ISLocalToGlobalMappingDestroy,petscComplexDouble),PetscErrorCode,(Ptr{ISLocalToGlobalMapping{Complex128}},),arg1)
    return err
end

function ISLocalToGlobalMappingApply(arg1::ISLocalToGlobalMapping{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISLocalToGlobalMappingApply,petscComplexDouble),PetscErrorCode,(ISLocalToGlobalMapping{Complex128},Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function ISLocalToGlobalMappingApplyBlock(arg1::ISLocalToGlobalMapping{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISLocalToGlobalMappingApplyBlock,petscComplexDouble),PetscErrorCode,(ISLocalToGlobalMapping{Complex128},Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function ISLocalToGlobalMappingApplyIS(arg1::ISLocalToGlobalMapping{Complex128},arg2::IS{Complex128},arg3::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:ISLocalToGlobalMappingApplyIS,petscComplexDouble),PetscErrorCode,(ISLocalToGlobalMapping{Complex128},IS{Complex128},Ptr{IS{Complex128}}),arg1,arg2,arg3)
    return err
end

function ISGlobalToLocalMappingApply(arg1::ISLocalToGlobalMapping{Complex128},arg2::ISGlobalToLocalMappingType,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISGlobalToLocalMappingApply,petscComplexDouble),PetscErrorCode,(ISLocalToGlobalMapping{Complex128},ISGlobalToLocalMappingType,Int64,Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function ISGlobalToLocalMappingApplyBlock(arg1::ISLocalToGlobalMapping{Complex128},arg2::ISGlobalToLocalMappingType,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISGlobalToLocalMappingApplyBlock,petscComplexDouble),PetscErrorCode,(ISLocalToGlobalMapping{Complex128},ISGlobalToLocalMappingType,Int64,Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function ISGlobalToLocalMappingApplyIS(arg1::ISLocalToGlobalMapping{Complex128},arg2::ISGlobalToLocalMappingType,arg3::IS{Complex128},arg4::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:ISGlobalToLocalMappingApplyIS,petscComplexDouble),PetscErrorCode,(ISLocalToGlobalMapping{Complex128},ISGlobalToLocalMappingType,IS{Complex128},Ptr{IS{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function ISLocalToGlobalMappingGetSize(arg1::ISLocalToGlobalMapping{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISLocalToGlobalMappingGetSize,petscComplexDouble),PetscErrorCode,(ISLocalToGlobalMapping{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function ISLocalToGlobalMappingGetInfo(arg1::ISLocalToGlobalMapping{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg5::Union{Ptr{Ptr{Ptr{Int64}}},StridedArray{Ptr{Ptr{Int64}}},Ptr{Ptr{Ptr{Int64}}},Ref{Ptr{Ptr{Int64}}}})
    err = ccall((:ISLocalToGlobalMappingGetInfo,petscComplexDouble),PetscErrorCode,(ISLocalToGlobalMapping{Complex128},Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}},Ptr{Ptr{Ptr{Int64}}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function ISLocalToGlobalMappingRestoreInfo(arg1::ISLocalToGlobalMapping{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg5::Union{Ptr{Ptr{Ptr{Int64}}},StridedArray{Ptr{Ptr{Int64}}},Ptr{Ptr{Ptr{Int64}}},Ref{Ptr{Ptr{Int64}}}})
    err = ccall((:ISLocalToGlobalMappingRestoreInfo,petscComplexDouble),PetscErrorCode,(ISLocalToGlobalMapping{Complex128},Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}},Ptr{Ptr{Ptr{Int64}}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function ISLocalToGlobalMappingGetBlockInfo(arg1::ISLocalToGlobalMapping{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg5::Union{Ptr{Ptr{Ptr{Int64}}},StridedArray{Ptr{Ptr{Int64}}},Ptr{Ptr{Ptr{Int64}}},Ref{Ptr{Ptr{Int64}}}})
    err = ccall((:ISLocalToGlobalMappingGetBlockInfo,petscComplexDouble),PetscErrorCode,(ISLocalToGlobalMapping{Complex128},Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}},Ptr{Ptr{Ptr{Int64}}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function ISLocalToGlobalMappingRestoreBlockInfo(arg1::ISLocalToGlobalMapping{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg5::Union{Ptr{Ptr{Ptr{Int64}}},StridedArray{Ptr{Ptr{Int64}}},Ptr{Ptr{Ptr{Int64}}},Ref{Ptr{Ptr{Int64}}}})
    err = ccall((:ISLocalToGlobalMappingRestoreBlockInfo,petscComplexDouble),PetscErrorCode,(ISLocalToGlobalMapping{Complex128},Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}},Ptr{Ptr{Ptr{Int64}}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function ISLocalToGlobalMappingGetIndices(arg1::ISLocalToGlobalMapping{Complex128},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:ISLocalToGlobalMappingGetIndices,petscComplexDouble),PetscErrorCode,(ISLocalToGlobalMapping{Complex128},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function ISLocalToGlobalMappingRestoreIndices(arg1::ISLocalToGlobalMapping{Complex128},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:ISLocalToGlobalMappingRestoreIndices,petscComplexDouble),PetscErrorCode,(ISLocalToGlobalMapping{Complex128},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function ISLocalToGlobalMappingGetBlockIndices(arg1::ISLocalToGlobalMapping{Complex128},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:ISLocalToGlobalMappingGetBlockIndices,petscComplexDouble),PetscErrorCode,(ISLocalToGlobalMapping{Complex128},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function ISLocalToGlobalMappingRestoreBlockIndices(arg1::ISLocalToGlobalMapping{Complex128},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:ISLocalToGlobalMappingRestoreBlockIndices,petscComplexDouble),PetscErrorCode,(ISLocalToGlobalMapping{Complex128},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function ISLocalToGlobalMappingConcatenate(arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{ISLocalToGlobalMapping{Complex128}},StridedArray{ISLocalToGlobalMapping{Complex128}},Ptr{ISLocalToGlobalMapping{Complex128}},Ref{ISLocalToGlobalMapping{Complex128}}},arg4::Union{Ptr{ISLocalToGlobalMapping{Complex128}},StridedArray{ISLocalToGlobalMapping{Complex128}},Ptr{ISLocalToGlobalMapping{Complex128}},Ref{ISLocalToGlobalMapping{Complex128}}})
    err = ccall((:ISLocalToGlobalMappingConcatenate,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Ptr{ISLocalToGlobalMapping{Complex128}},Ptr{ISLocalToGlobalMapping{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function ISG2LMapApply(arg1::ISLocalToGlobalMapping{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISG2LMapApply,petscComplexDouble),PetscErrorCode,(ISLocalToGlobalMapping{Complex128},Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function ISLocalToGlobalMappingGetBlockSize(arg1::ISLocalToGlobalMapping{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISLocalToGlobalMappingGetBlockSize,petscComplexDouble),PetscErrorCode,(ISLocalToGlobalMapping{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function ISAllGatherColors(arg0::Type{Complex128},arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Ptr{Cint}},StridedArray{Ptr{Cint}},Ptr{Ptr{Cint}},Ref{Ptr{Cint}}})
    err = ccall((:ISAllGatherColors,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Ptr{Cint},Ptr{Int64},Ptr{Ptr{Cint}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function ISColoringCreate(arg1::MPI_Comm,arg2::Integer,arg3::Integer,ISColoringValue::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}},PetscCopyMode::Integer,arg4::Union{Ptr{ISColoring{Complex128}},StridedArray{ISColoring{Complex128}},Ptr{ISColoring{Complex128}},Ref{ISColoring{Complex128}}})
    err = ccall((:ISColoringCreate,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Int64,Ptr{Cint},Cint,Ptr{ISColoring{Complex128}}),arg1,arg2,arg3,ISColoringValue,PetscCopyMode,arg4)
    return err
end

function ISColoringDestroy(arg1::Union{Ptr{ISColoring{Complex128}},StridedArray{ISColoring{Complex128}},Ptr{ISColoring{Complex128}},Ref{ISColoring{Complex128}}})
    err = ccall((:ISColoringDestroy,petscComplexDouble),PetscErrorCode,(Ptr{ISColoring{Complex128}},),arg1)
    return err
end

function ISColoringView(arg1::ISColoring{Complex128},arg2::PetscViewer{Complex128})
    err = ccall((:ISColoringView,petscComplexDouble),PetscErrorCode,(ISColoring{Complex128},PetscViewer{Complex128}),arg1,arg2)
    return err
end

function ISColoringViewFromOptions(arg1::ISColoring{Complex128},arg2::PetscObject{Complex128},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:ISColoringViewFromOptions,petscComplexDouble),PetscErrorCode,(ISColoring{Complex128},PetscObject{Complex128},Cstring),arg1,arg2,arg3)
    return err
end

function ISColoringGetIS(arg1::ISColoring{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{IS{Complex128}}},StridedArray{Ptr{IS{Complex128}}},Ptr{Ptr{IS{Complex128}}},Ref{Ptr{IS{Complex128}}}})
    err = ccall((:ISColoringGetIS,petscComplexDouble),PetscErrorCode,(ISColoring{Complex128},Ptr{Int64},Ptr{Ptr{IS{Complex128}}}),arg1,arg2,arg3)
    return err
end

function ISColoringRestoreIS(arg1::ISColoring{Complex128},arg2::Union{Ptr{Ptr{IS{Complex128}}},StridedArray{Ptr{IS{Complex128}}},Ptr{Ptr{IS{Complex128}}},Ref{Ptr{IS{Complex128}}}})
    err = ccall((:ISColoringRestoreIS,petscComplexDouble),PetscErrorCode,(ISColoring{Complex128},Ptr{Ptr{IS{Complex128}}}),arg1,arg2)
    return err
end

function ISColoringReference(arg1::ISColoring{Complex128})
    err = ccall((:ISColoringReference,petscComplexDouble),PetscErrorCode,(ISColoring{Complex128},),arg1)
    return err
end

function ISColoringSetType(arg1::ISColoring{Complex128},arg2::ISColoringType)
    err = ccall((:ISColoringSetType,petscComplexDouble),PetscErrorCode,(ISColoring{Complex128},ISColoringType),arg1,arg2)
    return err
end

function ISPartitioningToNumbering(arg1::IS{Complex128},arg2::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:ISPartitioningToNumbering,petscComplexDouble),PetscErrorCode,(IS{Complex128},Ptr{IS{Complex128}}),arg1,arg2)
    return err
end

function ISPartitioningCount(arg1::IS{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISPartitioningCount,petscComplexDouble),PetscErrorCode,(IS{Complex128},Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function ISCompressIndicesGeneral(arg1::Integer,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}},arg6::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:ISCompressIndicesGeneral,petscComplexDouble),PetscErrorCode,(Int64,Int64,Int64,Int64,Ptr{IS{Complex128}},Ptr{IS{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function ISCompressIndicesSorted(arg1::Integer,arg2::Integer,arg3::Integer,arg4::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}},arg5::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:ISCompressIndicesSorted,petscComplexDouble),PetscErrorCode,(Int64,Int64,Int64,Ptr{IS{Complex128}},Ptr{IS{Complex128}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function ISExpandIndicesGeneral(arg1::Integer,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}},arg6::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:ISExpandIndicesGeneral,petscComplexDouble),PetscErrorCode,(Int64,Int64,Int64,Int64,Ptr{IS{Complex128}},Ptr{IS{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscLayoutSetUp(arg1::PetscLayout{Complex128})
    err = ccall((:PetscLayoutSetUp,petscComplexDouble),PetscErrorCode,(PetscLayout{Complex128},),arg1)
    return err
end

function PetscLayoutDestroy(arg1::Union{Ptr{PetscLayout{Complex128}},StridedArray{PetscLayout{Complex128}},Ptr{PetscLayout{Complex128}},Ref{PetscLayout{Complex128}}})
    err = ccall((:PetscLayoutDestroy,petscComplexDouble),PetscErrorCode,(Ptr{PetscLayout{Complex128}},),arg1)
    return err
end

function PetscLayoutDuplicate(arg1::PetscLayout{Complex128},arg2::Union{Ptr{PetscLayout{Complex128}},StridedArray{PetscLayout{Complex128}},Ptr{PetscLayout{Complex128}},Ref{PetscLayout{Complex128}}})
    err = ccall((:PetscLayoutDuplicate,petscComplexDouble),PetscErrorCode,(PetscLayout{Complex128},Ptr{PetscLayout{Complex128}}),arg1,arg2)
    return err
end

function PetscLayoutReference(arg1::PetscLayout{Complex128},arg2::Union{Ptr{PetscLayout{Complex128}},StridedArray{PetscLayout{Complex128}},Ptr{PetscLayout{Complex128}},Ref{PetscLayout{Complex128}}})
    err = ccall((:PetscLayoutReference,petscComplexDouble),PetscErrorCode,(PetscLayout{Complex128},Ptr{PetscLayout{Complex128}}),arg1,arg2)
    return err
end

function PetscLayoutSetLocalSize(arg1::PetscLayout{Complex128},arg2::Integer)
    err = ccall((:PetscLayoutSetLocalSize,petscComplexDouble),PetscErrorCode,(PetscLayout{Complex128},Int64),arg1,arg2)
    return err
end

function PetscLayoutGetLocalSize(arg1::PetscLayout{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscLayoutGetLocalSize,petscComplexDouble),PetscErrorCode,(PetscLayout{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscLayoutSetSize(arg1::PetscLayout{Complex128},arg2::Integer)
    err = ccall((:PetscLayoutSetSize,petscComplexDouble),PetscErrorCode,(PetscLayout{Complex128},Int64),arg1,arg2)
    return err
end

function PetscLayoutGetSize(arg1::PetscLayout{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscLayoutGetSize,petscComplexDouble),PetscErrorCode,(PetscLayout{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscLayoutSetBlockSize(arg1::PetscLayout{Complex128},arg2::Integer)
    err = ccall((:PetscLayoutSetBlockSize,petscComplexDouble),PetscErrorCode,(PetscLayout{Complex128},Int64),arg1,arg2)
    return err
end

function PetscLayoutGetBlockSize(arg1::PetscLayout{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscLayoutGetBlockSize,petscComplexDouble),PetscErrorCode,(PetscLayout{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscLayoutGetRange(arg1::PetscLayout{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscLayoutGetRange,petscComplexDouble),PetscErrorCode,(PetscLayout{Complex128},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PetscLayoutGetRanges(arg1::PetscLayout{Complex128},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:PetscLayoutGetRanges,petscComplexDouble),PetscErrorCode,(PetscLayout{Complex128},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function PetscLayoutSetISLocalToGlobalMapping(arg1::PetscLayout{Complex128},arg2::ISLocalToGlobalMapping{Complex128})
    err = ccall((:PetscLayoutSetISLocalToGlobalMapping,petscComplexDouble),PetscErrorCode,(PetscLayout{Complex128},ISLocalToGlobalMapping{Complex128}),arg1,arg2)
    return err
end

function PetscSFSetGraphLayout(arg1::PetscSF{Complex128},arg2::PetscLayout{Complex128},arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},PetscCopyMode::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSFSetGraphLayout,petscComplexDouble),PetscErrorCode,(PetscSF{Complex128},PetscLayout{Complex128},Int64,Ptr{Int64},Cint,Ptr{Int64}),arg1,arg2,arg3,arg4,PetscCopyMode,arg5)
    return err
end

function PetscSectionCreate(arg1::MPI_Comm,arg2::Union{Ptr{PetscSection{Complex128}},StridedArray{PetscSection{Complex128}},Ptr{PetscSection{Complex128}},Ref{PetscSection{Complex128}}})
    err = ccall((:PetscSectionCreate,petscComplexDouble),PetscErrorCode,(comm_type,Ptr{PetscSection{Complex128}}),arg1,arg2)
    return err
end

function PetscSectionClone(arg1::PetscSection{Complex128},arg2::Union{Ptr{PetscSection{Complex128}},StridedArray{PetscSection{Complex128}},Ptr{PetscSection{Complex128}},Ref{PetscSection{Complex128}}})
    err = ccall((:PetscSectionClone,petscComplexDouble),PetscErrorCode,(PetscSection{Complex128},Ptr{PetscSection{Complex128}}),arg1,arg2)
    return err
end

function PetscSectionCopy(arg1::PetscSection{Complex128},arg2::PetscSection{Complex128})
    err = ccall((:PetscSectionCopy,petscComplexDouble),PetscErrorCode,(PetscSection{Complex128},PetscSection{Complex128}),arg1,arg2)
    return err
end

function PetscSectionGetNumFields(arg1::PetscSection{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSectionGetNumFields,petscComplexDouble),PetscErrorCode,(PetscSection{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscSectionSetNumFields(arg1::PetscSection{Complex128},arg2::Integer)
    err = ccall((:PetscSectionSetNumFields,petscComplexDouble),PetscErrorCode,(PetscSection{Complex128},Int64),arg1,arg2)
    return err
end

function PetscSectionGetFieldName(arg1::PetscSection{Complex128},arg2::Integer,arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscSectionGetFieldName,petscComplexDouble),PetscErrorCode,(PetscSection{Complex128},Int64,Ptr{Ptr{UInt8}}),arg1,arg2,arg3)
    return err
end

function PetscSectionSetFieldName(arg1::PetscSection{Complex128},arg2::Integer,arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscSectionSetFieldName,petscComplexDouble),PetscErrorCode,(PetscSection{Complex128},Int64,Cstring),arg1,arg2,arg3)
    return err
end

function PetscSectionGetFieldComponents(arg1::PetscSection{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSectionGetFieldComponents,petscComplexDouble),PetscErrorCode,(PetscSection{Complex128},Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PetscSectionSetFieldComponents(arg1::PetscSection{Complex128},arg2::Integer,arg3::Integer)
    err = ccall((:PetscSectionSetFieldComponents,petscComplexDouble),PetscErrorCode,(PetscSection{Complex128},Int64,Int64),arg1,arg2,arg3)
    return err
end

function PetscSectionGetChart(arg1::PetscSection{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSectionGetChart,petscComplexDouble),PetscErrorCode,(PetscSection{Complex128},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PetscSectionSetChart(arg1::PetscSection{Complex128},arg2::Integer,arg3::Integer)
    err = ccall((:PetscSectionSetChart,petscComplexDouble),PetscErrorCode,(PetscSection{Complex128},Int64,Int64),arg1,arg2,arg3)
    return err
end

function PetscSectionGetPermutation(arg1::PetscSection{Complex128},arg2::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:PetscSectionGetPermutation,petscComplexDouble),PetscErrorCode,(PetscSection{Complex128},Ptr{IS{Complex128}}),arg1,arg2)
    return err
end

function PetscSectionSetPermutation(arg1::PetscSection{Complex128},arg2::IS{Complex128})
    err = ccall((:PetscSectionSetPermutation,petscComplexDouble),PetscErrorCode,(PetscSection{Complex128},IS{Complex128}),arg1,arg2)
    return err
end

function PetscSectionGetDof(arg1::PetscSection{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSectionGetDof,petscComplexDouble),PetscErrorCode,(PetscSection{Complex128},Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PetscSectionSetDof(arg1::PetscSection{Complex128},arg2::Integer,arg3::Integer)
    err = ccall((:PetscSectionSetDof,petscComplexDouble),PetscErrorCode,(PetscSection{Complex128},Int64,Int64),arg1,arg2,arg3)
    return err
end

function PetscSectionAddDof(arg1::PetscSection{Complex128},arg2::Integer,arg3::Integer)
    err = ccall((:PetscSectionAddDof,petscComplexDouble),PetscErrorCode,(PetscSection{Complex128},Int64,Int64),arg1,arg2,arg3)
    return err
end

function PetscSectionGetFieldDof(arg1::PetscSection{Complex128},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSectionGetFieldDof,petscComplexDouble),PetscErrorCode,(PetscSection{Complex128},Int64,Int64,Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function PetscSectionSetFieldDof(arg1::PetscSection{Complex128},arg2::Integer,arg3::Integer,arg4::Integer)
    err = ccall((:PetscSectionSetFieldDof,petscComplexDouble),PetscErrorCode,(PetscSection{Complex128},Int64,Int64,Int64),arg1,arg2,arg3,arg4)
    return err
end

function PetscSectionAddFieldDof(arg1::PetscSection{Complex128},arg2::Integer,arg3::Integer,arg4::Integer)
    err = ccall((:PetscSectionAddFieldDof,petscComplexDouble),PetscErrorCode,(PetscSection{Complex128},Int64,Int64,Int64),arg1,arg2,arg3,arg4)
    return err
end

function PetscSectionHasConstraints(arg1::PetscSection{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscSectionHasConstraints,petscComplexDouble),PetscErrorCode,(PetscSection{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscSectionGetConstraintDof(arg1::PetscSection{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSectionGetConstraintDof,petscComplexDouble),PetscErrorCode,(PetscSection{Complex128},Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PetscSectionSetConstraintDof(arg1::PetscSection{Complex128},arg2::Integer,arg3::Integer)
    err = ccall((:PetscSectionSetConstraintDof,petscComplexDouble),PetscErrorCode,(PetscSection{Complex128},Int64,Int64),arg1,arg2,arg3)
    return err
end

function PetscSectionAddConstraintDof(arg1::PetscSection{Complex128},arg2::Integer,arg3::Integer)
    err = ccall((:PetscSectionAddConstraintDof,petscComplexDouble),PetscErrorCode,(PetscSection{Complex128},Int64,Int64),arg1,arg2,arg3)
    return err
end

function PetscSectionGetFieldConstraintDof(arg1::PetscSection{Complex128},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSectionGetFieldConstraintDof,petscComplexDouble),PetscErrorCode,(PetscSection{Complex128},Int64,Int64,Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function PetscSectionSetFieldConstraintDof(arg1::PetscSection{Complex128},arg2::Integer,arg3::Integer,arg4::Integer)
    err = ccall((:PetscSectionSetFieldConstraintDof,petscComplexDouble),PetscErrorCode,(PetscSection{Complex128},Int64,Int64,Int64),arg1,arg2,arg3,arg4)
    return err
end

function PetscSectionAddFieldConstraintDof(arg1::PetscSection{Complex128},arg2::Integer,arg3::Integer,arg4::Integer)
    err = ccall((:PetscSectionAddFieldConstraintDof,petscComplexDouble),PetscErrorCode,(PetscSection{Complex128},Int64,Int64,Int64),arg1,arg2,arg3,arg4)
    return err
end

function PetscSectionGetConstraintIndices(arg1::PetscSection{Complex128},arg2::Integer,arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:PetscSectionGetConstraintIndices,petscComplexDouble),PetscErrorCode,(PetscSection{Complex128},Int64,Ptr{Ptr{Int64}}),arg1,arg2,arg3)
    return err
end

function PetscSectionSetConstraintIndices(arg1::PetscSection{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSectionSetConstraintIndices,petscComplexDouble),PetscErrorCode,(PetscSection{Complex128},Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PetscSectionGetFieldConstraintIndices(arg1::PetscSection{Complex128},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:PetscSectionGetFieldConstraintIndices,petscComplexDouble),PetscErrorCode,(PetscSection{Complex128},Int64,Int64,Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscSectionSetFieldConstraintIndices(arg1::PetscSection{Complex128},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSectionSetFieldConstraintIndices,petscComplexDouble),PetscErrorCode,(PetscSection{Complex128},Int64,Int64,Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function PetscSectionSetUpBC(arg1::PetscSection{Complex128})
    err = ccall((:PetscSectionSetUpBC,petscComplexDouble),PetscErrorCode,(PetscSection{Complex128},),arg1)
    return err
end

function PetscSectionSetUp(arg1::PetscSection{Complex128})
    err = ccall((:PetscSectionSetUp,petscComplexDouble),PetscErrorCode,(PetscSection{Complex128},),arg1)
    return err
end

function PetscSectionGetMaxDof(arg1::PetscSection{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSectionGetMaxDof,petscComplexDouble),PetscErrorCode,(PetscSection{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscSectionGetStorageSize(arg1::PetscSection{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSectionGetStorageSize,petscComplexDouble),PetscErrorCode,(PetscSection{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscSectionGetConstrainedStorageSize(arg1::PetscSection{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSectionGetConstrainedStorageSize,petscComplexDouble),PetscErrorCode,(PetscSection{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscSectionGetOffset(arg1::PetscSection{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSectionGetOffset,petscComplexDouble),PetscErrorCode,(PetscSection{Complex128},Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PetscSectionSetOffset(arg1::PetscSection{Complex128},arg2::Integer,arg3::Integer)
    err = ccall((:PetscSectionSetOffset,petscComplexDouble),PetscErrorCode,(PetscSection{Complex128},Int64,Int64),arg1,arg2,arg3)
    return err
end

function PetscSectionGetFieldOffset(arg1::PetscSection{Complex128},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSectionGetFieldOffset,petscComplexDouble),PetscErrorCode,(PetscSection{Complex128},Int64,Int64,Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function PetscSectionSetFieldOffset(arg1::PetscSection{Complex128},arg2::Integer,arg3::Integer,arg4::Integer)
    err = ccall((:PetscSectionSetFieldOffset,petscComplexDouble),PetscErrorCode,(PetscSection{Complex128},Int64,Int64,Int64),arg1,arg2,arg3,arg4)
    return err
end

function PetscSectionGetOffsetRange(arg1::PetscSection{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSectionGetOffsetRange,petscComplexDouble),PetscErrorCode,(PetscSection{Complex128},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PetscSectionView(arg1::PetscSection{Complex128},arg2::PetscViewer{Complex128})
    err = ccall((:PetscSectionView,petscComplexDouble),PetscErrorCode,(PetscSection{Complex128},PetscViewer{Complex128}),arg1,arg2)
    return err
end

function PetscSectionDestroy(arg1::Union{Ptr{PetscSection{Complex128}},StridedArray{PetscSection{Complex128}},Ptr{PetscSection{Complex128}},Ref{PetscSection{Complex128}}})
    err = ccall((:PetscSectionDestroy,petscComplexDouble),PetscErrorCode,(Ptr{PetscSection{Complex128}},),arg1)
    return err
end

function PetscSectionCreateGlobalSection(arg1::PetscSection{Complex128},arg2::PetscSF{Complex128},arg3::PetscBool,arg4::Union{Ptr{PetscSection{Complex128}},StridedArray{PetscSection{Complex128}},Ptr{PetscSection{Complex128}},Ref{PetscSection{Complex128}}})
    err = ccall((:PetscSectionCreateGlobalSection,petscComplexDouble),PetscErrorCode,(PetscSection{Complex128},PetscSF{Complex128},PetscBool,Ptr{PetscSection{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscSectionCreateGlobalSectionCensored(arg1::PetscSection{Complex128},arg2::PetscSF{Complex128},arg3::PetscBool,arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{PetscSection{Complex128}},StridedArray{PetscSection{Complex128}},Ptr{PetscSection{Complex128}},Ref{PetscSection{Complex128}}})
    err = ccall((:PetscSectionCreateGlobalSectionCensored,petscComplexDouble),PetscErrorCode,(PetscSection{Complex128},PetscSF{Complex128},PetscBool,Int64,Ptr{Int64},Ptr{PetscSection{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscSectionCreateSubsection(arg1::PetscSection{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{PetscSection{Complex128}},StridedArray{PetscSection{Complex128}},Ptr{PetscSection{Complex128}},Ref{PetscSection{Complex128}}})
    err = ccall((:PetscSectionCreateSubsection,petscComplexDouble),PetscErrorCode,(PetscSection{Complex128},Int64,Ptr{Int64},Ptr{PetscSection{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscSectionCreateSubmeshSection(arg1::PetscSection{Complex128},arg2::IS{Complex128},arg3::Union{Ptr{PetscSection{Complex128}},StridedArray{PetscSection{Complex128}},Ptr{PetscSection{Complex128}},Ref{PetscSection{Complex128}}})
    err = ccall((:PetscSectionCreateSubmeshSection,petscComplexDouble),PetscErrorCode,(PetscSection{Complex128},IS{Complex128},Ptr{PetscSection{Complex128}}),arg1,arg2,arg3)
    return err
end

function PetscSectionGetPointLayout(arg1::MPI_Comm,arg2::PetscSection{Complex128},arg3::Union{Ptr{PetscLayout{Complex128}},StridedArray{PetscLayout{Complex128}},Ptr{PetscLayout{Complex128}},Ref{PetscLayout{Complex128}}})
    err = ccall((:PetscSectionGetPointLayout,petscComplexDouble),PetscErrorCode,(comm_type,PetscSection{Complex128},Ptr{PetscLayout{Complex128}}),arg1,arg2,arg3)
    return err
end

function PetscSectionGetValueLayout(arg1::MPI_Comm,arg2::PetscSection{Complex128},arg3::Union{Ptr{PetscLayout{Complex128}},StridedArray{PetscLayout{Complex128}},Ptr{PetscLayout{Complex128}},Ref{PetscLayout{Complex128}}})
    err = ccall((:PetscSectionGetValueLayout,petscComplexDouble),PetscErrorCode,(comm_type,PetscSection{Complex128},Ptr{PetscLayout{Complex128}}),arg1,arg2,arg3)
    return err
end

function PetscSectionPermute(arg1::PetscSection{Complex128},arg2::IS{Complex128},arg3::Union{Ptr{PetscSection{Complex128}},StridedArray{PetscSection{Complex128}},Ptr{PetscSection{Complex128}},Ref{PetscSection{Complex128}}})
    err = ccall((:PetscSectionPermute,petscComplexDouble),PetscErrorCode,(PetscSection{Complex128},IS{Complex128},Ptr{PetscSection{Complex128}}),arg1,arg2,arg3)
    return err
end

function PetscSectionGetField(arg1::PetscSection{Complex128},arg2::Integer,arg3::Union{Ptr{PetscSection{Complex128}},StridedArray{PetscSection{Complex128}},Ptr{PetscSection{Complex128}},Ref{PetscSection{Complex128}}})
    err = ccall((:PetscSectionGetField,petscComplexDouble),PetscErrorCode,(PetscSection{Complex128},Int64,Ptr{PetscSection{Complex128}}),arg1,arg2,arg3)
    return err
end

function PetscSectionSetClosureIndex(arg1::PetscSection{Complex128},arg2::PetscObject{Complex128},arg3::PetscSection{Complex128},arg4::IS{Complex128})
    err = ccall((:PetscSectionSetClosureIndex,petscComplexDouble),PetscErrorCode,(PetscSection{Complex128},PetscObject{Complex128},PetscSection{Complex128},IS{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function PetscSectionGetClosureIndex(arg1::PetscSection{Complex128},arg2::PetscObject{Complex128},arg3::Union{Ptr{PetscSection{Complex128}},StridedArray{PetscSection{Complex128}},Ptr{PetscSection{Complex128}},Ref{PetscSection{Complex128}}},arg4::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:PetscSectionGetClosureIndex,petscComplexDouble),PetscErrorCode,(PetscSection{Complex128},PetscObject{Complex128},Ptr{PetscSection{Complex128}},Ptr{IS{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscSFConvertPartition(arg1::PetscSF{Complex128},arg2::PetscSection{Complex128},arg3::IS{Complex128},arg4::Union{Ptr{ISLocalToGlobalMapping{Complex128}},StridedArray{ISLocalToGlobalMapping{Complex128}},Ptr{ISLocalToGlobalMapping{Complex128}},Ref{ISLocalToGlobalMapping{Complex128}}},arg5::Union{Ptr{PetscSF{Complex128}},StridedArray{PetscSF{Complex128}},Ptr{PetscSF{Complex128}},Ref{PetscSF{Complex128}}})
    err = ccall((:PetscSFConvertPartition,petscComplexDouble),PetscErrorCode,(PetscSF{Complex128},PetscSection{Complex128},IS{Complex128},Ptr{ISLocalToGlobalMapping{Complex128}},Ptr{PetscSF{Complex128}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscSFCreateRemoteOffsets(arg1::PetscSF{Complex128},arg2::PetscSection{Complex128},arg3::PetscSection{Complex128},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:PetscSFCreateRemoteOffsets,petscComplexDouble),PetscErrorCode,(PetscSF{Complex128},PetscSection{Complex128},PetscSection{Complex128},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscSFDistributeSection(arg1::PetscSF{Complex128},arg2::PetscSection{Complex128},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg4::PetscSection{Complex128})
    err = ccall((:PetscSFDistributeSection,petscComplexDouble),PetscErrorCode,(PetscSF{Complex128},PetscSection{Complex128},Ptr{Ptr{Int64}},PetscSection{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function PetscSFCreateSectionSF(arg1::PetscSF{Complex128},arg2::PetscSection{Complex128},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::PetscSection{Complex128},arg5::Union{Ptr{PetscSF{Complex128}},StridedArray{PetscSF{Complex128}},Ptr{PetscSF{Complex128}},Ref{PetscSF{Complex128}}})
    err = ccall((:PetscSFCreateSectionSF,petscComplexDouble),PetscErrorCode,(PetscSF{Complex128},PetscSection{Complex128},Ptr{Int64},PetscSection{Complex128},Ptr{PetscSF{Complex128}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function VecInitializePackage(arg0::Type{Complex128})
    err = ccall((:VecInitializePackage,petscComplexDouble),PetscErrorCode,())
    return err
end

function VecFinalizePackage(arg0::Type{Complex128})
    err = ccall((:VecFinalizePackage,petscComplexDouble),PetscErrorCode,())
    return err
end

function VecCreate(arg1::MPI_Comm,arg2::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:VecCreate,petscComplexDouble),PetscErrorCode,(comm_type,Ptr{Vec{Complex128}}),arg1,arg2)
    return err
end

function VecCreateSeq(arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:VecCreateSeq,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Ptr{Vec{Complex128}}),arg1,arg2,arg3)
    return err
end

function VecCreateMPI(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:VecCreateMPI,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Int64,Ptr{Vec{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function VecCreateSeqWithArray(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg5::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:VecCreateSeqWithArray,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Int64,Ptr{Complex128},Ptr{Vec{Complex128}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function VecCreateMPIWithArray(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg6::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:VecCreateMPIWithArray,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Ptr{Complex128},Ptr{Vec{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function VecCreateShared(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:VecCreateShared,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Int64,Ptr{Vec{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function VecSetFromOptions(arg1::Vec{Complex128})
    err = ccall((:VecSetFromOptions,petscComplexDouble),PetscErrorCode,(Vec{Complex128},),arg1)
    return err
end

function VecDestroy(arg1::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:VecDestroy,petscComplexDouble),PetscErrorCode,(Ptr{Vec{Complex128}},),arg1)
    return err
end

function VecZeroEntries(arg1::Vec{Complex128})
    err = ccall((:VecZeroEntries,petscComplexDouble),PetscErrorCode,(Vec{Complex128},),arg1)
    return err
end

function VecSetOptionsPrefix(arg1::Vec{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:VecSetOptionsPrefix,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Cstring),arg1,arg2)
    return err
end

function VecAppendOptionsPrefix(arg1::Vec{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:VecAppendOptionsPrefix,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Cstring),arg1,arg2)
    return err
end

function VecGetOptionsPrefix(arg1::Vec{Complex128},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:VecGetOptionsPrefix,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function VecSetSizes(arg1::Vec{Complex128},arg2::Integer,arg3::Integer)
    err = ccall((:VecSetSizes,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Int64,Int64),arg1,arg2,arg3)
    return err
end

function VecDotNorm2(arg1::Vec{Complex128},arg2::Vec{Complex128},arg3::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:VecDotNorm2,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Vec{Complex128},Ptr{Complex128},Ptr{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function VecDot(arg1::Vec{Complex128},arg2::Vec{Complex128},arg3::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}})
    err = ccall((:VecDot,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Vec{Complex128},Ptr{Complex128}),arg1,arg2,arg3)
    return err
end

function VecDotRealPart(arg1::Vec{Complex128},arg2::Vec{Complex128},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:VecDotRealPart,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Vec{Complex128},Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function VecTDot(arg1::Vec{Complex128},arg2::Vec{Complex128},arg3::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}})
    err = ccall((:VecTDot,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Vec{Complex128},Ptr{Complex128}),arg1,arg2,arg3)
    return err
end

function VecMDot(arg1::Vec{Complex128},arg2::Integer,arg3::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}},arg4::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}})
    err = ccall((:VecMDot,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Int64,Ptr{Vec{Complex128}},Ptr{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function VecMTDot(arg1::Vec{Complex128},arg2::Integer,arg3::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}},arg4::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}})
    err = ccall((:VecMTDot,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Int64,Ptr{Vec{Complex128}},Ptr{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function VecGetSubVector(arg1::Vec{Complex128},arg2::IS{Complex128},arg3::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:VecGetSubVector,petscComplexDouble),PetscErrorCode,(Vec{Complex128},IS{Complex128},Ptr{Vec{Complex128}}),arg1,arg2,arg3)
    return err
end

function VecRestoreSubVector(arg1::Vec{Complex128},arg2::IS{Complex128},arg3::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:VecRestoreSubVector,petscComplexDouble),PetscErrorCode,(Vec{Complex128},IS{Complex128},Ptr{Vec{Complex128}}),arg1,arg2,arg3)
    return err
end

function VecNorm(arg1::Vec{Complex128},arg2::NormType,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:VecNorm,petscComplexDouble),PetscErrorCode,(Vec{Complex128},NormType,Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function VecNormAvailable(arg1::Vec{Complex128},arg2::NormType,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:VecNormAvailable,petscComplexDouble),PetscErrorCode,(Vec{Complex128},NormType,Ptr{PetscBool},Ptr{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function VecNormalize(arg1::Vec{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:VecNormalize,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Ptr{Float64}),arg1,arg2)
    return err
end

function VecSum(arg1::Vec{Complex128},arg2::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}})
    err = ccall((:VecSum,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Ptr{Complex128}),arg1,arg2)
    return err
end

function VecMax(arg1::Vec{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:VecMax,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Ptr{Int64},Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function VecMin(arg1::Vec{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:VecMin,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Ptr{Int64},Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function VecScale(arg1::Vec{Complex128},arg2::Complex128)
    err = ccall((:VecScale,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Complex128),arg1,arg2)
    return err
end

function VecCopy(arg1::Vec{Complex128},arg2::Vec{Complex128})
    err = ccall((:VecCopy,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Vec{Complex128}),arg1,arg2)
    return err
end

function VecSetRandom(arg1::Vec{Complex128},arg2::PetscRandom{Complex128})
    err = ccall((:VecSetRandom,petscComplexDouble),PetscErrorCode,(Vec{Complex128},PetscRandom{Complex128}),arg1,arg2)
    return err
end

function VecSet(arg1::Vec{Complex128},arg2::Complex128)
    err = ccall((:VecSet,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Complex128),arg1,arg2)
    return err
end

function VecSetInf(arg1::Vec{Complex128})
    err = ccall((:VecSetInf,petscComplexDouble),PetscErrorCode,(Vec{Complex128},),arg1)
    return err
end

function VecSwap(arg1::Vec{Complex128},arg2::Vec{Complex128})
    err = ccall((:VecSwap,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Vec{Complex128}),arg1,arg2)
    return err
end

function VecAXPY(arg1::Vec{Complex128},arg2::Complex128,arg3::Vec{Complex128})
    err = ccall((:VecAXPY,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Complex128,Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function VecAXPBY(arg1::Vec{Complex128},arg2::Complex128,arg3::Complex128,arg4::Vec{Complex128})
    err = ccall((:VecAXPBY,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Complex128,Complex128,Vec{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function VecMAXPY(arg1::Vec{Complex128},arg2::Integer,arg3::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg4::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:VecMAXPY,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Int64,Ptr{Complex128},Ptr{Vec{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function VecAYPX(arg1::Vec{Complex128},arg2::Complex128,arg3::Vec{Complex128})
    err = ccall((:VecAYPX,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Complex128,Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function VecWAXPY(arg1::Vec{Complex128},arg2::Complex128,arg3::Vec{Complex128},arg4::Vec{Complex128})
    err = ccall((:VecWAXPY,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Complex128,Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function VecAXPBYPCZ(arg1::Vec{Complex128},arg2::Complex128,arg3::Complex128,arg4::Complex128,arg5::Vec{Complex128},arg6::Vec{Complex128})
    err = ccall((:VecAXPBYPCZ,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Complex128,Complex128,Complex128,Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function VecPointwiseMax(arg1::Vec{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128})
    err = ccall((:VecPointwiseMax,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function VecPointwiseMaxAbs(arg1::Vec{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128})
    err = ccall((:VecPointwiseMaxAbs,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function VecPointwiseMin(arg1::Vec{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128})
    err = ccall((:VecPointwiseMin,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function VecPointwiseMult(arg1::Vec{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128})
    err = ccall((:VecPointwiseMult,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function VecPointwiseDivide(arg1::Vec{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128})
    err = ccall((:VecPointwiseDivide,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function VecMaxPointwiseDivide(arg1::Vec{Complex128},arg2::Vec{Complex128},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:VecMaxPointwiseDivide,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Vec{Complex128},Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function VecShift(arg1::Vec{Complex128},arg2::Complex128)
    err = ccall((:VecShift,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Complex128),arg1,arg2)
    return err
end

function VecReciprocal(arg1::Vec{Complex128})
    err = ccall((:VecReciprocal,petscComplexDouble),PetscErrorCode,(Vec{Complex128},),arg1)
    return err
end

function VecPermute(arg1::Vec{Complex128},arg2::IS{Complex128},arg3::PetscBool)
    err = ccall((:VecPermute,petscComplexDouble),PetscErrorCode,(Vec{Complex128},IS{Complex128},PetscBool),arg1,arg2,arg3)
    return err
end

function VecSqrtAbs(arg1::Vec{Complex128})
    err = ccall((:VecSqrtAbs,petscComplexDouble),PetscErrorCode,(Vec{Complex128},),arg1)
    return err
end

function VecLog(arg1::Vec{Complex128})
    err = ccall((:VecLog,petscComplexDouble),PetscErrorCode,(Vec{Complex128},),arg1)
    return err
end

function VecExp(arg1::Vec{Complex128})
    err = ccall((:VecExp,petscComplexDouble),PetscErrorCode,(Vec{Complex128},),arg1)
    return err
end

function VecAbs(arg1::Vec{Complex128})
    err = ccall((:VecAbs,petscComplexDouble),PetscErrorCode,(Vec{Complex128},),arg1)
    return err
end

function VecDuplicate(arg1::Vec{Complex128},arg2::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:VecDuplicate,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Ptr{Vec{Complex128}}),arg1,arg2)
    return err
end

function VecDuplicateVecs(arg1::Vec{Complex128},arg2::Integer,arg3::Union{Ptr{Ptr{Vec{Complex128}}},StridedArray{Ptr{Vec{Complex128}}},Ptr{Ptr{Vec{Complex128}}},Ref{Ptr{Vec{Complex128}}}})
    err = ccall((:VecDuplicateVecs,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Int64,Ptr{Ptr{Vec{Complex128}}}),arg1,arg2,arg3)
    return err
end

function VecDestroyVecs(arg1::Integer,arg2::Union{Ptr{Ptr{Vec{Complex128}}},StridedArray{Ptr{Vec{Complex128}}},Ptr{Ptr{Vec{Complex128}}},Ref{Ptr{Vec{Complex128}}}})
    err = ccall((:VecDestroyVecs,petscComplexDouble),PetscErrorCode,(Int64,Ptr{Ptr{Vec{Complex128}}}),arg1,arg2)
    return err
end

function VecStrideNormAll(arg1::Vec{Complex128},arg2::NormType,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:VecStrideNormAll,petscComplexDouble),PetscErrorCode,(Vec{Complex128},NormType,Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function VecStrideMaxAll(arg1::Vec{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:VecStrideMaxAll,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Ptr{Int64},Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function VecStrideMinAll(arg1::Vec{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:VecStrideMinAll,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Ptr{Int64},Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function VecStrideScaleAll(arg1::Vec{Complex128},arg2::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}})
    err = ccall((:VecStrideScaleAll,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Ptr{Complex128}),arg1,arg2)
    return err
end

function VecUniqueEntries(arg1::Vec{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Complex128}},StridedArray{Ptr{Complex128}},Ptr{Ptr{Complex128}},Ref{Ptr{Complex128}}})
    err = ccall((:VecUniqueEntries,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Ptr{Int64},Ptr{Ptr{Complex128}}),arg1,arg2,arg3)
    return err
end

function VecStrideNorm(arg1::Vec{Complex128},arg2::Integer,arg3::NormType,arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:VecStrideNorm,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Int64,NormType,Ptr{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function VecStrideMax(arg1::Vec{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:VecStrideMax,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Int64,Ptr{Int64},Ptr{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function VecStrideMin(arg1::Vec{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:VecStrideMin,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Int64,Ptr{Int64},Ptr{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function VecStrideScale(arg1::Vec{Complex128},arg2::Integer,arg3::Complex128)
    err = ccall((:VecStrideScale,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Int64,Complex128),arg1,arg2,arg3)
    return err
end

function VecStrideSet(arg1::Vec{Complex128},arg2::Integer,arg3::Complex128)
    err = ccall((:VecStrideSet,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Int64,Complex128),arg1,arg2,arg3)
    return err
end

function VecStrideGather(arg1::Vec{Complex128},arg2::Integer,arg3::Vec{Complex128},arg4::InsertMode)
    err = ccall((:VecStrideGather,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Int64,Vec{Complex128},InsertMode),arg1,arg2,arg3,arg4)
    return err
end

function VecStrideScatter(arg1::Vec{Complex128},arg2::Integer,arg3::Vec{Complex128},arg4::InsertMode)
    err = ccall((:VecStrideScatter,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Int64,Vec{Complex128},InsertMode),arg1,arg2,arg3,arg4)
    return err
end

function VecStrideGatherAll(arg1::Vec{Complex128},arg2::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}},arg3::InsertMode)
    err = ccall((:VecStrideGatherAll,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Ptr{Vec{Complex128}},InsertMode),arg1,arg2,arg3)
    return err
end

function VecStrideScatterAll(arg1::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}},arg2::Vec{Complex128},arg3::InsertMode)
    err = ccall((:VecStrideScatterAll,petscComplexDouble),PetscErrorCode,(Ptr{Vec{Complex128}},Vec{Complex128},InsertMode),arg1,arg2,arg3)
    return err
end

function VecStrideSubSetScatter(arg1::Vec{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Vec{Complex128},arg6::InsertMode)
    err = ccall((:VecStrideSubSetScatter,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Int64,Ptr{Int64},Ptr{Int64},Vec{Complex128},InsertMode),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function VecStrideSubSetGather(arg1::Vec{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Vec{Complex128},arg6::InsertMode)
    err = ccall((:VecStrideSubSetGather,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Int64,Ptr{Int64},Ptr{Int64},Vec{Complex128},InsertMode),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function VecSetValues(arg1::Vec{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg5::InsertMode)
    err = ccall((:VecSetValues,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Int64,Ptr{Int64},Ptr{Complex128},InsertMode),arg1,arg2,arg3,arg4,arg5)
    return err
end

function VecGetValues(arg1::Vec{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}})
    err = ccall((:VecGetValues,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Int64,Ptr{Int64},Ptr{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function VecAssemblyBegin(arg1::Vec{Complex128})
    err = ccall((:VecAssemblyBegin,petscComplexDouble),PetscErrorCode,(Vec{Complex128},),arg1)
    return err
end

function VecAssemblyEnd(arg1::Vec{Complex128})
    err = ccall((:VecAssemblyEnd,petscComplexDouble),PetscErrorCode,(Vec{Complex128},),arg1)
    return err
end

function VecStashSetInitialSize(arg1::Vec{Complex128},arg2::Integer,arg3::Integer)
    err = ccall((:VecStashSetInitialSize,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Int64,Int64),arg1,arg2,arg3)
    return err
end

function VecStashView(arg1::Vec{Complex128},arg2::PetscViewer{Complex128})
    err = ccall((:VecStashView,petscComplexDouble),PetscErrorCode,(Vec{Complex128},PetscViewer{Complex128}),arg1,arg2)
    return err
end

function VecStashViewFromOptions(arg1::Vec{Complex128},arg2::PetscObject{Complex128},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:VecStashViewFromOptions,petscComplexDouble),PetscErrorCode,(Vec{Complex128},PetscObject{Complex128},Cstring),arg1,arg2,arg3)
    return err
end

function VecStashGetInfo(arg1::Vec{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:VecStashGetInfo,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function VecGetBlockSize(arg1::Vec{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:VecGetBlockSize,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function VecSetValuesBlocked(arg1::Vec{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg5::InsertMode)
    err = ccall((:VecSetValuesBlocked,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Int64,Ptr{Int64},Ptr{Complex128},InsertMode),arg1,arg2,arg3,arg4,arg5)
    return err
end

function VecSetType(arg1::Vec{Complex128},arg2::VecType)
    err = ccall((:VecSetType,petscComplexDouble),PetscErrorCode,(Vec{Complex128},VecType),arg1,arg2)
    return err
end

function VecGetType(arg1::Vec{Complex128},arg2::Union{Ptr{VecType},StridedArray{VecType},Ptr{VecType},Ref{VecType}})
    err = ccall((:VecGetType,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Ptr{VecType}),arg1,arg2)
    return err
end

function VecRegister(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:VecRegister,petscComplexDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function VecScatterCreate(arg1::Vec{Complex128},arg2::IS{Complex128},arg3::Vec{Complex128},arg4::IS{Complex128},arg5::Union{Ptr{VecScatter{Complex128}},StridedArray{VecScatter{Complex128}},Ptr{VecScatter{Complex128}},Ref{VecScatter{Complex128}}})
    err = ccall((:VecScatterCreate,petscComplexDouble),PetscErrorCode,(Vec{Complex128},IS{Complex128},Vec{Complex128},IS{Complex128},Ptr{VecScatter{Complex128}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function VecScatterCreateEmpty(arg1::MPI_Comm,arg2::Union{Ptr{VecScatter{Complex128}},StridedArray{VecScatter{Complex128}},Ptr{VecScatter{Complex128}},Ref{VecScatter{Complex128}}})
    err = ccall((:VecScatterCreateEmpty,petscComplexDouble),PetscErrorCode,(comm_type,Ptr{VecScatter{Complex128}}),arg1,arg2)
    return err
end

function VecScatterCreateLocal(arg1::VecScatter{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Integer,arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg9::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg10::Integer)
    err = ccall((:VecScatterCreateLocal,petscComplexDouble),PetscErrorCode,(VecScatter{Complex128},Int64,Ptr{Int64},Ptr{Int64},Ptr{Int64},Int64,Ptr{Int64},Ptr{Int64},Ptr{Int64},Int64),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function VecScatterBegin(arg1::VecScatter{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128},arg4::InsertMode,arg5::ScatterMode)
    err = ccall((:VecScatterBegin,petscComplexDouble),PetscErrorCode,(VecScatter{Complex128},Vec{Complex128},Vec{Complex128},InsertMode,ScatterMode),arg1,arg2,arg3,arg4,arg5)
    return err
end

function VecScatterEnd(arg1::VecScatter{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128},arg4::InsertMode,arg5::ScatterMode)
    err = ccall((:VecScatterEnd,petscComplexDouble),PetscErrorCode,(VecScatter{Complex128},Vec{Complex128},Vec{Complex128},InsertMode,ScatterMode),arg1,arg2,arg3,arg4,arg5)
    return err
end

function VecScatterDestroy(arg1::Union{Ptr{VecScatter{Complex128}},StridedArray{VecScatter{Complex128}},Ptr{VecScatter{Complex128}},Ref{VecScatter{Complex128}}})
    err = ccall((:VecScatterDestroy,petscComplexDouble),PetscErrorCode,(Ptr{VecScatter{Complex128}},),arg1)
    return err
end

function VecScatterCopy(arg1::VecScatter{Complex128},arg2::Union{Ptr{VecScatter{Complex128}},StridedArray{VecScatter{Complex128}},Ptr{VecScatter{Complex128}},Ref{VecScatter{Complex128}}})
    err = ccall((:VecScatterCopy,petscComplexDouble),PetscErrorCode,(VecScatter{Complex128},Ptr{VecScatter{Complex128}}),arg1,arg2)
    return err
end

function VecScatterView(arg1::VecScatter{Complex128},arg2::PetscViewer{Complex128})
    err = ccall((:VecScatterView,petscComplexDouble),PetscErrorCode,(VecScatter{Complex128},PetscViewer{Complex128}),arg1,arg2)
    return err
end

function VecScatterGetMerged(arg1::VecScatter{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:VecScatterGetMerged,petscComplexDouble),PetscErrorCode,(VecScatter{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function VecGetArray4d(arg1::Vec{Complex128},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Integer,arg9::Integer,arg10::Union{Ptr{Ptr{Ptr{Ptr{Ptr{Complex128}}}}},StridedArray{Ptr{Ptr{Ptr{Ptr{Complex128}}}}},Ptr{Ptr{Ptr{Ptr{Ptr{Complex128}}}}},Ref{Ptr{Ptr{Ptr{Ptr{Complex128}}}}}})
    err = ccall((:VecGetArray4d,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Ptr{Ptr{Ptr{Ptr{Complex128}}}}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function VecRestoreArray4d(arg1::Vec{Complex128},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Integer,arg9::Integer,arg10::Union{Ptr{Ptr{Ptr{Ptr{Ptr{Complex128}}}}},StridedArray{Ptr{Ptr{Ptr{Ptr{Complex128}}}}},Ptr{Ptr{Ptr{Ptr{Ptr{Complex128}}}}},Ref{Ptr{Ptr{Ptr{Ptr{Complex128}}}}}})
    err = ccall((:VecRestoreArray4d,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Ptr{Ptr{Ptr{Ptr{Complex128}}}}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function VecGetArray3d(arg1::Vec{Complex128},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Union{Ptr{Ptr{Ptr{Ptr{Complex128}}}},StridedArray{Ptr{Ptr{Ptr{Complex128}}}},Ptr{Ptr{Ptr{Ptr{Complex128}}}},Ref{Ptr{Ptr{Ptr{Complex128}}}}})
    err = ccall((:VecGetArray3d,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Ptr{Ptr{Ptr{Complex128}}}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function VecRestoreArray3d(arg1::Vec{Complex128},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Union{Ptr{Ptr{Ptr{Ptr{Complex128}}}},StridedArray{Ptr{Ptr{Ptr{Complex128}}}},Ptr{Ptr{Ptr{Ptr{Complex128}}}},Ref{Ptr{Ptr{Ptr{Complex128}}}}})
    err = ccall((:VecRestoreArray3d,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Ptr{Ptr{Ptr{Complex128}}}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function VecGetArray2d(arg1::Vec{Complex128},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Ptr{Ptr{Complex128}}},StridedArray{Ptr{Ptr{Complex128}}},Ptr{Ptr{Ptr{Complex128}}},Ref{Ptr{Ptr{Complex128}}}})
    err = ccall((:VecGetArray2d,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Int64,Int64,Int64,Int64,Ptr{Ptr{Ptr{Complex128}}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function VecRestoreArray2d(arg1::Vec{Complex128},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Ptr{Ptr{Complex128}}},StridedArray{Ptr{Ptr{Complex128}}},Ptr{Ptr{Ptr{Complex128}}},Ref{Ptr{Ptr{Complex128}}}})
    err = ccall((:VecRestoreArray2d,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Int64,Int64,Int64,Int64,Ptr{Ptr{Ptr{Complex128}}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function VecGetArray1d(arg1::Vec{Complex128},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Ptr{Complex128}},StridedArray{Ptr{Complex128}},Ptr{Ptr{Complex128}},Ref{Ptr{Complex128}}})
    err = ccall((:VecGetArray1d,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Int64,Int64,Ptr{Ptr{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function VecRestoreArray1d(arg1::Vec{Complex128},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Ptr{Complex128}},StridedArray{Ptr{Complex128}},Ptr{Ptr{Complex128}},Ref{Ptr{Complex128}}})
    err = ccall((:VecRestoreArray1d,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Int64,Int64,Ptr{Ptr{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function VecGetArray4dRead(arg1::Vec{Complex128},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Integer,arg9::Integer,arg10::Union{Ptr{Ptr{Ptr{Ptr{Ptr{Complex128}}}}},StridedArray{Ptr{Ptr{Ptr{Ptr{Complex128}}}}},Ptr{Ptr{Ptr{Ptr{Ptr{Complex128}}}}},Ref{Ptr{Ptr{Ptr{Ptr{Complex128}}}}}})
    err = ccall((:VecGetArray4dRead,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Ptr{Ptr{Ptr{Ptr{Complex128}}}}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function VecRestoreArray4dRead(arg1::Vec{Complex128},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Integer,arg9::Integer,arg10::Union{Ptr{Ptr{Ptr{Ptr{Ptr{Complex128}}}}},StridedArray{Ptr{Ptr{Ptr{Ptr{Complex128}}}}},Ptr{Ptr{Ptr{Ptr{Ptr{Complex128}}}}},Ref{Ptr{Ptr{Ptr{Ptr{Complex128}}}}}})
    err = ccall((:VecRestoreArray4dRead,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Ptr{Ptr{Ptr{Ptr{Complex128}}}}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function VecGetArray3dRead(arg1::Vec{Complex128},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Union{Ptr{Ptr{Ptr{Ptr{Complex128}}}},StridedArray{Ptr{Ptr{Ptr{Complex128}}}},Ptr{Ptr{Ptr{Ptr{Complex128}}}},Ref{Ptr{Ptr{Ptr{Complex128}}}}})
    err = ccall((:VecGetArray3dRead,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Ptr{Ptr{Ptr{Complex128}}}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function VecRestoreArray3dRead(arg1::Vec{Complex128},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Union{Ptr{Ptr{Ptr{Ptr{Complex128}}}},StridedArray{Ptr{Ptr{Ptr{Complex128}}}},Ptr{Ptr{Ptr{Ptr{Complex128}}}},Ref{Ptr{Ptr{Ptr{Complex128}}}}})
    err = ccall((:VecRestoreArray3dRead,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Ptr{Ptr{Ptr{Complex128}}}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function VecGetArray2dRead(arg1::Vec{Complex128},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Ptr{Ptr{Complex128}}},StridedArray{Ptr{Ptr{Complex128}}},Ptr{Ptr{Ptr{Complex128}}},Ref{Ptr{Ptr{Complex128}}}})
    err = ccall((:VecGetArray2dRead,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Int64,Int64,Int64,Int64,Ptr{Ptr{Ptr{Complex128}}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function VecRestoreArray2dRead(arg1::Vec{Complex128},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Ptr{Ptr{Complex128}}},StridedArray{Ptr{Ptr{Complex128}}},Ptr{Ptr{Ptr{Complex128}}},Ref{Ptr{Ptr{Complex128}}}})
    err = ccall((:VecRestoreArray2dRead,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Int64,Int64,Int64,Int64,Ptr{Ptr{Ptr{Complex128}}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function VecGetArray1dRead(arg1::Vec{Complex128},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Ptr{Complex128}},StridedArray{Ptr{Complex128}},Ptr{Ptr{Complex128}},Ref{Ptr{Complex128}}})
    err = ccall((:VecGetArray1dRead,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Int64,Int64,Ptr{Ptr{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function VecRestoreArray1dRead(arg1::Vec{Complex128},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Ptr{Complex128}},StridedArray{Ptr{Complex128}},Ptr{Ptr{Complex128}},Ref{Ptr{Complex128}}})
    err = ccall((:VecRestoreArray1dRead,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Int64,Int64,Ptr{Ptr{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function VecPlaceArray(arg1::Vec{Complex128},arg2::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}})
    err = ccall((:VecPlaceArray,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Ptr{Complex128}),arg1,arg2)
    return err
end

function VecResetArray(arg1::Vec{Complex128})
    err = ccall((:VecResetArray,petscComplexDouble),PetscErrorCode,(Vec{Complex128},),arg1)
    return err
end

function VecReplaceArray(arg1::Vec{Complex128},arg2::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}})
    err = ccall((:VecReplaceArray,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Ptr{Complex128}),arg1,arg2)
    return err
end

function VecGetArrays(arg1::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}},arg2::Integer,arg3::Union{Ptr{Ptr{Ptr{Complex128}}},StridedArray{Ptr{Ptr{Complex128}}},Ptr{Ptr{Ptr{Complex128}}},Ref{Ptr{Ptr{Complex128}}}})
    err = ccall((:VecGetArrays,petscComplexDouble),PetscErrorCode,(Ptr{Vec{Complex128}},Int64,Ptr{Ptr{Ptr{Complex128}}}),arg1,arg2,arg3)
    return err
end

function VecRestoreArrays(arg1::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}},arg2::Integer,arg3::Union{Ptr{Ptr{Ptr{Complex128}}},StridedArray{Ptr{Ptr{Complex128}}},Ptr{Ptr{Ptr{Complex128}}},Ref{Ptr{Ptr{Complex128}}}})
    err = ccall((:VecRestoreArrays,petscComplexDouble),PetscErrorCode,(Ptr{Vec{Complex128}},Int64,Ptr{Ptr{Ptr{Complex128}}}),arg1,arg2,arg3)
    return err
end

function VecView(arg1::Vec{Complex128},arg2::PetscViewer{Complex128})
    err = ccall((:VecView,petscComplexDouble),PetscErrorCode,(Vec{Complex128},PetscViewer{Complex128}),arg1,arg2)
    return err
end

function VecEqual(arg1::Vec{Complex128},arg2::Vec{Complex128},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:VecEqual,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Vec{Complex128},Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function VecLoad(arg1::Vec{Complex128},arg2::PetscViewer{Complex128})
    err = ccall((:VecLoad,petscComplexDouble),PetscErrorCode,(Vec{Complex128},PetscViewer{Complex128}),arg1,arg2)
    return err
end

function VecGetSize(arg1::Vec{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:VecGetSize,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function VecGetLocalSize(arg1::Vec{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:VecGetLocalSize,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function VecGetOwnershipRange(arg1::Vec{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:VecGetOwnershipRange,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function VecGetOwnershipRanges(arg1::Vec{Complex128},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:VecGetOwnershipRanges,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function VecSetLocalToGlobalMapping(arg1::Vec{Complex128},arg2::ISLocalToGlobalMapping{Complex128})
    err = ccall((:VecSetLocalToGlobalMapping,petscComplexDouble),PetscErrorCode,(Vec{Complex128},ISLocalToGlobalMapping{Complex128}),arg1,arg2)
    return err
end

function VecSetValuesLocal(arg1::Vec{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg5::InsertMode)
    err = ccall((:VecSetValuesLocal,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Int64,Ptr{Int64},Ptr{Complex128},InsertMode),arg1,arg2,arg3,arg4,arg5)
    return err
end

function VecGetLocalToGlobalMapping(arg1::Vec{Complex128},arg2::Union{Ptr{ISLocalToGlobalMapping{Complex128}},StridedArray{ISLocalToGlobalMapping{Complex128}},Ptr{ISLocalToGlobalMapping{Complex128}},Ref{ISLocalToGlobalMapping{Complex128}}})
    err = ccall((:VecGetLocalToGlobalMapping,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Ptr{ISLocalToGlobalMapping{Complex128}}),arg1,arg2)
    return err
end

function VecDotBegin(arg1::Vec{Complex128},arg2::Vec{Complex128},arg3::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}})
    err = ccall((:VecDotBegin,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Vec{Complex128},Ptr{Complex128}),arg1,arg2,arg3)
    return err
end

function VecDotEnd(arg1::Vec{Complex128},arg2::Vec{Complex128},arg3::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}})
    err = ccall((:VecDotEnd,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Vec{Complex128},Ptr{Complex128}),arg1,arg2,arg3)
    return err
end

function VecTDotBegin(arg1::Vec{Complex128},arg2::Vec{Complex128},arg3::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}})
    err = ccall((:VecTDotBegin,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Vec{Complex128},Ptr{Complex128}),arg1,arg2,arg3)
    return err
end

function VecTDotEnd(arg1::Vec{Complex128},arg2::Vec{Complex128},arg3::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}})
    err = ccall((:VecTDotEnd,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Vec{Complex128},Ptr{Complex128}),arg1,arg2,arg3)
    return err
end

function VecNormBegin(arg1::Vec{Complex128},arg2::NormType,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:VecNormBegin,petscComplexDouble),PetscErrorCode,(Vec{Complex128},NormType,Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function VecNormEnd(arg1::Vec{Complex128},arg2::NormType,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:VecNormEnd,petscComplexDouble),PetscErrorCode,(Vec{Complex128},NormType,Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function VecMDotBegin(arg1::Vec{Complex128},arg2::Integer,arg3::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}},arg4::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}})
    err = ccall((:VecMDotBegin,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Int64,Ptr{Vec{Complex128}},Ptr{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function VecMDotEnd(arg1::Vec{Complex128},arg2::Integer,arg3::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}},arg4::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}})
    err = ccall((:VecMDotEnd,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Int64,Ptr{Vec{Complex128}},Ptr{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function VecMTDotBegin(arg1::Vec{Complex128},arg2::Integer,arg3::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}},arg4::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}})
    err = ccall((:VecMTDotBegin,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Int64,Ptr{Vec{Complex128}},Ptr{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function VecMTDotEnd(arg1::Vec{Complex128},arg2::Integer,arg3::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}},arg4::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}})
    err = ccall((:VecMTDotEnd,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Int64,Ptr{Vec{Complex128}},Ptr{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function PetscCommSplitReductionBegin(arg0::Type{Complex128},arg1::MPI_Comm)
    err = ccall((:PetscCommSplitReductionBegin,petscComplexDouble),PetscErrorCode,(comm_type,),arg1)
    return err
end

function VecSetOption(arg1::Vec{Complex128},arg2::VecOption,arg3::PetscBool)
    err = ccall((:VecSetOption,petscComplexDouble),PetscErrorCode,(Vec{Complex128},VecOption,PetscBool),arg1,arg2,arg3)
    return err
end

function VecGetArray(arg1::Vec{Complex128},arg2::Union{Ptr{Ptr{Complex128}},StridedArray{Ptr{Complex128}},Ptr{Ptr{Complex128}},Ref{Ptr{Complex128}}})
    err = ccall((:VecGetArray,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Ptr{Ptr{Complex128}}),arg1,arg2)
    return err
end

function VecGetArrayRead(arg1::Vec{Complex128},arg2::Union{Ptr{Ptr{Complex128}},StridedArray{Ptr{Complex128}},Ptr{Ptr{Complex128}},Ref{Ptr{Complex128}}})
    err = ccall((:VecGetArrayRead,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Ptr{Ptr{Complex128}}),arg1,arg2)
    return err
end

function VecRestoreArray(arg1::Vec{Complex128},arg2::Union{Ptr{Ptr{Complex128}},StridedArray{Ptr{Complex128}},Ptr{Ptr{Complex128}},Ref{Ptr{Complex128}}})
    err = ccall((:VecRestoreArray,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Ptr{Ptr{Complex128}}),arg1,arg2)
    return err
end

function VecRestoreArrayRead(arg1::Vec{Complex128},arg2::Union{Ptr{Ptr{Complex128}},StridedArray{Ptr{Complex128}},Ptr{Ptr{Complex128}},Ref{Ptr{Complex128}}})
    err = ccall((:VecRestoreArrayRead,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Ptr{Ptr{Complex128}}),arg1,arg2)
    return err
end

function VecGetLocalVector(arg1::Vec{Complex128},arg2::Vec{Complex128})
    err = ccall((:VecGetLocalVector,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Vec{Complex128}),arg1,arg2)
    return err
end

function VecRestoreLocalVector(arg1::Vec{Complex128},arg2::Vec{Complex128})
    err = ccall((:VecRestoreLocalVector,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Vec{Complex128}),arg1,arg2)
    return err
end

function VecGetLocalVectorRead(arg1::Vec{Complex128},arg2::Vec{Complex128})
    err = ccall((:VecGetLocalVectorRead,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Vec{Complex128}),arg1,arg2)
    return err
end

function VecRestoreLocalVectorRead(arg1::Vec{Complex128},arg2::Vec{Complex128})
    err = ccall((:VecRestoreLocalVectorRead,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Vec{Complex128}),arg1,arg2)
    return err
end

function VecContourScale(arg1::Vec{Complex128},arg2::Float64,arg3::Float64)
    err = ccall((:VecContourScale,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Float64,Float64),arg1,arg2,arg3)
    return err
end

function VecSetOperation(arg1::Vec{Complex128},arg2::VecOperation,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:VecSetOperation,petscComplexDouble),PetscErrorCode,(Vec{Complex128},VecOperation,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function VecMPISetGhost(arg1::Vec{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:VecMPISetGhost,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function VecCreateGhost(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:VecCreateGhost,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Ptr{Int64},Ptr{Vec{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function VecCreateGhostWithArray(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg7::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:VecCreateGhostWithArray,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Ptr{Int64},Ptr{Complex128},Ptr{Vec{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function VecCreateGhostBlock(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:VecCreateGhostBlock,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Vec{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function VecCreateGhostBlockWithArray(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg8::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:VecCreateGhostBlockWithArray,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Complex128},Ptr{Vec{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function VecGhostGetLocalForm(arg1::Vec{Complex128},arg2::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:VecGhostGetLocalForm,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Ptr{Vec{Complex128}}),arg1,arg2)
    return err
end

function VecGhostRestoreLocalForm(arg1::Vec{Complex128},arg2::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:VecGhostRestoreLocalForm,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Ptr{Vec{Complex128}}),arg1,arg2)
    return err
end

function VecGhostIsLocalForm(arg1::Vec{Complex128},arg2::Vec{Complex128},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:VecGhostIsLocalForm,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Vec{Complex128},Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function VecGhostUpdateBegin(arg1::Vec{Complex128},arg2::InsertMode,arg3::ScatterMode)
    err = ccall((:VecGhostUpdateBegin,petscComplexDouble),PetscErrorCode,(Vec{Complex128},InsertMode,ScatterMode),arg1,arg2,arg3)
    return err
end

function VecGhostUpdateEnd(arg1::Vec{Complex128},arg2::InsertMode,arg3::ScatterMode)
    err = ccall((:VecGhostUpdateEnd,petscComplexDouble),PetscErrorCode,(Vec{Complex128},InsertMode,ScatterMode),arg1,arg2,arg3)
    return err
end

function VecConjugate(arg1::Vec{Complex128})
    err = ccall((:VecConjugate,petscComplexDouble),PetscErrorCode,(Vec{Complex128},),arg1)
    return err
end

function VecScatterCreateToAll(arg1::Vec{Complex128},arg2::Union{Ptr{VecScatter{Complex128}},StridedArray{VecScatter{Complex128}},Ptr{VecScatter{Complex128}},Ref{VecScatter{Complex128}}},arg3::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:VecScatterCreateToAll,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Ptr{VecScatter{Complex128}},Ptr{Vec{Complex128}}),arg1,arg2,arg3)
    return err
end

function VecScatterCreateToZero(arg1::Vec{Complex128},arg2::Union{Ptr{VecScatter{Complex128}},StridedArray{VecScatter{Complex128}},Ptr{VecScatter{Complex128}},Ref{VecScatter{Complex128}}},arg3::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:VecScatterCreateToZero,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Ptr{VecScatter{Complex128}},Ptr{Vec{Complex128}}),arg1,arg2,arg3)
    return err
end

function ISComplementVec(arg1::IS{Complex128},arg2::Vec{Complex128},arg3::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:ISComplementVec,petscComplexDouble),PetscErrorCode,(IS{Complex128},Vec{Complex128},Ptr{IS{Complex128}}),arg1,arg2,arg3)
    return err
end

function VecPow(arg1::Vec{Complex128},arg2::Complex128)
    err = ccall((:VecPow,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Complex128),arg1,arg2)
    return err
end

function VecMedian(arg1::Vec{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128},arg4::Vec{Complex128})
    err = ccall((:VecMedian,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Vec{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function VecWhichBetween(arg1::Vec{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128},arg4::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:VecWhichBetween,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Vec{Complex128},Vec{Complex128},Ptr{IS{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function VecWhichBetweenOrEqual(arg1::Vec{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128},arg4::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:VecWhichBetweenOrEqual,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Vec{Complex128},Vec{Complex128},Ptr{IS{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function VecWhichGreaterThan(arg1::Vec{Complex128},arg2::Vec{Complex128},arg3::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:VecWhichGreaterThan,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Vec{Complex128},Ptr{IS{Complex128}}),arg1,arg2,arg3)
    return err
end

function VecWhichLessThan(arg1::Vec{Complex128},arg2::Vec{Complex128},arg3::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:VecWhichLessThan,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Vec{Complex128},Ptr{IS{Complex128}}),arg1,arg2,arg3)
    return err
end

function VecWhichEqual(arg1::Vec{Complex128},arg2::Vec{Complex128},arg3::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:VecWhichEqual,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Vec{Complex128},Ptr{IS{Complex128}}),arg1,arg2,arg3)
    return err
end

function VecISAXPY(arg1::Vec{Complex128},arg2::IS{Complex128},arg3::Complex128,arg4::Vec{Complex128})
    err = ccall((:VecISAXPY,petscComplexDouble),PetscErrorCode,(Vec{Complex128},IS{Complex128},Complex128,Vec{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function VecISSet(arg1::Vec{Complex128},arg2::IS{Complex128},arg3::Complex128)
    err = ccall((:VecISSet,petscComplexDouble),PetscErrorCode,(Vec{Complex128},IS{Complex128},Complex128),arg1,arg2,arg3)
    return err
end

function VecBoundGradientProjection(arg1::Vec{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128},arg4::Vec{Complex128},arg5::Vec{Complex128})
    err = ccall((:VecBoundGradientProjection,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Vec{Complex128},Vec{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function VecStepBoundInfo(arg1::Vec{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128},arg4::Vec{Complex128},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg7::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:VecStepBoundInfo,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Vec{Complex128},Vec{Complex128},Vec{Complex128},Ptr{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function VecStepMax(arg1::Vec{Complex128},arg2::Vec{Complex128},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:VecStepMax,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Vec{Complex128},Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function VecStepMaxBounded(arg1::Vec{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128},arg4::Vec{Complex128},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:VecStepMaxBounded,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Vec{Complex128},Vec{Complex128},Vec{Complex128},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscViewerMathematicaGetVector(arg1::PetscViewer{Complex128},arg2::Vec{Complex128})
    err = ccall((:PetscViewerMathematicaGetVector,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Vec{Complex128}),arg1,arg2)
    return err
end

function PetscViewerMathematicaPutVector(arg1::PetscViewer{Complex128},arg2::Vec{Complex128})
    err = ccall((:PetscViewerMathematicaPutVector,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Vec{Complex128}),arg1,arg2)
    return err
end

function VecsDestroy(arg1::Vecs{Complex128})
    err = ccall((:VecsDestroy,petscComplexDouble),PetscErrorCode,(Vecs,),arg1)
    return err
end

function VecsCreateSeq(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Vecs{Complex128}},StridedArray{Vecs{Complex128}},Ptr{Vecs{Complex128}},Ref{Vecs{Complex128}}})
    err = ccall((:VecsCreateSeq,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Int64,Ptr{Vecs}),arg1,arg2,arg3,arg4)
    return err
end

function VecsCreateSeqWithArray(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg5::Union{Ptr{Vecs{Complex128}},StridedArray{Vecs{Complex128}},Ptr{Vecs{Complex128}},Ref{Vecs{Complex128}}})
    err = ccall((:VecsCreateSeqWithArray,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Int64,Ptr{Complex128},Ptr{Vecs}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function VecsDuplicate(arg1::Vecs{Complex128},arg2::Union{Ptr{Vecs{Complex128}},StridedArray{Vecs{Complex128}},Ptr{Vecs{Complex128}},Ref{Vecs{Complex128}}})
    err = ccall((:VecsDuplicate,petscComplexDouble),PetscErrorCode,(Vecs,Ptr{Vecs}),arg1,arg2)
    return err
end

function VecNestGetSubVecs(arg1::Vec{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Vec{Complex128}}},StridedArray{Ptr{Vec{Complex128}}},Ptr{Ptr{Vec{Complex128}}},Ref{Ptr{Vec{Complex128}}}})
    err = ccall((:VecNestGetSubVecs,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Ptr{Int64},Ptr{Ptr{Vec{Complex128}}}),arg1,arg2,arg3)
    return err
end

function VecNestGetSubVec(arg1::Vec{Complex128},arg2::Integer,arg3::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:VecNestGetSubVec,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Int64,Ptr{Vec{Complex128}}),arg1,arg2,arg3)
    return err
end

function VecNestSetSubVecs(arg1::Vec{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:VecNestSetSubVecs,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Int64,Ptr{Int64},Ptr{Vec{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function VecNestSetSubVec(arg1::Vec{Complex128},arg2::Integer,arg3::Vec{Complex128})
    err = ccall((:VecNestSetSubVec,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Int64,Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function VecCreateNest(arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}},arg4::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}},arg5::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:VecCreateNest,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Ptr{IS{Complex128}},Ptr{Vec{Complex128}},Ptr{Vec{Complex128}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function VecNestGetSize(arg1::Vec{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:VecNestGetSize,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscOptionsGetVec(arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Vec{Complex128},arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetVec,petscComplexDouble),PetscErrorCode,(Cstring,Cstring,Vec{Complex128},Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function VecChop(arg1::Vec{Complex128},arg2::Float64)
    err = ccall((:VecChop,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Float64),arg1,arg2)
    return err
end

function VecGetLayout(arg1::Vec{Complex128},arg2::Union{Ptr{PetscLayout{Complex128}},StridedArray{PetscLayout{Complex128}},Ptr{PetscLayout{Complex128}},Ref{PetscLayout{Complex128}}})
    err = ccall((:VecGetLayout,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Ptr{PetscLayout{Complex128}}),arg1,arg2)
    return err
end

function VecSetLayout(arg1::Vec{Complex128},arg2::PetscLayout{Complex128})
    err = ccall((:VecSetLayout,petscComplexDouble),PetscErrorCode,(Vec{Complex128},PetscLayout{Complex128}),arg1,arg2)
    return err
end

function PetscSectionVecView(arg1::PetscSection{Complex128},arg2::Vec{Complex128},arg3::PetscViewer{Complex128})
    err = ccall((:PetscSectionVecView,petscComplexDouble),PetscErrorCode,(PetscSection{Complex128},Vec{Complex128},PetscViewer{Complex128}),arg1,arg2,arg3)
    return err
end

function VecGetValuesSection(arg1::Vec{Complex128},arg2::PetscSection{Complex128},arg3::Integer,arg4::Union{Ptr{Ptr{Complex128}},StridedArray{Ptr{Complex128}},Ptr{Ptr{Complex128}},Ref{Ptr{Complex128}}})
    err = ccall((:VecGetValuesSection,petscComplexDouble),PetscErrorCode,(Vec{Complex128},PetscSection{Complex128},Int64,Ptr{Ptr{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function VecSetValuesSection(arg1::Vec{Complex128},arg2::PetscSection{Complex128},arg3::Integer,arg4::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg5::InsertMode)
    err = ccall((:VecSetValuesSection,petscComplexDouble),PetscErrorCode,(Vec{Complex128},PetscSection{Complex128},Int64,Ptr{Complex128},InsertMode),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscSectionVecNorm(arg1::PetscSection{Complex128},arg2::PetscSection{Complex128},arg3::Vec{Complex128},arg4::NormType,arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscSectionVecNorm,petscComplexDouble),PetscErrorCode,(PetscSection{Complex128},PetscSection{Complex128},Vec{Complex128},NormType,Ptr{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatGetFactor(arg1::Mat{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::MatFactorType,arg4::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatGetFactor,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Cstring,MatFactorType,Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function MatGetFactorAvailable(arg1::Mat{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::MatFactorType,arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatGetFactorAvailable,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Cstring,MatFactorType,Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function MatFactorGetSolverPackage(arg1::Mat{Complex128},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:MatFactorGetSolverPackage,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function MatGetFactorType(arg1::Mat{Complex128},arg2::Union{Ptr{MatFactorType},StridedArray{MatFactorType},Ptr{MatFactorType},Ref{MatFactorType}})
    err = ccall((:MatGetFactorType,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{MatFactorType}),arg1,arg2)
    return err
end

function MatSolverPackageRegister(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::MatType,arg3::MatFactorType,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatSolverPackageRegister,petscComplexDouble),PetscErrorCode,(Cstring,MatType,MatFactorType,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function MatSolverPackageGet(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::MatType,arg3::MatFactorType,arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg6::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:MatSolverPackageGet,petscComplexDouble),PetscErrorCode,(Cstring,MatType,MatFactorType,Ptr{PetscBool},Ptr{PetscBool},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatInitializePackage(arg0::Type{Complex128})
    err = ccall((:MatInitializePackage,petscComplexDouble),PetscErrorCode,())
    return err
end

function MatCreate(arg1::MPI_Comm,arg2::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatCreate,petscComplexDouble),PetscErrorCode,(comm_type,Ptr{Mat{Complex128}}),arg1,arg2)
    return err
end

function MatSetSizes(arg1::Mat{Complex128},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer)
    err = ccall((:MatSetSizes,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64,Int64,Int64,Int64),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatSetType(arg1::Mat{Complex128},arg2::MatType)
    err = ccall((:MatSetType,petscComplexDouble),PetscErrorCode,(Mat{Complex128},MatType),arg1,arg2)
    return err
end

function MatSetFromOptions(arg1::Mat{Complex128})
    err = ccall((:MatSetFromOptions,petscComplexDouble),PetscErrorCode,(Mat{Complex128},),arg1)
    return err
end

function MatRegisterBaseName(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:MatRegisterBaseName,petscComplexDouble),PetscErrorCode,(Cstring,Cstring,Cstring),arg1,arg2,arg3)
    return err
end

function MatSetOptionsPrefix(arg1::Mat{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:MatSetOptionsPrefix,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Cstring),arg1,arg2)
    return err
end

function MatAppendOptionsPrefix(arg1::Mat{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:MatAppendOptionsPrefix,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Cstring),arg1,arg2)
    return err
end

function MatGetOptionsPrefix(arg1::Mat{Complex128},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:MatGetOptionsPrefix,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function MatSetErrorIfFPE(arg1::Mat{Complex128},arg2::PetscBool)
    err = ccall((:MatSetErrorIfFPE,petscComplexDouble),PetscErrorCode,(Mat{Complex128},PetscBool),arg1,arg2)
    return err
end

function MatCreateSeqDense(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg5::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatCreateSeqDense,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Int64,Ptr{Complex128},Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatCreateDense(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg7::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatCreateDense,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Ptr{Complex128},Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatCreateSeqAIJ(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatCreateSeqAIJ,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Ptr{Int64},Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatCreateAIJ(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Integer,arg9::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg10::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatCreateAIJ,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Int64,Ptr{Int64},Int64,Ptr{Int64},Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function MatCreateMPIAIJWithArrays(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg9::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatCreateMPIAIJWithArrays,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Int64},Ptr{Complex128},Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
    return err
end

function MatCreateMPIAIJWithSplitArrays(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg9::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg10::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg11::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg12::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatCreateMPIAIJWithSplitArrays,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Int64},Ptr{Complex128},Ptr{Int64},Ptr{Int64},Ptr{Complex128},Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12)
    return err
end

function MatCreateSeqBAIJ(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatCreateSeqBAIJ,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatCreateBAIJ(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg9::Integer,arg10::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg11::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatCreateBAIJ,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Int64},Int64,Ptr{Int64},Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11)
    return err
end

function MatCreateMPIBAIJWithArrays(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg9::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg10::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatCreateMPIBAIJWithArrays,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Int64},Ptr{Complex128},Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function MatCreateMPIAdj(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatCreateMPIAdj,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Int64,Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatCreateSeqSBAIJ(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatCreateSeqSBAIJ,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatCreateSBAIJ(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg9::Integer,arg10::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg11::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatCreateSBAIJ,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Int64},Int64,Ptr{Int64},Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11)
    return err
end

function MatCreateMPISBAIJWithArrays(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg9::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg10::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatCreateMPISBAIJWithArrays,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Int64},Ptr{Complex128},Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function MatSeqSBAIJSetPreallocationCSR(arg1::Mat{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}})
    err = ccall((:MatSeqSBAIJSetPreallocationCSR,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64,Ptr{Int64},Ptr{Int64},Ptr{Complex128}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatMPISBAIJSetPreallocationCSR(arg1::Mat{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}})
    err = ccall((:MatMPISBAIJSetPreallocationCSR,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64,Ptr{Int64},Ptr{Int64},Ptr{Complex128}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatXAIJSetPreallocation(arg1::Mat{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatXAIJSetPreallocation,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64,Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatCreateShell(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg7::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatCreateShell,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Ptr{Void},Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatCreateNormal(arg1::Mat{Complex128},arg2::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatCreateNormal,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{Mat{Complex128}}),arg1,arg2)
    return err
end

function MatCreateLRC(arg1::Mat{Complex128},arg2::Mat{Complex128},arg3::Mat{Complex128},arg4::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatCreateLRC,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Mat{Complex128},Mat{Complex128},Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function MatCreateIS(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::ISLocalToGlobalMapping{Complex128},arg8::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatCreateIS,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Int64,ISLocalToGlobalMapping{Complex128},Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function MatCreateSeqAIJCRL(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatCreateSeqAIJCRL,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Ptr{Int64},Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatCreateMPIAIJCRL(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Integer,arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatCreateMPIAIJCRL,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Ptr{Int64},Int64,Ptr{Int64},Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function MatCreateSeqBSTRM(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatCreateSeqBSTRM,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatCreateMPIBSTRM(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg9::Integer,arg10::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg11::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatCreateMPIBSTRM,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Int64},Int64,Ptr{Int64},Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11)
    return err
end

function MatCreateSeqSBSTRM(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatCreateSeqSBSTRM,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatCreateMPISBSTRM(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg9::Integer,arg10::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg11::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatCreateMPISBSTRM,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Int64},Int64,Ptr{Int64},Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11)
    return err
end

function MatCreateScatter(arg1::MPI_Comm,arg2::VecScatter{Complex128},arg3::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatCreateScatter,petscComplexDouble),PetscErrorCode,(comm_type,VecScatter{Complex128},Ptr{Mat{Complex128}}),arg1,arg2,arg3)
    return err
end

function MatScatterSetVecScatter(arg1::Mat{Complex128},arg2::VecScatter{Complex128})
    err = ccall((:MatScatterSetVecScatter,petscComplexDouble),PetscErrorCode,(Mat{Complex128},VecScatter{Complex128}),arg1,arg2)
    return err
end

function MatScatterGetVecScatter(arg1::Mat{Complex128},arg2::Union{Ptr{VecScatter{Complex128}},StridedArray{VecScatter{Complex128}},Ptr{VecScatter{Complex128}},Ref{VecScatter{Complex128}}})
    err = ccall((:MatScatterGetVecScatter,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{VecScatter{Complex128}}),arg1,arg2)
    return err
end

function MatCreateBlockMat(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatCreateBlockMat,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatCompositeAddMat(arg1::Mat{Complex128},arg2::Mat{Complex128})
    err = ccall((:MatCompositeAddMat,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Mat{Complex128}),arg1,arg2)
    return err
end

function MatCompositeMerge(arg1::Mat{Complex128})
    err = ccall((:MatCompositeMerge,petscComplexDouble),PetscErrorCode,(Mat{Complex128},),arg1)
    return err
end

function MatCreateComposite(arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}},arg4::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatCreateComposite,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Ptr{Mat{Complex128}},Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function MatCompositeSetType(arg1::Mat{Complex128},arg2::MatCompositeType)
    err = ccall((:MatCompositeSetType,petscComplexDouble),PetscErrorCode,(Mat{Complex128},MatCompositeType),arg1,arg2)
    return err
end

function MatCreateFFT(arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::MatType,arg5::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatCreateFFT,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Ptr{Int64},MatType,Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatCreateSeqCUFFT(arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatCreateSeqCUFFT,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Ptr{Int64},Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function MatCreateTranspose(arg1::Mat{Complex128},arg2::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatCreateTranspose,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{Mat{Complex128}}),arg1,arg2)
    return err
end

function MatCreateHermitianTranspose(arg1::Mat{Complex128},arg2::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatCreateHermitianTranspose,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{Mat{Complex128}}),arg1,arg2)
    return err
end

function MatCreateSubMatrix(arg1::Mat{Complex128},arg2::IS{Complex128},arg3::IS{Complex128},arg4::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatCreateSubMatrix,petscComplexDouble),PetscErrorCode,(Mat{Complex128},IS{Complex128},IS{Complex128},Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function MatSubMatrixUpdate(arg1::Mat{Complex128},arg2::Mat{Complex128},arg3::IS{Complex128},arg4::IS{Complex128})
    err = ccall((:MatSubMatrixUpdate,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Mat{Complex128},IS{Complex128},IS{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function MatCreateLocalRef(arg1::Mat{Complex128},arg2::IS{Complex128},arg3::IS{Complex128},arg4::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatCreateLocalRef,petscComplexDouble),PetscErrorCode,(Mat{Complex128},IS{Complex128},IS{Complex128},Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function MatPythonSetType(arg1::Mat{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:MatPythonSetType,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Cstring),arg1,arg2)
    return err
end

function MatSetUp(arg1::Mat{Complex128})
    err = ccall((:MatSetUp,petscComplexDouble),PetscErrorCode,(Mat{Complex128},),arg1)
    return err
end

function MatDestroy(arg1::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatDestroy,petscComplexDouble),PetscErrorCode,(Ptr{Mat{Complex128}},),arg1)
    return err
end

function MatGetNonzeroState(arg1::Mat{Complex128},arg2::Union{Ptr{PetscObjectState},StridedArray{PetscObjectState},Ptr{PetscObjectState},Ref{PetscObjectState}})
    err = ccall((:MatGetNonzeroState,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{PetscObjectState}),arg1,arg2)
    return err
end

function MatConjugate(arg1::Mat{Complex128})
    err = ccall((:MatConjugate,petscComplexDouble),PetscErrorCode,(Mat{Complex128},),arg1)
    return err
end

function MatRealPart(arg1::Mat{Complex128})
    err = ccall((:MatRealPart,petscComplexDouble),PetscErrorCode,(Mat{Complex128},),arg1)
    return err
end

function MatImaginaryPart(arg1::Mat{Complex128})
    err = ccall((:MatImaginaryPart,petscComplexDouble),PetscErrorCode,(Mat{Complex128},),arg1)
    return err
end

function MatGetDiagonalBlock(arg1::Mat{Complex128},arg2::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatGetDiagonalBlock,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{Mat{Complex128}}),arg1,arg2)
    return err
end

function MatGetTrace(arg1::Mat{Complex128},arg2::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}})
    err = ccall((:MatGetTrace,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{Complex128}),arg1,arg2)
    return err
end

function MatInvertBlockDiagonal(arg1::Mat{Complex128},arg2::Union{Ptr{Ptr{Complex128}},StridedArray{Ptr{Complex128}},Ptr{Ptr{Complex128}},Ref{Ptr{Complex128}}})
    err = ccall((:MatInvertBlockDiagonal,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{Ptr{Complex128}}),arg1,arg2)
    return err
end

function MatSetValues(arg1::Mat{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg7::InsertMode)
    err = ccall((:MatSetValues,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64,Ptr{Int64},Int64,Ptr{Int64},Ptr{Complex128},InsertMode),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatSetValuesBlocked(arg1::Mat{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg7::InsertMode)
    err = ccall((:MatSetValuesBlocked,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64,Ptr{Int64},Int64,Ptr{Int64},Ptr{Complex128},InsertMode),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatSetValuesRow(arg1::Mat{Complex128},arg2::Integer,arg3::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}})
    err = ccall((:MatSetValuesRow,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64,Ptr{Complex128}),arg1,arg2,arg3)
    return err
end

function MatSetValuesRowLocal(arg1::Mat{Complex128},arg2::Integer,arg3::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}})
    err = ccall((:MatSetValuesRowLocal,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64,Ptr{Complex128}),arg1,arg2,arg3)
    return err
end

function MatSetValuesBatch(arg1::Mat{Complex128},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}})
    err = ccall((:MatSetValuesBatch,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64,Int64,Ptr{Int64},Ptr{Complex128}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatSetRandom(arg1::Mat{Complex128},arg2::PetscRandom{Complex128})
    err = ccall((:MatSetRandom,petscComplexDouble),PetscErrorCode,(Mat{Complex128},PetscRandom{Complex128}),arg1,arg2)
    return err
end

function MatSetValuesStencil(arg1::Mat{Complex128},arg2::Integer,arg3::Union{Ptr{MatStencil},StridedArray{MatStencil},Ptr{MatStencil},Ref{MatStencil}},arg4::Integer,arg5::Union{Ptr{MatStencil},StridedArray{MatStencil},Ptr{MatStencil},Ref{MatStencil}},arg6::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg7::InsertMode)
    err = ccall((:MatSetValuesStencil,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64,Ptr{MatStencil},Int64,Ptr{MatStencil},Ptr{Complex128},InsertMode),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatSetValuesBlockedStencil(arg1::Mat{Complex128},arg2::Integer,arg3::Union{Ptr{MatStencil},StridedArray{MatStencil},Ptr{MatStencil},Ref{MatStencil}},arg4::Integer,arg5::Union{Ptr{MatStencil},StridedArray{MatStencil},Ptr{MatStencil},Ref{MatStencil}},arg6::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg7::InsertMode)
    err = ccall((:MatSetValuesBlockedStencil,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64,Ptr{MatStencil},Int64,Ptr{MatStencil},Ptr{Complex128},InsertMode),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatSetStencil(arg1::Mat{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Integer)
    err = ccall((:MatSetStencil,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64,Ptr{Int64},Ptr{Int64},Int64),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatSetColoring(arg1::Mat{Complex128},arg2::ISColoring{Complex128})
    err = ccall((:MatSetColoring,petscComplexDouble),PetscErrorCode,(Mat{Complex128},ISColoring{Complex128}),arg1,arg2)
    return err
end

function MatSetValuesAdifor(arg1::Mat{Complex128},arg2::Integer,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatSetValuesAdifor,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function MatAssemblyBegin(arg1::Mat{Complex128},arg2::MatAssemblyType)
    err = ccall((:MatAssemblyBegin,petscComplexDouble),PetscErrorCode,(Mat{Complex128},MatAssemblyType),arg1,arg2)
    return err
end

function MatAssemblyEnd(arg1::Mat{Complex128},arg2::MatAssemblyType)
    err = ccall((:MatAssemblyEnd,petscComplexDouble),PetscErrorCode,(Mat{Complex128},MatAssemblyType),arg1,arg2)
    return err
end

function MatAssembled(arg1::Mat{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatAssembled,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function MatSetOption(arg1::Mat{Complex128},arg2::MatOption,arg3::PetscBool)
    err = ccall((:MatSetOption,petscComplexDouble),PetscErrorCode,(Mat{Complex128},MatOption,PetscBool),arg1,arg2,arg3)
    return err
end

function MatGetOption(arg1::Mat{Complex128},arg2::MatOption,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatGetOption,petscComplexDouble),PetscErrorCode,(Mat{Complex128},MatOption,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function MatGetType(arg1::Mat{Complex128},arg2::Union{Ptr{MatType},StridedArray{MatType},Ptr{MatType},Ref{MatType}})
    err = ccall((:MatGetType,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{MatType}),arg1,arg2)
    return err
end

function MatGetValues(arg1::Mat{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}})
    err = ccall((:MatGetValues,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64,Ptr{Int64},Int64,Ptr{Int64},Ptr{Complex128}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatGetRow(arg1::Mat{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg5::Union{Ptr{Ptr{Complex128}},StridedArray{Ptr{Complex128}},Ptr{Ptr{Complex128}},Ref{Ptr{Complex128}}})
    err = ccall((:MatGetRow,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64,Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Complex128}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatRestoreRow(arg1::Mat{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg5::Union{Ptr{Ptr{Complex128}},StridedArray{Ptr{Complex128}},Ptr{Ptr{Complex128}},Ref{Ptr{Complex128}}})
    err = ccall((:MatRestoreRow,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64,Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Complex128}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatGetRowUpperTriangular(arg1::Mat{Complex128})
    err = ccall((:MatGetRowUpperTriangular,petscComplexDouble),PetscErrorCode,(Mat{Complex128},),arg1)
    return err
end

function MatRestoreRowUpperTriangular(arg1::Mat{Complex128})
    err = ccall((:MatRestoreRowUpperTriangular,petscComplexDouble),PetscErrorCode,(Mat{Complex128},),arg1)
    return err
end

function MatGetColumn(arg1::Mat{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg5::Union{Ptr{Ptr{Complex128}},StridedArray{Ptr{Complex128}},Ptr{Ptr{Complex128}},Ref{Ptr{Complex128}}})
    err = ccall((:MatGetColumn,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64,Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Complex128}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatRestoreColumn(arg1::Mat{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg5::Union{Ptr{Ptr{Complex128}},StridedArray{Ptr{Complex128}},Ptr{Ptr{Complex128}},Ref{Ptr{Complex128}}})
    err = ccall((:MatRestoreColumn,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64,Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Complex128}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatGetColumnVector(arg1::Mat{Complex128},arg2::Vec{Complex128},arg3::Integer)
    err = ccall((:MatGetColumnVector,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Vec{Complex128},Int64),arg1,arg2,arg3)
    return err
end

function MatSeqAIJGetArray(arg1::Mat{Complex128},arg2::Union{Ptr{Ptr{Complex128}},StridedArray{Ptr{Complex128}},Ptr{Ptr{Complex128}},Ref{Ptr{Complex128}}})
    err = ccall((:MatSeqAIJGetArray,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{Ptr{Complex128}}),arg1,arg2)
    return err
end

function MatSeqAIJRestoreArray(arg1::Mat{Complex128},arg2::Union{Ptr{Ptr{Complex128}},StridedArray{Ptr{Complex128}},Ptr{Ptr{Complex128}},Ref{Ptr{Complex128}}})
    err = ccall((:MatSeqAIJRestoreArray,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{Ptr{Complex128}}),arg1,arg2)
    return err
end

function MatSeqAIJGetMaxRowNonzeros(arg1::Mat{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatSeqAIJGetMaxRowNonzeros,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function MatSeqAIJSetValuesLocalFast(arg1::Mat{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg7::InsertMode)
    err = ccall((:MatSeqAIJSetValuesLocalFast,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64,Ptr{Int64},Int64,Ptr{Int64},Ptr{Complex128},InsertMode),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatDenseGetArray(arg1::Mat{Complex128},arg2::Union{Ptr{Ptr{Complex128}},StridedArray{Ptr{Complex128}},Ptr{Ptr{Complex128}},Ref{Ptr{Complex128}}})
    err = ccall((:MatDenseGetArray,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{Ptr{Complex128}}),arg1,arg2)
    return err
end

function MatDenseRestoreArray(arg1::Mat{Complex128},arg2::Union{Ptr{Ptr{Complex128}},StridedArray{Ptr{Complex128}},Ptr{Ptr{Complex128}},Ref{Ptr{Complex128}}})
    err = ccall((:MatDenseRestoreArray,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{Ptr{Complex128}}),arg1,arg2)
    return err
end

function MatGetBlockSize(arg1::Mat{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatGetBlockSize,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function MatSetBlockSize(arg1::Mat{Complex128},arg2::Integer)
    err = ccall((:MatSetBlockSize,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64),arg1,arg2)
    return err
end

function MatGetBlockSizes(arg1::Mat{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatGetBlockSizes,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function MatSetBlockSizes(arg1::Mat{Complex128},arg2::Integer,arg3::Integer)
    err = ccall((:MatSetBlockSizes,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64,Int64),arg1,arg2,arg3)
    return err
end

function MatSetBlockSizesFromMats(arg1::Mat{Complex128},arg2::Mat{Complex128},arg3::Mat{Complex128})
    err = ccall((:MatSetBlockSizesFromMats,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Mat{Complex128},Mat{Complex128}),arg1,arg2,arg3)
    return err
end

function MatSetNThreads(arg1::Mat{Complex128},arg2::Integer)
    err = ccall((:MatSetNThreads,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64),arg1,arg2)
    return err
end

function MatGetNThreads(arg1::Mat{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatGetNThreads,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function MatMult(arg1::Mat{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128})
    err = ccall((:MatMult,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function MatMultDiagonalBlock(arg1::Mat{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128})
    err = ccall((:MatMultDiagonalBlock,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function MatMultAdd(arg1::Mat{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128},arg4::Vec{Complex128})
    err = ccall((:MatMultAdd,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Vec{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function MatMultTranspose(arg1::Mat{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128})
    err = ccall((:MatMultTranspose,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function MatMultHermitianTranspose(arg1::Mat{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128})
    err = ccall((:MatMultHermitianTranspose,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function MatIsTranspose(arg1::Mat{Complex128},arg2::Mat{Complex128},arg3::Float64,arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatIsTranspose,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Mat{Complex128},Float64,Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function MatIsHermitianTranspose(arg1::Mat{Complex128},arg2::Mat{Complex128},arg3::Float64,arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatIsHermitianTranspose,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Mat{Complex128},Float64,Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function MatMultTransposeAdd(arg1::Mat{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128},arg4::Vec{Complex128})
    err = ccall((:MatMultTransposeAdd,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Vec{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function MatMultHermitianTransposeAdd(arg1::Mat{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128},arg4::Vec{Complex128})
    err = ccall((:MatMultHermitianTransposeAdd,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Vec{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function MatMultConstrained(arg1::Mat{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128})
    err = ccall((:MatMultConstrained,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function MatMultTransposeConstrained(arg1::Mat{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128})
    err = ccall((:MatMultTransposeConstrained,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function MatMatSolve(arg1::Mat{Complex128},arg2::Mat{Complex128},arg3::Mat{Complex128})
    err = ccall((:MatMatSolve,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Mat{Complex128},Mat{Complex128}),arg1,arg2,arg3)
    return err
end

function MatResidual(arg1::Mat{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128},arg4::Vec{Complex128})
    err = ccall((:MatResidual,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Vec{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function MatConvert(arg1::Mat{Complex128},arg2::MatType,arg3::MatReuse,arg4::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatConvert,petscComplexDouble),PetscErrorCode,(Mat{Complex128},MatType,MatReuse,Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function MatDuplicate(arg1::Mat{Complex128},arg2::MatDuplicateOption,arg3::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatDuplicate,petscComplexDouble),PetscErrorCode,(Mat{Complex128},MatDuplicateOption,Ptr{Mat{Complex128}}),arg1,arg2,arg3)
    return err
end

function MatCopy(arg1::Mat{Complex128},arg2::Mat{Complex128},arg3::MatStructure)
    err = ccall((:MatCopy,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Mat{Complex128},MatStructure),arg1,arg2,arg3)
    return err
end

function MatView(arg1::Mat{Complex128},arg2::PetscViewer{Complex128})
    err = ccall((:MatView,petscComplexDouble),PetscErrorCode,(Mat{Complex128},PetscViewer{Complex128}),arg1,arg2)
    return err
end

function MatIsSymmetric(arg1::Mat{Complex128},arg2::Float64,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatIsSymmetric,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Float64,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function MatIsStructurallySymmetric(arg1::Mat{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatIsStructurallySymmetric,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function MatIsHermitian(arg1::Mat{Complex128},arg2::Float64,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatIsHermitian,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Float64,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function MatIsSymmetricKnown(arg1::Mat{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatIsSymmetricKnown,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{PetscBool},Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function MatIsHermitianKnown(arg1::Mat{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatIsHermitianKnown,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{PetscBool},Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function MatMissingDiagonal(arg1::Mat{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatMissingDiagonal,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{PetscBool},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function MatLoad(arg1::Mat{Complex128},arg2::PetscViewer{Complex128})
    err = ccall((:MatLoad,petscComplexDouble),PetscErrorCode,(Mat{Complex128},PetscViewer{Complex128}),arg1,arg2)
    return err
end

function MatGetRowIJ(arg1::Mat{Complex128},arg2::Integer,arg3::PetscBool,arg4::PetscBool,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg7::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg8::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatGetRowIJ,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64,PetscBool,PetscBool,Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function MatRestoreRowIJ(arg1::Mat{Complex128},arg2::Integer,arg3::PetscBool,arg4::PetscBool,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg7::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg8::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatRestoreRowIJ,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64,PetscBool,PetscBool,Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function MatGetColumnIJ(arg1::Mat{Complex128},arg2::Integer,arg3::PetscBool,arg4::PetscBool,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg7::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg8::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatGetColumnIJ,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64,PetscBool,PetscBool,Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function MatRestoreColumnIJ(arg1::Mat{Complex128},arg2::Integer,arg3::PetscBool,arg4::PetscBool,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg7::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg8::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatRestoreColumnIJ,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64,PetscBool,PetscBool,Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function MatGetInfo(arg1::Mat{Complex128},arg2::MatInfoType,arg3::Union{Ptr{MatInfo{Complex128}},StridedArray{MatInfo{Complex128}},Ptr{MatInfo{Complex128}},Ref{MatInfo{Complex128}}})
    err = ccall((:MatGetInfo,petscComplexDouble),PetscErrorCode,(Mat{Complex128},MatInfoType,Ptr{MatInfo{Complex128}}),arg1,arg2,arg3)
    return err
end

function MatGetDiagonal(arg1::Mat{Complex128},arg2::Vec{Complex128})
    err = ccall((:MatGetDiagonal,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Vec{Complex128}),arg1,arg2)
    return err
end

function MatGetRowMax(arg1::Mat{Complex128},arg2::Vec{Complex128},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatGetRowMax,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Vec{Complex128},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function MatGetRowMin(arg1::Mat{Complex128},arg2::Vec{Complex128},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatGetRowMin,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Vec{Complex128},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function MatGetRowMaxAbs(arg1::Mat{Complex128},arg2::Vec{Complex128},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatGetRowMaxAbs,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Vec{Complex128},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function MatGetRowMinAbs(arg1::Mat{Complex128},arg2::Vec{Complex128},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatGetRowMinAbs,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Vec{Complex128},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function MatGetRowSum(arg1::Mat{Complex128},arg2::Vec{Complex128})
    err = ccall((:MatGetRowSum,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Vec{Complex128}),arg1,arg2)
    return err
end

function MatTranspose(arg1::Mat{Complex128},arg2::MatReuse,arg3::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatTranspose,petscComplexDouble),PetscErrorCode,(Mat{Complex128},MatReuse,Ptr{Mat{Complex128}}),arg1,arg2,arg3)
    return err
end

function MatHermitianTranspose(arg1::Mat{Complex128},arg2::MatReuse,arg3::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatHermitianTranspose,petscComplexDouble),PetscErrorCode,(Mat{Complex128},MatReuse,Ptr{Mat{Complex128}}),arg1,arg2,arg3)
    return err
end

function MatPermute(arg1::Mat{Complex128},arg2::IS{Complex128},arg3::IS{Complex128},arg4::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatPermute,petscComplexDouble),PetscErrorCode,(Mat{Complex128},IS{Complex128},IS{Complex128},Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function MatDiagonalScale(arg1::Mat{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128})
    err = ccall((:MatDiagonalScale,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function MatDiagonalSet(arg1::Mat{Complex128},arg2::Vec{Complex128},arg3::InsertMode)
    err = ccall((:MatDiagonalSet,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Vec{Complex128},InsertMode),arg1,arg2,arg3)
    return err
end

function MatEqual(arg1::Mat{Complex128},arg2::Mat{Complex128},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatEqual,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Mat{Complex128},Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function MatMultEqual(arg1::Mat{Complex128},arg2::Mat{Complex128},arg3::Integer,arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatMultEqual,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Mat{Complex128},Int64,Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function MatMultAddEqual(arg1::Mat{Complex128},arg2::Mat{Complex128},arg3::Integer,arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatMultAddEqual,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Mat{Complex128},Int64,Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function MatMultTransposeEqual(arg1::Mat{Complex128},arg2::Mat{Complex128},arg3::Integer,arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatMultTransposeEqual,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Mat{Complex128},Int64,Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function MatMultTransposeAddEqual(arg1::Mat{Complex128},arg2::Mat{Complex128},arg3::Integer,arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatMultTransposeAddEqual,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Mat{Complex128},Int64,Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function MatNorm(arg1::Mat{Complex128},arg2::NormType,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:MatNorm,petscComplexDouble),PetscErrorCode,(Mat{Complex128},NormType,Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function MatGetColumnNorms(arg1::Mat{Complex128},arg2::NormType,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:MatGetColumnNorms,petscComplexDouble),PetscErrorCode,(Mat{Complex128},NormType,Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function MatZeroEntries(arg1::Mat{Complex128})
    err = ccall((:MatZeroEntries,petscComplexDouble),PetscErrorCode,(Mat{Complex128},),arg1)
    return err
end

function MatZeroRows(arg1::Mat{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Complex128,arg5::Vec{Complex128},arg6::Vec{Complex128})
    err = ccall((:MatZeroRows,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64,Ptr{Int64},Complex128,Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatZeroRowsIS(arg1::Mat{Complex128},arg2::IS{Complex128},arg3::Complex128,arg4::Vec{Complex128},arg5::Vec{Complex128})
    err = ccall((:MatZeroRowsIS,petscComplexDouble),PetscErrorCode,(Mat{Complex128},IS{Complex128},Complex128,Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatZeroRowsStencil(arg1::Mat{Complex128},arg2::Integer,arg3::Union{Ptr{MatStencil},StridedArray{MatStencil},Ptr{MatStencil},Ref{MatStencil}},arg4::Complex128,arg5::Vec{Complex128},arg6::Vec{Complex128})
    err = ccall((:MatZeroRowsStencil,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64,Ptr{MatStencil},Complex128,Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatZeroRowsColumnsStencil(arg1::Mat{Complex128},arg2::Integer,arg3::Union{Ptr{MatStencil},StridedArray{MatStencil},Ptr{MatStencil},Ref{MatStencil}},arg4::Complex128,arg5::Vec{Complex128},arg6::Vec{Complex128})
    err = ccall((:MatZeroRowsColumnsStencil,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64,Ptr{MatStencil},Complex128,Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatZeroRowsColumns(arg1::Mat{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Complex128,arg5::Vec{Complex128},arg6::Vec{Complex128})
    err = ccall((:MatZeroRowsColumns,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64,Ptr{Int64},Complex128,Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatZeroRowsColumnsIS(arg1::Mat{Complex128},arg2::IS{Complex128},arg3::Complex128,arg4::Vec{Complex128},arg5::Vec{Complex128})
    err = ccall((:MatZeroRowsColumnsIS,petscComplexDouble),PetscErrorCode,(Mat{Complex128},IS{Complex128},Complex128,Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatGetSize(arg1::Mat{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatGetSize,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function MatGetLocalSize(arg1::Mat{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatGetLocalSize,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function MatGetOwnershipRange(arg1::Mat{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatGetOwnershipRange,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function MatGetOwnershipRanges(arg1::Mat{Complex128},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:MatGetOwnershipRanges,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function MatGetOwnershipRangeColumn(arg1::Mat{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatGetOwnershipRangeColumn,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function MatGetOwnershipRangesColumn(arg1::Mat{Complex128},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:MatGetOwnershipRangesColumn,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function MatGetOwnershipIS(arg1::Mat{Complex128},arg2::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}},arg3::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:MatGetOwnershipIS,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{IS{Complex128}},Ptr{IS{Complex128}}),arg1,arg2,arg3)
    return err
end

function MatGetSubMatrices(arg1::Mat{Complex128},arg2::Integer,arg3::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}},arg4::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}},arg5::MatReuse,arg6::Union{Ptr{Ptr{Mat{Complex128}}},StridedArray{Ptr{Mat{Complex128}}},Ptr{Ptr{Mat{Complex128}}},Ref{Ptr{Mat{Complex128}}}})
    err = ccall((:MatGetSubMatrices,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64,Ptr{IS{Complex128}},Ptr{IS{Complex128}},MatReuse,Ptr{Ptr{Mat{Complex128}}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatGetSubMatricesMPI(arg1::Mat{Complex128},arg2::Integer,arg3::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}},arg4::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}},arg5::MatReuse,arg6::Union{Ptr{Ptr{Mat{Complex128}}},StridedArray{Ptr{Mat{Complex128}}},Ptr{Ptr{Mat{Complex128}}},Ref{Ptr{Mat{Complex128}}}})
    err = ccall((:MatGetSubMatricesMPI,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64,Ptr{IS{Complex128}},Ptr{IS{Complex128}},MatReuse,Ptr{Ptr{Mat{Complex128}}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatDestroyMatrices(arg1::Integer,arg2::Union{Ptr{Ptr{Mat{Complex128}}},StridedArray{Ptr{Mat{Complex128}}},Ptr{Ptr{Mat{Complex128}}},Ref{Ptr{Mat{Complex128}}}})
    err = ccall((:MatDestroyMatrices,petscComplexDouble),PetscErrorCode,(Int64,Ptr{Ptr{Mat{Complex128}}}),arg1,arg2)
    return err
end

function MatGetSubMatrix(arg1::Mat{Complex128},arg2::IS{Complex128},arg3::IS{Complex128},arg4::MatReuse,arg5::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatGetSubMatrix,petscComplexDouble),PetscErrorCode,(Mat{Complex128},IS{Complex128},IS{Complex128},MatReuse,Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatGetLocalSubMatrix(arg1::Mat{Complex128},arg2::IS{Complex128},arg3::IS{Complex128},arg4::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatGetLocalSubMatrix,petscComplexDouble),PetscErrorCode,(Mat{Complex128},IS{Complex128},IS{Complex128},Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function MatRestoreLocalSubMatrix(arg1::Mat{Complex128},arg2::IS{Complex128},arg3::IS{Complex128},arg4::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatRestoreLocalSubMatrix,petscComplexDouble),PetscErrorCode,(Mat{Complex128},IS{Complex128},IS{Complex128},Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function MatGetSeqNonzeroStructure(arg1::Mat{Complex128},arg2::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatGetSeqNonzeroStructure,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{Mat{Complex128}}),arg1,arg2)
    return err
end

function MatDestroySeqNonzeroStructure(arg1::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatDestroySeqNonzeroStructure,petscComplexDouble),PetscErrorCode,(Ptr{Mat{Complex128}},),arg1)
    return err
end

function MatCreateMPIAIJSumSeqAIJ(arg1::MPI_Comm,arg2::Mat{Complex128},arg3::Integer,arg4::Integer,arg5::MatReuse,arg6::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatCreateMPIAIJSumSeqAIJ,petscComplexDouble),PetscErrorCode,(comm_type,Mat{Complex128},Int64,Int64,MatReuse,Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatCreateMPIAIJSumSeqAIJSymbolic(arg1::MPI_Comm,arg2::Mat{Complex128},arg3::Integer,arg4::Integer,arg5::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatCreateMPIAIJSumSeqAIJSymbolic,petscComplexDouble),PetscErrorCode,(comm_type,Mat{Complex128},Int64,Int64,Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatCreateMPIAIJSumSeqAIJNumeric(arg1::Mat{Complex128},arg2::Mat{Complex128})
    err = ccall((:MatCreateMPIAIJSumSeqAIJNumeric,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Mat{Complex128}),arg1,arg2)
    return err
end

function MatMPIAIJGetLocalMat(arg1::Mat{Complex128},arg2::MatReuse,arg3::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatMPIAIJGetLocalMat,petscComplexDouble),PetscErrorCode,(Mat{Complex128},MatReuse,Ptr{Mat{Complex128}}),arg1,arg2,arg3)
    return err
end

function MatMPIAIJGetLocalMatCondensed(arg1::Mat{Complex128},arg2::MatReuse,arg3::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}},arg4::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}},arg5::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatMPIAIJGetLocalMatCondensed,petscComplexDouble),PetscErrorCode,(Mat{Complex128},MatReuse,Ptr{IS{Complex128}},Ptr{IS{Complex128}},Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatGetBrowsOfAcols(arg1::Mat{Complex128},arg2::Mat{Complex128},arg3::MatReuse,arg4::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}},arg5::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}},arg6::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatGetBrowsOfAcols,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Mat{Complex128},MatReuse,Ptr{IS{Complex128}},Ptr{IS{Complex128}},Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatGetGhosts(arg1::Mat{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:MatGetGhosts,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3)
    return err
end

function MatIncreaseOverlap(arg1::Mat{Complex128},arg2::Integer,arg3::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}},arg4::Integer)
    err = ccall((:MatIncreaseOverlap,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64,Ptr{IS{Complex128}},Int64),arg1,arg2,arg3,arg4)
    return err
end

function MatMatMult(arg1::Mat{Complex128},arg2::Mat{Complex128},arg3::MatReuse,arg4::Float64,arg5::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatMatMult,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Mat{Complex128},MatReuse,Float64,Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatMatMultSymbolic(arg1::Mat{Complex128},arg2::Mat{Complex128},arg3::Float64,arg4::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatMatMultSymbolic,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Mat{Complex128},Float64,Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function MatMatMultNumeric(arg1::Mat{Complex128},arg2::Mat{Complex128},arg3::Mat{Complex128})
    err = ccall((:MatMatMultNumeric,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Mat{Complex128},Mat{Complex128}),arg1,arg2,arg3)
    return err
end

function MatMatMatMult(arg1::Mat{Complex128},arg2::Mat{Complex128},arg3::Mat{Complex128},arg4::MatReuse,arg5::Float64,arg6::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatMatMatMult,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Mat{Complex128},Mat{Complex128},MatReuse,Float64,Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatMatMatMultSymbolic(arg1::Mat{Complex128},arg2::Mat{Complex128},arg3::Mat{Complex128},arg4::Float64,arg5::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatMatMatMultSymbolic,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Mat{Complex128},Mat{Complex128},Float64,Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatMatMatMultNumeric(arg1::Mat{Complex128},arg2::Mat{Complex128},arg3::Mat{Complex128},arg4::Mat{Complex128})
    err = ccall((:MatMatMatMultNumeric,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Mat{Complex128},Mat{Complex128},Mat{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function MatPtAP(arg1::Mat{Complex128},arg2::Mat{Complex128},arg3::MatReuse,arg4::Float64,arg5::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatPtAP,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Mat{Complex128},MatReuse,Float64,Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatPtAPSymbolic(arg1::Mat{Complex128},arg2::Mat{Complex128},arg3::Float64,arg4::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatPtAPSymbolic,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Mat{Complex128},Float64,Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function MatPtAPNumeric(arg1::Mat{Complex128},arg2::Mat{Complex128},arg3::Mat{Complex128})
    err = ccall((:MatPtAPNumeric,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Mat{Complex128},Mat{Complex128}),arg1,arg2,arg3)
    return err
end

function MatRARt(arg1::Mat{Complex128},arg2::Mat{Complex128},arg3::MatReuse,arg4::Float64,arg5::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatRARt,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Mat{Complex128},MatReuse,Float64,Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatRARtSymbolic(arg1::Mat{Complex128},arg2::Mat{Complex128},arg3::Float64,arg4::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatRARtSymbolic,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Mat{Complex128},Float64,Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function MatRARtNumeric(arg1::Mat{Complex128},arg2::Mat{Complex128},arg3::Mat{Complex128})
    err = ccall((:MatRARtNumeric,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Mat{Complex128},Mat{Complex128}),arg1,arg2,arg3)
    return err
end

function MatTransposeMatMult(arg1::Mat{Complex128},arg2::Mat{Complex128},arg3::MatReuse,arg4::Float64,arg5::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatTransposeMatMult,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Mat{Complex128},MatReuse,Float64,Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatTransposetMatMultSymbolic(arg1::Mat{Complex128},arg2::Mat{Complex128},arg3::Float64,arg4::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatTransposetMatMultSymbolic,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Mat{Complex128},Float64,Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function MatTransposetMatMultNumeric(arg1::Mat{Complex128},arg2::Mat{Complex128},arg3::Mat{Complex128})
    err = ccall((:MatTransposetMatMultNumeric,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Mat{Complex128},Mat{Complex128}),arg1,arg2,arg3)
    return err
end

function MatMatTransposeMult(arg1::Mat{Complex128},arg2::Mat{Complex128},arg3::MatReuse,arg4::Float64,arg5::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatMatTransposeMult,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Mat{Complex128},MatReuse,Float64,Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatMatTransposeMultSymbolic(arg1::Mat{Complex128},arg2::Mat{Complex128},arg3::Float64,arg4::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatMatTransposeMultSymbolic,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Mat{Complex128},Float64,Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function MatMatTransposeMultNumeric(arg1::Mat{Complex128},arg2::Mat{Complex128},arg3::Mat{Complex128})
    err = ccall((:MatMatTransposeMultNumeric,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Mat{Complex128},Mat{Complex128}),arg1,arg2,arg3)
    return err
end

function MatAXPY(arg1::Mat{Complex128},arg2::Complex128,arg3::Mat{Complex128},arg4::MatStructure)
    err = ccall((:MatAXPY,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Complex128,Mat{Complex128},MatStructure),arg1,arg2,arg3,arg4)
    return err
end

function MatAYPX(arg1::Mat{Complex128},arg2::Complex128,arg3::Mat{Complex128},arg4::MatStructure)
    err = ccall((:MatAYPX,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Complex128,Mat{Complex128},MatStructure),arg1,arg2,arg3,arg4)
    return err
end

function MatScale(arg1::Mat{Complex128},arg2::Complex128)
    err = ccall((:MatScale,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Complex128),arg1,arg2)
    return err
end

function MatShift(arg1::Mat{Complex128},arg2::Complex128)
    err = ccall((:MatShift,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Complex128),arg1,arg2)
    return err
end

function MatSetLocalToGlobalMapping(arg1::Mat{Complex128},arg2::ISLocalToGlobalMapping{Complex128},arg3::ISLocalToGlobalMapping{Complex128})
    err = ccall((:MatSetLocalToGlobalMapping,petscComplexDouble),PetscErrorCode,(Mat{Complex128},ISLocalToGlobalMapping{Complex128},ISLocalToGlobalMapping{Complex128}),arg1,arg2,arg3)
    return err
end

function MatGetLocalToGlobalMapping(arg1::Mat{Complex128},arg2::Union{Ptr{ISLocalToGlobalMapping{Complex128}},StridedArray{ISLocalToGlobalMapping{Complex128}},Ptr{ISLocalToGlobalMapping{Complex128}},Ref{ISLocalToGlobalMapping{Complex128}}},arg3::Union{Ptr{ISLocalToGlobalMapping{Complex128}},StridedArray{ISLocalToGlobalMapping{Complex128}},Ptr{ISLocalToGlobalMapping{Complex128}},Ref{ISLocalToGlobalMapping{Complex128}}})
    err = ccall((:MatGetLocalToGlobalMapping,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{ISLocalToGlobalMapping{Complex128}},Ptr{ISLocalToGlobalMapping{Complex128}}),arg1,arg2,arg3)
    return err
end

function MatGetLayouts(arg1::Mat{Complex128},arg2::Union{Ptr{PetscLayout{Complex128}},StridedArray{PetscLayout{Complex128}},Ptr{PetscLayout{Complex128}},Ref{PetscLayout{Complex128}}},arg3::Union{Ptr{PetscLayout{Complex128}},StridedArray{PetscLayout{Complex128}},Ptr{PetscLayout{Complex128}},Ref{PetscLayout{Complex128}}})
    err = ccall((:MatGetLayouts,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{PetscLayout{Complex128}},Ptr{PetscLayout{Complex128}}),arg1,arg2,arg3)
    return err
end

function MatZeroRowsLocal(arg1::Mat{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Complex128,arg5::Vec{Complex128},arg6::Vec{Complex128})
    err = ccall((:MatZeroRowsLocal,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64,Ptr{Int64},Complex128,Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatZeroRowsLocalIS(arg1::Mat{Complex128},arg2::IS{Complex128},arg3::Complex128,arg4::Vec{Complex128},arg5::Vec{Complex128})
    err = ccall((:MatZeroRowsLocalIS,petscComplexDouble),PetscErrorCode,(Mat{Complex128},IS{Complex128},Complex128,Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatZeroRowsColumnsLocal(arg1::Mat{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Complex128,arg5::Vec{Complex128},arg6::Vec{Complex128})
    err = ccall((:MatZeroRowsColumnsLocal,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64,Ptr{Int64},Complex128,Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatZeroRowsColumnsLocalIS(arg1::Mat{Complex128},arg2::IS{Complex128},arg3::Complex128,arg4::Vec{Complex128},arg5::Vec{Complex128})
    err = ccall((:MatZeroRowsColumnsLocalIS,petscComplexDouble),PetscErrorCode,(Mat{Complex128},IS{Complex128},Complex128,Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatSetValuesLocal(arg1::Mat{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg7::InsertMode)
    err = ccall((:MatSetValuesLocal,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64,Ptr{Int64},Int64,Ptr{Int64},Ptr{Complex128},InsertMode),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatSetValuesBlockedLocal(arg1::Mat{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg7::InsertMode)
    err = ccall((:MatSetValuesBlockedLocal,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64,Ptr{Int64},Int64,Ptr{Int64},Ptr{Complex128},InsertMode),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatStashSetInitialSize(arg1::Mat{Complex128},arg2::Integer,arg3::Integer)
    err = ccall((:MatStashSetInitialSize,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64,Int64),arg1,arg2,arg3)
    return err
end

function MatStashGetInfo(arg1::Mat{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatStashGetInfo,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatInterpolate(arg1::Mat{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128})
    err = ccall((:MatInterpolate,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function MatInterpolateAdd(arg1::Mat{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128},arg4::Vec{Complex128})
    err = ccall((:MatInterpolateAdd,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Vec{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function MatRestrict(arg1::Mat{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128})
    err = ccall((:MatRestrict,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function MatCreateVecs(arg1::Mat{Complex128},arg2::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}},arg3::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:MatCreateVecs,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{Vec{Complex128}},Ptr{Vec{Complex128}}),arg1,arg2,arg3)
    return err
end

function MatGetMultiProcBlock(arg1::Mat{Complex128},arg2::MPI_Comm,arg3::MatReuse,arg4::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatGetMultiProcBlock,petscComplexDouble),PetscErrorCode,(Mat{Complex128},comm_type,MatReuse,Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function MatFindZeroDiagonals(arg1::Mat{Complex128},arg2::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:MatFindZeroDiagonals,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{IS{Complex128}}),arg1,arg2)
    return err
end

function MatFindOffBlockDiagonalEntries(arg1::Mat{Complex128},arg2::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:MatFindOffBlockDiagonalEntries,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{IS{Complex128}}),arg1,arg2)
    return err
end

function MatCreateMPIMatConcatenateSeqMat(arg1::MPI_Comm,arg2::Mat{Complex128},arg3::Integer,arg4::MatReuse,arg5::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatCreateMPIMatConcatenateSeqMat,petscComplexDouble),PetscErrorCode,(comm_type,Mat{Complex128},Int64,MatReuse,Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatInodeAdjustForInodes(arg1::Mat{Complex128},arg2::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}},arg3::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:MatInodeAdjustForInodes,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{IS{Complex128}},Ptr{IS{Complex128}}),arg1,arg2,arg3)
    return err
end

function MatInodeGetInodeSizes(arg1::Mat{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatInodeGetInodeSizes,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function MatSeqAIJSetColumnIndices(arg1::Mat{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatSeqAIJSetColumnIndices,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function MatSeqBAIJSetColumnIndices(arg1::Mat{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatSeqBAIJSetColumnIndices,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function MatCreateSeqAIJWithArrays(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg7::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatCreateSeqAIJWithArrays,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Int64,Ptr{Int64},Ptr{Int64},Ptr{Complex128},Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatCreateSeqBAIJWithArrays(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg8::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatCreateSeqBAIJWithArrays,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Ptr{Int64},Ptr{Int64},Ptr{Complex128},Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function MatCreateSeqSBAIJWithArrays(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg8::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatCreateSeqSBAIJWithArrays,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Ptr{Int64},Ptr{Int64},Ptr{Complex128},Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function MatCreateSeqAIJFromTriple(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg7::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}},arg8::Integer,arg9::PetscBool)
    err = ccall((:MatCreateSeqAIJFromTriple,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Int64,Ptr{Int64},Ptr{Int64},Ptr{Complex128},Ptr{Mat{Complex128}},Int64,PetscBool),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
    return err
end

function MatSeqBAIJSetPreallocation(arg1::Mat{Complex128},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatSeqBAIJSetPreallocation,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64,Int64,Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function MatSeqSBAIJSetPreallocation(arg1::Mat{Complex128},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatSeqSBAIJSetPreallocation,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64,Int64,Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function MatSeqAIJSetPreallocation(arg1::Mat{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatSeqAIJSetPreallocation,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function MatMPIBAIJSetPreallocation(arg1::Mat{Complex128},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatMPIBAIJSetPreallocation,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64,Int64,Ptr{Int64},Int64,Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatMPISBAIJSetPreallocation(arg1::Mat{Complex128},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatMPISBAIJSetPreallocation,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64,Int64,Ptr{Int64},Int64,Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatMPIAIJSetPreallocation(arg1::Mat{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatMPIAIJSetPreallocation,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64,Ptr{Int64},Int64,Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatSeqAIJSetPreallocationCSR(arg1::Mat{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}})
    err = ccall((:MatSeqAIJSetPreallocationCSR,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{Int64},Ptr{Int64},Ptr{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function MatSeqBAIJSetPreallocationCSR(arg1::Mat{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}})
    err = ccall((:MatSeqBAIJSetPreallocationCSR,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64,Ptr{Int64},Ptr{Int64},Ptr{Complex128}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatMPIAIJSetPreallocationCSR(arg1::Mat{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}})
    err = ccall((:MatMPIAIJSetPreallocationCSR,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{Int64},Ptr{Int64},Ptr{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function MatMPIBAIJSetPreallocationCSR(arg1::Mat{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}})
    err = ccall((:MatMPIBAIJSetPreallocationCSR,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64,Ptr{Int64},Ptr{Int64},Ptr{Complex128}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatMPIAdjSetPreallocation(arg1::Mat{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatMPIAdjSetPreallocation,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function MatMPIDenseSetPreallocation(arg1::Mat{Complex128},arg2::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}})
    err = ccall((:MatMPIDenseSetPreallocation,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{Complex128}),arg1,arg2)
    return err
end

function MatSeqDenseSetPreallocation(arg1::Mat{Complex128},arg2::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}})
    err = ccall((:MatSeqDenseSetPreallocation,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{Complex128}),arg1,arg2)
    return err
end

function MatMPIAIJGetSeqAIJ(arg1::Mat{Complex128},arg2::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}},arg3::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:MatMPIAIJGetSeqAIJ,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{Mat{Complex128}},Ptr{Mat{Complex128}},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4)
    return err
end

function MatMPIBAIJGetSeqBAIJ(arg1::Mat{Complex128},arg2::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}},arg3::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:MatMPIBAIJGetSeqBAIJ,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{Mat{Complex128}},Ptr{Mat{Complex128}},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4)
    return err
end

function MatMPIAdjCreateNonemptySubcommMat(arg1::Mat{Complex128},arg2::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatMPIAdjCreateNonemptySubcommMat,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{Mat{Complex128}}),arg1,arg2)
    return err
end

function MatISSetPreallocation(arg1::Mat{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatISSetPreallocation,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64,Ptr{Int64},Int64,Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatSeqDenseSetLDA(arg1::Mat{Complex128},arg2::Integer)
    err = ccall((:MatSeqDenseSetLDA,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64),arg1,arg2)
    return err
end

function MatDenseGetLocalMatrix(arg1::Mat{Complex128},arg2::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatDenseGetLocalMatrix,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{Mat{Complex128}}),arg1,arg2)
    return err
end

function MatStoreValues(arg1::Mat{Complex128})
    err = ccall((:MatStoreValues,petscComplexDouble),PetscErrorCode,(Mat{Complex128},),arg1)
    return err
end

function MatRetrieveValues(arg1::Mat{Complex128})
    err = ccall((:MatRetrieveValues,petscComplexDouble),PetscErrorCode,(Mat{Complex128},),arg1)
    return err
end

function MatDAADSetCtx(arg1::Mat{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatDAADSetCtx,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function MatFindNonzeroRows(arg1::Mat{Complex128},arg2::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:MatFindNonzeroRows,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{IS{Complex128}}),arg1,arg2)
    return err
end

function MatGetOrdering(arg1::Mat{Complex128},arg2::MatOrderingType,arg3::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}},arg4::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:MatGetOrdering,petscComplexDouble),PetscErrorCode,(Mat{Complex128},MatOrderingType,Ptr{IS{Complex128}},Ptr{IS{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function MatGetOrderingList(arg1::Union{Ptr{PetscFunctionList{Complex128}},StridedArray{PetscFunctionList{Complex128}},Ptr{PetscFunctionList{Complex128}},Ref{PetscFunctionList{Complex128}}})
    err = ccall((:MatGetOrderingList,petscComplexDouble),PetscErrorCode,(Ptr{PetscFunctionList},),arg1)
    return err
end

function MatOrderingRegister(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatOrderingRegister,petscComplexDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function MatReorderForNonzeroDiagonal(arg1::Mat{Complex128},arg2::Float64,arg3::IS{Complex128},arg4::IS{Complex128})
    err = ccall((:MatReorderForNonzeroDiagonal,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Float64,IS{Complex128},IS{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function MatCreateLaplacian(arg1::Mat{Complex128},arg2::Float64,arg3::PetscBool,arg4::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatCreateLaplacian,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Float64,PetscBool,Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function MatFactorInfoInitialize(arg0::Type{Complex128},arg1::Union{Ptr{MatFactorInfo},StridedArray{MatFactorInfo},Ptr{MatFactorInfo},Ref{MatFactorInfo}})
    err = ccall((:MatFactorInfoInitialize,petscComplexDouble),PetscErrorCode,(Ptr{MatFactorInfo},),arg1)
    return err
end

function MatCholeskyFactor(arg1::Mat{Complex128},arg2::IS{Complex128},arg3::Union{Ptr{MatFactorInfo},StridedArray{MatFactorInfo},Ptr{MatFactorInfo},Ref{MatFactorInfo}})
    err = ccall((:MatCholeskyFactor,petscComplexDouble),PetscErrorCode,(Mat{Complex128},IS{Complex128},Ptr{MatFactorInfo}),arg1,arg2,arg3)
    return err
end

function MatCholeskyFactorSymbolic(arg1::Mat{Complex128},arg2::Mat{Complex128},arg3::IS{Complex128},arg4::Union{Ptr{MatFactorInfo},StridedArray{MatFactorInfo},Ptr{MatFactorInfo},Ref{MatFactorInfo}})
    err = ccall((:MatCholeskyFactorSymbolic,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Mat{Complex128},IS{Complex128},Ptr{MatFactorInfo}),arg1,arg2,arg3,arg4)
    return err
end

function MatCholeskyFactorNumeric(arg1::Mat{Complex128},arg2::Mat{Complex128},arg3::Union{Ptr{MatFactorInfo},StridedArray{MatFactorInfo},Ptr{MatFactorInfo},Ref{MatFactorInfo}})
    err = ccall((:MatCholeskyFactorNumeric,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Mat{Complex128},Ptr{MatFactorInfo}),arg1,arg2,arg3)
    return err
end

function MatLUFactor(arg1::Mat{Complex128},arg2::IS{Complex128},arg3::IS{Complex128},arg4::Union{Ptr{MatFactorInfo},StridedArray{MatFactorInfo},Ptr{MatFactorInfo},Ref{MatFactorInfo}})
    err = ccall((:MatLUFactor,petscComplexDouble),PetscErrorCode,(Mat{Complex128},IS{Complex128},IS{Complex128},Ptr{MatFactorInfo}),arg1,arg2,arg3,arg4)
    return err
end

function MatILUFactor(arg1::Mat{Complex128},arg2::IS{Complex128},arg3::IS{Complex128},arg4::Union{Ptr{MatFactorInfo},StridedArray{MatFactorInfo},Ptr{MatFactorInfo},Ref{MatFactorInfo}})
    err = ccall((:MatILUFactor,petscComplexDouble),PetscErrorCode,(Mat{Complex128},IS{Complex128},IS{Complex128},Ptr{MatFactorInfo}),arg1,arg2,arg3,arg4)
    return err
end

function MatLUFactorSymbolic(arg1::Mat{Complex128},arg2::Mat{Complex128},arg3::IS{Complex128},arg4::IS{Complex128},arg5::Union{Ptr{MatFactorInfo},StridedArray{MatFactorInfo},Ptr{MatFactorInfo},Ref{MatFactorInfo}})
    err = ccall((:MatLUFactorSymbolic,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Mat{Complex128},IS{Complex128},IS{Complex128},Ptr{MatFactorInfo}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatILUFactorSymbolic(arg1::Mat{Complex128},arg2::Mat{Complex128},arg3::IS{Complex128},arg4::IS{Complex128},arg5::Union{Ptr{MatFactorInfo},StridedArray{MatFactorInfo},Ptr{MatFactorInfo},Ref{MatFactorInfo}})
    err = ccall((:MatILUFactorSymbolic,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Mat{Complex128},IS{Complex128},IS{Complex128},Ptr{MatFactorInfo}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatICCFactorSymbolic(arg1::Mat{Complex128},arg2::Mat{Complex128},arg3::IS{Complex128},arg4::Union{Ptr{MatFactorInfo},StridedArray{MatFactorInfo},Ptr{MatFactorInfo},Ref{MatFactorInfo}})
    err = ccall((:MatICCFactorSymbolic,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Mat{Complex128},IS{Complex128},Ptr{MatFactorInfo}),arg1,arg2,arg3,arg4)
    return err
end

function MatICCFactor(arg1::Mat{Complex128},arg2::IS{Complex128},arg3::Union{Ptr{MatFactorInfo},StridedArray{MatFactorInfo},Ptr{MatFactorInfo},Ref{MatFactorInfo}})
    err = ccall((:MatICCFactor,petscComplexDouble),PetscErrorCode,(Mat{Complex128},IS{Complex128},Ptr{MatFactorInfo}),arg1,arg2,arg3)
    return err
end

function MatLUFactorNumeric(arg1::Mat{Complex128},arg2::Mat{Complex128},arg3::Union{Ptr{MatFactorInfo},StridedArray{MatFactorInfo},Ptr{MatFactorInfo},Ref{MatFactorInfo}})
    err = ccall((:MatLUFactorNumeric,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Mat{Complex128},Ptr{MatFactorInfo}),arg1,arg2,arg3)
    return err
end

function MatGetInertia(arg1::Mat{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatGetInertia,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function MatSolve(arg1::Mat{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128})
    err = ccall((:MatSolve,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function MatForwardSolve(arg1::Mat{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128})
    err = ccall((:MatForwardSolve,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function MatBackwardSolve(arg1::Mat{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128})
    err = ccall((:MatBackwardSolve,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function MatSolveAdd(arg1::Mat{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128},arg4::Vec{Complex128})
    err = ccall((:MatSolveAdd,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Vec{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function MatSolveTranspose(arg1::Mat{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128})
    err = ccall((:MatSolveTranspose,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function MatSolveTransposeAdd(arg1::Mat{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128},arg4::Vec{Complex128})
    err = ccall((:MatSolveTransposeAdd,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Vec{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function MatSolves(arg1::Mat{Complex128},arg2::Vecs{Complex128},arg3::Vecs{Complex128})
    err = ccall((:MatSolves,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Vecs,Vecs),arg1,arg2,arg3)
    return err
end

function MatSetUnfactored(arg1::Mat{Complex128})
    err = ccall((:MatSetUnfactored,petscComplexDouble),PetscErrorCode,(Mat{Complex128},),arg1)
    return err
end

function MatSOR(arg1::Mat{Complex128},arg2::Vec{Complex128},arg3::Float64,arg4::MatSORType,arg5::Float64,arg6::Integer,arg7::Integer,arg8::Vec{Complex128})
    err = ccall((:MatSOR,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Vec{Complex128},Float64,MatSORType,Float64,Int64,Int64,Vec{Complex128}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function MatColoringCreate(arg1::Mat{Complex128},arg2::Union{Ptr{MatColoring{Complex128}},StridedArray{MatColoring{Complex128}},Ptr{MatColoring{Complex128}},Ref{MatColoring{Complex128}}})
    err = ccall((:MatColoringCreate,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{MatColoring{Complex128}}),arg1,arg2)
    return err
end

function MatColoringGetDegrees(arg1::Mat{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatColoringGetDegrees,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function MatColoringDestroy(arg1::Union{Ptr{MatColoring{Complex128}},StridedArray{MatColoring{Complex128}},Ptr{MatColoring{Complex128}},Ref{MatColoring{Complex128}}})
    err = ccall((:MatColoringDestroy,petscComplexDouble),PetscErrorCode,(Ptr{MatColoring{Complex128}},),arg1)
    return err
end

function MatColoringView(arg1::MatColoring{Complex128},arg2::PetscViewer{Complex128})
    err = ccall((:MatColoringView,petscComplexDouble),PetscErrorCode,(MatColoring{Complex128},PetscViewer{Complex128}),arg1,arg2)
    return err
end

function MatColoringSetType(arg1::MatColoring{Complex128},arg2::MatColoringType)
    err = ccall((:MatColoringSetType,petscComplexDouble),PetscErrorCode,(MatColoring{Complex128},MatColoringType),arg1,arg2)
    return err
end

function MatColoringSetFromOptions(arg1::MatColoring{Complex128})
    err = ccall((:MatColoringSetFromOptions,petscComplexDouble),PetscErrorCode,(MatColoring{Complex128},),arg1)
    return err
end

function MatColoringSetDistance(arg1::MatColoring{Complex128},arg2::Integer)
    err = ccall((:MatColoringSetDistance,petscComplexDouble),PetscErrorCode,(MatColoring{Complex128},Int64),arg1,arg2)
    return err
end

function MatColoringGetDistance(arg1::MatColoring{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatColoringGetDistance,petscComplexDouble),PetscErrorCode,(MatColoring{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function MatColoringSetMaxColors(arg1::MatColoring{Complex128},arg2::Integer)
    err = ccall((:MatColoringSetMaxColors,petscComplexDouble),PetscErrorCode,(MatColoring{Complex128},Int64),arg1,arg2)
    return err
end

function MatColoringGetMaxColors(arg1::MatColoring{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatColoringGetMaxColors,petscComplexDouble),PetscErrorCode,(MatColoring{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function MatColoringApply(arg1::MatColoring{Complex128},arg2::Union{Ptr{ISColoring{Complex128}},StridedArray{ISColoring{Complex128}},Ptr{ISColoring{Complex128}},Ref{ISColoring{Complex128}}})
    err = ccall((:MatColoringApply,petscComplexDouble),PetscErrorCode,(MatColoring{Complex128},Ptr{ISColoring{Complex128}}),arg1,arg2)
    return err
end

function MatColoringRegister(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatColoringRegister,petscComplexDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function MatColoringPatch(arg1::Mat{Complex128},arg2::Integer,arg3::Integer,ISColoringValue::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}},arg4::Union{Ptr{ISColoring{Complex128}},StridedArray{ISColoring{Complex128}},Ptr{ISColoring{Complex128}},Ref{ISColoring{Complex128}}})
    err = ccall((:MatColoringPatch,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64,Int64,Ptr{Cint},Ptr{ISColoring{Complex128}}),arg1,arg2,arg3,ISColoringValue,arg4)
    return err
end

function MatColoringSetWeightType(arg1::MatColoring{Complex128},arg2::MatColoringWeightType)
    err = ccall((:MatColoringSetWeightType,petscComplexDouble),PetscErrorCode,(MatColoring{Complex128},MatColoringWeightType),arg1,arg2)
    return err
end

function MatColoringSetWeights(arg1::MatColoring{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatColoringSetWeights,petscComplexDouble),PetscErrorCode,(MatColoring{Complex128},Ptr{Float64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function MatColoringCreateWeights(arg1::MatColoring{Complex128},arg2::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},lperm::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:MatColoringCreateWeights,petscComplexDouble),PetscErrorCode,(MatColoring{Complex128},Ptr{Ptr{Float64}},Ptr{Ptr{Int64}}),arg1,arg2,lperm)
    return err
end

function MatFDColoringCreate(arg1::Mat{Complex128},arg2::ISColoring{Complex128},arg3::Union{Ptr{MatFDColoring{Complex128}},StridedArray{MatFDColoring{Complex128}},Ptr{MatFDColoring{Complex128}},Ref{MatFDColoring{Complex128}}})
    err = ccall((:MatFDColoringCreate,petscComplexDouble),PetscErrorCode,(Mat{Complex128},ISColoring{Complex128},Ptr{MatFDColoring{Complex128}}),arg1,arg2,arg3)
    return err
end

function MatFDColoringDestroy(arg1::Union{Ptr{MatFDColoring{Complex128}},StridedArray{MatFDColoring{Complex128}},Ptr{MatFDColoring{Complex128}},Ref{MatFDColoring{Complex128}}})
    err = ccall((:MatFDColoringDestroy,petscComplexDouble),PetscErrorCode,(Ptr{MatFDColoring{Complex128}},),arg1)
    return err
end

function MatFDColoringView(arg1::MatFDColoring{Complex128},arg2::PetscViewer{Complex128})
    err = ccall((:MatFDColoringView,petscComplexDouble),PetscErrorCode,(MatFDColoring{Complex128},PetscViewer{Complex128}),arg1,arg2)
    return err
end

function MatFDColoringSetFunction(arg1::MatFDColoring{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatFDColoringSetFunction,petscComplexDouble),PetscErrorCode,(MatFDColoring{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function MatFDColoringGetFunction(arg1::MatFDColoring{Complex128},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:MatFDColoringGetFunction,petscComplexDouble),PetscErrorCode,(MatFDColoring{Complex128},Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function MatFDColoringSetParameters(arg1::MatFDColoring{Complex128},arg2::Float64,arg3::Float64)
    err = ccall((:MatFDColoringSetParameters,petscComplexDouble),PetscErrorCode,(MatFDColoring{Complex128},Float64,Float64),arg1,arg2,arg3)
    return err
end

function MatFDColoringSetFromOptions(arg1::MatFDColoring{Complex128})
    err = ccall((:MatFDColoringSetFromOptions,petscComplexDouble),PetscErrorCode,(MatFDColoring{Complex128},),arg1)
    return err
end

function MatFDColoringApply(arg1::Mat{Complex128},arg2::MatFDColoring{Complex128},arg3::Vec{Complex128},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatFDColoringApply,petscComplexDouble),PetscErrorCode,(Mat{Complex128},MatFDColoring{Complex128},Vec{Complex128},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function MatFDColoringSetF(arg1::MatFDColoring{Complex128},arg2::Vec{Complex128})
    err = ccall((:MatFDColoringSetF,petscComplexDouble),PetscErrorCode,(MatFDColoring{Complex128},Vec{Complex128}),arg1,arg2)
    return err
end

function MatFDColoringGetPerturbedColumns(arg1::MatFDColoring{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:MatFDColoringGetPerturbedColumns,petscComplexDouble),PetscErrorCode,(MatFDColoring{Complex128},Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3)
    return err
end

function MatFDColoringSetUp(arg1::Mat{Complex128},arg2::ISColoring{Complex128},arg3::MatFDColoring{Complex128})
    err = ccall((:MatFDColoringSetUp,petscComplexDouble),PetscErrorCode,(Mat{Complex128},ISColoring{Complex128},MatFDColoring{Complex128}),arg1,arg2,arg3)
    return err
end

function MatFDColoringSetBlockSize(arg1::MatFDColoring{Complex128},arg2::Integer,arg3::Integer)
    err = ccall((:MatFDColoringSetBlockSize,petscComplexDouble),PetscErrorCode,(MatFDColoring{Complex128},Int64,Int64),arg1,arg2,arg3)
    return err
end

function MatTransposeColoringCreate(arg1::Mat{Complex128},arg2::ISColoring{Complex128},arg3::Union{Ptr{MatTransposeColoring{Complex128}},StridedArray{MatTransposeColoring{Complex128}},Ptr{MatTransposeColoring{Complex128}},Ref{MatTransposeColoring{Complex128}}})
    err = ccall((:MatTransposeColoringCreate,petscComplexDouble),PetscErrorCode,(Mat{Complex128},ISColoring{Complex128},Ptr{MatTransposeColoring{Complex128}}),arg1,arg2,arg3)
    return err
end

function MatTransColoringApplySpToDen(arg1::MatTransposeColoring{Complex128},arg2::Mat{Complex128},arg3::Mat{Complex128})
    err = ccall((:MatTransColoringApplySpToDen,petscComplexDouble),PetscErrorCode,(MatTransposeColoring{Complex128},Mat{Complex128},Mat{Complex128}),arg1,arg2,arg3)
    return err
end

function MatTransColoringApplyDenToSp(arg1::MatTransposeColoring{Complex128},arg2::Mat{Complex128},arg3::Mat{Complex128})
    err = ccall((:MatTransColoringApplyDenToSp,petscComplexDouble),PetscErrorCode,(MatTransposeColoring{Complex128},Mat{Complex128},Mat{Complex128}),arg1,arg2,arg3)
    return err
end

function MatTransposeColoringDestroy(arg1::Union{Ptr{MatTransposeColoring{Complex128}},StridedArray{MatTransposeColoring{Complex128}},Ptr{MatTransposeColoring{Complex128}},Ref{MatTransposeColoring{Complex128}}})
    err = ccall((:MatTransposeColoringDestroy,petscComplexDouble),PetscErrorCode,(Ptr{MatTransposeColoring{Complex128}},),arg1)
    return err
end

function MatPartitioningCreate(arg1::MPI_Comm,arg2::Union{Ptr{MatPartitioning{Complex128}},StridedArray{MatPartitioning{Complex128}},Ptr{MatPartitioning{Complex128}},Ref{MatPartitioning{Complex128}}})
    err = ccall((:MatPartitioningCreate,petscComplexDouble),PetscErrorCode,(comm_type,Ptr{MatPartitioning{Complex128}}),arg1,arg2)
    return err
end

function MatPartitioningSetType(arg1::MatPartitioning{Complex128},arg2::MatPartitioningType)
    err = ccall((:MatPartitioningSetType,petscComplexDouble),PetscErrorCode,(MatPartitioning{Complex128},MatPartitioningType),arg1,arg2)
    return err
end

function MatPartitioningSetNParts(arg1::MatPartitioning{Complex128},arg2::Integer)
    err = ccall((:MatPartitioningSetNParts,petscComplexDouble),PetscErrorCode,(MatPartitioning{Complex128},Int64),arg1,arg2)
    return err
end

function MatPartitioningSetAdjacency(arg1::MatPartitioning{Complex128},arg2::Mat{Complex128})
    err = ccall((:MatPartitioningSetAdjacency,petscComplexDouble),PetscErrorCode,(MatPartitioning{Complex128},Mat{Complex128}),arg1,arg2)
    return err
end

function MatPartitioningSetVertexWeights(arg1::MatPartitioning{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatPartitioningSetVertexWeights,petscComplexDouble),PetscErrorCode,(MatPartitioning{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function MatPartitioningSetPartitionWeights(arg1::MatPartitioning{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:MatPartitioningSetPartitionWeights,petscComplexDouble),PetscErrorCode,(MatPartitioning{Complex128},Ptr{Float64}),arg1,arg2)
    return err
end

function MatPartitioningApply(arg1::MatPartitioning{Complex128},arg2::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:MatPartitioningApply,petscComplexDouble),PetscErrorCode,(MatPartitioning{Complex128},Ptr{IS{Complex128}}),arg1,arg2)
    return err
end

function MatPartitioningDestroy(arg1::Union{Ptr{MatPartitioning{Complex128}},StridedArray{MatPartitioning{Complex128}},Ptr{MatPartitioning{Complex128}},Ref{MatPartitioning{Complex128}}})
    err = ccall((:MatPartitioningDestroy,petscComplexDouble),PetscErrorCode,(Ptr{MatPartitioning{Complex128}},),arg1)
    return err
end

function MatPartitioningRegister(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatPartitioningRegister,petscComplexDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function MatPartitioningView(arg1::MatPartitioning{Complex128},arg2::PetscViewer{Complex128})
    err = ccall((:MatPartitioningView,petscComplexDouble),PetscErrorCode,(MatPartitioning{Complex128},PetscViewer{Complex128}),arg1,arg2)
    return err
end

function MatPartitioningSetFromOptions(arg1::MatPartitioning{Complex128})
    err = ccall((:MatPartitioningSetFromOptions,petscComplexDouble),PetscErrorCode,(MatPartitioning{Complex128},),arg1)
    return err
end

function MatPartitioningGetType(arg1::MatPartitioning{Complex128},arg2::Union{Ptr{MatPartitioningType},StridedArray{MatPartitioningType},Ptr{MatPartitioningType},Ref{MatPartitioningType}})
    err = ccall((:MatPartitioningGetType,petscComplexDouble),PetscErrorCode,(MatPartitioning{Complex128},Ptr{MatPartitioningType}),arg1,arg2)
    return err
end

function MatPartitioningParmetisSetCoarseSequential(arg1::MatPartitioning{Complex128})
    err = ccall((:MatPartitioningParmetisSetCoarseSequential,petscComplexDouble),PetscErrorCode,(MatPartitioning{Complex128},),arg1)
    return err
end

function MatPartitioningParmetisGetEdgeCut(arg1::MatPartitioning{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatPartitioningParmetisGetEdgeCut,petscComplexDouble),PetscErrorCode,(MatPartitioning{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function MatPartitioningChacoSetGlobal(arg1::MatPartitioning{Complex128},arg2::MPChacoGlobalType)
    err = ccall((:MatPartitioningChacoSetGlobal,petscComplexDouble),PetscErrorCode,(MatPartitioning{Complex128},MPChacoGlobalType),arg1,arg2)
    return err
end

function MatPartitioningChacoGetGlobal(arg1::MatPartitioning{Complex128},arg2::Union{Ptr{MPChacoGlobalType},StridedArray{MPChacoGlobalType},Ptr{MPChacoGlobalType},Ref{MPChacoGlobalType}})
    err = ccall((:MatPartitioningChacoGetGlobal,petscComplexDouble),PetscErrorCode,(MatPartitioning{Complex128},Ptr{MPChacoGlobalType}),arg1,arg2)
    return err
end

function MatPartitioningChacoSetLocal(arg1::MatPartitioning{Complex128},arg2::MPChacoLocalType)
    err = ccall((:MatPartitioningChacoSetLocal,petscComplexDouble),PetscErrorCode,(MatPartitioning{Complex128},MPChacoLocalType),arg1,arg2)
    return err
end

function MatPartitioningChacoGetLocal(arg1::MatPartitioning{Complex128},arg2::Union{Ptr{MPChacoLocalType},StridedArray{MPChacoLocalType},Ptr{MPChacoLocalType},Ref{MPChacoLocalType}})
    err = ccall((:MatPartitioningChacoGetLocal,petscComplexDouble),PetscErrorCode,(MatPartitioning{Complex128},Ptr{MPChacoLocalType}),arg1,arg2)
    return err
end

function MatPartitioningChacoSetCoarseLevel(arg1::MatPartitioning{Complex128},arg2::Float64)
    err = ccall((:MatPartitioningChacoSetCoarseLevel,petscComplexDouble),PetscErrorCode,(MatPartitioning{Complex128},Float64),arg1,arg2)
    return err
end

function MatPartitioningChacoSetEigenSolver(arg1::MatPartitioning{Complex128},arg2::MPChacoEigenType)
    err = ccall((:MatPartitioningChacoSetEigenSolver,petscComplexDouble),PetscErrorCode,(MatPartitioning{Complex128},MPChacoEigenType),arg1,arg2)
    return err
end

function MatPartitioningChacoGetEigenSolver(arg1::MatPartitioning{Complex128},arg2::Union{Ptr{MPChacoEigenType},StridedArray{MPChacoEigenType},Ptr{MPChacoEigenType},Ref{MPChacoEigenType}})
    err = ccall((:MatPartitioningChacoGetEigenSolver,petscComplexDouble),PetscErrorCode,(MatPartitioning{Complex128},Ptr{MPChacoEigenType}),arg1,arg2)
    return err
end

function MatPartitioningChacoSetEigenTol(arg1::MatPartitioning{Complex128},arg2::Float64)
    err = ccall((:MatPartitioningChacoSetEigenTol,petscComplexDouble),PetscErrorCode,(MatPartitioning{Complex128},Float64),arg1,arg2)
    return err
end

function MatPartitioningChacoGetEigenTol(arg1::MatPartitioning{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:MatPartitioningChacoGetEigenTol,petscComplexDouble),PetscErrorCode,(MatPartitioning{Complex128},Ptr{Float64}),arg1,arg2)
    return err
end

function MatPartitioningChacoSetEigenNumber(arg1::MatPartitioning{Complex128},arg2::Integer)
    err = ccall((:MatPartitioningChacoSetEigenNumber,petscComplexDouble),PetscErrorCode,(MatPartitioning{Complex128},Int64),arg1,arg2)
    return err
end

function MatPartitioningChacoGetEigenNumber(arg1::MatPartitioning{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatPartitioningChacoGetEigenNumber,petscComplexDouble),PetscErrorCode,(MatPartitioning{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function MatPartitioningPartySetGlobal(arg1::MatPartitioning{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:MatPartitioningPartySetGlobal,petscComplexDouble),PetscErrorCode,(MatPartitioning{Complex128},Cstring),arg1,arg2)
    return err
end

function MatPartitioningPartySetLocal(arg1::MatPartitioning{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:MatPartitioningPartySetLocal,petscComplexDouble),PetscErrorCode,(MatPartitioning{Complex128},Cstring),arg1,arg2)
    return err
end

function MatPartitioningPartySetCoarseLevel(arg1::MatPartitioning{Complex128},arg2::Float64)
    err = ccall((:MatPartitioningPartySetCoarseLevel,petscComplexDouble),PetscErrorCode,(MatPartitioning{Complex128},Float64),arg1,arg2)
    return err
end

function MatPartitioningPartySetBipart(arg1::MatPartitioning{Complex128},arg2::PetscBool)
    err = ccall((:MatPartitioningPartySetBipart,petscComplexDouble),PetscErrorCode,(MatPartitioning{Complex128},PetscBool),arg1,arg2)
    return err
end

function MatPartitioningPartySetMatchOptimization(arg1::MatPartitioning{Complex128},arg2::PetscBool)
    err = ccall((:MatPartitioningPartySetMatchOptimization,petscComplexDouble),PetscErrorCode,(MatPartitioning{Complex128},PetscBool),arg1,arg2)
    return err
end

function MatPartitioningPTScotchSetImbalance(arg1::MatPartitioning{Complex128},arg2::Float64)
    err = ccall((:MatPartitioningPTScotchSetImbalance,petscComplexDouble),PetscErrorCode,(MatPartitioning{Complex128},Float64),arg1,arg2)
    return err
end

function MatPartitioningPTScotchGetImbalance(arg1::MatPartitioning{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:MatPartitioningPTScotchGetImbalance,petscComplexDouble),PetscErrorCode,(MatPartitioning{Complex128},Ptr{Float64}),arg1,arg2)
    return err
end

function MatPartitioningPTScotchSetStrategy(arg1::MatPartitioning{Complex128},arg2::MPPTScotchStrategyType)
    err = ccall((:MatPartitioningPTScotchSetStrategy,petscComplexDouble),PetscErrorCode,(MatPartitioning{Complex128},MPPTScotchStrategyType),arg1,arg2)
    return err
end

function MatPartitioningPTScotchGetStrategy(arg1::MatPartitioning{Complex128},arg2::Union{Ptr{MPPTScotchStrategyType},StridedArray{MPPTScotchStrategyType},Ptr{MPPTScotchStrategyType},Ref{MPPTScotchStrategyType}})
    err = ccall((:MatPartitioningPTScotchGetStrategy,petscComplexDouble),PetscErrorCode,(MatPartitioning{Complex128},Ptr{MPPTScotchStrategyType}),arg1,arg2)
    return err
end

function MatCoarsenCreate(arg1::MPI_Comm,arg2::Union{Ptr{MatCoarsen{Complex128}},StridedArray{MatCoarsen{Complex128}},Ptr{MatCoarsen{Complex128}},Ref{MatCoarsen{Complex128}}})
    err = ccall((:MatCoarsenCreate,petscComplexDouble),PetscErrorCode,(comm_type,Ptr{MatCoarsen{Complex128}}),arg1,arg2)
    return err
end

function MatCoarsenSetType(arg1::MatCoarsen{Complex128},arg2::MatCoarsenType)
    err = ccall((:MatCoarsenSetType,petscComplexDouble),PetscErrorCode,(MatCoarsen{Complex128},MatCoarsenType),arg1,arg2)
    return err
end

function MatCoarsenSetAdjacency(arg1::MatCoarsen{Complex128},arg2::Mat{Complex128})
    err = ccall((:MatCoarsenSetAdjacency,petscComplexDouble),PetscErrorCode,(MatCoarsen{Complex128},Mat{Complex128}),arg1,arg2)
    return err
end

function MatCoarsenSetGreedyOrdering(arg1::MatCoarsen{Complex128},arg2::IS{Complex128})
    err = ccall((:MatCoarsenSetGreedyOrdering,petscComplexDouble),PetscErrorCode,(MatCoarsen{Complex128},IS{Complex128}),arg1,arg2)
    return err
end

function MatCoarsenSetStrictAggs(arg1::MatCoarsen{Complex128},arg2::PetscBool)
    err = ccall((:MatCoarsenSetStrictAggs,petscComplexDouble),PetscErrorCode,(MatCoarsen{Complex128},PetscBool),arg1,arg2)
    return err
end

function MatCoarsenGetData(arg1::MatCoarsen{Complex128},arg2::Union{Ptr{Ptr{PetscCoarsenData{Complex128}}},StridedArray{Ptr{PetscCoarsenData{Complex128}}},Ptr{Ptr{PetscCoarsenData{Complex128}}},Ref{Ptr{PetscCoarsenData{Complex128}}}})
    err = ccall((:MatCoarsenGetData,petscComplexDouble),PetscErrorCode,(MatCoarsen{Complex128},Ptr{Ptr{PetscCoarsenData{Complex128}}}),arg1,arg2)
    return err
end

function MatCoarsenApply(arg1::MatCoarsen{Complex128})
    err = ccall((:MatCoarsenApply,petscComplexDouble),PetscErrorCode,(MatCoarsen{Complex128},),arg1)
    return err
end

function MatCoarsenDestroy(arg1::Union{Ptr{MatCoarsen{Complex128}},StridedArray{MatCoarsen{Complex128}},Ptr{MatCoarsen{Complex128}},Ref{MatCoarsen{Complex128}}})
    err = ccall((:MatCoarsenDestroy,petscComplexDouble),PetscErrorCode,(Ptr{MatCoarsen{Complex128}},),arg1)
    return err
end

function MatCoarsenRegister(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatCoarsenRegister,petscComplexDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function MatCoarsenView(arg1::MatCoarsen{Complex128},arg2::PetscViewer{Complex128})
    err = ccall((:MatCoarsenView,petscComplexDouble),PetscErrorCode,(MatCoarsen{Complex128},PetscViewer{Complex128}),arg1,arg2)
    return err
end

function MatCoarsenSetFromOptions(arg1::MatCoarsen{Complex128})
    err = ccall((:MatCoarsenSetFromOptions,petscComplexDouble),PetscErrorCode,(MatCoarsen{Complex128},),arg1)
    return err
end

function MatCoarsenGetType(arg1::MatCoarsen{Complex128},arg2::Union{Ptr{MatCoarsenType},StridedArray{MatCoarsenType},Ptr{MatCoarsenType},Ref{MatCoarsenType}})
    err = ccall((:MatCoarsenGetType,petscComplexDouble),PetscErrorCode,(MatCoarsen{Complex128},Ptr{MatCoarsenType}),arg1,arg2)
    return err
end

function MatMeshToCellGraph(arg1::Mat{Complex128},arg2::Integer,arg3::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatMeshToCellGraph,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64,Ptr{Mat{Complex128}}),arg1,arg2,arg3)
    return err
end

function MatHasOperation(arg1::Mat{Complex128},arg2::MatOperation,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatHasOperation,petscComplexDouble),PetscErrorCode,(Mat{Complex128},MatOperation,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function MatShellSetOperation(arg1::Mat{Complex128},arg2::MatOperation,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatShellSetOperation,petscComplexDouble),PetscErrorCode,(Mat{Complex128},MatOperation,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function MatShellGetOperation(arg1::Mat{Complex128},arg2::MatOperation,arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:MatShellGetOperation,petscComplexDouble),PetscErrorCode,(Mat{Complex128},MatOperation,Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function MatShellSetContext(arg1::Mat{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatShellSetContext,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function MatMPIBAIJSetHashTableFactor(arg1::Mat{Complex128},arg2::Float64)
    err = ccall((:MatMPIBAIJSetHashTableFactor,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Float64),arg1,arg2)
    return err
end

function MatISGetLocalMat(arg1::Mat{Complex128},arg2::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatISGetLocalMat,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{Mat{Complex128}}),arg1,arg2)
    return err
end

function MatISSetLocalMat(arg1::Mat{Complex128},arg2::Mat{Complex128})
    err = ccall((:MatISSetLocalMat,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Mat{Complex128}),arg1,arg2)
    return err
end

function MatISGetMPIXAIJ(arg1::Mat{Complex128},arg2::MatReuse,arg3::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatISGetMPIXAIJ,petscComplexDouble),PetscErrorCode,(Mat{Complex128},MatReuse,Ptr{Mat{Complex128}}),arg1,arg2,arg3)
    return err
end

function MatNullSpaceCreate(arg1::MPI_Comm,arg2::PetscBool,arg3::Integer,arg4::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}},arg5::Union{Ptr{MatNullSpace{Complex128}},StridedArray{MatNullSpace{Complex128}},Ptr{MatNullSpace{Complex128}},Ref{MatNullSpace{Complex128}}})
    err = ccall((:MatNullSpaceCreate,petscComplexDouble),PetscErrorCode,(comm_type,PetscBool,Int64,Ptr{Vec{Complex128}},Ptr{MatNullSpace{Complex128}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatNullSpaceSetFunction(arg1::MatNullSpace{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatNullSpaceSetFunction,petscComplexDouble),PetscErrorCode,(MatNullSpace{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function MatNullSpaceDestroy(arg1::Union{Ptr{MatNullSpace{Complex128}},StridedArray{MatNullSpace{Complex128}},Ptr{MatNullSpace{Complex128}},Ref{MatNullSpace{Complex128}}})
    err = ccall((:MatNullSpaceDestroy,petscComplexDouble),PetscErrorCode,(Ptr{MatNullSpace{Complex128}},),arg1)
    return err
end

function MatNullSpaceRemove(arg1::MatNullSpace{Complex128},arg2::Vec{Complex128})
    err = ccall((:MatNullSpaceRemove,petscComplexDouble),PetscErrorCode,(MatNullSpace{Complex128},Vec{Complex128}),arg1,arg2)
    return err
end

function MatGetNullSpace(arg1::Mat{Complex128},arg2::Union{Ptr{MatNullSpace{Complex128}},StridedArray{MatNullSpace{Complex128}},Ptr{MatNullSpace{Complex128}},Ref{MatNullSpace{Complex128}}})
    err = ccall((:MatGetNullSpace,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{MatNullSpace{Complex128}}),arg1,arg2)
    return err
end

function MatGetTransposeNullSpace(arg1::Mat{Complex128},arg2::Union{Ptr{MatNullSpace{Complex128}},StridedArray{MatNullSpace{Complex128}},Ptr{MatNullSpace{Complex128}},Ref{MatNullSpace{Complex128}}})
    err = ccall((:MatGetTransposeNullSpace,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{MatNullSpace{Complex128}}),arg1,arg2)
    return err
end

function MatSetTransposeNullSpace(arg1::Mat{Complex128},arg2::MatNullSpace{Complex128})
    err = ccall((:MatSetTransposeNullSpace,petscComplexDouble),PetscErrorCode,(Mat{Complex128},MatNullSpace{Complex128}),arg1,arg2)
    return err
end

function MatSetNullSpace(arg1::Mat{Complex128},arg2::MatNullSpace{Complex128})
    err = ccall((:MatSetNullSpace,petscComplexDouble),PetscErrorCode,(Mat{Complex128},MatNullSpace{Complex128}),arg1,arg2)
    return err
end

function MatSetNearNullSpace(arg1::Mat{Complex128},arg2::MatNullSpace{Complex128})
    err = ccall((:MatSetNearNullSpace,petscComplexDouble),PetscErrorCode,(Mat{Complex128},MatNullSpace{Complex128}),arg1,arg2)
    return err
end

function MatGetNearNullSpace(arg1::Mat{Complex128},arg2::Union{Ptr{MatNullSpace{Complex128}},StridedArray{MatNullSpace{Complex128}},Ptr{MatNullSpace{Complex128}},Ref{MatNullSpace{Complex128}}})
    err = ccall((:MatGetNearNullSpace,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{MatNullSpace{Complex128}}),arg1,arg2)
    return err
end

function MatNullSpaceTest(arg1::MatNullSpace{Complex128},arg2::Mat{Complex128},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatNullSpaceTest,petscComplexDouble),PetscErrorCode,(MatNullSpace{Complex128},Mat{Complex128},Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function MatNullSpaceView(arg1::MatNullSpace{Complex128},arg2::PetscViewer{Complex128})
    err = ccall((:MatNullSpaceView,petscComplexDouble),PetscErrorCode,(MatNullSpace{Complex128},PetscViewer{Complex128}),arg1,arg2)
    return err
end

function MatNullSpaceGetVecs(arg1::MatNullSpace{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{Vec{Complex128}}},StridedArray{Ptr{Vec{Complex128}}},Ptr{Ptr{Vec{Complex128}}},Ref{Ptr{Vec{Complex128}}}})
    err = ccall((:MatNullSpaceGetVecs,petscComplexDouble),PetscErrorCode,(MatNullSpace{Complex128},Ptr{PetscBool},Ptr{Int64},Ptr{Ptr{Vec{Complex128}}}),arg1,arg2,arg3,arg4)
    return err
end

function MatNullSpaceCreateRigidBody(arg1::Vec{Complex128},arg2::Union{Ptr{MatNullSpace{Complex128}},StridedArray{MatNullSpace{Complex128}},Ptr{MatNullSpace{Complex128}},Ref{MatNullSpace{Complex128}}})
    err = ccall((:MatNullSpaceCreateRigidBody,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Ptr{MatNullSpace{Complex128}}),arg1,arg2)
    return err
end

function MatReorderingSeqSBAIJ(arg1::Mat{Complex128},arg2::IS{Complex128})
    err = ccall((:MatReorderingSeqSBAIJ,petscComplexDouble),PetscErrorCode,(Mat{Complex128},IS{Complex128}),arg1,arg2)
    return err
end

function MatMPISBAIJSetHashTableFactor(arg1::Mat{Complex128},arg2::Float64)
    err = ccall((:MatMPISBAIJSetHashTableFactor,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Float64),arg1,arg2)
    return err
end

function MatSeqSBAIJSetColumnIndices(arg1::Mat{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatSeqSBAIJSetColumnIndices,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function MatSeqBAIJInvertBlockDiagonal(arg1::Mat{Complex128})
    err = ccall((:MatSeqBAIJInvertBlockDiagonal,petscComplexDouble),PetscErrorCode,(Mat{Complex128},),arg1)
    return err
end

function MatCreateMAIJ(arg1::Mat{Complex128},arg2::Integer,arg3::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatCreateMAIJ,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64,Ptr{Mat{Complex128}}),arg1,arg2,arg3)
    return err
end

function MatMAIJRedimension(arg1::Mat{Complex128},arg2::Integer,arg3::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatMAIJRedimension,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64,Ptr{Mat{Complex128}}),arg1,arg2,arg3)
    return err
end

function MatMAIJGetAIJ(arg1::Mat{Complex128},arg2::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatMAIJGetAIJ,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{Mat{Complex128}}),arg1,arg2)
    return err
end

function MatComputeExplicitOperator(arg1::Mat{Complex128},arg2::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatComputeExplicitOperator,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{Mat{Complex128}}),arg1,arg2)
    return err
end

function MatDiagonalScaleLocal(arg1::Mat{Complex128},arg2::Vec{Complex128})
    err = ccall((:MatDiagonalScaleLocal,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Vec{Complex128}),arg1,arg2)
    return err
end

function MatCreateMFFD(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatCreateMFFD,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatMFFDSetBase(arg1::Mat{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128})
    err = ccall((:MatMFFDSetBase,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function MatMFFDSetFunction(arg1::Mat{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatMFFDSetFunction,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function MatMFFDSetFunctioni(arg1::Mat{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatMFFDSetFunctioni,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function MatMFFDSetFunctioniBase(arg1::Mat{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatMFFDSetFunctioniBase,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function MatMFFDAddNullSpace(arg1::Mat{Complex128},arg2::MatNullSpace{Complex128})
    err = ccall((:MatMFFDAddNullSpace,petscComplexDouble),PetscErrorCode,(Mat{Complex128},MatNullSpace{Complex128}),arg1,arg2)
    return err
end

function MatMFFDSetHHistory(arg1::Mat{Complex128},arg2::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg3::Integer)
    err = ccall((:MatMFFDSetHHistory,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{Complex128},Int64),arg1,arg2,arg3)
    return err
end

function MatMFFDResetHHistory(arg1::Mat{Complex128})
    err = ccall((:MatMFFDResetHHistory,petscComplexDouble),PetscErrorCode,(Mat{Complex128},),arg1)
    return err
end

function MatMFFDSetFunctionError(arg1::Mat{Complex128},arg2::Float64)
    err = ccall((:MatMFFDSetFunctionError,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Float64),arg1,arg2)
    return err
end

function MatMFFDSetPeriod(arg1::Mat{Complex128},arg2::Integer)
    err = ccall((:MatMFFDSetPeriod,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64),arg1,arg2)
    return err
end

function MatMFFDGetH(arg1::Mat{Complex128},arg2::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}})
    err = ccall((:MatMFFDGetH,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{Complex128}),arg1,arg2)
    return err
end

function MatMFFDSetOptionsPrefix(arg1::Mat{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:MatMFFDSetOptionsPrefix,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Cstring),arg1,arg2)
    return err
end

function MatMFFDCheckPositivity(arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg2::Vec{Complex128},arg3::Vec{Complex128},arg4::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}})
    err = ccall((:MatMFFDCheckPositivity,petscComplexDouble),PetscErrorCode,(Ptr{Void},Vec{Complex128},Vec{Complex128},Ptr{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function MatMFFDSetCheckh(arg1::Mat{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatMFFDSetCheckh,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function MatMFFDSetType(arg1::Mat{Complex128},arg2::MatMFFDType)
    err = ccall((:MatMFFDSetType,petscComplexDouble),PetscErrorCode,(Mat{Complex128},MatMFFDType),arg1,arg2)
    return err
end

function MatMFFDRegister(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatMFFDRegister,petscComplexDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function MatMFFDDSSetUmin(arg1::Mat{Complex128},arg2::Float64)
    err = ccall((:MatMFFDDSSetUmin,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Float64),arg1,arg2)
    return err
end

function MatMFFDWPSetComputeNormU(arg1::Mat{Complex128},arg2::PetscBool)
    err = ccall((:MatMFFDWPSetComputeNormU,petscComplexDouble),PetscErrorCode,(Mat{Complex128},PetscBool),arg1,arg2)
    return err
end

function PetscViewerMathematicaPutMatrix(arg1::PetscViewer{Complex128},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscViewerMathematicaPutMatrix,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Int64,Int64,Ptr{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function PetscViewerMathematicaPutCSRMatrix(arg1::PetscViewer{Complex128},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscViewerMathematicaPutCSRMatrix,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},Int64,Int64,Ptr{Int64},Ptr{Int64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatCreateNest(arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}},arg4::Integer,arg5::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}},arg6::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}},arg7::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatCreateNest,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Ptr{IS{Complex128}},Int64,Ptr{IS{Complex128}},Ptr{Mat{Complex128}},Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatNestGetSize(arg1::Mat{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatNestGetSize,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function MatNestGetISs(arg1::Mat{Complex128},arg2::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}},arg3::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:MatNestGetISs,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{IS{Complex128}},Ptr{IS{Complex128}}),arg1,arg2,arg3)
    return err
end

function MatNestGetLocalISs(arg1::Mat{Complex128},arg2::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}},arg3::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:MatNestGetLocalISs,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{IS{Complex128}},Ptr{IS{Complex128}}),arg1,arg2,arg3)
    return err
end

function MatNestGetSubMats(arg1::Mat{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{Ptr{Mat{Complex128}}}},StridedArray{Ptr{Ptr{Mat{Complex128}}}},Ptr{Ptr{Ptr{Mat{Complex128}}}},Ref{Ptr{Ptr{Mat{Complex128}}}}})
    err = ccall((:MatNestGetSubMats,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{Int64},Ptr{Int64},Ptr{Ptr{Ptr{Mat{Complex128}}}}),arg1,arg2,arg3,arg4)
    return err
end

function MatNestGetSubMat(arg1::Mat{Complex128},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatNestGetSubMat,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64,Int64,Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function MatNestSetVecType(arg1::Mat{Complex128},arg2::VecType)
    err = ccall((:MatNestSetVecType,petscComplexDouble),PetscErrorCode,(Mat{Complex128},VecType),arg1,arg2)
    return err
end

function MatNestSetSubMats(arg1::Mat{Complex128},arg2::Integer,arg3::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}},arg4::Integer,arg5::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}},arg6::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatNestSetSubMats,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64,Ptr{IS{Complex128}},Int64,Ptr{IS{Complex128}},Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatNestSetSubMat(arg1::Mat{Complex128},arg2::Integer,arg3::Integer,arg4::Mat{Complex128})
    err = ccall((:MatNestSetSubMat,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64,Int64,Mat{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function MatChop(arg1::Mat{Complex128},arg2::Float64)
    err = ccall((:MatChop,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Float64),arg1,arg2)
    return err
end

function MatComputeBandwidth(arg1::Mat{Complex128},arg2::Float64,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatComputeBandwidth,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Float64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function MatSubdomainsCreateCoalesce(arg1::Mat{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{IS{Complex128}}},StridedArray{Ptr{IS{Complex128}}},Ptr{Ptr{IS{Complex128}}},Ref{Ptr{IS{Complex128}}}})
    err = ccall((:MatSubdomainsCreateCoalesce,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64,Ptr{Int64},Ptr{Ptr{IS{Complex128}}}),arg1,arg2,arg3,arg4)
    return err
end

function DMInitializePackage(arg0::Type{Complex128})
    err = ccall((:DMInitializePackage,petscComplexDouble),PetscErrorCode,())
    return err
end

function DMCreate(arg1::MPI_Comm,arg2::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:DMCreate,petscComplexDouble),PetscErrorCode,(comm_type,Ptr{DM{Complex128}}),arg1,arg2)
    return err
end

function DMClone(arg1::DM{Complex128},arg2::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:DMClone,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{DM{Complex128}}),arg1,arg2)
    return err
end

function DMSetType(arg1::DM{Complex128},arg2::DMType)
    err = ccall((:DMSetType,petscComplexDouble),PetscErrorCode,(DM{Complex128},DMType),arg1,arg2)
    return err
end

function DMGetType(arg1::DM{Complex128},arg2::Union{Ptr{DMType},StridedArray{DMType},Ptr{DMType},Ref{DMType}})
    err = ccall((:DMGetType,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{DMType}),arg1,arg2)
    return err
end

function DMRegister(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMRegister,petscComplexDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function DMRegisterDestroy(arg0::Type{Complex128})
    err = ccall((:DMRegisterDestroy,petscComplexDouble),PetscErrorCode,())
    return err
end

function DMView(arg1::DM{Complex128},arg2::PetscViewer{Complex128})
    err = ccall((:DMView,petscComplexDouble),PetscErrorCode,(DM{Complex128},PetscViewer{Complex128}),arg1,arg2)
    return err
end

function DMLoad(arg1::DM{Complex128},arg2::PetscViewer{Complex128})
    err = ccall((:DMLoad,petscComplexDouble),PetscErrorCode,(DM{Complex128},PetscViewer{Complex128}),arg1,arg2)
    return err
end

function DMDestroy(arg1::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:DMDestroy,petscComplexDouble),PetscErrorCode,(Ptr{DM{Complex128}},),arg1)
    return err
end

function DMCreateGlobalVector(arg1::DM{Complex128},arg2::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:DMCreateGlobalVector,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Vec{Complex128}}),arg1,arg2)
    return err
end

function DMCreateLocalVector(arg1::DM{Complex128},arg2::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:DMCreateLocalVector,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Vec{Complex128}}),arg1,arg2)
    return err
end

function DMGetLocalVector(arg1::DM{Complex128},arg2::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:DMGetLocalVector,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Vec{Complex128}}),arg1,arg2)
    return err
end

function DMRestoreLocalVector(arg1::DM{Complex128},arg2::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:DMRestoreLocalVector,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Vec{Complex128}}),arg1,arg2)
    return err
end

function DMGetGlobalVector(arg1::DM{Complex128},arg2::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:DMGetGlobalVector,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Vec{Complex128}}),arg1,arg2)
    return err
end

function DMRestoreGlobalVector(arg1::DM{Complex128},arg2::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:DMRestoreGlobalVector,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Vec{Complex128}}),arg1,arg2)
    return err
end

function DMClearGlobalVectors(arg1::DM{Complex128})
    err = ccall((:DMClearGlobalVectors,petscComplexDouble),PetscErrorCode,(DM{Complex128},),arg1)
    return err
end

function DMGetNamedGlobalVector(arg1::DM{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:DMGetNamedGlobalVector,petscComplexDouble),PetscErrorCode,(DM{Complex128},Cstring,Ptr{Vec{Complex128}}),arg1,arg2,arg3)
    return err
end

function DMRestoreNamedGlobalVector(arg1::DM{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:DMRestoreNamedGlobalVector,petscComplexDouble),PetscErrorCode,(DM{Complex128},Cstring,Ptr{Vec{Complex128}}),arg1,arg2,arg3)
    return err
end

function DMGetNamedLocalVector(arg1::DM{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:DMGetNamedLocalVector,petscComplexDouble),PetscErrorCode,(DM{Complex128},Cstring,Ptr{Vec{Complex128}}),arg1,arg2,arg3)
    return err
end

function DMRestoreNamedLocalVector(arg1::DM{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:DMRestoreNamedLocalVector,petscComplexDouble),PetscErrorCode,(DM{Complex128},Cstring,Ptr{Vec{Complex128}}),arg1,arg2,arg3)
    return err
end

function DMGetLocalToGlobalMapping(arg1::DM{Complex128},arg2::Union{Ptr{ISLocalToGlobalMapping{Complex128}},StridedArray{ISLocalToGlobalMapping{Complex128}},Ptr{ISLocalToGlobalMapping{Complex128}},Ref{ISLocalToGlobalMapping{Complex128}}})
    err = ccall((:DMGetLocalToGlobalMapping,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{ISLocalToGlobalMapping{Complex128}}),arg1,arg2)
    return err
end

function DMCreateFieldIS(arg1::DM{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}},arg4::Union{Ptr{Ptr{IS{Complex128}}},StridedArray{Ptr{IS{Complex128}}},Ptr{Ptr{IS{Complex128}}},Ref{Ptr{IS{Complex128}}}})
    err = ccall((:DMCreateFieldIS,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Int64},Ptr{Ptr{Ptr{UInt8}}},Ptr{Ptr{IS{Complex128}}}),arg1,arg2,arg3,arg4)
    return err
end

function DMGetBlockSize(arg1::DM{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMGetBlockSize,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function DMCreateColoring(arg1::DM{Complex128},arg2::ISColoringType,arg3::Union{Ptr{ISColoring{Complex128}},StridedArray{ISColoring{Complex128}},Ptr{ISColoring{Complex128}},Ref{ISColoring{Complex128}}})
    err = ccall((:DMCreateColoring,petscComplexDouble),PetscErrorCode,(DM{Complex128},ISColoringType,Ptr{ISColoring{Complex128}}),arg1,arg2,arg3)
    return err
end

function DMCreateMatrix(arg1::DM{Complex128},arg2::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:DMCreateMatrix,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Mat{Complex128}}),arg1,arg2)
    return err
end

function DMSetMatrixPreallocateOnly(arg1::DM{Complex128},arg2::PetscBool)
    err = ccall((:DMSetMatrixPreallocateOnly,petscComplexDouble),PetscErrorCode,(DM{Complex128},PetscBool),arg1,arg2)
    return err
end

function DMCreateInterpolation(arg1::DM{Complex128},arg2::DM{Complex128},arg3::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}},arg4::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:DMCreateInterpolation,petscComplexDouble),PetscErrorCode,(DM{Complex128},DM{Complex128},Ptr{Mat{Complex128}},Ptr{Vec{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function DMCreateInjection(arg1::DM{Complex128},arg2::DM{Complex128},arg3::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:DMCreateInjection,petscComplexDouble),PetscErrorCode,(DM{Complex128},DM{Complex128},Ptr{Mat{Complex128}}),arg1,arg2,arg3)
    return err
end

function DMGetWorkArray(arg1::DM{Complex128},arg2::Integer,arg3::PetscDataType,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMGetWorkArray,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,PetscDataType,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function DMRestoreWorkArray(arg1::DM{Complex128},arg2::Integer,arg3::PetscDataType,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMRestoreWorkArray,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,PetscDataType,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function DMRefine(arg1::DM{Complex128},arg2::MPI_Comm,arg3::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:DMRefine,petscComplexDouble),PetscErrorCode,(DM{Complex128},comm_type,Ptr{DM{Complex128}}),arg1,arg2,arg3)
    return err
end

function DMCoarsen(arg1::DM{Complex128},arg2::MPI_Comm,arg3::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:DMCoarsen,petscComplexDouble),PetscErrorCode,(DM{Complex128},comm_type,Ptr{DM{Complex128}}),arg1,arg2,arg3)
    return err
end

function DMRefineHierarchy(arg1::DM{Complex128},arg2::Integer,arg3::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:DMRefineHierarchy,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Ptr{DM{Complex128}}),arg1,arg2,arg3)
    return err
end

function DMCoarsenHierarchy(arg1::DM{Complex128},arg2::Integer,arg3::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:DMCoarsenHierarchy,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Ptr{DM{Complex128}}),arg1,arg2,arg3)
    return err
end

function DMCoarsenHookAdd(arg1::DM{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMCoarsenHookAdd,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function DMRefineHookAdd(arg1::DM{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMRefineHookAdd,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function DMRestrict(arg1::DM{Complex128},arg2::Mat{Complex128},arg3::Vec{Complex128},arg4::Mat{Complex128},arg5::DM{Complex128})
    err = ccall((:DMRestrict,petscComplexDouble),PetscErrorCode,(DM{Complex128},Mat{Complex128},Vec{Complex128},Mat{Complex128},DM{Complex128}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMInterpolate(arg1::DM{Complex128},arg2::Mat{Complex128},arg3::DM{Complex128})
    err = ccall((:DMInterpolate,petscComplexDouble),PetscErrorCode,(DM{Complex128},Mat{Complex128},DM{Complex128}),arg1,arg2,arg3)
    return err
end

function DMSetFromOptions(arg1::DM{Complex128})
    err = ccall((:DMSetFromOptions,petscComplexDouble),PetscErrorCode,(DM{Complex128},),arg1)
    return err
end

function DMCreateInterpolationScale(arg1::DM{Complex128},arg2::DM{Complex128},arg3::Mat{Complex128},arg4::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:DMCreateInterpolationScale,petscComplexDouble),PetscErrorCode,(DM{Complex128},DM{Complex128},Mat{Complex128},Ptr{Vec{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function DMCreateAggregates(arg1::DM{Complex128},arg2::DM{Complex128},arg3::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:DMCreateAggregates,petscComplexDouble),PetscErrorCode,(DM{Complex128},DM{Complex128},Ptr{Mat{Complex128}}),arg1,arg2,arg3)
    return err
end

function DMGlobalToLocalHookAdd(arg1::DM{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMGlobalToLocalHookAdd,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function DMLocalToGlobalHookAdd(arg1::DM{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMLocalToGlobalHookAdd,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function DMGlobalToLocalBegin(arg1::DM{Complex128},arg2::Vec{Complex128},arg3::InsertMode,arg4::Vec{Complex128})
    err = ccall((:DMGlobalToLocalBegin,petscComplexDouble),PetscErrorCode,(DM{Complex128},Vec{Complex128},InsertMode,Vec{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function DMGlobalToLocalEnd(arg1::DM{Complex128},arg2::Vec{Complex128},arg3::InsertMode,arg4::Vec{Complex128})
    err = ccall((:DMGlobalToLocalEnd,petscComplexDouble),PetscErrorCode,(DM{Complex128},Vec{Complex128},InsertMode,Vec{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function DMLocalToGlobalBegin(arg1::DM{Complex128},arg2::Vec{Complex128},arg3::InsertMode,arg4::Vec{Complex128})
    err = ccall((:DMLocalToGlobalBegin,petscComplexDouble),PetscErrorCode,(DM{Complex128},Vec{Complex128},InsertMode,Vec{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function DMLocalToGlobalEnd(arg1::DM{Complex128},arg2::Vec{Complex128},arg3::InsertMode,arg4::Vec{Complex128})
    err = ccall((:DMLocalToGlobalEnd,petscComplexDouble),PetscErrorCode,(DM{Complex128},Vec{Complex128},InsertMode,Vec{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function DMLocalToLocalBegin(arg1::DM{Complex128},arg2::Vec{Complex128},arg3::InsertMode,arg4::Vec{Complex128})
    err = ccall((:DMLocalToLocalBegin,petscComplexDouble),PetscErrorCode,(DM{Complex128},Vec{Complex128},InsertMode,Vec{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function DMLocalToLocalEnd(arg1::DM{Complex128},arg2::Vec{Complex128},arg3::InsertMode,arg4::Vec{Complex128})
    err = ccall((:DMLocalToLocalEnd,petscComplexDouble),PetscErrorCode,(DM{Complex128},Vec{Complex128},InsertMode,Vec{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function DMConvert(arg1::DM{Complex128},arg2::DMType,arg3::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:DMConvert,petscComplexDouble),PetscErrorCode,(DM{Complex128},DMType,Ptr{DM{Complex128}}),arg1,arg2,arg3)
    return err
end

function DMGetDimension(arg1::DM{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMGetDimension,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function DMSetDimension(arg1::DM{Complex128},arg2::Integer)
    err = ccall((:DMSetDimension,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64),arg1,arg2)
    return err
end

function DMGetDimPoints(arg1::DM{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMGetDimPoints,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function DMGetCoordinateDM(arg1::DM{Complex128},arg2::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:DMGetCoordinateDM,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{DM{Complex128}}),arg1,arg2)
    return err
end

function DMSetCoordinateDM(arg1::DM{Complex128},arg2::DM{Complex128})
    err = ccall((:DMSetCoordinateDM,petscComplexDouble),PetscErrorCode,(DM{Complex128},DM{Complex128}),arg1,arg2)
    return err
end

function DMGetCoordinateDim(arg1::DM{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMGetCoordinateDim,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function DMSetCoordinateDim(arg1::DM{Complex128},arg2::Integer)
    err = ccall((:DMSetCoordinateDim,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64),arg1,arg2)
    return err
end

function DMGetCoordinateSection(arg1::DM{Complex128},arg2::Union{Ptr{PetscSection{Complex128}},StridedArray{PetscSection{Complex128}},Ptr{PetscSection{Complex128}},Ref{PetscSection{Complex128}}})
    err = ccall((:DMGetCoordinateSection,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{PetscSection{Complex128}}),arg1,arg2)
    return err
end

function DMSetCoordinateSection(arg1::DM{Complex128},arg2::Integer,arg3::PetscSection{Complex128})
    err = ccall((:DMSetCoordinateSection,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,PetscSection{Complex128}),arg1,arg2,arg3)
    return err
end

function DMGetCoordinates(arg1::DM{Complex128},arg2::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:DMGetCoordinates,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Vec{Complex128}}),arg1,arg2)
    return err
end

function DMSetCoordinates(arg1::DM{Complex128},arg2::Vec{Complex128})
    err = ccall((:DMSetCoordinates,petscComplexDouble),PetscErrorCode,(DM{Complex128},Vec{Complex128}),arg1,arg2)
    return err
end

function DMGetCoordinatesLocal(arg1::DM{Complex128},arg2::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:DMGetCoordinatesLocal,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Vec{Complex128}}),arg1,arg2)
    return err
end

function DMSetCoordinatesLocal(arg1::DM{Complex128},arg2::Vec{Complex128})
    err = ccall((:DMSetCoordinatesLocal,petscComplexDouble),PetscErrorCode,(DM{Complex128},Vec{Complex128}),arg1,arg2)
    return err
end

function DMLocatePoints(arg1::DM{Complex128},arg2::Vec{Complex128},arg3::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:DMLocatePoints,petscComplexDouble),PetscErrorCode,(DM{Complex128},Vec{Complex128},Ptr{IS{Complex128}}),arg1,arg2,arg3)
    return err
end

function DMGetPeriodicity(arg1::DM{Complex128},arg2::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg3::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg4::Union{Ptr{Ptr{DMBoundaryType}},StridedArray{Ptr{DMBoundaryType}},Ptr{Ptr{DMBoundaryType}},Ref{Ptr{DMBoundaryType}}})
    err = ccall((:DMGetPeriodicity,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Ptr{Float64}},Ptr{Ptr{Float64}},Ptr{Ptr{DMBoundaryType}}),arg1,arg2,arg3,arg4)
    return err
end

function DMSetPeriodicity(arg1::DM{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{DMBoundaryType},StridedArray{DMBoundaryType},Ptr{DMBoundaryType},Ref{DMBoundaryType}})
    err = ccall((:DMSetPeriodicity,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Float64},Ptr{Float64},Ptr{DMBoundaryType}),arg1,arg2,arg3,arg4)
    return err
end

function DMSubDomainHookAdd(arg1::DM{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMSubDomainHookAdd,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function DMSubDomainRestrict(arg1::DM{Complex128},arg2::VecScatter{Complex128},arg3::VecScatter{Complex128},arg4::DM{Complex128})
    err = ccall((:DMSubDomainRestrict,petscComplexDouble),PetscErrorCode,(DM{Complex128},VecScatter{Complex128},VecScatter{Complex128},DM{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function DMSetOptionsPrefix(arg1::DM{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:DMSetOptionsPrefix,petscComplexDouble),PetscErrorCode,(DM{Complex128},Cstring),arg1,arg2)
    return err
end

function DMSetVecType(arg1::DM{Complex128},arg2::VecType)
    err = ccall((:DMSetVecType,petscComplexDouble),PetscErrorCode,(DM{Complex128},VecType),arg1,arg2)
    return err
end

function DMGetVecType(arg1::DM{Complex128},arg2::Union{Ptr{VecType},StridedArray{VecType},Ptr{VecType},Ref{VecType}})
    err = ccall((:DMGetVecType,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{VecType}),arg1,arg2)
    return err
end

function DMSetMatType(arg1::DM{Complex128},arg2::MatType)
    err = ccall((:DMSetMatType,petscComplexDouble),PetscErrorCode,(DM{Complex128},MatType),arg1,arg2)
    return err
end

function DMGetMatType(arg1::DM{Complex128},arg2::Union{Ptr{MatType},StridedArray{MatType},Ptr{MatType},Ref{MatType}})
    err = ccall((:DMGetMatType,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{MatType}),arg1,arg2)
    return err
end

function DMSetApplicationContext(arg1::DM{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMSetApplicationContext,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function DMSetApplicationContextDestroy(arg1::DM{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMSetApplicationContextDestroy,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function DMGetApplicationContext(arg1::DM{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMGetApplicationContext,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function DMSetVariableBounds(arg1::DM{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMSetVariableBounds,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function DMHasVariableBounds(arg1::DM{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:DMHasVariableBounds,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function DMHasColoring(arg1::DM{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:DMHasColoring,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function DMComputeVariableBounds(arg1::DM{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128})
    err = ccall((:DMComputeVariableBounds,petscComplexDouble),PetscErrorCode,(DM{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function DMCreateSubDM(arg1::DM{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}},arg5::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:DMCreateSubDM,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Ptr{Int64},Ptr{IS{Complex128}},Ptr{DM{Complex128}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMCreateFieldDecomposition(arg1::DM{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}},arg4::Union{Ptr{Ptr{IS{Complex128}}},StridedArray{Ptr{IS{Complex128}}},Ptr{Ptr{IS{Complex128}}},Ref{Ptr{IS{Complex128}}}},arg5::Union{Ptr{Ptr{DM{Complex128}}},StridedArray{Ptr{DM{Complex128}}},Ptr{Ptr{DM{Complex128}}},Ref{Ptr{DM{Complex128}}}})
    err = ccall((:DMCreateFieldDecomposition,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Int64},Ptr{Ptr{Ptr{UInt8}}},Ptr{Ptr{IS{Complex128}}},Ptr{Ptr{DM{Complex128}}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMCreateDomainDecomposition(arg1::DM{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}},arg4::Union{Ptr{Ptr{IS{Complex128}}},StridedArray{Ptr{IS{Complex128}}},Ptr{Ptr{IS{Complex128}}},Ref{Ptr{IS{Complex128}}}},arg5::Union{Ptr{Ptr{IS{Complex128}}},StridedArray{Ptr{IS{Complex128}}},Ptr{Ptr{IS{Complex128}}},Ref{Ptr{IS{Complex128}}}},arg6::Union{Ptr{Ptr{DM{Complex128}}},StridedArray{Ptr{DM{Complex128}}},Ptr{Ptr{DM{Complex128}}},Ref{Ptr{DM{Complex128}}}})
    err = ccall((:DMCreateDomainDecomposition,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Int64},Ptr{Ptr{Ptr{UInt8}}},Ptr{Ptr{IS{Complex128}}},Ptr{Ptr{IS{Complex128}}},Ptr{Ptr{DM{Complex128}}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMCreateDomainDecompositionScatters(arg1::DM{Complex128},arg2::Integer,arg3::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}},arg4::Union{Ptr{Ptr{VecScatter{Complex128}}},StridedArray{Ptr{VecScatter{Complex128}}},Ptr{Ptr{VecScatter{Complex128}}},Ref{Ptr{VecScatter{Complex128}}}},arg5::Union{Ptr{Ptr{VecScatter{Complex128}}},StridedArray{Ptr{VecScatter{Complex128}}},Ptr{Ptr{VecScatter{Complex128}}},Ref{Ptr{VecScatter{Complex128}}}},arg6::Union{Ptr{Ptr{VecScatter{Complex128}}},StridedArray{Ptr{VecScatter{Complex128}}},Ptr{Ptr{VecScatter{Complex128}}},Ref{Ptr{VecScatter{Complex128}}}})
    err = ccall((:DMCreateDomainDecompositionScatters,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Ptr{DM{Complex128}},Ptr{Ptr{VecScatter{Complex128}}},Ptr{Ptr{VecScatter{Complex128}}},Ptr{Ptr{VecScatter{Complex128}}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMGetRefineLevel(arg1::DM{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMGetRefineLevel,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function DMGetCoarsenLevel(arg1::DM{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMGetCoarsenLevel,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function DMFinalizePackage(arg0::Type{Complex128})
    err = ccall((:DMFinalizePackage,petscComplexDouble),PetscErrorCode,())
    return err
end

function VecGetDM(arg1::Vec{Complex128},arg2::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:VecGetDM,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Ptr{DM{Complex128}}),arg1,arg2)
    return err
end

function VecSetDM(arg1::Vec{Complex128},arg2::DM{Complex128})
    err = ccall((:VecSetDM,petscComplexDouble),PetscErrorCode,(Vec{Complex128},DM{Complex128}),arg1,arg2)
    return err
end

function MatGetDM(arg1::Mat{Complex128},arg2::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:MatGetDM,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{DM{Complex128}}),arg1,arg2)
    return err
end

function MatSetDM(arg1::Mat{Complex128},arg2::DM{Complex128})
    err = ccall((:MatSetDM,petscComplexDouble),PetscErrorCode,(Mat{Complex128},DM{Complex128}),arg1,arg2)
    return err
end

function DMPrintCellVector(arg0::Type{Complex128},arg1::Integer,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer,arg4::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}})
    err = ccall((:DMPrintCellVector,petscComplexDouble),PetscErrorCode,(Int64,Cstring,Int64,Ptr{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function DMPrintCellMatrix(arg0::Type{Complex128},arg1::Integer,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer,arg4::Integer,arg5::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}})
    err = ccall((:DMPrintCellMatrix,petscComplexDouble),PetscErrorCode,(Int64,Cstring,Int64,Int64,Ptr{Complex128}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPrintLocalVec(arg1::DM{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Float64,arg4::Vec{Complex128})
    err = ccall((:DMPrintLocalVec,petscComplexDouble),PetscErrorCode,(DM{Complex128},Cstring,Float64,Vec{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function DMGetDefaultSection(arg1::DM{Complex128},arg2::Union{Ptr{PetscSection{Complex128}},StridedArray{PetscSection{Complex128}},Ptr{PetscSection{Complex128}},Ref{PetscSection{Complex128}}})
    err = ccall((:DMGetDefaultSection,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{PetscSection{Complex128}}),arg1,arg2)
    return err
end

function DMSetDefaultSection(arg1::DM{Complex128},arg2::PetscSection{Complex128})
    err = ccall((:DMSetDefaultSection,petscComplexDouble),PetscErrorCode,(DM{Complex128},PetscSection{Complex128}),arg1,arg2)
    return err
end

function DMGetDefaultConstraints(arg1::DM{Complex128},arg2::Union{Ptr{PetscSection{Complex128}},StridedArray{PetscSection{Complex128}},Ptr{PetscSection{Complex128}},Ref{PetscSection{Complex128}}},arg3::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:DMGetDefaultConstraints,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{PetscSection{Complex128}},Ptr{Mat{Complex128}}),arg1,arg2,arg3)
    return err
end

function DMSetDefaultConstraints(arg1::DM{Complex128},arg2::PetscSection{Complex128},arg3::Mat{Complex128})
    err = ccall((:DMSetDefaultConstraints,petscComplexDouble),PetscErrorCode,(DM{Complex128},PetscSection{Complex128},Mat{Complex128}),arg1,arg2,arg3)
    return err
end

function DMGetDefaultGlobalSection(arg1::DM{Complex128},arg2::Union{Ptr{PetscSection{Complex128}},StridedArray{PetscSection{Complex128}},Ptr{PetscSection{Complex128}},Ref{PetscSection{Complex128}}})
    err = ccall((:DMGetDefaultGlobalSection,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{PetscSection{Complex128}}),arg1,arg2)
    return err
end

function DMSetDefaultGlobalSection(arg1::DM{Complex128},arg2::PetscSection{Complex128})
    err = ccall((:DMSetDefaultGlobalSection,petscComplexDouble),PetscErrorCode,(DM{Complex128},PetscSection{Complex128}),arg1,arg2)
    return err
end

function DMGetDefaultSF(arg1::DM{Complex128},arg2::Union{Ptr{PetscSF{Complex128}},StridedArray{PetscSF{Complex128}},Ptr{PetscSF{Complex128}},Ref{PetscSF{Complex128}}})
    err = ccall((:DMGetDefaultSF,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{PetscSF{Complex128}}),arg1,arg2)
    return err
end

function DMSetDefaultSF(arg1::DM{Complex128},arg2::PetscSF{Complex128})
    err = ccall((:DMSetDefaultSF,petscComplexDouble),PetscErrorCode,(DM{Complex128},PetscSF{Complex128}),arg1,arg2)
    return err
end

function DMCreateDefaultSF(arg1::DM{Complex128},arg2::PetscSection{Complex128},arg3::PetscSection{Complex128})
    err = ccall((:DMCreateDefaultSF,petscComplexDouble),PetscErrorCode,(DM{Complex128},PetscSection{Complex128},PetscSection{Complex128}),arg1,arg2,arg3)
    return err
end

function DMGetPointSF(arg1::DM{Complex128},arg2::Union{Ptr{PetscSF{Complex128}},StridedArray{PetscSF{Complex128}},Ptr{PetscSF{Complex128}},Ref{PetscSF{Complex128}}})
    err = ccall((:DMGetPointSF,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{PetscSF{Complex128}}),arg1,arg2)
    return err
end

function DMSetPointSF(arg1::DM{Complex128},arg2::PetscSF{Complex128})
    err = ccall((:DMSetPointSF,petscComplexDouble),PetscErrorCode,(DM{Complex128},PetscSF{Complex128}),arg1,arg2)
    return err
end

function DMGetOutputDM(arg1::DM{Complex128},arg2::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:DMGetOutputDM,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{DM{Complex128}}),arg1,arg2)
    return err
end

function DMGetOutputSequenceNumber(arg1::DM{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:DMGetOutputSequenceNumber,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Int64},Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function DMSetOutputSequenceNumber(arg1::DM{Complex128},arg2::Integer,arg3::Float64)
    err = ccall((:DMSetOutputSequenceNumber,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Float64),arg1,arg2,arg3)
    return err
end

function DMOutputSequenceLoad(arg1::DM{Complex128},arg2::PetscViewer{Complex128},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Integer,arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:DMOutputSequenceLoad,petscComplexDouble),PetscErrorCode,(DM{Complex128},PetscViewer{Complex128},Cstring,Int64,Ptr{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMGetDS(arg1::DM{Complex128},arg2::Union{Ptr{PetscDS{Complex128}},StridedArray{PetscDS{Complex128}},Ptr{PetscDS{Complex128}},Ref{PetscDS{Complex128}}})
    err = ccall((:DMGetDS,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{PetscDS{Complex128}}),arg1,arg2)
    return err
end

function DMSetDS(arg1::DM{Complex128},arg2::PetscDS{Complex128})
    err = ccall((:DMSetDS,petscComplexDouble),PetscErrorCode,(DM{Complex128},PetscDS{Complex128}),arg1,arg2)
    return err
end

function DMGetNumFields(arg1::DM{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMGetNumFields,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function DMSetNumFields(arg1::DM{Complex128},arg2::Integer)
    err = ccall((:DMSetNumFields,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64),arg1,arg2)
    return err
end

function DMGetField(arg1::DM{Complex128},arg2::Integer,arg3::Union{Ptr{PetscObject{Complex128}},StridedArray{PetscObject{Complex128}},Ptr{PetscObject{Complex128}},Ref{PetscObject{Complex128}}})
    err = ccall((:DMGetField,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Ptr{PetscObject{Complex128}}),arg1,arg2,arg3)
    return err
end

function DMSetField(arg1::DM{Complex128},arg2::Integer,arg3::PetscObject{Complex128})
    err = ccall((:DMSetField,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,PetscObject{Complex128}),arg1,arg2,arg3)
    return err
end

function DMInterpolationCreate(arg1::MPI_Comm,arg2::Union{Ptr{DMInterpolationInfo{Complex128}},StridedArray{DMInterpolationInfo{Complex128}},Ptr{DMInterpolationInfo{Complex128}},Ref{DMInterpolationInfo{Complex128}}})
    err = ccall((:DMInterpolationCreate,petscComplexDouble),PetscErrorCode,(comm_type,Ptr{DMInterpolationInfo{Complex128}}),arg1,arg2)
    return err
end

function DMInterpolationSetDim(arg1::DMInterpolationInfo{Complex128},arg2::Integer)
    err = ccall((:DMInterpolationSetDim,petscComplexDouble),PetscErrorCode,(DMInterpolationInfo{Complex128},Int64),arg1,arg2)
    return err
end

function DMInterpolationGetDim(arg1::DMInterpolationInfo{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMInterpolationGetDim,petscComplexDouble),PetscErrorCode,(DMInterpolationInfo{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function DMInterpolationSetDof(arg1::DMInterpolationInfo{Complex128},arg2::Integer)
    err = ccall((:DMInterpolationSetDof,petscComplexDouble),PetscErrorCode,(DMInterpolationInfo{Complex128},Int64),arg1,arg2)
    return err
end

function DMInterpolationGetDof(arg1::DMInterpolationInfo{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMInterpolationGetDof,petscComplexDouble),PetscErrorCode,(DMInterpolationInfo{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function DMInterpolationAddPoints(arg1::DMInterpolationInfo{Complex128},arg2::Integer,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:DMInterpolationAddPoints,petscComplexDouble),PetscErrorCode,(DMInterpolationInfo{Complex128},Int64,Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function DMInterpolationSetUp(arg1::DMInterpolationInfo{Complex128},arg2::DM{Complex128},arg3::PetscBool)
    err = ccall((:DMInterpolationSetUp,petscComplexDouble),PetscErrorCode,(DMInterpolationInfo{Complex128},DM{Complex128},PetscBool),arg1,arg2,arg3)
    return err
end

function DMInterpolationGetCoordinates(arg1::DMInterpolationInfo{Complex128},arg2::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:DMInterpolationGetCoordinates,petscComplexDouble),PetscErrorCode,(DMInterpolationInfo{Complex128},Ptr{Vec{Complex128}}),arg1,arg2)
    return err
end

function DMInterpolationGetVector(arg1::DMInterpolationInfo{Complex128},arg2::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:DMInterpolationGetVector,petscComplexDouble),PetscErrorCode,(DMInterpolationInfo{Complex128},Ptr{Vec{Complex128}}),arg1,arg2)
    return err
end

function DMInterpolationRestoreVector(arg1::DMInterpolationInfo{Complex128},arg2::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:DMInterpolationRestoreVector,petscComplexDouble),PetscErrorCode,(DMInterpolationInfo{Complex128},Ptr{Vec{Complex128}}),arg1,arg2)
    return err
end

function DMInterpolationEvaluate(arg1::DMInterpolationInfo{Complex128},arg2::DM{Complex128},arg3::Vec{Complex128},arg4::Vec{Complex128})
    err = ccall((:DMInterpolationEvaluate,petscComplexDouble),PetscErrorCode,(DMInterpolationInfo{Complex128},DM{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function DMInterpolationDestroy(arg1::Union{Ptr{DMInterpolationInfo{Complex128}},StridedArray{DMInterpolationInfo{Complex128}},Ptr{DMInterpolationInfo{Complex128}},Ref{DMInterpolationInfo{Complex128}}})
    err = ccall((:DMInterpolationDestroy,petscComplexDouble),PetscErrorCode,(Ptr{DMInterpolationInfo{Complex128}},),arg1)
    return err
end

function PFCreate(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Union{Ptr{PF{Complex128}},StridedArray{PF{Complex128}},Ptr{PF{Complex128}},Ref{PF{Complex128}}})
    err = ccall((:PFCreate,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Int64,Ptr{PF{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function PFSetType(arg1::PF{Complex128},arg2::PFType,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PFSetType,petscComplexDouble),PetscErrorCode,(PF{Complex128},PFType,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function PFSet(arg1::PF{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PFSet,petscComplexDouble),PetscErrorCode,(PF{Complex128},Ptr{Void},Ptr{Void},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PFApply(arg1::PF{Complex128},arg2::Integer,arg3::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg4::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}})
    err = ccall((:PFApply,petscComplexDouble),PetscErrorCode,(PF{Complex128},Int64,Ptr{Complex128},Ptr{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function PFApplyVec(arg1::PF{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128})
    err = ccall((:PFApplyVec,petscComplexDouble),PetscErrorCode,(PF{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function PFInitializePackage(arg0::Type{Complex128})
    err = ccall((:PFInitializePackage,petscComplexDouble),PetscErrorCode,())
    return err
end

function PFRegister(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PFRegister,petscComplexDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function PFDestroy(arg1::Union{Ptr{PF{Complex128}},StridedArray{PF{Complex128}},Ptr{PF{Complex128}},Ref{PF{Complex128}}})
    err = ccall((:PFDestroy,petscComplexDouble),PetscErrorCode,(Ptr{PF{Complex128}},),arg1)
    return err
end

function PFSetFromOptions(arg1::PF{Complex128})
    err = ccall((:PFSetFromOptions,petscComplexDouble),PetscErrorCode,(PF{Complex128},),arg1)
    return err
end

function PFGetType(arg1::PF{Complex128},arg2::Union{Ptr{PFType},StridedArray{PFType},Ptr{PFType},Ref{PFType}})
    err = ccall((:PFGetType,petscComplexDouble),PetscErrorCode,(PF{Complex128},Ptr{PFType}),arg1,arg2)
    return err
end

function PFView(arg1::PF{Complex128},arg2::PetscViewer{Complex128})
    err = ccall((:PFView,petscComplexDouble),PetscErrorCode,(PF{Complex128},PetscViewer{Complex128}),arg1,arg2)
    return err
end

function AOInitializePackage(arg0::Type{Complex128})
    err = ccall((:AOInitializePackage,petscComplexDouble),PetscErrorCode,())
    return err
end

function AOCreate(arg0::Type{Complex128},arg1::MPI_Comm,arg2::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:AOCreate,petscComplexDouble),PetscErrorCode,(comm_type,Ptr{Cint}),arg1,arg2)
    return err
end

function AOSetIS(arg0::Type{Complex128})
    err = ccall((:AOSetIS,petscComplexDouble),PetscErrorCode,())
    return err
end

function AOSetFromOptions(arg0::Type{Complex128})
    err = ccall((:AOSetFromOptions,petscComplexDouble),PetscErrorCode,())
    return err
end

function AOCreateBasic(arg0::Type{Complex128},arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:AOCreateBasic,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Ptr{Int64},Ptr{Int64},Ptr{Cint}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function AOCreateBasicIS(arg1::IS{Complex128},arg2::IS{Complex128},arg3::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:AOCreateBasicIS,petscComplexDouble),PetscErrorCode,(IS{Complex128},IS{Complex128},Ptr{Cint}),arg1,arg2,arg3)
    return err
end

function AOCreateMemoryScalable(arg0::Type{Complex128},arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:AOCreateMemoryScalable,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Ptr{Int64},Ptr{Int64},Ptr{Cint}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function AOCreateMemoryScalableIS(arg1::IS{Complex128},arg2::IS{Complex128},arg3::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:AOCreateMemoryScalableIS,petscComplexDouble),PetscErrorCode,(IS{Complex128},IS{Complex128},Ptr{Cint}),arg1,arg2,arg3)
    return err
end

function AOCreateMapping(arg0::Type{Complex128},arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:AOCreateMapping,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Ptr{Int64},Ptr{Int64},Ptr{Cint}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function AOCreateMappingIS(arg1::IS{Complex128},arg2::IS{Complex128},arg3::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:AOCreateMappingIS,petscComplexDouble),PetscErrorCode,(IS{Complex128},IS{Complex128},Ptr{Cint}),arg1,arg2,arg3)
    return err
end

function AOView(arg0::Type{Complex128})
    err = ccall((:AOView,petscComplexDouble),PetscErrorCode,())
    return err
end

function AOSetType(arg0::Type{Complex128})
    err = ccall((:AOSetType,petscComplexDouble),PetscErrorCode,())
    return err
end

function AOGetType(arg0::Type{Complex128})
    err = ccall((:AOGetType,petscComplexDouble),PetscErrorCode,())
    return err
end

function AORegister(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:AORegister,petscComplexDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function AOPetscToApplication(arg0::Type{Complex128})
    err = ccall((:AOPetscToApplication,petscComplexDouble),PetscErrorCode,())
    return err
end

function AOApplicationToPetsc(arg0::Type{Complex128})
    err = ccall((:AOApplicationToPetsc,petscComplexDouble),PetscErrorCode,())
    return err
end

function AOPetscToApplicationIS(arg0::Type{Complex128})
    err = ccall((:AOPetscToApplicationIS,petscComplexDouble),PetscErrorCode,())
    return err
end

function AOApplicationToPetscIS(arg0::Type{Complex128})
    err = ccall((:AOApplicationToPetscIS,petscComplexDouble),PetscErrorCode,())
    return err
end

function AOPetscToApplicationPermuteInt(arg0::Type{Complex128})
    err = ccall((:AOPetscToApplicationPermuteInt,petscComplexDouble),PetscErrorCode,())
    return err
end

function AOApplicationToPetscPermuteInt(arg0::Type{Complex128})
    err = ccall((:AOApplicationToPetscPermuteInt,petscComplexDouble),PetscErrorCode,())
    return err
end

function AOPetscToApplicationPermuteReal(arg0::Type{Complex128})
    err = ccall((:AOPetscToApplicationPermuteReal,petscComplexDouble),PetscErrorCode,())
    return err
end

function AOApplicationToPetscPermuteReal(arg0::Type{Complex128})
    err = ccall((:AOApplicationToPetscPermuteReal,petscComplexDouble),PetscErrorCode,())
    return err
end

function AOMappingHasApplicationIndex(arg0::Type{Complex128})
    err = ccall((:AOMappingHasApplicationIndex,petscComplexDouble),PetscErrorCode,())
    return err
end

function AOMappingHasPetscIndex(arg0::Type{Complex128})
    err = ccall((:AOMappingHasPetscIndex,petscComplexDouble),PetscErrorCode,())
    return err
end

function PetscQuadratureCreate(arg1::MPI_Comm,arg2::Union{Ptr{PetscQuadrature{Complex128}},StridedArray{PetscQuadrature{Complex128}},Ptr{PetscQuadrature{Complex128}},Ref{PetscQuadrature{Complex128}}})
    err = ccall((:PetscQuadratureCreate,petscComplexDouble),PetscErrorCode,(comm_type,Ptr{PetscQuadrature{Complex128}}),arg1,arg2)
    return err
end

function PetscQuadratureDuplicate(arg1::PetscQuadrature{Complex128},arg2::Union{Ptr{PetscQuadrature{Complex128}},StridedArray{PetscQuadrature{Complex128}},Ptr{PetscQuadrature{Complex128}},Ref{PetscQuadrature{Complex128}}})
    err = ccall((:PetscQuadratureDuplicate,petscComplexDouble),PetscErrorCode,(PetscQuadrature{Complex128},Ptr{PetscQuadrature{Complex128}}),arg1,arg2)
    return err
end

function PetscQuadratureGetOrder(arg1::PetscQuadrature{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscQuadratureGetOrder,petscComplexDouble),PetscErrorCode,(PetscQuadrature{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscQuadratureSetOrder(arg1::PetscQuadrature{Complex128},arg2::Integer)
    err = ccall((:PetscQuadratureSetOrder,petscComplexDouble),PetscErrorCode,(PetscQuadrature{Complex128},Int64),arg1,arg2)
    return err
end

function PetscQuadratureGetData(arg1::PetscQuadrature{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg5::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:PetscQuadratureGetData,petscComplexDouble),PetscErrorCode,(PetscQuadrature{Complex128},Ptr{Int64},Ptr{Int64},Ptr{Ptr{Float64}},Ptr{Ptr{Float64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscQuadratureSetData(arg1::PetscQuadrature{Complex128},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscQuadratureSetData,petscComplexDouble),PetscErrorCode,(PetscQuadrature{Complex128},Int64,Int64,Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscQuadratureView(arg1::PetscQuadrature{Complex128},arg2::PetscViewer{Complex128})
    err = ccall((:PetscQuadratureView,petscComplexDouble),PetscErrorCode,(PetscQuadrature{Complex128},PetscViewer{Complex128}),arg1,arg2)
    return err
end

function PetscQuadratureDestroy(arg1::Union{Ptr{PetscQuadrature{Complex128}},StridedArray{PetscQuadrature{Complex128}},Ptr{PetscQuadrature{Complex128}},Ref{PetscQuadrature{Complex128}}})
    err = ccall((:PetscQuadratureDestroy,petscComplexDouble),PetscErrorCode,(Ptr{PetscQuadrature{Complex128}},),arg1)
    return err
end

function PetscQuadratureExpandComposite(arg1::PetscQuadrature{Complex128},arg2::Integer,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{PetscQuadrature{Complex128}},StridedArray{PetscQuadrature{Complex128}},Ptr{PetscQuadrature{Complex128}},Ref{PetscQuadrature{Complex128}}})
    err = ccall((:PetscQuadratureExpandComposite,petscComplexDouble),PetscErrorCode,(PetscQuadrature{Complex128},Int64,Ptr{Float64},Ptr{Float64},Ptr{PetscQuadrature{Complex128}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDTLegendreEval(arg0::Type{Complex128},arg1::Integer,arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg7::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscDTLegendreEval,petscComplexDouble),PetscErrorCode,(Int64,Ptr{Float64},Int64,Ptr{Int64},Ptr{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function PetscDTGaussQuadrature(arg0::Type{Complex128},arg1::Integer,arg2::Float64,arg3::Float64,arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscDTGaussQuadrature,petscComplexDouble),PetscErrorCode,(Int64,Float64,Float64,Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDTReconstructPoly(arg0::Type{Complex128},arg1::Integer,arg2::Integer,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Integer,arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscDTReconstructPoly,petscComplexDouble),PetscErrorCode,(Int64,Int64,Ptr{Float64},Int64,Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscDTGaussTensorQuadrature(arg1::Integer,arg2::Integer,arg3::Float64,arg4::Float64,arg5::Union{Ptr{PetscQuadrature{Complex128}},StridedArray{PetscQuadrature{Complex128}},Ptr{PetscQuadrature{Complex128}},Ref{PetscQuadrature{Complex128}}})
    err = ccall((:PetscDTGaussTensorQuadrature,petscComplexDouble),PetscErrorCode,(Int64,Int64,Float64,Float64,Ptr{PetscQuadrature{Complex128}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDTGaussJacobiQuadrature(arg1::Integer,arg2::Integer,arg3::Float64,arg4::Float64,arg5::Union{Ptr{PetscQuadrature{Complex128}},StridedArray{PetscQuadrature{Complex128}},Ptr{PetscQuadrature{Complex128}},Ref{PetscQuadrature{Complex128}}})
    err = ccall((:PetscDTGaussJacobiQuadrature,petscComplexDouble),PetscErrorCode,(Int64,Int64,Float64,Float64,Ptr{PetscQuadrature{Complex128}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscFEInitializePackage(arg0::Type{Complex128})
    err = ccall((:PetscFEInitializePackage,petscComplexDouble),PetscErrorCode,())
    return err
end

function PetscSpaceCreate(arg1::MPI_Comm,arg2::Union{Ptr{PetscSpace{Complex128}},StridedArray{PetscSpace{Complex128}},Ptr{PetscSpace{Complex128}},Ref{PetscSpace{Complex128}}})
    err = ccall((:PetscSpaceCreate,petscComplexDouble),PetscErrorCode,(comm_type,Ptr{PetscSpace{Complex128}}),arg1,arg2)
    return err
end

function PetscSpaceDestroy(arg1::Union{Ptr{PetscSpace{Complex128}},StridedArray{PetscSpace{Complex128}},Ptr{PetscSpace{Complex128}},Ref{PetscSpace{Complex128}}})
    err = ccall((:PetscSpaceDestroy,petscComplexDouble),PetscErrorCode,(Ptr{PetscSpace{Complex128}},),arg1)
    return err
end

function PetscSpaceSetType(arg1::PetscSpace{Complex128},arg2::PetscSpaceType)
    err = ccall((:PetscSpaceSetType,petscComplexDouble),PetscErrorCode,(PetscSpace{Complex128},PetscSpaceType),arg1,arg2)
    return err
end

function PetscSpaceGetType(arg1::PetscSpace{Complex128},arg2::Union{Ptr{PetscSpaceType},StridedArray{PetscSpaceType},Ptr{PetscSpaceType},Ref{PetscSpaceType}})
    err = ccall((:PetscSpaceGetType,petscComplexDouble),PetscErrorCode,(PetscSpace{Complex128},Ptr{PetscSpaceType}),arg1,arg2)
    return err
end

function PetscSpaceSetUp(arg1::PetscSpace{Complex128})
    err = ccall((:PetscSpaceSetUp,petscComplexDouble),PetscErrorCode,(PetscSpace{Complex128},),arg1)
    return err
end

function PetscSpaceSetFromOptions(arg1::PetscSpace{Complex128})
    err = ccall((:PetscSpaceSetFromOptions,petscComplexDouble),PetscErrorCode,(PetscSpace{Complex128},),arg1)
    return err
end

function PetscSpaceRegister(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscSpaceRegister,petscComplexDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function PetscSpaceRegisterDestroy(arg0::Type{Complex128})
    err = ccall((:PetscSpaceRegisterDestroy,petscComplexDouble),PetscErrorCode,())
    return err
end

function PetscSpaceGetDimension(arg1::PetscSpace{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSpaceGetDimension,petscComplexDouble),PetscErrorCode,(PetscSpace{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscSpaceSetOrder(arg1::PetscSpace{Complex128},arg2::Integer)
    err = ccall((:PetscSpaceSetOrder,petscComplexDouble),PetscErrorCode,(PetscSpace{Complex128},Int64),arg1,arg2)
    return err
end

function PetscSpaceGetOrder(arg1::PetscSpace{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSpaceGetOrder,petscComplexDouble),PetscErrorCode,(PetscSpace{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscSpaceEvaluate(arg1::PetscSpace{Complex128},arg2::Integer,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscSpaceEvaluate,petscComplexDouble),PetscErrorCode,(PetscSpace{Complex128},Int64,Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscSpacePolynomialSetNumVariables(arg1::PetscSpace{Complex128},arg2::Integer)
    err = ccall((:PetscSpacePolynomialSetNumVariables,petscComplexDouble),PetscErrorCode,(PetscSpace{Complex128},Int64),arg1,arg2)
    return err
end

function PetscSpacePolynomialGetNumVariables(arg1::PetscSpace{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSpacePolynomialGetNumVariables,petscComplexDouble),PetscErrorCode,(PetscSpace{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscSpacePolynomialSetSymmetric(arg1::PetscSpace{Complex128},arg2::PetscBool)
    err = ccall((:PetscSpacePolynomialSetSymmetric,petscComplexDouble),PetscErrorCode,(PetscSpace{Complex128},PetscBool),arg1,arg2)
    return err
end

function PetscSpacePolynomialGetSymmetric(arg1::PetscSpace{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscSpacePolynomialGetSymmetric,petscComplexDouble),PetscErrorCode,(PetscSpace{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscSpacePolynomialSetTensor(arg1::PetscSpace{Complex128},arg2::PetscBool)
    err = ccall((:PetscSpacePolynomialSetTensor,petscComplexDouble),PetscErrorCode,(PetscSpace{Complex128},PetscBool),arg1,arg2)
    return err
end

function PetscSpacePolynomialGetTensor(arg1::PetscSpace{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscSpacePolynomialGetTensor,petscComplexDouble),PetscErrorCode,(PetscSpace{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscSpaceDGSetQuadrature(arg1::PetscSpace{Complex128},arg2::PetscQuadrature{Complex128})
    err = ccall((:PetscSpaceDGSetQuadrature,petscComplexDouble),PetscErrorCode,(PetscSpace{Complex128},PetscQuadrature{Complex128}),arg1,arg2)
    return err
end

function PetscSpaceDGGetQuadrature(arg1::PetscSpace{Complex128},arg2::Union{Ptr{PetscQuadrature{Complex128}},StridedArray{PetscQuadrature{Complex128}},Ptr{PetscQuadrature{Complex128}},Ref{PetscQuadrature{Complex128}}})
    err = ccall((:PetscSpaceDGGetQuadrature,petscComplexDouble),PetscErrorCode,(PetscSpace{Complex128},Ptr{PetscQuadrature{Complex128}}),arg1,arg2)
    return err
end

function PetscDualSpaceCreate(arg1::MPI_Comm,arg2::Union{Ptr{PetscDualSpace{Complex128}},StridedArray{PetscDualSpace{Complex128}},Ptr{PetscDualSpace{Complex128}},Ref{PetscDualSpace{Complex128}}})
    err = ccall((:PetscDualSpaceCreate,petscComplexDouble),PetscErrorCode,(comm_type,Ptr{PetscDualSpace{Complex128}}),arg1,arg2)
    return err
end

function PetscDualSpaceDestroy(arg1::Union{Ptr{PetscDualSpace{Complex128}},StridedArray{PetscDualSpace{Complex128}},Ptr{PetscDualSpace{Complex128}},Ref{PetscDualSpace{Complex128}}})
    err = ccall((:PetscDualSpaceDestroy,petscComplexDouble),PetscErrorCode,(Ptr{PetscDualSpace{Complex128}},),arg1)
    return err
end

function PetscDualSpaceDuplicate(arg1::PetscDualSpace{Complex128},arg2::Union{Ptr{PetscDualSpace{Complex128}},StridedArray{PetscDualSpace{Complex128}},Ptr{PetscDualSpace{Complex128}},Ref{PetscDualSpace{Complex128}}})
    err = ccall((:PetscDualSpaceDuplicate,petscComplexDouble),PetscErrorCode,(PetscDualSpace{Complex128},Ptr{PetscDualSpace{Complex128}}),arg1,arg2)
    return err
end

function PetscDualSpaceSetType(arg1::PetscDualSpace{Complex128},arg2::PetscDualSpaceType)
    err = ccall((:PetscDualSpaceSetType,petscComplexDouble),PetscErrorCode,(PetscDualSpace{Complex128},PetscDualSpaceType),arg1,arg2)
    return err
end

function PetscDualSpaceGetType(arg1::PetscDualSpace{Complex128},arg2::Union{Ptr{PetscDualSpaceType},StridedArray{PetscDualSpaceType},Ptr{PetscDualSpaceType},Ref{PetscDualSpaceType}})
    err = ccall((:PetscDualSpaceGetType,petscComplexDouble),PetscErrorCode,(PetscDualSpace{Complex128},Ptr{PetscDualSpaceType}),arg1,arg2)
    return err
end

function PetscDualSpaceSetUp(arg1::PetscDualSpace{Complex128})
    err = ccall((:PetscDualSpaceSetUp,petscComplexDouble),PetscErrorCode,(PetscDualSpace{Complex128},),arg1)
    return err
end

function PetscDualSpaceSetFromOptions(arg1::PetscDualSpace{Complex128})
    err = ccall((:PetscDualSpaceSetFromOptions,petscComplexDouble),PetscErrorCode,(PetscDualSpace{Complex128},),arg1)
    return err
end

function PetscDualSpaceRegister(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscDualSpaceRegister,petscComplexDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function PetscDualSpaceRegisterDestroy(arg0::Type{Complex128})
    err = ccall((:PetscDualSpaceRegisterDestroy,petscComplexDouble),PetscErrorCode,())
    return err
end

function PetscDualSpaceGetDimension(arg1::PetscDualSpace{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscDualSpaceGetDimension,petscComplexDouble),PetscErrorCode,(PetscDualSpace{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscDualSpaceSetOrder(arg1::PetscDualSpace{Complex128},arg2::Integer)
    err = ccall((:PetscDualSpaceSetOrder,petscComplexDouble),PetscErrorCode,(PetscDualSpace{Complex128},Int64),arg1,arg2)
    return err
end

function PetscDualSpaceGetOrder(arg1::PetscDualSpace{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscDualSpaceGetOrder,petscComplexDouble),PetscErrorCode,(PetscDualSpace{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscDualSpaceSetDM(arg1::PetscDualSpace{Complex128},arg2::DM{Complex128})
    err = ccall((:PetscDualSpaceSetDM,petscComplexDouble),PetscErrorCode,(PetscDualSpace{Complex128},DM{Complex128}),arg1,arg2)
    return err
end

function PetscDualSpaceGetDM(arg1::PetscDualSpace{Complex128},arg2::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:PetscDualSpaceGetDM,petscComplexDouble),PetscErrorCode,(PetscDualSpace{Complex128},Ptr{DM{Complex128}}),arg1,arg2)
    return err
end

function PetscDualSpaceGetFunctional(arg1::PetscDualSpace{Complex128},arg2::Integer,arg3::Union{Ptr{PetscQuadrature{Complex128}},StridedArray{PetscQuadrature{Complex128}},Ptr{PetscQuadrature{Complex128}},Ref{PetscQuadrature{Complex128}}})
    err = ccall((:PetscDualSpaceGetFunctional,petscComplexDouble),PetscErrorCode,(PetscDualSpace{Complex128},Int64,Ptr{PetscQuadrature{Complex128}}),arg1,arg2,arg3)
    return err
end

function PetscDualSpaceCreateReferenceCell(arg1::PetscDualSpace{Complex128},arg2::Integer,arg3::PetscBool,arg4::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:PetscDualSpaceCreateReferenceCell,petscComplexDouble),PetscErrorCode,(PetscDualSpace{Complex128},Int64,PetscBool,Ptr{DM{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscDualSpaceApply(arg1::PetscDualSpace{Complex128},arg2::Integer,arg3::Union{Ptr{PetscFECellGeom},StridedArray{PetscFECellGeom},Ptr{PetscFECellGeom},Ref{PetscFECellGeom}},arg4::Integer,arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg7::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}})
    err = ccall((:PetscDualSpaceApply,petscComplexDouble),PetscErrorCode,(PetscDualSpace{Complex128},Int64,Ptr{PetscFECellGeom},Int64,Ptr{Void},Ptr{Void},Ptr{Complex128}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function PetscDualSpaceLagrangeGetContinuity(arg1::PetscDualSpace{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscDualSpaceLagrangeGetContinuity,petscComplexDouble),PetscErrorCode,(PetscDualSpace{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscDualSpaceLagrangeSetContinuity(arg1::PetscDualSpace{Complex128},arg2::PetscBool)
    err = ccall((:PetscDualSpaceLagrangeSetContinuity,petscComplexDouble),PetscErrorCode,(PetscDualSpace{Complex128},PetscBool),arg1,arg2)
    return err
end

function PetscDualSpaceGetHeightSubspace(arg1::PetscDualSpace{Complex128},arg2::Integer,arg3::Union{Ptr{PetscDualSpace{Complex128}},StridedArray{PetscDualSpace{Complex128}},Ptr{PetscDualSpace{Complex128}},Ref{PetscDualSpace{Complex128}}})
    err = ccall((:PetscDualSpaceGetHeightSubspace,petscComplexDouble),PetscErrorCode,(PetscDualSpace{Complex128},Int64,Ptr{PetscDualSpace{Complex128}}),arg1,arg2,arg3)
    return err
end

function PetscDualSpaceSimpleSetDimension(arg1::PetscDualSpace{Complex128},arg2::Integer)
    err = ccall((:PetscDualSpaceSimpleSetDimension,petscComplexDouble),PetscErrorCode,(PetscDualSpace{Complex128},Int64),arg1,arg2)
    return err
end

function PetscDualSpaceSimpleSetFunctional(arg1::PetscDualSpace{Complex128},arg2::Integer,arg3::PetscQuadrature{Complex128})
    err = ccall((:PetscDualSpaceSimpleSetFunctional,petscComplexDouble),PetscErrorCode,(PetscDualSpace{Complex128},Int64,PetscQuadrature{Complex128}),arg1,arg2,arg3)
    return err
end

function PetscFECreate(arg1::MPI_Comm,arg2::Union{Ptr{PetscFE{Complex128}},StridedArray{PetscFE{Complex128}},Ptr{PetscFE{Complex128}},Ref{PetscFE{Complex128}}})
    err = ccall((:PetscFECreate,petscComplexDouble),PetscErrorCode,(comm_type,Ptr{PetscFE{Complex128}}),arg1,arg2)
    return err
end

function PetscFEDestroy(arg1::Union{Ptr{PetscFE{Complex128}},StridedArray{PetscFE{Complex128}},Ptr{PetscFE{Complex128}},Ref{PetscFE{Complex128}}})
    err = ccall((:PetscFEDestroy,petscComplexDouble),PetscErrorCode,(Ptr{PetscFE{Complex128}},),arg1)
    return err
end

function PetscFESetType(arg1::PetscFE{Complex128},arg2::PetscFEType)
    err = ccall((:PetscFESetType,petscComplexDouble),PetscErrorCode,(PetscFE{Complex128},PetscFEType),arg1,arg2)
    return err
end

function PetscFEGetType(arg1::PetscFE{Complex128},arg2::Union{Ptr{PetscFEType},StridedArray{PetscFEType},Ptr{PetscFEType},Ref{PetscFEType}})
    err = ccall((:PetscFEGetType,petscComplexDouble),PetscErrorCode,(PetscFE{Complex128},Ptr{PetscFEType}),arg1,arg2)
    return err
end

function PetscFESetUp(arg1::PetscFE{Complex128})
    err = ccall((:PetscFESetUp,petscComplexDouble),PetscErrorCode,(PetscFE{Complex128},),arg1)
    return err
end

function PetscFESetFromOptions(arg1::PetscFE{Complex128})
    err = ccall((:PetscFESetFromOptions,petscComplexDouble),PetscErrorCode,(PetscFE{Complex128},),arg1)
    return err
end

function PetscFERegister(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscFERegister,petscComplexDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function PetscFERegisterDestroy(arg0::Type{Complex128})
    err = ccall((:PetscFERegisterDestroy,petscComplexDouble),PetscErrorCode,())
    return err
end

function PetscFECreateDefault(arg1::DM{Complex128},arg2::Integer,arg3::Integer,arg4::PetscBool,arg5::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg6::Integer,arg7::Union{Ptr{PetscFE{Complex128}},StridedArray{PetscFE{Complex128}},Ptr{PetscFE{Complex128}},Ref{PetscFE{Complex128}}})
    err = ccall((:PetscFECreateDefault,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Int64,PetscBool,Cstring,Int64,Ptr{PetscFE{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function PetscFEGetDimension(arg1::PetscFE{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscFEGetDimension,petscComplexDouble),PetscErrorCode,(PetscFE{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscFEGetSpatialDimension(arg1::PetscFE{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscFEGetSpatialDimension,petscComplexDouble),PetscErrorCode,(PetscFE{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscFESetNumComponents(arg1::PetscFE{Complex128},arg2::Integer)
    err = ccall((:PetscFESetNumComponents,petscComplexDouble),PetscErrorCode,(PetscFE{Complex128},Int64),arg1,arg2)
    return err
end

function PetscFEGetNumComponents(arg1::PetscFE{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscFEGetNumComponents,petscComplexDouble),PetscErrorCode,(PetscFE{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscFEGetTileSizes(arg1::PetscFE{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscFEGetTileSizes,petscComplexDouble),PetscErrorCode,(PetscFE{Complex128},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscFESetTileSizes(arg1::PetscFE{Complex128},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer)
    err = ccall((:PetscFESetTileSizes,petscComplexDouble),PetscErrorCode,(PetscFE{Complex128},Int64,Int64,Int64,Int64),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscFESetBasisSpace(arg1::PetscFE{Complex128},arg2::PetscSpace{Complex128})
    err = ccall((:PetscFESetBasisSpace,petscComplexDouble),PetscErrorCode,(PetscFE{Complex128},PetscSpace{Complex128}),arg1,arg2)
    return err
end

function PetscFEGetBasisSpace(arg1::PetscFE{Complex128},arg2::Union{Ptr{PetscSpace{Complex128}},StridedArray{PetscSpace{Complex128}},Ptr{PetscSpace{Complex128}},Ref{PetscSpace{Complex128}}})
    err = ccall((:PetscFEGetBasisSpace,petscComplexDouble),PetscErrorCode,(PetscFE{Complex128},Ptr{PetscSpace{Complex128}}),arg1,arg2)
    return err
end

function PetscFESetDualSpace(arg1::PetscFE{Complex128},arg2::PetscDualSpace{Complex128})
    err = ccall((:PetscFESetDualSpace,petscComplexDouble),PetscErrorCode,(PetscFE{Complex128},PetscDualSpace{Complex128}),arg1,arg2)
    return err
end

function PetscFEGetDualSpace(arg1::PetscFE{Complex128},arg2::Union{Ptr{PetscDualSpace{Complex128}},StridedArray{PetscDualSpace{Complex128}},Ptr{PetscDualSpace{Complex128}},Ref{PetscDualSpace{Complex128}}})
    err = ccall((:PetscFEGetDualSpace,petscComplexDouble),PetscErrorCode,(PetscFE{Complex128},Ptr{PetscDualSpace{Complex128}}),arg1,arg2)
    return err
end

function PetscFESetQuadrature(arg1::PetscFE{Complex128},arg2::PetscQuadrature{Complex128})
    err = ccall((:PetscFESetQuadrature,petscComplexDouble),PetscErrorCode,(PetscFE{Complex128},PetscQuadrature{Complex128}),arg1,arg2)
    return err
end

function PetscFEGetQuadrature(arg1::PetscFE{Complex128},arg2::Union{Ptr{PetscQuadrature{Complex128}},StridedArray{PetscQuadrature{Complex128}},Ptr{PetscQuadrature{Complex128}},Ref{PetscQuadrature{Complex128}}})
    err = ccall((:PetscFEGetQuadrature,petscComplexDouble),PetscErrorCode,(PetscFE{Complex128},Ptr{PetscQuadrature{Complex128}}),arg1,arg2)
    return err
end

function PetscFEGetNumDof(arg1::PetscFE{Complex128},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:PetscFEGetNumDof,petscComplexDouble),PetscErrorCode,(PetscFE{Complex128},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function PetscFEGetDefaultTabulation(arg1::PetscFE{Complex128},arg2::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg3::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg4::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:PetscFEGetDefaultTabulation,petscComplexDouble),PetscErrorCode,(PetscFE{Complex128},Ptr{Ptr{Float64}},Ptr{Ptr{Float64}},Ptr{Ptr{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscFEGetFaceTabulation(arg1::PetscFE{Complex128},arg2::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:PetscFEGetFaceTabulation,petscComplexDouble),PetscErrorCode,(PetscFE{Complex128},Ptr{Ptr{Float64}}),arg1,arg2)
    return err
end

function PetscFEGetTabulation(arg1::PetscFE{Complex128},arg2::Integer,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg5::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg6::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:PetscFEGetTabulation,petscComplexDouble),PetscErrorCode,(PetscFE{Complex128},Int64,Ptr{Float64},Ptr{Ptr{Float64}},Ptr{Ptr{Float64}},Ptr{Ptr{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscFERestoreTabulation(arg1::PetscFE{Complex128},arg2::Integer,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg5::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg6::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:PetscFERestoreTabulation,petscComplexDouble),PetscErrorCode,(PetscFE{Complex128},Int64,Ptr{Float64},Ptr{Ptr{Float64}},Ptr{Ptr{Float64}},Ptr{Ptr{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscFERefine(arg1::PetscFE{Complex128},arg2::Union{Ptr{PetscFE{Complex128}},StridedArray{PetscFE{Complex128}},Ptr{PetscFE{Complex128}},Ref{PetscFE{Complex128}}})
    err = ccall((:PetscFERefine,petscComplexDouble),PetscErrorCode,(PetscFE{Complex128},Ptr{PetscFE{Complex128}}),arg1,arg2)
    return err
end

function PetscFEIntegrate(arg1::PetscFE{Complex128},arg2::PetscDS{Complex128},arg3::Integer,arg4::Integer,arg5::Union{Ptr{PetscFECellGeom},StridedArray{PetscFECellGeom},Ptr{PetscFECellGeom},Ref{PetscFECellGeom}},arg6::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg7::PetscDS{Complex128},arg8::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg9::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscFEIntegrate,petscComplexDouble),PetscErrorCode,(PetscFE{Complex128},PetscDS{Complex128},Int64,Int64,Ptr{PetscFECellGeom},Ptr{Complex128},PetscDS{Complex128},Ptr{Complex128},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
    return err
end

function PetscFEIntegrateResidual(arg1::PetscFE{Complex128},arg2::PetscDS{Complex128},arg3::Integer,arg4::Integer,arg5::Union{Ptr{PetscFECellGeom},StridedArray{PetscFECellGeom},Ptr{PetscFECellGeom},Ref{PetscFECellGeom}},arg6::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg7::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg8::PetscDS{Complex128},arg9::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg10::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}})
    err = ccall((:PetscFEIntegrateResidual,petscComplexDouble),PetscErrorCode,(PetscFE{Complex128},PetscDS{Complex128},Int64,Int64,Ptr{PetscFECellGeom},Ptr{Complex128},Ptr{Complex128},PetscDS{Complex128},Ptr{Complex128},Ptr{Complex128}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function PetscFEIntegrateBdResidual(arg1::PetscFE{Complex128},arg2::PetscDS{Complex128},arg3::Integer,arg4::Integer,arg5::Union{Ptr{PetscFECellGeom},StridedArray{PetscFECellGeom},Ptr{PetscFECellGeom},Ref{PetscFECellGeom}},arg6::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg7::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg8::PetscDS{Complex128},arg9::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg10::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}})
    err = ccall((:PetscFEIntegrateBdResidual,petscComplexDouble),PetscErrorCode,(PetscFE{Complex128},PetscDS{Complex128},Int64,Int64,Ptr{PetscFECellGeom},Ptr{Complex128},Ptr{Complex128},PetscDS{Complex128},Ptr{Complex128},Ptr{Complex128}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function PetscFEIntegrateJacobian(arg1::PetscFE{Complex128},arg2::PetscDS{Complex128},arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{PetscFECellGeom},StridedArray{PetscFECellGeom},Ptr{PetscFECellGeom},Ref{PetscFECellGeom}},arg7::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg8::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg9::PetscDS{Complex128},arg10::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg11::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}})
    err = ccall((:PetscFEIntegrateJacobian,petscComplexDouble),PetscErrorCode,(PetscFE{Complex128},PetscDS{Complex128},Int64,Int64,Int64,Ptr{PetscFECellGeom},Ptr{Complex128},Ptr{Complex128},PetscDS{Complex128},Ptr{Complex128},Ptr{Complex128}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11)
    return err
end

function PetscFEIntegrateBdJacobian(arg1::PetscFE{Complex128},arg2::PetscDS{Complex128},arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{PetscFECellGeom},StridedArray{PetscFECellGeom},Ptr{PetscFECellGeom},Ref{PetscFECellGeom}},arg7::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg8::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg9::PetscDS{Complex128},arg10::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg11::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}})
    err = ccall((:PetscFEIntegrateBdJacobian,petscComplexDouble),PetscErrorCode,(PetscFE{Complex128},PetscDS{Complex128},Int64,Int64,Int64,Ptr{PetscFECellGeom},Ptr{Complex128},Ptr{Complex128},PetscDS{Complex128},Ptr{Complex128},Ptr{Complex128}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11)
    return err
end

function PetscFECompositeGetMapping(arg1::PetscFE{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg4::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg5::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:PetscFECompositeGetMapping,petscComplexDouble),PetscErrorCode,(PetscFE{Complex128},Ptr{Int64},Ptr{Ptr{Float64}},Ptr{Ptr{Float64}},Ptr{Ptr{Float64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscFEOpenCLSetRealType(arg1::PetscFE{Complex128},arg2::PetscDataType)
    err = ccall((:PetscFEOpenCLSetRealType,petscComplexDouble),PetscErrorCode,(PetscFE{Complex128},PetscDataType),arg1,arg2)
    return err
end

function PetscFEOpenCLGetRealType(arg1::PetscFE{Complex128},arg2::Union{Ptr{PetscDataType},StridedArray{PetscDataType},Ptr{PetscDataType},Ref{PetscDataType}})
    err = ccall((:PetscFEOpenCLGetRealType,petscComplexDouble),PetscErrorCode,(PetscFE{Complex128},Ptr{PetscDataType}),arg1,arg2)
    return err
end

function DMDASetInterpolationType(arg1::DM{Complex128},arg2::DMDAInterpolationType)
    err = ccall((:DMDASetInterpolationType,petscComplexDouble),PetscErrorCode,(DM{Complex128},DMDAInterpolationType),arg1,arg2)
    return err
end

function DMDAGetInterpolationType(arg1::DM{Complex128},arg2::Union{Ptr{DMDAInterpolationType},StridedArray{DMDAInterpolationType},Ptr{DMDAInterpolationType},Ref{DMDAInterpolationType}})
    err = ccall((:DMDAGetInterpolationType,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{DMDAInterpolationType}),arg1,arg2)
    return err
end

function DMDASetElementType(arg1::DM{Complex128},arg2::DMDAElementType)
    err = ccall((:DMDASetElementType,petscComplexDouble),PetscErrorCode,(DM{Complex128},DMDAElementType),arg1,arg2)
    return err
end

function DMDAGetElementType(arg1::DM{Complex128},arg2::Union{Ptr{DMDAElementType},StridedArray{DMDAElementType},Ptr{DMDAElementType},Ref{DMDAElementType}})
    err = ccall((:DMDAGetElementType,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{DMDAElementType}),arg1,arg2)
    return err
end

function DMDAGetElements(arg1::DM{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMDAGetElements,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Int64},Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4)
    return err
end

function DMDARestoreElements(arg1::DM{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMDARestoreElements,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Int64},Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4)
    return err
end

function DMDACreate(arg1::MPI_Comm,arg2::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:DMDACreate,petscComplexDouble),PetscErrorCode,(comm_type,Ptr{DM{Complex128}}),arg1,arg2)
    return err
end

function DMDASetSizes(arg1::DM{Complex128},arg2::Integer,arg3::Integer,arg4::Integer)
    err = ccall((:DMDASetSizes,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Int64,Int64),arg1,arg2,arg3,arg4)
    return err
end

function DMDACreate1d(arg1::MPI_Comm,arg2::DMBoundaryType,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:DMDACreate1d,petscComplexDouble),PetscErrorCode,(comm_type,DMBoundaryType,Int64,Int64,Int64,Ptr{Int64},Ptr{DM{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function DMDACreate2d(arg1::MPI_Comm,arg2::DMBoundaryType,arg3::DMBoundaryType,arg4::DMDAStencilType,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Integer,arg9::Integer,arg10::Integer,arg11::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg12::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg13::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:DMDACreate2d,petscComplexDouble),PetscErrorCode,(comm_type,DMBoundaryType,DMBoundaryType,DMDAStencilType,Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Int64},Ptr{DM{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13)
    return err
end

function DMDACreate3d(arg1::MPI_Comm,arg2::DMBoundaryType,arg3::DMBoundaryType,arg4::DMBoundaryType,arg5::DMDAStencilType,arg6::Integer,arg7::Integer,arg8::Integer,arg9::Integer,arg10::Integer,arg11::Integer,arg12::Integer,arg13::Integer,arg14::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg15::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg16::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg17::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:DMDACreate3d,petscComplexDouble),PetscErrorCode,(comm_type,DMBoundaryType,DMBoundaryType,DMBoundaryType,DMDAStencilType,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{DM{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17)
    return err
end

function DMDAGlobalToNaturalBegin(arg1::DM{Complex128},arg2::Vec{Complex128},arg3::InsertMode,arg4::Vec{Complex128})
    err = ccall((:DMDAGlobalToNaturalBegin,petscComplexDouble),PetscErrorCode,(DM{Complex128},Vec{Complex128},InsertMode,Vec{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function DMDAGlobalToNaturalEnd(arg1::DM{Complex128},arg2::Vec{Complex128},arg3::InsertMode,arg4::Vec{Complex128})
    err = ccall((:DMDAGlobalToNaturalEnd,petscComplexDouble),PetscErrorCode,(DM{Complex128},Vec{Complex128},InsertMode,Vec{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function DMDANaturalToGlobalBegin(arg1::DM{Complex128},arg2::Vec{Complex128},arg3::InsertMode,arg4::Vec{Complex128})
    err = ccall((:DMDANaturalToGlobalBegin,petscComplexDouble),PetscErrorCode,(DM{Complex128},Vec{Complex128},InsertMode,Vec{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function DMDANaturalToGlobalEnd(arg1::DM{Complex128},arg2::Vec{Complex128},arg3::InsertMode,arg4::Vec{Complex128})
    err = ccall((:DMDANaturalToGlobalEnd,petscComplexDouble),PetscErrorCode,(DM{Complex128},Vec{Complex128},InsertMode,Vec{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function DMDAGetCorners(arg1::DM{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMDAGetCorners,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function DMDAGetGhostCorners(arg1::DM{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMDAGetGhostCorners,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function DMDAGetInfo(arg1::DM{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg9::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg10::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg11::Union{Ptr{DMBoundaryType},StridedArray{DMBoundaryType},Ptr{DMBoundaryType},Ref{DMBoundaryType}},arg12::Union{Ptr{DMBoundaryType},StridedArray{DMBoundaryType},Ptr{DMBoundaryType},Ref{DMBoundaryType}},arg13::Union{Ptr{DMBoundaryType},StridedArray{DMBoundaryType},Ptr{DMBoundaryType},Ref{DMBoundaryType}},arg14::Union{Ptr{DMDAStencilType},StridedArray{DMDAStencilType},Ptr{DMDAStencilType},Ref{DMDAStencilType}})
    err = ccall((:DMDAGetInfo,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{DMBoundaryType},Ptr{DMBoundaryType},Ptr{DMBoundaryType},Ptr{DMDAStencilType}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14)
    return err
end

function DMDAGetProcessorSubset(arg1::DM{Complex128},arg2::DMDADirection,arg3::Integer,arg4::Union{Ptr{MPI_Comm},StridedArray{MPI_Comm},Ptr{MPI_Comm},Ref{MPI_Comm}})
    err = ccall((:DMDAGetProcessorSubset,petscComplexDouble),PetscErrorCode,(DM{Complex128},DMDADirection,Int64,Ptr{comm_type}),arg1,arg2,arg3,arg4)
    return err
end

function DMDAGetProcessorSubsets(arg1::DM{Complex128},arg2::DMDADirection,arg3::Union{Ptr{MPI_Comm},StridedArray{MPI_Comm},Ptr{MPI_Comm},Ref{MPI_Comm}})
    err = ccall((:DMDAGetProcessorSubsets,petscComplexDouble),PetscErrorCode,(DM{Complex128},DMDADirection,Ptr{comm_type}),arg1,arg2,arg3)
    return err
end

function DMDAGetRay(arg1::DM{Complex128},arg2::DMDADirection,arg3::Integer,arg4::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}},arg5::Union{Ptr{VecScatter{Complex128}},StridedArray{VecScatter{Complex128}},Ptr{VecScatter{Complex128}},Ref{VecScatter{Complex128}}})
    err = ccall((:DMDAGetRay,petscComplexDouble),PetscErrorCode,(DM{Complex128},DMDADirection,Int64,Ptr{Vec{Complex128}},Ptr{VecScatter{Complex128}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMDAGlobalToNaturalAllCreate(arg1::DM{Complex128},arg2::Union{Ptr{VecScatter{Complex128}},StridedArray{VecScatter{Complex128}},Ptr{VecScatter{Complex128}},Ref{VecScatter{Complex128}}})
    err = ccall((:DMDAGlobalToNaturalAllCreate,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{VecScatter{Complex128}}),arg1,arg2)
    return err
end

function DMDANaturalAllToGlobalCreate(arg1::DM{Complex128},arg2::Union{Ptr{VecScatter{Complex128}},StridedArray{VecScatter{Complex128}},Ptr{VecScatter{Complex128}},Ref{VecScatter{Complex128}}})
    err = ccall((:DMDANaturalAllToGlobalCreate,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{VecScatter{Complex128}}),arg1,arg2)
    return err
end

function DMDAGetScatter(arg1::DM{Complex128},arg2::Union{Ptr{VecScatter{Complex128}},StridedArray{VecScatter{Complex128}},Ptr{VecScatter{Complex128}},Ref{VecScatter{Complex128}}},arg3::Union{Ptr{VecScatter{Complex128}},StridedArray{VecScatter{Complex128}},Ptr{VecScatter{Complex128}},Ref{VecScatter{Complex128}}})
    err = ccall((:DMDAGetScatter,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{VecScatter{Complex128}},Ptr{VecScatter{Complex128}}),arg1,arg2,arg3)
    return err
end

function DMDAGetNeighbors(arg1::DM{Complex128},arg2::Union{Ptr{Ptr{PetscMPIInt}},StridedArray{Ptr{PetscMPIInt}},Ptr{Ptr{PetscMPIInt}},Ref{Ptr{PetscMPIInt}}})
    err = ccall((:DMDAGetNeighbors,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Ptr{PetscMPIInt}}),arg1,arg2)
    return err
end

function DMDASetAOType(arg1::DM{Complex128},arg2::AOType)
    err = ccall((:DMDASetAOType,petscComplexDouble),PetscErrorCode,(DM{Complex128},AOType),arg1,arg2)
    return err
end

function DMDAGetAO(arg1::DM{Complex128},arg2::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:DMDAGetAO,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Cint}),arg1,arg2)
    return err
end

function DMDASetUniformCoordinates(arg1::DM{Complex128},arg2::Float64,arg3::Float64,arg4::Float64,arg5::Float64,arg6::Float64,arg7::Float64)
    err = ccall((:DMDASetUniformCoordinates,petscComplexDouble),PetscErrorCode,(DM{Complex128},Float64,Float64,Float64,Float64,Float64,Float64),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function DMDAGetCoordinateArray(arg1::DM{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDAGetCoordinateArray,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function DMDARestoreCoordinateArray(arg1::DM{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDARestoreCoordinateArray,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function DMDAGetBoundingBox(arg1::DM{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:DMDAGetBoundingBox,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function DMDAGetLocalBoundingBox(arg1::DM{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:DMDAGetLocalBoundingBox,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function DMDAGetLogicalCoordinate(arg1::DM{Complex128},arg2::Complex128,arg3::Complex128,arg4::Complex128,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg9::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg10::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}})
    err = ccall((:DMDAGetLogicalCoordinate,petscComplexDouble),PetscErrorCode,(DM{Complex128},Complex128,Complex128,Complex128,Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Complex128},Ptr{Complex128},Ptr{Complex128}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function DMDAMapCoordsToPeriodicDomain(arg1::DM{Complex128},arg2::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg3::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}})
    err = ccall((:DMDAMapCoordsToPeriodicDomain,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Complex128},Ptr{Complex128}),arg1,arg2,arg3)
    return err
end

function DMDAGetReducedDMDA(arg1::DM{Complex128},arg2::Integer,arg3::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:DMDAGetReducedDMDA,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Ptr{DM{Complex128}}),arg1,arg2,arg3)
    return err
end

function DMDASetFieldName(arg1::DM{Complex128},arg2::Integer,arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:DMDASetFieldName,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Cstring),arg1,arg2,arg3)
    return err
end

function DMDAGetFieldName(arg1::DM{Complex128},arg2::Integer,arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:DMDAGetFieldName,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Ptr{Ptr{UInt8}}),arg1,arg2,arg3)
    return err
end

function DMDASetFieldNames(arg1::DM{Complex128},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:DMDASetFieldNames,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function DMDAGetFieldNames(arg1::DM{Complex128},arg2::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}})
    err = ccall((:DMDAGetFieldNames,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Ptr{Ptr{UInt8}}}),arg1,arg2)
    return err
end

function DMDASetCoordinateName(arg1::DM{Complex128},arg2::Integer,arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:DMDASetCoordinateName,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Cstring),arg1,arg2,arg3)
    return err
end

function DMDAGetCoordinateName(arg1::DM{Complex128},arg2::Integer,arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:DMDAGetCoordinateName,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Ptr{Ptr{UInt8}}),arg1,arg2,arg3)
    return err
end

function DMDASetBoundaryType(arg1::DM{Complex128},arg2::DMBoundaryType,arg3::DMBoundaryType,arg4::DMBoundaryType)
    err = ccall((:DMDASetBoundaryType,petscComplexDouble),PetscErrorCode,(DM{Complex128},DMBoundaryType,DMBoundaryType,DMBoundaryType),arg1,arg2,arg3,arg4)
    return err
end

function DMDASetDof(arg1::DM{Complex128},arg2::Integer)
    err = ccall((:DMDASetDof,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64),arg1,arg2)
    return err
end

function DMDASetOverlap(arg1::DM{Complex128},arg2::Integer,arg3::Integer,arg4::Integer)
    err = ccall((:DMDASetOverlap,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Int64,Int64),arg1,arg2,arg3,arg4)
    return err
end

function DMDAGetOverlap(arg1::DM{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMDAGetOverlap,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function DMDASetNumLocalSubDomains(arg1::DM{Complex128},arg2::Integer)
    err = ccall((:DMDASetNumLocalSubDomains,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64),arg1,arg2)
    return err
end

function DMDAGetNumLocalSubDomains(arg1::DM{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMDAGetNumLocalSubDomains,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function DMDAGetOffset(arg1::DM{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMDAGetOffset,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function DMDASetOffset(arg1::DM{Complex128},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer)
    err = ccall((:DMDASetOffset,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Int64,Int64,Int64,Int64,Int64),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function DMDAGetNonOverlappingRegion(arg1::DM{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMDAGetNonOverlappingRegion,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function DMDASetNonOverlappingRegion(arg1::DM{Complex128},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer)
    err = ccall((:DMDASetNonOverlappingRegion,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Int64,Int64,Int64,Int64,Int64),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function DMDASetStencilWidth(arg1::DM{Complex128},arg2::Integer)
    err = ccall((:DMDASetStencilWidth,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64),arg1,arg2)
    return err
end

function DMDASetOwnershipRanges(arg1::DM{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMDASetOwnershipRanges,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function DMDAGetOwnershipRanges(arg1::DM{Complex128},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMDAGetOwnershipRanges,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4)
    return err
end

function DMDASetNumProcs(arg1::DM{Complex128},arg2::Integer,arg3::Integer,arg4::Integer)
    err = ccall((:DMDASetNumProcs,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Int64,Int64),arg1,arg2,arg3,arg4)
    return err
end

function DMDASetStencilType(arg1::DM{Complex128},arg2::DMDAStencilType)
    err = ccall((:DMDASetStencilType,petscComplexDouble),PetscErrorCode,(DM{Complex128},DMDAStencilType),arg1,arg2)
    return err
end

function DMDAVecGetArray(arg1::DM{Complex128},arg2::Vec{Complex128},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDAVecGetArray,petscComplexDouble),PetscErrorCode,(DM{Complex128},Vec{Complex128},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMDAVecRestoreArray(arg1::DM{Complex128},arg2::Vec{Complex128},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDAVecRestoreArray,petscComplexDouble),PetscErrorCode,(DM{Complex128},Vec{Complex128},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMDAVecGetArrayDOF(arg1::DM{Complex128},arg2::Vec{Complex128},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDAVecGetArrayDOF,petscComplexDouble),PetscErrorCode,(DM{Complex128},Vec{Complex128},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMDAVecRestoreArrayDOF(arg1::DM{Complex128},arg2::Vec{Complex128},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDAVecRestoreArrayDOF,petscComplexDouble),PetscErrorCode,(DM{Complex128},Vec{Complex128},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMDAVecGetArrayRead(arg1::DM{Complex128},arg2::Vec{Complex128},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDAVecGetArrayRead,petscComplexDouble),PetscErrorCode,(DM{Complex128},Vec{Complex128},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMDAVecRestoreArrayRead(arg1::DM{Complex128},arg2::Vec{Complex128},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDAVecRestoreArrayRead,petscComplexDouble),PetscErrorCode,(DM{Complex128},Vec{Complex128},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMDAVecGetArrayDOFRead(arg1::DM{Complex128},arg2::Vec{Complex128},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDAVecGetArrayDOFRead,petscComplexDouble),PetscErrorCode,(DM{Complex128},Vec{Complex128},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMDAVecRestoreArrayDOFRead(arg1::DM{Complex128},arg2::Vec{Complex128},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDAVecRestoreArrayDOFRead,petscComplexDouble),PetscErrorCode,(DM{Complex128},Vec{Complex128},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMDASplitComm2d(arg0::Type{Complex128},arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{MPI_Comm},StridedArray{MPI_Comm},Ptr{MPI_Comm},Ref{MPI_Comm}})
    err = ccall((:DMDASplitComm2d,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Ptr{comm_type}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMDACreatePatchIS(arg1::DM{Complex128},arg2::Union{Ptr{MatStencil},StridedArray{MatStencil},Ptr{MatStencil},Ref{MatStencil}},arg3::Union{Ptr{MatStencil},StridedArray{MatStencil},Ptr{MatStencil},Ref{MatStencil}},arg4::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:DMDACreatePatchIS,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{MatStencil},Ptr{MatStencil},Ptr{IS{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function DMDAGetLocalInfo(arg1::DM{Complex128},arg2::Union{Ptr{DMDALocalInfo},StridedArray{DMDALocalInfo},Ptr{DMDALocalInfo},Ref{DMDALocalInfo}})
    err = ccall((:DMDAGetLocalInfo,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{DMDALocalInfo}),arg1,arg2)
    return err
end

function MatRegisterDAAD(arg0::Type{Complex128})
    err = ccall((:MatRegisterDAAD,petscComplexDouble),PetscErrorCode,())
    return err
end

function MatCreateDAAD(arg1::DM{Complex128},arg2::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatCreateDAAD,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Mat{Complex128}}),arg1,arg2)
    return err
end

function MatCreateSeqUSFFT(arg1::Vec{Complex128},arg2::DM{Complex128},arg3::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatCreateSeqUSFFT,petscComplexDouble),PetscErrorCode,(Vec{Complex128},DM{Complex128},Ptr{Mat{Complex128}}),arg1,arg2,arg3)
    return err
end

function DMDASetGetMatrix(arg1::DM{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDASetGetMatrix,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function DMDASetBlockFills(arg1::DM{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMDASetBlockFills,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function DMDASetRefinementFactor(arg1::DM{Complex128},arg2::Integer,arg3::Integer,arg4::Integer)
    err = ccall((:DMDASetRefinementFactor,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Int64,Int64),arg1,arg2,arg3,arg4)
    return err
end

function DMDAGetRefinementFactor(arg1::DM{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMDAGetRefinementFactor,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function DMDAGetArray(arg1::DM{Complex128},arg2::PetscBool,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDAGetArray,petscComplexDouble),PetscErrorCode,(DM{Complex128},PetscBool,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMDARestoreArray(arg1::DM{Complex128},arg2::PetscBool,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDARestoreArray,petscComplexDouble),PetscErrorCode,(DM{Complex128},PetscBool,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMDACreatePF(arg1::DM{Complex128},arg2::Union{Ptr{PF{Complex128}},StridedArray{PF{Complex128}},Ptr{PF{Complex128}},Ref{PF{Complex128}}})
    err = ccall((:DMDACreatePF,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{PF{Complex128}}),arg1,arg2)
    return err
end

function DMDAGetNumCells(arg1::DM{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMDAGetNumCells,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMDAGetCellPoint(arg1::DM{Complex128},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMDAGetCellPoint,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Int64,Int64,Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMDAGetNumVertices(arg1::DM{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMDAGetNumVertices,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMDAGetNumFaces(arg1::DM{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMDAGetNumFaces,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function DMDAGetHeightStratum(arg1::DM{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMDAGetHeightStratum,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function DMDAGetDepthStratum(arg1::DM{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMDAGetDepthStratum,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function DMDACreateSection(arg1::DM{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{PetscSection{Complex128}},StridedArray{PetscSection{Complex128}},Ptr{PetscSection{Complex128}},Ref{PetscSection{Complex128}}})
    err = ccall((:DMDACreateSection,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{PetscSection{Complex128}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMDAComputeCellGeometryFEM(arg1::DM{Complex128},arg2::Integer,arg3::PetscQuadrature{Complex128},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg7::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:DMDAComputeCellGeometryFEM,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,PetscQuadrature{Complex128},Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function DMDAGetTransitiveClosure(arg1::DM{Complex128},arg2::Integer,arg3::PetscBool,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMDAGetTransitiveClosure,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,PetscBool,Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMDARestoreTransitiveClosure(arg1::DM{Complex128},arg2::Integer,arg3::PetscBool,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMDARestoreTransitiveClosure,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,PetscBool,Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMDAVecGetClosure(arg1::DM{Complex128},arg2::PetscSection{Complex128},arg3::Vec{Complex128},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Ptr{Complex128}},StridedArray{Ptr{Complex128}},Ptr{Ptr{Complex128}},Ref{Ptr{Complex128}}})
    err = ccall((:DMDAVecGetClosure,petscComplexDouble),PetscErrorCode,(DM{Complex128},PetscSection{Complex128},Vec{Complex128},Int64,Ptr{Int64},Ptr{Ptr{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMDAVecRestoreClosure(arg1::DM{Complex128},arg2::PetscSection{Complex128},arg3::Vec{Complex128},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Ptr{Complex128}},StridedArray{Ptr{Complex128}},Ptr{Ptr{Complex128}},Ref{Ptr{Complex128}}})
    err = ccall((:DMDAVecRestoreClosure,petscComplexDouble),PetscErrorCode,(DM{Complex128},PetscSection{Complex128},Vec{Complex128},Int64,Ptr{Int64},Ptr{Ptr{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMDAVecSetClosure(arg1::DM{Complex128},arg2::PetscSection{Complex128},arg3::Vec{Complex128},arg4::Integer,arg5::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg6::InsertMode)
    err = ccall((:DMDAVecSetClosure,petscComplexDouble),PetscErrorCode,(DM{Complex128},PetscSection{Complex128},Vec{Complex128},Int64,Ptr{Complex128},InsertMode),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMDAGetClosure(arg1::DM{Complex128},arg2::PetscSection{Complex128},arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMDAGetClosure,petscComplexDouble),PetscErrorCode,(DM{Complex128},PetscSection{Complex128},Int64,Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMDARestoreClosure(arg1::DM{Complex128},arg2::PetscSection{Complex128},arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMDARestoreClosure,petscComplexDouble),PetscErrorCode,(DM{Complex128},PetscSection{Complex128},Int64,Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMDAGetClosureScalar(arg1::DM{Complex128},arg2::PetscSection{Complex128},arg3::Integer,arg4::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Ptr{Complex128}},StridedArray{Ptr{Complex128}},Ptr{Ptr{Complex128}},Ref{Ptr{Complex128}}})
    err = ccall((:DMDAGetClosureScalar,petscComplexDouble),PetscErrorCode,(DM{Complex128},PetscSection{Complex128},Int64,Ptr{Complex128},Ptr{Int64},Ptr{Ptr{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMDARestoreClosureScalar(arg1::DM{Complex128},arg2::PetscSection{Complex128},arg3::Integer,arg4::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Ptr{Complex128}},StridedArray{Ptr{Complex128}},Ptr{Ptr{Complex128}},Ref{Ptr{Complex128}}})
    err = ccall((:DMDARestoreClosureScalar,petscComplexDouble),PetscErrorCode,(DM{Complex128},PetscSection{Complex128},Int64,Ptr{Complex128},Ptr{Int64},Ptr{Ptr{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMDASetClosureScalar(arg1::DM{Complex128},arg2::PetscSection{Complex128},arg3::Integer,arg4::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg5::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg6::InsertMode)
    err = ccall((:DMDASetClosureScalar,petscComplexDouble),PetscErrorCode,(DM{Complex128},PetscSection{Complex128},Int64,Ptr{Complex128},Ptr{Complex128},InsertMode),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMDAConvertToCell(arg1::DM{Complex128},arg2::MatStencil,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMDAConvertToCell,petscComplexDouble),PetscErrorCode,(DM{Complex128},MatStencil,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function DMDASetVertexCoordinates(arg1::DM{Complex128},arg2::Float64,arg3::Float64,arg4::Float64,arg5::Float64,arg6::Float64,arg7::Float64)
    err = ccall((:DMDASetVertexCoordinates,petscComplexDouble),PetscErrorCode,(DM{Complex128},Float64,Float64,Float64,Float64,Float64,Float64),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function DMDASetPreallocationCenterDimension(arg1::DM{Complex128},arg2::Integer)
    err = ccall((:DMDASetPreallocationCenterDimension,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64),arg1,arg2)
    return err
end

function DMDAGetPreallocationCenterDimension(arg1::DM{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMDAGetPreallocationCenterDimension,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function DMDAProjectFunction(arg1::DM{Complex128},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::InsertMode,arg5::Vec{Complex128})
    err = ccall((:DMDAProjectFunction,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Ptr{Void}},Ptr{Ptr{Void}},InsertMode,Vec{Complex128}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMDAProjectFunctionLocal(arg1::DM{Complex128},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::InsertMode,arg5::Vec{Complex128})
    err = ccall((:DMDAProjectFunctionLocal,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Ptr{Void}},Ptr{Ptr{Void}},InsertMode,Vec{Complex128}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMDAComputeL2Diff(arg1::DM{Complex128},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::Vec{Complex128},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:DMDAComputeL2Diff,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Ptr{Void}},Ptr{Ptr{Void}},Vec{Complex128},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMDAComputeL2GradientDiff(arg1::DM{Complex128},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::Vec{Complex128},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:DMDAComputeL2GradientDiff,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Ptr{Void}},Ptr{Ptr{Void}},Vec{Complex128},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMCompositeCreate(arg1::MPI_Comm,arg2::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:DMCompositeCreate,petscComplexDouble),PetscErrorCode,(comm_type,Ptr{DM{Complex128}}),arg1,arg2)
    return err
end

function DMCompositeAddDM(arg1::DM{Complex128},arg2::DM{Complex128})
    err = ccall((:DMCompositeAddDM,petscComplexDouble),PetscErrorCode,(DM{Complex128},DM{Complex128}),arg1,arg2)
    return err
end

function DMCompositeSetCoupling(arg1::DM{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMCompositeSetCoupling,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function DMCompositeAddVecScatter(arg1::DM{Complex128},arg2::VecScatter{Complex128})
    err = ccall((:DMCompositeAddVecScatter,petscComplexDouble),PetscErrorCode,(DM{Complex128},VecScatter{Complex128}),arg1,arg2)
    return err
end

function DMCompositeScatterArray(arg1::DM{Complex128},arg2::Vec{Complex128},arg3::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:DMCompositeScatterArray,petscComplexDouble),PetscErrorCode,(DM{Complex128},Vec{Complex128},Ptr{Vec{Complex128}}),arg1,arg2,arg3)
    return err
end

function DMCompositeGatherArray(arg1::DM{Complex128},arg2::Vec{Complex128},arg3::InsertMode,arg4::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:DMCompositeGatherArray,petscComplexDouble),PetscErrorCode,(DM{Complex128},Vec{Complex128},InsertMode,Ptr{Vec{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function DMCompositeGetNumberDM(arg1::DM{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMCompositeGetNumberDM,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function DMCompositeGetAccessArray(arg1::DM{Complex128},arg2::Vec{Complex128},arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:DMCompositeGetAccessArray,petscComplexDouble),PetscErrorCode,(DM{Complex128},Vec{Complex128},Int64,Ptr{Int64},Ptr{Vec{Complex128}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMCompositeRestoreAccessArray(arg1::DM{Complex128},arg2::Vec{Complex128},arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:DMCompositeRestoreAccessArray,petscComplexDouble),PetscErrorCode,(DM{Complex128},Vec{Complex128},Int64,Ptr{Int64},Ptr{Vec{Complex128}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMCompositeGetEntriesArray(arg1::DM{Complex128},arg2::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:DMCompositeGetEntriesArray,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{DM{Complex128}}),arg1,arg2)
    return err
end

function DMCompositeGetGlobalISs(arg1::DM{Complex128},arg2::Union{Ptr{Ptr{IS{Complex128}}},StridedArray{Ptr{IS{Complex128}}},Ptr{Ptr{IS{Complex128}}},Ref{Ptr{IS{Complex128}}}})
    err = ccall((:DMCompositeGetGlobalISs,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Ptr{IS{Complex128}}}),arg1,arg2)
    return err
end

function DMCompositeGetLocalISs(arg1::DM{Complex128},arg2::Union{Ptr{Ptr{IS{Complex128}}},StridedArray{Ptr{IS{Complex128}}},Ptr{Ptr{IS{Complex128}}},Ref{Ptr{IS{Complex128}}}})
    err = ccall((:DMCompositeGetLocalISs,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Ptr{IS{Complex128}}}),arg1,arg2)
    return err
end

function DMCompositeGetISLocalToGlobalMappings(arg1::DM{Complex128},arg2::Union{Ptr{Ptr{ISLocalToGlobalMapping{Complex128}}},StridedArray{Ptr{ISLocalToGlobalMapping{Complex128}}},Ptr{Ptr{ISLocalToGlobalMapping{Complex128}}},Ref{Ptr{ISLocalToGlobalMapping{Complex128}}}})
    err = ccall((:DMCompositeGetISLocalToGlobalMappings,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Ptr{ISLocalToGlobalMapping{Complex128}}}),arg1,arg2)
    return err
end

function DMPatchCreate(arg1::MPI_Comm,arg2::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:DMPatchCreate,petscComplexDouble),PetscErrorCode,(comm_type,Ptr{DM{Complex128}}),arg1,arg2)
    return err
end

function DMPatchZoom(arg1::DM{Complex128},arg2::Vec{Complex128},arg3::MatStencil,arg4::MatStencil,arg5::MPI_Comm,arg6::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}},arg7::Union{Ptr{PetscSF{Complex128}},StridedArray{PetscSF{Complex128}},Ptr{PetscSF{Complex128}},Ref{PetscSF{Complex128}}},arg8::Union{Ptr{PetscSF{Complex128}},StridedArray{PetscSF{Complex128}},Ptr{PetscSF{Complex128}},Ref{PetscSF{Complex128}}})
    err = ccall((:DMPatchZoom,petscComplexDouble),PetscErrorCode,(DM{Complex128},Vec{Complex128},MatStencil,MatStencil,comm_type,Ptr{DM{Complex128}},Ptr{PetscSF{Complex128}},Ptr{PetscSF{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function DMPatchSolve(arg1::DM{Complex128})
    err = ccall((:DMPatchSolve,petscComplexDouble),PetscErrorCode,(DM{Complex128},),arg1)
    return err
end

function DMPatchGetPatchSize(arg1::DM{Complex128},arg2::Union{Ptr{MatStencil},StridedArray{MatStencil},Ptr{MatStencil},Ref{MatStencil}})
    err = ccall((:DMPatchGetPatchSize,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{MatStencil}),arg1,arg2)
    return err
end

function DMPatchSetPatchSize(arg1::DM{Complex128},arg2::MatStencil)
    err = ccall((:DMPatchSetPatchSize,petscComplexDouble),PetscErrorCode,(DM{Complex128},MatStencil),arg1,arg2)
    return err
end

function DMPatchGetCommSize(arg1::DM{Complex128},arg2::Union{Ptr{MatStencil},StridedArray{MatStencil},Ptr{MatStencil},Ref{MatStencil}})
    err = ccall((:DMPatchGetCommSize,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{MatStencil}),arg1,arg2)
    return err
end

function DMPatchSetCommSize(arg1::DM{Complex128},arg2::MatStencil)
    err = ccall((:DMPatchSetCommSize,petscComplexDouble),PetscErrorCode,(DM{Complex128},MatStencil),arg1,arg2)
    return err
end

function DMPatchGetCoarse(arg1::DM{Complex128},arg2::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:DMPatchGetCoarse,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{DM{Complex128}}),arg1,arg2)
    return err
end

function DMPatchCreateGrid(arg1::MPI_Comm,arg2::Integer,arg3::MatStencil,arg4::MatStencil,arg5::MatStencil,arg6::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:DMPatchCreateGrid,petscComplexDouble),PetscErrorCode,(comm_type,Int64,MatStencil,MatStencil,MatStencil,Ptr{DM{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscLimiterCreate(arg1::MPI_Comm,arg2::Union{Ptr{PetscLimiter{Complex128}},StridedArray{PetscLimiter{Complex128}},Ptr{PetscLimiter{Complex128}},Ref{PetscLimiter{Complex128}}})
    err = ccall((:PetscLimiterCreate,petscComplexDouble),PetscErrorCode,(comm_type,Ptr{PetscLimiter{Complex128}}),arg1,arg2)
    return err
end

function PetscLimiterDestroy(arg1::Union{Ptr{PetscLimiter{Complex128}},StridedArray{PetscLimiter{Complex128}},Ptr{PetscLimiter{Complex128}},Ref{PetscLimiter{Complex128}}})
    err = ccall((:PetscLimiterDestroy,petscComplexDouble),PetscErrorCode,(Ptr{PetscLimiter{Complex128}},),arg1)
    return err
end

function PetscLimiterSetType(arg1::PetscLimiter{Complex128},arg2::PetscLimiterType)
    err = ccall((:PetscLimiterSetType,petscComplexDouble),PetscErrorCode,(PetscLimiter{Complex128},PetscLimiterType),arg1,arg2)
    return err
end

function PetscLimiterGetType(arg1::PetscLimiter{Complex128},arg2::Union{Ptr{PetscLimiterType},StridedArray{PetscLimiterType},Ptr{PetscLimiterType},Ref{PetscLimiterType}})
    err = ccall((:PetscLimiterGetType,petscComplexDouble),PetscErrorCode,(PetscLimiter{Complex128},Ptr{PetscLimiterType}),arg1,arg2)
    return err
end

function PetscLimiterSetUp(arg1::PetscLimiter{Complex128})
    err = ccall((:PetscLimiterSetUp,petscComplexDouble),PetscErrorCode,(PetscLimiter{Complex128},),arg1)
    return err
end

function PetscLimiterSetFromOptions(arg1::PetscLimiter{Complex128})
    err = ccall((:PetscLimiterSetFromOptions,petscComplexDouble),PetscErrorCode,(PetscLimiter{Complex128},),arg1)
    return err
end

function PetscLimiterRegister(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscLimiterRegister,petscComplexDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function PetscLimiterRegisterDestroy(arg0::Type{Complex128})
    err = ccall((:PetscLimiterRegisterDestroy,petscComplexDouble),PetscErrorCode,())
    return err
end

function PetscLimiterLimit(arg1::PetscLimiter{Complex128},arg2::Float64,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscLimiterLimit,petscComplexDouble),PetscErrorCode,(PetscLimiter{Complex128},Float64,Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function PetscFVInitializePackage(arg0::Type{Complex128})
    err = ccall((:PetscFVInitializePackage,petscComplexDouble),PetscErrorCode,())
    return err
end

function PetscFVCreate(arg1::MPI_Comm,arg2::Union{Ptr{PetscFV{Complex128}},StridedArray{PetscFV{Complex128}},Ptr{PetscFV{Complex128}},Ref{PetscFV{Complex128}}})
    err = ccall((:PetscFVCreate,petscComplexDouble),PetscErrorCode,(comm_type,Ptr{PetscFV{Complex128}}),arg1,arg2)
    return err
end

function PetscFVDestroy(arg1::Union{Ptr{PetscFV{Complex128}},StridedArray{PetscFV{Complex128}},Ptr{PetscFV{Complex128}},Ref{PetscFV{Complex128}}})
    err = ccall((:PetscFVDestroy,petscComplexDouble),PetscErrorCode,(Ptr{PetscFV{Complex128}},),arg1)
    return err
end

function PetscFVSetType(arg1::PetscFV{Complex128},arg2::PetscFVType)
    err = ccall((:PetscFVSetType,petscComplexDouble),PetscErrorCode,(PetscFV{Complex128},PetscFVType),arg1,arg2)
    return err
end

function PetscFVGetType(arg1::PetscFV{Complex128},arg2::Union{Ptr{PetscFVType},StridedArray{PetscFVType},Ptr{PetscFVType},Ref{PetscFVType}})
    err = ccall((:PetscFVGetType,petscComplexDouble),PetscErrorCode,(PetscFV{Complex128},Ptr{PetscFVType}),arg1,arg2)
    return err
end

function PetscFVSetUp(arg1::PetscFV{Complex128})
    err = ccall((:PetscFVSetUp,petscComplexDouble),PetscErrorCode,(PetscFV{Complex128},),arg1)
    return err
end

function PetscFVSetFromOptions(arg1::PetscFV{Complex128})
    err = ccall((:PetscFVSetFromOptions,petscComplexDouble),PetscErrorCode,(PetscFV{Complex128},),arg1)
    return err
end

function PetscFVRegister(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscFVRegister,petscComplexDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function PetscFVRegisterDestroy(arg0::Type{Complex128})
    err = ccall((:PetscFVRegisterDestroy,petscComplexDouble),PetscErrorCode,())
    return err
end

function PetscFVSetLimiter(arg1::PetscFV{Complex128},arg2::PetscLimiter{Complex128})
    err = ccall((:PetscFVSetLimiter,petscComplexDouble),PetscErrorCode,(PetscFV{Complex128},PetscLimiter{Complex128}),arg1,arg2)
    return err
end

function PetscFVGetLimiter(arg1::PetscFV{Complex128},arg2::Union{Ptr{PetscLimiter{Complex128}},StridedArray{PetscLimiter{Complex128}},Ptr{PetscLimiter{Complex128}},Ref{PetscLimiter{Complex128}}})
    err = ccall((:PetscFVGetLimiter,petscComplexDouble),PetscErrorCode,(PetscFV{Complex128},Ptr{PetscLimiter{Complex128}}),arg1,arg2)
    return err
end

function PetscFVSetNumComponents(arg1::PetscFV{Complex128},arg2::Integer)
    err = ccall((:PetscFVSetNumComponents,petscComplexDouble),PetscErrorCode,(PetscFV{Complex128},Int64),arg1,arg2)
    return err
end

function PetscFVGetNumComponents(arg1::PetscFV{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscFVGetNumComponents,petscComplexDouble),PetscErrorCode,(PetscFV{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscFVSetSpatialDimension(arg1::PetscFV{Complex128},arg2::Integer)
    err = ccall((:PetscFVSetSpatialDimension,petscComplexDouble),PetscErrorCode,(PetscFV{Complex128},Int64),arg1,arg2)
    return err
end

function PetscFVGetSpatialDimension(arg1::PetscFV{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscFVGetSpatialDimension,petscComplexDouble),PetscErrorCode,(PetscFV{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscFVSetComputeGradients(arg1::PetscFV{Complex128},arg2::PetscBool)
    err = ccall((:PetscFVSetComputeGradients,petscComplexDouble),PetscErrorCode,(PetscFV{Complex128},PetscBool),arg1,arg2)
    return err
end

function PetscFVGetComputeGradients(arg1::PetscFV{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscFVGetComputeGradients,petscComplexDouble),PetscErrorCode,(PetscFV{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscFVSetQuadrature(arg1::PetscFV{Complex128},arg2::PetscQuadrature{Complex128})
    err = ccall((:PetscFVSetQuadrature,petscComplexDouble),PetscErrorCode,(PetscFV{Complex128},PetscQuadrature{Complex128}),arg1,arg2)
    return err
end

function PetscFVGetQuadrature(arg1::PetscFV{Complex128},arg2::Union{Ptr{PetscQuadrature{Complex128}},StridedArray{PetscQuadrature{Complex128}},Ptr{PetscQuadrature{Complex128}},Ref{PetscQuadrature{Complex128}}})
    err = ccall((:PetscFVGetQuadrature,petscComplexDouble),PetscErrorCode,(PetscFV{Complex128},Ptr{PetscQuadrature{Complex128}}),arg1,arg2)
    return err
end

function PetscFVSetDualSpace(arg1::PetscFV{Complex128},arg2::PetscDualSpace{Complex128})
    err = ccall((:PetscFVSetDualSpace,petscComplexDouble),PetscErrorCode,(PetscFV{Complex128},PetscDualSpace{Complex128}),arg1,arg2)
    return err
end

function PetscFVGetDualSpace(arg1::PetscFV{Complex128},arg2::Union{Ptr{PetscDualSpace{Complex128}},StridedArray{PetscDualSpace{Complex128}},Ptr{PetscDualSpace{Complex128}},Ref{PetscDualSpace{Complex128}}})
    err = ccall((:PetscFVGetDualSpace,petscComplexDouble),PetscErrorCode,(PetscFV{Complex128},Ptr{PetscDualSpace{Complex128}}),arg1,arg2)
    return err
end

function PetscFVRefine(arg1::PetscFV{Complex128},arg2::Union{Ptr{PetscFV{Complex128}},StridedArray{PetscFV{Complex128}},Ptr{PetscFV{Complex128}},Ref{PetscFV{Complex128}}})
    err = ccall((:PetscFVRefine,petscComplexDouble),PetscErrorCode,(PetscFV{Complex128},Ptr{PetscFV{Complex128}}),arg1,arg2)
    return err
end

function PetscFVGetDefaultTabulation(arg1::PetscFV{Complex128},arg2::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg3::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg4::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:PetscFVGetDefaultTabulation,petscComplexDouble),PetscErrorCode,(PetscFV{Complex128},Ptr{Ptr{Float64}},Ptr{Ptr{Float64}},Ptr{Ptr{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscFVGetTabulation(arg1::PetscFV{Complex128},arg2::Integer,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg5::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg6::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:PetscFVGetTabulation,petscComplexDouble),PetscErrorCode,(PetscFV{Complex128},Int64,Ptr{Float64},Ptr{Ptr{Float64}},Ptr{Ptr{Float64}},Ptr{Ptr{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscFVRestoreTabulation(arg1::PetscFV{Complex128},arg2::Integer,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg5::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg6::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:PetscFVRestoreTabulation,petscComplexDouble),PetscErrorCode,(PetscFV{Complex128},Int64,Ptr{Float64},Ptr{Ptr{Float64}},Ptr{Ptr{Float64}},Ptr{Ptr{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscFVComputeGradient(arg1::PetscFV{Complex128},arg2::Integer,arg3::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg4::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}})
    err = ccall((:PetscFVComputeGradient,petscComplexDouble),PetscErrorCode,(PetscFV{Complex128},Int64,Ptr{Complex128},Ptr{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function PetscFVIntegrateRHSFunction(arg1::PetscFV{Complex128},arg2::PetscDS{Complex128},arg3::Integer,arg4::Integer,arg5::Union{Ptr{PetscFVFaceGeom},StridedArray{PetscFVFaceGeom},Ptr{PetscFVFaceGeom},Ref{PetscFVFaceGeom}},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg7::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg8::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg9::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg10::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}})
    err = ccall((:PetscFVIntegrateRHSFunction,petscComplexDouble),PetscErrorCode,(PetscFV{Complex128},PetscDS{Complex128},Int64,Int64,Ptr{PetscFVFaceGeom},Ptr{Float64},Ptr{Complex128},Ptr{Complex128},Ptr{Complex128},Ptr{Complex128}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function PetscFVLeastSquaresSetMaxFaces(arg1::PetscFV{Complex128},arg2::Integer)
    err = ccall((:PetscFVLeastSquaresSetMaxFaces,petscComplexDouble),PetscErrorCode,(PetscFV{Complex128},Int64),arg1,arg2)
    return err
end

function PetscPartitionerCreate(arg1::MPI_Comm,arg2::Union{Ptr{PetscPartitioner{Complex128}},StridedArray{PetscPartitioner{Complex128}},Ptr{PetscPartitioner{Complex128}},Ref{PetscPartitioner{Complex128}}})
    err = ccall((:PetscPartitionerCreate,petscComplexDouble),PetscErrorCode,(comm_type,Ptr{PetscPartitioner{Complex128}}),arg1,arg2)
    return err
end

function PetscPartitionerDestroy(arg1::Union{Ptr{PetscPartitioner{Complex128}},StridedArray{PetscPartitioner{Complex128}},Ptr{PetscPartitioner{Complex128}},Ref{PetscPartitioner{Complex128}}})
    err = ccall((:PetscPartitionerDestroy,petscComplexDouble),PetscErrorCode,(Ptr{PetscPartitioner{Complex128}},),arg1)
    return err
end

function PetscPartitionerSetType(arg1::PetscPartitioner{Complex128},arg2::PetscPartitionerType)
    err = ccall((:PetscPartitionerSetType,petscComplexDouble),PetscErrorCode,(PetscPartitioner{Complex128},PetscPartitionerType),arg1,arg2)
    return err
end

function PetscPartitionerGetType(arg1::PetscPartitioner{Complex128},arg2::Union{Ptr{PetscPartitionerType},StridedArray{PetscPartitionerType},Ptr{PetscPartitionerType},Ref{PetscPartitionerType}})
    err = ccall((:PetscPartitionerGetType,petscComplexDouble),PetscErrorCode,(PetscPartitioner{Complex128},Ptr{PetscPartitionerType}),arg1,arg2)
    return err
end

function PetscPartitionerSetUp(arg1::PetscPartitioner{Complex128})
    err = ccall((:PetscPartitionerSetUp,petscComplexDouble),PetscErrorCode,(PetscPartitioner{Complex128},),arg1)
    return err
end

function PetscPartitionerSetFromOptions(arg1::PetscPartitioner{Complex128})
    err = ccall((:PetscPartitionerSetFromOptions,petscComplexDouble),PetscErrorCode,(PetscPartitioner{Complex128},),arg1)
    return err
end

function PetscPartitionerRegister(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscPartitionerRegister,petscComplexDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function PetscPartitionerRegisterDestroy(arg0::Type{Complex128})
    err = ccall((:PetscPartitionerRegisterDestroy,petscComplexDouble),PetscErrorCode,())
    return err
end

function PetscPartitionerPartition(arg1::PetscPartitioner{Complex128},arg2::DM{Complex128},arg3::PetscSection{Complex128},arg4::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:PetscPartitionerPartition,petscComplexDouble),PetscErrorCode,(PetscPartitioner{Complex128},DM{Complex128},PetscSection{Complex128},Ptr{IS{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscPartitionerShellSetPartition(arg1::PetscPartitioner{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscPartitionerShellSetPartition,petscComplexDouble),PetscErrorCode,(PetscPartitioner{Complex128},Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexCreate(arg1::MPI_Comm,arg2::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:DMPlexCreate,petscComplexDouble),PetscErrorCode,(comm_type,Ptr{DM{Complex128}}),arg1,arg2)
    return err
end

function DMPlexCreateCohesiveSubmesh(arg1::DM{Complex128},arg2::PetscBool,arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Integer,arg5::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:DMPlexCreateCohesiveSubmesh,petscComplexDouble),PetscErrorCode,(DM{Complex128},PetscBool,Cstring,Int64,Ptr{DM{Complex128}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexCreateFromCellList(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::PetscBool,arg7::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}},arg8::Integer,arg9::Union{Ptr{Cdouble},StridedArray{Cdouble},Ptr{Cdouble},Ref{Cdouble}},arg10::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:DMPlexCreateFromCellList,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,PetscBool,Ptr{Cint},Int64,Ptr{Cdouble},Ptr{DM{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function DMPlexCreateFromDAG(arg1::DM{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}})
    err = ccall((:DMPlexCreateFromDAG,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Complex128}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function DMPlexCreateReferenceCell(arg1::MPI_Comm,arg2::Integer,arg3::PetscBool,arg4::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:DMPlexCreateReferenceCell,petscComplexDouble),PetscErrorCode,(comm_type,Int64,PetscBool,Ptr{DM{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexGetChart(arg1::DM{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetChart,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function DMPlexSetChart(arg1::DM{Complex128},arg2::Integer,arg3::Integer)
    err = ccall((:DMPlexSetChart,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Int64),arg1,arg2,arg3)
    return err
end

function DMPlexGetConeSize(arg1::DM{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetConeSize,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function DMPlexSetConeSize(arg1::DM{Complex128},arg2::Integer,arg3::Integer)
    err = ccall((:DMPlexSetConeSize,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Int64),arg1,arg2,arg3)
    return err
end

function DMPlexAddConeSize(arg1::DM{Complex128},arg2::Integer,arg3::Integer)
    err = ccall((:DMPlexAddConeSize,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Int64),arg1,arg2,arg3)
    return err
end

function DMPlexGetCone(arg1::DM{Complex128},arg2::Integer,arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMPlexGetCone,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Ptr{Ptr{Int64}}),arg1,arg2,arg3)
    return err
end

function DMPlexSetCone(arg1::DM{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexSetCone,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function DMPlexInsertCone(arg1::DM{Complex128},arg2::Integer,arg3::Integer,arg4::Integer)
    err = ccall((:DMPlexInsertCone,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Int64,Int64),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexInsertConeOrientation(arg1::DM{Complex128},arg2::Integer,arg3::Integer,arg4::Integer)
    err = ccall((:DMPlexInsertConeOrientation,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Int64,Int64),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexGetConeOrientation(arg1::DM{Complex128},arg2::Integer,arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMPlexGetConeOrientation,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Ptr{Ptr{Int64}}),arg1,arg2,arg3)
    return err
end

function DMPlexSetConeOrientation(arg1::DM{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexSetConeOrientation,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function DMPlexGetSupportSize(arg1::DM{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetSupportSize,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function DMPlexSetSupportSize(arg1::DM{Complex128},arg2::Integer,arg3::Integer)
    err = ccall((:DMPlexSetSupportSize,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Int64),arg1,arg2,arg3)
    return err
end

function DMPlexGetSupport(arg1::DM{Complex128},arg2::Integer,arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMPlexGetSupport,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Ptr{Ptr{Int64}}),arg1,arg2,arg3)
    return err
end

function DMPlexSetSupport(arg1::DM{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexSetSupport,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function DMPlexInsertSupport(arg1::DM{Complex128},arg2::Integer,arg3::Integer,arg4::Integer)
    err = ccall((:DMPlexInsertSupport,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Int64,Int64),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexGetConeSection(arg1::DM{Complex128},arg2::Union{Ptr{PetscSection{Complex128}},StridedArray{PetscSection{Complex128}},Ptr{PetscSection{Complex128}},Ref{PetscSection{Complex128}}})
    err = ccall((:DMPlexGetConeSection,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{PetscSection{Complex128}}),arg1,arg2)
    return err
end

function DMPlexGetSupportSection(arg1::DM{Complex128},arg2::Union{Ptr{PetscSection{Complex128}},StridedArray{PetscSection{Complex128}},Ptr{PetscSection{Complex128}},Ref{PetscSection{Complex128}}})
    err = ccall((:DMPlexGetSupportSection,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{PetscSection{Complex128}}),arg1,arg2)
    return err
end

function DMPlexGetCones(arg1::DM{Complex128},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMPlexGetCones,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function DMPlexGetConeOrientations(arg1::DM{Complex128},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMPlexGetConeOrientations,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function DMPlexGetMaxSizes(arg1::DM{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetMaxSizes,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function DMPlexSymmetrize(arg1::DM{Complex128})
    err = ccall((:DMPlexSymmetrize,petscComplexDouble),PetscErrorCode,(DM{Complex128},),arg1)
    return err
end

function DMPlexStratify(arg1::DM{Complex128})
    err = ccall((:DMPlexStratify,petscComplexDouble),PetscErrorCode,(DM{Complex128},),arg1)
    return err
end

function DMPlexEqual(arg1::DM{Complex128},arg2::DM{Complex128},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:DMPlexEqual,petscComplexDouble),PetscErrorCode,(DM{Complex128},DM{Complex128},Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function DMPlexReverseCell(arg1::DM{Complex128},arg2::Integer)
    err = ccall((:DMPlexReverseCell,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64),arg1,arg2)
    return err
end

function DMPlexOrient(arg1::DM{Complex128})
    err = ccall((:DMPlexOrient,petscComplexDouble),PetscErrorCode,(DM{Complex128},),arg1)
    return err
end

function DMPlexInterpolate(arg1::DM{Complex128},arg2::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:DMPlexInterpolate,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{DM{Complex128}}),arg1,arg2)
    return err
end

function DMPlexUninterpolate(arg1::DM{Complex128},arg2::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:DMPlexUninterpolate,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{DM{Complex128}}),arg1,arg2)
    return err
end

function DMPlexLoad(arg1::PetscViewer{Complex128},arg2::DM{Complex128})
    err = ccall((:DMPlexLoad,petscComplexDouble),PetscErrorCode,(PetscViewer{Complex128},DM{Complex128}),arg1,arg2)
    return err
end

function DMPlexPreallocateOperator(arg1::DM{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Mat{Complex128},arg8::PetscBool)
    err = ccall((:DMPlexPreallocateOperator,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Mat{Complex128},PetscBool),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function DMPlexGetPointLocal(arg1::DM{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetPointLocal,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexPointLocalRead(arg1::DM{Complex128},arg2::Integer,arg3::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMPlexPointLocalRead,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Ptr{Complex128},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexPointLocalRef(arg1::DM{Complex128},arg2::Integer,arg3::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMPlexPointLocalRef,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Ptr{Complex128},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexGetPointLocalField(arg1::DM{Complex128},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetPointLocalField,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexPointLocalFieldRef(arg1::DM{Complex128},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMPlexPointLocalFieldRef,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Int64,Ptr{Complex128},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexPointLocalFieldRead(arg1::DM{Complex128},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMPlexPointLocalFieldRead,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Int64,Ptr{Complex128},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexGetPointGlobal(arg1::DM{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetPointGlobal,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexPointGlobalRead(arg1::DM{Complex128},arg2::Integer,arg3::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMPlexPointGlobalRead,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Ptr{Complex128},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexPointGlobalRef(arg1::DM{Complex128},arg2::Integer,arg3::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMPlexPointGlobalRef,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Ptr{Complex128},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexGetPointGlobalField(arg1::DM{Complex128},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetPointGlobalField,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexPointGlobalFieldRef(arg1::DM{Complex128},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMPlexPointGlobalFieldRef,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Int64,Ptr{Complex128},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexPointGlobalFieldRead(arg1::DM{Complex128},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMPlexPointGlobalFieldRead,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Int64,Ptr{Complex128},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMLabelCreate(arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{DMLabel{Complex128}},StridedArray{DMLabel{Complex128}},Ptr{DMLabel{Complex128}},Ref{DMLabel{Complex128}}})
    err = ccall((:DMLabelCreate,petscComplexDouble),PetscErrorCode,(Cstring,Ptr{DMLabel{Complex128}}),arg1,arg2)
    return err
end

function DMLabelView(arg1::DMLabel{Complex128},arg2::PetscViewer{Complex128})
    err = ccall((:DMLabelView,petscComplexDouble),PetscErrorCode,(DMLabel{Complex128},PetscViewer{Complex128}),arg1,arg2)
    return err
end

function DMLabelDestroy(arg1::Union{Ptr{DMLabel{Complex128}},StridedArray{DMLabel{Complex128}},Ptr{DMLabel{Complex128}},Ref{DMLabel{Complex128}}})
    err = ccall((:DMLabelDestroy,petscComplexDouble),PetscErrorCode,(Ptr{DMLabel{Complex128}},),arg1)
    return err
end

function DMLabelDuplicate(arg1::DMLabel{Complex128},arg2::Union{Ptr{DMLabel{Complex128}},StridedArray{DMLabel{Complex128}},Ptr{DMLabel{Complex128}},Ref{DMLabel{Complex128}}})
    err = ccall((:DMLabelDuplicate,petscComplexDouble),PetscErrorCode,(DMLabel{Complex128},Ptr{DMLabel{Complex128}}),arg1,arg2)
    return err
end

function DMLabelGetName(arg1::DMLabel{Complex128},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:DMLabelGetName,petscComplexDouble),PetscErrorCode,(DMLabel{Complex128},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function DMLabelGetValue(arg1::DMLabel{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMLabelGetValue,petscComplexDouble),PetscErrorCode,(DMLabel{Complex128},Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function DMLabelSetValue(arg1::DMLabel{Complex128},arg2::Integer,arg3::Integer)
    err = ccall((:DMLabelSetValue,petscComplexDouble),PetscErrorCode,(DMLabel{Complex128},Int64,Int64),arg1,arg2,arg3)
    return err
end

function DMLabelClearValue(arg1::DMLabel{Complex128},arg2::Integer,arg3::Integer)
    err = ccall((:DMLabelClearValue,petscComplexDouble),PetscErrorCode,(DMLabel{Complex128},Int64,Int64),arg1,arg2,arg3)
    return err
end

function DMLabelInsertIS(arg1::DMLabel{Complex128},arg2::IS{Complex128},arg3::Integer)
    err = ccall((:DMLabelInsertIS,petscComplexDouble),PetscErrorCode,(DMLabel{Complex128},IS{Complex128},Int64),arg1,arg2,arg3)
    return err
end

function DMLabelGetNumValues(arg1::DMLabel{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMLabelGetNumValues,petscComplexDouble),PetscErrorCode,(DMLabel{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function DMLabelGetStratumBounds(arg1::DMLabel{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMLabelGetStratumBounds,petscComplexDouble),PetscErrorCode,(DMLabel{Complex128},Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function DMLabelGetValueIS(arg1::DMLabel{Complex128},arg2::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:DMLabelGetValueIS,petscComplexDouble),PetscErrorCode,(DMLabel{Complex128},Ptr{IS{Complex128}}),arg1,arg2)
    return err
end

function DMLabelStratumHasPoint(arg1::DMLabel{Complex128},arg2::Integer,arg3::Integer,arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:DMLabelStratumHasPoint,petscComplexDouble),PetscErrorCode,(DMLabel{Complex128},Int64,Int64,Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function DMLabelGetStratumSize(arg1::DMLabel{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMLabelGetStratumSize,petscComplexDouble),PetscErrorCode,(DMLabel{Complex128},Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function DMLabelGetStratumIS(arg1::DMLabel{Complex128},arg2::Integer,arg3::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:DMLabelGetStratumIS,petscComplexDouble),PetscErrorCode,(DMLabel{Complex128},Int64,Ptr{IS{Complex128}}),arg1,arg2,arg3)
    return err
end

function DMLabelClearStratum(arg1::DMLabel{Complex128},arg2::Integer)
    err = ccall((:DMLabelClearStratum,petscComplexDouble),PetscErrorCode,(DMLabel{Complex128},Int64),arg1,arg2)
    return err
end

function DMLabelCreateIndex(arg1::DMLabel{Complex128},arg2::Integer,arg3::Integer)
    err = ccall((:DMLabelCreateIndex,petscComplexDouble),PetscErrorCode,(DMLabel{Complex128},Int64,Int64),arg1,arg2,arg3)
    return err
end

function DMLabelDestroyIndex(arg1::DMLabel{Complex128})
    err = ccall((:DMLabelDestroyIndex,petscComplexDouble),PetscErrorCode,(DMLabel{Complex128},),arg1)
    return err
end

function DMLabelHasValue(arg1::DMLabel{Complex128},arg2::Integer,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:DMLabelHasValue,petscComplexDouble),PetscErrorCode,(DMLabel{Complex128},Int64,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function DMLabelHasPoint(arg1::DMLabel{Complex128},arg2::Integer,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:DMLabelHasPoint,petscComplexDouble),PetscErrorCode,(DMLabel{Complex128},Int64,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function DMLabelFilter(arg1::DMLabel{Complex128},arg2::Integer,arg3::Integer)
    err = ccall((:DMLabelFilter,petscComplexDouble),PetscErrorCode,(DMLabel{Complex128},Int64,Int64),arg1,arg2,arg3)
    return err
end

function DMLabelPermute(arg1::DMLabel{Complex128},arg2::IS{Complex128},arg3::Union{Ptr{DMLabel{Complex128}},StridedArray{DMLabel{Complex128}},Ptr{DMLabel{Complex128}},Ref{DMLabel{Complex128}}})
    err = ccall((:DMLabelPermute,petscComplexDouble),PetscErrorCode,(DMLabel{Complex128},IS{Complex128},Ptr{DMLabel{Complex128}}),arg1,arg2,arg3)
    return err
end

function DMLabelDistribute(arg1::DMLabel{Complex128},arg2::PetscSF{Complex128},arg3::Union{Ptr{DMLabel{Complex128}},StridedArray{DMLabel{Complex128}},Ptr{DMLabel{Complex128}},Ref{DMLabel{Complex128}}})
    err = ccall((:DMLabelDistribute,petscComplexDouble),PetscErrorCode,(DMLabel{Complex128},PetscSF{Complex128},Ptr{DMLabel{Complex128}}),arg1,arg2,arg3)
    return err
end

function DMPlexCreateLabel(arg1::DM{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:DMPlexCreateLabel,petscComplexDouble),PetscErrorCode,(DM{Complex128},Cstring),arg1,arg2)
    return err
end

function DMPlexGetLabelValue(arg1::DM{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetLabelValue,petscComplexDouble),PetscErrorCode,(DM{Complex128},Cstring,Int64,Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexSetLabelValue(arg1::DM{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer,arg4::Integer)
    err = ccall((:DMPlexSetLabelValue,petscComplexDouble),PetscErrorCode,(DM{Complex128},Cstring,Int64,Int64),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexClearLabelValue(arg1::DM{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer,arg4::Integer)
    err = ccall((:DMPlexClearLabelValue,petscComplexDouble),PetscErrorCode,(DM{Complex128},Cstring,Int64,Int64),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexGetLabelSize(arg1::DM{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetLabelSize,petscComplexDouble),PetscErrorCode,(DM{Complex128},Cstring,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function DMPlexGetLabelIdIS(arg1::DM{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:DMPlexGetLabelIdIS,petscComplexDouble),PetscErrorCode,(DM{Complex128},Cstring,Ptr{IS{Complex128}}),arg1,arg2,arg3)
    return err
end

function DMPlexGetStratumSize(arg1::DM{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetStratumSize,petscComplexDouble),PetscErrorCode,(DM{Complex128},Cstring,Int64,Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexGetStratumIS(arg1::DM{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer,arg4::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:DMPlexGetStratumIS,petscComplexDouble),PetscErrorCode,(DM{Complex128},Cstring,Int64,Ptr{IS{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexClearLabelStratum(arg1::DM{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer)
    err = ccall((:DMPlexClearLabelStratum,petscComplexDouble),PetscErrorCode,(DM{Complex128},Cstring,Int64),arg1,arg2,arg3)
    return err
end

function DMPlexGetLabelOutput(arg1::DM{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:DMPlexGetLabelOutput,petscComplexDouble),PetscErrorCode,(DM{Complex128},Cstring,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function DMPlexSetLabelOutput(arg1::DM{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::PetscBool)
    err = ccall((:DMPlexSetLabelOutput,petscComplexDouble),PetscErrorCode,(DM{Complex128},Cstring,PetscBool),arg1,arg2,arg3)
    return err
end

function PetscSectionCreateGlobalSectionLabel(arg1::PetscSection{Complex128},arg2::PetscSF{Complex128},arg3::PetscBool,arg4::DMLabel{Complex128},arg5::Integer,arg6::Union{Ptr{PetscSection{Complex128}},StridedArray{PetscSection{Complex128}},Ptr{PetscSection{Complex128}},Ref{PetscSection{Complex128}}})
    err = ccall((:PetscSectionCreateGlobalSectionLabel,petscComplexDouble),PetscErrorCode,(PetscSection{Complex128},PetscSF{Complex128},PetscBool,DMLabel{Complex128},Int64,Ptr{PetscSection{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMPlexGetNumLabels(arg1::DM{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetNumLabels,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function DMPlexGetLabelName(arg1::DM{Complex128},arg2::Integer,arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:DMPlexGetLabelName,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Ptr{Ptr{UInt8}}),arg1,arg2,arg3)
    return err
end

function DMPlexHasLabel(arg1::DM{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:DMPlexHasLabel,petscComplexDouble),PetscErrorCode,(DM{Complex128},Cstring,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function DMPlexGetLabel(arg1::DM{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{DMLabel{Complex128}},StridedArray{DMLabel{Complex128}},Ptr{DMLabel{Complex128}},Ref{DMLabel{Complex128}}})
    err = ccall((:DMPlexGetLabel,petscComplexDouble),PetscErrorCode,(DM{Complex128},Cstring,Ptr{DMLabel{Complex128}}),arg1,arg2,arg3)
    return err
end

function DMPlexGetLabelByNum(arg1::DM{Complex128},arg2::Integer,arg3::Union{Ptr{DMLabel{Complex128}},StridedArray{DMLabel{Complex128}},Ptr{DMLabel{Complex128}},Ref{DMLabel{Complex128}}})
    err = ccall((:DMPlexGetLabelByNum,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Ptr{DMLabel{Complex128}}),arg1,arg2,arg3)
    return err
end

function DMPlexAddLabel(arg1::DM{Complex128},arg2::DMLabel{Complex128})
    err = ccall((:DMPlexAddLabel,petscComplexDouble),PetscErrorCode,(DM{Complex128},DMLabel{Complex128}),arg1,arg2)
    return err
end

function DMPlexRemoveLabel(arg1::DM{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{DMLabel{Complex128}},StridedArray{DMLabel{Complex128}},Ptr{DMLabel{Complex128}},Ref{DMLabel{Complex128}}})
    err = ccall((:DMPlexRemoveLabel,petscComplexDouble),PetscErrorCode,(DM{Complex128},Cstring,Ptr{DMLabel{Complex128}}),arg1,arg2,arg3)
    return err
end

function DMPlexGetCellNumbering(arg1::DM{Complex128},arg2::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:DMPlexGetCellNumbering,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{IS{Complex128}}),arg1,arg2)
    return err
end

function DMPlexGetVertexNumbering(arg1::DM{Complex128},arg2::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:DMPlexGetVertexNumbering,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{IS{Complex128}}),arg1,arg2)
    return err
end

function DMPlexCreatePointNumbering(arg1::DM{Complex128},arg2::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:DMPlexCreatePointNumbering,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{IS{Complex128}}),arg1,arg2)
    return err
end

function DMPlexGetDepth(arg1::DM{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetDepth,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function DMPlexGetDepthLabel(arg1::DM{Complex128},arg2::Union{Ptr{DMLabel{Complex128}},StridedArray{DMLabel{Complex128}},Ptr{DMLabel{Complex128}},Ref{DMLabel{Complex128}}})
    err = ccall((:DMPlexGetDepthLabel,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{DMLabel{Complex128}}),arg1,arg2)
    return err
end

function DMPlexGetDepthStratum(arg1::DM{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetDepthStratum,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexGetHeightStratum(arg1::DM{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetHeightStratum,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexGetMeet(arg1::DM{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMPlexGetMeet,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Ptr{Int64},Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexGetFullMeet(arg1::DM{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMPlexGetFullMeet,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Ptr{Int64},Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexRestoreMeet(arg1::DM{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMPlexRestoreMeet,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Ptr{Int64},Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexGetJoin(arg1::DM{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMPlexGetJoin,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Ptr{Int64},Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexGetFullJoin(arg1::DM{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMPlexGetFullJoin,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Ptr{Int64},Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexRestoreJoin(arg1::DM{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMPlexRestoreJoin,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Ptr{Int64},Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexGetTransitiveClosure(arg1::DM{Complex128},arg2::Integer,arg3::PetscBool,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMPlexGetTransitiveClosure,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,PetscBool,Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexRestoreTransitiveClosure(arg1::DM{Complex128},arg2::Integer,arg3::PetscBool,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMPlexRestoreTransitiveClosure,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,PetscBool,Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexGenerate(arg1::DM{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::PetscBool,arg4::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:DMPlexGenerate,petscComplexDouble),PetscErrorCode,(DM{Complex128},Cstring,PetscBool,Ptr{DM{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexCopyCoordinates(arg1::DM{Complex128},arg2::DM{Complex128})
    err = ccall((:DMPlexCopyCoordinates,petscComplexDouble),PetscErrorCode,(DM{Complex128},DM{Complex128}),arg1,arg2)
    return err
end

function DMPlexCopyLabels(arg1::DM{Complex128},arg2::DM{Complex128})
    err = ccall((:DMPlexCopyLabels,petscComplexDouble),PetscErrorCode,(DM{Complex128},DM{Complex128}),arg1,arg2)
    return err
end

function DMPlexCreateDoublet(arg1::MPI_Comm,arg2::Integer,arg3::PetscBool,arg4::PetscBool,arg5::PetscBool,arg6::Float64,arg7::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:DMPlexCreateDoublet,petscComplexDouble),PetscErrorCode,(comm_type,Int64,PetscBool,PetscBool,PetscBool,Float64,Ptr{DM{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function DMPlexCreateSquareBoundary(arg1::DM{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexCreateSquareBoundary,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Float64},Ptr{Float64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexCreateCubeBoundary(arg1::DM{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexCreateCubeBoundary,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Float64},Ptr{Float64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexCreateSquareMesh(arg1::DM{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::DMBoundaryType,arg6::DMBoundaryType)
    err = ccall((:DMPlexCreateSquareMesh,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Float64},Ptr{Float64},Ptr{Int64},DMBoundaryType,DMBoundaryType),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMPlexCreateBoxMesh(arg1::MPI_Comm,arg2::Integer,arg3::PetscBool,arg4::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:DMPlexCreateBoxMesh,petscComplexDouble),PetscErrorCode,(comm_type,Int64,PetscBool,Ptr{DM{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexCreateHexBoxMesh(arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::DMBoundaryType,arg5::DMBoundaryType,arg6::DMBoundaryType,arg7::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:DMPlexCreateHexBoxMesh,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Ptr{Int64},DMBoundaryType,DMBoundaryType,DMBoundaryType,Ptr{DM{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function DMPlexCreateConeSection(arg1::DM{Complex128},arg2::Union{Ptr{PetscSection{Complex128}},StridedArray{PetscSection{Complex128}},Ptr{PetscSection{Complex128}},Ref{PetscSection{Complex128}}})
    err = ccall((:DMPlexCreateConeSection,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{PetscSection{Complex128}}),arg1,arg2)
    return err
end

function DMPlexInvertCell(arg0::Type{Complex128},arg1::Integer,arg2::Integer,arg3::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:DMPlexInvertCell,petscComplexDouble),PetscErrorCode,(Int64,Int64,Ptr{Cint}),arg1,arg2,arg3)
    return err
end

function DMPlexLocalizeCoordinate(arg1::DM{Complex128},arg2::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg3::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}})
    err = ccall((:DMPlexLocalizeCoordinate,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Complex128},Ptr{Complex128}),arg1,arg2,arg3)
    return err
end

function DMPlexLocalizeCoordinates(arg1::DM{Complex128})
    err = ccall((:DMPlexLocalizeCoordinates,petscComplexDouble),PetscErrorCode,(DM{Complex128},),arg1)
    return err
end

function DMPlexCheckSymmetry(arg1::DM{Complex128})
    err = ccall((:DMPlexCheckSymmetry,petscComplexDouble),PetscErrorCode,(DM{Complex128},),arg1)
    return err
end

function DMPlexCheckSkeleton(arg1::DM{Complex128},arg2::PetscBool,arg3::Integer)
    err = ccall((:DMPlexCheckSkeleton,petscComplexDouble),PetscErrorCode,(DM{Complex128},PetscBool,Int64),arg1,arg2,arg3)
    return err
end

function DMPlexCheckFaces(arg1::DM{Complex128},arg2::PetscBool,arg3::Integer)
    err = ccall((:DMPlexCheckFaces,petscComplexDouble),PetscErrorCode,(DM{Complex128},PetscBool,Int64),arg1,arg2,arg3)
    return err
end

function DMPlexTriangleSetOptions(arg1::DM{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:DMPlexTriangleSetOptions,petscComplexDouble),PetscErrorCode,(DM{Complex128},Cstring),arg1,arg2)
    return err
end

function DMPlexTetgenSetOptions(arg1::DM{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:DMPlexTetgenSetOptions,petscComplexDouble),PetscErrorCode,(DM{Complex128},Cstring),arg1,arg2)
    return err
end

function DMPlexCreateNeighborCSR(arg1::DM{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMPlexCreateNeighborCSR,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexGetPartitioner(arg1::DM{Complex128},arg2::Union{Ptr{PetscPartitioner{Complex128}},StridedArray{PetscPartitioner{Complex128}},Ptr{PetscPartitioner{Complex128}},Ref{PetscPartitioner{Complex128}}})
    err = ccall((:DMPlexGetPartitioner,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{PetscPartitioner{Complex128}}),arg1,arg2)
    return err
end

function DMPlexSetPartitioner(arg1::DM{Complex128},arg2::PetscPartitioner{Complex128})
    err = ccall((:DMPlexSetPartitioner,petscComplexDouble),PetscErrorCode,(DM{Complex128},PetscPartitioner{Complex128}),arg1,arg2)
    return err
end

function DMPlexCreatePartition(arg1::DM{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer,arg4::PetscBool,arg5::Union{Ptr{PetscSection{Complex128}},StridedArray{PetscSection{Complex128}},Ptr{PetscSection{Complex128}},Ref{PetscSection{Complex128}}},arg6::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}},arg7::Union{Ptr{PetscSection{Complex128}},StridedArray{PetscSection{Complex128}},Ptr{PetscSection{Complex128}},Ref{PetscSection{Complex128}}},arg8::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:DMPlexCreatePartition,petscComplexDouble),PetscErrorCode,(DM{Complex128},Cstring,Int64,PetscBool,Ptr{PetscSection{Complex128}},Ptr{IS{Complex128}},Ptr{PetscSection{Complex128}},Ptr{IS{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function DMPlexCreatePartitionerGraph(arg1::DM{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMPlexCreatePartitionerGraph,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexCreatePartitionClosure(arg1::DM{Complex128},arg2::PetscSection{Complex128},arg3::IS{Complex128},arg4::Union{Ptr{PetscSection{Complex128}},StridedArray{PetscSection{Complex128}},Ptr{PetscSection{Complex128}},Ref{PetscSection{Complex128}}},arg5::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:DMPlexCreatePartitionClosure,petscComplexDouble),PetscErrorCode,(DM{Complex128},PetscSection{Complex128},IS{Complex128},Ptr{PetscSection{Complex128}},Ptr{IS{Complex128}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexPartitionLabelInvert(arg1::DM{Complex128},arg2::DMLabel{Complex128},arg3::PetscSF{Complex128},arg4::DMLabel{Complex128})
    err = ccall((:DMPlexPartitionLabelInvert,petscComplexDouble),PetscErrorCode,(DM{Complex128},DMLabel{Complex128},PetscSF{Complex128},DMLabel{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexPartitionLabelClosure(arg1::DM{Complex128},arg2::DMLabel{Complex128})
    err = ccall((:DMPlexPartitionLabelClosure,petscComplexDouble),PetscErrorCode,(DM{Complex128},DMLabel{Complex128}),arg1,arg2)
    return err
end

function DMPlexPartitionLabelAdjacency(arg1::DM{Complex128},arg2::DMLabel{Complex128})
    err = ccall((:DMPlexPartitionLabelAdjacency,petscComplexDouble),PetscErrorCode,(DM{Complex128},DMLabel{Complex128}),arg1,arg2)
    return err
end

function DMPlexPartitionLabelCreateSF(arg1::DM{Complex128},arg2::DMLabel{Complex128},arg3::Union{Ptr{PetscSF{Complex128}},StridedArray{PetscSF{Complex128}},Ptr{PetscSF{Complex128}},Ref{PetscSF{Complex128}}})
    err = ccall((:DMPlexPartitionLabelCreateSF,petscComplexDouble),PetscErrorCode,(DM{Complex128},DMLabel{Complex128},Ptr{PetscSF{Complex128}}),arg1,arg2,arg3)
    return err
end

function DMPlexDistribute(arg1::DM{Complex128},arg2::Integer,arg3::Union{Ptr{PetscSF{Complex128}},StridedArray{PetscSF{Complex128}},Ptr{PetscSF{Complex128}},Ref{PetscSF{Complex128}}},arg4::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:DMPlexDistribute,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Ptr{PetscSF{Complex128}},Ptr{DM{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexDistributeOverlap(arg1::DM{Complex128},arg2::Integer,arg3::Union{Ptr{PetscSF{Complex128}},StridedArray{PetscSF{Complex128}},Ptr{PetscSF{Complex128}},Ref{PetscSF{Complex128}}},arg4::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:DMPlexDistributeOverlap,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Ptr{PetscSF{Complex128}},Ptr{DM{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexDistributeField(arg1::DM{Complex128},arg2::PetscSF{Complex128},arg3::PetscSection{Complex128},arg4::Vec{Complex128},arg5::PetscSection{Complex128},arg6::Vec{Complex128})
    err = ccall((:DMPlexDistributeField,petscComplexDouble),PetscErrorCode,(DM{Complex128},PetscSF{Complex128},PetscSection{Complex128},Vec{Complex128},PetscSection{Complex128},Vec{Complex128}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMPlexDistributeFieldIS(arg1::DM{Complex128},arg2::PetscSF{Complex128},arg3::PetscSection{Complex128},arg4::IS{Complex128},arg5::PetscSection{Complex128},arg6::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:DMPlexDistributeFieldIS,petscComplexDouble),PetscErrorCode,(DM{Complex128},PetscSF{Complex128},PetscSection{Complex128},IS{Complex128},PetscSection{Complex128},Ptr{IS{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

#= skipping function with undefined symbols: 
 function DMPlexDistributeData(arg1::DM{Complex128},arg2::PetscSF{Complex128},arg3::PetscSection{Complex128},arg4::MPI_Datatype,arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg6::PetscSection{Complex128},arg7::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    ccall((:DMPlexDistributeData,petscComplexDouble),PetscErrorCode,(DM{Complex128},PetscSF{Complex128},PetscSection{Complex128},MPI_Datatype,Ptr{Void},PetscSection{Complex128},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end 
=#
function DMPlexMigrate(arg1::DM{Complex128},arg2::PetscSF{Complex128},arg3::DM{Complex128})
    err = ccall((:DMPlexMigrate,petscComplexDouble),PetscErrorCode,(DM{Complex128},PetscSF{Complex128},DM{Complex128}),arg1,arg2,arg3)
    return err
end

function DMPlexSetAdjacencyUseCone(arg1::DM{Complex128},arg2::PetscBool)
    err = ccall((:DMPlexSetAdjacencyUseCone,petscComplexDouble),PetscErrorCode,(DM{Complex128},PetscBool),arg1,arg2)
    return err
end

function DMPlexGetAdjacencyUseCone(arg1::DM{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:DMPlexGetAdjacencyUseCone,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function DMPlexSetAdjacencyUseClosure(arg1::DM{Complex128},arg2::PetscBool)
    err = ccall((:DMPlexSetAdjacencyUseClosure,petscComplexDouble),PetscErrorCode,(DM{Complex128},PetscBool),arg1,arg2)
    return err
end

function DMPlexGetAdjacencyUseClosure(arg1::DM{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:DMPlexGetAdjacencyUseClosure,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function DMPlexSetAdjacencyUseAnchors(arg1::DM{Complex128},arg2::PetscBool)
    err = ccall((:DMPlexSetAdjacencyUseAnchors,petscComplexDouble),PetscErrorCode,(DM{Complex128},PetscBool),arg1,arg2)
    return err
end

function DMPlexGetAdjacencyUseAnchors(arg1::DM{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:DMPlexGetAdjacencyUseAnchors,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function DMPlexGetAdjacency(arg1::DM{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMPlexGetAdjacency,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexGetOrdering(arg1::DM{Complex128},arg2::MatOrderingType,arg3::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:DMPlexGetOrdering,petscComplexDouble),PetscErrorCode,(DM{Complex128},MatOrderingType,Ptr{IS{Complex128}}),arg1,arg2,arg3)
    return err
end

function DMPlexPermute(arg1::DM{Complex128},arg2::IS{Complex128},arg3::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:DMPlexPermute,petscComplexDouble),PetscErrorCode,(DM{Complex128},IS{Complex128},Ptr{DM{Complex128}}),arg1,arg2,arg3)
    return err
end

function DMPlexCreateProcessSF(arg1::DM{Complex128},arg2::PetscSF{Complex128},arg3::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}},arg4::Union{Ptr{PetscSF{Complex128}},StridedArray{PetscSF{Complex128}},Ptr{PetscSF{Complex128}},Ref{PetscSF{Complex128}}})
    err = ccall((:DMPlexCreateProcessSF,petscComplexDouble),PetscErrorCode,(DM{Complex128},PetscSF{Complex128},Ptr{IS{Complex128}},Ptr{PetscSF{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexCreateTwoSidedProcessSF(arg1::DM{Complex128},arg2::PetscSF{Complex128},arg3::PetscSection{Complex128},arg4::IS{Complex128},arg5::PetscSection{Complex128},arg6::IS{Complex128},arg7::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}},arg8::Union{Ptr{PetscSF{Complex128}},StridedArray{PetscSF{Complex128}},Ptr{PetscSF{Complex128}},Ref{PetscSF{Complex128}}})
    err = ccall((:DMPlexCreateTwoSidedProcessSF,petscComplexDouble),PetscErrorCode,(DM{Complex128},PetscSF{Complex128},PetscSection{Complex128},IS{Complex128},PetscSection{Complex128},IS{Complex128},Ptr{IS{Complex128}},Ptr{PetscSF{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function DMPlexDistributeOwnership(arg1::DM{Complex128},arg2::PetscSection{Complex128},arg3::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}},arg4::PetscSection{Complex128},arg5::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:DMPlexDistributeOwnership,petscComplexDouble),PetscErrorCode,(DM{Complex128},PetscSection{Complex128},Ptr{IS{Complex128}},PetscSection{Complex128},Ptr{IS{Complex128}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexCreateOverlap(arg1::DM{Complex128},arg2::Integer,arg3::PetscSection{Complex128},arg4::IS{Complex128},arg5::PetscSection{Complex128},arg6::IS{Complex128},arg7::Union{Ptr{DMLabel{Complex128}},StridedArray{DMLabel{Complex128}},Ptr{DMLabel{Complex128}},Ref{DMLabel{Complex128}}})
    err = ccall((:DMPlexCreateOverlap,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,PetscSection{Complex128},IS{Complex128},PetscSection{Complex128},IS{Complex128},Ptr{DMLabel{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function DMPlexCreateOverlapMigrationSF(arg1::DM{Complex128},arg2::PetscSF{Complex128},arg3::Union{Ptr{PetscSF{Complex128}},StridedArray{PetscSF{Complex128}},Ptr{PetscSF{Complex128}},Ref{PetscSF{Complex128}}})
    err = ccall((:DMPlexCreateOverlapMigrationSF,petscComplexDouble),PetscErrorCode,(DM{Complex128},PetscSF{Complex128},Ptr{PetscSF{Complex128}}),arg1,arg2,arg3)
    return err
end

function DMPlexStratifyMigrationSF(arg1::DM{Complex128},arg2::PetscSF{Complex128},arg3::Union{Ptr{PetscSF{Complex128}},StridedArray{PetscSF{Complex128}},Ptr{PetscSF{Complex128}},Ref{PetscSF{Complex128}}})
    err = ccall((:DMPlexStratifyMigrationSF,petscComplexDouble),PetscErrorCode,(DM{Complex128},PetscSF{Complex128},Ptr{PetscSF{Complex128}}),arg1,arg2,arg3)
    return err
end

function DMPlexCreateSubmesh(arg1::DM{Complex128},arg2::DMLabel{Complex128},arg3::Integer,arg4::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:DMPlexCreateSubmesh,petscComplexDouble),PetscErrorCode,(DM{Complex128},DMLabel{Complex128},Int64,Ptr{DM{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexCreateHybridMesh(arg1::DM{Complex128},arg2::DMLabel{Complex128},arg3::Union{Ptr{DMLabel{Complex128}},StridedArray{DMLabel{Complex128}},Ptr{DMLabel{Complex128}},Ref{DMLabel{Complex128}}},arg4::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:DMPlexCreateHybridMesh,petscComplexDouble),PetscErrorCode,(DM{Complex128},DMLabel{Complex128},Ptr{DMLabel{Complex128}},Ptr{DM{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexGetSubpointMap(arg1::DM{Complex128},arg2::Union{Ptr{DMLabel{Complex128}},StridedArray{DMLabel{Complex128}},Ptr{DMLabel{Complex128}},Ref{DMLabel{Complex128}}})
    err = ccall((:DMPlexGetSubpointMap,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{DMLabel{Complex128}}),arg1,arg2)
    return err
end

function DMPlexSetSubpointMap(arg1::DM{Complex128},arg2::DMLabel{Complex128})
    err = ccall((:DMPlexSetSubpointMap,petscComplexDouble),PetscErrorCode,(DM{Complex128},DMLabel{Complex128}),arg1,arg2)
    return err
end

function DMPlexCreateSubpointIS(arg1::DM{Complex128},arg2::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:DMPlexCreateSubpointIS,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{IS{Complex128}}),arg1,arg2)
    return err
end

function DMPlexMarkBoundaryFaces(arg1::DM{Complex128},arg2::DMLabel{Complex128})
    err = ccall((:DMPlexMarkBoundaryFaces,petscComplexDouble),PetscErrorCode,(DM{Complex128},DMLabel{Complex128}),arg1,arg2)
    return err
end

function DMPlexLabelComplete(arg1::DM{Complex128},arg2::DMLabel{Complex128})
    err = ccall((:DMPlexLabelComplete,petscComplexDouble),PetscErrorCode,(DM{Complex128},DMLabel{Complex128}),arg1,arg2)
    return err
end

function DMPlexLabelCohesiveComplete(arg1::DM{Complex128},arg2::DMLabel{Complex128},arg3::DMLabel{Complex128},arg4::PetscBool,arg5::DM{Complex128})
    err = ccall((:DMPlexLabelCohesiveComplete,petscComplexDouble),PetscErrorCode,(DM{Complex128},DMLabel{Complex128},DMLabel{Complex128},PetscBool,DM{Complex128}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexLabelAddCells(arg1::DM{Complex128},arg2::DMLabel{Complex128})
    err = ccall((:DMPlexLabelAddCells,petscComplexDouble),PetscErrorCode,(DM{Complex128},DMLabel{Complex128}),arg1,arg2)
    return err
end

function DMPlexGetRefinementLimit(arg1::DM{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:DMPlexGetRefinementLimit,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Float64}),arg1,arg2)
    return err
end

function DMPlexSetRefinementLimit(arg1::DM{Complex128},arg2::Float64)
    err = ccall((:DMPlexSetRefinementLimit,petscComplexDouble),PetscErrorCode,(DM{Complex128},Float64),arg1,arg2)
    return err
end

function DMPlexGetRefinementUniform(arg1::DM{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:DMPlexGetRefinementUniform,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function DMPlexSetRefinementUniform(arg1::DM{Complex128},arg2::PetscBool)
    err = ccall((:DMPlexSetRefinementUniform,petscComplexDouble),PetscErrorCode,(DM{Complex128},PetscBool),arg1,arg2)
    return err
end

function DMPlexGetCoarseDM(arg1::DM{Complex128},arg2::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:DMPlexGetCoarseDM,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{DM{Complex128}}),arg1,arg2)
    return err
end

function DMPlexSetCoarseDM(arg1::DM{Complex128},arg2::DM{Complex128})
    err = ccall((:DMPlexSetCoarseDM,petscComplexDouble),PetscErrorCode,(DM{Complex128},DM{Complex128}),arg1,arg2)
    return err
end

function DMPlexCreateCoarsePointIS(arg1::DM{Complex128},arg2::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:DMPlexCreateCoarsePointIS,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{IS{Complex128}}),arg1,arg2)
    return err
end

function DMPlexGetNumFaceVertices(arg1::DM{Complex128},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetNumFaceVertices,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Int64,Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexGetOrientedFace(arg1::DM{Complex128},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg9::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:DMPlexGetOrientedFace,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Int64,Ptr{Int64},Int64,Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
    return err
end

function DMPlexGetMinRadius(arg1::DM{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:DMPlexGetMinRadius,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Float64}),arg1,arg2)
    return err
end

function DMPlexSetMinRadius(arg1::DM{Complex128},arg2::Float64)
    err = ccall((:DMPlexSetMinRadius,petscComplexDouble),PetscErrorCode,(DM{Complex128},Float64),arg1,arg2)
    return err
end

function DMPlexComputeCellGeometryFVM(arg1::DM{Complex128},arg2::Integer,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:DMPlexComputeCellGeometryFVM,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Ptr{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexComputeGeometryFVM(arg1::DM{Complex128},arg2::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}},arg3::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:DMPlexComputeGeometryFVM,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Vec{Complex128}},Ptr{Vec{Complex128}}),arg1,arg2,arg3)
    return err
end

function DMPlexComputeGradientFVM(arg1::DM{Complex128},arg2::PetscFV{Complex128},arg3::Vec{Complex128},arg4::Vec{Complex128},arg5::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:DMPlexComputeGradientFVM,petscComplexDouble),PetscErrorCode,(DM{Complex128},PetscFV{Complex128},Vec{Complex128},Vec{Complex128},Ptr{DM{Complex128}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexInsertBoundaryValues(arg1::DM{Complex128},arg2::Vec{Complex128},arg3::Float64,arg4::Vec{Complex128},arg5::Vec{Complex128},arg6::Vec{Complex128})
    err = ccall((:DMPlexInsertBoundaryValues,petscComplexDouble),PetscErrorCode,(DM{Complex128},Vec{Complex128},Float64,Vec{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMPlexCreateSection(arg1::DM{Complex128},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Integer,arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}},arg9::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}},arg10::IS{Complex128},arg11::Union{Ptr{PetscSection{Complex128}},StridedArray{PetscSection{Complex128}},Ptr{PetscSection{Complex128}},Ref{PetscSection{Complex128}}})
    err = ccall((:DMPlexCreateSection,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Int64,Ptr{Int64},Ptr{Int64},Int64,Ptr{Int64},Ptr{IS{Complex128}},Ptr{IS{Complex128}},IS{Complex128},Ptr{PetscSection{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11)
    return err
end

function DMPlexComputeCellGeometryAffineFEM(arg1::DM{Complex128},arg2::Integer,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:DMPlexComputeCellGeometryAffineFEM,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMPlexComputeCellGeometryFEM(arg1::DM{Complex128},arg2::Integer,arg3::PetscFE{Complex128},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg7::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:DMPlexComputeCellGeometryFEM,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,PetscFE{Complex128},Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function DMPlexComputeGeometryFEM(arg1::DM{Complex128},arg2::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:DMPlexComputeGeometryFEM,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Vec{Complex128}}),arg1,arg2)
    return err
end

function DMPlexVecGetClosure(arg1::DM{Complex128},arg2::PetscSection{Complex128},arg3::Vec{Complex128},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Ptr{Complex128}},StridedArray{Ptr{Complex128}},Ptr{Ptr{Complex128}},Ref{Ptr{Complex128}}})
    err = ccall((:DMPlexVecGetClosure,petscComplexDouble),PetscErrorCode,(DM{Complex128},PetscSection{Complex128},Vec{Complex128},Int64,Ptr{Int64},Ptr{Ptr{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMPlexVecRestoreClosure(arg1::DM{Complex128},arg2::PetscSection{Complex128},arg3::Vec{Complex128},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Ptr{Complex128}},StridedArray{Ptr{Complex128}},Ptr{Ptr{Complex128}},Ref{Ptr{Complex128}}})
    err = ccall((:DMPlexVecRestoreClosure,petscComplexDouble),PetscErrorCode,(DM{Complex128},PetscSection{Complex128},Vec{Complex128},Int64,Ptr{Int64},Ptr{Ptr{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMPlexVecSetClosure(arg1::DM{Complex128},arg2::PetscSection{Complex128},arg3::Vec{Complex128},arg4::Integer,arg5::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg6::InsertMode)
    err = ccall((:DMPlexVecSetClosure,petscComplexDouble),PetscErrorCode,(DM{Complex128},PetscSection{Complex128},Vec{Complex128},Int64,Ptr{Complex128},InsertMode),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMPlexMatSetClosure(arg1::DM{Complex128},arg2::PetscSection{Complex128},arg3::PetscSection{Complex128},arg4::Mat{Complex128},arg5::Integer,arg6::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg7::InsertMode)
    err = ccall((:DMPlexMatSetClosure,petscComplexDouble),PetscErrorCode,(DM{Complex128},PetscSection{Complex128},PetscSection{Complex128},Mat{Complex128},Int64,Ptr{Complex128},InsertMode),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function DMPlexMatSetClosureRefined(arg1::DM{Complex128},arg2::PetscSection{Complex128},arg3::PetscSection{Complex128},arg4::DM{Complex128},arg5::PetscSection{Complex128},arg6::PetscSection{Complex128},arg7::Mat{Complex128},arg8::Integer,arg9::Union{Ptr{Complex128},StridedArray{Complex128},Ptr{Complex128},Ref{Complex128}},arg10::InsertMode)
    err = ccall((:DMPlexMatSetClosureRefined,petscComplexDouble),PetscErrorCode,(DM{Complex128},PetscSection{Complex128},PetscSection{Complex128},DM{Complex128},PetscSection{Complex128},PetscSection{Complex128},Mat{Complex128},Int64,Ptr{Complex128},InsertMode),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function DMPlexMatGetClosureIndicesRefined(arg1::DM{Complex128},arg2::PetscSection{Complex128},arg3::PetscSection{Complex128},arg4::DM{Complex128},arg5::PetscSection{Complex128},arg6::PetscSection{Complex128},arg7::Integer,arg8::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg9::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexMatGetClosureIndicesRefined,petscComplexDouble),PetscErrorCode,(DM{Complex128},PetscSection{Complex128},PetscSection{Complex128},DM{Complex128},PetscSection{Complex128},PetscSection{Complex128},Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
    return err
end

function DMPlexCreateClosureIndex(arg1::DM{Complex128},arg2::PetscSection{Complex128})
    err = ccall((:DMPlexCreateClosureIndex,petscComplexDouble),PetscErrorCode,(DM{Complex128},PetscSection{Complex128}),arg1,arg2)
    return err
end

function DMPlexCreateFromFile(arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::PetscBool,arg4::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:DMPlexCreateFromFile,petscComplexDouble),PetscErrorCode,(comm_type,Cstring,PetscBool,Ptr{DM{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexCreateExodus(arg1::MPI_Comm,arg2::Integer,arg3::PetscBool,arg4::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:DMPlexCreateExodus,petscComplexDouble),PetscErrorCode,(comm_type,Int64,PetscBool,Ptr{DM{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexCreateExodusFromFile(arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::PetscBool,arg4::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:DMPlexCreateExodusFromFile,petscComplexDouble),PetscErrorCode,(comm_type,Cstring,PetscBool,Ptr{DM{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexCreateCGNS(arg1::MPI_Comm,arg2::Integer,arg3::PetscBool,arg4::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:DMPlexCreateCGNS,petscComplexDouble),PetscErrorCode,(comm_type,Int64,PetscBool,Ptr{DM{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexCreateCGNSFromFile(arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::PetscBool,arg4::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:DMPlexCreateCGNSFromFile,petscComplexDouble),PetscErrorCode,(comm_type,Cstring,PetscBool,Ptr{DM{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexCreateGmsh(arg1::MPI_Comm,arg2::PetscViewer{Complex128},arg3::PetscBool,arg4::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:DMPlexCreateGmsh,petscComplexDouble),PetscErrorCode,(comm_type,PetscViewer{Complex128},PetscBool,Ptr{DM{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexCreateGmshFromFile(arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::PetscBool,arg4::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:DMPlexCreateGmshFromFile,petscComplexDouble),PetscErrorCode,(comm_type,Cstring,PetscBool,Ptr{DM{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexCreateFluent(arg1::MPI_Comm,arg2::PetscViewer{Complex128},arg3::PetscBool,arg4::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:DMPlexCreateFluent,petscComplexDouble),PetscErrorCode,(comm_type,PetscViewer{Complex128},PetscBool,Ptr{DM{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexCreateFluentFromFile(arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::PetscBool,arg4::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:DMPlexCreateFluentFromFile,petscComplexDouble),PetscErrorCode,(comm_type,Cstring,PetscBool,Ptr{DM{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexConstructGhostCells(arg1::DM{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:DMPlexConstructGhostCells,petscComplexDouble),PetscErrorCode,(DM{Complex128},Cstring,Ptr{Int64},Ptr{DM{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexConstructCohesiveCells(arg1::DM{Complex128},arg2::DMLabel{Complex128},arg3::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:DMPlexConstructCohesiveCells,petscComplexDouble),PetscErrorCode,(DM{Complex128},DMLabel{Complex128},Ptr{DM{Complex128}}),arg1,arg2,arg3)
    return err
end

function DMPlexGetHybridBounds(arg1::DM{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetHybridBounds,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexSetHybridBounds(arg1::DM{Complex128},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer)
    err = ccall((:DMPlexSetHybridBounds,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Int64,Int64,Int64),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexGetVTKCellHeight(arg1::DM{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetVTKCellHeight,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function DMPlexSetVTKCellHeight(arg1::DM{Complex128},arg2::Integer)
    err = ccall((:DMPlexSetVTKCellHeight,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64),arg1,arg2)
    return err
end

function DMPlexVTKWriteAll(arg1::PetscObject{Complex128},arg2::PetscViewer{Complex128})
    err = ccall((:DMPlexVTKWriteAll,petscComplexDouble),PetscErrorCode,(PetscObject{Complex128},PetscViewer{Complex128}),arg1,arg2)
    return err
end

function DMPlexGetScale(arg1::DM{Complex128},arg2::PetscUnit,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:DMPlexGetScale,petscComplexDouble),PetscErrorCode,(DM{Complex128},PetscUnit,Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function DMPlexSetScale(arg1::DM{Complex128},arg2::PetscUnit,arg3::Float64)
    err = ccall((:DMPlexSetScale,petscComplexDouble),PetscErrorCode,(DM{Complex128},PetscUnit,Float64),arg1,arg2,arg3)
    return err
end

function DMPlexAddBoundary(arg1::DM{Complex128},arg2::PetscBool,arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Integer,arg6::Integer,arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg9::Integer,arg10::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg11::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMPlexAddBoundary,petscComplexDouble),PetscErrorCode,(DM{Complex128},PetscBool,Cstring,Cstring,Int64,Int64,Ptr{Int64},Ptr{Void},Int64,Ptr{Int64},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11)
    return err
end

function DMPlexGetNumBoundary(arg1::DM{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetNumBoundary,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function DMPlexGetBoundary(arg1::DM{Complex128},arg2::Integer,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg4::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg5::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg9::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg10::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg11::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg12::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:DMPlexGetBoundary,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Ptr{PetscBool},Ptr{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ptr{Int64},Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Void}},Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12)
    return err
end

function DMPlexIsBoundaryPoint(arg1::DM{Complex128},arg2::Integer,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:DMPlexIsBoundaryPoint,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function DMPlexCopyBoundary(arg1::DM{Complex128},arg2::DM{Complex128})
    err = ccall((:DMPlexCopyBoundary,petscComplexDouble),PetscErrorCode,(DM{Complex128},DM{Complex128}),arg1,arg2)
    return err
end

function DMPlexInsertBoundaryValuesFEM(arg1::DM{Complex128},arg2::Vec{Complex128})
    err = ccall((:DMPlexInsertBoundaryValuesFEM,petscComplexDouble),PetscErrorCode,(DM{Complex128},Vec{Complex128}),arg1,arg2)
    return err
end

function DMPlexSetMaxProjectionHeight(arg1::DM{Complex128},arg2::Integer)
    err = ccall((:DMPlexSetMaxProjectionHeight,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64),arg1,arg2)
    return err
end

function DMPlexGetMaxProjectionHeight(arg1::DM{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetMaxProjectionHeight,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function DMPlexProjectFunction(arg1::DM{Complex128},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::InsertMode,arg5::Vec{Complex128})
    err = ccall((:DMPlexProjectFunction,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Ptr{Void}},Ptr{Ptr{Void}},InsertMode,Vec{Complex128}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexProjectFunctionLocal(arg1::DM{Complex128},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::InsertMode,arg5::Vec{Complex128})
    err = ccall((:DMPlexProjectFunctionLocal,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Ptr{Void}},Ptr{Ptr{Void}},InsertMode,Vec{Complex128}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexProjectFieldLocal(arg1::DM{Complex128},arg2::Vec{Complex128},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::InsertMode,arg5::Vec{Complex128})
    err = ccall((:DMPlexProjectFieldLocal,petscComplexDouble),PetscErrorCode,(DM{Complex128},Vec{Complex128},Ptr{Ptr{Void}},InsertMode,Vec{Complex128}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexComputeL2Diff(arg1::DM{Complex128},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::Vec{Complex128},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:DMPlexComputeL2Diff,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Ptr{Void}},Ptr{Ptr{Void}},Vec{Complex128},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexComputeL2GradientDiff(arg1::DM{Complex128},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::Vec{Complex128},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:DMPlexComputeL2GradientDiff,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Ptr{Void}},Ptr{Ptr{Void}},Vec{Complex128},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMPlexComputeL2FieldDiff(arg1::DM{Complex128},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::Vec{Complex128},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:DMPlexComputeL2FieldDiff,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Ptr{Void}},Ptr{Ptr{Void}},Vec{Complex128},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexComputeIntegralFEM(arg1::DM{Complex128},arg2::Vec{Complex128},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMPlexComputeIntegralFEM,petscComplexDouble),PetscErrorCode,(DM{Complex128},Vec{Complex128},Ptr{Float64},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexComputeInterpolatorFEM(arg1::DM{Complex128},arg2::DM{Complex128},arg3::Mat{Complex128},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMPlexComputeInterpolatorFEM,petscComplexDouble),PetscErrorCode,(DM{Complex128},DM{Complex128},Mat{Complex128},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexComputeInjectorFEM(arg1::DM{Complex128},arg2::DM{Complex128},arg3::Union{Ptr{VecScatter{Complex128}},StridedArray{VecScatter{Complex128}},Ptr{VecScatter{Complex128}},Ref{VecScatter{Complex128}}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMPlexComputeInjectorFEM,petscComplexDouble),PetscErrorCode,(DM{Complex128},DM{Complex128},Ptr{VecScatter{Complex128}},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexCreateRigidBody(arg1::DM{Complex128},arg2::Union{Ptr{MatNullSpace{Complex128}},StridedArray{MatNullSpace{Complex128}},Ptr{MatNullSpace{Complex128}},Ref{MatNullSpace{Complex128}}})
    err = ccall((:DMPlexCreateRigidBody,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{MatNullSpace{Complex128}}),arg1,arg2)
    return err
end

function DMPlexSNESComputeResidualFEM(arg1::DM{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMPlexSNESComputeResidualFEM,petscComplexDouble),PetscErrorCode,(DM{Complex128},Vec{Complex128},Vec{Complex128},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexSNESComputeJacobianFEM(arg1::DM{Complex128},arg2::Vec{Complex128},arg3::Mat{Complex128},arg4::Mat{Complex128},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMPlexSNESComputeJacobianFEM,petscComplexDouble),PetscErrorCode,(DM{Complex128},Vec{Complex128},Mat{Complex128},Mat{Complex128},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexTSComputeRHSFunctionFVM(arg1::DM{Complex128},arg2::Float64,arg3::Vec{Complex128},arg4::Vec{Complex128},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMPlexTSComputeRHSFunctionFVM,petscComplexDouble),PetscErrorCode,(DM{Complex128},Float64,Vec{Complex128},Vec{Complex128},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexTSComputeIFunctionFEM(arg1::DM{Complex128},arg2::Float64,arg3::Vec{Complex128},arg4::Vec{Complex128},arg5::Vec{Complex128},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMPlexTSComputeIFunctionFEM,petscComplexDouble),PetscErrorCode,(DM{Complex128},Float64,Vec{Complex128},Vec{Complex128},Vec{Complex128},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMPlexComputeRHSFunctionFVM(arg1::DM{Complex128},arg2::Float64,arg3::Vec{Complex128},arg4::Vec{Complex128},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMPlexComputeRHSFunctionFVM,petscComplexDouble),PetscErrorCode,(DM{Complex128},Float64,Vec{Complex128},Vec{Complex128},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexGetAnchors(arg1::DM{Complex128},arg2::Union{Ptr{PetscSection{Complex128}},StridedArray{PetscSection{Complex128}},Ptr{PetscSection{Complex128}},Ref{PetscSection{Complex128}}},arg3::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:DMPlexGetAnchors,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{PetscSection{Complex128}},Ptr{IS{Complex128}}),arg1,arg2,arg3)
    return err
end

function DMPlexSetAnchors(arg1::DM{Complex128},arg2::PetscSection{Complex128},arg3::IS{Complex128})
    err = ccall((:DMPlexSetAnchors,petscComplexDouble),PetscErrorCode,(DM{Complex128},PetscSection{Complex128},IS{Complex128}),arg1,arg2,arg3)
    return err
end

function DMPlexSetReferenceTree(arg1::DM{Complex128},arg2::DM{Complex128})
    err = ccall((:DMPlexSetReferenceTree,petscComplexDouble),PetscErrorCode,(DM{Complex128},DM{Complex128}),arg1,arg2)
    return err
end

function DMPlexGetReferenceTree(arg1::DM{Complex128},arg2::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:DMPlexGetReferenceTree,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{DM{Complex128}}),arg1,arg2)
    return err
end

function DMPlexReferenceTreeGetChildSymmetry(arg1::DM{Complex128},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexReferenceTreeGetChildSymmetry,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function DMPlexCreateDefaultReferenceTree(arg1::MPI_Comm,arg2::Integer,arg3::PetscBool,arg4::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:DMPlexCreateDefaultReferenceTree,petscComplexDouble),PetscErrorCode,(comm_type,Int64,PetscBool,Ptr{DM{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexSetTree(arg1::DM{Complex128},arg2::PetscSection{Complex128},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexSetTree,petscComplexDouble),PetscErrorCode,(DM{Complex128},PetscSection{Complex128},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexGetTree(arg1::DM{Complex128},arg2::Union{Ptr{PetscSection{Complex128}},StridedArray{PetscSection{Complex128}},Ptr{PetscSection{Complex128}},Ref{PetscSection{Complex128}}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg5::Union{Ptr{PetscSection{Complex128}},StridedArray{PetscSection{Complex128}},Ptr{PetscSection{Complex128}},Ref{PetscSection{Complex128}}},arg6::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMPlexGetTree,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{PetscSection{Complex128}},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}},Ptr{PetscSection{Complex128}},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMPlexGetTreeParent(arg1::DM{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetTreeParent,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexGetTreeChildren(arg1::DM{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMPlexGetTreeChildren,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexTreeRefineCell(arg1::DM{Complex128},arg2::Integer,arg3::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:DMPlexTreeRefineCell,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Ptr{DM{Complex128}}),arg1,arg2,arg3)
    return err
end

function DMRedundantCreate(arg1::MPI_Comm,arg2::PetscMPIInt,arg3::Integer,arg4::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:DMRedundantCreate,petscComplexDouble),PetscErrorCode,(comm_type,PetscMPIInt,Int64,Ptr{DM{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function DMRedundantSetSize(arg1::DM{Complex128},arg2::PetscMPIInt,arg3::Integer)
    err = ccall((:DMRedundantSetSize,petscComplexDouble),PetscErrorCode,(DM{Complex128},PetscMPIInt,Int64),arg1,arg2,arg3)
    return err
end

function DMRedundantGetSize(arg1::DM{Complex128},arg2::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMRedundantGetSize,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{PetscMPIInt},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function DMShellCreate(arg1::MPI_Comm,arg2::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:DMShellCreate,petscComplexDouble),PetscErrorCode,(comm_type,Ptr{DM{Complex128}}),arg1,arg2)
    return err
end

function DMShellSetMatrix(arg1::DM{Complex128},arg2::Mat{Complex128})
    err = ccall((:DMShellSetMatrix,petscComplexDouble),PetscErrorCode,(DM{Complex128},Mat{Complex128}),arg1,arg2)
    return err
end

function DMShellSetGlobalVector(arg1::DM{Complex128},arg2::Vec{Complex128})
    err = ccall((:DMShellSetGlobalVector,petscComplexDouble),PetscErrorCode,(DM{Complex128},Vec{Complex128}),arg1,arg2)
    return err
end

function DMShellSetLocalVector(arg1::DM{Complex128},arg2::Vec{Complex128})
    err = ccall((:DMShellSetLocalVector,petscComplexDouble),PetscErrorCode,(DM{Complex128},Vec{Complex128}),arg1,arg2)
    return err
end

function DMShellSetCreateGlobalVector(arg1::DM{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMShellSetCreateGlobalVector,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function DMShellSetCreateLocalVector(arg1::DM{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMShellSetCreateLocalVector,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function DMShellSetGlobalToLocal(arg1::DM{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMShellSetGlobalToLocal,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMShellSetGlobalToLocalVecScatter(arg1::DM{Complex128},arg2::VecScatter{Complex128})
    err = ccall((:DMShellSetGlobalToLocalVecScatter,petscComplexDouble),PetscErrorCode,(DM{Complex128},VecScatter{Complex128}),arg1,arg2)
    return err
end

function DMShellSetLocalToGlobal(arg1::DM{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMShellSetLocalToGlobal,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMShellSetLocalToGlobalVecScatter(arg1::DM{Complex128},arg2::VecScatter{Complex128})
    err = ccall((:DMShellSetLocalToGlobalVecScatter,petscComplexDouble),PetscErrorCode,(DM{Complex128},VecScatter{Complex128}),arg1,arg2)
    return err
end

function DMShellSetLocalToLocal(arg1::DM{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMShellSetLocalToLocal,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMShellSetLocalToLocalVecScatter(arg1::DM{Complex128},arg2::VecScatter{Complex128})
    err = ccall((:DMShellSetLocalToLocalVecScatter,petscComplexDouble),PetscErrorCode,(DM{Complex128},VecScatter{Complex128}),arg1,arg2)
    return err
end

function DMShellSetCreateMatrix(arg1::DM{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMShellSetCreateMatrix,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function DMShellSetCoarsen(arg1::DM{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMShellSetCoarsen,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function DMShellSetRefine(arg1::DM{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMShellSetRefine,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function DMShellSetCreateInterpolation(arg1::DM{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMShellSetCreateInterpolation,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function DMShellSetCreateInjection(arg1::DM{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMShellSetCreateInjection,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function DMShellSetCreateFieldDecomposition(arg1::DM{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMShellSetCreateFieldDecomposition,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function DMGlobalToLocalBeginDefaultShell(arg1::DM{Complex128},arg2::Vec{Complex128},arg3::InsertMode,arg4::Vec{Complex128})
    err = ccall((:DMGlobalToLocalBeginDefaultShell,petscComplexDouble),PetscErrorCode,(DM{Complex128},Vec{Complex128},InsertMode,Vec{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function DMGlobalToLocalEndDefaultShell(arg1::DM{Complex128},arg2::Vec{Complex128},arg3::InsertMode,arg4::Vec{Complex128})
    err = ccall((:DMGlobalToLocalEndDefaultShell,petscComplexDouble),PetscErrorCode,(DM{Complex128},Vec{Complex128},InsertMode,Vec{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function DMLocalToGlobalBeginDefaultShell(arg1::DM{Complex128},arg2::Vec{Complex128},arg3::InsertMode,arg4::Vec{Complex128})
    err = ccall((:DMLocalToGlobalBeginDefaultShell,petscComplexDouble),PetscErrorCode,(DM{Complex128},Vec{Complex128},InsertMode,Vec{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function DMLocalToGlobalEndDefaultShell(arg1::DM{Complex128},arg2::Vec{Complex128},arg3::InsertMode,arg4::Vec{Complex128})
    err = ccall((:DMLocalToGlobalEndDefaultShell,petscComplexDouble),PetscErrorCode,(DM{Complex128},Vec{Complex128},InsertMode,Vec{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function DMLocalToLocalBeginDefaultShell(arg1::DM{Complex128},arg2::Vec{Complex128},arg3::InsertMode,arg4::Vec{Complex128})
    err = ccall((:DMLocalToLocalBeginDefaultShell,petscComplexDouble),PetscErrorCode,(DM{Complex128},Vec{Complex128},InsertMode,Vec{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function DMLocalToLocalEndDefaultShell(arg1::DM{Complex128},arg2::Vec{Complex128},arg3::InsertMode,arg4::Vec{Complex128})
    err = ccall((:DMLocalToLocalEndDefaultShell,petscComplexDouble),PetscErrorCode,(DM{Complex128},Vec{Complex128},InsertMode,Vec{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function DMSlicedCreate(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:DMSlicedCreate,petscComplexDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{DM{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function DMSlicedSetPreallocation(arg1::DM{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMSlicedSetPreallocation,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Ptr{Int64},Int64,Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMSlicedSetBlockFills(arg1::DM{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMSlicedSetBlockFills,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function DMSlicedSetGhosts(arg1::DM{Complex128},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMSlicedSetGhosts,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Int64,Int64,Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDSInitializePackage(arg0::Type{Complex128})
    err = ccall((:PetscDSInitializePackage,petscComplexDouble),PetscErrorCode,())
    return err
end

function PetscDSCreate(arg1::MPI_Comm,arg2::Union{Ptr{PetscDS{Complex128}},StridedArray{PetscDS{Complex128}},Ptr{PetscDS{Complex128}},Ref{PetscDS{Complex128}}})
    err = ccall((:PetscDSCreate,petscComplexDouble),PetscErrorCode,(comm_type,Ptr{PetscDS{Complex128}}),arg1,arg2)
    return err
end

function PetscDSDestroy(arg1::Union{Ptr{PetscDS{Complex128}},StridedArray{PetscDS{Complex128}},Ptr{PetscDS{Complex128}},Ref{PetscDS{Complex128}}})
    err = ccall((:PetscDSDestroy,petscComplexDouble),PetscErrorCode,(Ptr{PetscDS{Complex128}},),arg1)
    return err
end

function PetscDSSetType(arg1::PetscDS{Complex128},arg2::PetscDSType)
    err = ccall((:PetscDSSetType,petscComplexDouble),PetscErrorCode,(PetscDS{Complex128},PetscDSType),arg1,arg2)
    return err
end

function PetscDSGetType(arg1::PetscDS{Complex128},arg2::Union{Ptr{PetscDSType},StridedArray{PetscDSType},Ptr{PetscDSType},Ref{PetscDSType}})
    err = ccall((:PetscDSGetType,petscComplexDouble),PetscErrorCode,(PetscDS{Complex128},Ptr{PetscDSType}),arg1,arg2)
    return err
end

function PetscDSSetUp(arg1::PetscDS{Complex128})
    err = ccall((:PetscDSSetUp,petscComplexDouble),PetscErrorCode,(PetscDS{Complex128},),arg1)
    return err
end

function PetscDSSetFromOptions(arg1::PetscDS{Complex128})
    err = ccall((:PetscDSSetFromOptions,petscComplexDouble),PetscErrorCode,(PetscDS{Complex128},),arg1)
    return err
end

function PetscDSRegister(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscDSRegister,petscComplexDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function PetscDSRegisterDestroy(arg0::Type{Complex128})
    err = ccall((:PetscDSRegisterDestroy,petscComplexDouble),PetscErrorCode,())
    return err
end

function PetscDSGetSpatialDimension(arg1::PetscDS{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscDSGetSpatialDimension,petscComplexDouble),PetscErrorCode,(PetscDS{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscDSGetNumFields(arg1::PetscDS{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscDSGetNumFields,petscComplexDouble),PetscErrorCode,(PetscDS{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscDSGetTotalDimension(arg1::PetscDS{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscDSGetTotalDimension,petscComplexDouble),PetscErrorCode,(PetscDS{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscDSGetTotalBdDimension(arg1::PetscDS{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscDSGetTotalBdDimension,petscComplexDouble),PetscErrorCode,(PetscDS{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscDSGetTotalComponents(arg1::PetscDS{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscDSGetTotalComponents,petscComplexDouble),PetscErrorCode,(PetscDS{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscDSGetFieldOffset(arg1::PetscDS{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscDSGetFieldOffset,petscComplexDouble),PetscErrorCode,(PetscDS{Complex128},Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PetscDSGetBdFieldOffset(arg1::PetscDS{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscDSGetBdFieldOffset,petscComplexDouble),PetscErrorCode,(PetscDS{Complex128},Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PetscDSGetComponentOffset(arg1::PetscDS{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscDSGetComponentOffset,petscComplexDouble),PetscErrorCode,(PetscDS{Complex128},Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PetscDSGetComponentOffsets(arg1::PetscDS{Complex128},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:PetscDSGetComponentOffsets,petscComplexDouble),PetscErrorCode,(PetscDS{Complex128},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function PetscDSGetComponentBdOffsets(arg1::PetscDS{Complex128},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:PetscDSGetComponentBdOffsets,petscComplexDouble),PetscErrorCode,(PetscDS{Complex128},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function PetscDSGetComponentDerivativeOffsets(arg1::PetscDS{Complex128},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:PetscDSGetComponentDerivativeOffsets,petscComplexDouble),PetscErrorCode,(PetscDS{Complex128},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function PetscDSGetComponentBdDerivativeOffsets(arg1::PetscDS{Complex128},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:PetscDSGetComponentBdDerivativeOffsets,petscComplexDouble),PetscErrorCode,(PetscDS{Complex128},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function PetscDSGetDiscretization(arg1::PetscDS{Complex128},arg2::Integer,arg3::Union{Ptr{PetscObject{Complex128}},StridedArray{PetscObject{Complex128}},Ptr{PetscObject{Complex128}},Ref{PetscObject{Complex128}}})
    err = ccall((:PetscDSGetDiscretization,petscComplexDouble),PetscErrorCode,(PetscDS{Complex128},Int64,Ptr{PetscObject{Complex128}}),arg1,arg2,arg3)
    return err
end

function PetscDSSetDiscretization(arg1::PetscDS{Complex128},arg2::Integer,arg3::PetscObject{Complex128})
    err = ccall((:PetscDSSetDiscretization,petscComplexDouble),PetscErrorCode,(PetscDS{Complex128},Int64,PetscObject{Complex128}),arg1,arg2,arg3)
    return err
end

function PetscDSAddDiscretization(arg1::PetscDS{Complex128},arg2::PetscObject{Complex128})
    err = ccall((:PetscDSAddDiscretization,petscComplexDouble),PetscErrorCode,(PetscDS{Complex128},PetscObject{Complex128}),arg1,arg2)
    return err
end

function PetscDSGetBdDiscretization(arg1::PetscDS{Complex128},arg2::Integer,arg3::Union{Ptr{PetscObject{Complex128}},StridedArray{PetscObject{Complex128}},Ptr{PetscObject{Complex128}},Ref{PetscObject{Complex128}}})
    err = ccall((:PetscDSGetBdDiscretization,petscComplexDouble),PetscErrorCode,(PetscDS{Complex128},Int64,Ptr{PetscObject{Complex128}}),arg1,arg2,arg3)
    return err
end

function PetscDSSetBdDiscretization(arg1::PetscDS{Complex128},arg2::Integer,arg3::PetscObject{Complex128})
    err = ccall((:PetscDSSetBdDiscretization,petscComplexDouble),PetscErrorCode,(PetscDS{Complex128},Int64,PetscObject{Complex128}),arg1,arg2,arg3)
    return err
end

function PetscDSAddBdDiscretization(arg1::PetscDS{Complex128},arg2::PetscObject{Complex128})
    err = ccall((:PetscDSAddBdDiscretization,petscComplexDouble),PetscErrorCode,(PetscDS{Complex128},PetscObject{Complex128}),arg1,arg2)
    return err
end

function PetscDSGetImplicit(arg1::PetscDS{Complex128},arg2::Integer,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscDSGetImplicit,petscComplexDouble),PetscErrorCode,(PetscDS{Complex128},Int64,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function PetscDSSetImplicit(arg1::PetscDS{Complex128},arg2::Integer,arg3::PetscBool)
    err = ccall((:PetscDSSetImplicit,petscComplexDouble),PetscErrorCode,(PetscDS{Complex128},Int64,PetscBool),arg1,arg2,arg3)
    return err
end

function PetscDSGetAdjacency(arg1::PetscDS{Complex128},arg2::Integer,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscDSGetAdjacency,petscComplexDouble),PetscErrorCode,(PetscDS{Complex128},Int64,Ptr{PetscBool},Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function PetscDSSetAdjacency(arg1::PetscDS{Complex128},arg2::Integer,arg3::PetscBool,arg4::PetscBool)
    err = ccall((:PetscDSSetAdjacency,petscComplexDouble),PetscErrorCode,(PetscDS{Complex128},Int64,PetscBool,PetscBool),arg1,arg2,arg3,arg4)
    return err
end

function PetscDSGetObjective(arg1::PetscDS{Complex128},arg2::Integer,arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:PetscDSGetObjective,petscComplexDouble),PetscErrorCode,(PetscDS{Complex128},Int64,Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function PetscDSSetObjective(arg1::PetscDS{Complex128},arg2::Integer,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscDSSetObjective,petscComplexDouble),PetscErrorCode,(PetscDS{Complex128},Int64,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function PetscDSGetResidual(arg1::PetscDS{Complex128},arg2::Integer,arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:PetscDSGetResidual,petscComplexDouble),PetscErrorCode,(PetscDS{Complex128},Int64,Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscDSSetResidual(arg1::PetscDS{Complex128},arg2::Integer,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscDSSetResidual,petscComplexDouble),PetscErrorCode,(PetscDS{Complex128},Int64,Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function PetscDSGetJacobian(arg1::PetscDS{Complex128},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg5::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg6::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg7::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:PetscDSGetJacobian,petscComplexDouble),PetscErrorCode,(PetscDS{Complex128},Int64,Int64,Ptr{Ptr{Void}},Ptr{Ptr{Void}},Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function PetscDSSetJacobian(arg1::PetscDS{Complex128},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg7::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscDSSetJacobian,petscComplexDouble),PetscErrorCode,(PetscDS{Complex128},Int64,Int64,Ptr{Void},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function PetscDSGetRiemannSolver(arg1::PetscDS{Complex128},arg2::Integer,arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:PetscDSGetRiemannSolver,petscComplexDouble),PetscErrorCode,(PetscDS{Complex128},Int64,Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function PetscDSSetRiemannSolver(arg1::PetscDS{Complex128},arg2::Integer,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscDSSetRiemannSolver,petscComplexDouble),PetscErrorCode,(PetscDS{Complex128},Int64,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function PetscDSGetContext(arg1::PetscDS{Complex128},arg2::Integer,arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:PetscDSGetContext,petscComplexDouble),PetscErrorCode,(PetscDS{Complex128},Int64,Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function PetscDSSetContext(arg1::PetscDS{Complex128},arg2::Integer,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscDSSetContext,petscComplexDouble),PetscErrorCode,(PetscDS{Complex128},Int64,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function PetscDSGetBdResidual(arg1::PetscDS{Complex128},arg2::Integer,arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:PetscDSGetBdResidual,petscComplexDouble),PetscErrorCode,(PetscDS{Complex128},Int64,Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscDSSetBdResidual(arg1::PetscDS{Complex128},arg2::Integer,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscDSSetBdResidual,petscComplexDouble),PetscErrorCode,(PetscDS{Complex128},Int64,Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function PetscDSGetBdJacobian(arg1::PetscDS{Complex128},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg5::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg6::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg7::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:PetscDSGetBdJacobian,petscComplexDouble),PetscErrorCode,(PetscDS{Complex128},Int64,Int64,Ptr{Ptr{Void}},Ptr{Ptr{Void}},Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function PetscDSSetBdJacobian(arg1::PetscDS{Complex128},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg7::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscDSSetBdJacobian,petscComplexDouble),PetscErrorCode,(PetscDS{Complex128},Int64,Int64,Ptr{Void},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function PetscDSGetTabulation(arg1::PetscDS{Complex128},arg2::Union{Ptr{Ptr{Ptr{Float64}}},StridedArray{Ptr{Ptr{Float64}}},Ptr{Ptr{Ptr{Float64}}},Ref{Ptr{Ptr{Float64}}}},arg3::Union{Ptr{Ptr{Ptr{Float64}}},StridedArray{Ptr{Ptr{Float64}}},Ptr{Ptr{Ptr{Float64}}},Ref{Ptr{Ptr{Float64}}}})
    err = ccall((:PetscDSGetTabulation,petscComplexDouble),PetscErrorCode,(PetscDS{Complex128},Ptr{Ptr{Ptr{Float64}}},Ptr{Ptr{Ptr{Float64}}}),arg1,arg2,arg3)
    return err
end

function PetscDSGetBdTabulation(arg1::PetscDS{Complex128},arg2::Union{Ptr{Ptr{Ptr{Float64}}},StridedArray{Ptr{Ptr{Float64}}},Ptr{Ptr{Ptr{Float64}}},Ref{Ptr{Ptr{Float64}}}},arg3::Union{Ptr{Ptr{Ptr{Float64}}},StridedArray{Ptr{Ptr{Float64}}},Ptr{Ptr{Ptr{Float64}}},Ref{Ptr{Ptr{Float64}}}})
    err = ccall((:PetscDSGetBdTabulation,petscComplexDouble),PetscErrorCode,(PetscDS{Complex128},Ptr{Ptr{Ptr{Float64}}},Ptr{Ptr{Ptr{Float64}}}),arg1,arg2,arg3)
    return err
end

function PetscDSGetEvaluationArrays(arg1::PetscDS{Complex128},arg2::Union{Ptr{Ptr{Complex128}},StridedArray{Ptr{Complex128}},Ptr{Ptr{Complex128}},Ref{Ptr{Complex128}}},arg3::Union{Ptr{Ptr{Complex128}},StridedArray{Ptr{Complex128}},Ptr{Ptr{Complex128}},Ref{Ptr{Complex128}}},arg4::Union{Ptr{Ptr{Complex128}},StridedArray{Ptr{Complex128}},Ptr{Ptr{Complex128}},Ref{Ptr{Complex128}}})
    err = ccall((:PetscDSGetEvaluationArrays,petscComplexDouble),PetscErrorCode,(PetscDS{Complex128},Ptr{Ptr{Complex128}},Ptr{Ptr{Complex128}},Ptr{Ptr{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscDSGetWeakFormArrays(arg1::PetscDS{Complex128},arg2::Union{Ptr{Ptr{Complex128}},StridedArray{Ptr{Complex128}},Ptr{Ptr{Complex128}},Ref{Ptr{Complex128}}},arg3::Union{Ptr{Ptr{Complex128}},StridedArray{Ptr{Complex128}},Ptr{Ptr{Complex128}},Ref{Ptr{Complex128}}},arg4::Union{Ptr{Ptr{Complex128}},StridedArray{Ptr{Complex128}},Ptr{Ptr{Complex128}},Ref{Ptr{Complex128}}},arg5::Union{Ptr{Ptr{Complex128}},StridedArray{Ptr{Complex128}},Ptr{Ptr{Complex128}},Ref{Ptr{Complex128}}},arg6::Union{Ptr{Ptr{Complex128}},StridedArray{Ptr{Complex128}},Ptr{Ptr{Complex128}},Ref{Ptr{Complex128}}},arg7::Union{Ptr{Ptr{Complex128}},StridedArray{Ptr{Complex128}},Ptr{Ptr{Complex128}},Ref{Ptr{Complex128}}})
    err = ccall((:PetscDSGetWeakFormArrays,petscComplexDouble),PetscErrorCode,(PetscDS{Complex128},Ptr{Ptr{Complex128}},Ptr{Ptr{Complex128}},Ptr{Ptr{Complex128}},Ptr{Ptr{Complex128}},Ptr{Ptr{Complex128}},Ptr{Ptr{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function PetscDSGetRefCoordArrays(arg1::PetscDS{Complex128},arg2::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg3::Union{Ptr{Ptr{Complex128}},StridedArray{Ptr{Complex128}},Ptr{Ptr{Complex128}},Ref{Ptr{Complex128}}})
    err = ccall((:PetscDSGetRefCoordArrays,petscComplexDouble),PetscErrorCode,(PetscDS{Complex128},Ptr{Ptr{Float64}},Ptr{Ptr{Complex128}}),arg1,arg2,arg3)
    return err
end

function CharacteristicInitializePackage(arg0::Type{Complex128})
    err = ccall((:CharacteristicInitializePackage,petscComplexDouble),PetscErrorCode,())
    return err
end

function CharacteristicCreate(arg1::MPI_Comm,arg2::Union{Ptr{Characteristic{Complex128}},StridedArray{Characteristic{Complex128}},Ptr{Characteristic{Complex128}},Ref{Characteristic{Complex128}}})
    err = ccall((:CharacteristicCreate,petscComplexDouble),PetscErrorCode,(comm_type,Ptr{Characteristic{Complex128}}),arg1,arg2)
    return err
end

function CharacteristicSetType(arg1::Characteristic{Complex128},arg2::CharacteristicType)
    err = ccall((:CharacteristicSetType,petscComplexDouble),PetscErrorCode,(Characteristic{Complex128},CharacteristicType),arg1,arg2)
    return err
end

function CharacteristicSetUp(arg1::Characteristic{Complex128})
    err = ccall((:CharacteristicSetUp,petscComplexDouble),PetscErrorCode,(Characteristic{Complex128},),arg1)
    return err
end

function CharacteristicSetVelocityInterpolation(arg1::Characteristic{Complex128},arg2::DM{Complex128},arg3::Vec{Complex128},arg4::Vec{Complex128},arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg8::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:CharacteristicSetVelocityInterpolation,petscComplexDouble),PetscErrorCode,(Characteristic{Complex128},DM{Complex128},Vec{Complex128},Vec{Complex128},Int64,Ptr{Int64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function CharacteristicSetVelocityInterpolationLocal(arg1::Characteristic{Complex128},arg2::DM{Complex128},arg3::Vec{Complex128},arg4::Vec{Complex128},arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg8::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:CharacteristicSetVelocityInterpolationLocal,petscComplexDouble),PetscErrorCode,(Characteristic{Complex128},DM{Complex128},Vec{Complex128},Vec{Complex128},Int64,Ptr{Int64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function CharacteristicSetFieldInterpolation(arg1::Characteristic{Complex128},arg2::DM{Complex128},arg3::Vec{Complex128},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg7::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:CharacteristicSetFieldInterpolation,petscComplexDouble),PetscErrorCode,(Characteristic{Complex128},DM{Complex128},Vec{Complex128},Int64,Ptr{Int64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function CharacteristicSetFieldInterpolationLocal(arg1::Characteristic{Complex128},arg2::DM{Complex128},arg3::Vec{Complex128},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg7::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:CharacteristicSetFieldInterpolationLocal,petscComplexDouble),PetscErrorCode,(Characteristic{Complex128},DM{Complex128},Vec{Complex128},Int64,Ptr{Int64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function CharacteristicSolve(arg1::Characteristic{Complex128},arg2::Float64,arg3::Vec{Complex128})
    err = ccall((:CharacteristicSolve,petscComplexDouble),PetscErrorCode,(Characteristic{Complex128},Float64,Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function CharacteristicDestroy(arg1::Union{Ptr{Characteristic{Complex128}},StridedArray{Characteristic{Complex128}},Ptr{Characteristic{Complex128}},Ref{Characteristic{Complex128}}})
    err = ccall((:CharacteristicDestroy,petscComplexDouble),PetscErrorCode,(Ptr{Characteristic{Complex128}},),arg1)
    return err
end

function CharacteristicRegister(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:CharacteristicRegister,petscComplexDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function PCExoticSetType(arg1::PC{Complex128},arg2::PCExoticType)
    err = ccall((:PCExoticSetType,petscComplexDouble),PetscErrorCode,(PC{Complex128},PCExoticType),arg1,arg2)
    return err
end

function PCInitializePackage(arg0::Type{Complex128})
    err = ccall((:PCInitializePackage,petscComplexDouble),PetscErrorCode,())
    return err
end

function PCCreate(arg1::MPI_Comm,arg2::Union{Ptr{PC{Complex128}},StridedArray{PC{Complex128}},Ptr{PC{Complex128}},Ref{PC{Complex128}}})
    err = ccall((:PCCreate,petscComplexDouble),PetscErrorCode,(comm_type,Ptr{PC{Complex128}}),arg1,arg2)
    return err
end

function PCSetType(arg1::PC{Complex128},arg2::PCType)
    err = ccall((:PCSetType,petscComplexDouble),PetscErrorCode,(PC{Complex128},PCType),arg1,arg2)
    return err
end

function PCGetType(arg1::PC{Complex128},arg2::Union{Ptr{PCType},StridedArray{PCType},Ptr{PCType},Ref{PCType}})
    err = ccall((:PCGetType,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{PCType}),arg1,arg2)
    return err
end

function PCSetUp(arg1::PC{Complex128})
    err = ccall((:PCSetUp,petscComplexDouble),PetscErrorCode,(PC{Complex128},),arg1)
    return err
end

function PCGetSetUpFailedReason(arg1::PC{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PCGetSetUpFailedReason,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function PCSetUpOnBlocks(arg1::PC{Complex128})
    err = ccall((:PCSetUpOnBlocks,petscComplexDouble),PetscErrorCode,(PC{Complex128},),arg1)
    return err
end

function PCApply(arg1::PC{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128})
    err = ccall((:PCApply,petscComplexDouble),PetscErrorCode,(PC{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function PCApplySymmetricLeft(arg1::PC{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128})
    err = ccall((:PCApplySymmetricLeft,petscComplexDouble),PetscErrorCode,(PC{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function PCApplySymmetricRight(arg1::PC{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128})
    err = ccall((:PCApplySymmetricRight,petscComplexDouble),PetscErrorCode,(PC{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function PCApplyBAorAB(arg1::PC{Complex128},arg2::PCSide,arg3::Vec{Complex128},arg4::Vec{Complex128},arg5::Vec{Complex128})
    err = ccall((:PCApplyBAorAB,petscComplexDouble),PetscErrorCode,(PC{Complex128},PCSide,Vec{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PCApplyTranspose(arg1::PC{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128})
    err = ccall((:PCApplyTranspose,petscComplexDouble),PetscErrorCode,(PC{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function PCApplyTransposeExists(arg1::PC{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCApplyTransposeExists,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCApplyBAorABTranspose(arg1::PC{Complex128},arg2::PCSide,arg3::Vec{Complex128},arg4::Vec{Complex128},arg5::Vec{Complex128})
    err = ccall((:PCApplyBAorABTranspose,petscComplexDouble),PetscErrorCode,(PC{Complex128},PCSide,Vec{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PCSetReusePreconditioner(arg1::PC{Complex128},arg2::PetscBool)
    err = ccall((:PCSetReusePreconditioner,petscComplexDouble),PetscErrorCode,(PC{Complex128},PetscBool),arg1,arg2)
    return err
end

function PCGetReusePreconditioner(arg1::PC{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCGetReusePreconditioner,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCSetErrorIfFailure(arg1::PC{Complex128},arg2::PetscBool)
    err = ccall((:PCSetErrorIfFailure,petscComplexDouble),PetscErrorCode,(PC{Complex128},PetscBool),arg1,arg2)
    return err
end

function PCApplyRichardson(arg1::PC{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128},arg4::Vec{Complex128},arg5::Float64,arg6::Float64,arg7::Float64,arg8::Integer,arg9::PetscBool,arg10::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg11::Union{Ptr{PCRichardsonConvergedReason},StridedArray{PCRichardsonConvergedReason},Ptr{PCRichardsonConvergedReason},Ref{PCRichardsonConvergedReason}})
    err = ccall((:PCApplyRichardson,petscComplexDouble),PetscErrorCode,(PC{Complex128},Vec{Complex128},Vec{Complex128},Vec{Complex128},Float64,Float64,Float64,Int64,PetscBool,Ptr{Int64},Ptr{PCRichardsonConvergedReason}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11)
    return err
end

function PCApplyRichardsonExists(arg1::PC{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCApplyRichardsonExists,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCSetInitialGuessNonzero(arg1::PC{Complex128},arg2::PetscBool)
    err = ccall((:PCSetInitialGuessNonzero,petscComplexDouble),PetscErrorCode,(PC{Complex128},PetscBool),arg1,arg2)
    return err
end

function PCGetInitialGuessNonzero(arg1::PC{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCGetInitialGuessNonzero,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCSetUseAmat(arg1::PC{Complex128},arg2::PetscBool)
    err = ccall((:PCSetUseAmat,petscComplexDouble),PetscErrorCode,(PC{Complex128},PetscBool),arg1,arg2)
    return err
end

function PCGetUseAmat(arg1::PC{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCGetUseAmat,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCRegister(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCRegister,petscComplexDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function PCReset(arg1::PC{Complex128})
    err = ccall((:PCReset,petscComplexDouble),PetscErrorCode,(PC{Complex128},),arg1)
    return err
end

function PCDestroy(arg1::Union{Ptr{PC{Complex128}},StridedArray{PC{Complex128}},Ptr{PC{Complex128}},Ref{PC{Complex128}}})
    err = ccall((:PCDestroy,petscComplexDouble),PetscErrorCode,(Ptr{PC{Complex128}},),arg1)
    return err
end

function PCSetFromOptions(arg1::PC{Complex128})
    err = ccall((:PCSetFromOptions,petscComplexDouble),PetscErrorCode,(PC{Complex128},),arg1)
    return err
end

function PCFactorGetMatrix(arg1::PC{Complex128},arg2::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:PCFactorGetMatrix,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{Mat{Complex128}}),arg1,arg2)
    return err
end

function PCSetModifySubMatrices(arg1::PC{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCSetModifySubMatrices,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function PCModifySubMatrices(arg1::PC{Complex128},arg2::Integer,arg3::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}},arg4::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}},arg5::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCModifySubMatrices,petscComplexDouble),PetscErrorCode,(PC{Complex128},Int64,Ptr{IS{Complex128}},Ptr{IS{Complex128}},Ptr{Mat{Complex128}},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PCSetOperators(arg1::PC{Complex128},arg2::Mat{Complex128},arg3::Mat{Complex128})
    err = ccall((:PCSetOperators,petscComplexDouble),PetscErrorCode,(PC{Complex128},Mat{Complex128},Mat{Complex128}),arg1,arg2,arg3)
    return err
end

function PCGetOperators(arg1::PC{Complex128},arg2::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}},arg3::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:PCGetOperators,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{Mat{Complex128}},Ptr{Mat{Complex128}}),arg1,arg2,arg3)
    return err
end

function PCGetOperatorsSet(arg1::PC{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCGetOperatorsSet,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{PetscBool},Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function PCView(arg1::PC{Complex128},arg2::PetscViewer{Complex128})
    err = ccall((:PCView,petscComplexDouble),PetscErrorCode,(PC{Complex128},PetscViewer{Complex128}),arg1,arg2)
    return err
end

function PCLoad(arg1::PC{Complex128},arg2::PetscViewer{Complex128})
    err = ccall((:PCLoad,petscComplexDouble),PetscErrorCode,(PC{Complex128},PetscViewer{Complex128}),arg1,arg2)
    return err
end

function PCAppendOptionsPrefix(arg1::PC{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PCAppendOptionsPrefix,petscComplexDouble),PetscErrorCode,(PC{Complex128},Cstring),arg1,arg2)
    return err
end

function PCGetOptionsPrefix(arg1::PC{Complex128},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PCGetOptionsPrefix,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PCComputeExplicitOperator(arg1::PC{Complex128},arg2::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:PCComputeExplicitOperator,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{Mat{Complex128}}),arg1,arg2)
    return err
end

function PCGetDiagonalScale(arg1::PC{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCGetDiagonalScale,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCDiagonalScaleLeft(arg1::PC{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128})
    err = ccall((:PCDiagonalScaleLeft,petscComplexDouble),PetscErrorCode,(PC{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function PCDiagonalScaleRight(arg1::PC{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128})
    err = ccall((:PCDiagonalScaleRight,petscComplexDouble),PetscErrorCode,(PC{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function PCSetDiagonalScale(arg1::PC{Complex128},arg2::Vec{Complex128})
    err = ccall((:PCSetDiagonalScale,petscComplexDouble),PetscErrorCode,(PC{Complex128},Vec{Complex128}),arg1,arg2)
    return err
end

function PCJacobiSetType(arg1::PC{Complex128},arg2::PCJacobiType)
    err = ccall((:PCJacobiSetType,petscComplexDouble),PetscErrorCode,(PC{Complex128},PCJacobiType),arg1,arg2)
    return err
end

function PCJacobiGetType(arg1::PC{Complex128},arg2::Union{Ptr{PCJacobiType},StridedArray{PCJacobiType},Ptr{PCJacobiType},Ref{PCJacobiType}})
    err = ccall((:PCJacobiGetType,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{PCJacobiType}),arg1,arg2)
    return err
end

function PCJacobiSetUseAbs(arg1::PC{Complex128},arg2::PetscBool)
    err = ccall((:PCJacobiSetUseAbs,petscComplexDouble),PetscErrorCode,(PC{Complex128},PetscBool),arg1,arg2)
    return err
end

function PCJacobiGetUseAbs(arg1::PC{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCJacobiGetUseAbs,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCSORSetSymmetric(arg1::PC{Complex128},arg2::MatSORType)
    err = ccall((:PCSORSetSymmetric,petscComplexDouble),PetscErrorCode,(PC{Complex128},MatSORType),arg1,arg2)
    return err
end

function PCSORGetSymmetric(arg1::PC{Complex128},arg2::Union{Ptr{MatSORType},StridedArray{MatSORType},Ptr{MatSORType},Ref{MatSORType}})
    err = ccall((:PCSORGetSymmetric,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{MatSORType}),arg1,arg2)
    return err
end

function PCSORSetOmega(arg1::PC{Complex128},arg2::Float64)
    err = ccall((:PCSORSetOmega,petscComplexDouble),PetscErrorCode,(PC{Complex128},Float64),arg1,arg2)
    return err
end

function PCSORGetOmega(arg1::PC{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PCSORGetOmega,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{Float64}),arg1,arg2)
    return err
end

function PCSORSetIterations(arg1::PC{Complex128},arg2::Integer,arg3::Integer)
    err = ccall((:PCSORSetIterations,petscComplexDouble),PetscErrorCode,(PC{Complex128},Int64,Int64),arg1,arg2,arg3)
    return err
end

function PCSORGetIterations(arg1::PC{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PCSORGetIterations,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PCEisenstatSetOmega(arg1::PC{Complex128},arg2::Float64)
    err = ccall((:PCEisenstatSetOmega,petscComplexDouble),PetscErrorCode,(PC{Complex128},Float64),arg1,arg2)
    return err
end

function PCEisenstatGetOmega(arg1::PC{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PCEisenstatGetOmega,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{Float64}),arg1,arg2)
    return err
end

function PCEisenstatSetNoDiagonalScaling(arg1::PC{Complex128},arg2::PetscBool)
    err = ccall((:PCEisenstatSetNoDiagonalScaling,petscComplexDouble),PetscErrorCode,(PC{Complex128},PetscBool),arg1,arg2)
    return err
end

function PCEisenstatGetNoDiagonalScaling(arg1::PC{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCEisenstatGetNoDiagonalScaling,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCBJacobiSetTotalBlocks(arg1::PC{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PCBJacobiSetTotalBlocks,petscComplexDouble),PetscErrorCode,(PC{Complex128},Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PCBJacobiGetTotalBlocks(arg1::PC{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:PCBJacobiGetTotalBlocks,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3)
    return err
end

function PCBJacobiSetLocalBlocks(arg1::PC{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PCBJacobiSetLocalBlocks,petscComplexDouble),PetscErrorCode,(PC{Complex128},Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PCBJacobiGetLocalBlocks(arg1::PC{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:PCBJacobiGetLocalBlocks,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3)
    return err
end

function PCShellSetApply(arg1::PC{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCShellSetApply,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function PCShellSetApplyBA(arg1::PC{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCShellSetApplyBA,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function PCShellSetApplyTranspose(arg1::PC{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCShellSetApplyTranspose,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function PCShellSetSetUp(arg1::PC{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCShellSetSetUp,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function PCShellSetApplyRichardson(arg1::PC{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCShellSetApplyRichardson,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function PCShellSetView(arg1::PC{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCShellSetView,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function PCShellSetDestroy(arg1::PC{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCShellSetDestroy,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function PCShellSetContext(arg1::PC{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCShellSetContext,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function PCShellGetContext(arg1::PC{Complex128},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:PCShellGetContext,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{Ptr{Void}}),arg1,arg2)
    return err
end

function PCShellSetName(arg1::PC{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PCShellSetName,petscComplexDouble),PetscErrorCode,(PC{Complex128},Cstring),arg1,arg2)
    return err
end

function PCShellGetName(arg1::PC{Complex128},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PCShellGetName,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PCFactorSetZeroPivot(arg1::PC{Complex128},arg2::Float64)
    err = ccall((:PCFactorSetZeroPivot,petscComplexDouble),PetscErrorCode,(PC{Complex128},Float64),arg1,arg2)
    return err
end

function PCFactorSetShiftType(arg1::PC{Complex128},arg2::MatFactorShiftType)
    err = ccall((:PCFactorSetShiftType,petscComplexDouble),PetscErrorCode,(PC{Complex128},MatFactorShiftType),arg1,arg2)
    return err
end

function PCFactorSetShiftAmount(arg1::PC{Complex128},arg2::Float64)
    err = ccall((:PCFactorSetShiftAmount,petscComplexDouble),PetscErrorCode,(PC{Complex128},Float64),arg1,arg2)
    return err
end

function PCFactorSetMatSolverPackage(arg1::PC{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PCFactorSetMatSolverPackage,petscComplexDouble),PetscErrorCode,(PC{Complex128},Cstring),arg1,arg2)
    return err
end

function PCFactorGetMatSolverPackage(arg1::PC{Complex128},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PCFactorGetMatSolverPackage,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PCFactorSetUpMatSolverPackage(arg1::PC{Complex128})
    err = ccall((:PCFactorSetUpMatSolverPackage,petscComplexDouble),PetscErrorCode,(PC{Complex128},),arg1)
    return err
end

function PCFactorSetFill(arg1::PC{Complex128},arg2::Float64)
    err = ccall((:PCFactorSetFill,petscComplexDouble),PetscErrorCode,(PC{Complex128},Float64),arg1,arg2)
    return err
end

function PCFactorSetColumnPivot(arg1::PC{Complex128},arg2::Float64)
    err = ccall((:PCFactorSetColumnPivot,petscComplexDouble),PetscErrorCode,(PC{Complex128},Float64),arg1,arg2)
    return err
end

function PCFactorReorderForNonzeroDiagonal(arg1::PC{Complex128},arg2::Float64)
    err = ccall((:PCFactorReorderForNonzeroDiagonal,petscComplexDouble),PetscErrorCode,(PC{Complex128},Float64),arg1,arg2)
    return err
end

function PCFactorSetMatOrderingType(arg1::PC{Complex128},arg2::MatOrderingType)
    err = ccall((:PCFactorSetMatOrderingType,petscComplexDouble),PetscErrorCode,(PC{Complex128},MatOrderingType),arg1,arg2)
    return err
end

function PCFactorSetReuseOrdering(arg1::PC{Complex128},arg2::PetscBool)
    err = ccall((:PCFactorSetReuseOrdering,petscComplexDouble),PetscErrorCode,(PC{Complex128},PetscBool),arg1,arg2)
    return err
end

function PCFactorSetReuseFill(arg1::PC{Complex128},arg2::PetscBool)
    err = ccall((:PCFactorSetReuseFill,petscComplexDouble),PetscErrorCode,(PC{Complex128},PetscBool),arg1,arg2)
    return err
end

function PCFactorSetUseInPlace(arg1::PC{Complex128},arg2::PetscBool)
    err = ccall((:PCFactorSetUseInPlace,petscComplexDouble),PetscErrorCode,(PC{Complex128},PetscBool),arg1,arg2)
    return err
end

function PCFactorGetUseInPlace(arg1::PC{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCFactorGetUseInPlace,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCFactorSetAllowDiagonalFill(arg1::PC{Complex128},arg2::PetscBool)
    err = ccall((:PCFactorSetAllowDiagonalFill,petscComplexDouble),PetscErrorCode,(PC{Complex128},PetscBool),arg1,arg2)
    return err
end

function PCFactorGetAllowDiagonalFill(arg1::PC{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCFactorGetAllowDiagonalFill,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCFactorSetPivotInBlocks(arg1::PC{Complex128},arg2::PetscBool)
    err = ccall((:PCFactorSetPivotInBlocks,petscComplexDouble),PetscErrorCode,(PC{Complex128},PetscBool),arg1,arg2)
    return err
end

function PCFactorSetLevels(arg1::PC{Complex128},arg2::Integer)
    err = ccall((:PCFactorSetLevels,petscComplexDouble),PetscErrorCode,(PC{Complex128},Int64),arg1,arg2)
    return err
end

function PCFactorGetLevels(arg1::PC{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PCFactorGetLevels,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function PCFactorSetDropTolerance(arg1::PC{Complex128},arg2::Float64,arg3::Float64,arg4::Integer)
    err = ccall((:PCFactorSetDropTolerance,petscComplexDouble),PetscErrorCode,(PC{Complex128},Float64,Float64,Int64),arg1,arg2,arg3,arg4)
    return err
end

function PCASMSetLocalSubdomains(arg1::PC{Complex128},arg2::Integer,arg3::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}},arg4::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:PCASMSetLocalSubdomains,petscComplexDouble),PetscErrorCode,(PC{Complex128},Int64,Ptr{IS{Complex128}},Ptr{IS{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function PCASMSetTotalSubdomains(arg1::PC{Complex128},arg2::Integer,arg3::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}},arg4::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:PCASMSetTotalSubdomains,petscComplexDouble),PetscErrorCode,(PC{Complex128},Int64,Ptr{IS{Complex128}},Ptr{IS{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function PCASMSetOverlap(arg1::PC{Complex128},arg2::Integer)
    err = ccall((:PCASMSetOverlap,petscComplexDouble),PetscErrorCode,(PC{Complex128},Int64),arg1,arg2)
    return err
end

function PCASMSetDMSubdomains(arg1::PC{Complex128},arg2::PetscBool)
    err = ccall((:PCASMSetDMSubdomains,petscComplexDouble),PetscErrorCode,(PC{Complex128},PetscBool),arg1,arg2)
    return err
end

function PCASMGetDMSubdomains(arg1::PC{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCASMGetDMSubdomains,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCASMSetSortIndices(arg1::PC{Complex128},arg2::PetscBool)
    err = ccall((:PCASMSetSortIndices,petscComplexDouble),PetscErrorCode,(PC{Complex128},PetscBool),arg1,arg2)
    return err
end

function PCASMSetType(arg1::PC{Complex128},arg2::PCASMType)
    err = ccall((:PCASMSetType,petscComplexDouble),PetscErrorCode,(PC{Complex128},PCASMType),arg1,arg2)
    return err
end

function PCASMGetType(arg1::PC{Complex128},arg2::Union{Ptr{PCASMType},StridedArray{PCASMType},Ptr{PCASMType},Ref{PCASMType}})
    err = ccall((:PCASMGetType,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{PCASMType}),arg1,arg2)
    return err
end

function PCASMSetLocalType(arg1::PC{Complex128},arg2::PCCompositeType)
    err = ccall((:PCASMSetLocalType,petscComplexDouble),PetscErrorCode,(PC{Complex128},PCCompositeType),arg1,arg2)
    return err
end

function PCASMGetLocalType(arg1::PC{Complex128},arg2::Union{Ptr{PCCompositeType},StridedArray{PCCompositeType},Ptr{PCCompositeType},Ref{PCCompositeType}})
    err = ccall((:PCASMGetLocalType,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{PCCompositeType}),arg1,arg2)
    return err
end

function PCASMCreateSubdomains(arg1::Mat{Complex128},arg2::Integer,arg3::Union{Ptr{Ptr{IS{Complex128}}},StridedArray{Ptr{IS{Complex128}}},Ptr{Ptr{IS{Complex128}}},Ref{Ptr{IS{Complex128}}}})
    err = ccall((:PCASMCreateSubdomains,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64,Ptr{Ptr{IS{Complex128}}}),arg1,arg2,arg3)
    return err
end

function PCASMDestroySubdomains(arg1::Integer,arg2::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}},arg3::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:PCASMDestroySubdomains,petscComplexDouble),PetscErrorCode,(Int64,Ptr{IS{Complex128}},Ptr{IS{Complex128}}),arg1,arg2,arg3)
    return err
end

function PCASMCreateSubdomains2D(arg1::Integer,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Ptr{IS{Complex128}}},StridedArray{Ptr{IS{Complex128}}},Ptr{Ptr{IS{Complex128}}},Ref{Ptr{IS{Complex128}}}},arg9::Union{Ptr{Ptr{IS{Complex128}}},StridedArray{Ptr{IS{Complex128}}},Ptr{Ptr{IS{Complex128}}},Ref{Ptr{IS{Complex128}}}})
    err = ccall((:PCASMCreateSubdomains2D,petscComplexDouble),PetscErrorCode,(Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Ptr{IS{Complex128}}},Ptr{Ptr{IS{Complex128}}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
    return err
end

function PCASMGetLocalSubdomains(arg1::PC{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{IS{Complex128}}},StridedArray{Ptr{IS{Complex128}}},Ptr{Ptr{IS{Complex128}}},Ref{Ptr{IS{Complex128}}}},arg4::Union{Ptr{Ptr{IS{Complex128}}},StridedArray{Ptr{IS{Complex128}}},Ptr{Ptr{IS{Complex128}}},Ref{Ptr{IS{Complex128}}}})
    err = ccall((:PCASMGetLocalSubdomains,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{Int64},Ptr{Ptr{IS{Complex128}}},Ptr{Ptr{IS{Complex128}}}),arg1,arg2,arg3,arg4)
    return err
end

function PCASMGetLocalSubmatrices(arg1::PC{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Mat{Complex128}}},StridedArray{Ptr{Mat{Complex128}}},Ptr{Ptr{Mat{Complex128}}},Ref{Ptr{Mat{Complex128}}}})
    err = ccall((:PCASMGetLocalSubmatrices,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{Int64},Ptr{Ptr{Mat{Complex128}}}),arg1,arg2,arg3)
    return err
end

function PCGASMSetTotalSubdomains(arg1::PC{Complex128},arg2::Integer)
    err = ccall((:PCGASMSetTotalSubdomains,petscComplexDouble),PetscErrorCode,(PC{Complex128},Int64),arg1,arg2)
    return err
end

function PCGASMSetSubdomains(arg1::PC{Complex128},arg2::Integer,arg3::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}},arg4::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:PCGASMSetSubdomains,petscComplexDouble),PetscErrorCode,(PC{Complex128},Int64,Ptr{IS{Complex128}},Ptr{IS{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function PCGASMSetOverlap(arg1::PC{Complex128},arg2::Integer)
    err = ccall((:PCGASMSetOverlap,petscComplexDouble),PetscErrorCode,(PC{Complex128},Int64),arg1,arg2)
    return err
end

function PCGASMSetUseDMSubdomains(arg1::PC{Complex128},arg2::PetscBool)
    err = ccall((:PCGASMSetUseDMSubdomains,petscComplexDouble),PetscErrorCode,(PC{Complex128},PetscBool),arg1,arg2)
    return err
end

function PCGASMGetUseDMSubdomains(arg1::PC{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCGASMGetUseDMSubdomains,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCGASMSetSortIndices(arg1::PC{Complex128},arg2::PetscBool)
    err = ccall((:PCGASMSetSortIndices,petscComplexDouble),PetscErrorCode,(PC{Complex128},PetscBool),arg1,arg2)
    return err
end

function PCGASMSetType(arg1::PC{Complex128},arg2::PCGASMType)
    err = ccall((:PCGASMSetType,petscComplexDouble),PetscErrorCode,(PC{Complex128},PCGASMType),arg1,arg2)
    return err
end

function PCGASMCreateSubdomains(arg1::Mat{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{IS{Complex128}}},StridedArray{Ptr{IS{Complex128}}},Ptr{Ptr{IS{Complex128}}},Ref{Ptr{IS{Complex128}}}})
    err = ccall((:PCGASMCreateSubdomains,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Int64,Ptr{Int64},Ptr{Ptr{IS{Complex128}}}),arg1,arg2,arg3,arg4)
    return err
end

function PCGASMDestroySubdomains(arg1::Integer,arg2::Union{Ptr{Ptr{IS{Complex128}}},StridedArray{Ptr{IS{Complex128}}},Ptr{Ptr{IS{Complex128}}},Ref{Ptr{IS{Complex128}}}},arg3::Union{Ptr{Ptr{IS{Complex128}}},StridedArray{Ptr{IS{Complex128}}},Ptr{Ptr{IS{Complex128}}},Ref{Ptr{IS{Complex128}}}})
    err = ccall((:PCGASMDestroySubdomains,petscComplexDouble),PetscErrorCode,(Int64,Ptr{Ptr{IS{Complex128}}},Ptr{Ptr{IS{Complex128}}}),arg1,arg2,arg3)
    return err
end

function PCGASMCreateSubdomains2D(arg1::PC{Complex128},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg9::Union{Ptr{Ptr{IS{Complex128}}},StridedArray{Ptr{IS{Complex128}}},Ptr{Ptr{IS{Complex128}}},Ref{Ptr{IS{Complex128}}}},arg10::Union{Ptr{Ptr{IS{Complex128}}},StridedArray{Ptr{IS{Complex128}}},Ptr{Ptr{IS{Complex128}}},Ref{Ptr{IS{Complex128}}}})
    err = ccall((:PCGASMCreateSubdomains2D,petscComplexDouble),PetscErrorCode,(PC{Complex128},Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Ptr{IS{Complex128}}},Ptr{Ptr{IS{Complex128}}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function PCGASMGetSubdomains(arg1::PC{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{IS{Complex128}}},StridedArray{Ptr{IS{Complex128}}},Ptr{Ptr{IS{Complex128}}},Ref{Ptr{IS{Complex128}}}},arg4::Union{Ptr{Ptr{IS{Complex128}}},StridedArray{Ptr{IS{Complex128}}},Ptr{Ptr{IS{Complex128}}},Ref{Ptr{IS{Complex128}}}})
    err = ccall((:PCGASMGetSubdomains,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{Int64},Ptr{Ptr{IS{Complex128}}},Ptr{Ptr{IS{Complex128}}}),arg1,arg2,arg3,arg4)
    return err
end

function PCGASMGetSubmatrices(arg1::PC{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Mat{Complex128}}},StridedArray{Ptr{Mat{Complex128}}},Ptr{Ptr{Mat{Complex128}}},Ref{Ptr{Mat{Complex128}}}})
    err = ccall((:PCGASMGetSubmatrices,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{Int64},Ptr{Ptr{Mat{Complex128}}}),arg1,arg2,arg3)
    return err
end

function PCCompositeSetType(arg1::PC{Complex128},arg2::PCCompositeType)
    err = ccall((:PCCompositeSetType,petscComplexDouble),PetscErrorCode,(PC{Complex128},PCCompositeType),arg1,arg2)
    return err
end

function PCCompositeGetType(arg1::PC{Complex128},arg2::Union{Ptr{PCCompositeType},StridedArray{PCCompositeType},Ptr{PCCompositeType},Ref{PCCompositeType}})
    err = ccall((:PCCompositeGetType,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{PCCompositeType}),arg1,arg2)
    return err
end

function PCCompositeAddPC(arg1::PC{Complex128},arg2::PCType)
    err = ccall((:PCCompositeAddPC,petscComplexDouble),PetscErrorCode,(PC{Complex128},PCType),arg1,arg2)
    return err
end

function PCCompositeGetPC(arg1::PC{Complex128},arg2::Integer,arg3::Union{Ptr{PC{Complex128}},StridedArray{PC{Complex128}},Ptr{PC{Complex128}},Ref{PC{Complex128}}})
    err = ccall((:PCCompositeGetPC,petscComplexDouble),PetscErrorCode,(PC{Complex128},Int64,Ptr{PC{Complex128}}),arg1,arg2,arg3)
    return err
end

function PCCompositeSpecialSetAlpha(arg1::PC{Complex128},arg2::Complex128)
    err = ccall((:PCCompositeSpecialSetAlpha,petscComplexDouble),PetscErrorCode,(PC{Complex128},Complex128),arg1,arg2)
    return err
end

function PCRedundantSetNumber(arg1::PC{Complex128},arg2::Integer)
    err = ccall((:PCRedundantSetNumber,petscComplexDouble),PetscErrorCode,(PC{Complex128},Int64),arg1,arg2)
    return err
end

function PCRedundantSetScatter(arg1::PC{Complex128},arg2::VecScatter{Complex128},arg3::VecScatter{Complex128})
    err = ccall((:PCRedundantSetScatter,petscComplexDouble),PetscErrorCode,(PC{Complex128},VecScatter{Complex128},VecScatter{Complex128}),arg1,arg2,arg3)
    return err
end

function PCRedundantGetOperators(arg1::PC{Complex128},arg2::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}},arg3::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:PCRedundantGetOperators,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{Mat{Complex128}},Ptr{Mat{Complex128}}),arg1,arg2,arg3)
    return err
end

function PCSPAISetEpsilon(arg1::PC{Complex128},arg2::Cdouble)
    err = ccall((:PCSPAISetEpsilon,petscComplexDouble),PetscErrorCode,(PC{Complex128},Cdouble),arg1,arg2)
    return err
end

function PCSPAISetNBSteps(arg1::PC{Complex128},arg2::Integer)
    err = ccall((:PCSPAISetNBSteps,petscComplexDouble),PetscErrorCode,(PC{Complex128},Int64),arg1,arg2)
    return err
end

function PCSPAISetMax(arg1::PC{Complex128},arg2::Integer)
    err = ccall((:PCSPAISetMax,petscComplexDouble),PetscErrorCode,(PC{Complex128},Int64),arg1,arg2)
    return err
end

function PCSPAISetMaxNew(arg1::PC{Complex128},arg2::Integer)
    err = ccall((:PCSPAISetMaxNew,petscComplexDouble),PetscErrorCode,(PC{Complex128},Int64),arg1,arg2)
    return err
end

function PCSPAISetBlockSize(arg1::PC{Complex128},arg2::Integer)
    err = ccall((:PCSPAISetBlockSize,petscComplexDouble),PetscErrorCode,(PC{Complex128},Int64),arg1,arg2)
    return err
end

function PCSPAISetCacheSize(arg1::PC{Complex128},arg2::Integer)
    err = ccall((:PCSPAISetCacheSize,petscComplexDouble),PetscErrorCode,(PC{Complex128},Int64),arg1,arg2)
    return err
end

function PCSPAISetVerbose(arg1::PC{Complex128},arg2::Integer)
    err = ccall((:PCSPAISetVerbose,petscComplexDouble),PetscErrorCode,(PC{Complex128},Int64),arg1,arg2)
    return err
end

function PCSPAISetSp(arg1::PC{Complex128},arg2::Integer)
    err = ccall((:PCSPAISetSp,petscComplexDouble),PetscErrorCode,(PC{Complex128},Int64),arg1,arg2)
    return err
end

function PCHYPRESetType(arg1::PC{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PCHYPRESetType,petscComplexDouble),PetscErrorCode,(PC{Complex128},Cstring),arg1,arg2)
    return err
end

function PCHYPREGetType(arg1::PC{Complex128},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PCHYPREGetType,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PCHYPRESetDiscreteGradient(arg1::PC{Complex128},arg2::Mat{Complex128})
    err = ccall((:PCHYPRESetDiscreteGradient,petscComplexDouble),PetscErrorCode,(PC{Complex128},Mat{Complex128}),arg1,arg2)
    return err
end

function PCHYPRESetDiscreteCurl(arg1::PC{Complex128},arg2::Mat{Complex128})
    err = ccall((:PCHYPRESetDiscreteCurl,petscComplexDouble),PetscErrorCode,(PC{Complex128},Mat{Complex128}),arg1,arg2)
    return err
end

function PCHYPRESetEdgeConstantVectors(arg1::PC{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128},arg4::Vec{Complex128})
    err = ccall((:PCHYPRESetEdgeConstantVectors,petscComplexDouble),PetscErrorCode,(PC{Complex128},Vec{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function PCHYPRESetAlphaPoissonMatrix(arg1::PC{Complex128},arg2::Mat{Complex128})
    err = ccall((:PCHYPRESetAlphaPoissonMatrix,petscComplexDouble),PetscErrorCode,(PC{Complex128},Mat{Complex128}),arg1,arg2)
    return err
end

function PCHYPRESetBetaPoissonMatrix(arg1::PC{Complex128},arg2::Mat{Complex128})
    err = ccall((:PCHYPRESetBetaPoissonMatrix,petscComplexDouble),PetscErrorCode,(PC{Complex128},Mat{Complex128}),arg1,arg2)
    return err
end

function PCBJacobiGetLocalBlocks(arg1::PC{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:PCBJacobiGetLocalBlocks,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3)
    return err
end

function PCBJacobiGetTotalBlocks(arg1::PC{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:PCBJacobiGetTotalBlocks,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3)
    return err
end

function PCFieldSplitSetFields(arg1::PC{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PCFieldSplitSetFields,petscComplexDouble),PetscErrorCode,(PC{Complex128},Cstring,Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PCFieldSplitSetType(arg1::PC{Complex128},arg2::PCCompositeType)
    err = ccall((:PCFieldSplitSetType,petscComplexDouble),PetscErrorCode,(PC{Complex128},PCCompositeType),arg1,arg2)
    return err
end

function PCFieldSplitGetType(arg1::PC{Complex128},arg2::Union{Ptr{PCCompositeType},StridedArray{PCCompositeType},Ptr{PCCompositeType},Ref{PCCompositeType}})
    err = ccall((:PCFieldSplitGetType,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{PCCompositeType}),arg1,arg2)
    return err
end

function PCFieldSplitSetBlockSize(arg1::PC{Complex128},arg2::Integer)
    err = ccall((:PCFieldSplitSetBlockSize,petscComplexDouble),PetscErrorCode,(PC{Complex128},Int64),arg1,arg2)
    return err
end

function PCFieldSplitSetIS(arg1::PC{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::IS{Complex128})
    err = ccall((:PCFieldSplitSetIS,petscComplexDouble),PetscErrorCode,(PC{Complex128},Cstring,IS{Complex128}),arg1,arg2,arg3)
    return err
end

function PCFieldSplitGetIS(arg1::PC{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:PCFieldSplitGetIS,petscComplexDouble),PetscErrorCode,(PC{Complex128},Cstring,Ptr{IS{Complex128}}),arg1,arg2,arg3)
    return err
end

function PCFieldSplitSetDMSplits(arg1::PC{Complex128},arg2::PetscBool)
    err = ccall((:PCFieldSplitSetDMSplits,petscComplexDouble),PetscErrorCode,(PC{Complex128},PetscBool),arg1,arg2)
    return err
end

function PCFieldSplitGetDMSplits(arg1::PC{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCFieldSplitGetDMSplits,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCFieldSplitSetDiagUseAmat(arg1::PC{Complex128},arg2::PetscBool)
    err = ccall((:PCFieldSplitSetDiagUseAmat,petscComplexDouble),PetscErrorCode,(PC{Complex128},PetscBool),arg1,arg2)
    return err
end

function PCFieldSplitGetDiagUseAmat(arg1::PC{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCFieldSplitGetDiagUseAmat,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCFieldSplitSetOffDiagUseAmat(arg1::PC{Complex128},arg2::PetscBool)
    err = ccall((:PCFieldSplitSetOffDiagUseAmat,petscComplexDouble),PetscErrorCode,(PC{Complex128},PetscBool),arg1,arg2)
    return err
end

function PCFieldSplitGetOffDiagUseAmat(arg1::PC{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCFieldSplitGetOffDiagUseAmat,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PETSC_DEPRECATED(arg0::Type{Complex128})
    err = ccall((:PETSC_DEPRECATED,petscComplexDouble),Cint,())
    return err
end

function PCFieldSplitSchurPrecondition(arg1::PC{Complex128},arg2::PCFieldSplitSchurPreType,arg3::Mat{Complex128})
    err = ccall((:PCFieldSplitSchurPrecondition,petscComplexDouble),PetscErrorCode,(PC{Complex128},PCFieldSplitSchurPreType,Mat{Complex128}),arg1,arg2,arg3)
    return err
end

function PCFieldSplitSetSchurPre(arg1::PC{Complex128},arg2::PCFieldSplitSchurPreType,arg3::Mat{Complex128})
    err = ccall((:PCFieldSplitSetSchurPre,petscComplexDouble),PetscErrorCode,(PC{Complex128},PCFieldSplitSchurPreType,Mat{Complex128}),arg1,arg2,arg3)
    return err
end

function PCFieldSplitGetSchurPre(arg1::PC{Complex128},arg2::Union{Ptr{PCFieldSplitSchurPreType},StridedArray{PCFieldSplitSchurPreType},Ptr{PCFieldSplitSchurPreType},Ref{PCFieldSplitSchurPreType}},arg3::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:PCFieldSplitGetSchurPre,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{PCFieldSplitSchurPreType},Ptr{Mat{Complex128}}),arg1,arg2,arg3)
    return err
end

function PCFieldSplitSetSchurFactType(arg1::PC{Complex128},arg2::PCFieldSplitSchurFactType)
    err = ccall((:PCFieldSplitSetSchurFactType,petscComplexDouble),PetscErrorCode,(PC{Complex128},PCFieldSplitSchurFactType),arg1,arg2)
    return err
end

function PCFieldSplitGetSchurBlocks(arg1::PC{Complex128},arg2::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}},arg3::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}},arg4::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}},arg5::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:PCFieldSplitGetSchurBlocks,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{Mat{Complex128}},Ptr{Mat{Complex128}},Ptr{Mat{Complex128}},Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PCFieldSplitSchurGetS(arg1::PC{Complex128},S::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:PCFieldSplitSchurGetS,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{Mat{Complex128}}),arg1,S)
    return err
end

function PCFieldSplitSchurRestoreS(arg1::PC{Complex128},S::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:PCFieldSplitSchurRestoreS,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{Mat{Complex128}}),arg1,S)
    return err
end

function PCGalerkinSetRestriction(arg1::PC{Complex128},arg2::Mat{Complex128})
    err = ccall((:PCGalerkinSetRestriction,petscComplexDouble),PetscErrorCode,(PC{Complex128},Mat{Complex128}),arg1,arg2)
    return err
end

function PCGalerkinSetInterpolation(arg1::PC{Complex128},arg2::Mat{Complex128})
    err = ccall((:PCGalerkinSetInterpolation,petscComplexDouble),PetscErrorCode,(PC{Complex128},Mat{Complex128}),arg1,arg2)
    return err
end

function PCSetCoordinates(arg1::PC{Complex128},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PCSetCoordinates,petscComplexDouble),PetscErrorCode,(PC{Complex128},Int64,Int64,Ptr{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function PCPythonSetType(arg1::PC{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PCPythonSetType,petscComplexDouble),PetscErrorCode,(PC{Complex128},Cstring),arg1,arg2)
    return err
end

function PCSetDM(arg1::PC{Complex128},arg2::DM{Complex128})
    err = ccall((:PCSetDM,petscComplexDouble),PetscErrorCode,(PC{Complex128},DM{Complex128}),arg1,arg2)
    return err
end

function PCGetDM(arg1::PC{Complex128},arg2::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:PCGetDM,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{DM{Complex128}}),arg1,arg2)
    return err
end

function PCSetApplicationContext(arg1::PC{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCSetApplicationContext,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function PCGetApplicationContext(arg1::PC{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCGetApplicationContext,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function PCBiCGStabCUSPSetTolerance(arg1::PC{Complex128},arg2::Float64)
    err = ccall((:PCBiCGStabCUSPSetTolerance,petscComplexDouble),PetscErrorCode,(PC{Complex128},Float64),arg1,arg2)
    return err
end

function PCBiCGStabCUSPSetIterations(arg1::PC{Complex128},arg2::Integer)
    err = ccall((:PCBiCGStabCUSPSetIterations,petscComplexDouble),PetscErrorCode,(PC{Complex128},Int64),arg1,arg2)
    return err
end

function PCBiCGStabCUSPSetUseVerboseMonitor(arg1::PC{Complex128},arg2::PetscBool)
    err = ccall((:PCBiCGStabCUSPSetUseVerboseMonitor,petscComplexDouble),PetscErrorCode,(PC{Complex128},PetscBool),arg1,arg2)
    return err
end

function PCAINVCUSPSetDropTolerance(arg1::PC{Complex128},arg2::Float64)
    err = ccall((:PCAINVCUSPSetDropTolerance,petscComplexDouble),PetscErrorCode,(PC{Complex128},Float64),arg1,arg2)
    return err
end

function PCAINVCUSPUseScaling(arg1::PC{Complex128},arg2::PetscBool)
    err = ccall((:PCAINVCUSPUseScaling,petscComplexDouble),PetscErrorCode,(PC{Complex128},PetscBool),arg1,arg2)
    return err
end

function PCAINVCUSPSetNonzeros(arg1::PC{Complex128},arg2::Integer)
    err = ccall((:PCAINVCUSPSetNonzeros,petscComplexDouble),PetscErrorCode,(PC{Complex128},Int64),arg1,arg2)
    return err
end

function PCAINVCUSPSetLinParameter(arg1::PC{Complex128},arg2::Integer)
    err = ccall((:PCAINVCUSPSetLinParameter,petscComplexDouble),PetscErrorCode,(PC{Complex128},Int64),arg1,arg2)
    return err
end

function PCPARMSSetGlobal(arg1::PC{Complex128},arg2::PCPARMSGlobalType)
    err = ccall((:PCPARMSSetGlobal,petscComplexDouble),PetscErrorCode,(PC{Complex128},PCPARMSGlobalType),arg1,arg2)
    return err
end

function PCPARMSSetLocal(arg1::PC{Complex128},arg2::PCPARMSLocalType)
    err = ccall((:PCPARMSSetLocal,petscComplexDouble),PetscErrorCode,(PC{Complex128},PCPARMSLocalType),arg1,arg2)
    return err
end

function PCPARMSSetSolveTolerances(arg1::PC{Complex128},arg2::Float64,arg3::Integer)
    err = ccall((:PCPARMSSetSolveTolerances,petscComplexDouble),PetscErrorCode,(PC{Complex128},Float64,Int64),arg1,arg2,arg3)
    return err
end

function PCPARMSSetSolveRestart(arg1::PC{Complex128},arg2::Integer)
    err = ccall((:PCPARMSSetSolveRestart,petscComplexDouble),PetscErrorCode,(PC{Complex128},Int64),arg1,arg2)
    return err
end

function PCPARMSSetNonsymPerm(arg1::PC{Complex128},arg2::PetscBool)
    err = ccall((:PCPARMSSetNonsymPerm,petscComplexDouble),PetscErrorCode,(PC{Complex128},PetscBool),arg1,arg2)
    return err
end

function PCPARMSSetFill(arg1::PC{Complex128},arg2::Integer,arg3::Integer,arg4::Integer)
    err = ccall((:PCPARMSSetFill,petscComplexDouble),PetscErrorCode,(PC{Complex128},Int64,Int64,Int64),arg1,arg2,arg3,arg4)
    return err
end

function PCGAMGSetType(arg1::PC{Complex128},arg2::PCGAMGType)
    err = ccall((:PCGAMGSetType,petscComplexDouble),PetscErrorCode,(PC{Complex128},PCGAMGType),arg1,arg2)
    return err
end

function PCGAMGGetType(arg1::PC{Complex128},arg2::Union{Ptr{PCGAMGType},StridedArray{PCGAMGType},Ptr{PCGAMGType},Ref{PCGAMGType}})
    err = ccall((:PCGAMGGetType,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{PCGAMGType}),arg1,arg2)
    return err
end

function PCGAMGSetProcEqLim(arg1::PC{Complex128},arg2::Integer)
    err = ccall((:PCGAMGSetProcEqLim,petscComplexDouble),PetscErrorCode,(PC{Complex128},Int64),arg1,arg2)
    return err
end

function PCGAMGSetRepartitioning(arg1::PC{Complex128},arg2::PetscBool)
    err = ccall((:PCGAMGSetRepartitioning,petscComplexDouble),PetscErrorCode,(PC{Complex128},PetscBool),arg1,arg2)
    return err
end

function PCGAMGSetUseASMAggs(arg1::PC{Complex128},arg2::PetscBool)
    err = ccall((:PCGAMGSetUseASMAggs,petscComplexDouble),PetscErrorCode,(PC{Complex128},PetscBool),arg1,arg2)
    return err
end

function PCGAMGSetSolverType(arg1::PC{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer)
    err = ccall((:PCGAMGSetSolverType,petscComplexDouble),PetscErrorCode,(PC{Complex128},Cstring,Int64),arg1,arg2,arg3)
    return err
end

function PCGAMGSetThreshold(arg1::PC{Complex128},arg2::Float64)
    err = ccall((:PCGAMGSetThreshold,petscComplexDouble),PetscErrorCode,(PC{Complex128},Float64),arg1,arg2)
    return err
end

function PCGAMGSetCoarseEqLim(arg1::PC{Complex128},arg2::Integer)
    err = ccall((:PCGAMGSetCoarseEqLim,petscComplexDouble),PetscErrorCode,(PC{Complex128},Int64),arg1,arg2)
    return err
end

function PCGAMGSetNlevels(arg1::PC{Complex128},arg2::Integer)
    err = ccall((:PCGAMGSetNlevels,petscComplexDouble),PetscErrorCode,(PC{Complex128},Int64),arg1,arg2)
    return err
end

function PCGAMGSetNSmooths(arg1::PC{Complex128},arg2::Integer)
    err = ccall((:PCGAMGSetNSmooths,petscComplexDouble),PetscErrorCode,(PC{Complex128},Int64),arg1,arg2)
    return err
end

function PCGAMGSetSymGraph(arg1::PC{Complex128},arg2::PetscBool)
    err = ccall((:PCGAMGSetSymGraph,petscComplexDouble),PetscErrorCode,(PC{Complex128},PetscBool),arg1,arg2)
    return err
end

function PCGAMGSetSquareGraph(arg1::PC{Complex128},arg2::Integer)
    err = ccall((:PCGAMGSetSquareGraph,petscComplexDouble),PetscErrorCode,(PC{Complex128},Int64),arg1,arg2)
    return err
end

function PCGAMGSetReuseInterpolation(arg1::PC{Complex128},arg2::PetscBool)
    err = ccall((:PCGAMGSetReuseInterpolation,petscComplexDouble),PetscErrorCode,(PC{Complex128},PetscBool),arg1,arg2)
    return err
end

function PCGAMGFinalizePackage(arg0::Type{Complex128})
    err = ccall((:PCGAMGFinalizePackage,petscComplexDouble),PetscErrorCode,())
    return err
end

function PCGAMGInitializePackage(arg0::Type{Complex128})
    err = ccall((:PCGAMGInitializePackage,petscComplexDouble),PetscErrorCode,())
    return err
end

function PCGAMGRegister(arg0::Type{Complex128},arg1::PCGAMGType,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCGAMGRegister,petscComplexDouble),PetscErrorCode,(PCGAMGType,Ptr{Void}),arg1,arg2)
    return err
end

function PCGAMGClassicalSetType(arg1::PC{Complex128},arg2::PCGAMGClassicalType)
    err = ccall((:PCGAMGClassicalSetType,petscComplexDouble),PetscErrorCode,(PC{Complex128},PCGAMGClassicalType),arg1,arg2)
    return err
end

function PCGAMGClassicalGetType(arg1::PC{Complex128},arg2::Union{Ptr{PCGAMGClassicalType},StridedArray{PCGAMGClassicalType},Ptr{PCGAMGClassicalType},Ref{PCGAMGClassicalType}})
    err = ccall((:PCGAMGClassicalGetType,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{PCGAMGClassicalType}),arg1,arg2)
    return err
end

function PCBDDCSetChangeOfBasisMat(arg1::PC{Complex128},arg2::Mat{Complex128})
    err = ccall((:PCBDDCSetChangeOfBasisMat,petscComplexDouble),PetscErrorCode,(PC{Complex128},Mat{Complex128}),arg1,arg2)
    return err
end

function PCBDDCSetPrimalVerticesLocalIS(arg1::PC{Complex128},arg2::IS{Complex128})
    err = ccall((:PCBDDCSetPrimalVerticesLocalIS,petscComplexDouble),PetscErrorCode,(PC{Complex128},IS{Complex128}),arg1,arg2)
    return err
end

function PCBDDCSetCoarseningRatio(arg1::PC{Complex128},arg2::Integer)
    err = ccall((:PCBDDCSetCoarseningRatio,petscComplexDouble),PetscErrorCode,(PC{Complex128},Int64),arg1,arg2)
    return err
end

function PCBDDCSetLevels(arg1::PC{Complex128},arg2::Integer)
    err = ccall((:PCBDDCSetLevels,petscComplexDouble),PetscErrorCode,(PC{Complex128},Int64),arg1,arg2)
    return err
end

function PCBDDCSetNullSpace(arg1::PC{Complex128},arg2::MatNullSpace{Complex128})
    err = ccall((:PCBDDCSetNullSpace,petscComplexDouble),PetscErrorCode,(PC{Complex128},MatNullSpace{Complex128}),arg1,arg2)
    return err
end

function PCBDDCSetDirichletBoundaries(arg1::PC{Complex128},arg2::IS{Complex128})
    err = ccall((:PCBDDCSetDirichletBoundaries,petscComplexDouble),PetscErrorCode,(PC{Complex128},IS{Complex128}),arg1,arg2)
    return err
end

function PCBDDCSetDirichletBoundariesLocal(arg1::PC{Complex128},arg2::IS{Complex128})
    err = ccall((:PCBDDCSetDirichletBoundariesLocal,petscComplexDouble),PetscErrorCode,(PC{Complex128},IS{Complex128}),arg1,arg2)
    return err
end

function PCBDDCGetDirichletBoundaries(arg1::PC{Complex128},arg2::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:PCBDDCGetDirichletBoundaries,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{IS{Complex128}}),arg1,arg2)
    return err
end

function PCBDDCGetDirichletBoundariesLocal(arg1::PC{Complex128},arg2::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:PCBDDCGetDirichletBoundariesLocal,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{IS{Complex128}}),arg1,arg2)
    return err
end

function PCBDDCSetNeumannBoundaries(arg1::PC{Complex128},arg2::IS{Complex128})
    err = ccall((:PCBDDCSetNeumannBoundaries,petscComplexDouble),PetscErrorCode,(PC{Complex128},IS{Complex128}),arg1,arg2)
    return err
end

function PCBDDCSetNeumannBoundariesLocal(arg1::PC{Complex128},arg2::IS{Complex128})
    err = ccall((:PCBDDCSetNeumannBoundariesLocal,petscComplexDouble),PetscErrorCode,(PC{Complex128},IS{Complex128}),arg1,arg2)
    return err
end

function PCBDDCGetNeumannBoundaries(arg1::PC{Complex128},arg2::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:PCBDDCGetNeumannBoundaries,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{IS{Complex128}}),arg1,arg2)
    return err
end

function PCBDDCGetNeumannBoundariesLocal(arg1::PC{Complex128},arg2::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:PCBDDCGetNeumannBoundariesLocal,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{IS{Complex128}}),arg1,arg2)
    return err
end

function PCBDDCSetDofsSplitting(arg1::PC{Complex128},arg2::Integer,arg3::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:PCBDDCSetDofsSplitting,petscComplexDouble),PetscErrorCode,(PC{Complex128},Int64,Ptr{IS{Complex128}}),arg1,arg2,arg3)
    return err
end

function PCBDDCSetDofsSplittingLocal(arg1::PC{Complex128},arg2::Integer,arg3::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:PCBDDCSetDofsSplittingLocal,petscComplexDouble),PetscErrorCode,(PC{Complex128},Int64,Ptr{IS{Complex128}}),arg1,arg2,arg3)
    return err
end

function PCBDDCSetLocalAdjacencyGraph(arg1::PC{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},PetscCopyMode::Integer)
    err = ccall((:PCBDDCSetLocalAdjacencyGraph,petscComplexDouble),PetscErrorCode,(PC{Complex128},Int64,Ptr{Int64},Ptr{Int64},Cint),arg1,arg2,arg3,arg4,PetscCopyMode)
    return err
end

function PCBDDCCreateFETIDPOperators(arg1::PC{Complex128},arg2::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}},arg3::Union{Ptr{PC{Complex128}},StridedArray{PC{Complex128}},Ptr{PC{Complex128}},Ref{PC{Complex128}}})
    err = ccall((:PCBDDCCreateFETIDPOperators,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{Mat{Complex128}},Ptr{PC{Complex128}}),arg1,arg2,arg3)
    return err
end

function PCBDDCMatFETIDPGetRHS(arg1::Mat{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128})
    err = ccall((:PCBDDCMatFETIDPGetRHS,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function PCBDDCMatFETIDPGetSolution(arg1::Mat{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128})
    err = ccall((:PCBDDCMatFETIDPGetSolution,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function PCISSetUseStiffnessScaling(arg1::PC{Complex128},arg2::PetscBool)
    err = ccall((:PCISSetUseStiffnessScaling,petscComplexDouble),PetscErrorCode,(PC{Complex128},PetscBool),arg1,arg2)
    return err
end

function PCISSetSubdomainScalingFactor(arg1::PC{Complex128},arg2::Complex128)
    err = ccall((:PCISSetSubdomainScalingFactor,petscComplexDouble),PetscErrorCode,(PC{Complex128},Complex128),arg1,arg2)
    return err
end

function PCISSetSubdomainDiagonalScaling(arg1::PC{Complex128},arg2::Vec{Complex128})
    err = ccall((:PCISSetSubdomainDiagonalScaling,petscComplexDouble),PetscErrorCode,(PC{Complex128},Vec{Complex128}),arg1,arg2)
    return err
end

function PCMGSetType(arg1::PC{Complex128},arg2::PCMGType)
    err = ccall((:PCMGSetType,petscComplexDouble),PetscErrorCode,(PC{Complex128},PCMGType),arg1,arg2)
    return err
end

function PCMGGetType(arg1::PC{Complex128},arg2::Union{Ptr{PCMGType},StridedArray{PCMGType},Ptr{PCMGType},Ref{PCMGType}})
    err = ccall((:PCMGGetType,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{PCMGType}),arg1,arg2)
    return err
end

function PCMGSetLevels(arg1::PC{Complex128},arg2::Integer,arg3::Union{Ptr{MPI_Comm},StridedArray{MPI_Comm},Ptr{MPI_Comm},Ref{MPI_Comm}})
    err = ccall((:PCMGSetLevels,petscComplexDouble),PetscErrorCode,(PC{Complex128},Int64,Ptr{comm_type}),arg1,arg2,arg3)
    return err
end

function PCMGGetLevels(arg1::PC{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PCMGGetLevels,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function PCMGSetNumberSmoothUp(arg1::PC{Complex128},arg2::Integer)
    err = ccall((:PCMGSetNumberSmoothUp,petscComplexDouble),PetscErrorCode,(PC{Complex128},Int64),arg1,arg2)
    return err
end

function PCMGSetNumberSmoothDown(arg1::PC{Complex128},arg2::Integer)
    err = ccall((:PCMGSetNumberSmoothDown,petscComplexDouble),PetscErrorCode,(PC{Complex128},Int64),arg1,arg2)
    return err
end

function PCMGSetCycleType(arg1::PC{Complex128},arg2::PCMGCycleType)
    err = ccall((:PCMGSetCycleType,petscComplexDouble),PetscErrorCode,(PC{Complex128},PCMGCycleType),arg1,arg2)
    return err
end

function PCMGSetCycleTypeOnLevel(arg1::PC{Complex128},arg2::Integer,arg3::PCMGCycleType)
    err = ccall((:PCMGSetCycleTypeOnLevel,petscComplexDouble),PetscErrorCode,(PC{Complex128},Int64,PCMGCycleType),arg1,arg2,arg3)
    return err
end

function PCMGSetCyclesOnLevel(arg1::PC{Complex128},arg2::Integer,arg3::Integer)
    err = ccall((:PCMGSetCyclesOnLevel,petscComplexDouble),PetscErrorCode,(PC{Complex128},Int64,Int64),arg1,arg2,arg3)
    return err
end

function PCMGMultiplicativeSetCycles(arg1::PC{Complex128},arg2::Integer)
    err = ccall((:PCMGMultiplicativeSetCycles,petscComplexDouble),PetscErrorCode,(PC{Complex128},Int64),arg1,arg2)
    return err
end

function PCMGSetGalerkin(arg1::PC{Complex128},arg2::PetscBool)
    err = ccall((:PCMGSetGalerkin,petscComplexDouble),PetscErrorCode,(PC{Complex128},PetscBool),arg1,arg2)
    return err
end

function PCMGGetGalerkin(arg1::PC{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCMGGetGalerkin,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCMGSetRhs(arg1::PC{Complex128},arg2::Integer,arg3::Vec{Complex128})
    err = ccall((:PCMGSetRhs,petscComplexDouble),PetscErrorCode,(PC{Complex128},Int64,Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function PCMGSetX(arg1::PC{Complex128},arg2::Integer,arg3::Vec{Complex128})
    err = ccall((:PCMGSetX,petscComplexDouble),PetscErrorCode,(PC{Complex128},Int64,Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function PCMGSetR(arg1::PC{Complex128},arg2::Integer,arg3::Vec{Complex128})
    err = ccall((:PCMGSetR,petscComplexDouble),PetscErrorCode,(PC{Complex128},Int64,Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function PCMGSetRestriction(arg1::PC{Complex128},arg2::Integer,arg3::Mat{Complex128})
    err = ccall((:PCMGSetRestriction,petscComplexDouble),PetscErrorCode,(PC{Complex128},Int64,Mat{Complex128}),arg1,arg2,arg3)
    return err
end

function PCMGGetRestriction(arg1::PC{Complex128},arg2::Integer,arg3::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:PCMGGetRestriction,petscComplexDouble),PetscErrorCode,(PC{Complex128},Int64,Ptr{Mat{Complex128}}),arg1,arg2,arg3)
    return err
end

function PCMGSetInterpolation(arg1::PC{Complex128},arg2::Integer,arg3::Mat{Complex128})
    err = ccall((:PCMGSetInterpolation,petscComplexDouble),PetscErrorCode,(PC{Complex128},Int64,Mat{Complex128}),arg1,arg2,arg3)
    return err
end

function PCMGGetInterpolation(arg1::PC{Complex128},arg2::Integer,arg3::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:PCMGGetInterpolation,petscComplexDouble),PetscErrorCode,(PC{Complex128},Int64,Ptr{Mat{Complex128}}),arg1,arg2,arg3)
    return err
end

function PCMGSetRScale(arg1::PC{Complex128},arg2::Integer,arg3::Vec{Complex128})
    err = ccall((:PCMGSetRScale,petscComplexDouble),PetscErrorCode,(PC{Complex128},Int64,Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function PCMGGetRScale(arg1::PC{Complex128},arg2::Integer,arg3::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:PCMGGetRScale,petscComplexDouble),PetscErrorCode,(PC{Complex128},Int64,Ptr{Vec{Complex128}}),arg1,arg2,arg3)
    return err
end

function PCMGSetResidual(arg1::PC{Complex128},arg2::Integer,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Mat{Complex128})
    err = ccall((:PCMGSetResidual,petscComplexDouble),PetscErrorCode,(PC{Complex128},Int64,Ptr{Void},Mat{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function PCMGResidualDefault(arg1::Mat{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128},arg4::Vec{Complex128})
    err = ccall((:PCMGResidualDefault,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Vec{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function KSPInitializePackage(arg0::Type{Complex128})
    err = ccall((:KSPInitializePackage,petscComplexDouble),PetscErrorCode,())
    return err
end

function KSPCreate(arg1::MPI_Comm,arg2::Union{Ptr{KSP{Complex128}},StridedArray{KSP{Complex128}},Ptr{KSP{Complex128}},Ref{KSP{Complex128}}})
    err = ccall((:KSPCreate,petscComplexDouble),PetscErrorCode,(comm_type,Ptr{KSP{Complex128}}),arg1,arg2)
    return err
end

function KSPSetType(arg1::KSP{Complex128},arg2::KSPType)
    err = ccall((:KSPSetType,petscComplexDouble),PetscErrorCode,(KSP{Complex128},KSPType),arg1,arg2)
    return err
end

function KSPGetType(arg1::KSP{Complex128},arg2::Union{Ptr{KSPType},StridedArray{KSPType},Ptr{KSPType},Ref{KSPType}})
    err = ccall((:KSPGetType,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{KSPType}),arg1,arg2)
    return err
end

function KSPSetUp(arg1::KSP{Complex128})
    err = ccall((:KSPSetUp,petscComplexDouble),PetscErrorCode,(KSP{Complex128},),arg1)
    return err
end

function KSPSetUpOnBlocks(arg1::KSP{Complex128})
    err = ccall((:KSPSetUpOnBlocks,petscComplexDouble),PetscErrorCode,(KSP{Complex128},),arg1)
    return err
end

function KSPSolve(arg1::KSP{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128})
    err = ccall((:KSPSolve,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function KSPSolveTranspose(arg1::KSP{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128})
    err = ccall((:KSPSolveTranspose,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function KSPReset(arg1::KSP{Complex128})
    err = ccall((:KSPReset,petscComplexDouble),PetscErrorCode,(KSP{Complex128},),arg1)
    return err
end

function KSPDestroy(arg1::Union{Ptr{KSP{Complex128}},StridedArray{KSP{Complex128}},Ptr{KSP{Complex128}},Ref{KSP{Complex128}}})
    err = ccall((:KSPDestroy,petscComplexDouble),PetscErrorCode,(Ptr{KSP{Complex128}},),arg1)
    return err
end

function KSPSetReusePreconditioner(arg1::KSP{Complex128},arg2::PetscBool)
    err = ccall((:KSPSetReusePreconditioner,petscComplexDouble),PetscErrorCode,(KSP{Complex128},PetscBool),arg1,arg2)
    return err
end

function KSPSetSkipPCSetFromOptions(arg1::KSP{Complex128},arg2::PetscBool)
    err = ccall((:KSPSetSkipPCSetFromOptions,petscComplexDouble),PetscErrorCode,(KSP{Complex128},PetscBool),arg1,arg2)
    return err
end

function KSPRegister(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPRegister,petscComplexDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function KSPSetPCSide(arg1::KSP{Complex128},arg2::PCSide)
    err = ccall((:KSPSetPCSide,petscComplexDouble),PetscErrorCode,(KSP{Complex128},PCSide),arg1,arg2)
    return err
end

function KSPGetPCSide(arg1::KSP{Complex128},arg2::Union{Ptr{PCSide},StridedArray{PCSide},Ptr{PCSide},Ref{PCSide}})
    err = ccall((:KSPGetPCSide,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{PCSide}),arg1,arg2)
    return err
end

function KSPSetTolerances(arg1::KSP{Complex128},arg2::Float64,arg3::Float64,arg4::Float64,arg5::Integer)
    err = ccall((:KSPSetTolerances,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Float64,Float64,Float64,Int64),arg1,arg2,arg3,arg4,arg5)
    return err
end

function KSPGetTolerances(arg1::KSP{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:KSPGetTolerances,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function KSPSetInitialGuessNonzero(arg1::KSP{Complex128},arg2::PetscBool)
    err = ccall((:KSPSetInitialGuessNonzero,petscComplexDouble),PetscErrorCode,(KSP{Complex128},PetscBool),arg1,arg2)
    return err
end

function KSPGetInitialGuessNonzero(arg1::KSP{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:KSPGetInitialGuessNonzero,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function KSPSetInitialGuessKnoll(arg1::KSP{Complex128},arg2::PetscBool)
    err = ccall((:KSPSetInitialGuessKnoll,petscComplexDouble),PetscErrorCode,(KSP{Complex128},PetscBool),arg1,arg2)
    return err
end

function KSPGetInitialGuessKnoll(arg1::KSP{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:KSPGetInitialGuessKnoll,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function KSPSetErrorIfNotConverged(arg1::KSP{Complex128},arg2::PetscBool)
    err = ccall((:KSPSetErrorIfNotConverged,petscComplexDouble),PetscErrorCode,(KSP{Complex128},PetscBool),arg1,arg2)
    return err
end

function KSPGetErrorIfNotConverged(arg1::KSP{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:KSPGetErrorIfNotConverged,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function KSPSetComputeEigenvalues(arg1::KSP{Complex128},arg2::PetscBool)
    err = ccall((:KSPSetComputeEigenvalues,petscComplexDouble),PetscErrorCode,(KSP{Complex128},PetscBool),arg1,arg2)
    return err
end

function KSPGetComputeEigenvalues(arg1::KSP{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:KSPGetComputeEigenvalues,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function KSPSetComputeSingularValues(arg1::KSP{Complex128},arg2::PetscBool)
    err = ccall((:KSPSetComputeSingularValues,petscComplexDouble),PetscErrorCode,(KSP{Complex128},PetscBool),arg1,arg2)
    return err
end

function KSPGetComputeSingularValues(arg1::KSP{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:KSPGetComputeSingularValues,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function KSPGetRhs(arg1::KSP{Complex128},arg2::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:KSPGetRhs,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{Vec{Complex128}}),arg1,arg2)
    return err
end

function KSPGetSolution(arg1::KSP{Complex128},arg2::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:KSPGetSolution,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{Vec{Complex128}}),arg1,arg2)
    return err
end

function KSPGetResidualNorm(arg1::KSP{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:KSPGetResidualNorm,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{Float64}),arg1,arg2)
    return err
end

function KSPGetIterationNumber(arg1::KSP{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:KSPGetIterationNumber,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function KSPGetTotalIterations(arg1::KSP{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:KSPGetTotalIterations,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function KSPCreateVecs(arg1::KSP{Complex128},arg2::Integer,arg3::Union{Ptr{Ptr{Vec{Complex128}}},StridedArray{Ptr{Vec{Complex128}}},Ptr{Ptr{Vec{Complex128}}},Ref{Ptr{Vec{Complex128}}}},arg4::Integer,arg5::Union{Ptr{Ptr{Vec{Complex128}}},StridedArray{Ptr{Vec{Complex128}}},Ptr{Ptr{Vec{Complex128}}},Ref{Ptr{Vec{Complex128}}}})
    err = ccall((:KSPCreateVecs,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Int64,Ptr{Ptr{Vec{Complex128}}},Int64,Ptr{Ptr{Vec{Complex128}}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function KSPSetPostSolve(arg1::KSP{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPSetPostSolve,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function KSPSetPC(arg1::KSP{Complex128},arg2::PC{Complex128})
    err = ccall((:KSPSetPC,petscComplexDouble),PetscErrorCode,(KSP{Complex128},PC{Complex128}),arg1,arg2)
    return err
end

function KSPGetPC(arg1::KSP{Complex128},arg2::Union{Ptr{PC{Complex128}},StridedArray{PC{Complex128}},Ptr{PC{Complex128}},Ref{PC{Complex128}}})
    err = ccall((:KSPGetPC,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{PC{Complex128}}),arg1,arg2)
    return err
end

function KSPMonitor(arg1::KSP{Complex128},arg2::Integer,arg3::Float64)
    err = ccall((:KSPMonitor,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Int64,Float64),arg1,arg2,arg3)
    return err
end

function KSPMonitorSet(arg1::KSP{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPMonitorSet,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPMonitorCancel(arg1::KSP{Complex128})
    err = ccall((:KSPMonitorCancel,petscComplexDouble),PetscErrorCode,(KSP{Complex128},),arg1)
    return err
end

function KSPGetMonitorContext(arg1::KSP{Complex128},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:KSPGetMonitorContext,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{Ptr{Void}}),arg1,arg2)
    return err
end

function KSPGetResidualHistory(arg1::KSP{Complex128},arg2::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:KSPGetResidualHistory,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{Ptr{Float64}},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function KSPSetResidualHistory(arg1::KSP{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Integer,arg4::PetscBool)
    err = ccall((:KSPSetResidualHistory,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{Float64},Int64,PetscBool),arg1,arg2,arg3,arg4)
    return err
end

function KSPBuildSolutionDefault(arg1::KSP{Complex128},arg2::Vec{Complex128},arg3::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:KSPBuildSolutionDefault,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Vec{Complex128},Ptr{Vec{Complex128}}),arg1,arg2,arg3)
    return err
end

function KSPBuildResidualDefault(arg1::KSP{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128},arg4::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:KSPBuildResidualDefault,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Vec{Complex128},Vec{Complex128},Ptr{Vec{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function KSPDestroyDefault(arg1::KSP{Complex128})
    err = ccall((:KSPDestroyDefault,petscComplexDouble),PetscErrorCode,(KSP{Complex128},),arg1)
    return err
end

function KSPSetWorkVecs(arg1::KSP{Complex128},arg2::Integer)
    err = ccall((:KSPSetWorkVecs,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Int64),arg1,arg2)
    return err
end

function PCKSPGetKSP(arg1::PC{Complex128},arg2::Union{Ptr{KSP{Complex128}},StridedArray{KSP{Complex128}},Ptr{KSP{Complex128}},Ref{KSP{Complex128}}})
    err = ccall((:PCKSPGetKSP,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{KSP{Complex128}}),arg1,arg2)
    return err
end

function PCBJacobiGetSubKSP(arg1::PC{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{KSP{Complex128}}},StridedArray{Ptr{KSP{Complex128}}},Ptr{Ptr{KSP{Complex128}}},Ref{Ptr{KSP{Complex128}}}})
    err = ccall((:PCBJacobiGetSubKSP,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{Int64},Ptr{Int64},Ptr{Ptr{KSP{Complex128}}}),arg1,arg2,arg3,arg4)
    return err
end

function PCASMGetSubKSP(arg1::PC{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{KSP{Complex128}}},StridedArray{Ptr{KSP{Complex128}}},Ptr{Ptr{KSP{Complex128}}},Ref{Ptr{KSP{Complex128}}}})
    err = ccall((:PCASMGetSubKSP,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{Int64},Ptr{Int64},Ptr{Ptr{KSP{Complex128}}}),arg1,arg2,arg3,arg4)
    return err
end

function PCGASMGetSubKSP(arg1::PC{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{KSP{Complex128}}},StridedArray{Ptr{KSP{Complex128}}},Ptr{Ptr{KSP{Complex128}}},Ref{Ptr{KSP{Complex128}}}})
    err = ccall((:PCGASMGetSubKSP,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{Int64},Ptr{Int64},Ptr{Ptr{KSP{Complex128}}}),arg1,arg2,arg3,arg4)
    return err
end

function PCFieldSplitGetSubKSP(arg1::PC{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{KSP{Complex128}}},StridedArray{Ptr{KSP{Complex128}}},Ptr{Ptr{KSP{Complex128}}},Ref{Ptr{KSP{Complex128}}}})
    err = ccall((:PCFieldSplitGetSubKSP,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{Int64},Ptr{Ptr{KSP{Complex128}}}),arg1,arg2,arg3)
    return err
end

function PCMGGetSmoother(arg1::PC{Complex128},arg2::Integer,arg3::Union{Ptr{KSP{Complex128}},StridedArray{KSP{Complex128}},Ptr{KSP{Complex128}},Ref{KSP{Complex128}}})
    err = ccall((:PCMGGetSmoother,petscComplexDouble),PetscErrorCode,(PC{Complex128},Int64,Ptr{KSP{Complex128}}),arg1,arg2,arg3)
    return err
end

function PCMGGetSmootherDown(arg1::PC{Complex128},arg2::Integer,arg3::Union{Ptr{KSP{Complex128}},StridedArray{KSP{Complex128}},Ptr{KSP{Complex128}},Ref{KSP{Complex128}}})
    err = ccall((:PCMGGetSmootherDown,petscComplexDouble),PetscErrorCode,(PC{Complex128},Int64,Ptr{KSP{Complex128}}),arg1,arg2,arg3)
    return err
end

function PCMGGetSmootherUp(arg1::PC{Complex128},arg2::Integer,arg3::Union{Ptr{KSP{Complex128}},StridedArray{KSP{Complex128}},Ptr{KSP{Complex128}},Ref{KSP{Complex128}}})
    err = ccall((:PCMGGetSmootherUp,petscComplexDouble),PetscErrorCode,(PC{Complex128},Int64,Ptr{KSP{Complex128}}),arg1,arg2,arg3)
    return err
end

function PCMGGetCoarseSolve(arg1::PC{Complex128},arg2::Union{Ptr{KSP{Complex128}},StridedArray{KSP{Complex128}},Ptr{KSP{Complex128}},Ref{KSP{Complex128}}})
    err = ccall((:PCMGGetCoarseSolve,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{KSP{Complex128}}),arg1,arg2)
    return err
end

function PCGalerkinGetKSP(arg1::PC{Complex128},arg2::Union{Ptr{KSP{Complex128}},StridedArray{KSP{Complex128}},Ptr{KSP{Complex128}},Ref{KSP{Complex128}}})
    err = ccall((:PCGalerkinGetKSP,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{KSP{Complex128}}),arg1,arg2)
    return err
end

function KSPBuildSolution(arg1::KSP{Complex128},arg2::Vec{Complex128},arg3::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:KSPBuildSolution,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Vec{Complex128},Ptr{Vec{Complex128}}),arg1,arg2,arg3)
    return err
end

function KSPBuildResidual(arg1::KSP{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128},arg4::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:KSPBuildResidual,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Vec{Complex128},Vec{Complex128},Ptr{Vec{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function KSPRichardsonSetScale(arg1::KSP{Complex128},arg2::Float64)
    err = ccall((:KSPRichardsonSetScale,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Float64),arg1,arg2)
    return err
end

function KSPRichardsonSetSelfScale(arg1::KSP{Complex128},arg2::PetscBool)
    err = ccall((:KSPRichardsonSetSelfScale,petscComplexDouble),PetscErrorCode,(KSP{Complex128},PetscBool),arg1,arg2)
    return err
end

function KSPChebyshevSetEigenvalues(arg1::KSP{Complex128},arg2::Float64,arg3::Float64)
    err = ccall((:KSPChebyshevSetEigenvalues,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Float64,Float64),arg1,arg2,arg3)
    return err
end

function KSPChebyshevEstEigSet(arg1::KSP{Complex128},arg2::Float64,arg3::Float64,arg4::Float64,arg5::Float64)
    err = ccall((:KSPChebyshevEstEigSet,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Float64,Float64,Float64,Float64),arg1,arg2,arg3,arg4,arg5)
    return err
end

function KSPChebyshevEstEigSetRandom(arg1::KSP{Complex128},arg2::PetscRandom{Complex128})
    err = ccall((:KSPChebyshevEstEigSetRandom,petscComplexDouble),PetscErrorCode,(KSP{Complex128},PetscRandom{Complex128}),arg1,arg2)
    return err
end

function KSPChebyshevEstEigGetKSP(arg1::KSP{Complex128},arg2::Union{Ptr{KSP{Complex128}},StridedArray{KSP{Complex128}},Ptr{KSP{Complex128}},Ref{KSP{Complex128}}})
    err = ccall((:KSPChebyshevEstEigGetKSP,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{KSP{Complex128}}),arg1,arg2)
    return err
end

function KSPComputeExtremeSingularValues(arg1::KSP{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:KSPComputeExtremeSingularValues,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function KSPComputeEigenvalues(arg1::KSP{Complex128},arg2::Integer,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:KSPComputeEigenvalues,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Int64,Ptr{Float64},Ptr{Float64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function KSPComputeEigenvaluesExplicitly(arg1::KSP{Complex128},arg2::Integer,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:KSPComputeEigenvaluesExplicitly,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Int64,Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function KSPFCGSetMmax(arg1::KSP{Complex128},arg2::Integer)
    err = ccall((:KSPFCGSetMmax,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Int64),arg1,arg2)
    return err
end

function KSPFCGGetMmax(arg1::KSP{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:KSPFCGGetMmax,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function KSPFCGSetNprealloc(arg1::KSP{Complex128},arg2::Integer)
    err = ccall((:KSPFCGSetNprealloc,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Int64),arg1,arg2)
    return err
end

function KSPFCGGetNprealloc(arg1::KSP{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:KSPFCGGetNprealloc,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function KSPFCGSetTruncationType(arg1::KSP{Complex128},arg2::KSPFCGTruncationType)
    err = ccall((:KSPFCGSetTruncationType,petscComplexDouble),PetscErrorCode,(KSP{Complex128},KSPFCGTruncationType),arg1,arg2)
    return err
end

function KSPFCGGetTruncationType(arg1::KSP{Complex128},arg2::Union{Ptr{KSPFCGTruncationType},StridedArray{KSPFCGTruncationType},Ptr{KSPFCGTruncationType},Ref{KSPFCGTruncationType}})
    err = ccall((:KSPFCGGetTruncationType,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{KSPFCGTruncationType}),arg1,arg2)
    return err
end

function KSPGMRESSetRestart(arg1::KSP{Complex128},arg2::Integer)
    err = ccall((:KSPGMRESSetRestart,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Int64),arg1,arg2)
    return err
end

function KSPGMRESGetRestart(arg1::KSP{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:KSPGMRESGetRestart,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function KSPGMRESSetHapTol(arg1::KSP{Complex128},arg2::Float64)
    err = ccall((:KSPGMRESSetHapTol,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Float64),arg1,arg2)
    return err
end

function KSPGMRESSetPreAllocateVectors(arg1::KSP{Complex128})
    err = ccall((:KSPGMRESSetPreAllocateVectors,petscComplexDouble),PetscErrorCode,(KSP{Complex128},),arg1)
    return err
end

function KSPGMRESSetOrthogonalization(arg1::KSP{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPGMRESSetOrthogonalization,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function KSPGMRESGetOrthogonalization(arg1::KSP{Complex128},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:KSPGMRESGetOrthogonalization,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{Ptr{Void}}),arg1,arg2)
    return err
end

function KSPGMRESModifiedGramSchmidtOrthogonalization(arg1::KSP{Complex128},arg2::Integer)
    err = ccall((:KSPGMRESModifiedGramSchmidtOrthogonalization,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Int64),arg1,arg2)
    return err
end

function KSPGMRESClassicalGramSchmidtOrthogonalization(arg1::KSP{Complex128},arg2::Integer)
    err = ccall((:KSPGMRESClassicalGramSchmidtOrthogonalization,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Int64),arg1,arg2)
    return err
end

function KSPLGMRESSetAugDim(arg1::KSP{Complex128},arg2::Integer)
    err = ccall((:KSPLGMRESSetAugDim,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Int64),arg1,arg2)
    return err
end

function KSPLGMRESSetConstant(arg1::KSP{Complex128})
    err = ccall((:KSPLGMRESSetConstant,petscComplexDouble),PetscErrorCode,(KSP{Complex128},),arg1)
    return err
end

function KSPGCRSetRestart(arg1::KSP{Complex128},arg2::Integer)
    err = ccall((:KSPGCRSetRestart,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Int64),arg1,arg2)
    return err
end

function KSPGCRGetRestart(arg1::KSP{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:KSPGCRGetRestart,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function KSPGCRSetModifyPC(arg1::KSP{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPGCRSetModifyPC,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPGMRESSetCGSRefinementType(arg1::KSP{Complex128},arg2::KSPGMRESCGSRefinementType)
    err = ccall((:KSPGMRESSetCGSRefinementType,petscComplexDouble),PetscErrorCode,(KSP{Complex128},KSPGMRESCGSRefinementType),arg1,arg2)
    return err
end

function KSPGMRESGetCGSRefinementType(arg1::KSP{Complex128},arg2::Union{Ptr{KSPGMRESCGSRefinementType},StridedArray{KSPGMRESCGSRefinementType},Ptr{KSPGMRESCGSRefinementType},Ref{KSPGMRESCGSRefinementType}})
    err = ccall((:KSPGMRESGetCGSRefinementType,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{KSPGMRESCGSRefinementType}),arg1,arg2)
    return err
end

function KSPFGMRESModifyPCNoChange(arg1::KSP{Complex128},arg2::Integer,arg3::Integer,arg4::Float64,arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPFGMRESModifyPCNoChange,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Int64,Int64,Float64,Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function KSPFGMRESModifyPCKSP(arg1::KSP{Complex128},arg2::Integer,arg3::Integer,arg4::Float64,arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPFGMRESModifyPCKSP,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Int64,Int64,Float64,Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function KSPFGMRESSetModifyPC(arg1::KSP{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPFGMRESSetModifyPC,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPQCGSetTrustRegionRadius(arg1::KSP{Complex128},arg2::Float64)
    err = ccall((:KSPQCGSetTrustRegionRadius,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Float64),arg1,arg2)
    return err
end

function KSPQCGGetQuadratic(arg1::KSP{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:KSPQCGGetQuadratic,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{Float64}),arg1,arg2)
    return err
end

function KSPQCGGetTrialStepNorm(arg1::KSP{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:KSPQCGGetTrialStepNorm,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{Float64}),arg1,arg2)
    return err
end

function KSPBCGSLSetXRes(arg1::KSP{Complex128},arg2::Float64)
    err = ccall((:KSPBCGSLSetXRes,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Float64),arg1,arg2)
    return err
end

function KSPBCGSLSetPol(arg1::KSP{Complex128},arg2::PetscBool)
    err = ccall((:KSPBCGSLSetPol,petscComplexDouble),PetscErrorCode,(KSP{Complex128},PetscBool),arg1,arg2)
    return err
end

function KSPBCGSLSetEll(arg1::KSP{Complex128},arg2::Integer)
    err = ccall((:KSPBCGSLSetEll,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Int64),arg1,arg2)
    return err
end

function KSPBCGSLSetUsePseudoinverse(arg1::KSP{Complex128},arg2::PetscBool)
    err = ccall((:KSPBCGSLSetUsePseudoinverse,petscComplexDouble),PetscErrorCode,(KSP{Complex128},PetscBool),arg1,arg2)
    return err
end

function KSPSetFromOptions(arg1::KSP{Complex128})
    err = ccall((:KSPSetFromOptions,petscComplexDouble),PetscErrorCode,(KSP{Complex128},),arg1)
    return err
end

function KSPAddOptionsChecker(arg0::Type{Complex128},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPAddOptionsChecker,petscComplexDouble),PetscErrorCode,(Ptr{Void},),arg1)
    return err
end

function KSPMonitorSingularValue(arg1::KSP{Complex128},arg2::Integer,arg3::Float64,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPMonitorSingularValue,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Int64,Float64,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPMonitorDefault(arg1::KSP{Complex128},arg2::Integer,arg3::Float64,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPMonitorDefault,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Int64,Float64,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPLSQRMonitorDefault(arg1::KSP{Complex128},arg2::Integer,arg3::Float64,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPLSQRMonitorDefault,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Int64,Float64,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPMonitorRange(arg1::KSP{Complex128},arg2::Integer,arg3::Float64,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPMonitorRange,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Int64,Float64,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPMonitorDynamicTolerance(ksp::KSP{Complex128},its::Integer,fnorm::Float64,dummy::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPMonitorDynamicTolerance,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Int64,Float64,Ptr{Void}),ksp,its,fnorm,dummy)
    return err
end

function KSPMonitorDynamicToleranceDestroy(arg0::Type{Complex128},dummy::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:KSPMonitorDynamicToleranceDestroy,petscComplexDouble),PetscErrorCode,(Ptr{Ptr{Void}},),dummy)
    return err
end

function KSPMonitorTrueResidualNorm(arg1::KSP{Complex128},arg2::Integer,arg3::Float64,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPMonitorTrueResidualNorm,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Int64,Float64,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPMonitorTrueResidualMaxNorm(arg1::KSP{Complex128},arg2::Integer,arg3::Float64,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPMonitorTrueResidualMaxNorm,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Int64,Float64,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPMonitorDefaultShort(arg1::KSP{Complex128},arg2::Integer,arg3::Float64,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPMonitorDefaultShort,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Int64,Float64,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPMonitorSolution(arg1::KSP{Complex128},arg2::Integer,arg3::Float64,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPMonitorSolution,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Int64,Float64,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPMonitorSAWs(arg1::KSP{Complex128},arg2::Integer,arg3::Float64,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPMonitorSAWs,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Int64,Float64,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPMonitorSAWsCreate(arg1::KSP{Complex128},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:KSPMonitorSAWsCreate,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{Ptr{Void}}),arg1,arg2)
    return err
end

function KSPMonitorSAWsDestroy(arg0::Type{Complex128},arg1::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:KSPMonitorSAWsDestroy,petscComplexDouble),PetscErrorCode,(Ptr{Ptr{Void}},),arg1)
    return err
end

function KSPGMRESMonitorKrylov(arg1::KSP{Complex128},arg2::Integer,arg3::Float64,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPGMRESMonitorKrylov,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Int64,Float64,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPUnwindPreconditioner(arg1::KSP{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128})
    err = ccall((:KSPUnwindPreconditioner,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function KSPInitialResidual(arg1::KSP{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128},arg4::Vec{Complex128},arg5::Vec{Complex128},arg6::Vec{Complex128})
    err = ccall((:KSPInitialResidual,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Vec{Complex128},Vec{Complex128},Vec{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function KSPSetOperators(arg1::KSP{Complex128},arg2::Mat{Complex128},arg3::Mat{Complex128})
    err = ccall((:KSPSetOperators,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Mat{Complex128},Mat{Complex128}),arg1,arg2,arg3)
    return err
end

function KSPGetOperators(arg1::KSP{Complex128},arg2::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}},arg3::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:KSPGetOperators,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{Mat{Complex128}},Ptr{Mat{Complex128}}),arg1,arg2,arg3)
    return err
end

function KSPGetOperatorsSet(arg1::KSP{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:KSPGetOperatorsSet,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{PetscBool},Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function KSPSetOptionsPrefix(arg1::KSP{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:KSPSetOptionsPrefix,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Cstring),arg1,arg2)
    return err
end

function KSPAppendOptionsPrefix(arg1::KSP{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:KSPAppendOptionsPrefix,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Cstring),arg1,arg2)
    return err
end

function KSPGetOptionsPrefix(arg1::KSP{Complex128},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:KSPGetOptionsPrefix,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function KSPSetTabLevel(arg1::KSP{Complex128},arg2::Integer)
    err = ccall((:KSPSetTabLevel,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Int64),arg1,arg2)
    return err
end

function KSPGetTabLevel(arg1::KSP{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:KSPGetTabLevel,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function KSPSetDiagonalScale(arg1::KSP{Complex128},arg2::PetscBool)
    err = ccall((:KSPSetDiagonalScale,petscComplexDouble),PetscErrorCode,(KSP{Complex128},PetscBool),arg1,arg2)
    return err
end

function KSPGetDiagonalScale(arg1::KSP{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:KSPGetDiagonalScale,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function KSPSetDiagonalScaleFix(arg1::KSP{Complex128},arg2::PetscBool)
    err = ccall((:KSPSetDiagonalScaleFix,petscComplexDouble),PetscErrorCode,(KSP{Complex128},PetscBool),arg1,arg2)
    return err
end

function KSPGetDiagonalScaleFix(arg1::KSP{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:KSPGetDiagonalScaleFix,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function KSPView(arg1::KSP{Complex128},arg2::PetscViewer{Complex128})
    err = ccall((:KSPView,petscComplexDouble),PetscErrorCode,(KSP{Complex128},PetscViewer{Complex128}),arg1,arg2)
    return err
end

function KSPLoad(arg1::KSP{Complex128},arg2::PetscViewer{Complex128})
    err = ccall((:KSPLoad,petscComplexDouble),PetscErrorCode,(KSP{Complex128},PetscViewer{Complex128}),arg1,arg2)
    return err
end

function KSPReasonViewFromOptions(arg1::KSP{Complex128})
    err = ccall((:KSPReasonViewFromOptions,petscComplexDouble),PetscErrorCode,(KSP{Complex128},),arg1)
    return err
end

function KSPLSQRSetStandardErrorVec(arg1::KSP{Complex128},arg2::Vec{Complex128})
    err = ccall((:KSPLSQRSetStandardErrorVec,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Vec{Complex128}),arg1,arg2)
    return err
end

function KSPLSQRGetStandardErrorVec(arg1::KSP{Complex128},arg2::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:KSPLSQRGetStandardErrorVec,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{Vec{Complex128}}),arg1,arg2)
    return err
end

function PCRedundantGetKSP(arg1::PC{Complex128},arg2::Union{Ptr{KSP{Complex128}},StridedArray{KSP{Complex128}},Ptr{KSP{Complex128}},Ref{KSP{Complex128}}})
    err = ccall((:PCRedundantGetKSP,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{KSP{Complex128}}),arg1,arg2)
    return err
end

function PCRedistributeGetKSP(arg1::PC{Complex128},arg2::Union{Ptr{KSP{Complex128}},StridedArray{KSP{Complex128}},Ptr{KSP{Complex128}},Ref{KSP{Complex128}}})
    err = ccall((:PCRedistributeGetKSP,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{KSP{Complex128}}),arg1,arg2)
    return err
end

function KSPSetNormType(arg1::KSP{Complex128},arg2::KSPNormType)
    err = ccall((:KSPSetNormType,petscComplexDouble),PetscErrorCode,(KSP{Complex128},KSPNormType),arg1,arg2)
    return err
end

function KSPGetNormType(arg1::KSP{Complex128},arg2::Union{Ptr{KSPNormType},StridedArray{KSPNormType},Ptr{KSPNormType},Ref{KSPNormType}})
    err = ccall((:KSPGetNormType,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{KSPNormType}),arg1,arg2)
    return err
end

function KSPSetSupportedNorm(ksp::KSP{Complex128},arg1::KSPNormType,arg2::PCSide,arg3::Integer)
    err = ccall((:KSPSetSupportedNorm,petscComplexDouble),PetscErrorCode,(KSP{Complex128},KSPNormType,PCSide,Int64),ksp,arg1,arg2,arg3)
    return err
end

function KSPSetCheckNormIteration(arg1::KSP{Complex128},arg2::Integer)
    err = ccall((:KSPSetCheckNormIteration,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Int64),arg1,arg2)
    return err
end

function KSPSetLagNorm(arg1::KSP{Complex128},arg2::PetscBool)
    err = ccall((:KSPSetLagNorm,petscComplexDouble),PetscErrorCode,(KSP{Complex128},PetscBool),arg1,arg2)
    return err
end

function KSPSetConvergenceTest(arg1::KSP{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPSetConvergenceTest,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPGetConvergenceContext(arg1::KSP{Complex128},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:KSPGetConvergenceContext,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{Ptr{Void}}),arg1,arg2)
    return err
end

function KSPConvergedDefault(arg1::KSP{Complex128},arg2::Integer,arg3::Float64,arg4::Union{Ptr{KSPConvergedReason},StridedArray{KSPConvergedReason},Ptr{KSPConvergedReason},Ref{KSPConvergedReason}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPConvergedDefault,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Int64,Float64,Ptr{KSPConvergedReason},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function KSPConvergedLSQR(arg1::KSP{Complex128},arg2::Integer,arg3::Float64,arg4::Union{Ptr{KSPConvergedReason},StridedArray{KSPConvergedReason},Ptr{KSPConvergedReason},Ref{KSPConvergedReason}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPConvergedLSQR,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Int64,Float64,Ptr{KSPConvergedReason},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function KSPConvergedDefaultDestroy(arg0::Type{Complex128},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPConvergedDefaultDestroy,petscComplexDouble),PetscErrorCode,(Ptr{Void},),arg1)
    return err
end

function KSPConvergedDefaultCreate(arg0::Type{Complex128},arg1::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:KSPConvergedDefaultCreate,petscComplexDouble),PetscErrorCode,(Ptr{Ptr{Void}},),arg1)
    return err
end

function KSPConvergedDefaultSetUIRNorm(arg1::KSP{Complex128})
    err = ccall((:KSPConvergedDefaultSetUIRNorm,petscComplexDouble),PetscErrorCode,(KSP{Complex128},),arg1)
    return err
end

function KSPConvergedDefaultSetUMIRNorm(arg1::KSP{Complex128})
    err = ccall((:KSPConvergedDefaultSetUMIRNorm,petscComplexDouble),PetscErrorCode,(KSP{Complex128},),arg1)
    return err
end

function KSPConvergedSkip(arg1::KSP{Complex128},arg2::Integer,arg3::Float64,arg4::Union{Ptr{KSPConvergedReason},StridedArray{KSPConvergedReason},Ptr{KSPConvergedReason},Ref{KSPConvergedReason}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPConvergedSkip,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Int64,Float64,Ptr{KSPConvergedReason},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function KSPGetConvergedReason(arg1::KSP{Complex128},arg2::Union{Ptr{KSPConvergedReason},StridedArray{KSPConvergedReason},Ptr{KSPConvergedReason},Ref{KSPConvergedReason}})
    err = ccall((:KSPGetConvergedReason,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{KSPConvergedReason}),arg1,arg2)
    return err
end

function KSPCGSetType(arg1::KSP{Complex128},arg2::KSPCGType)
    err = ccall((:KSPCGSetType,petscComplexDouble),PetscErrorCode,(KSP{Complex128},KSPCGType),arg1,arg2)
    return err
end

function KSPCGUseSingleReduction(arg1::KSP{Complex128},arg2::PetscBool)
    err = ccall((:KSPCGUseSingleReduction,petscComplexDouble),PetscErrorCode,(KSP{Complex128},PetscBool),arg1,arg2)
    return err
end

function KSPNASHSetRadius(arg1::KSP{Complex128},arg2::Float64)
    err = ccall((:KSPNASHSetRadius,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Float64),arg1,arg2)
    return err
end

function KSPNASHGetNormD(arg1::KSP{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:KSPNASHGetNormD,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{Float64}),arg1,arg2)
    return err
end

function KSPNASHGetObjFcn(arg1::KSP{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:KSPNASHGetObjFcn,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{Float64}),arg1,arg2)
    return err
end

function KSPSTCGSetRadius(arg1::KSP{Complex128},arg2::Float64)
    err = ccall((:KSPSTCGSetRadius,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Float64),arg1,arg2)
    return err
end

function KSPSTCGGetNormD(arg1::KSP{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:KSPSTCGGetNormD,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{Float64}),arg1,arg2)
    return err
end

function KSPSTCGGetObjFcn(arg1::KSP{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:KSPSTCGGetObjFcn,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{Float64}),arg1,arg2)
    return err
end

function KSPGLTRSetRadius(arg1::KSP{Complex128},arg2::Float64)
    err = ccall((:KSPGLTRSetRadius,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Float64),arg1,arg2)
    return err
end

function KSPGLTRGetNormD(arg1::KSP{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:KSPGLTRGetNormD,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{Float64}),arg1,arg2)
    return err
end

function KSPGLTRGetObjFcn(arg1::KSP{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:KSPGLTRGetObjFcn,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{Float64}),arg1,arg2)
    return err
end

function KSPGLTRGetMinEig(arg1::KSP{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:KSPGLTRGetMinEig,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{Float64}),arg1,arg2)
    return err
end

function KSPGLTRGetLambda(arg1::KSP{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:KSPGLTRGetLambda,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{Float64}),arg1,arg2)
    return err
end

function KSPPythonSetType(arg1::KSP{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:KSPPythonSetType,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Cstring),arg1,arg2)
    return err
end

function PCPreSolve(arg1::PC{Complex128},arg2::KSP{Complex128})
    err = ccall((:PCPreSolve,petscComplexDouble),PetscErrorCode,(PC{Complex128},KSP{Complex128}),arg1,arg2)
    return err
end

function PCPostSolve(arg1::PC{Complex128},arg2::KSP{Complex128})
    err = ccall((:PCPostSolve,petscComplexDouble),PetscErrorCode,(PC{Complex128},KSP{Complex128}),arg1,arg2)
    return err
end

function KSPMonitorLGResidualNormCreate(arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Union{Ptr{Ptr{PetscObject{Complex128}}},StridedArray{Ptr{PetscObject{Complex128}}},Ptr{Ptr{PetscObject{Complex128}}},Ref{Ptr{PetscObject{Complex128}}}})
    err = ccall((:KSPMonitorLGResidualNormCreate,petscComplexDouble),PetscErrorCode,(Cstring,Cstring,Cint,Cint,Cint,Cint,Ptr{Ptr{PetscObject{Complex128}}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function KSPMonitorLGResidualNorm(arg1::KSP{Complex128},arg2::Integer,arg3::Float64,arg4::Union{Ptr{PetscObject{Complex128}},StridedArray{PetscObject{Complex128}},Ptr{PetscObject{Complex128}},Ref{PetscObject{Complex128}}})
    err = ccall((:KSPMonitorLGResidualNorm,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Int64,Float64,Ptr{PetscObject{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function KSPMonitorLGResidualNormDestroy(arg1::Union{Ptr{Ptr{PetscObject{Complex128}}},StridedArray{Ptr{PetscObject{Complex128}}},Ptr{Ptr{PetscObject{Complex128}}},Ref{Ptr{PetscObject{Complex128}}}})
    err = ccall((:KSPMonitorLGResidualNormDestroy,petscComplexDouble),PetscErrorCode,(Ptr{Ptr{PetscObject{Complex128}}},),arg1)
    return err
end

function KSPMonitorLGTrueResidualNormCreate(arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Union{Ptr{Ptr{PetscObject{Complex128}}},StridedArray{Ptr{PetscObject{Complex128}}},Ptr{Ptr{PetscObject{Complex128}}},Ref{Ptr{PetscObject{Complex128}}}})
    err = ccall((:KSPMonitorLGTrueResidualNormCreate,petscComplexDouble),PetscErrorCode,(Cstring,Cstring,Cint,Cint,Cint,Cint,Ptr{Ptr{PetscObject{Complex128}}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function KSPMonitorLGTrueResidualNorm(arg1::KSP{Complex128},arg2::Integer,arg3::Float64,arg4::Union{Ptr{PetscObject{Complex128}},StridedArray{PetscObject{Complex128}},Ptr{PetscObject{Complex128}},Ref{PetscObject{Complex128}}})
    err = ccall((:KSPMonitorLGTrueResidualNorm,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Int64,Float64,Ptr{PetscObject{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function KSPMonitorLGTrueResidualNormDestroy(arg1::Union{Ptr{Ptr{PetscObject{Complex128}}},StridedArray{Ptr{PetscObject{Complex128}}},Ptr{Ptr{PetscObject{Complex128}}},Ref{Ptr{PetscObject{Complex128}}}})
    err = ccall((:KSPMonitorLGTrueResidualNormDestroy,petscComplexDouble),PetscErrorCode,(Ptr{Ptr{PetscObject{Complex128}}},),arg1)
    return err
end

function KSPMonitorLGRange(arg1::KSP{Complex128},arg2::Integer,arg3::Float64,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPMonitorLGRange,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Int64,Float64,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function PCShellSetPreSolve(arg1::PC{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCShellSetPreSolve,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function PCShellSetPostSolve(arg1::PC{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCShellSetPostSolve,petscComplexDouble),PetscErrorCode,(PC{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function KSPFischerGuessCreate(arg1::KSP{Complex128},arg2::Integer,arg3::Integer,arg4::Union{Ptr{KSPFischerGuess{Complex128}},StridedArray{KSPFischerGuess{Complex128}},Ptr{KSPFischerGuess{Complex128}},Ref{KSPFischerGuess{Complex128}}})
    err = ccall((:KSPFischerGuessCreate,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Int64,Int64,Ptr{KSPFischerGuess{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function KSPFischerGuessDestroy(arg1::Union{Ptr{KSPFischerGuess{Complex128}},StridedArray{KSPFischerGuess{Complex128}},Ptr{KSPFischerGuess{Complex128}},Ref{KSPFischerGuess{Complex128}}})
    err = ccall((:KSPFischerGuessDestroy,petscComplexDouble),PetscErrorCode,(Ptr{KSPFischerGuess{Complex128}},),arg1)
    return err
end

function KSPFischerGuessReset(arg1::KSPFischerGuess{Complex128})
    err = ccall((:KSPFischerGuessReset,petscComplexDouble),PetscErrorCode,(KSPFischerGuess{Complex128},),arg1)
    return err
end

function KSPFischerGuessUpdate(arg1::KSPFischerGuess{Complex128},arg2::Vec{Complex128})
    err = ccall((:KSPFischerGuessUpdate,petscComplexDouble),PetscErrorCode,(KSPFischerGuess{Complex128},Vec{Complex128}),arg1,arg2)
    return err
end

function KSPFischerGuessFormGuess(arg1::KSPFischerGuess{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128})
    err = ccall((:KSPFischerGuessFormGuess,petscComplexDouble),PetscErrorCode,(KSPFischerGuess{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function KSPFischerGuessSetFromOptions(arg1::KSPFischerGuess{Complex128})
    err = ccall((:KSPFischerGuessSetFromOptions,petscComplexDouble),PetscErrorCode,(KSPFischerGuess{Complex128},),arg1)
    return err
end

function KSPSetUseFischerGuess(arg1::KSP{Complex128},arg2::Integer,arg3::Integer)
    err = ccall((:KSPSetUseFischerGuess,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Int64,Int64),arg1,arg2,arg3)
    return err
end

function KSPSetFischerGuess(arg1::KSP{Complex128},arg2::KSPFischerGuess{Complex128})
    err = ccall((:KSPSetFischerGuess,petscComplexDouble),PetscErrorCode,(KSP{Complex128},KSPFischerGuess{Complex128}),arg1,arg2)
    return err
end

function KSPGetFischerGuess(arg1::KSP{Complex128},arg2::Union{Ptr{KSPFischerGuess{Complex128}},StridedArray{KSPFischerGuess{Complex128}},Ptr{KSPFischerGuess{Complex128}},Ref{KSPFischerGuess{Complex128}}})
    err = ccall((:KSPGetFischerGuess,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{KSPFischerGuess{Complex128}}),arg1,arg2)
    return err
end

function MatCreateSchurComplement(arg1::Mat{Complex128},arg2::Mat{Complex128},arg3::Mat{Complex128},arg4::Mat{Complex128},arg5::Mat{Complex128},arg6::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatCreateSchurComplement,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Mat{Complex128},Mat{Complex128},Mat{Complex128},Mat{Complex128},Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatSchurComplementGetKSP(arg1::Mat{Complex128},arg2::Union{Ptr{KSP{Complex128}},StridedArray{KSP{Complex128}},Ptr{KSP{Complex128}},Ref{KSP{Complex128}}})
    err = ccall((:MatSchurComplementGetKSP,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{KSP{Complex128}}),arg1,arg2)
    return err
end

function MatSchurComplementSetKSP(arg1::Mat{Complex128},arg2::KSP{Complex128})
    err = ccall((:MatSchurComplementSetKSP,petscComplexDouble),PetscErrorCode,(Mat{Complex128},KSP{Complex128}),arg1,arg2)
    return err
end

function MatSchurComplementSetSubMatrices(arg1::Mat{Complex128},arg2::Mat{Complex128},arg3::Mat{Complex128},arg4::Mat{Complex128},arg5::Mat{Complex128},arg6::Mat{Complex128})
    err = ccall((:MatSchurComplementSetSubMatrices,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Mat{Complex128},Mat{Complex128},Mat{Complex128},Mat{Complex128},Mat{Complex128}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatSchurComplementUpdateSubMatrices(arg1::Mat{Complex128},arg2::Mat{Complex128},arg3::Mat{Complex128},arg4::Mat{Complex128},arg5::Mat{Complex128},arg6::Mat{Complex128})
    err = ccall((:MatSchurComplementUpdateSubMatrices,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Mat{Complex128},Mat{Complex128},Mat{Complex128},Mat{Complex128},Mat{Complex128}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatSchurComplementGetSubMatrices(arg1::Mat{Complex128},arg2::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}},arg3::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}},arg4::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}},arg5::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}},arg6::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatSchurComplementGetSubMatrices,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{Mat{Complex128}},Ptr{Mat{Complex128}},Ptr{Mat{Complex128}},Ptr{Mat{Complex128}},Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatSchurComplementSetAinvType(arg1::Mat{Complex128},arg2::MatSchurComplementAinvType)
    err = ccall((:MatSchurComplementSetAinvType,petscComplexDouble),PetscErrorCode,(Mat{Complex128},MatSchurComplementAinvType),arg1,arg2)
    return err
end

function MatSchurComplementGetAinvType(arg1::Mat{Complex128},arg2::Union{Ptr{MatSchurComplementAinvType},StridedArray{MatSchurComplementAinvType},Ptr{MatSchurComplementAinvType},Ref{MatSchurComplementAinvType}})
    err = ccall((:MatSchurComplementGetAinvType,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{MatSchurComplementAinvType}),arg1,arg2)
    return err
end

function MatSchurComplementGetPmat(arg1::Mat{Complex128},arg2::MatReuse,arg3::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatSchurComplementGetPmat,petscComplexDouble),PetscErrorCode,(Mat{Complex128},MatReuse,Ptr{Mat{Complex128}}),arg1,arg2,arg3)
    return err
end

function MatSchurComplementComputeExplicitOperator(arg1::Mat{Complex128},arg2::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatSchurComplementComputeExplicitOperator,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Ptr{Mat{Complex128}}),arg1,arg2)
    return err
end

function MatGetSchurComplement(arg1::Mat{Complex128},arg2::IS{Complex128},arg3::IS{Complex128},arg4::IS{Complex128},arg5::IS{Complex128},arg6::MatReuse,arg7::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}},arg8::MatSchurComplementAinvType,arg9::MatReuse,arg10::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatGetSchurComplement,petscComplexDouble),PetscErrorCode,(Mat{Complex128},IS{Complex128},IS{Complex128},IS{Complex128},IS{Complex128},MatReuse,Ptr{Mat{Complex128}},MatSchurComplementAinvType,MatReuse,Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function MatCreateSchurComplementPmat(arg1::Mat{Complex128},arg2::Mat{Complex128},arg3::Mat{Complex128},arg4::Mat{Complex128},arg5::MatSchurComplementAinvType,arg6::MatReuse,arg7::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatCreateSchurComplementPmat,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Mat{Complex128},Mat{Complex128},Mat{Complex128},MatSchurComplementAinvType,MatReuse,Ptr{Mat{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function KSPSetDM(arg1::KSP{Complex128},arg2::DM{Complex128})
    err = ccall((:KSPSetDM,petscComplexDouble),PetscErrorCode,(KSP{Complex128},DM{Complex128}),arg1,arg2)
    return err
end

function KSPSetDMActive(arg1::KSP{Complex128},arg2::PetscBool)
    err = ccall((:KSPSetDMActive,petscComplexDouble),PetscErrorCode,(KSP{Complex128},PetscBool),arg1,arg2)
    return err
end

function KSPGetDM(arg1::KSP{Complex128},arg2::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:KSPGetDM,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{DM{Complex128}}),arg1,arg2)
    return err
end

function KSPSetApplicationContext(arg1::KSP{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPSetApplicationContext,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function KSPGetApplicationContext(arg1::KSP{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPGetApplicationContext,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function KSPSetComputeRHS(arg1::KSP{Complex128},func::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPSetComputeRHS,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{Void},Ptr{Void}),arg1,func,arg2)
    return err
end

function KSPSetComputeOperators(arg1::KSP{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPSetComputeOperators,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function KSPSetComputeInitialGuess(arg1::KSP{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPSetComputeInitialGuess,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMKSPSetComputeOperators(arg1::DM{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMKSPSetComputeOperators,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMKSPGetComputeOperators(arg1::DM{Complex128},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMKSPGetComputeOperators,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Ptr{Void}},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMKSPSetComputeRHS(arg1::DM{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMKSPSetComputeRHS,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMKSPGetComputeRHS(arg1::DM{Complex128},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMKSPGetComputeRHS,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Ptr{Void}},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMKSPSetComputeInitialGuess(arg1::DM{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMKSPSetComputeInitialGuess,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMKSPGetComputeInitialGuess(arg1::DM{Complex128},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMKSPGetComputeInitialGuess,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Ptr{Void}},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMGlobalToLocalSolve(arg1::DM{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128})
    err = ccall((:DMGlobalToLocalSolve,petscComplexDouble),PetscErrorCode,(DM{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function DMPlexProjectField(arg1::DM{Complex128},arg2::Vec{Complex128},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::InsertMode,arg5::Vec{Complex128})
    err = ccall((:DMPlexProjectField,petscComplexDouble),PetscErrorCode,(DM{Complex128},Vec{Complex128},Ptr{Ptr{Void}},InsertMode,Vec{Complex128}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function SNESInitializePackage(arg0::Type{Complex128})
    err = ccall((:SNESInitializePackage,petscComplexDouble),PetscErrorCode,())
    return err
end

function SNESCreate(arg1::MPI_Comm,arg2::Union{Ptr{SNES{Complex128}},StridedArray{SNES{Complex128}},Ptr{SNES{Complex128}},Ref{SNES{Complex128}}})
    err = ccall((:SNESCreate,petscComplexDouble),PetscErrorCode,(comm_type,Ptr{SNES{Complex128}}),arg1,arg2)
    return err
end

function SNESReset(arg1::SNES{Complex128})
    err = ccall((:SNESReset,petscComplexDouble),PetscErrorCode,(SNES{Complex128},),arg1)
    return err
end

function SNESDestroy(arg1::Union{Ptr{SNES{Complex128}},StridedArray{SNES{Complex128}},Ptr{SNES{Complex128}},Ref{SNES{Complex128}}})
    err = ccall((:SNESDestroy,petscComplexDouble),PetscErrorCode,(Ptr{SNES{Complex128}},),arg1)
    return err
end

function SNESSetType(arg1::SNES{Complex128},arg2::SNESType)
    err = ccall((:SNESSetType,petscComplexDouble),PetscErrorCode,(SNES{Complex128},SNESType),arg1,arg2)
    return err
end

function SNESMonitor(arg1::SNES{Complex128},arg2::Integer,arg3::Float64)
    err = ccall((:SNESMonitor,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Int64,Float64),arg1,arg2,arg3)
    return err
end

function SNESMonitorSet(arg1::SNES{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESMonitorSet,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function SNESMonitorCancel(arg1::SNES{Complex128})
    err = ccall((:SNESMonitorCancel,petscComplexDouble),PetscErrorCode,(SNES{Complex128},),arg1)
    return err
end

function SNESMonitorSAWs(arg1::SNES{Complex128},arg2::Integer,arg3::Float64,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESMonitorSAWs,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Int64,Float64,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function SNESMonitorSAWsCreate(arg1::SNES{Complex128},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:SNESMonitorSAWsCreate,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{Ptr{Void}}),arg1,arg2)
    return err
end

function SNESMonitorSAWsDestroy(arg0::Type{Complex128},arg1::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:SNESMonitorSAWsDestroy,petscComplexDouble),PetscErrorCode,(Ptr{Ptr{Void}},),arg1)
    return err
end

function SNESSetConvergenceHistory(arg1::SNES{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Integer,arg5::PetscBool)
    err = ccall((:SNESSetConvergenceHistory,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{Float64},Ptr{Int64},Int64,PetscBool),arg1,arg2,arg3,arg4,arg5)
    return err
end

function SNESGetConvergenceHistory(arg1::SNES{Complex128},arg2::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:SNESGetConvergenceHistory,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{Ptr{Float64}},Ptr{Ptr{Int64}},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function SNESSetUp(arg1::SNES{Complex128})
    err = ccall((:SNESSetUp,petscComplexDouble),PetscErrorCode,(SNES{Complex128},),arg1)
    return err
end

function SNESSolve(arg1::SNES{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128})
    err = ccall((:SNESSolve,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function SNESSetErrorIfNotConverged(arg1::SNES{Complex128},arg2::PetscBool)
    err = ccall((:SNESSetErrorIfNotConverged,petscComplexDouble),PetscErrorCode,(SNES{Complex128},PetscBool),arg1,arg2)
    return err
end

function SNESGetErrorIfNotConverged(arg1::SNES{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:SNESGetErrorIfNotConverged,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function SNESSetWorkVecs(arg1::SNES{Complex128},arg2::Integer)
    err = ccall((:SNESSetWorkVecs,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Int64),arg1,arg2)
    return err
end

function SNESAddOptionsChecker(arg0::Type{Complex128},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESAddOptionsChecker,petscComplexDouble),PetscErrorCode,(Ptr{Void},),arg1)
    return err
end

function SNESSetUpdate(arg1::SNES{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESSetUpdate,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function SNESRegister(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESRegister,petscComplexDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function SNESGetKSP(arg1::SNES{Complex128},arg2::Union{Ptr{KSP{Complex128}},StridedArray{KSP{Complex128}},Ptr{KSP{Complex128}},Ref{KSP{Complex128}}})
    err = ccall((:SNESGetKSP,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{KSP{Complex128}}),arg1,arg2)
    return err
end

function SNESSetKSP(arg1::SNES{Complex128},arg2::KSP{Complex128})
    err = ccall((:SNESSetKSP,petscComplexDouble),PetscErrorCode,(SNES{Complex128},KSP{Complex128}),arg1,arg2)
    return err
end

function SNESSetSolution(arg1::SNES{Complex128},arg2::Vec{Complex128})
    err = ccall((:SNESSetSolution,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Vec{Complex128}),arg1,arg2)
    return err
end

function SNESGetSolution(arg1::SNES{Complex128},arg2::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:SNESGetSolution,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{Vec{Complex128}}),arg1,arg2)
    return err
end

function SNESGetSolutionUpdate(arg1::SNES{Complex128},arg2::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:SNESGetSolutionUpdate,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{Vec{Complex128}}),arg1,arg2)
    return err
end

function SNESGetRhs(arg1::SNES{Complex128},arg2::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:SNESGetRhs,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{Vec{Complex128}}),arg1,arg2)
    return err
end

function SNESView(arg1::SNES{Complex128},arg2::PetscViewer{Complex128})
    err = ccall((:SNESView,petscComplexDouble),PetscErrorCode,(SNES{Complex128},PetscViewer{Complex128}),arg1,arg2)
    return err
end

function SNESLoad(arg1::SNES{Complex128},arg2::PetscViewer{Complex128})
    err = ccall((:SNESLoad,petscComplexDouble),PetscErrorCode,(SNES{Complex128},PetscViewer{Complex128}),arg1,arg2)
    return err
end

function SNESReasonViewFromOptions(arg1::SNES{Complex128})
    err = ccall((:SNESReasonViewFromOptions,petscComplexDouble),PetscErrorCode,(SNES{Complex128},),arg1)
    return err
end

function SNESSetOptionsPrefix(arg1::SNES{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:SNESSetOptionsPrefix,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Cstring),arg1,arg2)
    return err
end

function SNESAppendOptionsPrefix(arg1::SNES{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:SNESAppendOptionsPrefix,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Cstring),arg1,arg2)
    return err
end

function SNESGetOptionsPrefix(arg1::SNES{Complex128},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:SNESGetOptionsPrefix,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function SNESSetFromOptions(arg1::SNES{Complex128})
    err = ccall((:SNESSetFromOptions,petscComplexDouble),PetscErrorCode,(SNES{Complex128},),arg1)
    return err
end

function MatCreateSNESMF(arg1::SNES{Complex128},arg2::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:MatCreateSNESMF,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{Mat{Complex128}}),arg1,arg2)
    return err
end

function MatMFFDComputeJacobian(arg1::SNES{Complex128},arg2::Vec{Complex128},arg3::Mat{Complex128},arg4::Mat{Complex128},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatMFFDComputeJacobian,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Vec{Complex128},Mat{Complex128},Mat{Complex128},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatDAADSetSNES(arg1::Mat{Complex128},arg2::SNES{Complex128})
    err = ccall((:MatDAADSetSNES,petscComplexDouble),PetscErrorCode,(Mat{Complex128},SNES{Complex128}),arg1,arg2)
    return err
end

function SNESGetType(arg1::SNES{Complex128},arg2::Union{Ptr{SNESType},StridedArray{SNESType},Ptr{SNESType},Ref{SNESType}})
    err = ccall((:SNESGetType,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{SNESType}),arg1,arg2)
    return err
end

function SNESMonitorDefault(arg1::SNES{Complex128},arg2::Integer,arg3::Float64,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESMonitorDefault,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Int64,Float64,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function SNESMonitorRange(arg1::SNES{Complex128},arg2::Integer,arg3::Float64,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESMonitorRange,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Int64,Float64,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function SNESMonitorRatio(arg1::SNES{Complex128},arg2::Integer,arg3::Float64,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESMonitorRatio,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Int64,Float64,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function SNESMonitorSetRatio(arg1::SNES{Complex128},arg2::PetscViewer{Complex128})
    err = ccall((:SNESMonitorSetRatio,petscComplexDouble),PetscErrorCode,(SNES{Complex128},PetscViewer{Complex128}),arg1,arg2)
    return err
end

function SNESMonitorSolution(arg1::SNES{Complex128},arg2::Integer,arg3::Float64,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESMonitorSolution,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Int64,Float64,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function SNESMonitorResidual(arg1::SNES{Complex128},arg2::Integer,arg3::Float64,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESMonitorResidual,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Int64,Float64,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function SNESMonitorSolutionUpdate(arg1::SNES{Complex128},arg2::Integer,arg3::Float64,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESMonitorSolutionUpdate,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Int64,Float64,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function SNESMonitorDefaultShort(arg1::SNES{Complex128},arg2::Integer,arg3::Float64,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESMonitorDefaultShort,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Int64,Float64,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function SNESMonitorDefaultField(arg1::SNES{Complex128},arg2::Integer,arg3::Float64,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESMonitorDefaultField,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Int64,Float64,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function SNESMonitorJacUpdateSpectrum(arg1::SNES{Complex128},arg2::Integer,arg3::Float64,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESMonitorJacUpdateSpectrum,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Int64,Float64,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function SNESMonitorFields(arg1::SNES{Complex128},arg2::Integer,arg3::Float64,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESMonitorFields,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Int64,Float64,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPMonitorSNES(arg1::KSP{Complex128},arg2::Integer,arg3::Float64,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPMonitorSNES,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Int64,Float64,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPMonitorSNESLGResidualNormCreate(arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Union{Ptr{Ptr{PetscObject{Complex128}}},StridedArray{Ptr{PetscObject{Complex128}}},Ptr{Ptr{PetscObject{Complex128}}},Ref{Ptr{PetscObject{Complex128}}}})
    err = ccall((:KSPMonitorSNESLGResidualNormCreate,petscComplexDouble),PetscErrorCode,(Cstring,Cstring,Cint,Cint,Cint,Cint,Ptr{Ptr{PetscObject{Complex128}}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function KSPMonitorSNESLGResidualNorm(arg1::KSP{Complex128},arg2::Integer,arg3::Float64,arg4::Union{Ptr{PetscObject{Complex128}},StridedArray{PetscObject{Complex128}},Ptr{PetscObject{Complex128}},Ref{PetscObject{Complex128}}})
    err = ccall((:KSPMonitorSNESLGResidualNorm,petscComplexDouble),PetscErrorCode,(KSP{Complex128},Int64,Float64,Ptr{PetscObject{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function KSPMonitorSNESLGResidualNormDestroy(arg1::Union{Ptr{Ptr{PetscObject{Complex128}}},StridedArray{Ptr{PetscObject{Complex128}}},Ptr{Ptr{PetscObject{Complex128}}},Ref{Ptr{PetscObject{Complex128}}}})
    err = ccall((:KSPMonitorSNESLGResidualNormDestroy,petscComplexDouble),PetscErrorCode,(Ptr{Ptr{PetscObject{Complex128}}},),arg1)
    return err
end

function SNESSetTolerances(arg1::SNES{Complex128},arg2::Float64,arg3::Float64,arg4::Float64,arg5::Integer,arg6::Integer)
    err = ccall((:SNESSetTolerances,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Float64,Float64,Float64,Int64,Int64),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function SNESGetTolerances(arg1::SNES{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:SNESGetTolerances,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function SNESSetTrustRegionTolerance(arg1::SNES{Complex128},arg2::Float64)
    err = ccall((:SNESSetTrustRegionTolerance,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Float64),arg1,arg2)
    return err
end

function SNESGetIterationNumber(arg1::SNES{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:SNESGetIterationNumber,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function SNESSetIterationNumber(arg1::SNES{Complex128},arg2::Integer)
    err = ccall((:SNESSetIterationNumber,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Int64),arg1,arg2)
    return err
end

function SNESGetNonlinearStepFailures(arg1::SNES{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:SNESGetNonlinearStepFailures,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function SNESSetMaxNonlinearStepFailures(arg1::SNES{Complex128},arg2::Integer)
    err = ccall((:SNESSetMaxNonlinearStepFailures,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Int64),arg1,arg2)
    return err
end

function SNESGetMaxNonlinearStepFailures(arg1::SNES{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:SNESGetMaxNonlinearStepFailures,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function SNESGetNumberFunctionEvals(arg1::SNES{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:SNESGetNumberFunctionEvals,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function SNESSetLagPreconditioner(arg1::SNES{Complex128},arg2::Integer)
    err = ccall((:SNESSetLagPreconditioner,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Int64),arg1,arg2)
    return err
end

function SNESGetLagPreconditioner(arg1::SNES{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:SNESGetLagPreconditioner,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function SNESSetLagJacobian(arg1::SNES{Complex128},arg2::Integer)
    err = ccall((:SNESSetLagJacobian,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Int64),arg1,arg2)
    return err
end

function SNESGetLagJacobian(arg1::SNES{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:SNESGetLagJacobian,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function SNESSetLagPreconditionerPersists(arg1::SNES{Complex128},arg2::PetscBool)
    err = ccall((:SNESSetLagPreconditionerPersists,petscComplexDouble),PetscErrorCode,(SNES{Complex128},PetscBool),arg1,arg2)
    return err
end

function SNESSetLagJacobianPersists(arg1::SNES{Complex128},arg2::PetscBool)
    err = ccall((:SNESSetLagJacobianPersists,petscComplexDouble),PetscErrorCode,(SNES{Complex128},PetscBool),arg1,arg2)
    return err
end

function SNESSetGridSequence(arg1::SNES{Complex128},arg2::Integer)
    err = ccall((:SNESSetGridSequence,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Int64),arg1,arg2)
    return err
end

function SNESGetGridSequence(arg1::SNES{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:SNESGetGridSequence,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function SNESGetLinearSolveIterations(arg1::SNES{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:SNESGetLinearSolveIterations,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function SNESGetLinearSolveFailures(arg1::SNES{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:SNESGetLinearSolveFailures,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function SNESSetMaxLinearSolveFailures(arg1::SNES{Complex128},arg2::Integer)
    err = ccall((:SNESSetMaxLinearSolveFailures,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Int64),arg1,arg2)
    return err
end

function SNESGetMaxLinearSolveFailures(arg1::SNES{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:SNESGetMaxLinearSolveFailures,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function SNESSetCountersReset(arg1::SNES{Complex128},arg2::PetscBool)
    err = ccall((:SNESSetCountersReset,petscComplexDouble),PetscErrorCode,(SNES{Complex128},PetscBool),arg1,arg2)
    return err
end

function SNESKSPSetUseEW(arg1::SNES{Complex128},arg2::PetscBool)
    err = ccall((:SNESKSPSetUseEW,petscComplexDouble),PetscErrorCode,(SNES{Complex128},PetscBool),arg1,arg2)
    return err
end

function SNESKSPGetUseEW(arg1::SNES{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:SNESKSPGetUseEW,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function SNESKSPSetParametersEW(arg1::SNES{Complex128},arg2::Integer,arg3::Float64,arg4::Float64,arg5::Float64,arg6::Float64,arg7::Float64,arg8::Float64)
    err = ccall((:SNESKSPSetParametersEW,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Int64,Float64,Float64,Float64,Float64,Float64,Float64),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function SNESKSPGetParametersEW(arg1::SNES{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg7::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg8::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:SNESKSPGetParametersEW,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{Int64},Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function SNESMonitorLGCreate(arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Union{Ptr{Ptr{PetscObject{Complex128}}},StridedArray{Ptr{PetscObject{Complex128}}},Ptr{Ptr{PetscObject{Complex128}}},Ref{Ptr{PetscObject{Complex128}}}})
    err = ccall((:SNESMonitorLGCreate,petscComplexDouble),PetscErrorCode,(Cstring,Cstring,Cint,Cint,Cint,Cint,Ptr{Ptr{PetscObject{Complex128}}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function SNESMonitorLGResidualNorm(arg1::SNES{Complex128},arg2::Integer,arg3::Float64,arg4::Union{Ptr{PetscObject{Complex128}},StridedArray{PetscObject{Complex128}},Ptr{PetscObject{Complex128}},Ref{PetscObject{Complex128}}})
    err = ccall((:SNESMonitorLGResidualNorm,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Int64,Float64,Ptr{PetscObject{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function SNESMonitorLGDestroy(arg1::Union{Ptr{Ptr{PetscObject{Complex128}}},StridedArray{Ptr{PetscObject{Complex128}}},Ptr{Ptr{PetscObject{Complex128}}},Ref{Ptr{PetscObject{Complex128}}}})
    err = ccall((:SNESMonitorLGDestroy,petscComplexDouble),PetscErrorCode,(Ptr{Ptr{PetscObject{Complex128}}},),arg1)
    return err
end

function SNESMonitorLGRange(arg1::SNES{Complex128},arg2::Integer,arg3::Float64,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESMonitorLGRange,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Int64,Float64,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function SNESSetApplicationContext(arg1::SNES{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESSetApplicationContext,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function SNESGetApplicationContext(arg1::SNES{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESGetApplicationContext,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function SNESSetComputeApplicationContext(arg1::SNES{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESSetComputeApplicationContext,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function SNESPythonSetType(arg1::SNES{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:SNESPythonSetType,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Cstring),arg1,arg2)
    return err
end

function SNESSetFunctionDomainError(arg1::SNES{Complex128})
    err = ccall((:SNESSetFunctionDomainError,petscComplexDouble),PetscErrorCode,(SNES{Complex128},),arg1)
    return err
end

function SNESGetFunctionDomainError(arg1::SNES{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:SNESGetFunctionDomainError,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function SNESSetConvergenceTest(arg1::SNES{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESSetConvergenceTest,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function SNESConvergedDefault(arg1::SNES{Complex128},arg2::Integer,arg3::Float64,arg4::Float64,arg5::Float64,arg6::Union{Ptr{SNESConvergedReason},StridedArray{SNESConvergedReason},Ptr{SNESConvergedReason},Ref{SNESConvergedReason}},arg7::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESConvergedDefault,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Int64,Float64,Float64,Float64,Ptr{SNESConvergedReason},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function SNESConvergedSkip(arg1::SNES{Complex128},arg2::Integer,arg3::Float64,arg4::Float64,arg5::Float64,arg6::Union{Ptr{SNESConvergedReason},StridedArray{SNESConvergedReason},Ptr{SNESConvergedReason},Ref{SNESConvergedReason}},arg7::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESConvergedSkip,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Int64,Float64,Float64,Float64,Ptr{SNESConvergedReason},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function SNESGetConvergedReason(arg1::SNES{Complex128},arg2::Union{Ptr{SNESConvergedReason},StridedArray{SNESConvergedReason},Ptr{SNESConvergedReason},Ref{SNESConvergedReason}})
    err = ccall((:SNESGetConvergedReason,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{SNESConvergedReason}),arg1,arg2)
    return err
end

function SNESGetFunction(arg1::SNES{Complex128},arg2::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:SNESGetFunction,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{Vec{Complex128}},Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4)
    return err
end

function SNESComputeFunction(arg1::SNES{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128})
    err = ccall((:SNESComputeFunction,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function SNESSetJacobian(arg1::SNES{Complex128},arg2::Mat{Complex128},arg3::Mat{Complex128},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESSetJacobian,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Mat{Complex128},Mat{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function SNESGetJacobian(arg1::SNES{Complex128},arg2::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}},arg3::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}},arg4::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg5::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:SNESGetJacobian,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{Mat{Complex128}},Ptr{Mat{Complex128}},Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function SNESObjectiveComputeFunctionDefaultFD(arg1::SNES{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESObjectiveComputeFunctionDefaultFD,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Vec{Complex128},Vec{Complex128},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function SNESComputeJacobianDefault(arg1::SNES{Complex128},arg2::Vec{Complex128},arg3::Mat{Complex128},arg4::Mat{Complex128},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESComputeJacobianDefault,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Vec{Complex128},Mat{Complex128},Mat{Complex128},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function SNESComputeJacobianDefaultColor(arg1::SNES{Complex128},arg2::Vec{Complex128},arg3::Mat{Complex128},arg4::Mat{Complex128},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESComputeJacobianDefaultColor,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Vec{Complex128},Mat{Complex128},Mat{Complex128},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function SNESSetComputeInitialGuess(arg1::SNES{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESSetComputeInitialGuess,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function SNESSetPicard(arg1::SNES{Complex128},arg2::Vec{Complex128},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Mat{Complex128},arg5::Mat{Complex128},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg7::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESSetPicard,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Vec{Complex128},Ptr{Void},Mat{Complex128},Mat{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function SNESGetPicard(arg1::SNES{Complex128},arg2::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}},arg5::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}},arg6::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg7::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:SNESGetPicard,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{Vec{Complex128}},Ptr{Ptr{Void}},Ptr{Mat{Complex128}},Ptr{Mat{Complex128}},Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function SNESSetInitialFunction(arg1::SNES{Complex128},arg2::Vec{Complex128})
    err = ccall((:SNESSetInitialFunction,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Vec{Complex128}),arg1,arg2)
    return err
end

function SNESSetObjective(arg1::SNES{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESSetObjective,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function SNESGetObjective(arg1::SNES{Complex128},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:SNESGetObjective,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function SNESComputeObjective(arg1::SNES{Complex128},arg2::Vec{Complex128},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:SNESComputeObjective,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Vec{Complex128},Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function SNESSetNormSchedule(arg1::SNES{Complex128},arg2::SNESNormSchedule)
    err = ccall((:SNESSetNormSchedule,petscComplexDouble),PetscErrorCode,(SNES{Complex128},SNESNormSchedule),arg1,arg2)
    return err
end

function SNESGetNormSchedule(arg1::SNES{Complex128},arg2::Union{Ptr{SNESNormSchedule},StridedArray{SNESNormSchedule},Ptr{SNESNormSchedule},Ref{SNESNormSchedule}})
    err = ccall((:SNESGetNormSchedule,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{SNESNormSchedule}),arg1,arg2)
    return err
end

function SNESSetFunctionType(arg1::SNES{Complex128},arg2::SNESFunctionType)
    err = ccall((:SNESSetFunctionType,petscComplexDouble),PetscErrorCode,(SNES{Complex128},SNESFunctionType),arg1,arg2)
    return err
end

function SNESGetFunctionType(arg1::SNES{Complex128},arg2::Union{Ptr{SNESFunctionType},StridedArray{SNESFunctionType},Ptr{SNESFunctionType},Ref{SNESFunctionType}})
    err = ccall((:SNESGetFunctionType,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{SNESFunctionType}),arg1,arg2)
    return err
end

function SNESSetNGS(arg1::SNES{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESSetNGS,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function SNESGetNGS(arg1::SNES{Complex128},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:SNESGetNGS,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function SNESSetUseNGS(arg1::SNES{Complex128},arg2::PetscBool)
    err = ccall((:SNESSetUseNGS,petscComplexDouble),PetscErrorCode,(SNES{Complex128},PetscBool),arg1,arg2)
    return err
end

function SNESGetUseNGS(arg1::SNES{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:SNESGetUseNGS,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function SNESComputeNGS(arg1::SNES{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128})
    err = ccall((:SNESComputeNGS,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function SNESNGSSetSweeps(arg1::SNES{Complex128},arg2::Integer)
    err = ccall((:SNESNGSSetSweeps,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Int64),arg1,arg2)
    return err
end

function SNESNGSGetSweeps(arg1::SNES{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:SNESNGSGetSweeps,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function SNESNGSSetTolerances(arg1::SNES{Complex128},arg2::Float64,arg3::Float64,arg4::Float64,arg5::Integer)
    err = ccall((:SNESNGSSetTolerances,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Float64,Float64,Float64,Int64),arg1,arg2,arg3,arg4,arg5)
    return err
end

function SNESNGSGetTolerances(arg1::SNES{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:SNESNGSGetTolerances,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function SNESUpdateCheckJacobian(arg1::SNES{Complex128},arg2::Integer)
    err = ccall((:SNESUpdateCheckJacobian,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Int64),arg1,arg2)
    return err
end

function SNESShellGetContext(arg1::SNES{Complex128},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:SNESShellGetContext,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{Ptr{Void}}),arg1,arg2)
    return err
end

function SNESShellSetContext(arg1::SNES{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESShellSetContext,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function SNESShellSetSolve(arg1::SNES{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESShellSetSolve,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function SNESLineSearchCreate(arg1::MPI_Comm,arg2::Union{Ptr{SNESLineSearch{Complex128}},StridedArray{SNESLineSearch{Complex128}},Ptr{SNESLineSearch{Complex128}},Ref{SNESLineSearch{Complex128}}})
    err = ccall((:SNESLineSearchCreate,petscComplexDouble),PetscErrorCode,(comm_type,Ptr{SNESLineSearch{Complex128}}),arg1,arg2)
    return err
end

function SNESLineSearchReset(arg1::SNESLineSearch{Complex128})
    err = ccall((:SNESLineSearchReset,petscComplexDouble),PetscErrorCode,(SNESLineSearch{Complex128},),arg1)
    return err
end

function SNESLineSearchView(arg1::SNESLineSearch{Complex128},arg2::PetscViewer{Complex128})
    err = ccall((:SNESLineSearchView,petscComplexDouble),PetscErrorCode,(SNESLineSearch{Complex128},PetscViewer{Complex128}),arg1,arg2)
    return err
end

function SNESLineSearchDestroy(arg1::Union{Ptr{SNESLineSearch{Complex128}},StridedArray{SNESLineSearch{Complex128}},Ptr{SNESLineSearch{Complex128}},Ref{SNESLineSearch{Complex128}}})
    err = ccall((:SNESLineSearchDestroy,petscComplexDouble),PetscErrorCode,(Ptr{SNESLineSearch{Complex128}},),arg1)
    return err
end

function SNESLineSearchSetType(arg1::SNESLineSearch{Complex128},arg2::SNESLineSearchType)
    err = ccall((:SNESLineSearchSetType,petscComplexDouble),PetscErrorCode,(SNESLineSearch{Complex128},SNESLineSearchType),arg1,arg2)
    return err
end

function SNESLineSearchSetFromOptions(arg1::SNESLineSearch{Complex128})
    err = ccall((:SNESLineSearchSetFromOptions,petscComplexDouble),PetscErrorCode,(SNESLineSearch{Complex128},),arg1)
    return err
end

function SNESLineSearchSetFunction(arg1::SNESLineSearch{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESLineSearchSetFunction,petscComplexDouble),PetscErrorCode,(SNESLineSearch{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function SNESLineSearchSetUp(arg1::SNESLineSearch{Complex128})
    err = ccall((:SNESLineSearchSetUp,petscComplexDouble),PetscErrorCode,(SNESLineSearch{Complex128},),arg1)
    return err
end

function SNESLineSearchApply(arg1::SNESLineSearch{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Vec{Complex128})
    err = ccall((:SNESLineSearchApply,petscComplexDouble),PetscErrorCode,(SNESLineSearch{Complex128},Vec{Complex128},Vec{Complex128},Ptr{Float64},Vec{Complex128}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function SNESLineSearchPreCheck(arg1::SNESLineSearch{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128},arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:SNESLineSearchPreCheck,petscComplexDouble),PetscErrorCode,(SNESLineSearch{Complex128},Vec{Complex128},Vec{Complex128},Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function SNESLineSearchPostCheck(arg1::SNESLineSearch{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128},arg4::Vec{Complex128},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg6::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:SNESLineSearchPostCheck,petscComplexDouble),PetscErrorCode,(SNESLineSearch{Complex128},Vec{Complex128},Vec{Complex128},Vec{Complex128},Ptr{PetscBool},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function SNESLineSearchSetWorkVecs(arg1::SNESLineSearch{Complex128},arg2::Integer)
    err = ccall((:SNESLineSearchSetWorkVecs,petscComplexDouble),PetscErrorCode,(SNESLineSearch{Complex128},Int64),arg1,arg2)
    return err
end

function SNESLineSearchSetPreCheck(arg1::SNESLineSearch{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},ctx::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESLineSearchSetPreCheck,petscComplexDouble),PetscErrorCode,(SNESLineSearch{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,ctx)
    return err
end

function SNESLineSearchSetPostCheck(arg1::SNESLineSearch{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},ctx::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESLineSearchSetPostCheck,petscComplexDouble),PetscErrorCode,(SNESLineSearch{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,ctx)
    return err
end

function SNESLineSearchGetPreCheck(arg1::SNESLineSearch{Complex128},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},ctx::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:SNESLineSearchGetPreCheck,petscComplexDouble),PetscErrorCode,(SNESLineSearch{Complex128},Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,ctx)
    return err
end

function SNESLineSearchGetPostCheck(arg1::SNESLineSearch{Complex128},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},ctx::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:SNESLineSearchGetPostCheck,petscComplexDouble),PetscErrorCode,(SNESLineSearch{Complex128},Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,ctx)
    return err
end

function SNESLineSearchSetVIFunctions(arg1::SNESLineSearch{Complex128},arg2::SNESLineSearchVIProjectFunc,arg3::SNESLineSearchVINormFunc)
    err = ccall((:SNESLineSearchSetVIFunctions,petscComplexDouble),PetscErrorCode,(SNESLineSearch{Complex128},SNESLineSearchVIProjectFunc,SNESLineSearchVINormFunc),arg1,arg2,arg3)
    return err
end

function SNESLineSearchGetVIFunctions(arg1::SNESLineSearch{Complex128},arg2::Union{Ptr{SNESLineSearchVIProjectFunc},StridedArray{SNESLineSearchVIProjectFunc},Ptr{SNESLineSearchVIProjectFunc},Ref{SNESLineSearchVIProjectFunc}},arg3::Union{Ptr{SNESLineSearchVINormFunc},StridedArray{SNESLineSearchVINormFunc},Ptr{SNESLineSearchVINormFunc},Ref{SNESLineSearchVINormFunc}})
    err = ccall((:SNESLineSearchGetVIFunctions,petscComplexDouble),PetscErrorCode,(SNESLineSearch{Complex128},Ptr{SNESLineSearchVIProjectFunc},Ptr{SNESLineSearchVINormFunc}),arg1,arg2,arg3)
    return err
end

function SNESLineSearchSetSNES(arg1::SNESLineSearch{Complex128},arg2::SNES{Complex128})
    err = ccall((:SNESLineSearchSetSNES,petscComplexDouble),PetscErrorCode,(SNESLineSearch{Complex128},SNES{Complex128}),arg1,arg2)
    return err
end

function SNESLineSearchGetSNES(arg1::SNESLineSearch{Complex128},arg2::Union{Ptr{SNES{Complex128}},StridedArray{SNES{Complex128}},Ptr{SNES{Complex128}},Ref{SNES{Complex128}}})
    err = ccall((:SNESLineSearchGetSNES,petscComplexDouble),PetscErrorCode,(SNESLineSearch{Complex128},Ptr{SNES{Complex128}}),arg1,arg2)
    return err
end

function SNESLineSearchGetTolerances(arg1::SNESLineSearch{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:SNESLineSearchGetTolerances,petscComplexDouble),PetscErrorCode,(SNESLineSearch{Complex128},Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function SNESLineSearchSetTolerances(arg1::SNESLineSearch{Complex128},arg2::Float64,arg3::Float64,arg4::Float64,arg5::Float64,arg6::Float64,arg7::Integer)
    err = ccall((:SNESLineSearchSetTolerances,petscComplexDouble),PetscErrorCode,(SNESLineSearch{Complex128},Float64,Float64,Float64,Float64,Float64,Int64),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function SNESLineSearchPreCheckPicard(arg1::SNESLineSearch{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128},arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESLineSearchPreCheckPicard,petscComplexDouble),PetscErrorCode,(SNESLineSearch{Complex128},Vec{Complex128},Vec{Complex128},Ptr{PetscBool},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function SNESLineSearchGetLambda(arg1::SNESLineSearch{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:SNESLineSearchGetLambda,petscComplexDouble),PetscErrorCode,(SNESLineSearch{Complex128},Ptr{Float64}),arg1,arg2)
    return err
end

function SNESLineSearchSetLambda(arg1::SNESLineSearch{Complex128},arg2::Float64)
    err = ccall((:SNESLineSearchSetLambda,petscComplexDouble),PetscErrorCode,(SNESLineSearch{Complex128},Float64),arg1,arg2)
    return err
end

function SNESLineSearchGetDamping(arg1::SNESLineSearch{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:SNESLineSearchGetDamping,petscComplexDouble),PetscErrorCode,(SNESLineSearch{Complex128},Ptr{Float64}),arg1,arg2)
    return err
end

function SNESLineSearchSetDamping(arg1::SNESLineSearch{Complex128},arg2::Float64)
    err = ccall((:SNESLineSearchSetDamping,petscComplexDouble),PetscErrorCode,(SNESLineSearch{Complex128},Float64),arg1,arg2)
    return err
end

function SNESLineSearchGetOrder(arg1::SNESLineSearch{Complex128},order::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:SNESLineSearchGetOrder,petscComplexDouble),PetscErrorCode,(SNESLineSearch{Complex128},Ptr{Int64}),arg1,order)
    return err
end

function SNESLineSearchSetOrder(arg1::SNESLineSearch{Complex128},order::Integer)
    err = ccall((:SNESLineSearchSetOrder,petscComplexDouble),PetscErrorCode,(SNESLineSearch{Complex128},Int64),arg1,order)
    return err
end

function SNESLineSearchGetReason(arg1::SNESLineSearch{Complex128},arg2::Union{Ptr{SNESLineSearchReason},StridedArray{SNESLineSearchReason},Ptr{SNESLineSearchReason},Ref{SNESLineSearchReason}})
    err = ccall((:SNESLineSearchGetReason,petscComplexDouble),PetscErrorCode,(SNESLineSearch{Complex128},Ptr{SNESLineSearchReason}),arg1,arg2)
    return err
end

function SNESLineSearchSetReason(arg1::SNESLineSearch{Complex128},arg2::SNESLineSearchReason)
    err = ccall((:SNESLineSearchSetReason,petscComplexDouble),PetscErrorCode,(SNESLineSearch{Complex128},SNESLineSearchReason),arg1,arg2)
    return err
end

function SNESLineSearchGetVecs(arg1::SNESLineSearch{Complex128},arg2::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}},arg3::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}},arg4::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}},arg5::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}},arg6::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:SNESLineSearchGetVecs,petscComplexDouble),PetscErrorCode,(SNESLineSearch{Complex128},Ptr{Vec{Complex128}},Ptr{Vec{Complex128}},Ptr{Vec{Complex128}},Ptr{Vec{Complex128}},Ptr{Vec{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function SNESLineSearchSetVecs(arg1::SNESLineSearch{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128},arg4::Vec{Complex128},arg5::Vec{Complex128},arg6::Vec{Complex128})
    err = ccall((:SNESLineSearchSetVecs,petscComplexDouble),PetscErrorCode,(SNESLineSearch{Complex128},Vec{Complex128},Vec{Complex128},Vec{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function SNESLineSearchGetNorms(arg1::SNESLineSearch{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:SNESLineSearchGetNorms,petscComplexDouble),PetscErrorCode,(SNESLineSearch{Complex128},Ptr{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function SNESLineSearchSetNorms(arg1::SNESLineSearch{Complex128},arg2::Float64,arg3::Float64,arg4::Float64)
    err = ccall((:SNESLineSearchSetNorms,petscComplexDouble),PetscErrorCode,(SNESLineSearch{Complex128},Float64,Float64,Float64),arg1,arg2,arg3,arg4)
    return err
end

function SNESLineSearchComputeNorms(arg1::SNESLineSearch{Complex128})
    err = ccall((:SNESLineSearchComputeNorms,petscComplexDouble),PetscErrorCode,(SNESLineSearch{Complex128},),arg1)
    return err
end

function SNESLineSearchSetComputeNorms(arg1::SNESLineSearch{Complex128},arg2::PetscBool)
    err = ccall((:SNESLineSearchSetComputeNorms,petscComplexDouble),PetscErrorCode,(SNESLineSearch{Complex128},PetscBool),arg1,arg2)
    return err
end

function SNESLineSearchSetMonitor(arg1::SNESLineSearch{Complex128},arg2::PetscBool)
    err = ccall((:SNESLineSearchSetMonitor,petscComplexDouble),PetscErrorCode,(SNESLineSearch{Complex128},PetscBool),arg1,arg2)
    return err
end

function SNESLineSearchGetMonitor(arg1::SNESLineSearch{Complex128},arg2::Union{Ptr{PetscViewer{Complex128}},StridedArray{PetscViewer{Complex128}},Ptr{PetscViewer{Complex128}},Ref{PetscViewer{Complex128}}})
    err = ccall((:SNESLineSearchGetMonitor,petscComplexDouble),PetscErrorCode,(SNESLineSearch{Complex128},Ptr{PetscViewer{Complex128}}),arg1,arg2)
    return err
end

function SNESLineSearchAppendOptionsPrefix(arg1::SNESLineSearch{Complex128},prefix::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:SNESLineSearchAppendOptionsPrefix,petscComplexDouble),PetscErrorCode,(SNESLineSearch{Complex128},Cstring),arg1,prefix)
    return err
end

function SNESLineSearchGetOptionsPrefix(arg1::SNESLineSearch{Complex128},prefix::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:SNESLineSearchGetOptionsPrefix,petscComplexDouble),PetscErrorCode,(SNESLineSearch{Complex128},Ptr{Ptr{UInt8}}),arg1,prefix)
    return err
end

function SNESLineSearchShellSetUserFunc(arg1::SNESLineSearch{Complex128},arg2::SNESLineSearchUserFunc,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESLineSearchShellSetUserFunc,petscComplexDouble),PetscErrorCode,(SNESLineSearch{Complex128},SNESLineSearchUserFunc,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function SNESLineSearchShellGetUserFunc(arg1::SNESLineSearch{Complex128},arg2::Union{Ptr{SNESLineSearchUserFunc},StridedArray{SNESLineSearchUserFunc},Ptr{SNESLineSearchUserFunc},Ref{SNESLineSearchUserFunc}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:SNESLineSearchShellGetUserFunc,petscComplexDouble),PetscErrorCode,(SNESLineSearch{Complex128},Ptr{SNESLineSearchUserFunc},Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function SNESLineSearchBTSetAlpha(arg1::SNESLineSearch{Complex128},arg2::Float64)
    err = ccall((:SNESLineSearchBTSetAlpha,petscComplexDouble),PetscErrorCode,(SNESLineSearch{Complex128},Float64),arg1,arg2)
    return err
end

function SNESLineSearchBTGetAlpha(arg1::SNESLineSearch{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:SNESLineSearchBTGetAlpha,petscComplexDouble),PetscErrorCode,(SNESLineSearch{Complex128},Ptr{Float64}),arg1,arg2)
    return err
end

function SNESLineSearchRegister(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESLineSearchRegister,petscComplexDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function SNESVISetVariableBounds(arg1::SNES{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128})
    err = ccall((:SNESVISetVariableBounds,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function SNESVISetComputeVariableBounds(arg1::SNES{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESVISetComputeVariableBounds,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function SNESVIGetInactiveSet(arg1::SNES{Complex128},arg2::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:SNESVIGetInactiveSet,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{IS{Complex128}}),arg1,arg2)
    return err
end

function SNESVIGetActiveSetIS(arg1::SNES{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128},arg4::Union{Ptr{IS{Complex128}},StridedArray{IS{Complex128}},Ptr{IS{Complex128}},Ref{IS{Complex128}}})
    err = ccall((:SNESVIGetActiveSetIS,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Vec{Complex128},Vec{Complex128},Ptr{IS{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function SNESVIComputeInactiveSetFnorm(arg1::SNES{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:SNESVIComputeInactiveSetFnorm,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Vec{Complex128},Vec{Complex128},Ptr{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function SNESVISetRedundancyCheck(arg1::SNES{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESVISetRedundancyCheck,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function SNESTestLocalMin(arg1::SNES{Complex128})
    err = ccall((:SNESTestLocalMin,petscComplexDouble),PetscErrorCode,(SNES{Complex128},),arg1)
    return err
end

function SNESComputeJacobian(arg1::SNES{Complex128},arg2::Vec{Complex128},arg3::Mat{Complex128},arg4::Mat{Complex128})
    err = ccall((:SNESComputeJacobian,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Vec{Complex128},Mat{Complex128},Mat{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function SNESSetDM(arg1::SNES{Complex128},arg2::DM{Complex128})
    err = ccall((:SNESSetDM,petscComplexDouble),PetscErrorCode,(SNES{Complex128},DM{Complex128}),arg1,arg2)
    return err
end

function SNESGetDM(arg1::SNES{Complex128},arg2::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:SNESGetDM,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{DM{Complex128}}),arg1,arg2)
    return err
end

function SNESSetNPC(arg1::SNES{Complex128},arg2::SNES{Complex128})
    err = ccall((:SNESSetNPC,petscComplexDouble),PetscErrorCode,(SNES{Complex128},SNES{Complex128}),arg1,arg2)
    return err
end

function SNESGetNPC(arg1::SNES{Complex128},arg2::Union{Ptr{SNES{Complex128}},StridedArray{SNES{Complex128}},Ptr{SNES{Complex128}},Ref{SNES{Complex128}}})
    err = ccall((:SNESGetNPC,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{SNES{Complex128}}),arg1,arg2)
    return err
end

function SNESHasNPC(arg1::SNES{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:SNESHasNPC,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function SNESApplyNPC(arg1::SNES{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128},arg4::Vec{Complex128})
    err = ccall((:SNESApplyNPC,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Vec{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function SNESGetNPCFunction(arg1::SNES{Complex128},arg2::Vec{Complex128},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:SNESGetNPCFunction,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Vec{Complex128},Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function SNESComputeFunctionDefaultNPC(arg1::SNES{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128})
    err = ccall((:SNESComputeFunctionDefaultNPC,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function SNESSetNPCSide(arg1::SNES{Complex128},arg2::PCSide)
    err = ccall((:SNESSetNPCSide,petscComplexDouble),PetscErrorCode,(SNES{Complex128},PCSide),arg1,arg2)
    return err
end

function SNESGetNPCSide(arg1::SNES{Complex128},arg2::Union{Ptr{PCSide},StridedArray{PCSide},Ptr{PCSide},Ref{PCSide}})
    err = ccall((:SNESGetNPCSide,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{PCSide}),arg1,arg2)
    return err
end

function SNESSetLineSearch(arg1::SNES{Complex128},arg2::SNESLineSearch{Complex128})
    err = ccall((:SNESSetLineSearch,petscComplexDouble),PetscErrorCode,(SNES{Complex128},SNESLineSearch{Complex128}),arg1,arg2)
    return err
end

function SNESGetLineSearch(arg1::SNES{Complex128},arg2::Union{Ptr{SNESLineSearch{Complex128}},StridedArray{SNESLineSearch{Complex128}},Ptr{SNESLineSearch{Complex128}},Ref{SNESLineSearch{Complex128}}})
    err = ccall((:SNESGetLineSearch,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{SNESLineSearch{Complex128}}),arg1,arg2)
    return err
end

function SNESRestrictHookAdd(arg1::SNES{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESRestrictHookAdd,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function SNESRestrictHooksRun(arg1::SNES{Complex128},arg2::SNES{Complex128})
    err = ccall((:SNESRestrictHooksRun,petscComplexDouble),PetscErrorCode,(SNES{Complex128},SNES{Complex128}),arg1,arg2)
    return err
end

function DMSNESSetFunction(arg1::DM{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMSNESSetFunction,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMSNESGetFunction(arg1::DM{Complex128},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:DMSNESGetFunction,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function DMSNESSetNGS(arg1::DM{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMSNESSetNGS,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMSNESGetNGS(arg1::DM{Complex128},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:DMSNESGetNGS,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function DMSNESSetJacobian(arg1::DM{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMSNESSetJacobian,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMSNESGetJacobian(arg1::DM{Complex128},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:DMSNESGetJacobian,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function DMSNESSetPicard(arg1::DM{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMSNESSetPicard,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function DMSNESGetPicard(arg1::DM{Complex128},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:DMSNESGetPicard,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Ptr{Void}},Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4)
    return err
end

function DMSNESSetObjective(arg1::DM{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMSNESSetObjective,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMSNESGetObjective(arg1::DM{Complex128},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:DMSNESGetObjective,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function DMDASNESSetFunctionLocal(arg1::DM{Complex128},arg2::InsertMode,arg3::DMDASNESFunction,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDASNESSetFunctionLocal,petscComplexDouble),PetscErrorCode,(DM{Complex128},InsertMode,DMDASNESFunction,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function DMDASNESSetJacobianLocal(arg1::DM{Complex128},arg2::DMDASNESJacobian,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDASNESSetJacobianLocal,petscComplexDouble),PetscErrorCode,(DM{Complex128},DMDASNESJacobian,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMDASNESSetObjectiveLocal(arg1::DM{Complex128},arg2::DMDASNESObjective,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDASNESSetObjectiveLocal,petscComplexDouble),PetscErrorCode,(DM{Complex128},DMDASNESObjective,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMDASNESSetPicardLocal(arg1::DM{Complex128},arg2::InsertMode,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDASNESSetPicardLocal,petscComplexDouble),PetscErrorCode,(DM{Complex128},InsertMode,Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexSNESGetGeometryFEM(arg1::DM{Complex128},arg2::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:DMPlexSNESGetGeometryFEM,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Vec{Complex128}}),arg1,arg2)
    return err
end

function DMPlexSNESGetGeometryFVM(arg1::DM{Complex128},arg2::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}},arg3::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:DMPlexSNESGetGeometryFVM,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Vec{Complex128}},Ptr{Vec{Complex128}},Ptr{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexSNESGetGradientDM(arg1::DM{Complex128},arg2::PetscFV{Complex128},arg3::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:DMPlexSNESGetGradientDM,petscComplexDouble),PetscErrorCode,(DM{Complex128},PetscFV{Complex128},Ptr{DM{Complex128}}),arg1,arg2,arg3)
    return err
end

function DMPlexGetCellFields(arg1::DM{Complex128},arg2::Integer,arg3::Integer,arg4::Vec{Complex128},arg5::Vec{Complex128},arg6::Vec{Complex128},arg7::Union{Ptr{Ptr{Complex128}},StridedArray{Ptr{Complex128}},Ptr{Ptr{Complex128}},Ref{Ptr{Complex128}}},arg8::Union{Ptr{Ptr{Complex128}},StridedArray{Ptr{Complex128}},Ptr{Ptr{Complex128}},Ref{Ptr{Complex128}}},arg9::Union{Ptr{Ptr{Complex128}},StridedArray{Ptr{Complex128}},Ptr{Ptr{Complex128}},Ref{Ptr{Complex128}}})
    err = ccall((:DMPlexGetCellFields,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Int64,Vec{Complex128},Vec{Complex128},Vec{Complex128},Ptr{Ptr{Complex128}},Ptr{Ptr{Complex128}},Ptr{Ptr{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
    return err
end

function DMPlexRestoreCellFields(arg1::DM{Complex128},arg2::Integer,arg3::Integer,arg4::Vec{Complex128},arg5::Vec{Complex128},arg6::Vec{Complex128},arg7::Union{Ptr{Ptr{Complex128}},StridedArray{Ptr{Complex128}},Ptr{Ptr{Complex128}},Ref{Ptr{Complex128}}},arg8::Union{Ptr{Ptr{Complex128}},StridedArray{Ptr{Complex128}},Ptr{Ptr{Complex128}},Ref{Ptr{Complex128}}},arg9::Union{Ptr{Ptr{Complex128}},StridedArray{Ptr{Complex128}},Ptr{Ptr{Complex128}},Ref{Ptr{Complex128}}})
    err = ccall((:DMPlexRestoreCellFields,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Int64,Vec{Complex128},Vec{Complex128},Vec{Complex128},Ptr{Ptr{Complex128}},Ptr{Ptr{Complex128}},Ptr{Ptr{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
    return err
end

function DMPlexGetFaceFields(arg1::DM{Complex128},arg2::Integer,arg3::Integer,arg4::Vec{Complex128},arg5::Vec{Complex128},arg6::Vec{Complex128},arg7::Vec{Complex128},arg8::Vec{Complex128},arg9::Union{Ptr{Ptr{Complex128}},StridedArray{Ptr{Complex128}},Ptr{Ptr{Complex128}},Ref{Ptr{Complex128}}},arg10::Union{Ptr{Ptr{Complex128}},StridedArray{Ptr{Complex128}},Ptr{Ptr{Complex128}},Ref{Ptr{Complex128}}})
    err = ccall((:DMPlexGetFaceFields,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Int64,Vec{Complex128},Vec{Complex128},Vec{Complex128},Vec{Complex128},Vec{Complex128},Ptr{Ptr{Complex128}},Ptr{Ptr{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function DMPlexRestoreFaceFields(arg1::DM{Complex128},arg2::Integer,arg3::Integer,arg4::Vec{Complex128},arg5::Vec{Complex128},arg6::Vec{Complex128},arg7::Vec{Complex128},arg8::Vec{Complex128},arg9::Union{Ptr{Ptr{Complex128}},StridedArray{Ptr{Complex128}},Ptr{Ptr{Complex128}},Ref{Ptr{Complex128}}},arg10::Union{Ptr{Ptr{Complex128}},StridedArray{Ptr{Complex128}},Ptr{Ptr{Complex128}},Ref{Ptr{Complex128}}})
    err = ccall((:DMPlexRestoreFaceFields,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Int64,Vec{Complex128},Vec{Complex128},Vec{Complex128},Vec{Complex128},Vec{Complex128},Ptr{Ptr{Complex128}},Ptr{Ptr{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function DMPlexGetFaceGeometry(arg1::DM{Complex128},arg2::Integer,arg3::Integer,arg4::Vec{Complex128},arg5::Vec{Complex128},arg6::Union{Ptr{Ptr{PetscFVFaceGeom}},StridedArray{Ptr{PetscFVFaceGeom}},Ptr{Ptr{PetscFVFaceGeom}},Ref{Ptr{PetscFVFaceGeom}}},arg7::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:DMPlexGetFaceGeometry,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Int64,Vec{Complex128},Vec{Complex128},Ptr{Ptr{PetscFVFaceGeom}},Ptr{Ptr{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function DMPlexRestoreFaceGeometry(arg1::DM{Complex128},arg2::Integer,arg3::Integer,arg4::Vec{Complex128},arg5::Vec{Complex128},arg6::Union{Ptr{Ptr{PetscFVFaceGeom}},StridedArray{Ptr{PetscFVFaceGeom}},Ptr{Ptr{PetscFVFaceGeom}},Ref{Ptr{PetscFVFaceGeom}}},arg7::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:DMPlexRestoreFaceGeometry,petscComplexDouble),PetscErrorCode,(DM{Complex128},Int64,Int64,Vec{Complex128},Vec{Complex128},Ptr{Ptr{PetscFVFaceGeom}},Ptr{Ptr{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function DMSNESSetFunctionLocal(arg1::DM{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMSNESSetFunctionLocal,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMSNESSetJacobianLocal(arg1::DM{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMSNESSetJacobianLocal,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function SNESMultiblockSetFields(arg1::SNES{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:SNESMultiblockSetFields,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Cstring,Int64,Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function SNESMultiblockSetIS(arg1::SNES{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::IS{Complex128})
    err = ccall((:SNESMultiblockSetIS,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Cstring,IS{Complex128}),arg1,arg2,arg3)
    return err
end

function SNESMultiblockSetBlockSize(arg1::SNES{Complex128},arg2::Integer)
    err = ccall((:SNESMultiblockSetBlockSize,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Int64),arg1,arg2)
    return err
end

function SNESMultiblockSetType(arg1::SNES{Complex128},arg2::PCCompositeType)
    err = ccall((:SNESMultiblockSetType,petscComplexDouble),PetscErrorCode,(SNES{Complex128},PCCompositeType),arg1,arg2)
    return err
end

function SNESMSRegister(arg0::Type{Complex128},arg1::SNESMSType,arg2::Integer,arg3::Integer,arg4::Float64,arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg7::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:SNESMSRegister,petscComplexDouble),PetscErrorCode,(SNESMSType,Int64,Int64,Float64,Ptr{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function SNESMSSetType(arg1::SNES{Complex128},arg2::SNESMSType)
    err = ccall((:SNESMSSetType,petscComplexDouble),PetscErrorCode,(SNES{Complex128},SNESMSType),arg1,arg2)
    return err
end

function SNESMSFinalizePackage(arg0::Type{Complex128})
    err = ccall((:SNESMSFinalizePackage,petscComplexDouble),PetscErrorCode,())
    return err
end

function SNESMSInitializePackage(arg0::Type{Complex128})
    err = ccall((:SNESMSInitializePackage,petscComplexDouble),PetscErrorCode,())
    return err
end

function SNESMSRegisterDestroy(arg0::Type{Complex128})
    err = ccall((:SNESMSRegisterDestroy,petscComplexDouble),PetscErrorCode,())
    return err
end

function SNESNGMRESSetRestartType(arg1::SNES{Complex128},arg2::SNESNGMRESRestartType)
    err = ccall((:SNESNGMRESSetRestartType,petscComplexDouble),PetscErrorCode,(SNES{Complex128},SNESNGMRESRestartType),arg1,arg2)
    return err
end

function SNESNGMRESSetSelectType(arg1::SNES{Complex128},arg2::SNESNGMRESSelectType)
    err = ccall((:SNESNGMRESSetSelectType,petscComplexDouble),PetscErrorCode,(SNES{Complex128},SNESNGMRESSelectType),arg1,arg2)
    return err
end

function SNESNCGSetType(arg1::SNES{Complex128},arg2::SNESNCGType)
    err = ccall((:SNESNCGSetType,petscComplexDouble),PetscErrorCode,(SNES{Complex128},SNESNCGType),arg1,arg2)
    return err
end

function SNESQNSetType(arg1::SNES{Complex128},arg2::SNESQNType)
    err = ccall((:SNESQNSetType,petscComplexDouble),PetscErrorCode,(SNES{Complex128},SNESQNType),arg1,arg2)
    return err
end

function SNESQNSetScaleType(arg1::SNES{Complex128},arg2::SNESQNScaleType)
    err = ccall((:SNESQNSetScaleType,petscComplexDouble),PetscErrorCode,(SNES{Complex128},SNESQNScaleType),arg1,arg2)
    return err
end

function SNESQNSetRestartType(arg1::SNES{Complex128},arg2::SNESQNRestartType)
    err = ccall((:SNESQNSetRestartType,petscComplexDouble),PetscErrorCode,(SNES{Complex128},SNESQNRestartType),arg1,arg2)
    return err
end

function SNESNASMGetType(arg1::SNES{Complex128},arg2::Union{Ptr{PCASMType},StridedArray{PCASMType},Ptr{PCASMType},Ref{PCASMType}})
    err = ccall((:SNESNASMGetType,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{PCASMType}),arg1,arg2)
    return err
end

function SNESNASMSetType(arg1::SNES{Complex128},arg2::PCASMType)
    err = ccall((:SNESNASMSetType,petscComplexDouble),PetscErrorCode,(SNES{Complex128},PCASMType),arg1,arg2)
    return err
end

function SNESNASMGetSubdomains(arg1::SNES{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{SNES{Complex128}}},StridedArray{Ptr{SNES{Complex128}}},Ptr{Ptr{SNES{Complex128}}},Ref{Ptr{SNES{Complex128}}}},arg4::Union{Ptr{Ptr{VecScatter{Complex128}}},StridedArray{Ptr{VecScatter{Complex128}}},Ptr{Ptr{VecScatter{Complex128}}},Ref{Ptr{VecScatter{Complex128}}}},arg5::Union{Ptr{Ptr{VecScatter{Complex128}}},StridedArray{Ptr{VecScatter{Complex128}}},Ptr{Ptr{VecScatter{Complex128}}},Ref{Ptr{VecScatter{Complex128}}}},arg6::Union{Ptr{Ptr{VecScatter{Complex128}}},StridedArray{Ptr{VecScatter{Complex128}}},Ptr{Ptr{VecScatter{Complex128}}},Ref{Ptr{VecScatter{Complex128}}}})
    err = ccall((:SNESNASMGetSubdomains,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{Int64},Ptr{Ptr{SNES{Complex128}}},Ptr{Ptr{VecScatter{Complex128}}},Ptr{Ptr{VecScatter{Complex128}}},Ptr{Ptr{VecScatter{Complex128}}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function SNESNASMSetSubdomains(arg1::SNES{Complex128},arg2::Integer,arg3::Union{Ptr{SNES{Complex128}},StridedArray{SNES{Complex128}},Ptr{SNES{Complex128}},Ref{SNES{Complex128}}},arg4::Union{Ptr{VecScatter{Complex128}},StridedArray{VecScatter{Complex128}},Ptr{VecScatter{Complex128}},Ref{VecScatter{Complex128}}},arg5::Union{Ptr{VecScatter{Complex128}},StridedArray{VecScatter{Complex128}},Ptr{VecScatter{Complex128}},Ref{VecScatter{Complex128}}},arg6::Union{Ptr{VecScatter{Complex128}},StridedArray{VecScatter{Complex128}},Ptr{VecScatter{Complex128}},Ref{VecScatter{Complex128}}})
    err = ccall((:SNESNASMSetSubdomains,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Int64,Ptr{SNES{Complex128}},Ptr{VecScatter{Complex128}},Ptr{VecScatter{Complex128}},Ptr{VecScatter{Complex128}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function SNESNASMSetDamping(arg1::SNES{Complex128},arg2::Float64)
    err = ccall((:SNESNASMSetDamping,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Float64),arg1,arg2)
    return err
end

function SNESNASMGetDamping(arg1::SNES{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:SNESNASMGetDamping,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{Float64}),arg1,arg2)
    return err
end

function SNESNASMGetSubdomainVecs(arg1::SNES{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Vec{Complex128}}},StridedArray{Ptr{Vec{Complex128}}},Ptr{Ptr{Vec{Complex128}}},Ref{Ptr{Vec{Complex128}}}},arg4::Union{Ptr{Ptr{Vec{Complex128}}},StridedArray{Ptr{Vec{Complex128}}},Ptr{Ptr{Vec{Complex128}}},Ref{Ptr{Vec{Complex128}}}},arg5::Union{Ptr{Ptr{Vec{Complex128}}},StridedArray{Ptr{Vec{Complex128}}},Ptr{Ptr{Vec{Complex128}}},Ref{Ptr{Vec{Complex128}}}},arg6::Union{Ptr{Ptr{Vec{Complex128}}},StridedArray{Ptr{Vec{Complex128}}},Ptr{Ptr{Vec{Complex128}}},Ref{Ptr{Vec{Complex128}}}})
    err = ccall((:SNESNASMGetSubdomainVecs,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{Int64},Ptr{Ptr{Vec{Complex128}}},Ptr{Ptr{Vec{Complex128}}},Ptr{Ptr{Vec{Complex128}}},Ptr{Ptr{Vec{Complex128}}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function SNESNASMSetComputeFinalJacobian(arg1::SNES{Complex128},arg2::PetscBool)
    err = ccall((:SNESNASMSetComputeFinalJacobian,petscComplexDouble),PetscErrorCode,(SNES{Complex128},PetscBool),arg1,arg2)
    return err
end

function SNESCompositeSetType(arg1::SNES{Complex128},arg2::SNESCompositeType)
    err = ccall((:SNESCompositeSetType,petscComplexDouble),PetscErrorCode,(SNES{Complex128},SNESCompositeType),arg1,arg2)
    return err
end

function SNESCompositeAddSNES(arg1::SNES{Complex128},arg2::SNESType)
    err = ccall((:SNESCompositeAddSNES,petscComplexDouble),PetscErrorCode,(SNES{Complex128},SNESType),arg1,arg2)
    return err
end

function SNESCompositeGetSNES(arg1::SNES{Complex128},arg2::Integer,arg3::Union{Ptr{SNES{Complex128}},StridedArray{SNES{Complex128}},Ptr{SNES{Complex128}},Ref{SNES{Complex128}}})
    err = ccall((:SNESCompositeGetSNES,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Int64,Ptr{SNES{Complex128}}),arg1,arg2,arg3)
    return err
end

function SNESCompositeGetNumber(arg1::SNES{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:SNESCompositeGetNumber,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function SNESCompositeSetDamping(arg1::SNES{Complex128},arg2::Integer,arg3::Float64)
    err = ccall((:SNESCompositeSetDamping,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Int64,Float64),arg1,arg2,arg3)
    return err
end

function SNESFASSetType(arg1::SNES{Complex128},arg2::SNESFASType)
    err = ccall((:SNESFASSetType,petscComplexDouble),PetscErrorCode,(SNES{Complex128},SNESFASType),arg1,arg2)
    return err
end

function SNESFASGetType(arg1::SNES{Complex128},arg2::Union{Ptr{SNESFASType},StridedArray{SNESFASType},Ptr{SNESFASType},Ref{SNESFASType}})
    err = ccall((:SNESFASGetType,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{SNESFASType}),arg1,arg2)
    return err
end

function SNESFASSetLevels(arg1::SNES{Complex128},arg2::Integer,arg3::Union{Ptr{MPI_Comm},StridedArray{MPI_Comm},Ptr{MPI_Comm},Ref{MPI_Comm}})
    err = ccall((:SNESFASSetLevels,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Int64,Ptr{comm_type}),arg1,arg2,arg3)
    return err
end

function SNESFASGetLevels(arg1::SNES{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:SNESFASGetLevels,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function SNESFASGetCycleSNES(arg1::SNES{Complex128},arg2::Integer,arg3::Union{Ptr{SNES{Complex128}},StridedArray{SNES{Complex128}},Ptr{SNES{Complex128}},Ref{SNES{Complex128}}})
    err = ccall((:SNESFASGetCycleSNES,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Int64,Ptr{SNES{Complex128}}),arg1,arg2,arg3)
    return err
end

function SNESFASSetNumberSmoothUp(arg1::SNES{Complex128},arg2::Integer)
    err = ccall((:SNESFASSetNumberSmoothUp,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Int64),arg1,arg2)
    return err
end

function SNESFASSetNumberSmoothDown(arg1::SNES{Complex128},arg2::Integer)
    err = ccall((:SNESFASSetNumberSmoothDown,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Int64),arg1,arg2)
    return err
end

function SNESFASSetCycles(arg1::SNES{Complex128},arg2::Integer)
    err = ccall((:SNESFASSetCycles,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Int64),arg1,arg2)
    return err
end

function SNESFASSetMonitor(arg1::SNES{Complex128},arg2::PetscBool)
    err = ccall((:SNESFASSetMonitor,petscComplexDouble),PetscErrorCode,(SNES{Complex128},PetscBool),arg1,arg2)
    return err
end

function SNESFASSetLog(arg1::SNES{Complex128},arg2::PetscBool)
    err = ccall((:SNESFASSetLog,petscComplexDouble),PetscErrorCode,(SNES{Complex128},PetscBool),arg1,arg2)
    return err
end

function SNESFASSetGalerkin(arg1::SNES{Complex128},arg2::PetscBool)
    err = ccall((:SNESFASSetGalerkin,petscComplexDouble),PetscErrorCode,(SNES{Complex128},PetscBool),arg1,arg2)
    return err
end

function SNESFASGetGalerkin(arg1::SNES{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:SNESFASGetGalerkin,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function SNESFASCycleGetSmoother(arg1::SNES{Complex128},arg2::Union{Ptr{SNES{Complex128}},StridedArray{SNES{Complex128}},Ptr{SNES{Complex128}},Ref{SNES{Complex128}}})
    err = ccall((:SNESFASCycleGetSmoother,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{SNES{Complex128}}),arg1,arg2)
    return err
end

function SNESFASCycleGetSmootherUp(arg1::SNES{Complex128},arg2::Union{Ptr{SNES{Complex128}},StridedArray{SNES{Complex128}},Ptr{SNES{Complex128}},Ref{SNES{Complex128}}})
    err = ccall((:SNESFASCycleGetSmootherUp,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{SNES{Complex128}}),arg1,arg2)
    return err
end

function SNESFASCycleGetSmootherDown(arg1::SNES{Complex128},arg2::Union{Ptr{SNES{Complex128}},StridedArray{SNES{Complex128}},Ptr{SNES{Complex128}},Ref{SNES{Complex128}}})
    err = ccall((:SNESFASCycleGetSmootherDown,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{SNES{Complex128}}),arg1,arg2)
    return err
end

function SNESFASCycleGetCorrection(arg1::SNES{Complex128},arg2::Union{Ptr{SNES{Complex128}},StridedArray{SNES{Complex128}},Ptr{SNES{Complex128}},Ref{SNES{Complex128}}})
    err = ccall((:SNESFASCycleGetCorrection,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{SNES{Complex128}}),arg1,arg2)
    return err
end

function SNESFASCycleGetInterpolation(arg1::SNES{Complex128},arg2::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:SNESFASCycleGetInterpolation,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{Mat{Complex128}}),arg1,arg2)
    return err
end

function SNESFASCycleGetRestriction(arg1::SNES{Complex128},arg2::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:SNESFASCycleGetRestriction,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{Mat{Complex128}}),arg1,arg2)
    return err
end

function SNESFASCycleGetInjection(arg1::SNES{Complex128},arg2::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:SNESFASCycleGetInjection,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{Mat{Complex128}}),arg1,arg2)
    return err
end

function SNESFASCycleGetRScale(arg1::SNES{Complex128},arg2::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:SNESFASCycleGetRScale,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{Vec{Complex128}}),arg1,arg2)
    return err
end

function SNESFASCycleSetCycles(arg1::SNES{Complex128},arg2::Integer)
    err = ccall((:SNESFASCycleSetCycles,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Int64),arg1,arg2)
    return err
end

function SNESFASCycleIsFine(arg1::SNES{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:SNESFASCycleIsFine,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function SNESFASSetInterpolation(arg1::SNES{Complex128},arg2::Integer,arg3::Mat{Complex128})
    err = ccall((:SNESFASSetInterpolation,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Int64,Mat{Complex128}),arg1,arg2,arg3)
    return err
end

function SNESFASGetInterpolation(arg1::SNES{Complex128},arg2::Integer,arg3::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:SNESFASGetInterpolation,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Int64,Ptr{Mat{Complex128}}),arg1,arg2,arg3)
    return err
end

function SNESFASSetRestriction(arg1::SNES{Complex128},arg2::Integer,arg3::Mat{Complex128})
    err = ccall((:SNESFASSetRestriction,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Int64,Mat{Complex128}),arg1,arg2,arg3)
    return err
end

function SNESFASGetRestriction(arg1::SNES{Complex128},arg2::Integer,arg3::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:SNESFASGetRestriction,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Int64,Ptr{Mat{Complex128}}),arg1,arg2,arg3)
    return err
end

function SNESFASSetInjection(arg1::SNES{Complex128},arg2::Integer,arg3::Mat{Complex128})
    err = ccall((:SNESFASSetInjection,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Int64,Mat{Complex128}),arg1,arg2,arg3)
    return err
end

function SNESFASGetInjection(arg1::SNES{Complex128},arg2::Integer,arg3::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}})
    err = ccall((:SNESFASGetInjection,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Int64,Ptr{Mat{Complex128}}),arg1,arg2,arg3)
    return err
end

function SNESFASSetRScale(arg1::SNES{Complex128},arg2::Integer,arg3::Vec{Complex128})
    err = ccall((:SNESFASSetRScale,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Int64,Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function SNESFASGetRScale(arg1::SNES{Complex128},arg2::Integer,arg3::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:SNESFASGetRScale,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Int64,Ptr{Vec{Complex128}}),arg1,arg2,arg3)
    return err
end

function SNESFASSetContinuation(arg1::SNES{Complex128},arg2::PetscBool)
    err = ccall((:SNESFASSetContinuation,petscComplexDouble),PetscErrorCode,(SNES{Complex128},PetscBool),arg1,arg2)
    return err
end

function SNESFASGetSmoother(arg1::SNES{Complex128},arg2::Integer,arg3::Union{Ptr{SNES{Complex128}},StridedArray{SNES{Complex128}},Ptr{SNES{Complex128}},Ref{SNES{Complex128}}})
    err = ccall((:SNESFASGetSmoother,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Int64,Ptr{SNES{Complex128}}),arg1,arg2,arg3)
    return err
end

function SNESFASGetSmootherUp(arg1::SNES{Complex128},arg2::Integer,arg3::Union{Ptr{SNES{Complex128}},StridedArray{SNES{Complex128}},Ptr{SNES{Complex128}},Ref{SNES{Complex128}}})
    err = ccall((:SNESFASGetSmootherUp,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Int64,Ptr{SNES{Complex128}}),arg1,arg2,arg3)
    return err
end

function SNESFASGetSmootherDown(arg1::SNES{Complex128},arg2::Integer,arg3::Union{Ptr{SNES{Complex128}},StridedArray{SNES{Complex128}},Ptr{SNES{Complex128}},Ref{SNES{Complex128}}})
    err = ccall((:SNESFASGetSmootherDown,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Int64,Ptr{SNES{Complex128}}),arg1,arg2,arg3)
    return err
end

function SNESFASGetCoarseSolve(arg1::SNES{Complex128},arg2::Union{Ptr{SNES{Complex128}},StridedArray{SNES{Complex128}},Ptr{SNES{Complex128}},Ref{SNES{Complex128}}})
    err = ccall((:SNESFASGetCoarseSolve,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{SNES{Complex128}}),arg1,arg2)
    return err
end

function SNESFASFullSetDownSweep(arg1::SNES{Complex128},arg2::PetscBool)
    err = ccall((:SNESFASFullSetDownSweep,petscComplexDouble),PetscErrorCode,(SNES{Complex128},PetscBool),arg1,arg2)
    return err
end

function SNESFASCreateCoarseVec(arg1::SNES{Complex128},arg2::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:SNESFASCreateCoarseVec,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Ptr{Vec{Complex128}}),arg1,arg2)
    return err
end

function SNESFASRestrict(arg1::SNES{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128})
    err = ccall((:SNESFASRestrict,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function DMSNESCheckFromOptions(arg1::SNES{Complex128},arg2::Vec{Complex128},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:DMSNESCheckFromOptions,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Vec{Complex128},Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4)
    return err
end

function TSInitializePackage(arg0::Type{Complex128})
    err = ccall((:TSInitializePackage,petscComplexDouble),PetscErrorCode,())
    return err
end

function TSCreate(arg1::MPI_Comm,arg2::Union{Ptr{TS{Complex128}},StridedArray{TS{Complex128}},Ptr{TS{Complex128}},Ref{TS{Complex128}}})
    err = ccall((:TSCreate,petscComplexDouble),PetscErrorCode,(comm_type,Ptr{TS{Complex128}}),arg1,arg2)
    return err
end

function TSClone(arg1::TS{Complex128},arg2::Union{Ptr{TS{Complex128}},StridedArray{TS{Complex128}},Ptr{TS{Complex128}},Ref{TS{Complex128}}})
    err = ccall((:TSClone,petscComplexDouble),PetscErrorCode,(TS{Complex128},Ptr{TS{Complex128}}),arg1,arg2)
    return err
end

function TSDestroy(arg1::Union{Ptr{TS{Complex128}},StridedArray{TS{Complex128}},Ptr{TS{Complex128}},Ref{TS{Complex128}}})
    err = ccall((:TSDestroy,petscComplexDouble),PetscErrorCode,(Ptr{TS{Complex128}},),arg1)
    return err
end

function TSSetProblemType(arg1::TS{Complex128},arg2::TSProblemType)
    err = ccall((:TSSetProblemType,petscComplexDouble),PetscErrorCode,(TS{Complex128},TSProblemType),arg1,arg2)
    return err
end

function TSGetProblemType(arg1::TS{Complex128},arg2::Union{Ptr{TSProblemType},StridedArray{TSProblemType},Ptr{TSProblemType},Ref{TSProblemType}})
    err = ccall((:TSGetProblemType,petscComplexDouble),PetscErrorCode,(TS{Complex128},Ptr{TSProblemType}),arg1,arg2)
    return err
end

function TSMonitor(arg1::TS{Complex128},arg2::Integer,arg3::Float64,arg4::Vec{Complex128})
    err = ccall((:TSMonitor,petscComplexDouble),PetscErrorCode,(TS{Complex128},Int64,Float64,Vec{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function TSMonitorSet(arg1::TS{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSMonitorSet,petscComplexDouble),PetscErrorCode,(TS{Complex128},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function TSMonitorCancel(arg1::TS{Complex128})
    err = ccall((:TSMonitorCancel,petscComplexDouble),PetscErrorCode,(TS{Complex128},),arg1)
    return err
end

function TSSetOptionsPrefix(arg1::TS{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:TSSetOptionsPrefix,petscComplexDouble),PetscErrorCode,(TS{Complex128},Cstring),arg1,arg2)
    return err
end

function TSAppendOptionsPrefix(arg1::TS{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:TSAppendOptionsPrefix,petscComplexDouble),PetscErrorCode,(TS{Complex128},Cstring),arg1,arg2)
    return err
end

function TSGetOptionsPrefix(arg1::TS{Complex128},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:TSGetOptionsPrefix,petscComplexDouble),PetscErrorCode,(TS{Complex128},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function TSSetFromOptions(arg1::TS{Complex128})
    err = ccall((:TSSetFromOptions,petscComplexDouble),PetscErrorCode,(TS{Complex128},),arg1)
    return err
end

function TSSetUp(arg1::TS{Complex128})
    err = ccall((:TSSetUp,petscComplexDouble),PetscErrorCode,(TS{Complex128},),arg1)
    return err
end

function TSReset(arg1::TS{Complex128})
    err = ccall((:TSReset,petscComplexDouble),PetscErrorCode,(TS{Complex128},),arg1)
    return err
end

function TSSetSolution(arg1::TS{Complex128},arg2::Vec{Complex128})
    err = ccall((:TSSetSolution,petscComplexDouble),PetscErrorCode,(TS{Complex128},Vec{Complex128}),arg1,arg2)
    return err
end

function TSGetSolution(arg1::TS{Complex128},arg2::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:TSGetSolution,petscComplexDouble),PetscErrorCode,(TS{Complex128},Ptr{Vec{Complex128}}),arg1,arg2)
    return err
end

function TSSetSaveTrajectory(arg1::TS{Complex128})
    err = ccall((:TSSetSaveTrajectory,petscComplexDouble),PetscErrorCode,(TS{Complex128},),arg1)
    return err
end

function TSTrajectoryCreate(arg1::MPI_Comm,arg2::Union{Ptr{TSTrajectory{Complex128}},StridedArray{TSTrajectory{Complex128}},Ptr{TSTrajectory{Complex128}},Ref{TSTrajectory{Complex128}}})
    err = ccall((:TSTrajectoryCreate,petscComplexDouble),PetscErrorCode,(comm_type,Ptr{TSTrajectory{Complex128}}),arg1,arg2)
    return err
end

function TSTrajectoryDestroy(arg1::Union{Ptr{TSTrajectory{Complex128}},StridedArray{TSTrajectory{Complex128}},Ptr{TSTrajectory{Complex128}},Ref{TSTrajectory{Complex128}}})
    err = ccall((:TSTrajectoryDestroy,petscComplexDouble),PetscErrorCode,(Ptr{TSTrajectory{Complex128}},),arg1)
    return err
end

function TSTrajectorySetType(arg1::TSTrajectory{Complex128},arg2::TSTrajectoryType)
    err = ccall((:TSTrajectorySetType,petscComplexDouble),PetscErrorCode,(TSTrajectory{Complex128},TSTrajectoryType),arg1,arg2)
    return err
end

function TSTrajectorySet(arg1::TSTrajectory{Complex128},arg2::TS{Complex128},arg3::Integer,arg4::Float64,arg5::Vec{Complex128})
    err = ccall((:TSTrajectorySet,petscComplexDouble),PetscErrorCode,(TSTrajectory{Complex128},TS{Complex128},Int64,Float64,Vec{Complex128}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSTrajectoryGet(arg1::TSTrajectory{Complex128},arg2::TS{Complex128},arg3::Integer,arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:TSTrajectoryGet,petscComplexDouble),PetscErrorCode,(TSTrajectory{Complex128},TS{Complex128},Int64,Ptr{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function TSTrajectorySetFromOptions(arg1::TSTrajectory{Complex128})
    err = ccall((:TSTrajectorySetFromOptions,petscComplexDouble),PetscErrorCode,(TSTrajectory{Complex128},),arg1)
    return err
end

function TSTrajectoryRegisterAll(arg0::Type{Complex128})
    err = ccall((:TSTrajectoryRegisterAll,petscComplexDouble),PetscErrorCode,())
    return err
end

function TSSetCostGradients(arg1::TS{Complex128},arg2::Integer,arg3::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}},arg4::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:TSSetCostGradients,petscComplexDouble),PetscErrorCode,(TS{Complex128},Int64,Ptr{Vec{Complex128}},Ptr{Vec{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function TSGetCostGradients(arg1::TS{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Vec{Complex128}}},StridedArray{Ptr{Vec{Complex128}}},Ptr{Ptr{Vec{Complex128}}},Ref{Ptr{Vec{Complex128}}}},arg4::Union{Ptr{Ptr{Vec{Complex128}}},StridedArray{Ptr{Vec{Complex128}}},Ptr{Ptr{Vec{Complex128}}},Ref{Ptr{Vec{Complex128}}}})
    err = ccall((:TSGetCostGradients,petscComplexDouble),PetscErrorCode,(TS{Complex128},Ptr{Int64},Ptr{Ptr{Vec{Complex128}}},Ptr{Ptr{Vec{Complex128}}}),arg1,arg2,arg3,arg4)
    return err
end

function TSSetCostIntegrand(arg1::TS{Complex128},arg2::Integer,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSSetCostIntegrand,petscComplexDouble),PetscErrorCode,(TS{Complex128},Int64,Ptr{Void},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function TSGetCostIntegral(arg1::TS{Complex128},arg2::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:TSGetCostIntegral,petscComplexDouble),PetscErrorCode,(TS{Complex128},Ptr{Vec{Complex128}}),arg1,arg2)
    return err
end

function TSAdjointSetRHSJacobian(arg1::TS{Complex128},arg2::Mat{Complex128},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSAdjointSetRHSJacobian,petscComplexDouble),PetscErrorCode,(TS{Complex128},Mat{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function TSAdjointSolve(arg1::TS{Complex128})
    err = ccall((:TSAdjointSolve,petscComplexDouble),PetscErrorCode,(TS{Complex128},),arg1)
    return err
end

function TSAdjointSetSteps(arg1::TS{Complex128},arg2::Integer)
    err = ccall((:TSAdjointSetSteps,petscComplexDouble),PetscErrorCode,(TS{Complex128},Int64),arg1,arg2)
    return err
end

function TSAdjointComputeRHSJacobian(arg1::TS{Complex128},arg2::Float64,arg3::Vec{Complex128},arg4::Mat{Complex128})
    err = ccall((:TSAdjointComputeRHSJacobian,petscComplexDouble),PetscErrorCode,(TS{Complex128},Float64,Vec{Complex128},Mat{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function TSAdjointStep(arg1::TS{Complex128})
    err = ccall((:TSAdjointStep,petscComplexDouble),PetscErrorCode,(TS{Complex128},),arg1)
    return err
end

function TSAdjointSetUp(arg1::TS{Complex128})
    err = ccall((:TSAdjointSetUp,petscComplexDouble),PetscErrorCode,(TS{Complex128},),arg1)
    return err
end

function TSAdjointComputeDRDPFunction(arg1::TS{Complex128},arg2::Float64,arg3::Vec{Complex128},arg4::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:TSAdjointComputeDRDPFunction,petscComplexDouble),PetscErrorCode,(TS{Complex128},Float64,Vec{Complex128},Ptr{Vec{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function TSAdjointComputeDRDYFunction(arg1::TS{Complex128},arg2::Float64,arg3::Vec{Complex128},arg4::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:TSAdjointComputeDRDYFunction,petscComplexDouble),PetscErrorCode,(TS{Complex128},Float64,Vec{Complex128},Ptr{Vec{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function TSAdjointComputeCostIntegrand(arg1::TS{Complex128},arg2::Float64,arg3::Vec{Complex128},arg4::Vec{Complex128})
    err = ccall((:TSAdjointComputeCostIntegrand,petscComplexDouble),PetscErrorCode,(TS{Complex128},Float64,Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function TSSetDuration(arg1::TS{Complex128},arg2::Integer,arg3::Float64)
    err = ccall((:TSSetDuration,petscComplexDouble),PetscErrorCode,(TS{Complex128},Int64,Float64),arg1,arg2,arg3)
    return err
end

function TSGetDuration(arg1::TS{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:TSGetDuration,petscComplexDouble),PetscErrorCode,(TS{Complex128},Ptr{Int64},Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function TSSetExactFinalTime(arg1::TS{Complex128},arg2::TSExactFinalTimeOption)
    err = ccall((:TSSetExactFinalTime,petscComplexDouble),PetscErrorCode,(TS{Complex128},TSExactFinalTimeOption),arg1,arg2)
    return err
end

function TSMonitorDefault(arg1::TS{Complex128},arg2::Integer,arg3::Float64,arg4::Vec{Complex128},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSMonitorDefault,petscComplexDouble),PetscErrorCode,(TS{Complex128},Int64,Float64,Vec{Complex128},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSMonitorDrawCtxCreate(arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Integer,arg9::Union{Ptr{TSMonitorDrawCtx{Complex128}},StridedArray{TSMonitorDrawCtx{Complex128}},Ptr{TSMonitorDrawCtx{Complex128}},Ref{TSMonitorDrawCtx{Complex128}}})
    err = ccall((:TSMonitorDrawCtxCreate,petscComplexDouble),PetscErrorCode,(comm_type,Cstring,Cstring,Cint,Cint,Cint,Cint,Int64,Ptr{TSMonitorDrawCtx}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
    return err
end

function TSMonitorDrawCtxDestroy(arg1::Union{Ptr{TSMonitorDrawCtx{Complex128}},StridedArray{TSMonitorDrawCtx{Complex128}},Ptr{TSMonitorDrawCtx{Complex128}},Ref{TSMonitorDrawCtx{Complex128}}})
    err = ccall((:TSMonitorDrawCtxDestroy,petscComplexDouble),PetscErrorCode,(Ptr{TSMonitorDrawCtx},),arg1)
    return err
end

function TSMonitorDrawSolution(arg1::TS{Complex128},arg2::Integer,arg3::Float64,arg4::Vec{Complex128},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSMonitorDrawSolution,petscComplexDouble),PetscErrorCode,(TS{Complex128},Int64,Float64,Vec{Complex128},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSMonitorDrawSolutionPhase(arg1::TS{Complex128},arg2::Integer,arg3::Float64,arg4::Vec{Complex128},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSMonitorDrawSolutionPhase,petscComplexDouble),PetscErrorCode,(TS{Complex128},Int64,Float64,Vec{Complex128},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSMonitorDrawError(arg1::TS{Complex128},arg2::Integer,arg3::Float64,arg4::Vec{Complex128},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSMonitorDrawError,petscComplexDouble),PetscErrorCode,(TS{Complex128},Int64,Float64,Vec{Complex128},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSMonitorSolutionBinary(arg1::TS{Complex128},arg2::Integer,arg3::Float64,arg4::Vec{Complex128},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSMonitorSolutionBinary,petscComplexDouble),PetscErrorCode,(TS{Complex128},Int64,Float64,Vec{Complex128},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSMonitorSolutionVTK(arg1::TS{Complex128},arg2::Integer,arg3::Float64,arg4::Vec{Complex128},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSMonitorSolutionVTK,petscComplexDouble),PetscErrorCode,(TS{Complex128},Int64,Float64,Vec{Complex128},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSMonitorSolutionVTKDestroy(arg0::Type{Complex128},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSMonitorSolutionVTKDestroy,petscComplexDouble),PetscErrorCode,(Ptr{Void},),arg1)
    return err
end

function TSStep(arg1::TS{Complex128})
    err = ccall((:TSStep,petscComplexDouble),PetscErrorCode,(TS{Complex128},),arg1)
    return err
end

function TSEvaluateStep(arg1::TS{Complex128},arg2::Integer,arg3::Vec{Complex128},arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:TSEvaluateStep,petscComplexDouble),PetscErrorCode,(TS{Complex128},Int64,Vec{Complex128},Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function TSSolve(arg1::TS{Complex128},arg2::Vec{Complex128})
    err = ccall((:TSSolve,petscComplexDouble),PetscErrorCode,(TS{Complex128},Vec{Complex128}),arg1,arg2)
    return err
end

function TSGetEquationType(arg1::TS{Complex128},arg2::Union{Ptr{TSEquationType},StridedArray{TSEquationType},Ptr{TSEquationType},Ref{TSEquationType}})
    err = ccall((:TSGetEquationType,petscComplexDouble),PetscErrorCode,(TS{Complex128},Ptr{TSEquationType}),arg1,arg2)
    return err
end

function TSSetEquationType(arg1::TS{Complex128},arg2::TSEquationType)
    err = ccall((:TSSetEquationType,petscComplexDouble),PetscErrorCode,(TS{Complex128},TSEquationType),arg1,arg2)
    return err
end

function TSGetConvergedReason(arg1::TS{Complex128},arg2::Union{Ptr{TSConvergedReason},StridedArray{TSConvergedReason},Ptr{TSConvergedReason},Ref{TSConvergedReason}})
    err = ccall((:TSGetConvergedReason,petscComplexDouble),PetscErrorCode,(TS{Complex128},Ptr{TSConvergedReason}),arg1,arg2)
    return err
end

function TSSetConvergedReason(arg1::TS{Complex128},arg2::TSConvergedReason)
    err = ccall((:TSSetConvergedReason,petscComplexDouble),PetscErrorCode,(TS{Complex128},TSConvergedReason),arg1,arg2)
    return err
end

function TSGetSolveTime(arg1::TS{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:TSGetSolveTime,petscComplexDouble),PetscErrorCode,(TS{Complex128},Ptr{Float64}),arg1,arg2)
    return err
end

function TSGetSNESIterations(arg1::TS{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:TSGetSNESIterations,petscComplexDouble),PetscErrorCode,(TS{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function TSGetKSPIterations(arg1::TS{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:TSGetKSPIterations,petscComplexDouble),PetscErrorCode,(TS{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function TSGetStepRejections(arg1::TS{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:TSGetStepRejections,petscComplexDouble),PetscErrorCode,(TS{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function TSSetMaxStepRejections(arg1::TS{Complex128},arg2::Integer)
    err = ccall((:TSSetMaxStepRejections,petscComplexDouble),PetscErrorCode,(TS{Complex128},Int64),arg1,arg2)
    return err
end

function TSGetSNESFailures(arg1::TS{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:TSGetSNESFailures,petscComplexDouble),PetscErrorCode,(TS{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function TSSetMaxSNESFailures(arg1::TS{Complex128},arg2::Integer)
    err = ccall((:TSSetMaxSNESFailures,petscComplexDouble),PetscErrorCode,(TS{Complex128},Int64),arg1,arg2)
    return err
end

function TSSetErrorIfStepFails(arg1::TS{Complex128},arg2::PetscBool)
    err = ccall((:TSSetErrorIfStepFails,petscComplexDouble),PetscErrorCode,(TS{Complex128},PetscBool),arg1,arg2)
    return err
end

function TSRollBack(arg1::TS{Complex128})
    err = ccall((:TSRollBack,petscComplexDouble),PetscErrorCode,(TS{Complex128},),arg1)
    return err
end

function TSGetTotalSteps(arg1::TS{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:TSGetTotalSteps,petscComplexDouble),PetscErrorCode,(TS{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function TSGetStages(arg1::TS{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Vec{Complex128}}},StridedArray{Ptr{Vec{Complex128}}},Ptr{Ptr{Vec{Complex128}}},Ref{Ptr{Vec{Complex128}}}})
    err = ccall((:TSGetStages,petscComplexDouble),PetscErrorCode,(TS{Complex128},Ptr{Int64},Ptr{Ptr{Vec{Complex128}}}),arg1,arg2,arg3)
    return err
end

function TSSetInitialTimeStep(arg1::TS{Complex128},arg2::Float64,arg3::Float64)
    err = ccall((:TSSetInitialTimeStep,petscComplexDouble),PetscErrorCode,(TS{Complex128},Float64,Float64),arg1,arg2,arg3)
    return err
end

function TSGetTimeStep(arg1::TS{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:TSGetTimeStep,petscComplexDouble),PetscErrorCode,(TS{Complex128},Ptr{Float64}),arg1,arg2)
    return err
end

function TSGetTime(arg1::TS{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:TSGetTime,petscComplexDouble),PetscErrorCode,(TS{Complex128},Ptr{Float64}),arg1,arg2)
    return err
end

function TSSetTime(arg1::TS{Complex128},arg2::Float64)
    err = ccall((:TSSetTime,petscComplexDouble),PetscErrorCode,(TS{Complex128},Float64),arg1,arg2)
    return err
end

function TSGetTimeStepNumber(arg1::TS{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:TSGetTimeStepNumber,petscComplexDouble),PetscErrorCode,(TS{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function TSSetTimeStep(arg1::TS{Complex128},arg2::Float64)
    err = ccall((:TSSetTimeStep,petscComplexDouble),PetscErrorCode,(TS{Complex128},Float64),arg1,arg2)
    return err
end

function TSGetPrevTime(arg1::TS{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:TSGetPrevTime,petscComplexDouble),PetscErrorCode,(TS{Complex128},Ptr{Float64}),arg1,arg2)
    return err
end

function TSSetRHSFunction(arg1::TS{Complex128},arg2::Vec{Complex128},arg3::TSRHSFunction,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSSetRHSFunction,petscComplexDouble),PetscErrorCode,(TS{Complex128},Vec{Complex128},TSRHSFunction,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function TSGetRHSFunction(arg1::TS{Complex128},arg2::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}},arg3::Union{Ptr{TSRHSFunction},StridedArray{TSRHSFunction},Ptr{TSRHSFunction},Ref{TSRHSFunction}},arg4::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:TSGetRHSFunction,petscComplexDouble),PetscErrorCode,(TS{Complex128},Ptr{Vec{Complex128}},Ptr{TSRHSFunction},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4)
    return err
end

function TSSetRHSJacobian(arg1::TS{Complex128},arg2::Mat{Complex128},arg3::Mat{Complex128},arg4::TSRHSJacobian,arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSSetRHSJacobian,petscComplexDouble),PetscErrorCode,(TS{Complex128},Mat{Complex128},Mat{Complex128},TSRHSJacobian,Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSGetRHSJacobian(arg1::TS{Complex128},arg2::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}},arg3::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}},arg4::Union{Ptr{TSRHSJacobian},StridedArray{TSRHSJacobian},Ptr{TSRHSJacobian},Ref{TSRHSJacobian}},arg5::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:TSGetRHSJacobian,petscComplexDouble),PetscErrorCode,(TS{Complex128},Ptr{Mat{Complex128}},Ptr{Mat{Complex128}},Ptr{TSRHSJacobian},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSRHSJacobianSetReuse(arg1::TS{Complex128},arg2::PetscBool)
    err = ccall((:TSRHSJacobianSetReuse,petscComplexDouble),PetscErrorCode,(TS{Complex128},PetscBool),arg1,arg2)
    return err
end

function TSSetSolutionFunction(arg1::TS{Complex128},arg2::TSSolutionFunction,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSSetSolutionFunction,petscComplexDouble),PetscErrorCode,(TS{Complex128},TSSolutionFunction,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function TSSetForcingFunction(arg1::TS{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSSetForcingFunction,petscComplexDouble),PetscErrorCode,(TS{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function TSSetIFunction(arg1::TS{Complex128},arg2::Vec{Complex128},arg3::TSIFunction,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSSetIFunction,petscComplexDouble),PetscErrorCode,(TS{Complex128},Vec{Complex128},TSIFunction,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function TSGetIFunction(arg1::TS{Complex128},arg2::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}},arg3::Union{Ptr{TSIFunction},StridedArray{TSIFunction},Ptr{TSIFunction},Ref{TSIFunction}},arg4::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:TSGetIFunction,petscComplexDouble),PetscErrorCode,(TS{Complex128},Ptr{Vec{Complex128}},Ptr{TSIFunction},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4)
    return err
end

function TSSetIJacobian(arg1::TS{Complex128},arg2::Mat{Complex128},arg3::Mat{Complex128},arg4::TSIJacobian,arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSSetIJacobian,petscComplexDouble),PetscErrorCode,(TS{Complex128},Mat{Complex128},Mat{Complex128},TSIJacobian,Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSGetIJacobian(arg1::TS{Complex128},arg2::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}},arg3::Union{Ptr{Mat{Complex128}},StridedArray{Mat{Complex128}},Ptr{Mat{Complex128}},Ref{Mat{Complex128}}},arg4::Union{Ptr{TSIJacobian},StridedArray{TSIJacobian},Ptr{TSIJacobian},Ref{TSIJacobian}},arg5::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:TSGetIJacobian,petscComplexDouble),PetscErrorCode,(TS{Complex128},Ptr{Mat{Complex128}},Ptr{Mat{Complex128}},Ptr{TSIJacobian},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSComputeRHSFunctionLinear(arg1::TS{Complex128},arg2::Float64,arg3::Vec{Complex128},arg4::Vec{Complex128},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSComputeRHSFunctionLinear,petscComplexDouble),PetscErrorCode,(TS{Complex128},Float64,Vec{Complex128},Vec{Complex128},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSComputeRHSJacobianConstant(arg1::TS{Complex128},arg2::Float64,arg3::Vec{Complex128},arg4::Mat{Complex128},arg5::Mat{Complex128},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSComputeRHSJacobianConstant,petscComplexDouble),PetscErrorCode,(TS{Complex128},Float64,Vec{Complex128},Mat{Complex128},Mat{Complex128},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function TSComputeIFunctionLinear(arg1::TS{Complex128},arg2::Float64,arg3::Vec{Complex128},arg4::Vec{Complex128},arg5::Vec{Complex128},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSComputeIFunctionLinear,petscComplexDouble),PetscErrorCode,(TS{Complex128},Float64,Vec{Complex128},Vec{Complex128},Vec{Complex128},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function TSComputeIJacobianConstant(arg1::TS{Complex128},arg2::Float64,arg3::Vec{Complex128},arg4::Vec{Complex128},arg5::Float64,arg6::Mat{Complex128},arg7::Mat{Complex128},arg8::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSComputeIJacobianConstant,petscComplexDouble),PetscErrorCode,(TS{Complex128},Float64,Vec{Complex128},Vec{Complex128},Float64,Mat{Complex128},Mat{Complex128},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function TSComputeSolutionFunction(arg1::TS{Complex128},arg2::Float64,arg3::Vec{Complex128})
    err = ccall((:TSComputeSolutionFunction,petscComplexDouble),PetscErrorCode,(TS{Complex128},Float64,Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function TSComputeForcingFunction(arg1::TS{Complex128},arg2::Float64,arg3::Vec{Complex128})
    err = ccall((:TSComputeForcingFunction,petscComplexDouble),PetscErrorCode,(TS{Complex128},Float64,Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function TSComputeIJacobianDefaultColor(arg1::TS{Complex128},arg2::Float64,arg3::Vec{Complex128},arg4::Vec{Complex128},arg5::Float64,arg6::Mat{Complex128},arg7::Mat{Complex128},arg8::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSComputeIJacobianDefaultColor,petscComplexDouble),PetscErrorCode,(TS{Complex128},Float64,Vec{Complex128},Vec{Complex128},Float64,Mat{Complex128},Mat{Complex128},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function TSSetPreStep(arg1::TS{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSSetPreStep,petscComplexDouble),PetscErrorCode,(TS{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function TSSetPreStage(arg1::TS{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSSetPreStage,petscComplexDouble),PetscErrorCode,(TS{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function TSSetPostStage(arg1::TS{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSSetPostStage,petscComplexDouble),PetscErrorCode,(TS{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function TSSetPostStep(arg1::TS{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSSetPostStep,petscComplexDouble),PetscErrorCode,(TS{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function TSPreStep(arg1::TS{Complex128})
    err = ccall((:TSPreStep,petscComplexDouble),PetscErrorCode,(TS{Complex128},),arg1)
    return err
end

function TSPreStage(arg1::TS{Complex128},arg2::Float64)
    err = ccall((:TSPreStage,petscComplexDouble),PetscErrorCode,(TS{Complex128},Float64),arg1,arg2)
    return err
end

function TSPostStage(arg1::TS{Complex128},arg2::Float64,arg3::Integer,arg4::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:TSPostStage,petscComplexDouble),PetscErrorCode,(TS{Complex128},Float64,Int64,Ptr{Vec{Complex128}}),arg1,arg2,arg3,arg4)
    return err
end

function TSPostStep(arg1::TS{Complex128})
    err = ccall((:TSPostStep,petscComplexDouble),PetscErrorCode,(TS{Complex128},),arg1)
    return err
end

function TSSetRetainStages(arg1::TS{Complex128},arg2::PetscBool)
    err = ccall((:TSSetRetainStages,petscComplexDouble),PetscErrorCode,(TS{Complex128},PetscBool),arg1,arg2)
    return err
end

function TSInterpolate(arg1::TS{Complex128},arg2::Float64,arg3::Vec{Complex128})
    err = ccall((:TSInterpolate,petscComplexDouble),PetscErrorCode,(TS{Complex128},Float64,Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function TSSetTolerances(arg1::TS{Complex128},arg2::Float64,arg3::Vec{Complex128},arg4::Float64,arg5::Vec{Complex128})
    err = ccall((:TSSetTolerances,petscComplexDouble),PetscErrorCode,(TS{Complex128},Float64,Vec{Complex128},Float64,Vec{Complex128}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSGetTolerances(arg1::TS{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:TSGetTolerances,petscComplexDouble),PetscErrorCode,(TS{Complex128},Ptr{Float64},Ptr{Vec{Complex128}},Ptr{Float64},Ptr{Vec{Complex128}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSErrorWeightedNormInfinity(arg1::TS{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:TSErrorWeightedNormInfinity,petscComplexDouble),PetscErrorCode,(TS{Complex128},Vec{Complex128},Vec{Complex128},Ptr{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function TSErrorWeightedNorm2(arg1::TS{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:TSErrorWeightedNorm2,petscComplexDouble),PetscErrorCode,(TS{Complex128},Vec{Complex128},Vec{Complex128},Ptr{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function TSErrorWeightedNorm(arg1::TS{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128},arg4::NormType,arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:TSErrorWeightedNorm,petscComplexDouble),PetscErrorCode,(TS{Complex128},Vec{Complex128},Vec{Complex128},NormType,Ptr{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSSetCFLTimeLocal(arg1::TS{Complex128},arg2::Float64)
    err = ccall((:TSSetCFLTimeLocal,petscComplexDouble),PetscErrorCode,(TS{Complex128},Float64),arg1,arg2)
    return err
end

function TSGetCFLTime(arg1::TS{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:TSGetCFLTime,petscComplexDouble),PetscErrorCode,(TS{Complex128},Ptr{Float64}),arg1,arg2)
    return err
end

function TSPseudoSetTimeStep(arg1::TS{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSPseudoSetTimeStep,petscComplexDouble),PetscErrorCode,(TS{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function TSPseudoTimeStepDefault(arg1::TS{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSPseudoTimeStepDefault,petscComplexDouble),PetscErrorCode,(TS{Complex128},Ptr{Float64},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function TSPseudoComputeTimeStep(arg1::TS{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:TSPseudoComputeTimeStep,petscComplexDouble),PetscErrorCode,(TS{Complex128},Ptr{Float64}),arg1,arg2)
    return err
end

function TSPseudoSetMaxTimeStep(arg1::TS{Complex128},arg2::Float64)
    err = ccall((:TSPseudoSetMaxTimeStep,petscComplexDouble),PetscErrorCode,(TS{Complex128},Float64),arg1,arg2)
    return err
end

function TSPseudoSetVerifyTimeStep(arg1::TS{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSPseudoSetVerifyTimeStep,petscComplexDouble),PetscErrorCode,(TS{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function TSPseudoVerifyTimeStepDefault(arg1::TS{Complex128},arg2::Vec{Complex128},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:TSPseudoVerifyTimeStepDefault,petscComplexDouble),PetscErrorCode,(TS{Complex128},Vec{Complex128},Ptr{Void},Ptr{Float64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSPseudoVerifyTimeStep(arg1::TS{Complex128},arg2::Vec{Complex128},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:TSPseudoVerifyTimeStep,petscComplexDouble),PetscErrorCode,(TS{Complex128},Vec{Complex128},Ptr{Float64},Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function TSPseudoSetTimeStepIncrement(arg1::TS{Complex128},arg2::Float64)
    err = ccall((:TSPseudoSetTimeStepIncrement,petscComplexDouble),PetscErrorCode,(TS{Complex128},Float64),arg1,arg2)
    return err
end

function TSPseudoIncrementDtFromInitialDt(arg1::TS{Complex128})
    err = ccall((:TSPseudoIncrementDtFromInitialDt,petscComplexDouble),PetscErrorCode,(TS{Complex128},),arg1)
    return err
end

function TSPythonSetType(arg1::TS{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:TSPythonSetType,petscComplexDouble),PetscErrorCode,(TS{Complex128},Cstring),arg1,arg2)
    return err
end

function TSComputeRHSFunction(arg1::TS{Complex128},arg2::Float64,arg3::Vec{Complex128},arg4::Vec{Complex128})
    err = ccall((:TSComputeRHSFunction,petscComplexDouble),PetscErrorCode,(TS{Complex128},Float64,Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function TSComputeRHSJacobian(arg1::TS{Complex128},arg2::Float64,arg3::Vec{Complex128},arg4::Mat{Complex128},arg5::Mat{Complex128})
    err = ccall((:TSComputeRHSJacobian,petscComplexDouble),PetscErrorCode,(TS{Complex128},Float64,Vec{Complex128},Mat{Complex128},Mat{Complex128}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSComputeIFunction(arg1::TS{Complex128},arg2::Float64,arg3::Vec{Complex128},arg4::Vec{Complex128},arg5::Vec{Complex128},arg6::PetscBool)
    err = ccall((:TSComputeIFunction,petscComplexDouble),PetscErrorCode,(TS{Complex128},Float64,Vec{Complex128},Vec{Complex128},Vec{Complex128},PetscBool),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function TSComputeIJacobian(arg1::TS{Complex128},arg2::Float64,arg3::Vec{Complex128},arg4::Vec{Complex128},arg5::Float64,arg6::Mat{Complex128},arg7::Mat{Complex128},arg8::PetscBool)
    err = ccall((:TSComputeIJacobian,petscComplexDouble),PetscErrorCode,(TS{Complex128},Float64,Vec{Complex128},Vec{Complex128},Float64,Mat{Complex128},Mat{Complex128},PetscBool),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function TSComputeLinearStability(arg1::TS{Complex128},arg2::Float64,arg3::Float64,arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:TSComputeLinearStability,petscComplexDouble),PetscErrorCode,(TS{Complex128},Float64,Float64,Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSVISetVariableBounds(arg1::TS{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128})
    err = ccall((:TSVISetVariableBounds,petscComplexDouble),PetscErrorCode,(TS{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function DMTSSetRHSFunction(arg1::DM{Complex128},arg2::TSRHSFunction,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMTSSetRHSFunction,petscComplexDouble),PetscErrorCode,(DM{Complex128},TSRHSFunction,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMTSGetRHSFunction(arg1::DM{Complex128},arg2::Union{Ptr{TSRHSFunction},StridedArray{TSRHSFunction},Ptr{TSRHSFunction},Ref{TSRHSFunction}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:DMTSGetRHSFunction,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{TSRHSFunction},Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function DMTSSetRHSJacobian(arg1::DM{Complex128},arg2::TSRHSJacobian,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMTSSetRHSJacobian,petscComplexDouble),PetscErrorCode,(DM{Complex128},TSRHSJacobian,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMTSGetRHSJacobian(arg1::DM{Complex128},arg2::Union{Ptr{TSRHSJacobian},StridedArray{TSRHSJacobian},Ptr{TSRHSJacobian},Ref{TSRHSJacobian}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:DMTSGetRHSJacobian,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{TSRHSJacobian},Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function DMTSSetIFunction(arg1::DM{Complex128},arg2::TSIFunction,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMTSSetIFunction,petscComplexDouble),PetscErrorCode,(DM{Complex128},TSIFunction,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMTSGetIFunction(arg1::DM{Complex128},arg2::Union{Ptr{TSIFunction},StridedArray{TSIFunction},Ptr{TSIFunction},Ref{TSIFunction}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:DMTSGetIFunction,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{TSIFunction},Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function DMTSSetIJacobian(arg1::DM{Complex128},arg2::TSIJacobian,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMTSSetIJacobian,petscComplexDouble),PetscErrorCode,(DM{Complex128},TSIJacobian,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMTSGetIJacobian(arg1::DM{Complex128},arg2::Union{Ptr{TSIJacobian},StridedArray{TSIJacobian},Ptr{TSIJacobian},Ref{TSIJacobian}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:DMTSGetIJacobian,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{TSIJacobian},Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function DMTSSetSolutionFunction(arg1::DM{Complex128},arg2::TSSolutionFunction,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMTSSetSolutionFunction,petscComplexDouble),PetscErrorCode,(DM{Complex128},TSSolutionFunction,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMTSGetSolutionFunction(arg1::DM{Complex128},arg2::Union{Ptr{TSSolutionFunction},StridedArray{TSSolutionFunction},Ptr{TSSolutionFunction},Ref{TSSolutionFunction}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:DMTSGetSolutionFunction,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{TSSolutionFunction},Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function DMTSSetForcingFunction(arg1::DM{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMTSSetForcingFunction,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMTSGetForcingFunction(arg1::DM{Complex128},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:DMTSGetForcingFunction,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function DMTSGetMinRadius(arg1::DM{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:DMTSGetMinRadius,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Float64}),arg1,arg2)
    return err
end

function DMTSSetMinRadius(arg1::DM{Complex128},arg2::Float64)
    err = ccall((:DMTSSetMinRadius,petscComplexDouble),PetscErrorCode,(DM{Complex128},Float64),arg1,arg2)
    return err
end

function DMTSCheckFromOptions(arg1::TS{Complex128},arg2::Vec{Complex128},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:DMTSCheckFromOptions,petscComplexDouble),PetscErrorCode,(TS{Complex128},Vec{Complex128},Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4)
    return err
end

function DMTSSetIFunctionLocal(arg1::DM{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMTSSetIFunctionLocal,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMTSSetIJacobianLocal(arg1::DM{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMTSSetIJacobianLocal,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMTSSetRHSFunctionLocal(arg1::DM{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMTSSetRHSFunctionLocal,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMTSSetIFunctionSerialize(arg1::DM{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMTSSetIFunctionSerialize,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMTSSetIJacobianSerialize(arg1::DM{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMTSSetIJacobianSerialize,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMDATSSetRHSFunctionLocal(arg1::DM{Complex128},arg2::InsertMode,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDATSSetRHSFunctionLocal,petscComplexDouble),PetscErrorCode,(DM{Complex128},InsertMode,Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function DMDATSSetRHSJacobianLocal(arg1::DM{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDATSSetRHSJacobianLocal,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMDATSSetIFunctionLocal(arg1::DM{Complex128},arg2::InsertMode,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDATSSetIFunctionLocal,petscComplexDouble),PetscErrorCode,(DM{Complex128},InsertMode,Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function DMDATSSetIJacobianLocal(arg1::DM{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDATSSetIJacobianLocal,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMPlexTSGetGeometryFVM(arg1::DM{Complex128},arg2::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}},arg3::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:DMPlexTSGetGeometryFVM,petscComplexDouble),PetscErrorCode,(DM{Complex128},Ptr{Vec{Complex128}},Ptr{Vec{Complex128}},Ptr{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function TSMonitorDMDARayDestroy(arg0::Type{Complex128},arg1::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:TSMonitorDMDARayDestroy,petscComplexDouble),PetscErrorCode,(Ptr{Ptr{Void}},),arg1)
    return err
end

function TSMonitorDMDARay(arg1::TS{Complex128},arg2::Integer,arg3::Float64,arg4::Vec{Complex128},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSMonitorDMDARay,petscComplexDouble),PetscErrorCode,(TS{Complex128},Int64,Float64,Vec{Complex128},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSMonitorLGDMDARay(arg1::TS{Complex128},arg2::Integer,arg3::Float64,arg4::Vec{Complex128},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSMonitorLGDMDARay,petscComplexDouble),PetscErrorCode,(TS{Complex128},Int64,Float64,Vec{Complex128},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSGetType(arg1::TS{Complex128},arg2::Union{Ptr{TSType},StridedArray{TSType},Ptr{TSType},Ref{TSType}})
    err = ccall((:TSGetType,petscComplexDouble),PetscErrorCode,(TS{Complex128},Ptr{TSType}),arg1,arg2)
    return err
end

function TSSetType(arg1::TS{Complex128},arg2::TSType)
    err = ccall((:TSSetType,petscComplexDouble),PetscErrorCode,(TS{Complex128},TSType),arg1,arg2)
    return err
end

function TSRegister(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSRegister,petscComplexDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function TSGetSNES(arg1::TS{Complex128},arg2::Union{Ptr{SNES{Complex128}},StridedArray{SNES{Complex128}},Ptr{SNES{Complex128}},Ref{SNES{Complex128}}})
    err = ccall((:TSGetSNES,petscComplexDouble),PetscErrorCode,(TS{Complex128},Ptr{SNES{Complex128}}),arg1,arg2)
    return err
end

function TSSetSNES(arg1::TS{Complex128},arg2::SNES{Complex128})
    err = ccall((:TSSetSNES,petscComplexDouble),PetscErrorCode,(TS{Complex128},SNES{Complex128}),arg1,arg2)
    return err
end

function TSGetKSP(arg1::TS{Complex128},arg2::Union{Ptr{KSP{Complex128}},StridedArray{KSP{Complex128}},Ptr{KSP{Complex128}},Ref{KSP{Complex128}}})
    err = ccall((:TSGetKSP,petscComplexDouble),PetscErrorCode,(TS{Complex128},Ptr{KSP{Complex128}}),arg1,arg2)
    return err
end

function TSView(arg1::TS{Complex128},arg2::PetscViewer{Complex128})
    err = ccall((:TSView,petscComplexDouble),PetscErrorCode,(TS{Complex128},PetscViewer{Complex128}),arg1,arg2)
    return err
end

function TSLoad(arg1::TS{Complex128},arg2::PetscViewer{Complex128})
    err = ccall((:TSLoad,petscComplexDouble),PetscErrorCode,(TS{Complex128},PetscViewer{Complex128}),arg1,arg2)
    return err
end

function TSGetApplicationContext(arg1::TS{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSGetApplicationContext,petscComplexDouble),PetscErrorCode,(TS{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function TSMonitorLGCtxCreate(arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Integer,arg9::Union{Ptr{TSMonitorLGCtx{Complex128}},StridedArray{TSMonitorLGCtx{Complex128}},Ptr{TSMonitorLGCtx{Complex128}},Ref{TSMonitorLGCtx{Complex128}}})
    err = ccall((:TSMonitorLGCtxCreate,petscComplexDouble),PetscErrorCode,(comm_type,Cstring,Cstring,Cint,Cint,Cint,Cint,Int64,Ptr{TSMonitorLGCtx}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
    return err
end

function TSMonitorLGCtxDestroy(arg1::Union{Ptr{TSMonitorLGCtx{Complex128}},StridedArray{TSMonitorLGCtx{Complex128}},Ptr{TSMonitorLGCtx{Complex128}},Ref{TSMonitorLGCtx{Complex128}}})
    err = ccall((:TSMonitorLGCtxDestroy,petscComplexDouble),PetscErrorCode,(Ptr{TSMonitorLGCtx},),arg1)
    return err
end

function TSMonitorLGTimeStep(arg1::TS{Complex128},arg2::Integer,arg3::Float64,arg4::Vec{Complex128},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSMonitorLGTimeStep,petscComplexDouble),PetscErrorCode,(TS{Complex128},Int64,Float64,Vec{Complex128},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSMonitorLGSolution(arg1::TS{Complex128},arg2::Integer,arg3::Float64,arg4::Vec{Complex128},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSMonitorLGSolution,petscComplexDouble),PetscErrorCode,(TS{Complex128},Int64,Float64,Vec{Complex128},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSMonitorLGSetVariableNames(arg1::TS{Complex128},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:TSMonitorLGSetVariableNames,petscComplexDouble),PetscErrorCode,(TS{Complex128},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function TSMonitorLGGetVariableNames(arg1::TS{Complex128},arg2::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}})
    err = ccall((:TSMonitorLGGetVariableNames,petscComplexDouble),PetscErrorCode,(TS{Complex128},Ptr{Ptr{Ptr{UInt8}}}),arg1,arg2)
    return err
end

function TSMonitorLGCtxSetVariableNames(arg1::TSMonitorLGCtx{Complex128},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:TSMonitorLGCtxSetVariableNames,petscComplexDouble),PetscErrorCode,(TSMonitorLGCtx,Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function TSMonitorLGSetDisplayVariables(arg1::TS{Complex128},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:TSMonitorLGSetDisplayVariables,petscComplexDouble),PetscErrorCode,(TS{Complex128},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function TSMonitorLGCtxSetDisplayVariables(arg1::TSMonitorLGCtx{Complex128},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:TSMonitorLGCtxSetDisplayVariables,petscComplexDouble),PetscErrorCode,(TSMonitorLGCtx,Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function TSMonitorLGSetTransform(arg1::TS{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSMonitorLGSetTransform,petscComplexDouble),PetscErrorCode,(TS{Complex128},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function TSMonitorLGCtxSetTransform(arg1::TSMonitorLGCtx{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSMonitorLGCtxSetTransform,petscComplexDouble),PetscErrorCode,(TSMonitorLGCtx,Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function TSMonitorLGError(arg1::TS{Complex128},arg2::Integer,arg3::Float64,arg4::Vec{Complex128},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSMonitorLGError,petscComplexDouble),PetscErrorCode,(TS{Complex128},Int64,Float64,Vec{Complex128},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSMonitorLGSNESIterations(arg1::TS{Complex128},arg2::Integer,arg3::Float64,arg4::Vec{Complex128},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSMonitorLGSNESIterations,petscComplexDouble),PetscErrorCode,(TS{Complex128},Int64,Float64,Vec{Complex128},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSMonitorLGKSPIterations(arg1::TS{Complex128},arg2::Integer,arg3::Float64,arg4::Vec{Complex128},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSMonitorLGKSPIterations,petscComplexDouble),PetscErrorCode,(TS{Complex128},Int64,Float64,Vec{Complex128},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSMonitorEnvelopeCtxCreate(arg1::TS{Complex128},arg2::Union{Ptr{TSMonitorEnvelopeCtx{Complex128}},StridedArray{TSMonitorEnvelopeCtx{Complex128}},Ptr{TSMonitorEnvelopeCtx{Complex128}},Ref{TSMonitorEnvelopeCtx{Complex128}}})
    err = ccall((:TSMonitorEnvelopeCtxCreate,petscComplexDouble),PetscErrorCode,(TS{Complex128},Ptr{TSMonitorEnvelopeCtx}),arg1,arg2)
    return err
end

function TSMonitorEnvelope(arg1::TS{Complex128},arg2::Integer,arg3::Float64,arg4::Vec{Complex128},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSMonitorEnvelope,petscComplexDouble),PetscErrorCode,(TS{Complex128},Int64,Float64,Vec{Complex128},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSMonitorEnvelopeGetBounds(arg1::TS{Complex128},arg2::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}},arg3::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:TSMonitorEnvelopeGetBounds,petscComplexDouble),PetscErrorCode,(TS{Complex128},Ptr{Vec{Complex128}},Ptr{Vec{Complex128}}),arg1,arg2,arg3)
    return err
end

function TSMonitorEnvelopeCtxDestroy(arg1::Union{Ptr{TSMonitorEnvelopeCtx{Complex128}},StridedArray{TSMonitorEnvelopeCtx{Complex128}},Ptr{TSMonitorEnvelopeCtx{Complex128}},Ref{TSMonitorEnvelopeCtx{Complex128}}})
    err = ccall((:TSMonitorEnvelopeCtxDestroy,petscComplexDouble),PetscErrorCode,(Ptr{TSMonitorEnvelopeCtx},),arg1)
    return err
end

function TSMonitorSPEigCtxCreate(arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Integer,arg9::Union{Ptr{TSMonitorSPEigCtx{Complex128}},StridedArray{TSMonitorSPEigCtx{Complex128}},Ptr{TSMonitorSPEigCtx{Complex128}},Ref{TSMonitorSPEigCtx{Complex128}}})
    err = ccall((:TSMonitorSPEigCtxCreate,petscComplexDouble),PetscErrorCode,(comm_type,Cstring,Cstring,Cint,Cint,Cint,Cint,Int64,Ptr{TSMonitorSPEigCtx}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
    return err
end

function TSMonitorSPEigCtxDestroy(arg1::Union{Ptr{TSMonitorSPEigCtx{Complex128}},StridedArray{TSMonitorSPEigCtx{Complex128}},Ptr{TSMonitorSPEigCtx{Complex128}},Ref{TSMonitorSPEigCtx{Complex128}}})
    err = ccall((:TSMonitorSPEigCtxDestroy,petscComplexDouble),PetscErrorCode,(Ptr{TSMonitorSPEigCtx},),arg1)
    return err
end

function TSMonitorSPEig(arg1::TS{Complex128},arg2::Integer,arg3::Float64,arg4::Vec{Complex128},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSMonitorSPEig,petscComplexDouble),PetscErrorCode,(TS{Complex128},Int64,Float64,Vec{Complex128},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSSetEventMonitor(arg1::TS{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg7::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSSetEventMonitor,petscComplexDouble),PetscErrorCode,(TS{Complex128},Int64,Ptr{Int64},Ptr{PetscBool},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function TSSetEventTolerances(arg1::TS{Complex128},arg2::Float64,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:TSSetEventTolerances,petscComplexDouble),PetscErrorCode,(TS{Complex128},Float64,Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function TSSSPSetType(arg1::TS{Complex128},arg2::TSSSPType)
    err = ccall((:TSSSPSetType,petscComplexDouble),PetscErrorCode,(TS{Complex128},TSSSPType),arg1,arg2)
    return err
end

function TSSSPGetType(arg1::TS{Complex128},arg2::Union{Ptr{TSSSPType},StridedArray{TSSSPType},Ptr{TSSSPType},Ref{TSSSPType}})
    err = ccall((:TSSSPGetType,petscComplexDouble),PetscErrorCode,(TS{Complex128},Ptr{TSSSPType}),arg1,arg2)
    return err
end

function TSSSPSetNumStages(arg1::TS{Complex128},arg2::Integer)
    err = ccall((:TSSSPSetNumStages,petscComplexDouble),PetscErrorCode,(TS{Complex128},Int64),arg1,arg2)
    return err
end

function TSSSPGetNumStages(arg1::TS{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:TSSSPGetNumStages,petscComplexDouble),PetscErrorCode,(TS{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function TSSSPFinalizePackage(arg0::Type{Complex128})
    err = ccall((:TSSSPFinalizePackage,petscComplexDouble),PetscErrorCode,())
    return err
end

function TSSSPInitializePackage(arg0::Type{Complex128})
    err = ccall((:TSSSPInitializePackage,petscComplexDouble),PetscErrorCode,())
    return err
end

function TSGetAdapt(arg1::TS{Complex128},arg2::Union{Ptr{TSAdapt{Complex128}},StridedArray{TSAdapt{Complex128}},Ptr{TSAdapt{Complex128}},Ref{TSAdapt{Complex128}}})
    err = ccall((:TSGetAdapt,petscComplexDouble),PetscErrorCode,(TS{Complex128},Ptr{TSAdapt{Complex128}}),arg1,arg2)
    return err
end

function TSAdaptRegister(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSAdaptRegister,petscComplexDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function TSAdaptInitializePackage(arg0::Type{Complex128})
    err = ccall((:TSAdaptInitializePackage,petscComplexDouble),PetscErrorCode,())
    return err
end

function TSAdaptFinalizePackage(arg0::Type{Complex128})
    err = ccall((:TSAdaptFinalizePackage,petscComplexDouble),PetscErrorCode,())
    return err
end

function TSAdaptCreate(arg1::MPI_Comm,arg2::Union{Ptr{TSAdapt{Complex128}},StridedArray{TSAdapt{Complex128}},Ptr{TSAdapt{Complex128}},Ref{TSAdapt{Complex128}}})
    err = ccall((:TSAdaptCreate,petscComplexDouble),PetscErrorCode,(comm_type,Ptr{TSAdapt{Complex128}}),arg1,arg2)
    return err
end

function TSAdaptSetType(arg1::TSAdapt{Complex128},arg2::TSAdaptType)
    err = ccall((:TSAdaptSetType,petscComplexDouble),PetscErrorCode,(TSAdapt{Complex128},TSAdaptType),arg1,arg2)
    return err
end

function TSAdaptSetOptionsPrefix(arg1::TSAdapt{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:TSAdaptSetOptionsPrefix,petscComplexDouble),PetscErrorCode,(TSAdapt{Complex128},Cstring),arg1,arg2)
    return err
end

function TSAdaptCandidatesClear(arg1::TSAdapt{Complex128})
    err = ccall((:TSAdaptCandidatesClear,petscComplexDouble),PetscErrorCode,(TSAdapt{Complex128},),arg1)
    return err
end

function TSAdaptCandidateAdd(arg1::TSAdapt{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer,arg4::Integer,arg5::Float64,arg6::Float64,arg7::PetscBool)
    err = ccall((:TSAdaptCandidateAdd,petscComplexDouble),PetscErrorCode,(TSAdapt{Complex128},Cstring,Int64,Int64,Float64,Float64,PetscBool),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function TSAdaptCandidatesGet(arg1::TSAdapt{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg5::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg6::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:TSAdaptCandidatesGet,petscComplexDouble),PetscErrorCode,(TSAdapt{Complex128},Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}},Ptr{Ptr{Float64}},Ptr{Ptr{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function TSAdaptChoose(arg1::TSAdapt{Complex128},arg2::TS{Complex128},arg3::Float64,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg6::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:TSAdaptChoose,petscComplexDouble),PetscErrorCode,(TSAdapt{Complex128},TS{Complex128},Float64,Ptr{Int64},Ptr{Float64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function TSAdaptCheckStage(arg1::TSAdapt{Complex128},arg2::TS{Complex128},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:TSAdaptCheckStage,petscComplexDouble),PetscErrorCode,(TSAdapt{Complex128},TS{Complex128},Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function TSAdaptView(arg1::TSAdapt{Complex128},arg2::PetscViewer{Complex128})
    err = ccall((:TSAdaptView,petscComplexDouble),PetscErrorCode,(TSAdapt{Complex128},PetscViewer{Complex128}),arg1,arg2)
    return err
end

function TSAdaptLoad(arg1::TSAdapt{Complex128},arg2::PetscViewer{Complex128})
    err = ccall((:TSAdaptLoad,petscComplexDouble),PetscErrorCode,(TSAdapt{Complex128},PetscViewer{Complex128}),arg1,arg2)
    return err
end

function TSAdaptSetFromOptions(arg1::Union{Ptr{PetscOptions{Complex128}},StridedArray{PetscOptions{Complex128}},Ptr{PetscOptions{Complex128}},Ref{PetscOptions{Complex128}}},arg2::TSAdapt{Complex128})
    err = ccall((:TSAdaptSetFromOptions,petscComplexDouble),PetscErrorCode,(Ptr{PetscOptions{Complex128}},TSAdapt{Complex128}),arg1,arg2)
    return err
end

function TSAdaptReset(arg1::TSAdapt{Complex128})
    err = ccall((:TSAdaptReset,petscComplexDouble),PetscErrorCode,(TSAdapt{Complex128},),arg1)
    return err
end

function TSAdaptDestroy(arg1::Union{Ptr{TSAdapt{Complex128}},StridedArray{TSAdapt{Complex128}},Ptr{TSAdapt{Complex128}},Ref{TSAdapt{Complex128}}})
    err = ccall((:TSAdaptDestroy,petscComplexDouble),PetscErrorCode,(Ptr{TSAdapt{Complex128}},),arg1)
    return err
end

function TSAdaptSetMonitor(arg1::TSAdapt{Complex128},arg2::PetscBool)
    err = ccall((:TSAdaptSetMonitor,petscComplexDouble),PetscErrorCode,(TSAdapt{Complex128},PetscBool),arg1,arg2)
    return err
end

function TSAdaptSetStepLimits(arg1::TSAdapt{Complex128},arg2::Float64,arg3::Float64)
    err = ccall((:TSAdaptSetStepLimits,petscComplexDouble),PetscErrorCode,(TSAdapt{Complex128},Float64,Float64),arg1,arg2,arg3)
    return err
end

function TSAdaptSetCheckStage(arg1::TSAdapt{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSAdaptSetCheckStage,petscComplexDouble),PetscErrorCode,(TSAdapt{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function TSGLAdaptRegister(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSGLAdaptRegister,petscComplexDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function TSGLAdaptInitializePackage(arg0::Type{Complex128})
    err = ccall((:TSGLAdaptInitializePackage,petscComplexDouble),PetscErrorCode,())
    return err
end

function TSGLAdaptFinalizePackage(arg0::Type{Complex128})
    err = ccall((:TSGLAdaptFinalizePackage,petscComplexDouble),PetscErrorCode,())
    return err
end

function TSGLAdaptCreate(arg1::MPI_Comm,arg2::Union{Ptr{TSGLAdapt{Complex128}},StridedArray{TSGLAdapt{Complex128}},Ptr{TSGLAdapt{Complex128}},Ref{TSGLAdapt{Complex128}}})
    err = ccall((:TSGLAdaptCreate,petscComplexDouble),PetscErrorCode,(comm_type,Ptr{TSGLAdapt{Complex128}}),arg1,arg2)
    return err
end

function TSGLAdaptSetType(arg1::TSGLAdapt{Complex128},arg2::TSGLAdaptType)
    err = ccall((:TSGLAdaptSetType,petscComplexDouble),PetscErrorCode,(TSGLAdapt{Complex128},TSGLAdaptType),arg1,arg2)
    return err
end

function TSGLAdaptSetOptionsPrefix(arg1::TSGLAdapt{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:TSGLAdaptSetOptionsPrefix,petscComplexDouble),PetscErrorCode,(TSGLAdapt{Complex128},Cstring),arg1,arg2)
    return err
end

function TSGLAdaptChoose(arg1::TSGLAdapt{Complex128},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg6::Integer,arg7::Float64,arg8::Float64,arg9::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg10::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg11::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:TSGLAdaptChoose,petscComplexDouble),PetscErrorCode,(TSGLAdapt{Complex128},Int64,Ptr{Int64},Ptr{Float64},Ptr{Float64},Int64,Float64,Float64,Ptr{Int64},Ptr{Float64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11)
    return err
end

function TSGLAdaptView(arg1::TSGLAdapt{Complex128},arg2::PetscViewer{Complex128})
    err = ccall((:TSGLAdaptView,petscComplexDouble),PetscErrorCode,(TSGLAdapt{Complex128},PetscViewer{Complex128}),arg1,arg2)
    return err
end

function TSGLAdaptSetFromOptions(arg1::Union{Ptr{PetscOptions{Complex128}},StridedArray{PetscOptions{Complex128}},Ptr{PetscOptions{Complex128}},Ref{PetscOptions{Complex128}}},arg2::TSGLAdapt{Complex128})
    err = ccall((:TSGLAdaptSetFromOptions,petscComplexDouble),PetscErrorCode,(Ptr{PetscOptions{Complex128}},TSGLAdapt{Complex128}),arg1,arg2)
    return err
end

function TSGLAdaptDestroy(arg1::Union{Ptr{TSGLAdapt{Complex128}},StridedArray{TSGLAdapt{Complex128}},Ptr{TSGLAdapt{Complex128}},Ref{TSGLAdapt{Complex128}}})
    err = ccall((:TSGLAdaptDestroy,petscComplexDouble),PetscErrorCode,(Ptr{TSGLAdapt{Complex128}},),arg1)
    return err
end

function TSGLAcceptRegister(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::TSGLAcceptFunction)
    err = ccall((:TSGLAcceptRegister,petscComplexDouble),PetscErrorCode,(Cstring,TSGLAcceptFunction),arg1,arg2)
    return err
end

function TSGLRegister(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSGLRegister,petscComplexDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function TSGLInitializePackage(arg0::Type{Complex128})
    err = ccall((:TSGLInitializePackage,petscComplexDouble),PetscErrorCode,())
    return err
end

function TSGLFinalizePackage(arg0::Type{Complex128})
    err = ccall((:TSGLFinalizePackage,petscComplexDouble),PetscErrorCode,())
    return err
end

function TSGLSetType(arg1::TS{Complex128},arg2::TSGLType)
    err = ccall((:TSGLSetType,petscComplexDouble),PetscErrorCode,(TS{Complex128},TSGLType),arg1,arg2)
    return err
end

function TSGLGetAdapt(arg1::TS{Complex128},arg2::Union{Ptr{TSGLAdapt{Complex128}},StridedArray{TSGLAdapt{Complex128}},Ptr{TSGLAdapt{Complex128}},Ref{TSGLAdapt{Complex128}}})
    err = ccall((:TSGLGetAdapt,petscComplexDouble),PetscErrorCode,(TS{Complex128},Ptr{TSGLAdapt{Complex128}}),arg1,arg2)
    return err
end

function TSGLSetAcceptType(arg1::TS{Complex128},arg2::TSGLAcceptType)
    err = ccall((:TSGLSetAcceptType,petscComplexDouble),PetscErrorCode,(TS{Complex128},TSGLAcceptType),arg1,arg2)
    return err
end

function TSEIMEXSetMaxRows(ts::TS{Complex128},arg1::Integer)
    err = ccall((:TSEIMEXSetMaxRows,petscComplexDouble),PetscErrorCode,(TS{Complex128},Int64),ts,arg1)
    return err
end

function TSEIMEXSetRowCol(ts::TS{Complex128},arg1::Integer,arg2::Integer)
    err = ccall((:TSEIMEXSetRowCol,petscComplexDouble),PetscErrorCode,(TS{Complex128},Int64,Int64),ts,arg1,arg2)
    return err
end

function TSEIMEXSetOrdAdapt(arg1::TS{Complex128},arg2::PetscBool)
    err = ccall((:TSEIMEXSetOrdAdapt,petscComplexDouble),PetscErrorCode,(TS{Complex128},PetscBool),arg1,arg2)
    return err
end

function TSRKGetType(ts::TS{Complex128},arg1::Union{Ptr{TSRKType},StridedArray{TSRKType},Ptr{TSRKType},Ref{TSRKType}})
    err = ccall((:TSRKGetType,petscComplexDouble),PetscErrorCode,(TS{Complex128},Ptr{TSRKType}),ts,arg1)
    return err
end

function TSRKSetType(ts::TS{Complex128},arg1::TSRKType)
    err = ccall((:TSRKSetType,petscComplexDouble),PetscErrorCode,(TS{Complex128},TSRKType),ts,arg1)
    return err
end

function TSRKSetFullyImplicit(arg1::TS{Complex128},arg2::PetscBool)
    err = ccall((:TSRKSetFullyImplicit,petscComplexDouble),PetscErrorCode,(TS{Complex128},PetscBool),arg1,arg2)
    return err
end

function TSRKRegister(arg0::Type{Complex128},arg1::TSRKType,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg7::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg8::Integer,arg9::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:TSRKRegister,petscComplexDouble),PetscErrorCode,(TSRKType,Int64,Int64,Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64},Int64,Ptr{Float64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
    return err
end

function TSRKFinalizePackage(arg0::Type{Complex128})
    err = ccall((:TSRKFinalizePackage,petscComplexDouble),PetscErrorCode,())
    return err
end

function TSRKInitializePackage(arg0::Type{Complex128})
    err = ccall((:TSRKInitializePackage,petscComplexDouble),PetscErrorCode,())
    return err
end

function TSRKRegisterDestroy(arg0::Type{Complex128})
    err = ccall((:TSRKRegisterDestroy,petscComplexDouble),PetscErrorCode,())
    return err
end

function TSARKIMEXGetType(ts::TS{Complex128},arg1::Union{Ptr{TSARKIMEXType},StridedArray{TSARKIMEXType},Ptr{TSARKIMEXType},Ref{TSARKIMEXType}})
    err = ccall((:TSARKIMEXGetType,petscComplexDouble),PetscErrorCode,(TS{Complex128},Ptr{TSARKIMEXType}),ts,arg1)
    return err
end

function TSARKIMEXSetType(ts::TS{Complex128},arg1::TSARKIMEXType)
    err = ccall((:TSARKIMEXSetType,petscComplexDouble),PetscErrorCode,(TS{Complex128},TSARKIMEXType),ts,arg1)
    return err
end

function TSARKIMEXSetFullyImplicit(arg1::TS{Complex128},arg2::PetscBool)
    err = ccall((:TSARKIMEXSetFullyImplicit,petscComplexDouble),PetscErrorCode,(TS{Complex128},PetscBool),arg1,arg2)
    return err
end

function TSARKIMEXRegister(arg0::Type{Complex128},arg1::TSARKIMEXType,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg7::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg8::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg9::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg10::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg11::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg12::Integer,arg13::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg14::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:TSARKIMEXRegister,petscComplexDouble),PetscErrorCode,(TSARKIMEXType,Int64,Int64,Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64},Int64,Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14)
    return err
end

function TSARKIMEXFinalizePackage(arg0::Type{Complex128})
    err = ccall((:TSARKIMEXFinalizePackage,petscComplexDouble),PetscErrorCode,())
    return err
end

function TSARKIMEXInitializePackage(arg0::Type{Complex128})
    err = ccall((:TSARKIMEXInitializePackage,petscComplexDouble),PetscErrorCode,())
    return err
end

function TSARKIMEXRegisterDestroy(arg0::Type{Complex128})
    err = ccall((:TSARKIMEXRegisterDestroy,petscComplexDouble),PetscErrorCode,())
    return err
end

function TSRosWGetType(ts::TS{Complex128},arg1::Union{Ptr{TSRosWType},StridedArray{TSRosWType},Ptr{TSRosWType},Ref{TSRosWType}})
    err = ccall((:TSRosWGetType,petscComplexDouble),PetscErrorCode,(TS{Complex128},Ptr{TSRosWType}),ts,arg1)
    return err
end

function TSRosWSetType(ts::TS{Complex128},arg1::TSRosWType)
    err = ccall((:TSRosWSetType,petscComplexDouble),PetscErrorCode,(TS{Complex128},TSRosWType),ts,arg1)
    return err
end

function TSRosWSetRecomputeJacobian(arg1::TS{Complex128},arg2::PetscBool)
    err = ccall((:TSRosWSetRecomputeJacobian,petscComplexDouble),PetscErrorCode,(TS{Complex128},PetscBool),arg1,arg2)
    return err
end

function TSRosWRegister(arg0::Type{Complex128},arg1::TSRosWType,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg7::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg8::Integer,arg9::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:TSRosWRegister,petscComplexDouble),PetscErrorCode,(TSRosWType,Int64,Int64,Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64},Int64,Ptr{Float64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
    return err
end

function TSRosWRegisterRos4(arg0::Type{Complex128},arg1::TSRosWType,arg2::Float64,arg3::Float64,arg4::Float64,arg5::Float64,arg6::Float64)
    err = ccall((:TSRosWRegisterRos4,petscComplexDouble),PetscErrorCode,(TSRosWType,Float64,Float64,Float64,Float64,Float64),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function TSRosWFinalizePackage(arg0::Type{Complex128})
    err = ccall((:TSRosWFinalizePackage,petscComplexDouble),PetscErrorCode,())
    return err
end

function TSRosWInitializePackage(arg0::Type{Complex128})
    err = ccall((:TSRosWInitializePackage,petscComplexDouble),PetscErrorCode,())
    return err
end

function TSRosWRegisterDestroy(arg0::Type{Complex128})
    err = ccall((:TSRosWRegisterDestroy,petscComplexDouble),PetscErrorCode,())
    return err
end

function TSThetaSetTheta(arg1::TS{Complex128},arg2::Float64)
    err = ccall((:TSThetaSetTheta,petscComplexDouble),PetscErrorCode,(TS{Complex128},Float64),arg1,arg2)
    return err
end

function TSThetaGetTheta(arg1::TS{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:TSThetaGetTheta,petscComplexDouble),PetscErrorCode,(TS{Complex128},Ptr{Float64}),arg1,arg2)
    return err
end

function TSThetaGetEndpoint(arg1::TS{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:TSThetaGetEndpoint,petscComplexDouble),PetscErrorCode,(TS{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function TSThetaSetEndpoint(arg1::TS{Complex128},arg2::PetscBool)
    err = ccall((:TSThetaSetEndpoint,petscComplexDouble),PetscErrorCode,(TS{Complex128},PetscBool),arg1,arg2)
    return err
end

function TSAlphaSetAdapt(arg1::TS{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSAlphaSetAdapt,petscComplexDouble),PetscErrorCode,(TS{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function TSAlphaAdaptDefault(arg1::TS{Complex128},arg2::Float64,arg3::Vec{Complex128},arg4::Vec{Complex128},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg6::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg7::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSAlphaAdaptDefault,petscComplexDouble),PetscErrorCode,(TS{Complex128},Float64,Vec{Complex128},Vec{Complex128},Ptr{Float64},Ptr{PetscBool},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function TSAlphaSetRadius(arg1::TS{Complex128},arg2::Float64)
    err = ccall((:TSAlphaSetRadius,petscComplexDouble),PetscErrorCode,(TS{Complex128},Float64),arg1,arg2)
    return err
end

function TSAlphaSetParams(arg1::TS{Complex128},arg2::Float64,arg3::Float64,arg4::Float64)
    err = ccall((:TSAlphaSetParams,petscComplexDouble),PetscErrorCode,(TS{Complex128},Float64,Float64,Float64),arg1,arg2,arg3,arg4)
    return err
end

function TSAlphaGetParams(arg1::TS{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:TSAlphaGetParams,petscComplexDouble),PetscErrorCode,(TS{Complex128},Ptr{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function TSSetDM(arg1::TS{Complex128},arg2::DM{Complex128})
    err = ccall((:TSSetDM,petscComplexDouble),PetscErrorCode,(TS{Complex128},DM{Complex128}),arg1,arg2)
    return err
end

function TSGetDM(arg1::TS{Complex128},arg2::Union{Ptr{DM{Complex128}},StridedArray{DM{Complex128}},Ptr{DM{Complex128}},Ref{DM{Complex128}}})
    err = ccall((:TSGetDM,petscComplexDouble),PetscErrorCode,(TS{Complex128},Ptr{DM{Complex128}}),arg1,arg2)
    return err
end

function SNESTSFormFunction(arg1::SNES{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESTSFormFunction,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Vec{Complex128},Vec{Complex128},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function SNESTSFormJacobian(arg1::SNES{Complex128},arg2::Vec{Complex128},arg3::Mat{Complex128},arg4::Mat{Complex128},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESTSFormJacobian,petscComplexDouble),PetscErrorCode,(SNES{Complex128},Vec{Complex128},Mat{Complex128},Mat{Complex128},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function VecFischer(arg1::Vec{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128},arg4::Vec{Complex128},arg5::Vec{Complex128})
    err = ccall((:VecFischer,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Vec{Complex128},Vec{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function VecSFischer(arg1::Vec{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128},arg4::Vec{Complex128},arg5::Float64,arg6::Vec{Complex128})
    err = ccall((:VecSFischer,petscComplexDouble),PetscErrorCode,(Vec{Complex128},Vec{Complex128},Vec{Complex128},Vec{Complex128},Float64,Vec{Complex128}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatDFischer(arg1::Mat{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128},arg4::Vec{Complex128},arg5::Vec{Complex128},arg6::Vec{Complex128},arg7::Vec{Complex128},arg8::Vec{Complex128},arg9::Vec{Complex128})
    err = ccall((:MatDFischer,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Vec{Complex128},Vec{Complex128},Vec{Complex128},Vec{Complex128},Vec{Complex128},Vec{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
    return err
end

function MatDSFischer(arg1::Mat{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128},arg4::Vec{Complex128},arg5::Vec{Complex128},arg6::Float64,arg7::Vec{Complex128},arg8::Vec{Complex128},arg9::Vec{Complex128},arg10::Vec{Complex128},arg11::Vec{Complex128})
    err = ccall((:MatDSFischer,petscComplexDouble),PetscErrorCode,(Mat{Complex128},Vec{Complex128},Vec{Complex128},Vec{Complex128},Vec{Complex128},Float64,Vec{Complex128},Vec{Complex128},Vec{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11)
    return err
end

function TaoInitializePackage(arg0::Type{Complex128})
    err = ccall((:TaoInitializePackage,petscComplexDouble),PetscErrorCode,())
    return err
end

function TaoFinalizePackage(arg0::Type{Complex128})
    err = ccall((:TaoFinalizePackage,petscComplexDouble),PetscErrorCode,())
    return err
end

function TaoCreate(arg1::MPI_Comm,arg2::Union{Ptr{Tao{Complex128}},StridedArray{Tao{Complex128}},Ptr{Tao{Complex128}},Ref{Tao{Complex128}}})
    err = ccall((:TaoCreate,petscComplexDouble),PetscErrorCode,(comm_type,Ptr{Tao{Complex128}}),arg1,arg2)
    return err
end

function TaoSetFromOptions(arg1::Tao{Complex128})
    err = ccall((:TaoSetFromOptions,petscComplexDouble),PetscErrorCode,(Tao{Complex128},),arg1)
    return err
end

function TaoSetUp(arg1::Tao{Complex128})
    err = ccall((:TaoSetUp,petscComplexDouble),PetscErrorCode,(Tao{Complex128},),arg1)
    return err
end

function TaoSetType(arg1::Tao{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:TaoSetType,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Cstring),arg1,arg2)
    return err
end

function TaoGetType(arg1::Tao{Complex128},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:TaoGetType,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function TaoSetApplicationContext(arg1::Tao{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoSetApplicationContext,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function TaoGetApplicationContext(arg1::Tao{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoGetApplicationContext,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function TaoDestroy(arg1::Union{Ptr{Tao{Complex128}},StridedArray{Tao{Complex128}},Ptr{Tao{Complex128}},Ref{Tao{Complex128}}})
    err = ccall((:TaoDestroy,petscComplexDouble),PetscErrorCode,(Ptr{Tao{Complex128}},),arg1)
    return err
end

function TaoSetOptionsPrefix(arg1::Tao{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:TaoSetOptionsPrefix,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Cstring),arg1,arg2)
    return err
end

function TaoView(arg1::Tao{Complex128},arg2::PetscViewer{Complex128})
    err = ccall((:TaoView,petscComplexDouble),PetscErrorCode,(Tao{Complex128},PetscViewer{Complex128}),arg1,arg2)
    return err
end

function TaoRegister(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoRegister,petscComplexDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function TaoRegisterDestroy(arg0::Type{Complex128})
    err = ccall((:TaoRegisterDestroy,petscComplexDouble),PetscErrorCode,())
    return err
end

function TaoGetConvergedReason(arg1::Tao{Complex128},arg2::Union{Ptr{TaoConvergedReason},StridedArray{TaoConvergedReason},Ptr{TaoConvergedReason},Ref{TaoConvergedReason}})
    err = ccall((:TaoGetConvergedReason,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Ptr{TaoConvergedReason}),arg1,arg2)
    return err
end

function TaoGetSolutionStatus(arg1::Tao{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg7::Union{Ptr{TaoConvergedReason},StridedArray{TaoConvergedReason},Ptr{TaoConvergedReason},Ref{TaoConvergedReason}})
    err = ccall((:TaoGetSolutionStatus,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Ptr{Int64},Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{TaoConvergedReason}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function TaoSetConvergedReason(arg1::Tao{Complex128},arg2::TaoConvergedReason)
    err = ccall((:TaoSetConvergedReason,petscComplexDouble),PetscErrorCode,(Tao{Complex128},TaoConvergedReason),arg1,arg2)
    return err
end

function TaoSetInitialVector(arg1::Tao{Complex128},arg2::Vec{Complex128})
    err = ccall((:TaoSetInitialVector,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Vec{Complex128}),arg1,arg2)
    return err
end

function TaoGetSolutionVector(arg1::Tao{Complex128},arg2::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:TaoGetSolutionVector,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Ptr{Vec{Complex128}}),arg1,arg2)
    return err
end

function TaoGetGradientVector(arg1::Tao{Complex128},arg2::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:TaoGetGradientVector,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Ptr{Vec{Complex128}}),arg1,arg2)
    return err
end

function TaoSetObjectiveRoutine(arg1::Tao{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoSetObjectiveRoutine,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function TaoSetGradientRoutine(arg1::Tao{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoSetGradientRoutine,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function TaoSetObjectiveAndGradientRoutine(arg1::Tao{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoSetObjectiveAndGradientRoutine,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function TaoSetHessianRoutine(arg1::Tao{Complex128},arg2::Mat{Complex128},arg3::Mat{Complex128},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoSetHessianRoutine,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Mat{Complex128},Mat{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TaoSetSeparableObjectiveRoutine(arg1::Tao{Complex128},arg2::Vec{Complex128},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoSetSeparableObjectiveRoutine,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Vec{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function TaoSetConstraintsRoutine(arg1::Tao{Complex128},arg2::Vec{Complex128},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoSetConstraintsRoutine,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Vec{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function TaoSetInequalityConstraintsRoutine(arg1::Tao{Complex128},arg2::Vec{Complex128},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoSetInequalityConstraintsRoutine,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Vec{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function TaoSetEqualityConstraintsRoutine(arg1::Tao{Complex128},arg2::Vec{Complex128},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoSetEqualityConstraintsRoutine,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Vec{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function TaoSetJacobianRoutine(arg1::Tao{Complex128},arg2::Mat{Complex128},arg3::Mat{Complex128},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoSetJacobianRoutine,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Mat{Complex128},Mat{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TaoSetJacobianStateRoutine(arg1::Tao{Complex128},arg2::Mat{Complex128},arg3::Mat{Complex128},arg4::Mat{Complex128},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoSetJacobianStateRoutine,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Mat{Complex128},Mat{Complex128},Mat{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function TaoSetJacobianDesignRoutine(arg1::Tao{Complex128},arg2::Mat{Complex128},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoSetJacobianDesignRoutine,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Mat{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function TaoSetJacobianInequalityRoutine(arg1::Tao{Complex128},arg2::Mat{Complex128},arg3::Mat{Complex128},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoSetJacobianInequalityRoutine,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Mat{Complex128},Mat{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TaoSetJacobianEqualityRoutine(arg1::Tao{Complex128},arg2::Mat{Complex128},arg3::Mat{Complex128},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoSetJacobianEqualityRoutine,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Mat{Complex128},Mat{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TaoSetStateDesignIS(arg1::Tao{Complex128},arg2::IS{Complex128},arg3::IS{Complex128})
    err = ccall((:TaoSetStateDesignIS,petscComplexDouble),PetscErrorCode,(Tao{Complex128},IS{Complex128},IS{Complex128}),arg1,arg2,arg3)
    return err
end

function TaoComputeObjective(arg1::Tao{Complex128},arg2::Vec{Complex128},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:TaoComputeObjective,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Vec{Complex128},Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function TaoComputeSeparableObjective(arg1::Tao{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128})
    err = ccall((:TaoComputeSeparableObjective,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function TaoComputeGradient(arg1::Tao{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128})
    err = ccall((:TaoComputeGradient,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function TaoComputeObjectiveAndGradient(arg1::Tao{Complex128},arg2::Vec{Complex128},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Vec{Complex128})
    err = ccall((:TaoComputeObjectiveAndGradient,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Vec{Complex128},Ptr{Float64},Vec{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function TaoComputeConstraints(arg1::Tao{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128})
    err = ccall((:TaoComputeConstraints,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function TaoComputeInequalityConstraints(arg1::Tao{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128})
    err = ccall((:TaoComputeInequalityConstraints,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function TaoComputeEqualityConstraints(arg1::Tao{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128})
    err = ccall((:TaoComputeEqualityConstraints,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function TaoDefaultComputeGradient(arg1::Tao{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoDefaultComputeGradient,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Vec{Complex128},Vec{Complex128},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function TaoIsObjectiveDefined(arg1::Tao{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:TaoIsObjectiveDefined,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function TaoIsGradientDefined(arg1::Tao{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:TaoIsGradientDefined,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function TaoIsObjectiveAndGradientDefined(arg1::Tao{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:TaoIsObjectiveAndGradientDefined,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function TaoComputeHessian(arg1::Tao{Complex128},arg2::Vec{Complex128},arg3::Mat{Complex128},arg4::Mat{Complex128})
    err = ccall((:TaoComputeHessian,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Vec{Complex128},Mat{Complex128},Mat{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function TaoComputeJacobian(arg1::Tao{Complex128},arg2::Vec{Complex128},arg3::Mat{Complex128},arg4::Mat{Complex128})
    err = ccall((:TaoComputeJacobian,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Vec{Complex128},Mat{Complex128},Mat{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function TaoComputeJacobianState(arg1::Tao{Complex128},arg2::Vec{Complex128},arg3::Mat{Complex128},arg4::Mat{Complex128},arg5::Mat{Complex128})
    err = ccall((:TaoComputeJacobianState,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Vec{Complex128},Mat{Complex128},Mat{Complex128},Mat{Complex128}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TaoComputeJacobianEquality(arg1::Tao{Complex128},arg2::Vec{Complex128},arg3::Mat{Complex128},arg4::Mat{Complex128})
    err = ccall((:TaoComputeJacobianEquality,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Vec{Complex128},Mat{Complex128},Mat{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function TaoComputeJacobianInequality(arg1::Tao{Complex128},arg2::Vec{Complex128},arg3::Mat{Complex128},arg4::Mat{Complex128})
    err = ccall((:TaoComputeJacobianInequality,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Vec{Complex128},Mat{Complex128},Mat{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function TaoComputeJacobianDesign(arg1::Tao{Complex128},arg2::Vec{Complex128},arg3::Mat{Complex128})
    err = ccall((:TaoComputeJacobianDesign,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Vec{Complex128},Mat{Complex128}),arg1,arg2,arg3)
    return err
end

function TaoDefaultComputeHessian(arg1::Tao{Complex128},arg2::Vec{Complex128},arg3::Mat{Complex128},arg4::Mat{Complex128},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoDefaultComputeHessian,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Vec{Complex128},Mat{Complex128},Mat{Complex128},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TaoDefaultComputeHessianColor(arg1::Tao{Complex128},arg2::Vec{Complex128},arg3::Mat{Complex128},arg4::Mat{Complex128},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoDefaultComputeHessianColor,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Vec{Complex128},Mat{Complex128},Mat{Complex128},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TaoComputeDualVariables(arg1::Tao{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128})
    err = ccall((:TaoComputeDualVariables,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function TaoComputeDualVariables(arg1::Tao{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128})
    err = ccall((:TaoComputeDualVariables,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function TaoSetVariableBounds(arg1::Tao{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128})
    err = ccall((:TaoSetVariableBounds,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function TaoGetVariableBounds(arg1::Tao{Complex128},arg2::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}},arg3::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:TaoGetVariableBounds,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Ptr{Vec{Complex128}},Ptr{Vec{Complex128}}),arg1,arg2,arg3)
    return err
end

function TaoGetDualVariables(arg1::Tao{Complex128},arg2::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}},arg3::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:TaoGetDualVariables,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Ptr{Vec{Complex128}},Ptr{Vec{Complex128}}),arg1,arg2,arg3)
    return err
end

function TaoSetInequalityBounds(arg1::Tao{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128})
    err = ccall((:TaoSetInequalityBounds,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function TaoGetInequalityBounds(arg1::Tao{Complex128},arg2::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}},arg3::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:TaoGetInequalityBounds,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Ptr{Vec{Complex128}},Ptr{Vec{Complex128}}),arg1,arg2,arg3)
    return err
end

function TaoSetVariableBoundsRoutine(arg1::Tao{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoSetVariableBoundsRoutine,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function TaoComputeVariableBounds(arg1::Tao{Complex128})
    err = ccall((:TaoComputeVariableBounds,petscComplexDouble),PetscErrorCode,(Tao{Complex128},),arg1)
    return err
end

function TaoGetTolerances(arg1::Tao{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:TaoGetTolerances,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function TaoSetTolerances(arg1::Tao{Complex128},arg2::Float64,arg3::Float64,arg4::Float64,arg5::Float64,arg6::Float64)
    err = ccall((:TaoSetTolerances,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Float64,Float64,Float64,Float64,Float64),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function TaoGetConstraintTolerances(arg1::Tao{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:TaoGetConstraintTolerances,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function TaoSetConstraintTolerances(arg1::Tao{Complex128},arg2::Float64,arg3::Float64)
    err = ccall((:TaoSetConstraintTolerances,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Float64,Float64),arg1,arg2,arg3)
    return err
end

function TaoSetFunctionLowerBound(arg1::Tao{Complex128},arg2::Float64)
    err = ccall((:TaoSetFunctionLowerBound,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Float64),arg1,arg2)
    return err
end

function TaoSetInitialTrustRegionRadius(arg1::Tao{Complex128},arg2::Float64)
    err = ccall((:TaoSetInitialTrustRegionRadius,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Float64),arg1,arg2)
    return err
end

function TaoSetMaximumIterations(arg1::Tao{Complex128},arg2::Integer)
    err = ccall((:TaoSetMaximumIterations,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Int64),arg1,arg2)
    return err
end

function TaoSetMaximumFunctionEvaluations(arg1::Tao{Complex128},arg2::Integer)
    err = ccall((:TaoSetMaximumFunctionEvaluations,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Int64),arg1,arg2)
    return err
end

function TaoGetFunctionLowerBound(arg1::Tao{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:TaoGetFunctionLowerBound,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Ptr{Float64}),arg1,arg2)
    return err
end

function TaoGetInitialTrustRegionRadius(arg1::Tao{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:TaoGetInitialTrustRegionRadius,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Ptr{Float64}),arg1,arg2)
    return err
end

function TaoGetCurrentTrustRegionRadius(arg1::Tao{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:TaoGetCurrentTrustRegionRadius,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Ptr{Float64}),arg1,arg2)
    return err
end

function TaoGetMaximumIterations(arg1::Tao{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:TaoGetMaximumIterations,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function TaoGetCurrentFunctionEvaluations(arg1::Tao{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:TaoGetCurrentFunctionEvaluations,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function TaoGetMaximumFunctionEvaluations(arg1::Tao{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:TaoGetMaximumFunctionEvaluations,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function TaoGetIterationNumber(arg1::Tao{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:TaoGetIterationNumber,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function TaoSetIterationNumber(arg1::Tao{Complex128},arg2::Integer)
    err = ccall((:TaoSetIterationNumber,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Int64),arg1,arg2)
    return err
end

function TaoGetTotalIterationNumber(arg1::Tao{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:TaoGetTotalIterationNumber,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function TaoSetTotalIterationNumber(arg1::Tao{Complex128},arg2::Integer)
    err = ccall((:TaoSetTotalIterationNumber,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Int64),arg1,arg2)
    return err
end

function TaoSetOptionsPrefix(arg1::Tao{Complex128},p::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:TaoSetOptionsPrefix,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Cstring),arg1,p)
    return err
end

function TaoAppendOptionsPrefix(arg1::Tao{Complex128},p::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:TaoAppendOptionsPrefix,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Cstring),arg1,p)
    return err
end

function TaoGetOptionsPrefix(arg1::Tao{Complex128},p::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:TaoGetOptionsPrefix,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Ptr{Ptr{UInt8}}),arg1,p)
    return err
end

function TaoResetStatistics(arg1::Tao{Complex128})
    err = ccall((:TaoResetStatistics,petscComplexDouble),PetscErrorCode,(Tao{Complex128},),arg1)
    return err
end

function TaoGetKSP(arg1::Tao{Complex128},arg2::Union{Ptr{KSP{Complex128}},StridedArray{KSP{Complex128}},Ptr{KSP{Complex128}},Ref{KSP{Complex128}}})
    err = ccall((:TaoGetKSP,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Ptr{KSP{Complex128}}),arg1,arg2)
    return err
end

function TaoGetLinearSolveIterations(arg1::Tao{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:TaoGetLinearSolveIterations,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Ptr{Int64}),arg1,arg2)
    return err
end

function TaoLineSearchCreate(arg1::MPI_Comm,arg2::Union{Ptr{TaoLineSearch{Complex128}},StridedArray{TaoLineSearch{Complex128}},Ptr{TaoLineSearch{Complex128}},Ref{TaoLineSearch{Complex128}}})
    err = ccall((:TaoLineSearchCreate,petscComplexDouble),PetscErrorCode,(comm_type,Ptr{TaoLineSearch{Complex128}}),arg1,arg2)
    return err
end

function TaoLineSearchSetFromOptions(arg1::TaoLineSearch{Complex128})
    err = ccall((:TaoLineSearchSetFromOptions,petscComplexDouble),PetscErrorCode,(TaoLineSearch{Complex128},),arg1)
    return err
end

function TaoLineSearchSetUp(arg1::TaoLineSearch{Complex128})
    err = ccall((:TaoLineSearchSetUp,petscComplexDouble),PetscErrorCode,(TaoLineSearch{Complex128},),arg1)
    return err
end

function TaoLineSearchDestroy(arg1::Union{Ptr{TaoLineSearch{Complex128}},StridedArray{TaoLineSearch{Complex128}},Ptr{TaoLineSearch{Complex128}},Ref{TaoLineSearch{Complex128}}})
    err = ccall((:TaoLineSearchDestroy,petscComplexDouble),PetscErrorCode,(Ptr{TaoLineSearch{Complex128}},),arg1)
    return err
end

function TaoLineSearchView(arg1::TaoLineSearch{Complex128},arg2::PetscViewer{Complex128})
    err = ccall((:TaoLineSearchView,petscComplexDouble),PetscErrorCode,(TaoLineSearch{Complex128},PetscViewer{Complex128}),arg1,arg2)
    return err
end

function TaoLineSearchReset(arg1::TaoLineSearch{Complex128})
    err = ccall((:TaoLineSearchReset,petscComplexDouble),PetscErrorCode,(TaoLineSearch{Complex128},),arg1)
    return err
end

function TaoLineSearchAppendOptionsPrefix(arg1::TaoLineSearch{Complex128},prefix::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:TaoLineSearchAppendOptionsPrefix,petscComplexDouble),PetscErrorCode,(TaoLineSearch{Complex128},Cstring),arg1,prefix)
    return err
end

function TaoLineSearchGetOptionsPrefix(arg1::TaoLineSearch{Complex128},prefix::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:TaoLineSearchGetOptionsPrefix,petscComplexDouble),PetscErrorCode,(TaoLineSearch{Complex128},Ptr{Ptr{UInt8}}),arg1,prefix)
    return err
end

function TaoLineSearchApply(arg1::TaoLineSearch{Complex128},arg2::Vec{Complex128},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Vec{Complex128},arg5::Vec{Complex128},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg7::Union{Ptr{TaoLineSearchConvergedReason},StridedArray{TaoLineSearchConvergedReason},Ptr{TaoLineSearchConvergedReason},Ref{TaoLineSearchConvergedReason}})
    err = ccall((:TaoLineSearchApply,petscComplexDouble),PetscErrorCode,(TaoLineSearch{Complex128},Vec{Complex128},Ptr{Float64},Vec{Complex128},Vec{Complex128},Ptr{Float64},Ptr{TaoLineSearchConvergedReason}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function TaoLineSearchGetStepLength(arg1::TaoLineSearch{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:TaoLineSearchGetStepLength,petscComplexDouble),PetscErrorCode,(TaoLineSearch{Complex128},Ptr{Float64}),arg1,arg2)
    return err
end

function TaoLineSearchGetStartingVector(arg1::TaoLineSearch{Complex128},arg2::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:TaoLineSearchGetStartingVector,petscComplexDouble),PetscErrorCode,(TaoLineSearch{Complex128},Ptr{Vec{Complex128}}),arg1,arg2)
    return err
end

function TaoLineSearchGetStepDirection(arg1::TaoLineSearch{Complex128},arg2::Union{Ptr{Vec{Complex128}},StridedArray{Vec{Complex128}},Ptr{Vec{Complex128}},Ref{Vec{Complex128}}})
    err = ccall((:TaoLineSearchGetStepDirection,petscComplexDouble),PetscErrorCode,(TaoLineSearch{Complex128},Ptr{Vec{Complex128}}),arg1,arg2)
    return err
end

function TaoLineSearchSetInitialStepLength(arg1::TaoLineSearch{Complex128},arg2::Float64)
    err = ccall((:TaoLineSearchSetInitialStepLength,petscComplexDouble),PetscErrorCode,(TaoLineSearch{Complex128},Float64),arg1,arg2)
    return err
end

function TaoLineSearchGetSolution(arg1::TaoLineSearch{Complex128},arg2::Vec{Complex128},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Vec{Complex128},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg6::Union{Ptr{TaoLineSearchConvergedReason},StridedArray{TaoLineSearchConvergedReason},Ptr{TaoLineSearchConvergedReason},Ref{TaoLineSearchConvergedReason}})
    err = ccall((:TaoLineSearchGetSolution,petscComplexDouble),PetscErrorCode,(TaoLineSearch{Complex128},Vec{Complex128},Ptr{Float64},Vec{Complex128},Ptr{Float64},Ptr{TaoLineSearchConvergedReason}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function TaoLineSearchGetFullStepObjective(arg1::TaoLineSearch{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:TaoLineSearchGetFullStepObjective,petscComplexDouble),PetscErrorCode,(TaoLineSearch{Complex128},Ptr{Float64}),arg1,arg2)
    return err
end

function TaoLineSearchGetNumberFunctionEvaluations(arg1::TaoLineSearch{Complex128},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:TaoLineSearchGetNumberFunctionEvaluations,petscComplexDouble),PetscErrorCode,(TaoLineSearch{Complex128},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function TaoLineSearchGetType(arg1::TaoLineSearch{Complex128},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:TaoLineSearchGetType,petscComplexDouble),PetscErrorCode,(TaoLineSearch{Complex128},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function TaoLineSearchSetType(arg1::TaoLineSearch{Complex128},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:TaoLineSearchSetType,petscComplexDouble),PetscErrorCode,(TaoLineSearch{Complex128},Cstring),arg1,arg2)
    return err
end

function TaoLineSearchIsUsingTaoRoutines(arg1::TaoLineSearch{Complex128},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:TaoLineSearchIsUsingTaoRoutines,petscComplexDouble),PetscErrorCode,(TaoLineSearch{Complex128},Ptr{PetscBool}),arg1,arg2)
    return err
end

function TaoLineSearchSetObjectiveAndGTSRoutine(arg1::TaoLineSearch{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoLineSearchSetObjectiveAndGTSRoutine,petscComplexDouble),PetscErrorCode,(TaoLineSearch{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function TaoLineSearchSetObjectiveRoutine(arg1::TaoLineSearch{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoLineSearchSetObjectiveRoutine,petscComplexDouble),PetscErrorCode,(TaoLineSearch{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function TaoLineSearchSetGradientRoutine(arg1::TaoLineSearch{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoLineSearchSetGradientRoutine,petscComplexDouble),PetscErrorCode,(TaoLineSearch{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function TaoLineSearchSetObjectiveAndGradientRoutine(arg1::TaoLineSearch{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoLineSearchSetObjectiveAndGradientRoutine,petscComplexDouble),PetscErrorCode,(TaoLineSearch{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function TaoLineSearchComputeObjective(arg1::TaoLineSearch{Complex128},arg2::Vec{Complex128},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:TaoLineSearchComputeObjective,petscComplexDouble),PetscErrorCode,(TaoLineSearch{Complex128},Vec{Complex128},Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function TaoLineSearchComputeGradient(arg1::TaoLineSearch{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128})
    err = ccall((:TaoLineSearchComputeGradient,petscComplexDouble),PetscErrorCode,(TaoLineSearch{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function TaoLineSearchComputeObjectiveAndGradient(arg1::TaoLineSearch{Complex128},arg2::Vec{Complex128},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Vec{Complex128})
    err = ccall((:TaoLineSearchComputeObjectiveAndGradient,petscComplexDouble),PetscErrorCode,(TaoLineSearch{Complex128},Vec{Complex128},Ptr{Float64},Vec{Complex128}),arg1,arg2,arg3,arg4)
    return err
end

function TaoLineSearchComputeObjectiveAndGTS(arg1::TaoLineSearch{Complex128},arg2::Vec{Complex128},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:TaoLineSearchComputeObjectiveAndGTS,petscComplexDouble),PetscErrorCode,(TaoLineSearch{Complex128},Vec{Complex128},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function TaoLineSearchSetVariableBounds(arg1::TaoLineSearch{Complex128},arg2::Vec{Complex128},arg3::Vec{Complex128})
    err = ccall((:TaoLineSearchSetVariableBounds,petscComplexDouble),PetscErrorCode,(TaoLineSearch{Complex128},Vec{Complex128},Vec{Complex128}),arg1,arg2,arg3)
    return err
end

function TaoLineSearchInitializePackage(arg0::Type{Complex128})
    err = ccall((:TaoLineSearchInitializePackage,petscComplexDouble),PetscErrorCode,())
    return err
end

function TaoLineSearchFinalizePackage(arg0::Type{Complex128})
    err = ccall((:TaoLineSearchFinalizePackage,petscComplexDouble),PetscErrorCode,())
    return err
end

function TaoLineSearchRegister(arg0::Type{Complex128},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoLineSearchRegister,petscComplexDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function TaoLineSearchUseTaoRoutines(arg1::TaoLineSearch{Complex128},arg2::Tao{Complex128})
    err = ccall((:TaoLineSearchUseTaoRoutines,petscComplexDouble),PetscErrorCode,(TaoLineSearch{Complex128},Tao{Complex128}),arg1,arg2)
    return err
end

function TaoGetLineSearch(arg1::Tao{Complex128},arg2::Union{Ptr{TaoLineSearch{Complex128}},StridedArray{TaoLineSearch{Complex128}},Ptr{TaoLineSearch{Complex128}},Ref{TaoLineSearch{Complex128}}})
    err = ccall((:TaoGetLineSearch,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Ptr{TaoLineSearch{Complex128}}),arg1,arg2)
    return err
end

function TaoSetConvergenceHistory(arg1::Tao{Complex128},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Integer,arg7::PetscBool)
    err = ccall((:TaoSetConvergenceHistory,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Int64},Int64,PetscBool),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function TaoGetConvergenceHistory(arg1::Tao{Complex128},arg2::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg3::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg4::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:TaoGetConvergenceHistory,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Ptr{Ptr{Float64}},Ptr{Ptr{Float64}},Ptr{Ptr{Float64}},Ptr{Ptr{Int64}},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function TaoSetMonitor(arg1::Tao{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoSetMonitor,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function TaoCancelMonitors(arg1::Tao{Complex128})
    err = ccall((:TaoCancelMonitors,petscComplexDouble),PetscErrorCode,(Tao{Complex128},),arg1)
    return err
end

function TaoDefaultMonitor(arg1::Tao{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoDefaultMonitor,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function TaoDefaultSMonitor(arg1::Tao{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoDefaultSMonitor,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function TaoDefaultCMonitor(arg1::Tao{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoDefaultCMonitor,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function TaoSolutionMonitor(arg1::Tao{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoSolutionMonitor,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function TaoSeparableObjectiveMonitor(arg1::Tao{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoSeparableObjectiveMonitor,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function TaoGradientMonitor(arg1::Tao{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoGradientMonitor,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function TaoStepDirectionMonitor(arg1::Tao{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoStepDirectionMonitor,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function TaoDrawSolutionMonitor(arg1::Tao{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoDrawSolutionMonitor,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function TaoDrawStepMonitor(arg1::Tao{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoDrawStepMonitor,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function TaoDrawGradientMonitor(arg1::Tao{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoDrawGradientMonitor,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function TaoAddLineSearchCounts(arg1::Tao{Complex128})
    err = ccall((:TaoAddLineSearchCounts,petscComplexDouble),PetscErrorCode,(Tao{Complex128},),arg1)
    return err
end

function TaoDefaultConvergenceTest(arg1::Tao{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoDefaultConvergenceTest,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Ptr{Void}),arg1,arg2)
    return err
end

function TaoSetConvergenceTest(arg1::Tao{Complex128},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoSetConvergenceTest,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function TaoSQPCONSetStateDesignIS(arg1::Tao{Complex128},arg2::IS{Complex128},arg3::IS{Complex128})
    err = ccall((:TaoSQPCONSetStateDesignIS,petscComplexDouble),PetscErrorCode,(Tao{Complex128},IS{Complex128},IS{Complex128}),arg1,arg2,arg3)
    return err
end

function TaoLCLSetStateDesignIS(arg1::Tao{Complex128},arg2::IS{Complex128},arg3::IS{Complex128})
    err = ccall((:TaoLCLSetStateDesignIS,petscComplexDouble),PetscErrorCode,(Tao{Complex128},IS{Complex128},IS{Complex128}),arg1,arg2,arg3)
    return err
end

function TaoMonitor(arg1::Tao{Complex128},arg2::Integer,arg3::Float64,arg4::Float64,arg5::Float64,arg6::Float64,arg7::Union{Ptr{TaoConvergedReason},StridedArray{TaoConvergedReason},Ptr{TaoConvergedReason},Ref{TaoConvergedReason}})
    err = ccall((:TaoMonitor,petscComplexDouble),PetscErrorCode,(Tao{Complex128},Int64,Float64,Float64,Float64,Float64,Ptr{TaoConvergedReason}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end
