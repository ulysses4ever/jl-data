# Julia wrapper for header: ../../deps/RealDouble/petsc-3.6.0/include/petsc.h
# Automatically generated using Clang.jl wrap_c, version 0.0.0


function PetscIsInfOrNanReal(arg0::Type{Float64},arg1::Float64)
    err = ccall((:PetscIsInfOrNanReal,petscRealDouble),PetscErrorCode,(Float64,),arg1)
    return err
end

function PetscIsNormalReal(arg0::Type{Float64},arg1::Float64)
    err = ccall((:PetscIsNormalReal,petscRealDouble),PetscBool,(Float64,),arg1)
    return err
end

function PetscSetHelpVersionFunctions(arg0::Type{Float64},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscSetHelpVersionFunctions,petscRealDouble),PetscErrorCode,(Ptr{Void},Ptr{Void}),arg1,arg2)
    return err
end

function PetscCommDuplicate(arg0::Type{Float64},arg1::MPI_Comm,arg2::Union{Ptr{MPI_Comm},StridedArray{MPI_Comm},Ptr{MPI_Comm},Ref{MPI_Comm}},arg3::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:PetscCommDuplicate,petscRealDouble),PetscErrorCode,(comm_type,Ptr{comm_type},Ptr{Cint}),arg1,arg2,arg3)
    return err
end

function PetscCommDestroy(arg0::Type{Float64},arg1::Union{Ptr{MPI_Comm},StridedArray{MPI_Comm},Ptr{MPI_Comm},Ref{MPI_Comm}})
    err = ccall((:PetscCommDestroy,petscRealDouble),PetscErrorCode,(Ptr{comm_type},),arg1)
    return err
end

function PetscMallocSet(arg0::Type{Float64},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscMallocSet,petscRealDouble),PetscErrorCode,(Ptr{Void},Ptr{Void}),arg1,arg2)
    return err
end

function PetscMallocClear(arg0::Type{Float64})
    err = ccall((:PetscMallocClear,petscRealDouble),PetscErrorCode,())
    return err
end

#= skipping function with undefined symbols: 
 function PetscMallocDump(arg0::Type{Float64},arg1::Union{Ptr{FILE},StridedArray{FILE},Ptr{FILE},Ref{FILE}})
    ccall((:PetscMallocDump,petscRealDouble),PetscErrorCode,(Ptr{FILE},),arg1)
end 
=#
#= skipping function with undefined symbols: 
 function PetscMallocDumpLog(arg0::Type{Float64},arg1::Union{Ptr{FILE},StridedArray{FILE},Ptr{FILE},Ref{FILE}})
    ccall((:PetscMallocDumpLog,petscRealDouble),PetscErrorCode,(Ptr{FILE},),arg1)
end 
=#
function PetscMallocGetCurrentUsage(arg0::Type{Float64},arg1::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscMallocGetCurrentUsage,petscRealDouble),PetscErrorCode,(Ptr{Float64},),arg1)
    return err
end

function PetscMallocGetMaximumUsage(arg0::Type{Float64},arg1::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscMallocGetMaximumUsage,petscRealDouble),PetscErrorCode,(Ptr{Float64},),arg1)
    return err
end

function PetscMallocDebug(arg0::Type{Float64},arg1::PetscBool)
    err = ccall((:PetscMallocDebug,petscRealDouble),PetscErrorCode,(PetscBool,),arg1)
    return err
end

function PetscMallocGetDebug(arg0::Type{Float64},arg1::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscMallocGetDebug,petscRealDouble),PetscErrorCode,(Ptr{PetscBool},),arg1)
    return err
end

function PetscMallocValidate(arg0::Type{Float64},arg1::Integer,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscMallocValidate,petscRealDouble),PetscErrorCode,(Cint,Cstring,Cstring),arg1,arg2,arg3)
    return err
end

function PetscMallocSetDumpLog(arg0::Type{Float64})
    err = ccall((:PetscMallocSetDumpLog,petscRealDouble),PetscErrorCode,())
    return err
end

function PetscMallocSetDumpLogThreshold(arg0::Type{Float64},arg1::Float64)
    err = ccall((:PetscMallocSetDumpLogThreshold,petscRealDouble),PetscErrorCode,(Float64,),arg1)
    return err
end

function PetscMallocGetDumpLog(arg0::Type{Float64},arg1::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscMallocGetDumpLog,petscRealDouble),PetscErrorCode,(Ptr{PetscBool},),arg1)
    return err
end

#= skipping function with undefined symbols: 
 function PetscDataTypeToMPIDataType(arg0::Type{Float64},arg1::PetscDataType,arg2::Union{Ptr{MPI_Datatype},StridedArray{MPI_Datatype},Ptr{MPI_Datatype},Ref{MPI_Datatype}})
    ccall((:PetscDataTypeToMPIDataType,petscRealDouble),PetscErrorCode,(PetscDataType,Ptr{MPI_Datatype}),arg1,arg2)
end 
=#
#= skipping function with undefined symbols: 
 function PetscMPIDataTypeToPetscDataType(arg0::Type{Float64},arg1::MPI_Datatype,arg2::Union{Ptr{PetscDataType},StridedArray{PetscDataType},Ptr{PetscDataType},Ref{PetscDataType}})
    ccall((:PetscMPIDataTypeToPetscDataType,petscRealDouble),PetscErrorCode,(MPI_Datatype,Ptr{PetscDataType}),arg1,arg2)
end 
=#
function PetscDataTypeGetSize(arg0::Type{Float64},arg1::PetscDataType,arg2::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:PetscDataTypeGetSize,petscRealDouble),PetscErrorCode,(PetscDataType,Ptr{Cint}),arg1,arg2)
    return err
end

function PetscDataTypeFromString(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{PetscDataType},StridedArray{PetscDataType},Ptr{PetscDataType},Ref{PetscDataType}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscDataTypeFromString,petscRealDouble),PetscErrorCode,(Cstring,Ptr{PetscDataType},Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function PetscBitMemcpy(arg0::Type{Float64},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg2::Integer,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Integer,arg5::Integer,arg6::PetscDataType)
    err = ccall((:PetscBitMemcpy,petscRealDouble),PetscErrorCode,(Ptr{Void},Int64,Ptr{Void},Int64,Int64,PetscDataType),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscMemmove(arg0::Type{Float64},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},size_t::Integer)
    err = ccall((:PetscMemmove,petscRealDouble),PetscErrorCode,(Ptr{Void},Ptr{Void},Cint),arg1,arg2,size_t)
    return err
end

function PetscMemcmp(arg0::Type{Float64},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},size_t::Integer,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscMemcmp,petscRealDouble),PetscErrorCode,(Ptr{Void},Ptr{Void},Cint,Ptr{PetscBool}),arg1,arg2,size_t,arg3)
    return err
end

function PetscStrlen(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:PetscStrlen,petscRealDouble),PetscErrorCode,(Cstring,Ptr{Cint}),arg1,arg2)
    return err
end

function PetscStrToArray(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::UInt8,arg3::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}},arg4::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}})
    err = ccall((:PetscStrToArray,petscRealDouble),PetscErrorCode,(Cstring,UInt8,Ptr{Cint},Ptr{Ptr{Ptr{UInt8}}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscStrToArrayDestroy(arg0::Type{Float64},arg1::Integer,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscStrToArrayDestroy,petscRealDouble),PetscErrorCode,(Cint,Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PetscStrcmp(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscStrcmp,petscRealDouble),PetscErrorCode,(Cstring,Cstring,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function PetscStrgrt(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscStrgrt,petscRealDouble),PetscErrorCode,(Cstring,Cstring,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function PetscStrcasecmp(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscStrcasecmp,petscRealDouble),PetscErrorCode,(Cstring,Cstring,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function PetscStrncmp(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscStrncmp,petscRealDouble),PetscErrorCode,(Cstring,Cstring,Cint,Ptr{PetscBool}),arg1,arg2,size_t,arg3)
    return err
end

function PetscStrcpy(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscStrcpy,petscRealDouble),PetscErrorCode,(Cstring,Cstring),arg1,arg2)
    return err
end

function PetscStrcat(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscStrcat,petscRealDouble),PetscErrorCode,(Cstring,Cstring),arg1,arg2)
    return err
end

function PetscStrncat(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer)
    err = ccall((:PetscStrncat,petscRealDouble),PetscErrorCode,(Cstring,Cstring,Cint),arg1,arg2,size_t)
    return err
end

function PetscStrncpy(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer)
    err = ccall((:PetscStrncpy,petscRealDouble),PetscErrorCode,(Cstring,Cstring,Cint),arg1,arg2,size_t)
    return err
end

function PetscStrchr(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::UInt8,arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscStrchr,petscRealDouble),PetscErrorCode,(Cstring,UInt8,Ptr{Ptr{UInt8}}),arg1,arg2,arg3)
    return err
end

function PetscStrtolower(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscStrtolower,petscRealDouble),PetscErrorCode,(Cstring,),arg1)
    return err
end

function PetscStrtoupper(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscStrtoupper,petscRealDouble),PetscErrorCode,(Cstring,),arg1)
    return err
end

function PetscStrrchr(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::UInt8,arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscStrrchr,petscRealDouble),PetscErrorCode,(Cstring,UInt8,Ptr{Ptr{UInt8}}),arg1,arg2,arg3)
    return err
end

function PetscStrstr(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscStrstr,petscRealDouble),PetscErrorCode,(Cstring,Cstring,Ptr{Ptr{UInt8}}),arg1,arg2,arg3)
    return err
end

function PetscStrrstr(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscStrrstr,petscRealDouble),PetscErrorCode,(Cstring,Cstring,Ptr{Ptr{UInt8}}),arg1,arg2,arg3)
    return err
end

function PetscStrendswith(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscStrendswith,petscRealDouble),PetscErrorCode,(Cstring,Cstring,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function PetscStrbeginswith(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscStrbeginswith,petscRealDouble),PetscErrorCode,(Cstring,Cstring,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function PetscStrendswithwhich(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscStrendswithwhich,petscRealDouble),PetscErrorCode,(Cstring,Ptr{Ptr{UInt8}},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PetscStrallocpy(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscStrallocpy,petscRealDouble),PetscErrorCode,(Cstring,Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PetscStrArrayallocpy(arg0::Type{Float64},arg1::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg2::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}})
    err = ccall((:PetscStrArrayallocpy,petscRealDouble),PetscErrorCode,(Ptr{Ptr{UInt8}},Ptr{Ptr{Ptr{UInt8}}}),arg1,arg2)
    return err
end

function PetscStrArrayDestroy(arg0::Type{Float64},arg1::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}})
    err = ccall((:PetscStrArrayDestroy,petscRealDouble),PetscErrorCode,(Ptr{Ptr{Ptr{UInt8}}},),arg1)
    return err
end

function PetscStrNArrayallocpy(arg0::Type{Float64},arg1::Integer,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg3::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}})
    err = ccall((:PetscStrNArrayallocpy,petscRealDouble),PetscErrorCode,(Int64,Ptr{Ptr{UInt8}},Ptr{Ptr{Ptr{UInt8}}}),arg1,arg2,arg3)
    return err
end

function PetscStrNArrayDestroy(arg0::Type{Float64},arg1::Integer,arg2::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}})
    err = ccall((:PetscStrNArrayDestroy,petscRealDouble),PetscErrorCode,(Int64,Ptr{Ptr{Ptr{UInt8}}}),arg1,arg2)
    return err
end

function PetscStrreplace(arg0::Type{Float64},arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer)
    err = ccall((:PetscStrreplace,petscRealDouble),PetscErrorCode,(comm_type,Cstring,Cstring,Cint),arg1,arg2,arg3,size_t)
    return err
end

function PetscStrcmpNoError(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscStrcmpNoError,petscRealDouble),Void,(Cstring,Cstring,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function PetscTokenCreate(arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::UInt8,arg3::Union{Ptr{PetscToken{Float64}},StridedArray{PetscToken{Float64}},Ptr{PetscToken{Float64}},Ref{PetscToken{Float64}}})
    err = ccall((:PetscTokenCreate,petscRealDouble),PetscErrorCode,(Cstring,UInt8,Ptr{PetscToken}),arg1,arg2,arg3)
    return err
end

function PetscTokenFind(arg1::PetscToken{Float64},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscTokenFind,petscRealDouble),PetscErrorCode,(PetscToken,Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PetscTokenDestroy(arg1::Union{Ptr{PetscToken{Float64}},StridedArray{PetscToken{Float64}},Ptr{PetscToken{Float64}},Ref{PetscToken{Float64}}})
    err = ccall((:PetscTokenDestroy,petscRealDouble),PetscErrorCode,(Ptr{PetscToken},),arg1)
    return err
end

function PetscEListFind(arg0::Type{Float64},arg1::Integer,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscEListFind,petscRealDouble),PetscErrorCode,(Int64,Ptr{Ptr{UInt8}},Cstring,Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscEnumFind(arg0::Type{Float64},arg1::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{PetscEnum},StridedArray{PetscEnum},Ptr{PetscEnum},Ref{PetscEnum}},arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscEnumFind,petscRealDouble),PetscErrorCode,(Ptr{Ptr{UInt8}},Cstring,Ptr{PetscEnum},Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function PetscMaxSum(arg0::Type{Float64},arg1::MPI_Comm,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscMaxSum,petscRealDouble),PetscErrorCode,(comm_type,Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

#= skipping function with undefined symbols: 
 function MPIULong_Send(arg0::Type{Float64},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg2::Integer,arg3::MPI_Datatype,arg4::PetscMPIInt,arg5::PetscMPIInt,arg6::MPI_Comm)
    ccall((:MPIULong_Send,petscRealDouble),PetscErrorCode,(Ptr{Void},Int64,MPI_Datatype,PetscMPIInt,PetscMPIInt,comm_type),arg1,arg2,arg3,arg4,arg5,arg6)
end 
=#
#= skipping function with undefined symbols: 
 function MPIULong_Recv(arg0::Type{Float64},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg2::Integer,arg3::MPI_Datatype,arg4::PetscMPIInt,arg5::PetscMPIInt,arg6::MPI_Comm)
    ccall((:MPIULong_Recv,petscRealDouble),PetscErrorCode,(Ptr{Void},Int64,MPI_Datatype,PetscMPIInt,PetscMPIInt,comm_type),arg1,arg2,arg3,arg4,arg5,arg6)
end 
=#
function PetscErrorPrintfInitialize(arg0::Type{Float64})
    err = ccall((:PetscErrorPrintfInitialize,petscRealDouble),PetscErrorCode,())
    return err
end

function PetscErrorMessage(arg0::Type{Float64},arg1::Integer,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscErrorMessage,petscRealDouble),PetscErrorCode,(Cint,Ptr{Ptr{UInt8}},Ptr{Ptr{UInt8}}),arg1,arg2,arg3)
    return err
end

function PetscTraceBackErrorHandler(arg0::Type{Float64},arg1::MPI_Comm,arg2::Integer,arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::PetscErrorCode,arg6::PetscErrorType,arg7::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg8::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscTraceBackErrorHandler,petscRealDouble),PetscErrorCode,(comm_type,Cint,Cstring,Cstring,PetscErrorCode,PetscErrorType,Cstring,Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function PetscIgnoreErrorHandler(arg0::Type{Float64},arg1::MPI_Comm,arg2::Integer,arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::PetscErrorCode,arg6::PetscErrorType,arg7::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg8::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscIgnoreErrorHandler,petscRealDouble),PetscErrorCode,(comm_type,Cint,Cstring,Cstring,PetscErrorCode,PetscErrorType,Cstring,Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function PetscEmacsClientErrorHandler(arg0::Type{Float64},arg1::MPI_Comm,arg2::Integer,arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::PetscErrorCode,arg6::PetscErrorType,arg7::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg8::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscEmacsClientErrorHandler,petscRealDouble),PetscErrorCode,(comm_type,Cint,Cstring,Cstring,PetscErrorCode,PetscErrorType,Cstring,Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function PetscMPIAbortErrorHandler(arg0::Type{Float64},arg1::MPI_Comm,arg2::Integer,arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::PetscErrorCode,arg6::PetscErrorType,arg7::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg8::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscMPIAbortErrorHandler,petscRealDouble),PetscErrorCode,(comm_type,Cint,Cstring,Cstring,PetscErrorCode,PetscErrorType,Cstring,Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function PetscAbortErrorHandler(arg0::Type{Float64},arg1::MPI_Comm,arg2::Integer,arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::PetscErrorCode,arg6::PetscErrorType,arg7::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg8::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscAbortErrorHandler,petscRealDouble),PetscErrorCode,(comm_type,Cint,Cstring,Cstring,PetscErrorCode,PetscErrorType,Cstring,Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function PetscAttachDebuggerErrorHandler(arg0::Type{Float64},arg1::MPI_Comm,arg2::Integer,arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::PetscErrorCode,arg6::PetscErrorType,arg7::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg8::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscAttachDebuggerErrorHandler,petscRealDouble),PetscErrorCode,(comm_type,Cint,Cstring,Cstring,PetscErrorCode,PetscErrorType,Cstring,Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function PetscReturnErrorHandler(arg0::Type{Float64},arg1::MPI_Comm,arg2::Integer,arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::PetscErrorCode,arg6::PetscErrorType,arg7::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg8::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscReturnErrorHandler,petscRealDouble),PetscErrorCode,(comm_type,Cint,Cstring,Cstring,PetscErrorCode,PetscErrorType,Cstring,Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function PetscPushErrorHandler(arg0::Type{Float64},handler::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscPushErrorHandler,petscRealDouble),PetscErrorCode,(Ptr{Void},Ptr{Void}),handler,arg1)
    return err
end

function PetscPopErrorHandler(arg0::Type{Float64})
    err = ccall((:PetscPopErrorHandler,petscRealDouble),PetscErrorCode,())
    return err
end

function PetscSignalHandlerDefault(arg0::Type{Float64},arg1::Integer,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscSignalHandlerDefault,petscRealDouble),PetscErrorCode,(Cint,Ptr{Void}),arg1,arg2)
    return err
end

function PetscPushSignalHandler(arg0::Type{Float64},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscPushSignalHandler,petscRealDouble),PetscErrorCode,(Ptr{Void},Ptr{Void}),arg1,arg2)
    return err
end

function PetscPopSignalHandler(arg0::Type{Float64})
    err = ccall((:PetscPopSignalHandler,petscRealDouble),PetscErrorCode,())
    return err
end

function PetscCheckPointerSetIntensity(arg0::Type{Float64},arg1::Integer)
    err = ccall((:PetscCheckPointerSetIntensity,petscRealDouble),PetscErrorCode,(Int64,),arg1)
    return err
end

function PetscSetFPTrap(arg0::Type{Float64},arg1::PetscFPTrap)
    err = ccall((:PetscSetFPTrap,petscRealDouble),PetscErrorCode,(PetscFPTrap,),arg1)
    return err
end

function PetscFPTrapPush(arg0::Type{Float64},arg1::PetscFPTrap)
    err = ccall((:PetscFPTrapPush,petscRealDouble),PetscErrorCode,(PetscFPTrap,),arg1)
    return err
end

function PetscFPTrapPop(arg0::Type{Float64})
    err = ccall((:PetscFPTrapPop,petscRealDouble),PetscErrorCode,())
    return err
end

function PetscStackCopy(arg0::Type{Float64},arg1::Union{Ptr{PetscStack},StridedArray{PetscStack},Ptr{PetscStack},Ref{PetscStack}},arg2::Union{Ptr{PetscStack},StridedArray{PetscStack},Ptr{PetscStack},Ref{PetscStack}})
    err = ccall((:PetscStackCopy,petscRealDouble),PetscErrorCode,(Ptr{PetscStack},Ptr{PetscStack}),arg1,arg2)
    return err
end

#= skipping function with undefined symbols: 
 function PetscStackPrint(arg0::Type{Float64},arg1::Union{Ptr{PetscStack},StridedArray{PetscStack},Ptr{PetscStack},Ref{PetscStack}},arg2::Union{Ptr{FILE},StridedArray{FILE},Ptr{FILE},Ref{FILE}})
    ccall((:PetscStackPrint,petscRealDouble),PetscErrorCode,(Ptr{PetscStack},Ptr{FILE}),arg1,arg2)
end 
=#
#= skipping function with undefined symbols: 
 function PetscStackView(arg0::Type{Float64},arg1::Union{Ptr{FILE},StridedArray{FILE},Ptr{FILE},Ref{FILE}})
    ccall((:PetscStackView,petscRealDouble),PetscErrorCode,(Ptr{FILE},),arg1)
end 
=#
function PetscStackDestroy(arg0::Type{Float64})
    err = ccall((:PetscStackDestroy,petscRealDouble),PetscErrorCode,())
    return err
end

function PetscClassIdRegister(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{PetscClassId},StridedArray{PetscClassId},Ptr{PetscClassId},Ref{PetscClassId}})
    err = ccall((:PetscClassIdRegister,petscRealDouble),PetscErrorCode,(Cstring,Ptr{PetscClassId}),arg1,arg2)
    return err
end

function PetscMemoryGetCurrentUsage(arg0::Type{Float64},arg1::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscMemoryGetCurrentUsage,petscRealDouble),PetscErrorCode,(Ptr{Float64},),arg1)
    return err
end

function PetscMemoryGetMaximumUsage(arg0::Type{Float64},arg1::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscMemoryGetMaximumUsage,petscRealDouble),PetscErrorCode,(Ptr{Float64},),arg1)
    return err
end

function PetscMemorySetGetMaximumUsage(arg0::Type{Float64})
    err = ccall((:PetscMemorySetGetMaximumUsage,petscRealDouble),PetscErrorCode,())
    return err
end

function PetscMemoryTrace(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscMemoryTrace,petscRealDouble),PetscErrorCode,(Cstring,),arg1)
    return err
end

function PetscInfoAllow(arg0::Type{Float64},arg1::PetscBool,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscInfoAllow,petscRealDouble),PetscErrorCode,(PetscBool,Cstring),arg1,arg2)
    return err
end

function PetscSleep(arg0::Type{Float64},arg1::Float64)
    err = ccall((:PetscSleep,petscRealDouble),PetscErrorCode,(Float64,),arg1)
    return err
end

function PetscInitialize(arg0::Type{Float64},arg1::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}},arg2::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscInitialize,petscRealDouble),PetscErrorCode,(Ptr{Cint},Ptr{Ptr{Ptr{UInt8}}},Cstring,Cstring),arg1,arg2,arg3,arg4)
    return err
end

function PetscInitializeNoPointers(arg0::Type{Float64},arg1::Integer,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscInitializeNoPointers,petscRealDouble),PetscErrorCode,(Cint,Ptr{Ptr{UInt8}},Cstring,Cstring),arg1,arg2,arg3,arg4)
    return err
end

function PetscInitializeNoArguments(arg0::Type{Float64})
    err = ccall((:PetscInitializeNoArguments,petscRealDouble),PetscErrorCode,())
    return err
end

function PetscInitialized(arg0::Type{Float64},arg1::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscInitialized,petscRealDouble),PetscErrorCode,(Ptr{PetscBool},),arg1)
    return err
end

function PetscFinalized(arg0::Type{Float64},arg1::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscFinalized,petscRealDouble),PetscErrorCode,(Ptr{PetscBool},),arg1)
    return err
end

function PetscFinalize(arg0::Type{Float64})
    err = ccall((:PetscFinalize,petscRealDouble),PetscErrorCode,())
    return err
end

function PetscInitializeFortran(arg0::Type{Float64})
    err = ccall((:PetscInitializeFortran,petscRealDouble),PetscErrorCode,())
    return err
end

function PetscGetArgs(arg0::Type{Float64},arg1::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}},arg2::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}})
    err = ccall((:PetscGetArgs,petscRealDouble),PetscErrorCode,(Ptr{Cint},Ptr{Ptr{Ptr{UInt8}}}),arg1,arg2)
    return err
end

function PetscGetArguments(arg0::Type{Float64},arg1::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}})
    err = ccall((:PetscGetArguments,petscRealDouble),PetscErrorCode,(Ptr{Ptr{Ptr{UInt8}}},),arg1)
    return err
end

function PetscFreeArguments(arg0::Type{Float64},arg1::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscFreeArguments,petscRealDouble),PetscErrorCode,(Ptr{Ptr{UInt8}},),arg1)
    return err
end

function PetscEnd(arg0::Type{Float64})
    err = ccall((:PetscEnd,petscRealDouble),PetscErrorCode,())
    return err
end

function PetscSysInitializePackage(arg0::Type{Float64})
    err = ccall((:PetscSysInitializePackage,petscRealDouble),PetscErrorCode,())
    return err
end

function PetscPythonInitialize(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscPythonInitialize,petscRealDouble),PetscErrorCode,(Cstring,Cstring),arg1,arg2)
    return err
end

function PetscPythonFinalize(arg0::Type{Float64})
    err = ccall((:PetscPythonFinalize,petscRealDouble),PetscErrorCode,())
    return err
end

function PetscPythonPrintError(arg0::Type{Float64})
    err = ccall((:PetscPythonPrintError,petscRealDouble),PetscErrorCode,())
    return err
end

function PetscPythonMonitorSet(arg1::PetscObject{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscPythonMonitorSet,petscRealDouble),PetscErrorCode,(PetscObject{Float64},Cstring),arg1,arg2)
    return err
end

function PetscObjectDestroy(arg1::Union{Ptr{PetscObject{Float64}},StridedArray{PetscObject{Float64}},Ptr{PetscObject{Float64}},Ref{PetscObject{Float64}}})
    err = ccall((:PetscObjectDestroy,petscRealDouble),PetscErrorCode,(Ptr{PetscObject{Float64}},),arg1)
    return err
end

function PetscObjectGetComm(arg1::PetscObject{Float64},arg2::Union{Ptr{MPI_Comm},StridedArray{MPI_Comm},Ptr{MPI_Comm},Ref{MPI_Comm}})
    err = ccall((:PetscObjectGetComm,petscRealDouble),PetscErrorCode,(PetscObject{Float64},Ptr{comm_type}),arg1,arg2)
    return err
end

function PetscObjectGetClassId(arg1::PetscObject{Float64},arg2::Union{Ptr{PetscClassId},StridedArray{PetscClassId},Ptr{PetscClassId},Ref{PetscClassId}})
    err = ccall((:PetscObjectGetClassId,petscRealDouble),PetscErrorCode,(PetscObject{Float64},Ptr{PetscClassId}),arg1,arg2)
    return err
end

function PetscObjectGetClassName(arg1::PetscObject{Float64},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscObjectGetClassName,petscRealDouble),PetscErrorCode,(PetscObject{Float64},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PetscObjectSetType(arg1::PetscObject{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscObjectSetType,petscRealDouble),PetscErrorCode,(PetscObject{Float64},Cstring),arg1,arg2)
    return err
end

function PetscObjectSetPrecision(arg1::PetscObject{Float64},arg2::PetscPrecision)
    err = ccall((:PetscObjectSetPrecision,petscRealDouble),PetscErrorCode,(PetscObject{Float64},PetscPrecision),arg1,arg2)
    return err
end

function PetscObjectGetType(arg1::PetscObject{Float64},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscObjectGetType,petscRealDouble),PetscErrorCode,(PetscObject{Float64},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PetscObjectSetName(arg1::PetscObject{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscObjectSetName,petscRealDouble),PetscErrorCode,(PetscObject{Float64},Cstring),arg1,arg2)
    return err
end

function PetscObjectGetName(arg1::PetscObject{Float64},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscObjectGetName,petscRealDouble),PetscErrorCode,(PetscObject{Float64},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PetscObjectSetTabLevel(arg1::PetscObject{Float64},arg2::Integer)
    err = ccall((:PetscObjectSetTabLevel,petscRealDouble),PetscErrorCode,(PetscObject{Float64},Int64),arg1,arg2)
    return err
end

function PetscObjectGetTabLevel(arg1::PetscObject{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscObjectGetTabLevel,petscRealDouble),PetscErrorCode,(PetscObject{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscObjectIncrementTabLevel(arg1::PetscObject{Float64},arg2::PetscObject{Float64},arg3::Integer)
    err = ccall((:PetscObjectIncrementTabLevel,petscRealDouble),PetscErrorCode,(PetscObject{Float64},PetscObject{Float64},Int64),arg1,arg2,arg3)
    return err
end

function PetscObjectReference(arg1::PetscObject{Float64})
    err = ccall((:PetscObjectReference,petscRealDouble),PetscErrorCode,(PetscObject{Float64},),arg1)
    return err
end

function PetscObjectGetReference(arg1::PetscObject{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscObjectGetReference,petscRealDouble),PetscErrorCode,(PetscObject{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscObjectDereference(arg1::PetscObject{Float64})
    err = ccall((:PetscObjectDereference,petscRealDouble),PetscErrorCode,(PetscObject{Float64},),arg1)
    return err
end

function PetscObjectGetNewTag(arg1::PetscObject{Float64},arg2::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}})
    err = ccall((:PetscObjectGetNewTag,petscRealDouble),PetscErrorCode,(PetscObject{Float64},Ptr{PetscMPIInt}),arg1,arg2)
    return err
end

function PetscObjectCompose(arg1::PetscObject{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::PetscObject{Float64})
    err = ccall((:PetscObjectCompose,petscRealDouble),PetscErrorCode,(PetscObject{Float64},Cstring,PetscObject{Float64}),arg1,arg2,arg3)
    return err
end

function PetscObjectRemoveReference(arg1::PetscObject{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscObjectRemoveReference,petscRealDouble),PetscErrorCode,(PetscObject{Float64},Cstring),arg1,arg2)
    return err
end

function PetscObjectQuery(arg1::PetscObject{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{PetscObject{Float64}},StridedArray{PetscObject{Float64}},Ptr{PetscObject{Float64}},Ref{PetscObject{Float64}}})
    err = ccall((:PetscObjectQuery,petscRealDouble),PetscErrorCode,(PetscObject{Float64},Cstring,Ptr{PetscObject{Float64}}),arg1,arg2,arg3)
    return err
end

function PetscObjectComposeFunction_Private(arg1::PetscObject{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscObjectComposeFunction_Private,petscRealDouble),PetscErrorCode,(PetscObject{Float64},Cstring,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function PetscObjectSetFromOptions(arg1::PetscObject{Float64})
    err = ccall((:PetscObjectSetFromOptions,petscRealDouble),PetscErrorCode,(PetscObject{Float64},),arg1)
    return err
end

function PetscObjectSetUp(arg1::PetscObject{Float64})
    err = ccall((:PetscObjectSetUp,petscRealDouble),PetscErrorCode,(PetscObject{Float64},),arg1)
    return err
end

function PetscCommGetNewTag(arg0::Type{Float64},arg1::MPI_Comm,arg2::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}})
    err = ccall((:PetscCommGetNewTag,petscRealDouble),PetscErrorCode,(comm_type,Ptr{PetscMPIInt}),arg1,arg2)
    return err
end

function PetscObjectAddOptionsHandler(arg1::PetscObject{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscObjectAddOptionsHandler,petscRealDouble),PetscErrorCode,(PetscObject{Float64},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function PetscObjectProcessOptionsHandlers(arg1::PetscObject{Float64})
    err = ccall((:PetscObjectProcessOptionsHandlers,petscRealDouble),PetscErrorCode,(PetscObject{Float64},),arg1)
    return err
end

function PetscObjectDestroyOptionsHandlers(arg1::PetscObject{Float64})
    err = ccall((:PetscObjectDestroyOptionsHandlers,petscRealDouble),PetscErrorCode,(PetscObject{Float64},),arg1)
    return err
end

function PetscObjectsListGetGlobalNumbering(arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{PetscObject{Float64}},StridedArray{PetscObject{Float64}},Ptr{PetscObject{Float64}},Ref{PetscObject{Float64}}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscObjectsListGetGlobalNumbering,petscRealDouble),PetscErrorCode,(comm_type,Int64,Ptr{PetscObject{Float64}},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscOptionsHasName(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsHasName,petscRealDouble),PetscErrorCode,(Cstring,Cstring,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function PetscOptionsGetInt(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetInt,petscRealDouble),PetscErrorCode,(Cstring,Cstring,Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function PetscOptionsGetBool(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetBool,petscRealDouble),PetscErrorCode,(Cstring,Cstring,Ptr{PetscBool},Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function PetscOptionsGetReal(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetReal,petscRealDouble),PetscErrorCode,(Cstring,Cstring,Ptr{Float64},Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function PetscOptionsGetScalar(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetScalar,petscRealDouble),PetscErrorCode,(Cstring,Cstring,Ptr{Float64},Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function PetscOptionsGetIntArray(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetIntArray,petscRealDouble),PetscErrorCode,(Cstring,Cstring,Ptr{Int64},Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscOptionsGetRealArray(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetRealArray,petscRealDouble),PetscErrorCode,(Cstring,Cstring,Ptr{Float64},Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscOptionsGetScalarArray(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetScalarArray,petscRealDouble),PetscErrorCode,(Cstring,Cstring,Ptr{Float64},Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscOptionsGetBoolArray(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetBoolArray,petscRealDouble),PetscErrorCode,(Cstring,Cstring,Ptr{PetscBool},Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscOptionsGetString(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer,arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetString,petscRealDouble),PetscErrorCode,(Cstring,Cstring,Cstring,Cint,Ptr{PetscBool}),arg1,arg2,arg3,size_t,arg4)
    return err
end

function PetscOptionsGetStringArray(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetStringArray,petscRealDouble),PetscErrorCode,(Cstring,Cstring,Ptr{Ptr{UInt8}},Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscOptionsGetEList(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetEList,petscRealDouble),PetscErrorCode,(Cstring,Cstring,Ptr{Ptr{UInt8}},Int64,Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscOptionsGetEnum(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg4::Union{Ptr{PetscEnum},StridedArray{PetscEnum},Ptr{PetscEnum},Ref{PetscEnum}},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetEnum,petscRealDouble),PetscErrorCode,(Cstring,Cstring,Ptr{Ptr{UInt8}},Ptr{PetscEnum},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscOptionsGetEnumArray(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg4::Union{Ptr{PetscEnum},StridedArray{PetscEnum},Ptr{PetscEnum},Ref{PetscEnum}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetEnumArray,petscRealDouble),PetscErrorCode,(Cstring,Cstring,Ptr{Ptr{UInt8}},Ptr{PetscEnum},Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscOptionsValidKey(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsValidKey,petscRealDouble),PetscErrorCode,(Cstring,Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscOptionsSetAlias(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscOptionsSetAlias,petscRealDouble),PetscErrorCode,(Cstring,Cstring),arg1,arg2)
    return err
end

function PetscOptionsSetValue(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscOptionsSetValue,petscRealDouble),PetscErrorCode,(Cstring,Cstring),arg1,arg2)
    return err
end

function PetscOptionsClearValue(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscOptionsClearValue,petscRealDouble),PetscErrorCode,(Cstring,),arg1)
    return err
end

function PetscOptionsAllUsed(arg0::Type{Float64},arg1::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscOptionsAllUsed,petscRealDouble),PetscErrorCode,(Ptr{Int64},),arg1)
    return err
end

function PetscOptionsUsed(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsUsed,petscRealDouble),PetscErrorCode,(Cstring,Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscOptionsLeft(arg0::Type{Float64})
    err = ccall((:PetscOptionsLeft,petscRealDouble),PetscErrorCode,())
    return err
end

function PetscOptionsView(arg1::PetscViewer{Float64})
    err = ccall((:PetscOptionsView,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},),arg1)
    return err
end

function PetscOptionsCreate(arg0::Type{Float64})
    err = ccall((:PetscOptionsCreate,petscRealDouble),PetscErrorCode,())
    return err
end

function PetscOptionsInsert(arg0::Type{Float64},arg1::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}},arg2::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscOptionsInsert,petscRealDouble),PetscErrorCode,(Ptr{Cint},Ptr{Ptr{Ptr{UInt8}}},Cstring),arg1,arg2,arg3)
    return err
end

function PetscOptionsInsertFile(arg0::Type{Float64},arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::PetscBool)
    err = ccall((:PetscOptionsInsertFile,petscRealDouble),PetscErrorCode,(comm_type,Cstring,PetscBool),arg1,arg2,arg3)
    return err
end

function PetscOptionsInsertString(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscOptionsInsertString,petscRealDouble),PetscErrorCode,(Cstring,),arg1)
    return err
end

function PetscOptionsDestroy(arg0::Type{Float64})
    err = ccall((:PetscOptionsDestroy,petscRealDouble),PetscErrorCode,())
    return err
end

function PetscOptionsClear(arg0::Type{Float64})
    err = ccall((:PetscOptionsClear,petscRealDouble),PetscErrorCode,())
    return err
end

function PetscOptionsPrefixPush(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscOptionsPrefixPush,petscRealDouble),PetscErrorCode,(Cstring,),arg1)
    return err
end

function PetscOptionsPrefixPop(arg0::Type{Float64})
    err = ccall((:PetscOptionsPrefixPop,petscRealDouble),PetscErrorCode,())
    return err
end

function PetscOptionsReject(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscOptionsReject,petscRealDouble),PetscErrorCode,(Cstring,Cstring),arg1,arg2)
    return err
end

function PetscOptionsGetAll(arg0::Type{Float64},arg1::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscOptionsGetAll,petscRealDouble),PetscErrorCode,(Ptr{Ptr{UInt8}},),arg1)
    return err
end

function PetscOptionsGetenv(arg0::Type{Float64},arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer,arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetenv,petscRealDouble),PetscErrorCode,(comm_type,Cstring,Cstring,Cint,Ptr{PetscBool}),arg1,arg2,arg3,size_t,arg4)
    return err
end

function PetscOptionsStringToInt(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscOptionsStringToInt,petscRealDouble),PetscErrorCode,(Cstring,Ptr{Int64}),arg1,arg2)
    return err
end

function PetscOptionsStringToReal(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscOptionsStringToReal,petscRealDouble),PetscErrorCode,(Cstring,Ptr{Float64}),arg1,arg2)
    return err
end

function PetscOptionsStringToBool(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsStringToBool,petscRealDouble),PetscErrorCode,(Cstring,Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscOptionsMonitorSet(arg0::Type{Float64},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscOptionsMonitorSet,petscRealDouble),PetscErrorCode,(Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function PetscOptionsMonitorCancel(arg0::Type{Float64})
    err = ccall((:PetscOptionsMonitorCancel,petscRealDouble),PetscErrorCode,())
    return err
end

function PetscOptionsMonitorDefault(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscOptionsMonitorDefault,petscRealDouble),PetscErrorCode,(Cstring,Cstring,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function PetscOptionsBegin_Private(arg1::Union{Ptr{PetscOptions{Float64}},StridedArray{PetscOptions{Float64}},Ptr{PetscOptions{Float64}},Ref{PetscOptions{Float64}}},arg2::MPI_Comm,arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscOptionsBegin_Private,petscRealDouble),PetscErrorCode,(Ptr{PetscOptions{Float64}},comm_type,Cstring,Cstring,Cstring),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscObjectOptionsBegin_Private(arg1::Union{Ptr{PetscOptions{Float64}},StridedArray{PetscOptions{Float64}},Ptr{PetscOptions{Float64}},Ref{PetscOptions{Float64}}},arg2::PetscObject{Float64})
    err = ccall((:PetscObjectOptionsBegin_Private,petscRealDouble),PetscErrorCode,(Ptr{PetscOptions{Float64}},PetscObject{Float64}),arg1,arg2)
    return err
end

function PetscOptionsEnd_Private(arg1::Union{Ptr{PetscOptions{Float64}},StridedArray{PetscOptions{Float64}},Ptr{PetscOptions{Float64}},Ref{PetscOptions{Float64}}})
    err = ccall((:PetscOptionsEnd_Private,petscRealDouble),PetscErrorCode,(Ptr{PetscOptions{Float64}},),arg1)
    return err
end

function PetscOptionsHead(arg1::Union{Ptr{PetscOptions{Float64}},StridedArray{PetscOptions{Float64}},Ptr{PetscOptions{Float64}},Ref{PetscOptions{Float64}}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscOptionsHead,petscRealDouble),PetscErrorCode,(Ptr{PetscOptions{Float64}},Cstring),arg1,arg2)
    return err
end

function PetscOptionsEnum_Private(arg1::Union{Ptr{PetscOptions{Float64}},StridedArray{PetscOptions{Float64}},Ptr{PetscOptions{Float64}},Ref{PetscOptions{Float64}}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg6::PetscEnum,arg7::Union{Ptr{PetscEnum},StridedArray{PetscEnum},Ptr{PetscEnum},Ref{PetscEnum}},arg8::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsEnum_Private,petscRealDouble),PetscErrorCode,(Ptr{PetscOptions{Float64}},Cstring,Cstring,Cstring,Ptr{Ptr{UInt8}},PetscEnum,Ptr{PetscEnum},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function PetscOptionsInt_Private(arg1::Union{Ptr{PetscOptions{Float64}},StridedArray{PetscOptions{Float64}},Ptr{PetscOptions{Float64}},Ref{PetscOptions{Float64}}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsInt_Private,petscRealDouble),PetscErrorCode,(Ptr{PetscOptions{Float64}},Cstring,Cstring,Cstring,Int64,Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function PetscOptionsReal_Private(arg1::Union{Ptr{PetscOptions{Float64}},StridedArray{PetscOptions{Float64}},Ptr{PetscOptions{Float64}},Ref{PetscOptions{Float64}}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Float64,arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg7::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsReal_Private,petscRealDouble),PetscErrorCode,(Ptr{PetscOptions{Float64}},Cstring,Cstring,Cstring,Float64,Ptr{Float64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function PetscOptionsScalar_Private(arg1::Union{Ptr{PetscOptions{Float64}},StridedArray{PetscOptions{Float64}},Ptr{PetscOptions{Float64}},Ref{PetscOptions{Float64}}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Float64,arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg7::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsScalar_Private,petscRealDouble),PetscErrorCode,(Ptr{PetscOptions{Float64}},Cstring,Cstring,Cstring,Float64,Ptr{Float64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function PetscOptionsName_Private(arg1::Union{Ptr{PetscOptions{Float64}},StridedArray{PetscOptions{Float64}},Ptr{PetscOptions{Float64}},Ref{PetscOptions{Float64}}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsName_Private,petscRealDouble),PetscErrorCode,(Ptr{PetscOptions{Float64}},Cstring,Cstring,Cstring,Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscOptionsString_Private(arg1::Union{Ptr{PetscOptions{Float64}},StridedArray{PetscOptions{Float64}},Ptr{PetscOptions{Float64}},Ref{PetscOptions{Float64}}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg6::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer,arg7::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsString_Private,petscRealDouble),PetscErrorCode,(Ptr{PetscOptions{Float64}},Cstring,Cstring,Cstring,Cstring,Cstring,Cint,Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,size_t,arg7)
    return err
end

function PetscOptionsBool_Private(arg1::Union{Ptr{PetscOptions{Float64}},StridedArray{PetscOptions{Float64}},Ptr{PetscOptions{Float64}},Ref{PetscOptions{Float64}}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::PetscBool,arg6::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg7::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsBool_Private,petscRealDouble),PetscErrorCode,(Ptr{PetscOptions{Float64}},Cstring,Cstring,Cstring,PetscBool,Ptr{PetscBool},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function PetscOptionsBoolGroupBegin_Private(arg1::Union{Ptr{PetscOptions{Float64}},StridedArray{PetscOptions{Float64}},Ptr{PetscOptions{Float64}},Ref{PetscOptions{Float64}}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsBoolGroupBegin_Private,petscRealDouble),PetscErrorCode,(Ptr{PetscOptions{Float64}},Cstring,Cstring,Cstring,Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscOptionsBoolGroup_Private(arg1::Union{Ptr{PetscOptions{Float64}},StridedArray{PetscOptions{Float64}},Ptr{PetscOptions{Float64}},Ref{PetscOptions{Float64}}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsBoolGroup_Private,petscRealDouble),PetscErrorCode,(Ptr{PetscOptions{Float64}},Cstring,Cstring,Cstring,Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscOptionsBoolGroupEnd_Private(arg1::Union{Ptr{PetscOptions{Float64}},StridedArray{PetscOptions{Float64}},Ptr{PetscOptions{Float64}},Ref{PetscOptions{Float64}}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsBoolGroupEnd_Private,petscRealDouble),PetscErrorCode,(Ptr{PetscOptions{Float64}},Cstring,Cstring,Cstring,Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscOptionsFList_Private(arg1::Union{Ptr{PetscOptions{Float64}},StridedArray{PetscOptions{Float64}},Ptr{PetscOptions{Float64}},Ref{PetscOptions{Float64}}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::PetscFunctionList{Float64},arg6::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg7::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer,arg8::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsFList_Private,petscRealDouble),PetscErrorCode,(Ptr{PetscOptions{Float64}},Cstring,Cstring,Cstring,PetscFunctionList,Cstring,Cstring,Cint,Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,size_t,arg8)
    return err
end

function PetscOptionsEList_Private(arg1::Union{Ptr{PetscOptions{Float64}},StridedArray{PetscOptions{Float64}},Ptr{PetscOptions{Float64}},Ref{PetscOptions{Float64}}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg6::Integer,arg7::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg8::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg9::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsEList_Private,petscRealDouble),PetscErrorCode,(Ptr{PetscOptions{Float64}},Cstring,Cstring,Cstring,Ptr{Ptr{UInt8}},Int64,Cstring,Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
    return err
end

function PetscOptionsRealArray_Private(arg1::Union{Ptr{PetscOptions{Float64}},StridedArray{PetscOptions{Float64}},Ptr{PetscOptions{Float64}},Ref{PetscOptions{Float64}}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsRealArray_Private,petscRealDouble),PetscErrorCode,(Ptr{PetscOptions{Float64}},Cstring,Cstring,Cstring,Ptr{Float64},Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function PetscOptionsScalarArray_Private(arg1::Union{Ptr{PetscOptions{Float64}},StridedArray{PetscOptions{Float64}},Ptr{PetscOptions{Float64}},Ref{PetscOptions{Float64}}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsScalarArray_Private,petscRealDouble),PetscErrorCode,(Ptr{PetscOptions{Float64}},Cstring,Cstring,Cstring,Ptr{Float64},Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function PetscOptionsIntArray_Private(arg1::Union{Ptr{PetscOptions{Float64}},StridedArray{PetscOptions{Float64}},Ptr{PetscOptions{Float64}},Ref{PetscOptions{Float64}}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsIntArray_Private,petscRealDouble),PetscErrorCode,(Ptr{PetscOptions{Float64}},Cstring,Cstring,Cstring,Ptr{Int64},Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function PetscOptionsStringArray_Private(arg1::Union{Ptr{PetscOptions{Float64}},StridedArray{PetscOptions{Float64}},Ptr{PetscOptions{Float64}},Ref{PetscOptions{Float64}}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsStringArray_Private,petscRealDouble),PetscErrorCode,(Ptr{PetscOptions{Float64}},Cstring,Cstring,Cstring,Ptr{Ptr{UInt8}},Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function PetscOptionsBoolArray_Private(arg1::Union{Ptr{PetscOptions{Float64}},StridedArray{PetscOptions{Float64}},Ptr{PetscOptions{Float64}},Ref{PetscOptions{Float64}}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsBoolArray_Private,petscRealDouble),PetscErrorCode,(Ptr{PetscOptions{Float64}},Cstring,Cstring,Cstring,Ptr{PetscBool},Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function PetscOptionsEnumArray_Private(arg1::Union{Ptr{PetscOptions{Float64}},StridedArray{PetscOptions{Float64}},Ptr{PetscOptions{Float64}},Ref{PetscOptions{Float64}}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg6::Union{Ptr{PetscEnum},StridedArray{PetscEnum},Ptr{PetscEnum},Ref{PetscEnum}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsEnumArray_Private,petscRealDouble),PetscErrorCode,(Ptr{PetscOptions{Float64}},Cstring,Cstring,Cstring,Ptr{Ptr{UInt8}},Ptr{PetscEnum},Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function PetscOptionsSetFromOptions(arg0::Type{Float64})
    err = ccall((:PetscOptionsSetFromOptions,petscRealDouble),PetscErrorCode,())
    return err
end

function PetscOptionsSAWsDestroy(arg0::Type{Float64})
    err = ccall((:PetscOptionsSAWsDestroy,petscRealDouble),PetscErrorCode,())
    return err
end

function PetscMemoryShowUsage(arg1::PetscViewer{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscMemoryShowUsage,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Cstring),arg1,arg2)
    return err
end

function PetscObjectPrintClassNamePrefixType(arg1::PetscObject{Float64},arg2::PetscViewer{Float64})
    err = ccall((:PetscObjectPrintClassNamePrefixType,petscRealDouble),PetscErrorCode,(PetscObject{Float64},PetscViewer{Float64}),arg1,arg2)
    return err
end

function PetscObjectView(arg1::PetscObject{Float64},arg2::PetscViewer{Float64})
    err = ccall((:PetscObjectView,petscRealDouble),PetscErrorCode,(PetscObject{Float64},PetscViewer{Float64}),arg1,arg2)
    return err
end

function PetscObjectQueryFunction_Private(arg1::PetscObject{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:PetscObjectQueryFunction_Private,petscRealDouble),PetscErrorCode,(PetscObject{Float64},Cstring,Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function PetscObjectSetOptionsPrefix(arg1::PetscObject{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscObjectSetOptionsPrefix,petscRealDouble),PetscErrorCode,(PetscObject{Float64},Cstring),arg1,arg2)
    return err
end

function PetscObjectAppendOptionsPrefix(arg1::PetscObject{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscObjectAppendOptionsPrefix,petscRealDouble),PetscErrorCode,(PetscObject{Float64},Cstring),arg1,arg2)
    return err
end

function PetscObjectPrependOptionsPrefix(arg1::PetscObject{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscObjectPrependOptionsPrefix,petscRealDouble),PetscErrorCode,(PetscObject{Float64},Cstring),arg1,arg2)
    return err
end

function PetscObjectGetOptionsPrefix(arg1::PetscObject{Float64},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscObjectGetOptionsPrefix,petscRealDouble),PetscErrorCode,(PetscObject{Float64},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PetscObjectChangeTypeName(arg1::PetscObject{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscObjectChangeTypeName,petscRealDouble),PetscErrorCode,(PetscObject{Float64},Cstring),arg1,arg2)
    return err
end

function PetscObjectRegisterDestroy(arg1::PetscObject{Float64})
    err = ccall((:PetscObjectRegisterDestroy,petscRealDouble),PetscErrorCode,(PetscObject{Float64},),arg1)
    return err
end

function PetscObjectRegisterDestroyAll(arg0::Type{Float64})
    err = ccall((:PetscObjectRegisterDestroyAll,petscRealDouble),PetscErrorCode,())
    return err
end

function PetscObjectViewFromOptions(arg1::PetscObject{Float64},arg2::PetscObject{Float64},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscObjectViewFromOptions,petscRealDouble),PetscErrorCode,(PetscObject{Float64},PetscObject{Float64},Cstring),arg1,arg2,arg3)
    return err
end

function PetscObjectName(arg1::PetscObject{Float64})
    err = ccall((:PetscObjectName,petscRealDouble),PetscErrorCode,(PetscObject{Float64},),arg1)
    return err
end

function PetscObjectTypeCompare(arg1::PetscObject{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscObjectTypeCompare,petscRealDouble),PetscErrorCode,(PetscObject{Float64},Cstring,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function PetscRegisterFinalize(arg0::Type{Float64},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscRegisterFinalize,petscRealDouble),PetscErrorCode,(Ptr{Void},),arg1)
    return err
end

function PetscRegisterFinalizeAll(arg0::Type{Float64})
    err = ccall((:PetscRegisterFinalizeAll,petscRealDouble),PetscErrorCode,())
    return err
end

function PetscDLOpen(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::PetscDLMode,arg3::Union{Ptr{PetscDLHandle},StridedArray{PetscDLHandle},Ptr{PetscDLHandle},Ref{PetscDLHandle}})
    err = ccall((:PetscDLOpen,petscRealDouble),PetscErrorCode,(Cstring,PetscDLMode,Ptr{PetscDLHandle}),arg1,arg2,arg3)
    return err
end

function PetscDLClose(arg0::Type{Float64},arg1::Union{Ptr{PetscDLHandle},StridedArray{PetscDLHandle},Ptr{PetscDLHandle},Ref{PetscDLHandle}})
    err = ccall((:PetscDLClose,petscRealDouble),PetscErrorCode,(Ptr{PetscDLHandle},),arg1)
    return err
end

function PetscDLSym(arg0::Type{Float64},arg1::PetscDLHandle,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:PetscDLSym,petscRealDouble),PetscErrorCode,(PetscDLHandle,Cstring,Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

#= skipping function with undefined symbols: 
 function PetscObjectsDump(arg0::Type{Float64},arg1::Union{Ptr{FILE},StridedArray{FILE},Ptr{FILE},Ref{FILE}},arg2::PetscBool)
    ccall((:PetscObjectsDump,petscRealDouble),PetscErrorCode,(Ptr{FILE},PetscBool),arg1,arg2)
end 
=#
function PetscObjectListDestroy(arg1::Union{Ptr{PetscObjectList{Float64}},StridedArray{PetscObjectList{Float64}},Ptr{PetscObjectList{Float64}},Ref{PetscObjectList{Float64}}})
    err = ccall((:PetscObjectListDestroy,petscRealDouble),PetscErrorCode,(Ptr{PetscObjectList},),arg1)
    return err
end

function PetscObjectListFind(arg1::PetscObjectList{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{PetscObject{Float64}},StridedArray{PetscObject{Float64}},Ptr{PetscObject{Float64}},Ref{PetscObject{Float64}}})
    err = ccall((:PetscObjectListFind,petscRealDouble),PetscErrorCode,(PetscObjectList,Cstring,Ptr{PetscObject{Float64}}),arg1,arg2,arg3)
    return err
end

function PetscObjectListReverseFind(arg1::PetscObjectList{Float64},arg2::PetscObject{Float64},arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscObjectListReverseFind,petscRealDouble),PetscErrorCode,(PetscObjectList,PetscObject{Float64},Ptr{Ptr{UInt8}},Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function PetscObjectListAdd(arg1::Union{Ptr{PetscObjectList{Float64}},StridedArray{PetscObjectList{Float64}},Ptr{PetscObjectList{Float64}},Ref{PetscObjectList{Float64}}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::PetscObject{Float64})
    err = ccall((:PetscObjectListAdd,petscRealDouble),PetscErrorCode,(Ptr{PetscObjectList},Cstring,PetscObject{Float64}),arg1,arg2,arg3)
    return err
end

function PetscObjectListRemoveReference(arg1::Union{Ptr{PetscObjectList{Float64}},StridedArray{PetscObjectList{Float64}},Ptr{PetscObjectList{Float64}},Ref{PetscObjectList{Float64}}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscObjectListRemoveReference,petscRealDouble),PetscErrorCode,(Ptr{PetscObjectList},Cstring),arg1,arg2)
    return err
end

function PetscObjectListDuplicate(arg1::PetscObjectList{Float64},arg2::Union{Ptr{PetscObjectList{Float64}},StridedArray{PetscObjectList{Float64}},Ptr{PetscObjectList{Float64}},Ref{PetscObjectList{Float64}}})
    err = ccall((:PetscObjectListDuplicate,petscRealDouble),PetscErrorCode,(PetscObjectList,Ptr{PetscObjectList}),arg1,arg2)
    return err
end

function PetscFunctionListAdd_Private(arg1::Union{Ptr{PetscFunctionList{Float64}},StridedArray{PetscFunctionList{Float64}},Ptr{PetscFunctionList{Float64}},Ref{PetscFunctionList{Float64}}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscFunctionListAdd_Private,petscRealDouble),PetscErrorCode,(Ptr{PetscFunctionList},Cstring,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function PetscFunctionListDestroy(arg1::Union{Ptr{PetscFunctionList{Float64}},StridedArray{PetscFunctionList{Float64}},Ptr{PetscFunctionList{Float64}},Ref{PetscFunctionList{Float64}}})
    err = ccall((:PetscFunctionListDestroy,petscRealDouble),PetscErrorCode,(Ptr{PetscFunctionList},),arg1)
    return err
end

function PetscFunctionListFind_Private(arg1::PetscFunctionList{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:PetscFunctionListFind_Private,petscRealDouble),PetscErrorCode,(PetscFunctionList,Cstring,Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

#= skipping function with undefined symbols: 
 function PetscFunctionListPrintTypes(arg1::MPI_Comm,arg2::Union{Ptr{FILE},StridedArray{FILE},Ptr{FILE},Ref{FILE}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg6::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg7::PetscFunctionList{Float64},arg8::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    ccall((:PetscFunctionListPrintTypes,petscRealDouble),PetscErrorCode,(comm_type,Ptr{FILE},Cstring,Cstring,Cstring,Cstring,PetscFunctionList,Cstring),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
end 
=#
function PetscFunctionListDuplicate(arg1::PetscFunctionList{Float64},arg2::Union{Ptr{PetscFunctionList{Float64}},StridedArray{PetscFunctionList{Float64}},Ptr{PetscFunctionList{Float64}},Ref{PetscFunctionList{Float64}}})
    err = ccall((:PetscFunctionListDuplicate,petscRealDouble),PetscErrorCode,(PetscFunctionList,Ptr{PetscFunctionList}),arg1,arg2)
    return err
end

function PetscFunctionListView(arg1::PetscFunctionList{Float64},arg2::PetscViewer{Float64})
    err = ccall((:PetscFunctionListView,petscRealDouble),PetscErrorCode,(PetscFunctionList,PetscViewer{Float64}),arg1,arg2)
    return err
end

function PetscFunctionListGet(arg1::PetscFunctionList{Float64},arg2::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}},arg3::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:PetscFunctionListGet,petscRealDouble),PetscErrorCode,(PetscFunctionList,Ptr{Ptr{Ptr{UInt8}}},Ptr{Cint}),arg1,arg2,arg3)
    return err
end

function PetscDLLibraryAppend(arg1::MPI_Comm,arg2::Union{Ptr{PetscDLLibrary{Float64}},StridedArray{PetscDLLibrary{Float64}},Ptr{PetscDLLibrary{Float64}},Ref{PetscDLLibrary{Float64}}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscDLLibraryAppend,petscRealDouble),PetscErrorCode,(comm_type,Ptr{PetscDLLibrary},Cstring),arg1,arg2,arg3)
    return err
end

function PetscDLLibraryPrepend(arg1::MPI_Comm,arg2::Union{Ptr{PetscDLLibrary{Float64}},StridedArray{PetscDLLibrary{Float64}},Ptr{PetscDLLibrary{Float64}},Ref{PetscDLLibrary{Float64}}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscDLLibraryPrepend,petscRealDouble),PetscErrorCode,(comm_type,Ptr{PetscDLLibrary},Cstring),arg1,arg2,arg3)
    return err
end

function PetscDLLibrarySym(arg1::MPI_Comm,arg2::Union{Ptr{PetscDLLibrary{Float64}},StridedArray{PetscDLLibrary{Float64}},Ptr{PetscDLLibrary{Float64}},Ref{PetscDLLibrary{Float64}}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:PetscDLLibrarySym,petscRealDouble),PetscErrorCode,(comm_type,Ptr{PetscDLLibrary},Cstring,Cstring,Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDLLibraryPrintPath(arg1::PetscDLLibrary{Float64})
    err = ccall((:PetscDLLibraryPrintPath,petscRealDouble),PetscErrorCode,(PetscDLLibrary,),arg1)
    return err
end

function PetscDLLibraryRetrieve(arg0::Type{Float64},arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer,arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscDLLibraryRetrieve,petscRealDouble),PetscErrorCode,(comm_type,Cstring,Cstring,Cint,Ptr{PetscBool}),arg1,arg2,arg3,size_t,arg4)
    return err
end

function PetscDLLibraryOpen(arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{PetscDLLibrary{Float64}},StridedArray{PetscDLLibrary{Float64}},Ptr{PetscDLLibrary{Float64}},Ref{PetscDLLibrary{Float64}}})
    err = ccall((:PetscDLLibraryOpen,petscRealDouble),PetscErrorCode,(comm_type,Cstring,Ptr{PetscDLLibrary}),arg1,arg2,arg3)
    return err
end

function PetscDLLibraryClose(arg1::PetscDLLibrary{Float64})
    err = ccall((:PetscDLLibraryClose,petscRealDouble),PetscErrorCode,(PetscDLLibrary,),arg1)
    return err
end

function PetscSplitOwnership(arg0::Type{Float64},arg1::MPI_Comm,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSplitOwnership,petscRealDouble),PetscErrorCode,(comm_type,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PetscSplitOwnershipBlock(arg0::Type{Float64},arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSplitOwnershipBlock,petscRealDouble),PetscErrorCode,(comm_type,Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function PetscSequentialPhaseBegin(arg0::Type{Float64},arg1::MPI_Comm,arg2::PetscMPIInt)
    err = ccall((:PetscSequentialPhaseBegin,petscRealDouble),PetscErrorCode,(comm_type,PetscMPIInt),arg1,arg2)
    return err
end

function PetscSequentialPhaseEnd(arg0::Type{Float64},arg1::MPI_Comm,arg2::PetscMPIInt)
    err = ccall((:PetscSequentialPhaseEnd,petscRealDouble),PetscErrorCode,(comm_type,PetscMPIInt),arg1,arg2)
    return err
end

function PetscBarrier(arg1::PetscObject{Float64})
    err = ccall((:PetscBarrier,petscRealDouble),PetscErrorCode,(PetscObject{Float64},),arg1)
    return err
end

#= skipping function with undefined symbols: 
 function PetscMPIDump(arg0::Type{Float64},arg1::Union{Ptr{FILE},StridedArray{FILE},Ptr{FILE},Ref{FILE}})
    ccall((:PetscMPIDump,petscRealDouble),PetscErrorCode,(Ptr{FILE},),arg1)
end 
=#
function PetscInfoDeactivateClass(arg0::Type{Float64},arg1::PetscClassId)
    err = ccall((:PetscInfoDeactivateClass,petscRealDouble),PetscErrorCode,(PetscClassId,),arg1)
    return err
end

function PetscInfoActivateClass(arg0::Type{Float64},arg1::PetscClassId)
    err = ccall((:PetscInfoActivateClass,petscRealDouble),PetscErrorCode,(PetscClassId,),arg1)
    return err
end

function PetscLogGetStageLog(arg1::Union{Ptr{PetscStageLog{Float64}},StridedArray{PetscStageLog{Float64}},Ptr{PetscStageLog{Float64}},Ref{PetscStageLog{Float64}}})
    err = ccall((:PetscLogGetStageLog,petscRealDouble),PetscErrorCode,(Ptr{PetscStageLog},),arg1)
    return err
end

function PetscStageLogGetCurrent(arg1::PetscStageLog{Float64},arg2::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:PetscStageLogGetCurrent,petscRealDouble),PetscErrorCode,(PetscStageLog,Ptr{Cint}),arg1,arg2)
    return err
end

function PetscStageLogGetEventPerfLog(arg1::PetscStageLog{Float64},arg2::Integer,arg3::Union{Ptr{PetscEventPerfLog{Float64}},StridedArray{PetscEventPerfLog{Float64}},Ptr{PetscEventPerfLog{Float64}},Ref{PetscEventPerfLog{Float64}}})
    err = ccall((:PetscStageLogGetEventPerfLog,petscRealDouble),PetscErrorCode,(PetscStageLog,Cint,Ptr{PetscEventPerfLog}),arg1,arg2,arg3)
    return err
end

function PetscLogObjectParent(arg1::PetscObject{Float64},arg2::PetscObject{Float64})
    err = ccall((:PetscLogObjectParent,petscRealDouble),PetscErrorCode,(PetscObject{Float64},PetscObject{Float64}),arg1,arg2)
    return err
end

function PetscLogObjectMemory(arg1::PetscObject{Float64},arg2::Float64)
    err = ccall((:PetscLogObjectMemory,petscRealDouble),PetscErrorCode,(PetscObject{Float64},Float64),arg1,arg2)
    return err
end

function PetscIntStackCreate(arg1::Union{Ptr{PetscIntStack{Float64}},StridedArray{PetscIntStack{Float64}},Ptr{PetscIntStack{Float64}},Ref{PetscIntStack{Float64}}})
    err = ccall((:PetscIntStackCreate,petscRealDouble),PetscErrorCode,(Ptr{PetscIntStack},),arg1)
    return err
end

function PetscIntStackDestroy(arg1::PetscIntStack{Float64})
    err = ccall((:PetscIntStackDestroy,petscRealDouble),PetscErrorCode,(PetscIntStack,),arg1)
    return err
end

function PetscIntStackPush(arg1::PetscIntStack{Float64},arg2::Integer)
    err = ccall((:PetscIntStackPush,petscRealDouble),PetscErrorCode,(PetscIntStack,Cint),arg1,arg2)
    return err
end

function PetscIntStackPop(arg1::PetscIntStack{Float64},arg2::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:PetscIntStackPop,petscRealDouble),PetscErrorCode,(PetscIntStack,Ptr{Cint}),arg1,arg2)
    return err
end

function PetscIntStackTop(arg1::PetscIntStack{Float64},arg2::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:PetscIntStackTop,petscRealDouble),PetscErrorCode,(PetscIntStack,Ptr{Cint}),arg1,arg2)
    return err
end

function PetscIntStackEmpty(arg1::PetscIntStack{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscIntStackEmpty,petscRealDouble),PetscErrorCode,(PetscIntStack,Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscFixFilename(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscFixFilename,petscRealDouble),PetscErrorCode,(Cstring,Cstring),arg1,arg2)
    return err
end

#= skipping function with undefined symbols: 
 function PetscFOpen(arg0::Type{Float64},arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{Ptr{Ptr{FILE}},StridedArray{Ptr{FILE}},Ptr{Ptr{FILE}},Ref{Ptr{FILE}}})
    ccall((:PetscFOpen,petscRealDouble),PetscErrorCode,(comm_type,Cstring,Cstring,Ptr{Ptr{FILE}}),arg1,arg2,arg3,arg4)
end 
=#
#= skipping function with undefined symbols: 
 function PetscFClose(arg0::Type{Float64},arg1::MPI_Comm,arg2::Union{Ptr{FILE},StridedArray{FILE},Ptr{FILE},Ref{FILE}})
    ccall((:PetscFClose,petscRealDouble),PetscErrorCode,(comm_type,Ptr{FILE}),arg1,arg2)
end 
=#
function PetscVSNPrintf(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}},va_list::Integer)
    err = ccall((:PetscVSNPrintf,petscRealDouble),PetscErrorCode,(Cstring,Cint,Cstring,Ptr{Cint},Cint),arg1,size_t,arg2,arg3,va_list)
    return err
end

#= skipping function with undefined symbols: 
 function PetscVFPrintfDefault(arg0::Type{Float64},arg1::Union{Ptr{FILE},StridedArray{FILE},Ptr{FILE},Ref{FILE}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},va_list::Integer)
    ccall((:PetscVFPrintfDefault,petscRealDouble),PetscErrorCode,(Ptr{FILE},Cstring,Cint),arg1,arg2,va_list)
end 
=#
#= skipping function with undefined symbols: 
 function PetscSynchronizedFlush(arg0::Type{Float64},arg1::MPI_Comm,arg2::Union{Ptr{FILE},StridedArray{FILE},Ptr{FILE},Ref{FILE}})
    ccall((:PetscSynchronizedFlush,petscRealDouble),PetscErrorCode,(comm_type,Ptr{FILE}),arg1,arg2)
end 
=#
#= skipping function with undefined symbols: 
 function PetscSynchronizedFGets(arg0::Type{Float64},arg1::MPI_Comm,arg2::Union{Ptr{FILE},StridedArray{FILE},Ptr{FILE},Ref{FILE}},size_t::Integer,arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    ccall((:PetscSynchronizedFGets,petscRealDouble),PetscErrorCode,(comm_type,Ptr{FILE},Cint,Cstring),arg1,arg2,size_t,arg3)
end 
=#
#= skipping function with undefined symbols: 
 function PetscStartMatlab(arg0::Type{Float64},arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{Ptr{Ptr{FILE}},StridedArray{Ptr{FILE}},Ptr{Ptr{FILE}},Ref{Ptr{FILE}}})
    ccall((:PetscStartMatlab,petscRealDouble),PetscErrorCode,(comm_type,Cstring,Cstring,Ptr{Ptr{FILE}}),arg1,arg2,arg3,arg4)
end 
=#
#= skipping function with undefined symbols: 
 function PetscStartJava(arg0::Type{Float64},arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{Ptr{Ptr{FILE}},StridedArray{Ptr{FILE}},Ptr{Ptr{FILE}},Ref{Ptr{FILE}}})
    ccall((:PetscStartJava,petscRealDouble),PetscErrorCode,(comm_type,Cstring,Cstring,Ptr{Ptr{FILE}}),arg1,arg2,arg3,arg4)
end 
=#
function PetscGetPetscDir(arg0::Type{Float64},arg1::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscGetPetscDir,petscRealDouble),PetscErrorCode,(Ptr{Ptr{UInt8}},),arg1)
    return err
end

function PetscPopUpSelect(arg0::Type{Float64},arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Integer,arg5::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg6::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:PetscPopUpSelect,petscRealDouble),PetscErrorCode,(comm_type,Cstring,Cstring,Cint,Ptr{Ptr{UInt8}},Ptr{Cint}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscContainerGetPointer(arg1::PetscContainer{Float64},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:PetscContainerGetPointer,petscRealDouble),PetscErrorCode,(PetscContainer{Float64},Ptr{Ptr{Void}}),arg1,arg2)
    return err
end

function PetscContainerSetPointer(arg1::PetscContainer{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscContainerSetPointer,petscRealDouble),PetscErrorCode,(PetscContainer{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function PetscContainerDestroy(arg1::Union{Ptr{PetscContainer{Float64}},StridedArray{PetscContainer{Float64}},Ptr{PetscContainer{Float64}},Ref{PetscContainer{Float64}}})
    err = ccall((:PetscContainerDestroy,petscRealDouble),PetscErrorCode,(Ptr{PetscContainer{Float64}},),arg1)
    return err
end

function PetscContainerCreate(arg1::MPI_Comm,arg2::Union{Ptr{PetscContainer{Float64}},StridedArray{PetscContainer{Float64}},Ptr{PetscContainer{Float64}},Ref{PetscContainer{Float64}}})
    err = ccall((:PetscContainerCreate,petscRealDouble),PetscErrorCode,(comm_type,Ptr{PetscContainer{Float64}}),arg1,arg2)
    return err
end

function PetscContainerSetUserDestroy(arg1::PetscContainer{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscContainerSetUserDestroy,petscRealDouble),PetscErrorCode,(PetscContainer{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function PetscIntView(arg1::Integer,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::PetscViewer{Float64})
    err = ccall((:PetscIntView,petscRealDouble),PetscErrorCode,(Int64,Ptr{Int64},PetscViewer{Float64}),arg1,arg2,arg3)
    return err
end

function PetscRealView(arg1::Integer,arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::PetscViewer{Float64})
    err = ccall((:PetscRealView,petscRealDouble),PetscErrorCode,(Int64,Ptr{Float64},PetscViewer{Float64}),arg1,arg2,arg3)
    return err
end

function PetscScalarView(arg1::Integer,arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::PetscViewer{Float64})
    err = ccall((:PetscScalarView,petscRealDouble),PetscErrorCode,(Int64,Ptr{Float64},PetscViewer{Float64}),arg1,arg2,arg3)
    return err
end

function PetscGetHostName(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer)
    err = ccall((:PetscGetHostName,petscRealDouble),PetscErrorCode,(Cstring,Cint),arg1,size_t)
    return err
end

function PetscGetUserName(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer)
    err = ccall((:PetscGetUserName,petscRealDouble),PetscErrorCode,(Cstring,Cint),arg1,size_t)
    return err
end

function PetscGetProgramName(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer)
    err = ccall((:PetscGetProgramName,petscRealDouble),PetscErrorCode,(Cstring,Cint),arg1,size_t)
    return err
end

function PetscSetProgramName(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscSetProgramName,petscRealDouble),PetscErrorCode,(Cstring,),arg1)
    return err
end

function PetscGetDate(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer)
    err = ccall((:PetscGetDate,petscRealDouble),PetscErrorCode,(Cstring,Cint),arg1,size_t)
    return err
end

function PetscGetVersion(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer)
    err = ccall((:PetscGetVersion,petscRealDouble),PetscErrorCode,(Cstring,Cint),arg1,size_t)
    return err
end

function PetscSortInt(arg0::Type{Float64},arg1::Integer,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSortInt,petscRealDouble),PetscErrorCode,(Int64,Ptr{Int64}),arg1,arg2)
    return err
end

function PetscSortRemoveDupsInt(arg0::Type{Float64},arg1::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSortRemoveDupsInt,petscRealDouble),PetscErrorCode,(Ptr{Int64},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscFindInt(arg0::Type{Float64},arg1::Integer,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscFindInt,petscRealDouble),PetscErrorCode,(Int64,Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function PetscSortIntWithPermutation(arg0::Type{Float64},arg1::Integer,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSortIntWithPermutation,petscRealDouble),PetscErrorCode,(Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PetscSortStrWithPermutation(arg0::Type{Float64},arg1::Integer,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSortStrWithPermutation,petscRealDouble),PetscErrorCode,(Int64,Ptr{Ptr{UInt8}},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PetscSortIntWithArray(arg0::Type{Float64},arg1::Integer,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSortIntWithArray,petscRealDouble),PetscErrorCode,(Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PetscSortIntWithArrayPair(arg0::Type{Float64},arg1::Integer,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSortIntWithArrayPair,petscRealDouble),PetscErrorCode,(Int64,Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function PetscSortMPIInt(arg0::Type{Float64},arg1::Integer,arg2::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}})
    err = ccall((:PetscSortMPIInt,petscRealDouble),PetscErrorCode,(Int64,Ptr{PetscMPIInt}),arg1,arg2)
    return err
end

function PetscSortRemoveDupsMPIInt(arg0::Type{Float64},arg1::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg2::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}})
    err = ccall((:PetscSortRemoveDupsMPIInt,petscRealDouble),PetscErrorCode,(Ptr{Int64},Ptr{PetscMPIInt}),arg1,arg2)
    return err
end

function PetscSortMPIIntWithArray(arg0::Type{Float64},arg1::PetscMPIInt,arg2::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}},arg3::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}})
    err = ccall((:PetscSortMPIIntWithArray,petscRealDouble),PetscErrorCode,(PetscMPIInt,Ptr{PetscMPIInt},Ptr{PetscMPIInt}),arg1,arg2,arg3)
    return err
end

function PetscSortIntWithScalarArray(arg0::Type{Float64},arg1::Integer,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscSortIntWithScalarArray,petscRealDouble),PetscErrorCode,(Int64,Ptr{Int64},Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function PetscSortIntWithDataArray(arg0::Type{Float64},arg1::Integer,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},size_t::Integer,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscSortIntWithDataArray,petscRealDouble),PetscErrorCode,(Int64,Ptr{Int64},Ptr{Void},Cint,Ptr{Void}),arg1,arg2,arg3,size_t,arg4)
    return err
end

function PetscSortReal(arg0::Type{Float64},arg1::Integer,arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscSortReal,petscRealDouble),PetscErrorCode,(Int64,Ptr{Float64}),arg1,arg2)
    return err
end

function PetscSortRealWithPermutation(arg0::Type{Float64},arg1::Integer,arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSortRealWithPermutation,petscRealDouble),PetscErrorCode,(Int64,Ptr{Float64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PetscSortRemoveDupsReal(arg0::Type{Float64},arg1::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscSortRemoveDupsReal,petscRealDouble),PetscErrorCode,(Ptr{Int64},Ptr{Float64}),arg1,arg2)
    return err
end

function PetscSortSplit(arg0::Type{Float64},arg1::Integer,arg2::Integer,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSortSplit,petscRealDouble),PetscErrorCode,(Int64,Int64,Ptr{Float64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function PetscSortSplitReal(arg0::Type{Float64},arg1::Integer,arg2::Integer,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSortSplitReal,petscRealDouble),PetscErrorCode,(Int64,Int64,Ptr{Float64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function PetscProcessTree(arg0::Type{Float64},arg1::Integer,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg6::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg7::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg8::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:PetscProcessTree,petscRealDouble),PetscErrorCode,(Int64,Ptr{PetscBool},Ptr{Int64},Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function PetscMergeIntArrayPair(arg0::Type{Float64},arg1::Integer,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg9::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:PetscMergeIntArrayPair,petscRealDouble),PetscErrorCode,(Int64,Ptr{Int64},Ptr{Int64},Int64,Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
    return err
end

function PetscMergeIntArray(arg0::Type{Float64},arg1::Integer,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:PetscMergeIntArray,petscRealDouble),PetscErrorCode,(Int64,Ptr{Int64},Int64,Ptr{Int64},Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscSetDisplay(arg0::Type{Float64})
    err = ccall((:PetscSetDisplay,petscRealDouble),PetscErrorCode,())
    return err
end

function PetscGetDisplay(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer)
    err = ccall((:PetscGetDisplay,petscRealDouble),PetscErrorCode,(Cstring,Cint),arg1,size_t)
    return err
end

function PetscRandomInitializePackage(arg0::Type{Float64})
    err = ccall((:PetscRandomInitializePackage,petscRealDouble),PetscErrorCode,())
    return err
end

function PetscRandomRegister(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscRandomRegister,petscRealDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function PetscRandomSetType(arg1::PetscRandom{Float64},arg2::PetscRandomType)
    err = ccall((:PetscRandomSetType,petscRealDouble),PetscErrorCode,(PetscRandom{Float64},PetscRandomType),arg1,arg2)
    return err
end

function PetscRandomSetFromOptions(arg1::PetscRandom{Float64})
    err = ccall((:PetscRandomSetFromOptions,petscRealDouble),PetscErrorCode,(PetscRandom{Float64},),arg1)
    return err
end

function PetscRandomGetType(arg1::PetscRandom{Float64},arg2::Union{Ptr{PetscRandomType},StridedArray{PetscRandomType},Ptr{PetscRandomType},Ref{PetscRandomType}})
    err = ccall((:PetscRandomGetType,petscRealDouble),PetscErrorCode,(PetscRandom{Float64},Ptr{PetscRandomType}),arg1,arg2)
    return err
end

function PetscRandomCreate(arg1::MPI_Comm,arg2::Union{Ptr{PetscRandom{Float64}},StridedArray{PetscRandom{Float64}},Ptr{PetscRandom{Float64}},Ref{PetscRandom{Float64}}})
    err = ccall((:PetscRandomCreate,petscRealDouble),PetscErrorCode,(comm_type,Ptr{PetscRandom{Float64}}),arg1,arg2)
    return err
end

function PetscRandomGetValue(arg1::PetscRandom{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscRandomGetValue,petscRealDouble),PetscErrorCode,(PetscRandom{Float64},Ptr{Float64}),arg1,arg2)
    return err
end

function PetscRandomGetValueReal(arg1::PetscRandom{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscRandomGetValueReal,petscRealDouble),PetscErrorCode,(PetscRandom{Float64},Ptr{Float64}),arg1,arg2)
    return err
end

function PetscRandomGetInterval(arg1::PetscRandom{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscRandomGetInterval,petscRealDouble),PetscErrorCode,(PetscRandom{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function PetscRandomSetInterval(arg1::PetscRandom{Float64},arg2::Float64,arg3::Float64)
    err = ccall((:PetscRandomSetInterval,petscRealDouble),PetscErrorCode,(PetscRandom{Float64},Float64,Float64),arg1,arg2,arg3)
    return err
end

function PetscRandomSetSeed(arg1::PetscRandom{Float64},arg2::Culong)
    err = ccall((:PetscRandomSetSeed,petscRealDouble),PetscErrorCode,(PetscRandom{Float64},Culong),arg1,arg2)
    return err
end

function PetscRandomGetSeed(arg1::PetscRandom{Float64},arg2::Union{Ptr{Culong},StridedArray{Culong},Ptr{Culong},Ref{Culong}})
    err = ccall((:PetscRandomGetSeed,petscRealDouble),PetscErrorCode,(PetscRandom{Float64},Ptr{Culong}),arg1,arg2)
    return err
end

function PetscRandomSeed(arg1::PetscRandom{Float64})
    err = ccall((:PetscRandomSeed,petscRealDouble),PetscErrorCode,(PetscRandom{Float64},),arg1)
    return err
end

function PetscRandomDestroy(arg1::Union{Ptr{PetscRandom{Float64}},StridedArray{PetscRandom{Float64}},Ptr{PetscRandom{Float64}},Ref{PetscRandom{Float64}}})
    err = ccall((:PetscRandomDestroy,petscRealDouble),PetscErrorCode,(Ptr{PetscRandom{Float64}},),arg1)
    return err
end

function PetscGetFullPath(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer)
    err = ccall((:PetscGetFullPath,petscRealDouble),PetscErrorCode,(Cstring,Cstring,Cint),arg1,arg2,size_t)
    return err
end

function PetscGetRelativePath(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer)
    err = ccall((:PetscGetRelativePath,petscRealDouble),PetscErrorCode,(Cstring,Cstring,Cint),arg1,arg2,size_t)
    return err
end

function PetscGetWorkingDirectory(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer)
    err = ccall((:PetscGetWorkingDirectory,petscRealDouble),PetscErrorCode,(Cstring,Cint),arg1,size_t)
    return err
end

function PetscGetRealPath(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscGetRealPath,petscRealDouble),PetscErrorCode,(Cstring,Cstring),arg1,arg2)
    return err
end

function PetscGetHomeDirectory(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer)
    err = ccall((:PetscGetHomeDirectory,petscRealDouble),PetscErrorCode,(Cstring,Cint),arg1,size_t)
    return err
end

function PetscTestFile(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::UInt8,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscTestFile,petscRealDouble),PetscErrorCode,(Cstring,UInt8,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function PetscTestDirectory(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::UInt8,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscTestDirectory,petscRealDouble),PetscErrorCode,(Cstring,UInt8,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function PetscBinaryRead(arg0::Type{Float64},arg1::Integer,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Integer,arg4::PetscDataType)
    err = ccall((:PetscBinaryRead,petscRealDouble),PetscErrorCode,(Cint,Ptr{Void},Int64,PetscDataType),arg1,arg2,arg3,arg4)
    return err
end

function PetscBinarySynchronizedRead(arg0::Type{Float64},arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Integer,arg5::PetscDataType)
    err = ccall((:PetscBinarySynchronizedRead,petscRealDouble),PetscErrorCode,(comm_type,Cint,Ptr{Void},Int64,PetscDataType),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscBinarySynchronizedWrite(arg0::Type{Float64},arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Integer,arg5::PetscDataType,arg6::PetscBool)
    err = ccall((:PetscBinarySynchronizedWrite,petscRealDouble),PetscErrorCode,(comm_type,Cint,Ptr{Void},Int64,PetscDataType,PetscBool),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscBinaryWrite(arg0::Type{Float64},arg1::Integer,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Integer,arg4::PetscDataType,arg5::PetscBool)
    err = ccall((:PetscBinaryWrite,petscRealDouble),PetscErrorCode,(Cint,Ptr{Void},Int64,PetscDataType,PetscBool),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscBinaryOpen(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::PetscFileMode,arg3::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:PetscBinaryOpen,petscRealDouble),PetscErrorCode,(Cstring,PetscFileMode,Ptr{Cint}),arg1,arg2,arg3)
    return err
end

function PetscBinaryClose(arg0::Type{Float64},arg1::Integer)
    err = ccall((:PetscBinaryClose,petscRealDouble),PetscErrorCode,(Cint,),arg1)
    return err
end

function PetscSharedTmp(arg0::Type{Float64},arg1::MPI_Comm,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscSharedTmp,petscRealDouble),PetscErrorCode,(comm_type,Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscSharedWorkingDirectory(arg0::Type{Float64},arg1::MPI_Comm,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscSharedWorkingDirectory,petscRealDouble),PetscErrorCode,(comm_type,Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscGetTmp(arg0::Type{Float64},arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer)
    err = ccall((:PetscGetTmp,petscRealDouble),PetscErrorCode,(comm_type,Cstring,Cint),arg1,arg2,size_t)
    return err
end

function PetscFileRetrieve(arg0::Type{Float64},arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer,arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscFileRetrieve,petscRealDouble),PetscErrorCode,(comm_type,Cstring,Cstring,Cint,Ptr{PetscBool}),arg1,arg2,arg3,size_t,arg4)
    return err
end

function PetscLs(arg0::Type{Float64},arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer,arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscLs,petscRealDouble),PetscErrorCode,(comm_type,Cstring,Cstring,Cint,Ptr{PetscBool}),arg1,arg2,arg3,size_t,arg4)
    return err
end

function PetscOpenSocket(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Integer,arg3::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:PetscOpenSocket,petscRealDouble),PetscErrorCode,(Cstring,Cint,Ptr{Cint}),arg1,arg2,arg3)
    return err
end

function PetscBinarySeek(arg0::Type{Float64},arg1::Integer,off_t::Integer,arg2::PetscBinarySeekType,arg3::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:PetscBinarySeek,petscRealDouble),PetscErrorCode,(Cint,Cint,PetscBinarySeekType,Ptr{Cint}),arg1,off_t,arg2,arg3)
    return err
end

function PetscBinarySynchronizedSeek(arg0::Type{Float64},arg1::MPI_Comm,arg2::Integer,off_t::Integer,arg3::PetscBinarySeekType,arg4::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:PetscBinarySynchronizedSeek,petscRealDouble),PetscErrorCode,(comm_type,Cint,Cint,PetscBinarySeekType,Ptr{Cint}),arg1,arg2,off_t,arg3,arg4)
    return err
end

function PetscByteSwap(arg0::Type{Float64},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg2::PetscDataType,arg3::Integer)
    err = ccall((:PetscByteSwap,petscRealDouble),PetscErrorCode,(Ptr{Void},PetscDataType,Int64),arg1,arg2,arg3)
    return err
end

function PetscSetDebugTerminal(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscSetDebugTerminal,petscRealDouble),PetscErrorCode,(Cstring,),arg1)
    return err
end

function PetscSetDebugger(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::PetscBool)
    err = ccall((:PetscSetDebugger,petscRealDouble),PetscErrorCode,(Cstring,PetscBool),arg1,arg2)
    return err
end

function PetscSetDefaultDebugger(arg0::Type{Float64})
    err = ccall((:PetscSetDefaultDebugger,petscRealDouble),PetscErrorCode,())
    return err
end

function PetscSetDebuggerFromString(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscSetDebuggerFromString,petscRealDouble),PetscErrorCode,(Cstring,),arg1)
    return err
end

function PetscAttachDebugger(arg0::Type{Float64})
    err = ccall((:PetscAttachDebugger,petscRealDouble),PetscErrorCode,())
    return err
end

function PetscStopForDebugger(arg0::Type{Float64})
    err = ccall((:PetscStopForDebugger,petscRealDouble),PetscErrorCode,())
    return err
end

function PetscGatherNumberOfMessages(arg0::Type{Float64},arg1::MPI_Comm,arg2::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}},arg3::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}},arg4::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}})
    err = ccall((:PetscGatherNumberOfMessages,petscRealDouble),PetscErrorCode,(comm_type,Ptr{PetscMPIInt},Ptr{PetscMPIInt},Ptr{PetscMPIInt}),arg1,arg2,arg3,arg4)
    return err
end

function PetscGatherMessageLengths(arg0::Type{Float64},arg1::MPI_Comm,arg2::PetscMPIInt,arg3::PetscMPIInt,arg4::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}},arg5::Union{Ptr{Ptr{PetscMPIInt}},StridedArray{Ptr{PetscMPIInt}},Ptr{Ptr{PetscMPIInt}},Ref{Ptr{PetscMPIInt}}},arg6::Union{Ptr{Ptr{PetscMPIInt}},StridedArray{Ptr{PetscMPIInt}},Ptr{Ptr{PetscMPIInt}},Ref{Ptr{PetscMPIInt}}})
    err = ccall((:PetscGatherMessageLengths,petscRealDouble),PetscErrorCode,(comm_type,PetscMPIInt,PetscMPIInt,Ptr{PetscMPIInt},Ptr{Ptr{PetscMPIInt}},Ptr{Ptr{PetscMPIInt}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscGatherMessageLengths2(arg0::Type{Float64},arg1::MPI_Comm,arg2::PetscMPIInt,arg3::PetscMPIInt,arg4::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}},arg5::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}},arg6::Union{Ptr{Ptr{PetscMPIInt}},StridedArray{Ptr{PetscMPIInt}},Ptr{Ptr{PetscMPIInt}},Ref{Ptr{PetscMPIInt}}},arg7::Union{Ptr{Ptr{PetscMPIInt}},StridedArray{Ptr{PetscMPIInt}},Ptr{Ptr{PetscMPIInt}},Ref{Ptr{PetscMPIInt}}},arg8::Union{Ptr{Ptr{PetscMPIInt}},StridedArray{Ptr{PetscMPIInt}},Ptr{Ptr{PetscMPIInt}},Ref{Ptr{PetscMPIInt}}})
    err = ccall((:PetscGatherMessageLengths2,petscRealDouble),PetscErrorCode,(comm_type,PetscMPIInt,PetscMPIInt,Ptr{PetscMPIInt},Ptr{PetscMPIInt},Ptr{Ptr{PetscMPIInt}},Ptr{Ptr{PetscMPIInt}},Ptr{Ptr{PetscMPIInt}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

#= skipping function with undefined symbols: 
 function PetscPostIrecvInt(arg0::Type{Float64},arg1::MPI_Comm,arg2::PetscMPIInt,arg3::PetscMPIInt,arg4::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}},arg5::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}},arg6::Union{Ptr{Ptr{Ptr{Int64}}},StridedArray{Ptr{Ptr{Int64}}},Ptr{Ptr{Ptr{Int64}}},Ref{Ptr{Ptr{Int64}}}},arg7::Union{Ptr{Ptr{MPI_Request}},StridedArray{Ptr{MPI_Request}},Ptr{Ptr{MPI_Request}},Ref{Ptr{MPI_Request}}})
    ccall((:PetscPostIrecvInt,petscRealDouble),PetscErrorCode,(comm_type,PetscMPIInt,PetscMPIInt,Ptr{PetscMPIInt},Ptr{PetscMPIInt},Ptr{Ptr{Ptr{Int64}}},Ptr{Ptr{MPI_Request}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end 
=#
#= skipping function with undefined symbols: 
 function PetscPostIrecvScalar(arg0::Type{Float64},arg1::MPI_Comm,arg2::PetscMPIInt,arg3::PetscMPIInt,arg4::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}},arg5::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}},arg6::Union{Ptr{Ptr{Ptr{Float64}}},StridedArray{Ptr{Ptr{Float64}}},Ptr{Ptr{Ptr{Float64}}},Ref{Ptr{Ptr{Float64}}}},arg7::Union{Ptr{Ptr{MPI_Request}},StridedArray{Ptr{MPI_Request}},Ptr{Ptr{MPI_Request}},Ref{Ptr{MPI_Request}}})
    ccall((:PetscPostIrecvScalar,petscRealDouble),PetscErrorCode,(comm_type,PetscMPIInt,PetscMPIInt,Ptr{PetscMPIInt},Ptr{PetscMPIInt},Ptr{Ptr{Ptr{Float64}}},Ptr{Ptr{MPI_Request}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end 
=#
#= skipping function with undefined symbols: 
 function PetscCommBuildTwoSided(arg0::Type{Float64},arg1::MPI_Comm,arg2::PetscMPIInt,arg3::MPI_Datatype,arg4::Integer,arg5::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Ptr{PetscMPIInt}},StridedArray{Ptr{PetscMPIInt}},Ptr{Ptr{PetscMPIInt}},Ref{Ptr{PetscMPIInt}}},arg9::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:PetscCommBuildTwoSided,petscRealDouble),PetscErrorCode,(comm_type,PetscMPIInt,MPI_Datatype,Int64,Ptr{PetscMPIInt},Ptr{Void},Ptr{Int64},Ptr{Ptr{PetscMPIInt}},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
end 
=#
function PetscCommBuildTwoSidedSetType(arg0::Type{Float64},arg1::MPI_Comm,arg2::PetscBuildTwoSidedType)
    err = ccall((:PetscCommBuildTwoSidedSetType,petscRealDouble),PetscErrorCode,(comm_type,PetscBuildTwoSidedType),arg1,arg2)
    return err
end

function PetscCommBuildTwoSidedGetType(arg0::Type{Float64},arg1::MPI_Comm,arg2::Union{Ptr{PetscBuildTwoSidedType},StridedArray{PetscBuildTwoSidedType},Ptr{PetscBuildTwoSidedType},Ref{PetscBuildTwoSidedType}})
    err = ccall((:PetscCommBuildTwoSidedGetType,petscRealDouble),PetscErrorCode,(comm_type,Ptr{PetscBuildTwoSidedType}),arg1,arg2)
    return err
end

function PetscSSEIsEnabled(arg0::Type{Float64},arg1::MPI_Comm,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscSSEIsEnabled,petscRealDouble),PetscErrorCode,(comm_type,Ptr{PetscBool},Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function PetscObjectComm(arg1::PetscObject{Float64})
    err = ccall((:PetscObjectComm,petscRealDouble),MPI_Comm,(PetscObject{Float64},),arg1)
    return err
end

function PetscSubcommDestroy(arg1::Union{Ptr{PetscSubcomm{Float64}},StridedArray{PetscSubcomm{Float64}},Ptr{PetscSubcomm{Float64}},Ref{PetscSubcomm{Float64}}})
    err = ccall((:PetscSubcommDestroy,petscRealDouble),PetscErrorCode,(Ptr{PetscSubcomm},),arg1)
    return err
end

function PetscSubcommSetNumber(arg1::PetscSubcomm{Float64},arg2::Integer)
    err = ccall((:PetscSubcommSetNumber,petscRealDouble),PetscErrorCode,(PetscSubcomm,Int64),arg1,arg2)
    return err
end

function PetscSubcommSetType(arg1::PetscSubcomm{Float64},arg2::PetscSubcommType)
    err = ccall((:PetscSubcommSetType,petscRealDouble),PetscErrorCode,(PetscSubcomm,PetscSubcommType),arg1,arg2)
    return err
end

function PetscSubcommSetTypeGeneral(arg1::PetscSubcomm{Float64},arg2::PetscMPIInt,arg3::PetscMPIInt)
    err = ccall((:PetscSubcommSetTypeGeneral,petscRealDouble),PetscErrorCode,(PetscSubcomm,PetscMPIInt,PetscMPIInt),arg1,arg2,arg3)
    return err
end

function PetscSubcommView(arg1::PetscSubcomm{Float64},arg2::PetscViewer{Float64})
    err = ccall((:PetscSubcommView,petscRealDouble),PetscErrorCode,(PetscSubcomm,PetscViewer{Float64}),arg1,arg2)
    return err
end

function PetscSubcommSetFromOptions(arg1::PetscSubcomm{Float64})
    err = ccall((:PetscSubcommSetFromOptions,petscRealDouble),PetscErrorCode,(PetscSubcomm,),arg1)
    return err
end

function PetscSegBufferCreate(arg0::Type{Float64})
    err = ccall((:PetscSegBufferCreate,petscRealDouble),PetscErrorCode,())
    return err
end

function PetscSegBufferDestroy(arg1::Union{Ptr{PetscSegBuffer{Float64}},StridedArray{PetscSegBuffer{Float64}},Ptr{PetscSegBuffer{Float64}},Ref{PetscSegBuffer{Float64}}})
    err = ccall((:PetscSegBufferDestroy,petscRealDouble),PetscErrorCode,(Ptr{PetscSegBuffer},),arg1)
    return err
end

function PetscSegBufferGet(arg1::PetscSegBuffer{Float64},size_t::Integer,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscSegBufferGet,petscRealDouble),PetscErrorCode,(PetscSegBuffer,Cint,Ptr{Void}),arg1,size_t,arg2)
    return err
end

function PetscSegBufferExtractAlloc(arg1::PetscSegBuffer{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscSegBufferExtractAlloc,petscRealDouble),PetscErrorCode,(PetscSegBuffer,Ptr{Void}),arg1,arg2)
    return err
end

function PetscSegBufferExtractTo(arg1::PetscSegBuffer{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscSegBufferExtractTo,petscRealDouble),PetscErrorCode,(PetscSegBuffer,Ptr{Void}),arg1,arg2)
    return err
end

function PetscSegBufferExtractInPlace(arg1::PetscSegBuffer{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscSegBufferExtractInPlace,petscRealDouble),PetscErrorCode,(PetscSegBuffer,Ptr{Void}),arg1,arg2)
    return err
end

function PetscSegBufferGetSize(arg1::PetscSegBuffer{Float64},arg2::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:PetscSegBufferGetSize,petscRealDouble),PetscErrorCode,(PetscSegBuffer,Ptr{Cint}),arg1,arg2)
    return err
end

function PetscSegBufferUnuse(arg1::PetscSegBuffer{Float64},size_t::Integer)
    err = ccall((:PetscSegBufferUnuse,petscRealDouble),PetscErrorCode,(PetscSegBuffer,Cint),arg1,size_t)
    return err
end

function PetscGoogleDriveAuthorize(arg0::Type{Float64},arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer)
    err = ccall((:PetscGoogleDriveAuthorize,petscRealDouble),PetscErrorCode,(comm_type,Cstring,Cstring,Cint),arg1,arg2,arg3,size_t)
    return err
end

function PetscGoogleDriveRefresh(arg0::Type{Float64},arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer)
    err = ccall((:PetscGoogleDriveRefresh,petscRealDouble),PetscErrorCode,(comm_type,Cstring,Cstring,Cint),arg1,arg2,arg3,size_t)
    return err
end

function PetscGoogleDriveUpload(arg0::Type{Float64},arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscGoogleDriveUpload,petscRealDouble),PetscErrorCode,(comm_type,Cstring,Cstring),arg1,arg2,arg3)
    return err
end

function PetscBoxAuthorize(arg0::Type{Float64},arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer)
    err = ccall((:PetscBoxAuthorize,petscRealDouble),PetscErrorCode,(comm_type,Cstring,Cstring,Cint),arg1,arg2,arg3,size_t)
    return err
end

function PetscBoxRefresh(arg0::Type{Float64},arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer)
    err = ccall((:PetscBoxRefresh,petscRealDouble),PetscErrorCode,(comm_type,Cstring,Cstring,Cstring,Cint),arg1,arg2,arg3,arg4,size_t)
    return err
end

function PetscTextBelt(arg0::Type{Float64},arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscTextBelt,petscRealDouble),PetscErrorCode,(comm_type,Cstring,Cstring,Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function PetscPullJSONValue(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer,arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscPullJSONValue,petscRealDouble),PetscErrorCode,(Cstring,Cstring,Cstring,Cint,Ptr{PetscBool}),arg1,arg2,arg3,size_t,arg4)
    return err
end

function PetscPushJSONValue(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer)
    err = ccall((:PetscPushJSONValue,petscRealDouble),PetscErrorCode,(Cstring,Cstring,Cstring,Cint),arg1,arg2,arg3,size_t)
    return err
end

function PetscBagCreate(arg1::MPI_Comm,size_t::Integer,arg2::Union{Ptr{PetscBag{Float64}},StridedArray{PetscBag{Float64}},Ptr{PetscBag{Float64}},Ref{PetscBag{Float64}}})
    err = ccall((:PetscBagCreate,petscRealDouble),PetscErrorCode,(comm_type,Cint,Ptr{PetscBag}),arg1,size_t,arg2)
    return err
end

function PetscBagDestroy(arg1::Union{Ptr{PetscBag{Float64}},StridedArray{PetscBag{Float64}},Ptr{PetscBag{Float64}},Ref{PetscBag{Float64}}})
    err = ccall((:PetscBagDestroy,petscRealDouble),PetscErrorCode,(Ptr{PetscBag},),arg1)
    return err
end

function PetscBagGetData(arg1::PetscBag{Float64},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:PetscBagGetData,petscRealDouble),PetscErrorCode,(PetscBag,Ptr{Ptr{Void}}),arg1,arg2)
    return err
end

function PetscBagRegisterReal(arg1::PetscBag{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Float64,arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscBagRegisterReal,petscRealDouble),PetscErrorCode,(PetscBag,Ptr{Void},Float64,Cstring,Cstring),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscBagRegisterRealArray(arg1::PetscBag{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Integer,arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscBagRegisterRealArray,petscRealDouble),PetscErrorCode,(PetscBag,Ptr{Void},Int64,Cstring,Cstring),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscBagRegisterString(arg1::PetscBag{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Integer,arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg6::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscBagRegisterString,petscRealDouble),PetscErrorCode,(PetscBag,Ptr{Void},Int64,Cstring,Cstring,Cstring),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscBagRegisterScalar(arg1::PetscBag{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Float64,arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscBagRegisterScalar,petscRealDouble),PetscErrorCode,(PetscBag,Ptr{Void},Float64,Cstring,Cstring),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscBagRegisterInt(arg1::PetscBag{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Integer,arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscBagRegisterInt,petscRealDouble),PetscErrorCode,(PetscBag,Ptr{Void},Int64,Cstring,Cstring),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscBagRegister64bitInt(arg1::PetscBag{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Petsc64bitInt,arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscBagRegister64bitInt,petscRealDouble),PetscErrorCode,(PetscBag,Ptr{Void},Petsc64bitInt,Cstring,Cstring),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscBagRegisterIntArray(arg1::PetscBag{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Integer,arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscBagRegisterIntArray,petscRealDouble),PetscErrorCode,(PetscBag,Ptr{Void},Int64,Cstring,Cstring),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscBagRegisterEnum(arg1::PetscBag{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg4::PetscEnum,arg5::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg6::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscBagRegisterEnum,petscRealDouble),PetscErrorCode,(PetscBag,Ptr{Void},Ptr{Ptr{UInt8}},PetscEnum,Cstring,Cstring),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscBagRegisterBool(arg1::PetscBag{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::PetscBool,arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscBagRegisterBool,petscRealDouble),PetscErrorCode,(PetscBag,Ptr{Void},PetscBool,Cstring,Cstring),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscBagRegisterBoolArray(arg1::PetscBag{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Integer,arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscBagRegisterBoolArray,petscRealDouble),PetscErrorCode,(PetscBag,Ptr{Void},Int64,Cstring,Cstring),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscBagGetNames(arg1::PetscBag{Float64},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscBagGetNames,petscRealDouble),PetscErrorCode,(PetscBag,Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PetscBagSetFromOptions(arg1::PetscBag{Float64})
    err = ccall((:PetscBagSetFromOptions,petscRealDouble),PetscErrorCode,(PetscBag,),arg1)
    return err
end

function PetscBagGetName(arg1::PetscBag{Float64},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscBagGetName,petscRealDouble),PetscErrorCode,(PetscBag,Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PetscBagSetName(arg1::PetscBag{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscBagSetName,petscRealDouble),PetscErrorCode,(PetscBag,Cstring,Cstring),arg1,arg2,arg3)
    return err
end

function PetscBagSetOptionsPrefix(arg1::PetscBag{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscBagSetOptionsPrefix,petscRealDouble),PetscErrorCode,(PetscBag,Cstring),arg1,arg2)
    return err
end

function PetscBagView(arg1::PetscBag{Float64},arg2::PetscViewer{Float64})
    err = ccall((:PetscBagView,petscRealDouble),PetscErrorCode,(PetscBag,PetscViewer{Float64}),arg1,arg2)
    return err
end

function PetscBagLoad(arg1::PetscViewer{Float64},arg2::PetscBag{Float64})
    err = ccall((:PetscBagLoad,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},PetscBag),arg1,arg2)
    return err
end

function PetscBagSetViewer(arg1::PetscBag{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscBagSetViewer,petscRealDouble),PetscErrorCode,(PetscBag,Ptr{Void}),arg1,arg2)
    return err
end

function PetscBagSetLoader(arg1::PetscBag{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscBagSetLoader,petscRealDouble),PetscErrorCode,(PetscBag,Ptr{Void}),arg1,arg2)
    return err
end

function PetscBagSetDestroy(arg1::PetscBag{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscBagSetDestroy,petscRealDouble),PetscErrorCode,(PetscBag,Ptr{Void}),arg1,arg2)
    return err
end

function PetscGetCPUTime(arg0::Type{Float64},arg1::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscGetCPUTime,petscRealDouble),PetscErrorCode,(Ptr{Float64},),arg1)
    return err
end

function PetscViewerInitializePackage(arg0::Type{Float64})
    err = ccall((:PetscViewerInitializePackage,petscRealDouble),PetscErrorCode,())
    return err
end

function PetscViewerRegister(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscViewerRegister,petscRealDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function PetscViewerCreate(arg1::MPI_Comm,arg2::Union{Ptr{PetscViewer{Float64}},StridedArray{PetscViewer{Float64}},Ptr{PetscViewer{Float64}},Ref{PetscViewer{Float64}}})
    err = ccall((:PetscViewerCreate,petscRealDouble),PetscErrorCode,(comm_type,Ptr{PetscViewer{Float64}}),arg1,arg2)
    return err
end

function PetscViewerSetFromOptions(arg1::PetscViewer{Float64})
    err = ccall((:PetscViewerSetFromOptions,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},),arg1)
    return err
end

#= skipping function with undefined symbols: 
 function PetscViewerASCIIOpenWithFILE(arg1::MPI_Comm,arg2::Union{Ptr{FILE},StridedArray{FILE},Ptr{FILE},Ref{FILE}},arg3::Union{Ptr{PetscViewer{Float64}},StridedArray{PetscViewer{Float64}},Ptr{PetscViewer{Float64}},Ref{PetscViewer{Float64}}})
    ccall((:PetscViewerASCIIOpenWithFILE,petscRealDouble),PetscErrorCode,(comm_type,Ptr{FILE},Ptr{PetscViewer{Float64}}),arg1,arg2,arg3)
end 
=#
function PetscViewerASCIIOpen(arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{PetscViewer{Float64}},StridedArray{PetscViewer{Float64}},Ptr{PetscViewer{Float64}},Ref{PetscViewer{Float64}}})
    err = ccall((:PetscViewerASCIIOpen,petscRealDouble),PetscErrorCode,(comm_type,Cstring,Ptr{PetscViewer{Float64}}),arg1,arg2,arg3)
    return err
end

#= skipping function with undefined symbols: 
 function PetscViewerASCIISetFILE(arg1::PetscViewer{Float64},arg2::Union{Ptr{FILE},StridedArray{FILE},Ptr{FILE},Ref{FILE}})
    ccall((:PetscViewerASCIISetFILE,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Ptr{FILE}),arg1,arg2)
end 
=#
function PetscViewerBinaryOpen(arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::PetscFileMode,arg4::Union{Ptr{PetscViewer{Float64}},StridedArray{PetscViewer{Float64}},Ptr{PetscViewer{Float64}},Ref{PetscViewer{Float64}}})
    err = ccall((:PetscViewerBinaryOpen,petscRealDouble),PetscErrorCode,(comm_type,Cstring,PetscFileMode,Ptr{PetscViewer{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscViewerBinaryGetFlowControl(arg1::PetscViewer{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscViewerBinaryGetFlowControl,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscViewerBinarySetFlowControl(arg1::PetscViewer{Float64},arg2::Integer)
    err = ccall((:PetscViewerBinarySetFlowControl,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Int64),arg1,arg2)
    return err
end

function PetscViewerBinarySetUseMPIIO(arg1::PetscViewer{Float64},arg2::PetscBool)
    err = ccall((:PetscViewerBinarySetUseMPIIO,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},PetscBool),arg1,arg2)
    return err
end

function PetscViewerBinaryGetUseMPIIO(arg1::PetscViewer{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscViewerBinaryGetUseMPIIO,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscViewerSocketOpen(arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer,arg4::Union{Ptr{PetscViewer{Float64}},StridedArray{PetscViewer{Float64}},Ptr{PetscViewer{Float64}},Ref{PetscViewer{Float64}}})
    err = ccall((:PetscViewerSocketOpen,petscRealDouble),PetscErrorCode,(comm_type,Cstring,Cint,Ptr{PetscViewer{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscViewerStringOpen(arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},size_t::Integer,arg3::Union{Ptr{PetscViewer{Float64}},StridedArray{PetscViewer{Float64}},Ptr{PetscViewer{Float64}},Ref{PetscViewer{Float64}}})
    err = ccall((:PetscViewerStringOpen,petscRealDouble),PetscErrorCode,(comm_type,Cstring,Cint,Ptr{PetscViewer{Float64}}),arg1,arg2,size_t,arg3)
    return err
end

function PetscViewerDrawOpen(arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Union{Ptr{PetscViewer{Float64}},StridedArray{PetscViewer{Float64}},Ptr{PetscViewer{Float64}},Ref{PetscViewer{Float64}}})
    err = ccall((:PetscViewerDrawOpen,petscRealDouble),PetscErrorCode,(comm_type,Cstring,Cstring,Cint,Cint,Cint,Cint,Ptr{PetscViewer{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function PetscViewerDrawSetDrawType(arg1::PetscViewer{Float64},arg2::PetscDrawType)
    err = ccall((:PetscViewerDrawSetDrawType,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},PetscDrawType),arg1,arg2)
    return err
end

function PetscViewerMathematicaOpen(arg1::MPI_Comm,arg2::Integer,arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{Ptr{PetscViewer{Float64}},StridedArray{PetscViewer{Float64}},Ptr{PetscViewer{Float64}},Ref{PetscViewer{Float64}}})
    err = ccall((:PetscViewerMathematicaOpen,petscRealDouble),PetscErrorCode,(comm_type,Cint,Cstring,Cstring,Ptr{PetscViewer{Float64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscViewerSiloOpen(arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{PetscViewer{Float64}},StridedArray{PetscViewer{Float64}},Ptr{PetscViewer{Float64}},Ref{PetscViewer{Float64}}})
    err = ccall((:PetscViewerSiloOpen,petscRealDouble),PetscErrorCode,(comm_type,Cstring,Ptr{PetscViewer{Float64}}),arg1,arg2,arg3)
    return err
end

function PetscViewerMatlabOpen(arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::PetscFileMode,arg4::Union{Ptr{PetscViewer{Float64}},StridedArray{PetscViewer{Float64}},Ptr{PetscViewer{Float64}},Ref{PetscViewer{Float64}}})
    err = ccall((:PetscViewerMatlabOpen,petscRealDouble),PetscErrorCode,(comm_type,Cstring,PetscFileMode,Ptr{PetscViewer{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscViewerGetType(arg1::PetscViewer{Float64},arg2::Union{Ptr{PetscViewerType},StridedArray{PetscViewerType},Ptr{PetscViewerType},Ref{PetscViewerType}})
    err = ccall((:PetscViewerGetType,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Ptr{PetscViewerType}),arg1,arg2)
    return err
end

function PetscViewerSetType(arg1::PetscViewer{Float64},arg2::PetscViewerType)
    err = ccall((:PetscViewerSetType,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},PetscViewerType),arg1,arg2)
    return err
end

function PetscViewerDestroy(arg1::Union{Ptr{PetscViewer{Float64}},StridedArray{PetscViewer{Float64}},Ptr{PetscViewer{Float64}},Ref{PetscViewer{Float64}}})
    err = ccall((:PetscViewerDestroy,petscRealDouble),PetscErrorCode,(Ptr{PetscViewer{Float64}},),arg1)
    return err
end

function PetscViewerGetSingleton(arg1::PetscViewer{Float64},arg2::Union{Ptr{PetscViewer{Float64}},StridedArray{PetscViewer{Float64}},Ptr{PetscViewer{Float64}},Ref{PetscViewer{Float64}}})
    err = ccall((:PetscViewerGetSingleton,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Ptr{PetscViewer{Float64}}),arg1,arg2)
    return err
end

function PetscViewerRestoreSingleton(arg1::PetscViewer{Float64},arg2::Union{Ptr{PetscViewer{Float64}},StridedArray{PetscViewer{Float64}},Ptr{PetscViewer{Float64}},Ref{PetscViewer{Float64}}})
    err = ccall((:PetscViewerRestoreSingleton,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Ptr{PetscViewer{Float64}}),arg1,arg2)
    return err
end

function PetscViewerGetSubcomm(arg1::PetscViewer{Float64},arg2::MPI_Comm,arg3::Union{Ptr{PetscViewer{Float64}},StridedArray{PetscViewer{Float64}},Ptr{PetscViewer{Float64}},Ref{PetscViewer{Float64}}})
    err = ccall((:PetscViewerGetSubcomm,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},comm_type,Ptr{PetscViewer{Float64}}),arg1,arg2,arg3)
    return err
end

function PetscViewerRestoreSubcomm(arg1::PetscViewer{Float64},arg2::MPI_Comm,arg3::Union{Ptr{PetscViewer{Float64}},StridedArray{PetscViewer{Float64}},Ptr{PetscViewer{Float64}},Ref{PetscViewer{Float64}}})
    err = ccall((:PetscViewerRestoreSubcomm,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},comm_type,Ptr{PetscViewer{Float64}}),arg1,arg2,arg3)
    return err
end

function PetscViewerSetUp(arg1::PetscViewer{Float64})
    err = ccall((:PetscViewerSetUp,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},),arg1)
    return err
end

function PetscViewerView(arg1::PetscViewer{Float64},arg2::PetscViewer{Float64})
    err = ccall((:PetscViewerView,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},PetscViewer{Float64}),arg1,arg2)
    return err
end

function PetscViewerAppendOptionsPrefix(arg1::PetscViewer{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscViewerAppendOptionsPrefix,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Cstring),arg1,arg2)
    return err
end

function PetscViewerGetOptionsPrefix(arg1::PetscViewer{Float64},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscViewerGetOptionsPrefix,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PetscViewerSetFormat(arg1::PetscViewer{Float64},arg2::PetscViewerFormat)
    err = ccall((:PetscViewerSetFormat,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},PetscViewerFormat),arg1,arg2)
    return err
end

function PetscViewerPushFormat(arg1::PetscViewer{Float64},arg2::PetscViewerFormat)
    err = ccall((:PetscViewerPushFormat,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},PetscViewerFormat),arg1,arg2)
    return err
end

function PetscViewerPopFormat(arg1::PetscViewer{Float64})
    err = ccall((:PetscViewerPopFormat,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},),arg1)
    return err
end

function PetscViewerGetFormat(arg1::PetscViewer{Float64},arg2::Union{Ptr{PetscViewerFormat},StridedArray{PetscViewerFormat},Ptr{PetscViewerFormat},Ref{PetscViewerFormat}})
    err = ccall((:PetscViewerGetFormat,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Ptr{PetscViewerFormat}),arg1,arg2)
    return err
end

function PetscViewerFlush(arg1::PetscViewer{Float64})
    err = ccall((:PetscViewerFlush,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},),arg1)
    return err
end

function PetscOptionsGetViewer(arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{Ptr{PetscViewer{Float64}},StridedArray{PetscViewer{Float64}},Ptr{PetscViewer{Float64}},Ref{PetscViewer{Float64}}},arg5::Union{Ptr{PetscViewerFormat},StridedArray{PetscViewerFormat},Ptr{PetscViewerFormat},Ref{PetscViewerFormat}},arg6::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetViewer,petscRealDouble),PetscErrorCode,(comm_type,Cstring,Cstring,Ptr{PetscViewer{Float64}},Ptr{PetscViewerFormat},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscOptionsViewer_Private(arg1::Union{Ptr{PetscOptions{Float64}},StridedArray{PetscOptions{Float64}},Ptr{PetscOptions{Float64}},Ref{PetscOptions{Float64}}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Union{Ptr{PetscViewer{Float64}},StridedArray{PetscViewer{Float64}},Ptr{PetscViewer{Float64}},Ref{PetscViewer{Float64}}},arg6::Union{Ptr{PetscViewerFormat},StridedArray{PetscViewerFormat},Ptr{PetscViewerFormat},Ref{PetscViewerFormat}},arg7::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsViewer_Private,petscRealDouble),PetscErrorCode,(Ptr{PetscOptions{Float64}},Cstring,Cstring,Cstring,Ptr{PetscViewer{Float64}},Ptr{PetscViewerFormat},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

#= skipping function with undefined symbols: 
 function PetscViewerASCIIGetPointer(arg1::PetscViewer{Float64},arg2::Union{Ptr{Ptr{FILE}},StridedArray{Ptr{FILE}},Ptr{Ptr{FILE}},Ref{Ptr{FILE}}})
    ccall((:PetscViewerASCIIGetPointer,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Ptr{Ptr{FILE}}),arg1,arg2)
end 
=#
function PetscViewerFileGetMode(arg1::PetscViewer{Float64},arg2::Union{Ptr{PetscFileMode},StridedArray{PetscFileMode},Ptr{PetscFileMode},Ref{PetscFileMode}})
    err = ccall((:PetscViewerFileGetMode,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Ptr{PetscFileMode}),arg1,arg2)
    return err
end

function PetscViewerFileSetMode(arg1::PetscViewer{Float64},arg2::PetscFileMode)
    err = ccall((:PetscViewerFileSetMode,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},PetscFileMode),arg1,arg2)
    return err
end

function PetscViewerRead(arg1::PetscViewer{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::PetscDataType)
    err = ccall((:PetscViewerRead,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Ptr{Void},Int64,Ptr{Int64},PetscDataType),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscViewerASCIISynchronizedAllow(arg1::PetscViewer{Float64},arg2::PetscBool)
    err = ccall((:PetscViewerASCIISynchronizedAllow,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},PetscBool),arg1,arg2)
    return err
end

function PetscViewerASCIIPushTab(arg1::PetscViewer{Float64})
    err = ccall((:PetscViewerASCIIPushTab,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},),arg1)
    return err
end

function PetscViewerASCIIPopTab(arg1::PetscViewer{Float64})
    err = ccall((:PetscViewerASCIIPopTab,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},),arg1)
    return err
end

function PetscViewerASCIIUseTabs(arg1::PetscViewer{Float64},arg2::PetscBool)
    err = ccall((:PetscViewerASCIIUseTabs,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},PetscBool),arg1,arg2)
    return err
end

function PetscViewerASCIISetTab(arg1::PetscViewer{Float64},arg2::Integer)
    err = ccall((:PetscViewerASCIISetTab,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Int64),arg1,arg2)
    return err
end

function PetscViewerASCIIGetTab(arg1::PetscViewer{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscViewerASCIIGetTab,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscViewerASCIIAddTab(arg1::PetscViewer{Float64},arg2::Integer)
    err = ccall((:PetscViewerASCIIAddTab,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Int64),arg1,arg2)
    return err
end

function PetscViewerASCIISubtractTab(arg1::PetscViewer{Float64},arg2::Integer)
    err = ccall((:PetscViewerASCIISubtractTab,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Int64),arg1,arg2)
    return err
end

function PetscViewerASCIIRead(arg1::PetscViewer{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::PetscDataType)
    err = ccall((:PetscViewerASCIIRead,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Ptr{Void},Int64,Ptr{Int64},PetscDataType),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscViewerBinaryGetDescriptor(arg1::PetscViewer{Float64},arg2::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:PetscViewerBinaryGetDescriptor,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Ptr{Cint}),arg1,arg2)
    return err
end

#= skipping function with undefined symbols: 
 function PetscViewerBinaryGetInfoPointer(arg1::PetscViewer{Float64},arg2::Union{Ptr{Ptr{FILE}},StridedArray{Ptr{FILE}},Ptr{Ptr{FILE}},Ref{Ptr{FILE}}})
    ccall((:PetscViewerBinaryGetInfoPointer,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Ptr{Ptr{FILE}}),arg1,arg2)
end 
=#
function PetscViewerBinaryRead(arg1::PetscViewer{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::PetscDataType)
    err = ccall((:PetscViewerBinaryRead,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Ptr{Void},Int64,Ptr{Int64},PetscDataType),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscViewerBinaryWrite(arg1::PetscViewer{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Integer,arg4::PetscDataType,arg5::PetscBool)
    err = ccall((:PetscViewerBinaryWrite,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Ptr{Void},Int64,PetscDataType,PetscBool),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscViewerStringSetString(arg1::PetscViewer{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer)
    err = ccall((:PetscViewerStringSetString,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Cstring,Int64),arg1,arg2,arg3)
    return err
end

function PetscViewerDrawClear(arg1::PetscViewer{Float64})
    err = ccall((:PetscViewerDrawClear,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},),arg1)
    return err
end

function PetscViewerDrawSetHold(arg1::PetscViewer{Float64},arg2::PetscBool)
    err = ccall((:PetscViewerDrawSetHold,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},PetscBool),arg1,arg2)
    return err
end

function PetscViewerDrawGetHold(arg1::PetscViewer{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscViewerDrawGetHold,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscViewerDrawSetPause(arg1::PetscViewer{Float64},arg2::Float64)
    err = ccall((:PetscViewerDrawSetPause,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Float64),arg1,arg2)
    return err
end

function PetscViewerDrawGetPause(arg1::PetscViewer{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscViewerDrawGetPause,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Ptr{Float64}),arg1,arg2)
    return err
end

function PetscViewerDrawSetInfo(arg1::PetscViewer{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer)
    err = ccall((:PetscViewerDrawSetInfo,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Cstring,Cstring,Cint,Cint,Cint,Cint),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function PetscViewerDrawResize(arg1::PetscViewer{Float64},arg2::Integer,arg3::Integer)
    err = ccall((:PetscViewerDrawResize,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Cint,Cint),arg1,arg2,arg3)
    return err
end

function PetscViewerDrawSetBounds(arg1::PetscViewer{Float64},arg2::Integer,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscViewerDrawSetBounds,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Int64,Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function PetscViewerDrawGetBounds(arg1::PetscViewer{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:PetscViewerDrawGetBounds,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Ptr{Int64},Ptr{Ptr{Float64}}),arg1,arg2,arg3)
    return err
end

function PetscViewerSocketSetConnection(arg1::PetscViewer{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer)
    err = ccall((:PetscViewerSocketSetConnection,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Cstring,Cint),arg1,arg2,arg3)
    return err
end

function PetscViewerBinarySkipInfo(arg1::PetscViewer{Float64})
    err = ccall((:PetscViewerBinarySkipInfo,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},),arg1)
    return err
end

function PetscViewerBinarySetSkipInfo(arg1::PetscViewer{Float64},arg2::PetscBool)
    err = ccall((:PetscViewerBinarySetSkipInfo,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},PetscBool),arg1,arg2)
    return err
end

function PetscViewerBinaryGetSkipInfo(arg1::PetscViewer{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscViewerBinaryGetSkipInfo,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscViewerBinarySetSkipOptions(arg1::PetscViewer{Float64},arg2::PetscBool)
    err = ccall((:PetscViewerBinarySetSkipOptions,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},PetscBool),arg1,arg2)
    return err
end

function PetscViewerBinaryGetSkipOptions(arg1::PetscViewer{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscViewerBinaryGetSkipOptions,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscViewerBinarySetSkipHeader(arg1::PetscViewer{Float64},arg2::PetscBool)
    err = ccall((:PetscViewerBinarySetSkipHeader,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},PetscBool),arg1,arg2)
    return err
end

function PetscViewerBinaryGetSkipHeader(arg1::PetscViewer{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscViewerBinaryGetSkipHeader,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscViewerBinaryReadStringArray(arg1::PetscViewer{Float64},arg2::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}})
    err = ccall((:PetscViewerBinaryReadStringArray,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Ptr{Ptr{Ptr{UInt8}}}),arg1,arg2)
    return err
end

function PetscViewerBinaryWriteStringArray(arg1::PetscViewer{Float64},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscViewerBinaryWriteStringArray,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PetscViewerFileSetName(arg1::PetscViewer{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscViewerFileSetName,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Cstring),arg1,arg2)
    return err
end

function PetscViewerFileGetName(arg1::PetscViewer{Float64},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscViewerFileGetName,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

#= skipping function with undefined symbols: 
 function PetscViewerVUGetPointer(arg1::PetscViewer{Float64},arg2::Union{Ptr{Ptr{FILE}},StridedArray{Ptr{FILE}},Ptr{Ptr{FILE}},Ref{Ptr{FILE}}})
    ccall((:PetscViewerVUGetPointer,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Ptr{Ptr{FILE}}),arg1,arg2)
end 
=#
function PetscViewerVUSetVecSeen(arg1::PetscViewer{Float64},arg2::PetscBool)
    err = ccall((:PetscViewerVUSetVecSeen,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},PetscBool),arg1,arg2)
    return err
end

function PetscViewerVUGetVecSeen(arg1::PetscViewer{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscViewerVUGetVecSeen,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscViewerVUFlushDeferred(arg1::PetscViewer{Float64})
    err = ccall((:PetscViewerVUFlushDeferred,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},),arg1)
    return err
end

function PetscViewerMathematicaInitializePackage(arg0::Type{Float64})
    err = ccall((:PetscViewerMathematicaInitializePackage,petscRealDouble),PetscErrorCode,())
    return err
end

function PetscViewerMathematicaFinalizePackage(arg0::Type{Float64})
    err = ccall((:PetscViewerMathematicaFinalizePackage,petscRealDouble),PetscErrorCode,())
    return err
end

function PetscViewerMathematicaGetName(arg1::PetscViewer{Float64},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscViewerMathematicaGetName,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PetscViewerMathematicaSetName(arg1::PetscViewer{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscViewerMathematicaSetName,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Cstring),arg1,arg2)
    return err
end

function PetscViewerMathematicaClearName(arg1::PetscViewer{Float64})
    err = ccall((:PetscViewerMathematicaClearName,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},),arg1)
    return err
end

function PetscViewerMathematicaSkipPackets(arg1::PetscViewer{Float64},arg2::Integer)
    err = ccall((:PetscViewerMathematicaSkipPackets,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Cint),arg1,arg2)
    return err
end

function PetscViewerSiloGetName(arg1::PetscViewer{Float64},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscViewerSiloGetName,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PetscViewerSiloSetName(arg1::PetscViewer{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscViewerSiloSetName,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Cstring),arg1,arg2)
    return err
end

function PetscViewerSiloClearName(arg1::PetscViewer{Float64})
    err = ccall((:PetscViewerSiloClearName,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},),arg1)
    return err
end

function PetscViewerSiloGetMeshName(arg1::PetscViewer{Float64},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscViewerSiloGetMeshName,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PetscViewerSiloSetMeshName(arg1::PetscViewer{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscViewerSiloSetMeshName,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Cstring),arg1,arg2)
    return err
end

function PetscViewerSiloClearMeshName(arg1::PetscViewer{Float64})
    err = ccall((:PetscViewerSiloClearMeshName,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},),arg1)
    return err
end

function PetscViewerNetcdfOpen(arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::PetscFileMode,arg4::Union{Ptr{PetscViewer{Float64}},StridedArray{PetscViewer{Float64}},Ptr{PetscViewer{Float64}},Ref{PetscViewer{Float64}}})
    err = ccall((:PetscViewerNetcdfOpen,petscRealDouble),PetscErrorCode,(comm_type,Cstring,PetscFileMode,Ptr{PetscViewer{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscViewerNetcdfGetID(arg1::PetscViewer{Float64},arg2::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:PetscViewerNetcdfGetID,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Ptr{Cint}),arg1,arg2)
    return err
end

function PetscViewerVTKAddField(arg1::PetscViewer{Float64},arg2::PetscObject{Float64},PetscViewerVTKWriteFunction::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::PetscViewerVTKFieldType,arg4::PetscObject{Float64})
    err = ccall((:PetscViewerVTKAddField,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},PetscObject{Float64},Ptr{Void},PetscViewerVTKFieldType,PetscObject{Float64}),arg1,arg2,PetscViewerVTKWriteFunction,arg3,arg4)
    return err
end

function PetscViewerVTKOpen(arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::PetscFileMode,arg4::Union{Ptr{PetscViewer{Float64}},StridedArray{PetscViewer{Float64}},Ptr{PetscViewer{Float64}},Ref{PetscViewer{Float64}}})
    err = ccall((:PetscViewerVTKOpen,petscRealDouble),PetscErrorCode,(comm_type,Cstring,PetscFileMode,Ptr{PetscViewer{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function PETSC_VIEWER_STDOUT_(arg0::Type{Float64},arg1::MPI_Comm)
    err = ccall((:PETSC_VIEWER_STDOUT_,petscRealDouble),PetscViewer,(comm_type,),arg1)
    return err
end

function PetscViewerASCIIGetStdout(arg1::MPI_Comm,arg2::Union{Ptr{PetscViewer{Float64}},StridedArray{PetscViewer{Float64}},Ptr{PetscViewer{Float64}},Ref{PetscViewer{Float64}}})
    err = ccall((:PetscViewerASCIIGetStdout,petscRealDouble),PetscErrorCode,(comm_type,Ptr{PetscViewer{Float64}}),arg1,arg2)
    return err
end

function PETSC_VIEWER_STDERR_(arg0::Type{Float64},arg1::MPI_Comm)
    err = ccall((:PETSC_VIEWER_STDERR_,petscRealDouble),PetscViewer,(comm_type,),arg1)
    return err
end

function PetscViewerASCIIGetStderr(arg1::MPI_Comm,arg2::Union{Ptr{PetscViewer{Float64}},StridedArray{PetscViewer{Float64}},Ptr{PetscViewer{Float64}},Ref{PetscViewer{Float64}}})
    err = ccall((:PetscViewerASCIIGetStderr,petscRealDouble),PetscErrorCode,(comm_type,Ptr{PetscViewer{Float64}}),arg1,arg2)
    return err
end

function PETSC_VIEWER_DRAW_(arg0::Type{Float64},arg1::MPI_Comm)
    err = ccall((:PETSC_VIEWER_DRAW_,petscRealDouble),PetscViewer,(comm_type,),arg1)
    return err
end

function PETSC_VIEWER_SOCKET_(arg0::Type{Float64},arg1::MPI_Comm)
    err = ccall((:PETSC_VIEWER_SOCKET_,petscRealDouble),PetscViewer,(comm_type,),arg1)
    return err
end

function PETSC_VIEWER_BINARY_(arg0::Type{Float64},arg1::MPI_Comm)
    err = ccall((:PETSC_VIEWER_BINARY_,petscRealDouble),PetscViewer,(comm_type,),arg1)
    return err
end

function PETSC_VIEWER_MATLAB_(arg0::Type{Float64},arg1::MPI_Comm)
    err = ccall((:PETSC_VIEWER_MATLAB_,petscRealDouble),PetscViewer,(comm_type,),arg1)
    return err
end

function PETSC_VIEWER_HDF5_(arg0::Type{Float64},arg1::MPI_Comm)
    err = ccall((:PETSC_VIEWER_HDF5_,petscRealDouble),PetscViewer,(comm_type,),arg1)
    return err
end

function PetscViewerMatlabGetArray(arg1::PetscViewer{Float64},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscViewerMatlabGetArray,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Cint,Cint,Ptr{Float64},Cstring),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscViewerMatlabPutVariable(arg1::PetscViewer{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscViewerMatlabPutVariable,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Cstring,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function PetscViewersCreate(arg1::MPI_Comm,arg2::Union{Ptr{PetscViewers{Float64}},StridedArray{PetscViewers{Float64}},Ptr{PetscViewers{Float64}},Ref{PetscViewers{Float64}}})
    err = ccall((:PetscViewersCreate,petscRealDouble),PetscErrorCode,(comm_type,Ptr{PetscViewers}),arg1,arg2)
    return err
end

function PetscViewersDestroy(arg1::Union{Ptr{PetscViewers{Float64}},StridedArray{PetscViewers{Float64}},Ptr{PetscViewers{Float64}},Ref{PetscViewers{Float64}}})
    err = ccall((:PetscViewersDestroy,petscRealDouble),PetscErrorCode,(Ptr{PetscViewers},),arg1)
    return err
end

function PetscViewersGetViewer(arg1::PetscViewers{Float64},arg2::Integer,arg3::Union{Ptr{PetscViewer{Float64}},StridedArray{PetscViewer{Float64}},Ptr{PetscViewer{Float64}},Ref{PetscViewer{Float64}}})
    err = ccall((:PetscViewersGetViewer,petscRealDouble),PetscErrorCode,(PetscViewers,Int64,Ptr{PetscViewer{Float64}}),arg1,arg2,arg3)
    return err
end

function PetscTableCreate(arg1::Integer,arg2::Integer,arg3::Union{Ptr{PetscTable{Float64}},StridedArray{PetscTable{Float64}},Ptr{PetscTable{Float64}},Ref{PetscTable{Float64}}})
    err = ccall((:PetscTableCreate,petscRealDouble),PetscErrorCode,(Int64,Int64,Ptr{PetscTable}),arg1,arg2,arg3)
    return err
end

function PetscTableCreateCopy(arg1::PetscTable{Float64},arg2::Union{Ptr{PetscTable{Float64}},StridedArray{PetscTable{Float64}},Ptr{PetscTable{Float64}},Ref{PetscTable{Float64}}})
    err = ccall((:PetscTableCreateCopy,petscRealDouble),PetscErrorCode,(PetscTable,Ptr{PetscTable}),arg1,arg2)
    return err
end

function PetscTableDestroy(arg1::Union{Ptr{PetscTable{Float64}},StridedArray{PetscTable{Float64}},Ptr{PetscTable{Float64}},Ref{PetscTable{Float64}}})
    err = ccall((:PetscTableDestroy,petscRealDouble),PetscErrorCode,(Ptr{PetscTable},),arg1)
    return err
end

function PetscTableGetCount(arg1::PetscTable{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscTableGetCount,petscRealDouble),PetscErrorCode,(PetscTable,Ptr{Int64}),arg1,arg2)
    return err
end

function PetscTableIsEmpty(arg1::PetscTable{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscTableIsEmpty,petscRealDouble),PetscErrorCode,(PetscTable,Ptr{Int64}),arg1,arg2)
    return err
end

function PetscTableAddExpand(arg1::PetscTable{Float64},arg2::Integer,arg3::Integer,arg4::InsertMode)
    err = ccall((:PetscTableAddExpand,petscRealDouble),PetscErrorCode,(PetscTable,Int64,Int64,InsertMode),arg1,arg2,arg3,arg4)
    return err
end

function PetscTableAddCountExpand(arg1::PetscTable{Float64},arg2::Integer)
    err = ccall((:PetscTableAddCountExpand,petscRealDouble),PetscErrorCode,(PetscTable,Int64),arg1,arg2)
    return err
end

function PetscTableGetHeadPosition(arg1::PetscTable{Float64},arg2::Union{Ptr{PetscTablePosition},StridedArray{PetscTablePosition},Ptr{PetscTablePosition},Ref{PetscTablePosition}})
    err = ccall((:PetscTableGetHeadPosition,petscRealDouble),PetscErrorCode,(PetscTable,Ptr{PetscTablePosition}),arg1,arg2)
    return err
end

function PetscTableGetNext(arg1::PetscTable{Float64},arg2::Union{Ptr{PetscTablePosition},StridedArray{PetscTablePosition},Ptr{PetscTablePosition},Ref{PetscTablePosition}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscTableGetNext,petscRealDouble),PetscErrorCode,(PetscTable,Ptr{PetscTablePosition},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function PetscTableRemoveAll(arg1::PetscTable{Float64})
    err = ccall((:PetscTableRemoveAll,petscRealDouble),PetscErrorCode,(PetscTable,),arg1)
    return err
end

function PetscMatlabEngineCreate(arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{PetscMatlabEngine{Float64}},StridedArray{PetscMatlabEngine{Float64}},Ptr{PetscMatlabEngine{Float64}},Ref{PetscMatlabEngine{Float64}}})
    err = ccall((:PetscMatlabEngineCreate,petscRealDouble),PetscErrorCode,(comm_type,Cstring,Ptr{PetscMatlabEngine{Float64}}),arg1,arg2,arg3)
    return err
end

function PetscMatlabEngineDestroy(arg1::Union{Ptr{PetscMatlabEngine{Float64}},StridedArray{PetscMatlabEngine{Float64}},Ptr{PetscMatlabEngine{Float64}},Ref{PetscMatlabEngine{Float64}}})
    err = ccall((:PetscMatlabEngineDestroy,petscRealDouble),PetscErrorCode,(Ptr{PetscMatlabEngine{Float64}},),arg1)
    return err
end

function PetscMatlabEngineGetOutput(arg1::PetscMatlabEngine{Float64},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscMatlabEngineGetOutput,petscRealDouble),PetscErrorCode,(PetscMatlabEngine{Float64},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

#= skipping function with undefined symbols: 
 function PetscMatlabEnginePrintOutput(arg1::PetscMatlabEngine{Float64},arg2::Union{Ptr{FILE},StridedArray{FILE},Ptr{FILE},Ref{FILE}})
    ccall((:PetscMatlabEnginePrintOutput,petscRealDouble),PetscErrorCode,(PetscMatlabEngine{Float64},Ptr{FILE}),arg1,arg2)
end 
=#
function PetscMatlabEnginePut(arg1::PetscMatlabEngine{Float64},arg2::PetscObject{Float64})
    err = ccall((:PetscMatlabEnginePut,petscRealDouble),PetscErrorCode,(PetscMatlabEngine{Float64},PetscObject{Float64}),arg1,arg2)
    return err
end

function PetscMatlabEngineGet(arg1::PetscMatlabEngine{Float64},arg2::PetscObject{Float64})
    err = ccall((:PetscMatlabEngineGet,petscRealDouble),PetscErrorCode,(PetscMatlabEngine{Float64},PetscObject{Float64}),arg1,arg2)
    return err
end

function PetscMatlabEnginePutArray(arg1::PetscMatlabEngine{Float64},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscMatlabEnginePutArray,petscRealDouble),PetscErrorCode,(PetscMatlabEngine{Float64},Cint,Cint,Ptr{Float64},Cstring),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscMatlabEngineGetArray(arg1::PetscMatlabEngine{Float64},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscMatlabEngineGetArray,petscRealDouble),PetscErrorCode,(PetscMatlabEngine{Float64},Cint,Cint,Ptr{Float64},Cstring),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PETSC_MATLAB_ENGINE_(arg0::Type{Float64},arg1::MPI_Comm)
    err = ccall((:PETSC_MATLAB_ENGINE_,petscRealDouble),PetscMatlabEngine,(comm_type,),arg1)
    return err
end

function PetscDrawInitializePackage(arg0::Type{Float64})
    err = ccall((:PetscDrawInitializePackage,petscRealDouble),PetscErrorCode,())
    return err
end

function PetscDrawRegister(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscDrawRegister,petscRealDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function PetscDrawGetType(arg1::PetscDraw{Float64},arg2::Union{Ptr{PetscDrawType},StridedArray{PetscDrawType},Ptr{PetscDrawType},Ref{PetscDrawType}})
    err = ccall((:PetscDrawGetType,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},Ptr{PetscDrawType}),arg1,arg2)
    return err
end

function PetscDrawSetType(arg1::PetscDraw{Float64},arg2::PetscDrawType)
    err = ccall((:PetscDrawSetType,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},PetscDrawType),arg1,arg2)
    return err
end

function PetscDrawCreate(arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Union{Ptr{PetscDraw{Float64}},StridedArray{PetscDraw{Float64}},Ptr{PetscDraw{Float64}},Ref{PetscDraw{Float64}}})
    err = ccall((:PetscDrawCreate,petscRealDouble),PetscErrorCode,(comm_type,Cstring,Cstring,Cint,Cint,Cint,Cint,Ptr{PetscDraw{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function PetscDrawSetFromOptions(arg1::PetscDraw{Float64})
    err = ccall((:PetscDrawSetFromOptions,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},),arg1)
    return err
end

function PetscDrawSetSave(arg1::PetscDraw{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::PetscBool)
    err = ccall((:PetscDrawSetSave,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},Cstring,PetscBool),arg1,arg2,arg3)
    return err
end

function PetscDrawSetSaveFinalImage(arg1::PetscDraw{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscDrawSetSaveFinalImage,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},Cstring),arg1,arg2)
    return err
end

function PetscDrawView(arg1::PetscDraw{Float64},arg2::PetscViewer{Float64})
    err = ccall((:PetscDrawView,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},PetscViewer{Float64}),arg1,arg2)
    return err
end

function PetscDrawOpenGLUT(arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Union{Ptr{PetscDraw{Float64}},StridedArray{PetscDraw{Float64}},Ptr{PetscDraw{Float64}},Ref{PetscDraw{Float64}}})
    err = ccall((:PetscDrawOpenGLUT,petscRealDouble),PetscErrorCode,(comm_type,Cstring,Cstring,Cint,Cint,Cint,Cint,Ptr{PetscDraw{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function PetscDrawOpenNull(arg1::MPI_Comm,arg2::Union{Ptr{PetscDraw{Float64}},StridedArray{PetscDraw{Float64}},Ptr{PetscDraw{Float64}},Ref{PetscDraw{Float64}}})
    err = ccall((:PetscDrawOpenNull,petscRealDouble),PetscErrorCode,(comm_type,Ptr{PetscDraw{Float64}}),arg1,arg2)
    return err
end

function PetscDrawDestroy(arg1::Union{Ptr{PetscDraw{Float64}},StridedArray{PetscDraw{Float64}},Ptr{PetscDraw{Float64}},Ref{PetscDraw{Float64}}})
    err = ccall((:PetscDrawDestroy,petscRealDouble),PetscErrorCode,(Ptr{PetscDraw{Float64}},),arg1)
    return err
end

function PetscDrawIsNull(arg1::PetscDraw{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscDrawIsNull,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscDrawGetPopup(arg1::PetscDraw{Float64},arg2::Union{Ptr{PetscDraw{Float64}},StridedArray{PetscDraw{Float64}},Ptr{PetscDraw{Float64}},Ref{PetscDraw{Float64}}})
    err = ccall((:PetscDrawGetPopup,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},Ptr{PetscDraw{Float64}}),arg1,arg2)
    return err
end

function PetscDrawCheckResizedWindow(arg1::PetscDraw{Float64})
    err = ccall((:PetscDrawCheckResizedWindow,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},),arg1)
    return err
end

function PetscDrawResizeWindow(arg1::PetscDraw{Float64},arg2::Integer,arg3::Integer)
    err = ccall((:PetscDrawResizeWindow,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},Cint,Cint),arg1,arg2,arg3)
    return err
end

function PetscDrawScalePopup(arg1::PetscDraw{Float64},arg2::Float64,arg3::Float64)
    err = ccall((:PetscDrawScalePopup,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},Float64,Float64),arg1,arg2,arg3)
    return err
end

function PetscDrawPixelToCoordinate(arg1::PetscDraw{Float64},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscDrawPixelToCoordinate,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},Int64,Int64,Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDrawCoordinateToPixel(arg1::PetscDraw{Float64},arg2::Float64,arg3::Float64,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscDrawCoordinateToPixel,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},Float64,Float64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDrawIndicatorFunction(arg1::PetscDraw{Float64},arg2::Float64,arg3::Float64,arg4::Float64,arg5::Float64,arg6::Integer,arg7::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg8::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscDrawIndicatorFunction,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},Float64,Float64,Float64,Float64,Cint,Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function PetscDrawLine(arg1::PetscDraw{Float64},arg2::Float64,arg3::Float64,arg4::Float64,arg5::Float64,arg6::Integer)
    err = ccall((:PetscDrawLine,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},Float64,Float64,Float64,Float64,Cint),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscDrawArrow(arg1::PetscDraw{Float64},arg2::Float64,arg3::Float64,arg4::Float64,arg5::Float64,arg6::Integer)
    err = ccall((:PetscDrawArrow,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},Float64,Float64,Float64,Float64,Cint),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscDrawLineSetWidth(arg1::PetscDraw{Float64},arg2::Float64)
    err = ccall((:PetscDrawLineSetWidth,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},Float64),arg1,arg2)
    return err
end

function PetscDrawLineGetWidth(arg1::PetscDraw{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscDrawLineGetWidth,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},Ptr{Float64}),arg1,arg2)
    return err
end

function PetscDrawMarker(arg1::PetscDraw{Float64},arg2::Float64,arg3::Float64,arg4::Integer)
    err = ccall((:PetscDrawMarker,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},Float64,Float64,Cint),arg1,arg2,arg3,arg4)
    return err
end

function PetscDrawSetMarkerType(arg1::PetscDraw{Float64},arg2::PetscDrawMarkerType)
    err = ccall((:PetscDrawSetMarkerType,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},PetscDrawMarkerType),arg1,arg2)
    return err
end

function PetscDrawGetMarkerType(arg1::PetscDraw{Float64},arg2::Union{Ptr{PetscDrawMarkerType},StridedArray{PetscDrawMarkerType},Ptr{PetscDrawMarkerType},Ref{PetscDrawMarkerType}})
    err = ccall((:PetscDrawGetMarkerType,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},Ptr{PetscDrawMarkerType}),arg1,arg2)
    return err
end

function PetscDrawPoint(arg1::PetscDraw{Float64},arg2::Float64,arg3::Float64,arg4::Integer)
    err = ccall((:PetscDrawPoint,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},Float64,Float64,Cint),arg1,arg2,arg3,arg4)
    return err
end

function PetscDrawPointPixel(arg1::PetscDraw{Float64},arg2::Integer,arg3::Integer,arg4::Integer)
    err = ccall((:PetscDrawPointPixel,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},Int64,Int64,Cint),arg1,arg2,arg3,arg4)
    return err
end

function PetscDrawPointSetSize(arg1::PetscDraw{Float64},arg2::Float64)
    err = ccall((:PetscDrawPointSetSize,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},Float64),arg1,arg2)
    return err
end

function PetscDrawRectangle(arg1::PetscDraw{Float64},arg2::Float64,arg3::Float64,arg4::Float64,arg5::Float64,arg6::Integer,arg7::Integer,arg8::Integer,arg9::Integer)
    err = ccall((:PetscDrawRectangle,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},Float64,Float64,Float64,Float64,Cint,Cint,Cint,Cint),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
    return err
end

function PetscDrawTriangle(arg1::PetscDraw{Float64},arg2::Float64,arg3::Float64,arg4::Float64,arg5::Float64,arg6::Float64,arg7::Float64,arg8::Integer,arg9::Integer,arg10::Integer)
    err = ccall((:PetscDrawTriangle,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},Float64,Float64,Float64,Float64,Float64,Float64,Cint,Cint,Cint),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function PetscDrawEllipse(arg1::PetscDraw{Float64},arg2::Float64,arg3::Float64,arg4::Float64,arg5::Float64,arg6::Integer)
    err = ccall((:PetscDrawEllipse,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},Float64,Float64,Float64,Float64,Cint),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscDrawTensorContourPatch(arg1::PetscDraw{Float64},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg6::Float64,arg7::Float64,arg8::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscDrawTensorContourPatch,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},Cint,Cint,Ptr{Float64},Ptr{Float64},Float64,Float64,Ptr{Float64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function PetscDrawTensorContour(arg1::PetscDraw{Float64},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscDrawTensorContour,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},Cint,Cint,Ptr{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscDrawString(arg1::PetscDraw{Float64},arg2::Float64,arg3::Float64,arg4::Integer,arg5::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscDrawString,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},Float64,Float64,Cint,Cstring),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDrawStringCentered(arg1::PetscDraw{Float64},arg2::Float64,arg3::Float64,arg4::Integer,arg5::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscDrawStringCentered,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},Float64,Float64,Cint,Cstring),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDrawStringBoxed(arg1::PetscDraw{Float64},arg2::Float64,arg3::Float64,arg4::Integer,arg5::Integer,arg6::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg7::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg8::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscDrawStringBoxed,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},Float64,Float64,Cint,Cint,Cstring,Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function PetscDrawStringBoxedSize(arg1::PetscDraw{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscDrawStringBoxedSize,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},Cstring,Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function PetscDrawStringVertical(arg1::PetscDraw{Float64},arg2::Float64,arg3::Float64,arg4::Integer,arg5::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscDrawStringVertical,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},Float64,Float64,Cint,Cstring),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDrawStringSetSize(arg1::PetscDraw{Float64},arg2::Float64,arg3::Float64)
    err = ccall((:PetscDrawStringSetSize,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},Float64,Float64),arg1,arg2,arg3)
    return err
end

function PetscDrawStringGetSize(arg1::PetscDraw{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscDrawStringGetSize,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function PetscDrawSetViewPort(arg1::PetscDraw{Float64},arg2::Float64,arg3::Float64,arg4::Float64,arg5::Float64)
    err = ccall((:PetscDrawSetViewPort,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},Float64,Float64,Float64,Float64),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDrawGetViewPort(arg1::PetscDraw{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscDrawGetViewPort,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDrawSplitViewPort(arg1::PetscDraw{Float64})
    err = ccall((:PetscDrawSplitViewPort,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},),arg1)
    return err
end

function PetscDrawSetCoordinates(arg1::PetscDraw{Float64},arg2::Float64,arg3::Float64,arg4::Float64,arg5::Float64)
    err = ccall((:PetscDrawSetCoordinates,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},Float64,Float64,Float64,Float64),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDrawGetCoordinates(arg1::PetscDraw{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscDrawGetCoordinates,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDrawSetTitle(arg1::PetscDraw{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscDrawSetTitle,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},Cstring),arg1,arg2)
    return err
end

function PetscDrawAppendTitle(arg1::PetscDraw{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscDrawAppendTitle,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},Cstring),arg1,arg2)
    return err
end

function PetscDrawGetTitle(arg1::PetscDraw{Float64},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscDrawGetTitle,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PetscDrawSetPause(arg1::PetscDraw{Float64},arg2::Float64)
    err = ccall((:PetscDrawSetPause,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},Float64),arg1,arg2)
    return err
end

function PetscDrawGetPause(arg1::PetscDraw{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscDrawGetPause,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},Ptr{Float64}),arg1,arg2)
    return err
end

function PetscDrawPause(arg1::PetscDraw{Float64})
    err = ccall((:PetscDrawPause,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},),arg1)
    return err
end

function PetscDrawSetDoubleBuffer(arg1::PetscDraw{Float64})
    err = ccall((:PetscDrawSetDoubleBuffer,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},),arg1)
    return err
end

function PetscDrawFlush(arg1::PetscDraw{Float64})
    err = ccall((:PetscDrawFlush,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},),arg1)
    return err
end

function PetscDrawSynchronizedFlush(arg1::PetscDraw{Float64})
    err = ccall((:PetscDrawSynchronizedFlush,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},),arg1)
    return err
end

function PetscDrawClear(arg1::PetscDraw{Float64})
    err = ccall((:PetscDrawClear,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},),arg1)
    return err
end

function PetscDrawSave(arg1::PetscDraw{Float64})
    err = ccall((:PetscDrawSave,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},),arg1)
    return err
end

function PetscDrawSynchronizedClear(arg1::PetscDraw{Float64})
    err = ccall((:PetscDrawSynchronizedClear,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},),arg1)
    return err
end

function PetscDrawBOP(arg1::PetscDraw{Float64})
    err = ccall((:PetscDrawBOP,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},),arg1)
    return err
end

function PetscDrawEOP(arg1::PetscDraw{Float64})
    err = ccall((:PetscDrawEOP,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},),arg1)
    return err
end

function PetscDrawSetDisplay(arg1::PetscDraw{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscDrawSetDisplay,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},Cstring),arg1,arg2)
    return err
end

function PetscDrawGetSingleton(arg1::PetscDraw{Float64},arg2::Union{Ptr{PetscDraw{Float64}},StridedArray{PetscDraw{Float64}},Ptr{PetscDraw{Float64}},Ref{PetscDraw{Float64}}})
    err = ccall((:PetscDrawGetSingleton,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},Ptr{PetscDraw{Float64}}),arg1,arg2)
    return err
end

function PetscDrawRestoreSingleton(arg1::PetscDraw{Float64},arg2::Union{Ptr{PetscDraw{Float64}},StridedArray{PetscDraw{Float64}},Ptr{PetscDraw{Float64}},Ref{PetscDraw{Float64}}})
    err = ccall((:PetscDrawRestoreSingleton,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},Ptr{PetscDraw{Float64}}),arg1,arg2)
    return err
end

function PetscDrawGetCurrentPoint(arg1::PetscDraw{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscDrawGetCurrentPoint,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function PetscDrawSetCurrentPoint(arg1::PetscDraw{Float64},arg2::Float64,arg3::Float64)
    err = ccall((:PetscDrawSetCurrentPoint,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},Float64,Float64),arg1,arg2,arg3)
    return err
end

function PetscDrawPushCurrentPoint(arg1::PetscDraw{Float64},arg2::Float64,arg3::Float64)
    err = ccall((:PetscDrawPushCurrentPoint,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},Float64,Float64),arg1,arg2,arg3)
    return err
end

function PetscDrawPopCurrentPoint(arg1::PetscDraw{Float64})
    err = ccall((:PetscDrawPopCurrentPoint,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},),arg1)
    return err
end

function PetscDrawGetBoundingBox(arg1::PetscDraw{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscDrawGetBoundingBox,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDrawGetMouseButton(arg1::PetscDraw{Float64},arg2::Union{Ptr{PetscDrawButton},StridedArray{PetscDrawButton},Ptr{PetscDrawButton},Ref{PetscDrawButton}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscDrawGetMouseButton,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},Ptr{PetscDrawButton},Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscDrawSynchronizedGetMouseButton(arg1::PetscDraw{Float64},arg2::Union{Ptr{PetscDrawButton},StridedArray{PetscDrawButton},Ptr{PetscDrawButton},Ref{PetscDrawButton}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscDrawSynchronizedGetMouseButton,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},Ptr{PetscDrawButton},Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscDrawZoom(arg1::PetscDraw{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscDrawZoom,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function PetscDrawViewPortsCreate(arg1::PetscDraw{Float64},arg2::Integer,arg3::Union{Ptr{Ptr{PetscDrawViewPorts}},StridedArray{Ptr{PetscDrawViewPorts}},Ptr{Ptr{PetscDrawViewPorts}},Ref{Ptr{PetscDrawViewPorts}}})
    err = ccall((:PetscDrawViewPortsCreate,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},Int64,Ptr{Ptr{PetscDrawViewPorts}}),arg1,arg2,arg3)
    return err
end

function PetscDrawViewPortsCreateRect(arg1::PetscDraw{Float64},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Ptr{PetscDrawViewPorts}},StridedArray{Ptr{PetscDrawViewPorts}},Ptr{Ptr{PetscDrawViewPorts}},Ref{Ptr{PetscDrawViewPorts}}})
    err = ccall((:PetscDrawViewPortsCreateRect,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},Int64,Int64,Ptr{Ptr{PetscDrawViewPorts}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscDrawViewPortsDestroy(arg0::Type{Float64},arg1::Union{Ptr{PetscDrawViewPorts},StridedArray{PetscDrawViewPorts},Ptr{PetscDrawViewPorts},Ref{PetscDrawViewPorts}})
    err = ccall((:PetscDrawViewPortsDestroy,petscRealDouble),PetscErrorCode,(Ptr{PetscDrawViewPorts},),arg1)
    return err
end

function PetscDrawViewPortsSet(arg0::Type{Float64},arg1::Union{Ptr{PetscDrawViewPorts},StridedArray{PetscDrawViewPorts},Ptr{PetscDrawViewPorts},Ref{PetscDrawViewPorts}},arg2::Integer)
    err = ccall((:PetscDrawViewPortsSet,petscRealDouble),PetscErrorCode,(Ptr{PetscDrawViewPorts},Int64),arg1,arg2)
    return err
end

function PetscDrawAxisCreate(arg1::PetscDraw{Float64},arg2::Union{Ptr{PetscDrawAxis{Float64}},StridedArray{PetscDrawAxis{Float64}},Ptr{PetscDrawAxis{Float64}},Ref{PetscDrawAxis{Float64}}})
    err = ccall((:PetscDrawAxisCreate,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},Ptr{PetscDrawAxis{Float64}}),arg1,arg2)
    return err
end

function PetscDrawAxisDestroy(arg1::Union{Ptr{PetscDrawAxis{Float64}},StridedArray{PetscDrawAxis{Float64}},Ptr{PetscDrawAxis{Float64}},Ref{PetscDrawAxis{Float64}}})
    err = ccall((:PetscDrawAxisDestroy,petscRealDouble),PetscErrorCode,(Ptr{PetscDrawAxis{Float64}},),arg1)
    return err
end

function PetscDrawAxisDraw(arg1::PetscDrawAxis{Float64})
    err = ccall((:PetscDrawAxisDraw,petscRealDouble),PetscErrorCode,(PetscDrawAxis{Float64},),arg1)
    return err
end

function PetscDrawAxisSetLimits(arg1::PetscDrawAxis{Float64},arg2::Float64,arg3::Float64,arg4::Float64,arg5::Float64)
    err = ccall((:PetscDrawAxisSetLimits,petscRealDouble),PetscErrorCode,(PetscDrawAxis{Float64},Float64,Float64,Float64,Float64),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDrawAxisGetLimits(arg1::PetscDrawAxis{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscDrawAxisGetLimits,petscRealDouble),PetscErrorCode,(PetscDrawAxis{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDrawAxisSetHoldLimits(arg1::PetscDrawAxis{Float64},arg2::PetscBool)
    err = ccall((:PetscDrawAxisSetHoldLimits,petscRealDouble),PetscErrorCode,(PetscDrawAxis{Float64},PetscBool),arg1,arg2)
    return err
end

function PetscDrawAxisSetColors(arg1::PetscDrawAxis{Float64},arg2::Integer,arg3::Integer,arg4::Integer)
    err = ccall((:PetscDrawAxisSetColors,petscRealDouble),PetscErrorCode,(PetscDrawAxis{Float64},Cint,Cint,Cint),arg1,arg2,arg3,arg4)
    return err
end

function PetscDrawAxisSetLabels(arg1::PetscDrawAxis{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscDrawAxisSetLabels,petscRealDouble),PetscErrorCode,(PetscDrawAxis{Float64},Cstring,Cstring,Cstring),arg1,arg2,arg3,arg4)
    return err
end

function PetscDrawLGCreate(arg1::PetscDraw{Float64},arg2::Integer,arg3::Union{Ptr{PetscDrawLG{Float64}},StridedArray{PetscDrawLG{Float64}},Ptr{PetscDrawLG{Float64}},Ref{PetscDrawLG{Float64}}})
    err = ccall((:PetscDrawLGCreate,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},Int64,Ptr{PetscDrawLG{Float64}}),arg1,arg2,arg3)
    return err
end

function PetscDrawLGDestroy(arg1::Union{Ptr{PetscDrawLG{Float64}},StridedArray{PetscDrawLG{Float64}},Ptr{PetscDrawLG{Float64}},Ref{PetscDrawLG{Float64}}})
    err = ccall((:PetscDrawLGDestroy,petscRealDouble),PetscErrorCode,(Ptr{PetscDrawLG{Float64}},),arg1)
    return err
end

function PetscDrawLGAddPoint(arg1::PetscDrawLG{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscDrawLGAddPoint,petscRealDouble),PetscErrorCode,(PetscDrawLG{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function PetscDrawLGAddCommonPoint(arg1::PetscDrawLG{Float64},arg2::Float64,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscDrawLGAddCommonPoint,petscRealDouble),PetscErrorCode,(PetscDrawLG{Float64},Float64,Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function PetscDrawLGAddPoints(arg1::PetscDrawLG{Float64},arg2::Integer,arg3::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg4::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:PetscDrawLGAddPoints,petscRealDouble),PetscErrorCode,(PetscDrawLG{Float64},Int64,Ptr{Ptr{Float64}},Ptr{Ptr{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscDrawLGDraw(arg1::PetscDrawLG{Float64})
    err = ccall((:PetscDrawLGDraw,petscRealDouble),PetscErrorCode,(PetscDrawLG{Float64},),arg1)
    return err
end

function PetscDrawLGView(arg1::PetscDrawLG{Float64},arg2::PetscViewer{Float64})
    err = ccall((:PetscDrawLGView,petscRealDouble),PetscErrorCode,(PetscDrawLG{Float64},PetscViewer{Float64}),arg1,arg2)
    return err
end

function PetscDrawLGReset(arg1::PetscDrawLG{Float64})
    err = ccall((:PetscDrawLGReset,petscRealDouble),PetscErrorCode,(PetscDrawLG{Float64},),arg1)
    return err
end

function PetscDrawLGSetDimension(arg1::PetscDrawLG{Float64},arg2::Integer)
    err = ccall((:PetscDrawLGSetDimension,petscRealDouble),PetscErrorCode,(PetscDrawLG{Float64},Int64),arg1,arg2)
    return err
end

function PetscDrawLGGetDimension(arg1::PetscDrawLG{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscDrawLGGetDimension,petscRealDouble),PetscErrorCode,(PetscDrawLG{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscDrawLGSetLegend(arg1::PetscDrawLG{Float64},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscDrawLGSetLegend,petscRealDouble),PetscErrorCode,(PetscDrawLG{Float64},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PetscDrawLGGetAxis(arg1::PetscDrawLG{Float64},arg2::Union{Ptr{PetscDrawAxis{Float64}},StridedArray{PetscDrawAxis{Float64}},Ptr{PetscDrawAxis{Float64}},Ref{PetscDrawAxis{Float64}}})
    err = ccall((:PetscDrawLGGetAxis,petscRealDouble),PetscErrorCode,(PetscDrawLG{Float64},Ptr{PetscDrawAxis{Float64}}),arg1,arg2)
    return err
end

function PetscDrawLGGetDraw(arg1::PetscDrawLG{Float64},arg2::Union{Ptr{PetscDraw{Float64}},StridedArray{PetscDraw{Float64}},Ptr{PetscDraw{Float64}},Ref{PetscDraw{Float64}}})
    err = ccall((:PetscDrawLGGetDraw,petscRealDouble),PetscErrorCode,(PetscDrawLG{Float64},Ptr{PetscDraw{Float64}}),arg1,arg2)
    return err
end

function PetscDrawLGSetUseMarkers(arg1::PetscDrawLG{Float64},arg2::PetscBool)
    err = ccall((:PetscDrawLGSetUseMarkers,petscRealDouble),PetscErrorCode,(PetscDrawLG{Float64},PetscBool),arg1,arg2)
    return err
end

function PetscDrawLGSetLimits(arg1::PetscDrawLG{Float64},arg2::Float64,arg3::Float64,arg4::Float64,arg5::Float64)
    err = ccall((:PetscDrawLGSetLimits,petscRealDouble),PetscErrorCode,(PetscDrawLG{Float64},Float64,Float64,Float64,Float64),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDrawLGSetColors(arg1::PetscDrawLG{Float64},arg2::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:PetscDrawLGSetColors,petscRealDouble),PetscErrorCode,(PetscDrawLG{Float64},Ptr{Cint}),arg1,arg2)
    return err
end

function PetscDrawLGSetFromOptions(arg1::PetscDrawLG{Float64})
    err = ccall((:PetscDrawLGSetFromOptions,petscRealDouble),PetscErrorCode,(PetscDrawLG{Float64},),arg1)
    return err
end

function PetscDrawSPCreate(arg1::PetscDraw{Float64},arg2::Integer,arg3::Union{Ptr{PetscDrawSP{Float64}},StridedArray{PetscDrawSP{Float64}},Ptr{PetscDrawSP{Float64}},Ref{PetscDrawSP{Float64}}})
    err = ccall((:PetscDrawSPCreate,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},Cint,Ptr{PetscDrawSP{Float64}}),arg1,arg2,arg3)
    return err
end

function PetscDrawSPDestroy(arg1::Union{Ptr{PetscDrawSP{Float64}},StridedArray{PetscDrawSP{Float64}},Ptr{PetscDrawSP{Float64}},Ref{PetscDrawSP{Float64}}})
    err = ccall((:PetscDrawSPDestroy,petscRealDouble),PetscErrorCode,(Ptr{PetscDrawSP{Float64}},),arg1)
    return err
end

function PetscDrawSPAddPoint(arg1::PetscDrawSP{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscDrawSPAddPoint,petscRealDouble),PetscErrorCode,(PetscDrawSP{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function PetscDrawSPAddPoints(arg1::PetscDrawSP{Float64},arg2::Integer,arg3::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg4::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:PetscDrawSPAddPoints,petscRealDouble),PetscErrorCode,(PetscDrawSP{Float64},Cint,Ptr{Ptr{Float64}},Ptr{Ptr{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscDrawSPDraw(arg1::PetscDrawSP{Float64},arg2::PetscBool)
    err = ccall((:PetscDrawSPDraw,petscRealDouble),PetscErrorCode,(PetscDrawSP{Float64},PetscBool),arg1,arg2)
    return err
end

function PetscDrawSPReset(arg1::PetscDrawSP{Float64})
    err = ccall((:PetscDrawSPReset,petscRealDouble),PetscErrorCode,(PetscDrawSP{Float64},),arg1)
    return err
end

function PetscDrawSPSetDimension(arg1::PetscDrawSP{Float64},arg2::Integer)
    err = ccall((:PetscDrawSPSetDimension,petscRealDouble),PetscErrorCode,(PetscDrawSP{Float64},Cint),arg1,arg2)
    return err
end

function PetscDrawSPGetAxis(arg1::PetscDrawSP{Float64},arg2::Union{Ptr{PetscDrawAxis{Float64}},StridedArray{PetscDrawAxis{Float64}},Ptr{PetscDrawAxis{Float64}},Ref{PetscDrawAxis{Float64}}})
    err = ccall((:PetscDrawSPGetAxis,petscRealDouble),PetscErrorCode,(PetscDrawSP{Float64},Ptr{PetscDrawAxis{Float64}}),arg1,arg2)
    return err
end

function PetscDrawSPGetDraw(arg1::PetscDrawSP{Float64},arg2::Union{Ptr{PetscDraw{Float64}},StridedArray{PetscDraw{Float64}},Ptr{PetscDraw{Float64}},Ref{PetscDraw{Float64}}})
    err = ccall((:PetscDrawSPGetDraw,petscRealDouble),PetscErrorCode,(PetscDrawSP{Float64},Ptr{PetscDraw{Float64}}),arg1,arg2)
    return err
end

function PetscDrawSPSetLimits(arg1::PetscDrawSP{Float64},arg2::Float64,arg3::Float64,arg4::Float64,arg5::Float64)
    err = ccall((:PetscDrawSPSetLimits,petscRealDouble),PetscErrorCode,(PetscDrawSP{Float64},Float64,Float64,Float64,Float64),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDrawLGSPDraw(arg1::PetscDrawLG{Float64},arg2::PetscDrawSP{Float64})
    err = ccall((:PetscDrawLGSPDraw,petscRealDouble),PetscErrorCode,(PetscDrawLG{Float64},PetscDrawSP{Float64}),arg1,arg2)
    return err
end

function PetscDrawHGCreate(arg1::PetscDraw{Float64},arg2::Integer,arg3::Union{Ptr{PetscDrawHG{Float64}},StridedArray{PetscDrawHG{Float64}},Ptr{PetscDrawHG{Float64}},Ref{PetscDrawHG{Float64}}})
    err = ccall((:PetscDrawHGCreate,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},Cint,Ptr{PetscDrawHG{Float64}}),arg1,arg2,arg3)
    return err
end

function PetscDrawHGDestroy(arg1::Union{Ptr{PetscDrawHG{Float64}},StridedArray{PetscDrawHG{Float64}},Ptr{PetscDrawHG{Float64}},Ref{PetscDrawHG{Float64}}})
    err = ccall((:PetscDrawHGDestroy,petscRealDouble),PetscErrorCode,(Ptr{PetscDrawHG{Float64}},),arg1)
    return err
end

function PetscDrawHGAddValue(arg1::PetscDrawHG{Float64},arg2::Float64)
    err = ccall((:PetscDrawHGAddValue,petscRealDouble),PetscErrorCode,(PetscDrawHG{Float64},Float64),arg1,arg2)
    return err
end

function PetscDrawHGDraw(arg1::PetscDrawHG{Float64})
    err = ccall((:PetscDrawHGDraw,petscRealDouble),PetscErrorCode,(PetscDrawHG{Float64},),arg1)
    return err
end

function PetscDrawHGView(arg1::PetscDrawHG{Float64},arg2::PetscViewer{Float64})
    err = ccall((:PetscDrawHGView,petscRealDouble),PetscErrorCode,(PetscDrawHG{Float64},PetscViewer{Float64}),arg1,arg2)
    return err
end

function PetscDrawHGReset(arg1::PetscDrawHG{Float64})
    err = ccall((:PetscDrawHGReset,petscRealDouble),PetscErrorCode,(PetscDrawHG{Float64},),arg1)
    return err
end

function PetscDrawHGGetAxis(arg1::PetscDrawHG{Float64},arg2::Union{Ptr{PetscDrawAxis{Float64}},StridedArray{PetscDrawAxis{Float64}},Ptr{PetscDrawAxis{Float64}},Ref{PetscDrawAxis{Float64}}})
    err = ccall((:PetscDrawHGGetAxis,petscRealDouble),PetscErrorCode,(PetscDrawHG{Float64},Ptr{PetscDrawAxis{Float64}}),arg1,arg2)
    return err
end

function PetscDrawHGGetDraw(arg1::PetscDrawHG{Float64},arg2::Union{Ptr{PetscDraw{Float64}},StridedArray{PetscDraw{Float64}},Ptr{PetscDraw{Float64}},Ref{PetscDraw{Float64}}})
    err = ccall((:PetscDrawHGGetDraw,petscRealDouble),PetscErrorCode,(PetscDrawHG{Float64},Ptr{PetscDraw{Float64}}),arg1,arg2)
    return err
end

function PetscDrawHGSetLimits(arg1::PetscDrawHG{Float64},arg2::Float64,arg3::Float64,arg4::Integer,arg5::Integer)
    err = ccall((:PetscDrawHGSetLimits,petscRealDouble),PetscErrorCode,(PetscDrawHG{Float64},Float64,Float64,Cint,Cint),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDrawHGSetNumberBins(arg1::PetscDrawHG{Float64},arg2::Integer)
    err = ccall((:PetscDrawHGSetNumberBins,petscRealDouble),PetscErrorCode,(PetscDrawHG{Float64},Cint),arg1,arg2)
    return err
end

function PetscDrawHGSetColor(arg1::PetscDrawHG{Float64},arg2::Integer)
    err = ccall((:PetscDrawHGSetColor,petscRealDouble),PetscErrorCode,(PetscDrawHG{Float64},Cint),arg1,arg2)
    return err
end

function PetscDrawHGCalcStats(arg1::PetscDrawHG{Float64},arg2::PetscBool)
    err = ccall((:PetscDrawHGCalcStats,petscRealDouble),PetscErrorCode,(PetscDrawHG{Float64},PetscBool),arg1,arg2)
    return err
end

function PetscDrawHGIntegerBins(arg1::PetscDrawHG{Float64},arg2::PetscBool)
    err = ccall((:PetscDrawHGIntegerBins,petscRealDouble),PetscErrorCode,(PetscDrawHG{Float64},PetscBool),arg1,arg2)
    return err
end

function PetscDrawBarCreate(arg1::PetscDraw{Float64},arg2::Union{Ptr{PetscDrawBar{Float64}},StridedArray{PetscDrawBar{Float64}},Ptr{PetscDrawBar{Float64}},Ref{PetscDrawBar{Float64}}})
    err = ccall((:PetscDrawBarCreate,petscRealDouble),PetscErrorCode,(PetscDraw{Float64},Ptr{PetscDrawBar{Float64}}),arg1,arg2)
    return err
end

function PetscDrawBarSetData(arg1::PetscDrawBar{Float64},arg2::Integer,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscDrawBarSetData,petscRealDouble),PetscErrorCode,(PetscDrawBar{Float64},Int64,Ptr{Float64},Ptr{Ptr{UInt8}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscDrawBarDestroy(arg1::Union{Ptr{PetscDrawBar{Float64}},StridedArray{PetscDrawBar{Float64}},Ptr{PetscDrawBar{Float64}},Ref{PetscDrawBar{Float64}}})
    err = ccall((:PetscDrawBarDestroy,petscRealDouble),PetscErrorCode,(Ptr{PetscDrawBar{Float64}},),arg1)
    return err
end

function PetscDrawBarDraw(arg1::PetscDrawBar{Float64})
    err = ccall((:PetscDrawBarDraw,petscRealDouble),PetscErrorCode,(PetscDrawBar{Float64},),arg1)
    return err
end

function PetscDrawBarSetColor(arg1::PetscDrawBar{Float64},arg2::Integer)
    err = ccall((:PetscDrawBarSetColor,petscRealDouble),PetscErrorCode,(PetscDrawBar{Float64},Cint),arg1,arg2)
    return err
end

function PetscDrawBarSetLimits(arg1::PetscDrawBar{Float64},arg2::Float64,arg3::Float64)
    err = ccall((:PetscDrawBarSetLimits,petscRealDouble),PetscErrorCode,(PetscDrawBar{Float64},Float64,Float64),arg1,arg2,arg3)
    return err
end

function PetscDrawBarSort(arg1::PetscDrawBar{Float64},arg2::PetscBool,arg3::Float64)
    err = ccall((:PetscDrawBarSort,petscRealDouble),PetscErrorCode,(PetscDrawBar{Float64},PetscBool,Float64),arg1,arg2,arg3)
    return err
end

function PetscDrawBarSetFromOptions(arg1::PetscDrawBar{Float64})
    err = ccall((:PetscDrawBarSetFromOptions,petscRealDouble),PetscErrorCode,(PetscDrawBar{Float64},),arg1)
    return err
end

function PetscDrawBarGetAxis(arg1::PetscDrawBar{Float64},arg2::Union{Ptr{PetscDrawAxis{Float64}},StridedArray{PetscDrawAxis{Float64}},Ptr{PetscDrawAxis{Float64}},Ref{PetscDrawAxis{Float64}}})
    err = ccall((:PetscDrawBarGetAxis,petscRealDouble),PetscErrorCode,(PetscDrawBar{Float64},Ptr{PetscDrawAxis{Float64}}),arg1,arg2)
    return err
end

function PetscDrawBarGetDraw(arg1::PetscDrawBar{Float64},arg2::Union{Ptr{PetscDraw{Float64}},StridedArray{PetscDraw{Float64}},Ptr{PetscDraw{Float64}},Ref{PetscDraw{Float64}}})
    err = ccall((:PetscDrawBarGetDraw,petscRealDouble),PetscErrorCode,(PetscDrawBar{Float64},Ptr{PetscDraw{Float64}}),arg1,arg2)
    return err
end

function PetscViewerDrawGetDraw(arg1::PetscViewer{Float64},arg2::Integer,arg3::Union{Ptr{PetscDraw{Float64}},StridedArray{PetscDraw{Float64}},Ptr{PetscDraw{Float64}},Ref{PetscDraw{Float64}}})
    err = ccall((:PetscViewerDrawGetDraw,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Int64,Ptr{PetscDraw{Float64}}),arg1,arg2,arg3)
    return err
end

function PetscViewerDrawBaseAdd(arg1::PetscViewer{Float64},arg2::Integer)
    err = ccall((:PetscViewerDrawBaseAdd,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Int64),arg1,arg2)
    return err
end

function PetscViewerDrawBaseSet(arg1::PetscViewer{Float64},arg2::Integer)
    err = ccall((:PetscViewerDrawBaseSet,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Int64),arg1,arg2)
    return err
end

function PetscViewerDrawGetDrawLG(arg1::PetscViewer{Float64},arg2::Integer,arg3::Union{Ptr{PetscDrawLG{Float64}},StridedArray{PetscDrawLG{Float64}},Ptr{PetscDrawLG{Float64}},Ref{PetscDrawLG{Float64}}})
    err = ccall((:PetscViewerDrawGetDrawLG,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Int64,Ptr{PetscDrawLG{Float64}}),arg1,arg2,arg3)
    return err
end

function PetscViewerDrawGetDrawAxis(arg1::PetscViewer{Float64},arg2::Integer,arg3::Union{Ptr{PetscDrawAxis{Float64}},StridedArray{PetscDrawAxis{Float64}},Ptr{PetscDrawAxis{Float64}},Ref{PetscDrawAxis{Float64}}})
    err = ccall((:PetscViewerDrawGetDrawAxis,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Int64,Ptr{PetscDrawAxis{Float64}}),arg1,arg2,arg3)
    return err
end

function PetscDrawUtilitySetCmapHue(arg0::Type{Float64},arg1::Union{Ptr{Cuchar},StridedArray{Cuchar},Ptr{Cuchar},Ref{Cuchar}},arg2::Union{Ptr{Cuchar},StridedArray{Cuchar},Ptr{Cuchar},Ref{Cuchar}},arg3::Union{Ptr{Cuchar},StridedArray{Cuchar},Ptr{Cuchar},Ref{Cuchar}},arg4::Integer)
    err = ccall((:PetscDrawUtilitySetCmapHue,petscRealDouble),PetscErrorCode,(Ptr{Cuchar},Ptr{Cuchar},Ptr{Cuchar},Cint),arg1,arg2,arg3,arg4)
    return err
end

function PetscDrawUtilitySetGamma(arg0::Type{Float64},arg1::Float64)
    err = ccall((:PetscDrawUtilitySetGamma,petscRealDouble),PetscErrorCode,(Float64,),arg1)
    return err
end

function ISInitializePackage(arg0::Type{Float64})
    err = ccall((:ISInitializePackage,petscRealDouble),PetscErrorCode,())
    return err
end

function ISSetType(arg1::IS{Float64},arg2::ISType)
    err = ccall((:ISSetType,petscRealDouble),PetscErrorCode,(IS{Float64},ISType),arg1,arg2)
    return err
end

function ISGetType(arg1::IS{Float64},arg2::Union{Ptr{ISType},StridedArray{ISType},Ptr{ISType},Ref{ISType}})
    err = ccall((:ISGetType,petscRealDouble),PetscErrorCode,(IS{Float64},Ptr{ISType}),arg1,arg2)
    return err
end

function ISRegister(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:ISRegister,petscRealDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function ISCreate(arg1::MPI_Comm,arg2::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:ISCreate,petscRealDouble),PetscErrorCode,(comm_type,Ptr{IS{Float64}}),arg1,arg2)
    return err
end

function ISCreateGeneral(arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},PetscCopyMode::Integer,arg4::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:ISCreateGeneral,petscRealDouble),PetscErrorCode,(comm_type,Int64,Ptr{Int64},Cint,Ptr{IS{Float64}}),arg1,arg2,arg3,PetscCopyMode,arg4)
    return err
end

function ISGeneralSetIndices(arg1::IS{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},PetscCopyMode::Integer)
    err = ccall((:ISGeneralSetIndices,petscRealDouble),PetscErrorCode,(IS{Float64},Int64,Ptr{Int64},Cint),arg1,arg2,arg3,PetscCopyMode)
    return err
end

function ISCreateBlock(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},PetscCopyMode::Integer,arg5::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:ISCreateBlock,petscRealDouble),PetscErrorCode,(comm_type,Int64,Int64,Ptr{Int64},Cint,Ptr{IS{Float64}}),arg1,arg2,arg3,arg4,PetscCopyMode,arg5)
    return err
end

function ISBlockSetIndices(arg1::IS{Float64},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},PetscCopyMode::Integer)
    err = ccall((:ISBlockSetIndices,petscRealDouble),PetscErrorCode,(IS{Float64},Int64,Int64,Ptr{Int64},Cint),arg1,arg2,arg3,arg4,PetscCopyMode)
    return err
end

function ISCreateStride(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:ISCreateStride,petscRealDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Ptr{IS{Float64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function ISStrideSetStride(arg1::IS{Float64},arg2::Integer,arg3::Integer,arg4::Integer)
    err = ccall((:ISStrideSetStride,petscRealDouble),PetscErrorCode,(IS{Float64},Int64,Int64,Int64),arg1,arg2,arg3,arg4)
    return err
end

function ISDestroy(arg1::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:ISDestroy,petscRealDouble),PetscErrorCode,(Ptr{IS{Float64}},),arg1)
    return err
end

function ISSetPermutation(arg1::IS{Float64})
    err = ccall((:ISSetPermutation,petscRealDouble),PetscErrorCode,(IS{Float64},),arg1)
    return err
end

function ISPermutation(arg1::IS{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:ISPermutation,petscRealDouble),PetscErrorCode,(IS{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function ISSetIdentity(arg1::IS{Float64})
    err = ccall((:ISSetIdentity,petscRealDouble),PetscErrorCode,(IS{Float64},),arg1)
    return err
end

function ISIdentity(arg1::IS{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:ISIdentity,petscRealDouble),PetscErrorCode,(IS{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function ISContiguousLocal(arg1::IS{Float64},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:ISContiguousLocal,petscRealDouble),PetscErrorCode,(IS{Float64},Int64,Int64,Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function ISGetIndices(arg1::IS{Float64},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:ISGetIndices,petscRealDouble),PetscErrorCode,(IS{Float64},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function ISRestoreIndices(arg1::IS{Float64},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:ISRestoreIndices,petscRealDouble),PetscErrorCode,(IS{Float64},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function ISGetTotalIndices(arg1::IS{Float64},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:ISGetTotalIndices,petscRealDouble),PetscErrorCode,(IS{Float64},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function ISRestoreTotalIndices(arg1::IS{Float64},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:ISRestoreTotalIndices,petscRealDouble),PetscErrorCode,(IS{Float64},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function ISGetNonlocalIndices(arg1::IS{Float64},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:ISGetNonlocalIndices,petscRealDouble),PetscErrorCode,(IS{Float64},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function ISRestoreNonlocalIndices(arg1::IS{Float64},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:ISRestoreNonlocalIndices,petscRealDouble),PetscErrorCode,(IS{Float64},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function ISGetNonlocalIS(arg1::IS{Float64},is::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:ISGetNonlocalIS,petscRealDouble),PetscErrorCode,(IS{Float64},Ptr{IS{Float64}}),arg1,is)
    return err
end

function ISRestoreNonlocalIS(arg1::IS{Float64},is::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:ISRestoreNonlocalIS,petscRealDouble),PetscErrorCode,(IS{Float64},Ptr{IS{Float64}}),arg1,is)
    return err
end

function ISGetSize(arg1::IS{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISGetSize,petscRealDouble),PetscErrorCode,(IS{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function ISGetLocalSize(arg1::IS{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISGetLocalSize,petscRealDouble),PetscErrorCode,(IS{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function ISInvertPermutation(arg1::IS{Float64},arg2::Integer,arg3::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:ISInvertPermutation,petscRealDouble),PetscErrorCode,(IS{Float64},Int64,Ptr{IS{Float64}}),arg1,arg2,arg3)
    return err
end

function ISView(arg1::IS{Float64},arg2::PetscViewer{Float64})
    err = ccall((:ISView,petscRealDouble),PetscErrorCode,(IS{Float64},PetscViewer{Float64}),arg1,arg2)
    return err
end

function ISEqual(arg1::IS{Float64},arg2::IS{Float64},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:ISEqual,petscRealDouble),PetscErrorCode,(IS{Float64},IS{Float64},Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function ISSort(arg1::IS{Float64})
    err = ccall((:ISSort,petscRealDouble),PetscErrorCode,(IS{Float64},),arg1)
    return err
end

function ISSortRemoveDups(arg1::IS{Float64})
    err = ccall((:ISSortRemoveDups,petscRealDouble),PetscErrorCode,(IS{Float64},),arg1)
    return err
end

function ISSorted(arg1::IS{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:ISSorted,petscRealDouble),PetscErrorCode,(IS{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function ISDifference(arg1::IS{Float64},arg2::IS{Float64},arg3::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:ISDifference,petscRealDouble),PetscErrorCode,(IS{Float64},IS{Float64},Ptr{IS{Float64}}),arg1,arg2,arg3)
    return err
end

function ISSum(arg1::IS{Float64},arg2::IS{Float64},arg3::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:ISSum,petscRealDouble),PetscErrorCode,(IS{Float64},IS{Float64},Ptr{IS{Float64}}),arg1,arg2,arg3)
    return err
end

function ISExpand(arg1::IS{Float64},arg2::IS{Float64},arg3::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:ISExpand,petscRealDouble),PetscErrorCode,(IS{Float64},IS{Float64},Ptr{IS{Float64}}),arg1,arg2,arg3)
    return err
end

function ISGetMinMax(arg1::IS{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISGetMinMax,petscRealDouble),PetscErrorCode,(IS{Float64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function ISBlockGetIndices(arg1::IS{Float64},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:ISBlockGetIndices,petscRealDouble),PetscErrorCode,(IS{Float64},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function ISBlockRestoreIndices(arg1::IS{Float64},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:ISBlockRestoreIndices,petscRealDouble),PetscErrorCode,(IS{Float64},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function ISBlockGetLocalSize(arg1::IS{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISBlockGetLocalSize,petscRealDouble),PetscErrorCode,(IS{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function ISBlockGetSize(arg1::IS{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISBlockGetSize,petscRealDouble),PetscErrorCode,(IS{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function ISGetBlockSize(arg1::IS{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISGetBlockSize,petscRealDouble),PetscErrorCode,(IS{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function ISSetBlockSize(arg1::IS{Float64},arg2::Integer)
    err = ccall((:ISSetBlockSize,petscRealDouble),PetscErrorCode,(IS{Float64},Int64),arg1,arg2)
    return err
end

function ISStrideGetInfo(arg1::IS{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISStrideGetInfo,petscRealDouble),PetscErrorCode,(IS{Float64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function ISToGeneral(arg1::IS{Float64})
    err = ccall((:ISToGeneral,petscRealDouble),PetscErrorCode,(IS{Float64},),arg1)
    return err
end

function ISDuplicate(arg1::IS{Float64},arg2::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:ISDuplicate,petscRealDouble),PetscErrorCode,(IS{Float64},Ptr{IS{Float64}}),arg1,arg2)
    return err
end

function ISCopy(arg1::IS{Float64},arg2::IS{Float64})
    err = ccall((:ISCopy,petscRealDouble),PetscErrorCode,(IS{Float64},IS{Float64}),arg1,arg2)
    return err
end

function ISAllGather(arg1::IS{Float64},arg2::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:ISAllGather,petscRealDouble),PetscErrorCode,(IS{Float64},Ptr{IS{Float64}}),arg1,arg2)
    return err
end

function ISComplement(arg1::IS{Float64},arg2::Integer,arg3::Integer,arg4::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:ISComplement,petscRealDouble),PetscErrorCode,(IS{Float64},Int64,Int64,Ptr{IS{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function ISConcatenate(arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}},arg4::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:ISConcatenate,petscRealDouble),PetscErrorCode,(comm_type,Int64,Ptr{IS{Float64}},Ptr{IS{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function ISListToPair(arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}},arg4::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}},arg5::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:ISListToPair,petscRealDouble),PetscErrorCode,(comm_type,Int64,Ptr{IS{Float64}},Ptr{IS{Float64}},Ptr{IS{Float64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function ISPairToList(arg1::IS{Float64},arg2::IS{Float64},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{IS{Float64}}},StridedArray{Ptr{IS{Float64}}},Ptr{Ptr{IS{Float64}}},Ref{Ptr{IS{Float64}}}})
    err = ccall((:ISPairToList,petscRealDouble),PetscErrorCode,(IS{Float64},IS{Float64},Ptr{Int64},Ptr{Ptr{IS{Float64}}}),arg1,arg2,arg3,arg4)
    return err
end

function ISEmbed(arg1::IS{Float64},arg2::IS{Float64},arg3::PetscBool,arg4::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:ISEmbed,petscRealDouble),PetscErrorCode,(IS{Float64},IS{Float64},PetscBool,Ptr{IS{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function ISSortPermutation(arg1::IS{Float64},arg2::PetscBool,arg3::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:ISSortPermutation,petscRealDouble),PetscErrorCode,(IS{Float64},PetscBool,Ptr{IS{Float64}}),arg1,arg2,arg3)
    return err
end

function ISOnComm(arg1::IS{Float64},arg2::MPI_Comm,PetscCopyMode::Integer,arg3::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:ISOnComm,petscRealDouble),PetscErrorCode,(IS{Float64},comm_type,Cint,Ptr{IS{Float64}}),arg1,arg2,PetscCopyMode,arg3)
    return err
end

function ISLocalToGlobalMappingCreate(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},PetscCopyMode::Integer,arg5::Union{Ptr{ISLocalToGlobalMapping{Float64}},StridedArray{ISLocalToGlobalMapping{Float64}},Ptr{ISLocalToGlobalMapping{Float64}},Ref{ISLocalToGlobalMapping{Float64}}})
    err = ccall((:ISLocalToGlobalMappingCreate,petscRealDouble),PetscErrorCode,(comm_type,Int64,Int64,Ptr{Int64},Cint,Ptr{ISLocalToGlobalMapping{Float64}}),arg1,arg2,arg3,arg4,PetscCopyMode,arg5)
    return err
end

function ISLocalToGlobalMappingCreateIS(arg1::IS{Float64},arg2::Union{Ptr{ISLocalToGlobalMapping{Float64}},StridedArray{ISLocalToGlobalMapping{Float64}},Ptr{ISLocalToGlobalMapping{Float64}},Ref{ISLocalToGlobalMapping{Float64}}})
    err = ccall((:ISLocalToGlobalMappingCreateIS,petscRealDouble),PetscErrorCode,(IS{Float64},Ptr{ISLocalToGlobalMapping{Float64}}),arg1,arg2)
    return err
end

function ISLocalToGlobalMappingCreateSF(arg1::PetscSF{Float64},arg2::Integer,arg3::Union{Ptr{ISLocalToGlobalMapping{Float64}},StridedArray{ISLocalToGlobalMapping{Float64}},Ptr{ISLocalToGlobalMapping{Float64}},Ref{ISLocalToGlobalMapping{Float64}}})
    err = ccall((:ISLocalToGlobalMappingCreateSF,petscRealDouble),PetscErrorCode,(PetscSF{Float64},Int64,Ptr{ISLocalToGlobalMapping{Float64}}),arg1,arg2,arg3)
    return err
end

function ISLocalToGlobalMappingView(arg1::ISLocalToGlobalMapping{Float64},arg2::PetscViewer{Float64})
    err = ccall((:ISLocalToGlobalMappingView,petscRealDouble),PetscErrorCode,(ISLocalToGlobalMapping{Float64},PetscViewer{Float64}),arg1,arg2)
    return err
end

function ISLocalToGlobalMappingDestroy(arg1::Union{Ptr{ISLocalToGlobalMapping{Float64}},StridedArray{ISLocalToGlobalMapping{Float64}},Ptr{ISLocalToGlobalMapping{Float64}},Ref{ISLocalToGlobalMapping{Float64}}})
    err = ccall((:ISLocalToGlobalMappingDestroy,petscRealDouble),PetscErrorCode,(Ptr{ISLocalToGlobalMapping{Float64}},),arg1)
    return err
end

function ISLocalToGlobalMappingApply(arg1::ISLocalToGlobalMapping{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISLocalToGlobalMappingApply,petscRealDouble),PetscErrorCode,(ISLocalToGlobalMapping{Float64},Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function ISLocalToGlobalMappingApplyBlock(arg1::ISLocalToGlobalMapping{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISLocalToGlobalMappingApplyBlock,petscRealDouble),PetscErrorCode,(ISLocalToGlobalMapping{Float64},Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function ISLocalToGlobalMappingApplyIS(arg1::ISLocalToGlobalMapping{Float64},arg2::IS{Float64},arg3::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:ISLocalToGlobalMappingApplyIS,petscRealDouble),PetscErrorCode,(ISLocalToGlobalMapping{Float64},IS{Float64},Ptr{IS{Float64}}),arg1,arg2,arg3)
    return err
end

function ISGlobalToLocalMappingApply(arg1::ISLocalToGlobalMapping{Float64},arg2::ISGlobalToLocalMappingType,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISGlobalToLocalMappingApply,petscRealDouble),PetscErrorCode,(ISLocalToGlobalMapping{Float64},ISGlobalToLocalMappingType,Int64,Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function ISGlobalToLocalMappingApplyBlock(arg1::ISLocalToGlobalMapping{Float64},arg2::ISGlobalToLocalMappingType,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISGlobalToLocalMappingApplyBlock,petscRealDouble),PetscErrorCode,(ISLocalToGlobalMapping{Float64},ISGlobalToLocalMappingType,Int64,Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function ISGlobalToLocalMappingApplyIS(arg1::ISLocalToGlobalMapping{Float64},arg2::ISGlobalToLocalMappingType,arg3::IS{Float64},arg4::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:ISGlobalToLocalMappingApplyIS,petscRealDouble),PetscErrorCode,(ISLocalToGlobalMapping{Float64},ISGlobalToLocalMappingType,IS{Float64},Ptr{IS{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function ISLocalToGlobalMappingGetSize(arg1::ISLocalToGlobalMapping{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISLocalToGlobalMappingGetSize,petscRealDouble),PetscErrorCode,(ISLocalToGlobalMapping{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function ISLocalToGlobalMappingGetInfo(arg1::ISLocalToGlobalMapping{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg5::Union{Ptr{Ptr{Ptr{Int64}}},StridedArray{Ptr{Ptr{Int64}}},Ptr{Ptr{Ptr{Int64}}},Ref{Ptr{Ptr{Int64}}}})
    err = ccall((:ISLocalToGlobalMappingGetInfo,petscRealDouble),PetscErrorCode,(ISLocalToGlobalMapping{Float64},Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}},Ptr{Ptr{Ptr{Int64}}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function ISLocalToGlobalMappingRestoreInfo(arg1::ISLocalToGlobalMapping{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg5::Union{Ptr{Ptr{Ptr{Int64}}},StridedArray{Ptr{Ptr{Int64}}},Ptr{Ptr{Ptr{Int64}}},Ref{Ptr{Ptr{Int64}}}})
    err = ccall((:ISLocalToGlobalMappingRestoreInfo,petscRealDouble),PetscErrorCode,(ISLocalToGlobalMapping{Float64},Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}},Ptr{Ptr{Ptr{Int64}}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function ISLocalToGlobalMappingGetBlockInfo(arg1::ISLocalToGlobalMapping{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg5::Union{Ptr{Ptr{Ptr{Int64}}},StridedArray{Ptr{Ptr{Int64}}},Ptr{Ptr{Ptr{Int64}}},Ref{Ptr{Ptr{Int64}}}})
    err = ccall((:ISLocalToGlobalMappingGetBlockInfo,petscRealDouble),PetscErrorCode,(ISLocalToGlobalMapping{Float64},Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}},Ptr{Ptr{Ptr{Int64}}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function ISLocalToGlobalMappingRestoreBlockInfo(arg1::ISLocalToGlobalMapping{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg5::Union{Ptr{Ptr{Ptr{Int64}}},StridedArray{Ptr{Ptr{Int64}}},Ptr{Ptr{Ptr{Int64}}},Ref{Ptr{Ptr{Int64}}}})
    err = ccall((:ISLocalToGlobalMappingRestoreBlockInfo,petscRealDouble),PetscErrorCode,(ISLocalToGlobalMapping{Float64},Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}},Ptr{Ptr{Ptr{Int64}}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function ISLocalToGlobalMappingGetIndices(arg1::ISLocalToGlobalMapping{Float64},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:ISLocalToGlobalMappingGetIndices,petscRealDouble),PetscErrorCode,(ISLocalToGlobalMapping{Float64},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function ISLocalToGlobalMappingRestoreIndices(arg1::ISLocalToGlobalMapping{Float64},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:ISLocalToGlobalMappingRestoreIndices,petscRealDouble),PetscErrorCode,(ISLocalToGlobalMapping{Float64},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function ISLocalToGlobalMappingGetBlockIndices(arg1::ISLocalToGlobalMapping{Float64},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:ISLocalToGlobalMappingGetBlockIndices,petscRealDouble),PetscErrorCode,(ISLocalToGlobalMapping{Float64},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function ISLocalToGlobalMappingRestoreBlockIndices(arg1::ISLocalToGlobalMapping{Float64},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:ISLocalToGlobalMappingRestoreBlockIndices,petscRealDouble),PetscErrorCode,(ISLocalToGlobalMapping{Float64},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function ISLocalToGlobalMappingConcatenate(arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{ISLocalToGlobalMapping{Float64}},StridedArray{ISLocalToGlobalMapping{Float64}},Ptr{ISLocalToGlobalMapping{Float64}},Ref{ISLocalToGlobalMapping{Float64}}},arg4::Union{Ptr{ISLocalToGlobalMapping{Float64}},StridedArray{ISLocalToGlobalMapping{Float64}},Ptr{ISLocalToGlobalMapping{Float64}},Ref{ISLocalToGlobalMapping{Float64}}})
    err = ccall((:ISLocalToGlobalMappingConcatenate,petscRealDouble),PetscErrorCode,(comm_type,Int64,Ptr{ISLocalToGlobalMapping{Float64}},Ptr{ISLocalToGlobalMapping{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function ISG2LMapApply(arg1::ISLocalToGlobalMapping{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISG2LMapApply,petscRealDouble),PetscErrorCode,(ISLocalToGlobalMapping{Float64},Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function ISLocalToGlobalMappingGetBlockSize(arg1::ISLocalToGlobalMapping{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISLocalToGlobalMappingGetBlockSize,petscRealDouble),PetscErrorCode,(ISLocalToGlobalMapping{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function ISAllGatherColors(arg0::Type{Float64},arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Ptr{Cint}},StridedArray{Ptr{Cint}},Ptr{Ptr{Cint}},Ref{Ptr{Cint}}})
    err = ccall((:ISAllGatherColors,petscRealDouble),PetscErrorCode,(comm_type,Int64,Ptr{Cint},Ptr{Int64},Ptr{Ptr{Cint}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function ISColoringCreate(arg1::MPI_Comm,arg2::Integer,arg3::Integer,ISColoringValue::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}},PetscCopyMode::Integer,arg4::Union{Ptr{ISColoring{Float64}},StridedArray{ISColoring{Float64}},Ptr{ISColoring{Float64}},Ref{ISColoring{Float64}}})
    err = ccall((:ISColoringCreate,petscRealDouble),PetscErrorCode,(comm_type,Int64,Int64,Ptr{Cint},Cint,Ptr{ISColoring{Float64}}),arg1,arg2,arg3,ISColoringValue,PetscCopyMode,arg4)
    return err
end

function ISColoringDestroy(arg1::Union{Ptr{ISColoring{Float64}},StridedArray{ISColoring{Float64}},Ptr{ISColoring{Float64}},Ref{ISColoring{Float64}}})
    err = ccall((:ISColoringDestroy,petscRealDouble),PetscErrorCode,(Ptr{ISColoring{Float64}},),arg1)
    return err
end

function ISColoringView(arg1::ISColoring{Float64},arg2::PetscViewer{Float64})
    err = ccall((:ISColoringView,petscRealDouble),PetscErrorCode,(ISColoring{Float64},PetscViewer{Float64}),arg1,arg2)
    return err
end

function ISColoringViewFromOptions(arg1::ISColoring{Float64},arg2::PetscObject{Float64},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:ISColoringViewFromOptions,petscRealDouble),PetscErrorCode,(ISColoring{Float64},PetscObject{Float64},Cstring),arg1,arg2,arg3)
    return err
end

function ISColoringGetIS(arg1::ISColoring{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{IS{Float64}}},StridedArray{Ptr{IS{Float64}}},Ptr{Ptr{IS{Float64}}},Ref{Ptr{IS{Float64}}}})
    err = ccall((:ISColoringGetIS,petscRealDouble),PetscErrorCode,(ISColoring{Float64},Ptr{Int64},Ptr{Ptr{IS{Float64}}}),arg1,arg2,arg3)
    return err
end

function ISColoringRestoreIS(arg1::ISColoring{Float64},arg2::Union{Ptr{Ptr{IS{Float64}}},StridedArray{Ptr{IS{Float64}}},Ptr{Ptr{IS{Float64}}},Ref{Ptr{IS{Float64}}}})
    err = ccall((:ISColoringRestoreIS,petscRealDouble),PetscErrorCode,(ISColoring{Float64},Ptr{Ptr{IS{Float64}}}),arg1,arg2)
    return err
end

function ISColoringReference(arg1::ISColoring{Float64})
    err = ccall((:ISColoringReference,petscRealDouble),PetscErrorCode,(ISColoring{Float64},),arg1)
    return err
end

function ISColoringSetType(arg1::ISColoring{Float64},arg2::ISColoringType)
    err = ccall((:ISColoringSetType,petscRealDouble),PetscErrorCode,(ISColoring{Float64},ISColoringType),arg1,arg2)
    return err
end

function ISPartitioningToNumbering(arg1::IS{Float64},arg2::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:ISPartitioningToNumbering,petscRealDouble),PetscErrorCode,(IS{Float64},Ptr{IS{Float64}}),arg1,arg2)
    return err
end

function ISPartitioningCount(arg1::IS{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISPartitioningCount,petscRealDouble),PetscErrorCode,(IS{Float64},Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function ISCompressIndicesGeneral(arg1::Integer,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}},arg6::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:ISCompressIndicesGeneral,petscRealDouble),PetscErrorCode,(Int64,Int64,Int64,Int64,Ptr{IS{Float64}},Ptr{IS{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function ISCompressIndicesSorted(arg1::Integer,arg2::Integer,arg3::Integer,arg4::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}},arg5::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:ISCompressIndicesSorted,petscRealDouble),PetscErrorCode,(Int64,Int64,Int64,Ptr{IS{Float64}},Ptr{IS{Float64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function ISExpandIndicesGeneral(arg1::Integer,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}},arg6::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:ISExpandIndicesGeneral,petscRealDouble),PetscErrorCode,(Int64,Int64,Int64,Int64,Ptr{IS{Float64}},Ptr{IS{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscLayoutSetUp(arg1::PetscLayout{Float64})
    err = ccall((:PetscLayoutSetUp,petscRealDouble),PetscErrorCode,(PetscLayout{Float64},),arg1)
    return err
end

function PetscLayoutDestroy(arg1::Union{Ptr{PetscLayout{Float64}},StridedArray{PetscLayout{Float64}},Ptr{PetscLayout{Float64}},Ref{PetscLayout{Float64}}})
    err = ccall((:PetscLayoutDestroy,petscRealDouble),PetscErrorCode,(Ptr{PetscLayout{Float64}},),arg1)
    return err
end

function PetscLayoutDuplicate(arg1::PetscLayout{Float64},arg2::Union{Ptr{PetscLayout{Float64}},StridedArray{PetscLayout{Float64}},Ptr{PetscLayout{Float64}},Ref{PetscLayout{Float64}}})
    err = ccall((:PetscLayoutDuplicate,petscRealDouble),PetscErrorCode,(PetscLayout{Float64},Ptr{PetscLayout{Float64}}),arg1,arg2)
    return err
end

function PetscLayoutReference(arg1::PetscLayout{Float64},arg2::Union{Ptr{PetscLayout{Float64}},StridedArray{PetscLayout{Float64}},Ptr{PetscLayout{Float64}},Ref{PetscLayout{Float64}}})
    err = ccall((:PetscLayoutReference,petscRealDouble),PetscErrorCode,(PetscLayout{Float64},Ptr{PetscLayout{Float64}}),arg1,arg2)
    return err
end

function PetscLayoutSetLocalSize(arg1::PetscLayout{Float64},arg2::Integer)
    err = ccall((:PetscLayoutSetLocalSize,petscRealDouble),PetscErrorCode,(PetscLayout{Float64},Int64),arg1,arg2)
    return err
end

function PetscLayoutGetLocalSize(arg1::PetscLayout{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscLayoutGetLocalSize,petscRealDouble),PetscErrorCode,(PetscLayout{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscLayoutSetSize(arg1::PetscLayout{Float64},arg2::Integer)
    err = ccall((:PetscLayoutSetSize,petscRealDouble),PetscErrorCode,(PetscLayout{Float64},Int64),arg1,arg2)
    return err
end

function PetscLayoutGetSize(arg1::PetscLayout{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscLayoutGetSize,petscRealDouble),PetscErrorCode,(PetscLayout{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscLayoutSetBlockSize(arg1::PetscLayout{Float64},arg2::Integer)
    err = ccall((:PetscLayoutSetBlockSize,petscRealDouble),PetscErrorCode,(PetscLayout{Float64},Int64),arg1,arg2)
    return err
end

function PetscLayoutGetBlockSize(arg1::PetscLayout{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscLayoutGetBlockSize,petscRealDouble),PetscErrorCode,(PetscLayout{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscLayoutGetRange(arg1::PetscLayout{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscLayoutGetRange,petscRealDouble),PetscErrorCode,(PetscLayout{Float64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PetscLayoutGetRanges(arg1::PetscLayout{Float64},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:PetscLayoutGetRanges,petscRealDouble),PetscErrorCode,(PetscLayout{Float64},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function PetscLayoutSetISLocalToGlobalMapping(arg1::PetscLayout{Float64},arg2::ISLocalToGlobalMapping{Float64})
    err = ccall((:PetscLayoutSetISLocalToGlobalMapping,petscRealDouble),PetscErrorCode,(PetscLayout{Float64},ISLocalToGlobalMapping{Float64}),arg1,arg2)
    return err
end

function PetscSFSetGraphLayout(arg1::PetscSF{Float64},arg2::PetscLayout{Float64},arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},PetscCopyMode::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSFSetGraphLayout,petscRealDouble),PetscErrorCode,(PetscSF{Float64},PetscLayout{Float64},Int64,Ptr{Int64},Cint,Ptr{Int64}),arg1,arg2,arg3,arg4,PetscCopyMode,arg5)
    return err
end

function PetscSectionCreate(arg1::MPI_Comm,arg2::Union{Ptr{PetscSection{Float64}},StridedArray{PetscSection{Float64}},Ptr{PetscSection{Float64}},Ref{PetscSection{Float64}}})
    err = ccall((:PetscSectionCreate,petscRealDouble),PetscErrorCode,(comm_type,Ptr{PetscSection{Float64}}),arg1,arg2)
    return err
end

function PetscSectionClone(arg1::PetscSection{Float64},arg2::Union{Ptr{PetscSection{Float64}},StridedArray{PetscSection{Float64}},Ptr{PetscSection{Float64}},Ref{PetscSection{Float64}}})
    err = ccall((:PetscSectionClone,petscRealDouble),PetscErrorCode,(PetscSection{Float64},Ptr{PetscSection{Float64}}),arg1,arg2)
    return err
end

function PetscSectionCopy(arg1::PetscSection{Float64},arg2::PetscSection{Float64})
    err = ccall((:PetscSectionCopy,petscRealDouble),PetscErrorCode,(PetscSection{Float64},PetscSection{Float64}),arg1,arg2)
    return err
end

function PetscSectionGetNumFields(arg1::PetscSection{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSectionGetNumFields,petscRealDouble),PetscErrorCode,(PetscSection{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscSectionSetNumFields(arg1::PetscSection{Float64},arg2::Integer)
    err = ccall((:PetscSectionSetNumFields,petscRealDouble),PetscErrorCode,(PetscSection{Float64},Int64),arg1,arg2)
    return err
end

function PetscSectionGetFieldName(arg1::PetscSection{Float64},arg2::Integer,arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscSectionGetFieldName,petscRealDouble),PetscErrorCode,(PetscSection{Float64},Int64,Ptr{Ptr{UInt8}}),arg1,arg2,arg3)
    return err
end

function PetscSectionSetFieldName(arg1::PetscSection{Float64},arg2::Integer,arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PetscSectionSetFieldName,petscRealDouble),PetscErrorCode,(PetscSection{Float64},Int64,Cstring),arg1,arg2,arg3)
    return err
end

function PetscSectionGetFieldComponents(arg1::PetscSection{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSectionGetFieldComponents,petscRealDouble),PetscErrorCode,(PetscSection{Float64},Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PetscSectionSetFieldComponents(arg1::PetscSection{Float64},arg2::Integer,arg3::Integer)
    err = ccall((:PetscSectionSetFieldComponents,petscRealDouble),PetscErrorCode,(PetscSection{Float64},Int64,Int64),arg1,arg2,arg3)
    return err
end

function PetscSectionGetChart(arg1::PetscSection{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSectionGetChart,petscRealDouble),PetscErrorCode,(PetscSection{Float64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PetscSectionSetChart(arg1::PetscSection{Float64},arg2::Integer,arg3::Integer)
    err = ccall((:PetscSectionSetChart,petscRealDouble),PetscErrorCode,(PetscSection{Float64},Int64,Int64),arg1,arg2,arg3)
    return err
end

function PetscSectionGetPermutation(arg1::PetscSection{Float64},arg2::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:PetscSectionGetPermutation,petscRealDouble),PetscErrorCode,(PetscSection{Float64},Ptr{IS{Float64}}),arg1,arg2)
    return err
end

function PetscSectionSetPermutation(arg1::PetscSection{Float64},arg2::IS{Float64})
    err = ccall((:PetscSectionSetPermutation,petscRealDouble),PetscErrorCode,(PetscSection{Float64},IS{Float64}),arg1,arg2)
    return err
end

function PetscSectionGetDof(arg1::PetscSection{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSectionGetDof,petscRealDouble),PetscErrorCode,(PetscSection{Float64},Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PetscSectionSetDof(arg1::PetscSection{Float64},arg2::Integer,arg3::Integer)
    err = ccall((:PetscSectionSetDof,petscRealDouble),PetscErrorCode,(PetscSection{Float64},Int64,Int64),arg1,arg2,arg3)
    return err
end

function PetscSectionAddDof(arg1::PetscSection{Float64},arg2::Integer,arg3::Integer)
    err = ccall((:PetscSectionAddDof,petscRealDouble),PetscErrorCode,(PetscSection{Float64},Int64,Int64),arg1,arg2,arg3)
    return err
end

function PetscSectionGetFieldDof(arg1::PetscSection{Float64},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSectionGetFieldDof,petscRealDouble),PetscErrorCode,(PetscSection{Float64},Int64,Int64,Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function PetscSectionSetFieldDof(arg1::PetscSection{Float64},arg2::Integer,arg3::Integer,arg4::Integer)
    err = ccall((:PetscSectionSetFieldDof,petscRealDouble),PetscErrorCode,(PetscSection{Float64},Int64,Int64,Int64),arg1,arg2,arg3,arg4)
    return err
end

function PetscSectionAddFieldDof(arg1::PetscSection{Float64},arg2::Integer,arg3::Integer,arg4::Integer)
    err = ccall((:PetscSectionAddFieldDof,petscRealDouble),PetscErrorCode,(PetscSection{Float64},Int64,Int64,Int64),arg1,arg2,arg3,arg4)
    return err
end

function PetscSectionHasConstraints(arg1::PetscSection{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscSectionHasConstraints,petscRealDouble),PetscErrorCode,(PetscSection{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscSectionGetConstraintDof(arg1::PetscSection{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSectionGetConstraintDof,petscRealDouble),PetscErrorCode,(PetscSection{Float64},Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PetscSectionSetConstraintDof(arg1::PetscSection{Float64},arg2::Integer,arg3::Integer)
    err = ccall((:PetscSectionSetConstraintDof,petscRealDouble),PetscErrorCode,(PetscSection{Float64},Int64,Int64),arg1,arg2,arg3)
    return err
end

function PetscSectionAddConstraintDof(arg1::PetscSection{Float64},arg2::Integer,arg3::Integer)
    err = ccall((:PetscSectionAddConstraintDof,petscRealDouble),PetscErrorCode,(PetscSection{Float64},Int64,Int64),arg1,arg2,arg3)
    return err
end

function PetscSectionGetFieldConstraintDof(arg1::PetscSection{Float64},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSectionGetFieldConstraintDof,petscRealDouble),PetscErrorCode,(PetscSection{Float64},Int64,Int64,Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function PetscSectionSetFieldConstraintDof(arg1::PetscSection{Float64},arg2::Integer,arg3::Integer,arg4::Integer)
    err = ccall((:PetscSectionSetFieldConstraintDof,petscRealDouble),PetscErrorCode,(PetscSection{Float64},Int64,Int64,Int64),arg1,arg2,arg3,arg4)
    return err
end

function PetscSectionAddFieldConstraintDof(arg1::PetscSection{Float64},arg2::Integer,arg3::Integer,arg4::Integer)
    err = ccall((:PetscSectionAddFieldConstraintDof,petscRealDouble),PetscErrorCode,(PetscSection{Float64},Int64,Int64,Int64),arg1,arg2,arg3,arg4)
    return err
end

function PetscSectionGetConstraintIndices(arg1::PetscSection{Float64},arg2::Integer,arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:PetscSectionGetConstraintIndices,petscRealDouble),PetscErrorCode,(PetscSection{Float64},Int64,Ptr{Ptr{Int64}}),arg1,arg2,arg3)
    return err
end

function PetscSectionSetConstraintIndices(arg1::PetscSection{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSectionSetConstraintIndices,petscRealDouble),PetscErrorCode,(PetscSection{Float64},Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PetscSectionGetFieldConstraintIndices(arg1::PetscSection{Float64},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:PetscSectionGetFieldConstraintIndices,petscRealDouble),PetscErrorCode,(PetscSection{Float64},Int64,Int64,Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscSectionSetFieldConstraintIndices(arg1::PetscSection{Float64},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSectionSetFieldConstraintIndices,petscRealDouble),PetscErrorCode,(PetscSection{Float64},Int64,Int64,Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function PetscSectionSetUpBC(arg1::PetscSection{Float64})
    err = ccall((:PetscSectionSetUpBC,petscRealDouble),PetscErrorCode,(PetscSection{Float64},),arg1)
    return err
end

function PetscSectionSetUp(arg1::PetscSection{Float64})
    err = ccall((:PetscSectionSetUp,petscRealDouble),PetscErrorCode,(PetscSection{Float64},),arg1)
    return err
end

function PetscSectionGetMaxDof(arg1::PetscSection{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSectionGetMaxDof,petscRealDouble),PetscErrorCode,(PetscSection{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscSectionGetStorageSize(arg1::PetscSection{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSectionGetStorageSize,petscRealDouble),PetscErrorCode,(PetscSection{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscSectionGetConstrainedStorageSize(arg1::PetscSection{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSectionGetConstrainedStorageSize,petscRealDouble),PetscErrorCode,(PetscSection{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscSectionGetOffset(arg1::PetscSection{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSectionGetOffset,petscRealDouble),PetscErrorCode,(PetscSection{Float64},Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PetscSectionSetOffset(arg1::PetscSection{Float64},arg2::Integer,arg3::Integer)
    err = ccall((:PetscSectionSetOffset,petscRealDouble),PetscErrorCode,(PetscSection{Float64},Int64,Int64),arg1,arg2,arg3)
    return err
end

function PetscSectionGetFieldOffset(arg1::PetscSection{Float64},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSectionGetFieldOffset,petscRealDouble),PetscErrorCode,(PetscSection{Float64},Int64,Int64,Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function PetscSectionSetFieldOffset(arg1::PetscSection{Float64},arg2::Integer,arg3::Integer,arg4::Integer)
    err = ccall((:PetscSectionSetFieldOffset,petscRealDouble),PetscErrorCode,(PetscSection{Float64},Int64,Int64,Int64),arg1,arg2,arg3,arg4)
    return err
end

function PetscSectionGetOffsetRange(arg1::PetscSection{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSectionGetOffsetRange,petscRealDouble),PetscErrorCode,(PetscSection{Float64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PetscSectionView(arg1::PetscSection{Float64},arg2::PetscViewer{Float64})
    err = ccall((:PetscSectionView,petscRealDouble),PetscErrorCode,(PetscSection{Float64},PetscViewer{Float64}),arg1,arg2)
    return err
end

function PetscSectionDestroy(arg1::Union{Ptr{PetscSection{Float64}},StridedArray{PetscSection{Float64}},Ptr{PetscSection{Float64}},Ref{PetscSection{Float64}}})
    err = ccall((:PetscSectionDestroy,petscRealDouble),PetscErrorCode,(Ptr{PetscSection{Float64}},),arg1)
    return err
end

function PetscSectionCreateGlobalSection(arg1::PetscSection{Float64},arg2::PetscSF{Float64},arg3::PetscBool,arg4::Union{Ptr{PetscSection{Float64}},StridedArray{PetscSection{Float64}},Ptr{PetscSection{Float64}},Ref{PetscSection{Float64}}})
    err = ccall((:PetscSectionCreateGlobalSection,petscRealDouble),PetscErrorCode,(PetscSection{Float64},PetscSF{Float64},PetscBool,Ptr{PetscSection{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscSectionCreateGlobalSectionCensored(arg1::PetscSection{Float64},arg2::PetscSF{Float64},arg3::PetscBool,arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{PetscSection{Float64}},StridedArray{PetscSection{Float64}},Ptr{PetscSection{Float64}},Ref{PetscSection{Float64}}})
    err = ccall((:PetscSectionCreateGlobalSectionCensored,petscRealDouble),PetscErrorCode,(PetscSection{Float64},PetscSF{Float64},PetscBool,Int64,Ptr{Int64},Ptr{PetscSection{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscSectionCreateSubsection(arg1::PetscSection{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{PetscSection{Float64}},StridedArray{PetscSection{Float64}},Ptr{PetscSection{Float64}},Ref{PetscSection{Float64}}})
    err = ccall((:PetscSectionCreateSubsection,petscRealDouble),PetscErrorCode,(PetscSection{Float64},Int64,Ptr{Int64},Ptr{PetscSection{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscSectionCreateSubmeshSection(arg1::PetscSection{Float64},arg2::IS{Float64},arg3::Union{Ptr{PetscSection{Float64}},StridedArray{PetscSection{Float64}},Ptr{PetscSection{Float64}},Ref{PetscSection{Float64}}})
    err = ccall((:PetscSectionCreateSubmeshSection,petscRealDouble),PetscErrorCode,(PetscSection{Float64},IS{Float64},Ptr{PetscSection{Float64}}),arg1,arg2,arg3)
    return err
end

function PetscSectionGetPointLayout(arg1::MPI_Comm,arg2::PetscSection{Float64},arg3::Union{Ptr{PetscLayout{Float64}},StridedArray{PetscLayout{Float64}},Ptr{PetscLayout{Float64}},Ref{PetscLayout{Float64}}})
    err = ccall((:PetscSectionGetPointLayout,petscRealDouble),PetscErrorCode,(comm_type,PetscSection{Float64},Ptr{PetscLayout{Float64}}),arg1,arg2,arg3)
    return err
end

function PetscSectionGetValueLayout(arg1::MPI_Comm,arg2::PetscSection{Float64},arg3::Union{Ptr{PetscLayout{Float64}},StridedArray{PetscLayout{Float64}},Ptr{PetscLayout{Float64}},Ref{PetscLayout{Float64}}})
    err = ccall((:PetscSectionGetValueLayout,petscRealDouble),PetscErrorCode,(comm_type,PetscSection{Float64},Ptr{PetscLayout{Float64}}),arg1,arg2,arg3)
    return err
end

function PetscSectionPermute(arg1::PetscSection{Float64},arg2::IS{Float64},arg3::Union{Ptr{PetscSection{Float64}},StridedArray{PetscSection{Float64}},Ptr{PetscSection{Float64}},Ref{PetscSection{Float64}}})
    err = ccall((:PetscSectionPermute,petscRealDouble),PetscErrorCode,(PetscSection{Float64},IS{Float64},Ptr{PetscSection{Float64}}),arg1,arg2,arg3)
    return err
end

function PetscSectionGetField(arg1::PetscSection{Float64},arg2::Integer,arg3::Union{Ptr{PetscSection{Float64}},StridedArray{PetscSection{Float64}},Ptr{PetscSection{Float64}},Ref{PetscSection{Float64}}})
    err = ccall((:PetscSectionGetField,petscRealDouble),PetscErrorCode,(PetscSection{Float64},Int64,Ptr{PetscSection{Float64}}),arg1,arg2,arg3)
    return err
end

function PetscSectionSetClosureIndex(arg1::PetscSection{Float64},arg2::PetscObject{Float64},arg3::PetscSection{Float64},arg4::IS{Float64})
    err = ccall((:PetscSectionSetClosureIndex,petscRealDouble),PetscErrorCode,(PetscSection{Float64},PetscObject{Float64},PetscSection{Float64},IS{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function PetscSectionGetClosureIndex(arg1::PetscSection{Float64},arg2::PetscObject{Float64},arg3::Union{Ptr{PetscSection{Float64}},StridedArray{PetscSection{Float64}},Ptr{PetscSection{Float64}},Ref{PetscSection{Float64}}},arg4::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:PetscSectionGetClosureIndex,petscRealDouble),PetscErrorCode,(PetscSection{Float64},PetscObject{Float64},Ptr{PetscSection{Float64}},Ptr{IS{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscSFConvertPartition(arg1::PetscSF{Float64},arg2::PetscSection{Float64},arg3::IS{Float64},arg4::Union{Ptr{ISLocalToGlobalMapping{Float64}},StridedArray{ISLocalToGlobalMapping{Float64}},Ptr{ISLocalToGlobalMapping{Float64}},Ref{ISLocalToGlobalMapping{Float64}}},arg5::Union{Ptr{PetscSF{Float64}},StridedArray{PetscSF{Float64}},Ptr{PetscSF{Float64}},Ref{PetscSF{Float64}}})
    err = ccall((:PetscSFConvertPartition,petscRealDouble),PetscErrorCode,(PetscSF{Float64},PetscSection{Float64},IS{Float64},Ptr{ISLocalToGlobalMapping{Float64}},Ptr{PetscSF{Float64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscSFCreateRemoteOffsets(arg1::PetscSF{Float64},arg2::PetscSection{Float64},arg3::PetscSection{Float64},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:PetscSFCreateRemoteOffsets,petscRealDouble),PetscErrorCode,(PetscSF{Float64},PetscSection{Float64},PetscSection{Float64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscSFDistributeSection(arg1::PetscSF{Float64},arg2::PetscSection{Float64},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg4::PetscSection{Float64})
    err = ccall((:PetscSFDistributeSection,petscRealDouble),PetscErrorCode,(PetscSF{Float64},PetscSection{Float64},Ptr{Ptr{Int64}},PetscSection{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function PetscSFCreateSectionSF(arg1::PetscSF{Float64},arg2::PetscSection{Float64},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::PetscSection{Float64},arg5::Union{Ptr{PetscSF{Float64}},StridedArray{PetscSF{Float64}},Ptr{PetscSF{Float64}},Ref{PetscSF{Float64}}})
    err = ccall((:PetscSFCreateSectionSF,petscRealDouble),PetscErrorCode,(PetscSF{Float64},PetscSection{Float64},Ptr{Int64},PetscSection{Float64},Ptr{PetscSF{Float64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function VecInitializePackage(arg0::Type{Float64})
    err = ccall((:VecInitializePackage,petscRealDouble),PetscErrorCode,())
    return err
end

function VecFinalizePackage(arg0::Type{Float64})
    err = ccall((:VecFinalizePackage,petscRealDouble),PetscErrorCode,())
    return err
end

function VecCreate(arg1::MPI_Comm,arg2::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:VecCreate,petscRealDouble),PetscErrorCode,(comm_type,Ptr{Vec{Float64}}),arg1,arg2)
    return err
end

function VecCreateSeq(arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:VecCreateSeq,petscRealDouble),PetscErrorCode,(comm_type,Int64,Ptr{Vec{Float64}}),arg1,arg2,arg3)
    return err
end

function VecCreateMPI(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:VecCreateMPI,petscRealDouble),PetscErrorCode,(comm_type,Int64,Int64,Ptr{Vec{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function VecCreateSeqWithArray(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:VecCreateSeqWithArray,petscRealDouble),PetscErrorCode,(comm_type,Int64,Int64,Ptr{Float64},Ptr{Vec{Float64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function VecCreateMPIWithArray(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg6::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:VecCreateMPIWithArray,petscRealDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Ptr{Float64},Ptr{Vec{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function VecCreateShared(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:VecCreateShared,petscRealDouble),PetscErrorCode,(comm_type,Int64,Int64,Ptr{Vec{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function VecSetFromOptions(arg1::Vec{Float64})
    err = ccall((:VecSetFromOptions,petscRealDouble),PetscErrorCode,(Vec{Float64},),arg1)
    return err
end

function VecDestroy(arg1::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:VecDestroy,petscRealDouble),PetscErrorCode,(Ptr{Vec{Float64}},),arg1)
    return err
end

function VecZeroEntries(arg1::Vec{Float64})
    err = ccall((:VecZeroEntries,petscRealDouble),PetscErrorCode,(Vec{Float64},),arg1)
    return err
end

function VecSetOptionsPrefix(arg1::Vec{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:VecSetOptionsPrefix,petscRealDouble),PetscErrorCode,(Vec{Float64},Cstring),arg1,arg2)
    return err
end

function VecAppendOptionsPrefix(arg1::Vec{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:VecAppendOptionsPrefix,petscRealDouble),PetscErrorCode,(Vec{Float64},Cstring),arg1,arg2)
    return err
end

function VecGetOptionsPrefix(arg1::Vec{Float64},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:VecGetOptionsPrefix,petscRealDouble),PetscErrorCode,(Vec{Float64},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function VecSetSizes(arg1::Vec{Float64},arg2::Integer,arg3::Integer)
    err = ccall((:VecSetSizes,petscRealDouble),PetscErrorCode,(Vec{Float64},Int64,Int64),arg1,arg2,arg3)
    return err
end

function VecDotNorm2(arg1::Vec{Float64},arg2::Vec{Float64},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:VecDotNorm2,petscRealDouble),PetscErrorCode,(Vec{Float64},Vec{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function VecDot(arg1::Vec{Float64},arg2::Vec{Float64},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:VecDot,petscRealDouble),PetscErrorCode,(Vec{Float64},Vec{Float64},Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function VecDotRealPart(arg1::Vec{Float64},arg2::Vec{Float64},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:VecDotRealPart,petscRealDouble),PetscErrorCode,(Vec{Float64},Vec{Float64},Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function VecTDot(arg1::Vec{Float64},arg2::Vec{Float64},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:VecTDot,petscRealDouble),PetscErrorCode,(Vec{Float64},Vec{Float64},Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function VecMDot(arg1::Vec{Float64},arg2::Integer,arg3::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:VecMDot,petscRealDouble),PetscErrorCode,(Vec{Float64},Int64,Ptr{Vec{Float64}},Ptr{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function VecMTDot(arg1::Vec{Float64},arg2::Integer,arg3::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:VecMTDot,petscRealDouble),PetscErrorCode,(Vec{Float64},Int64,Ptr{Vec{Float64}},Ptr{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function VecGetSubVector(arg1::Vec{Float64},arg2::IS{Float64},arg3::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:VecGetSubVector,petscRealDouble),PetscErrorCode,(Vec{Float64},IS{Float64},Ptr{Vec{Float64}}),arg1,arg2,arg3)
    return err
end

function VecRestoreSubVector(arg1::Vec{Float64},arg2::IS{Float64},arg3::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:VecRestoreSubVector,petscRealDouble),PetscErrorCode,(Vec{Float64},IS{Float64},Ptr{Vec{Float64}}),arg1,arg2,arg3)
    return err
end

function VecNorm(arg1::Vec{Float64},arg2::NormType,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:VecNorm,petscRealDouble),PetscErrorCode,(Vec{Float64},NormType,Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function VecNormAvailable(arg1::Vec{Float64},arg2::NormType,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:VecNormAvailable,petscRealDouble),PetscErrorCode,(Vec{Float64},NormType,Ptr{PetscBool},Ptr{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function VecNormalize(arg1::Vec{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:VecNormalize,petscRealDouble),PetscErrorCode,(Vec{Float64},Ptr{Float64}),arg1,arg2)
    return err
end

function VecSum(arg1::Vec{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:VecSum,petscRealDouble),PetscErrorCode,(Vec{Float64},Ptr{Float64}),arg1,arg2)
    return err
end

function VecMax(arg1::Vec{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:VecMax,petscRealDouble),PetscErrorCode,(Vec{Float64},Ptr{Int64},Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function VecMin(arg1::Vec{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:VecMin,petscRealDouble),PetscErrorCode,(Vec{Float64},Ptr{Int64},Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function VecScale(arg1::Vec{Float64},arg2::Float64)
    err = ccall((:VecScale,petscRealDouble),PetscErrorCode,(Vec{Float64},Float64),arg1,arg2)
    return err
end

function VecCopy(arg1::Vec{Float64},arg2::Vec{Float64})
    err = ccall((:VecCopy,petscRealDouble),PetscErrorCode,(Vec{Float64},Vec{Float64}),arg1,arg2)
    return err
end

function VecSetRandom(arg1::Vec{Float64},arg2::PetscRandom{Float64})
    err = ccall((:VecSetRandom,petscRealDouble),PetscErrorCode,(Vec{Float64},PetscRandom{Float64}),arg1,arg2)
    return err
end

function VecSet(arg1::Vec{Float64},arg2::Float64)
    err = ccall((:VecSet,petscRealDouble),PetscErrorCode,(Vec{Float64},Float64),arg1,arg2)
    return err
end

function VecSetInf(arg1::Vec{Float64})
    err = ccall((:VecSetInf,petscRealDouble),PetscErrorCode,(Vec{Float64},),arg1)
    return err
end

function VecSwap(arg1::Vec{Float64},arg2::Vec{Float64})
    err = ccall((:VecSwap,petscRealDouble),PetscErrorCode,(Vec{Float64},Vec{Float64}),arg1,arg2)
    return err
end

function VecAXPY(arg1::Vec{Float64},arg2::Float64,arg3::Vec{Float64})
    err = ccall((:VecAXPY,petscRealDouble),PetscErrorCode,(Vec{Float64},Float64,Vec{Float64}),arg1,arg2,arg3)
    return err
end

function VecAXPBY(arg1::Vec{Float64},arg2::Float64,arg3::Float64,arg4::Vec{Float64})
    err = ccall((:VecAXPBY,petscRealDouble),PetscErrorCode,(Vec{Float64},Float64,Float64,Vec{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function VecMAXPY(arg1::Vec{Float64},arg2::Integer,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:VecMAXPY,petscRealDouble),PetscErrorCode,(Vec{Float64},Int64,Ptr{Float64},Ptr{Vec{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function VecAYPX(arg1::Vec{Float64},arg2::Float64,arg3::Vec{Float64})
    err = ccall((:VecAYPX,petscRealDouble),PetscErrorCode,(Vec{Float64},Float64,Vec{Float64}),arg1,arg2,arg3)
    return err
end

function VecWAXPY(arg1::Vec{Float64},arg2::Float64,arg3::Vec{Float64},arg4::Vec{Float64})
    err = ccall((:VecWAXPY,petscRealDouble),PetscErrorCode,(Vec{Float64},Float64,Vec{Float64},Vec{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function VecAXPBYPCZ(arg1::Vec{Float64},arg2::Float64,arg3::Float64,arg4::Float64,arg5::Vec{Float64},arg6::Vec{Float64})
    err = ccall((:VecAXPBYPCZ,petscRealDouble),PetscErrorCode,(Vec{Float64},Float64,Float64,Float64,Vec{Float64},Vec{Float64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function VecPointwiseMax(arg1::Vec{Float64},arg2::Vec{Float64},arg3::Vec{Float64})
    err = ccall((:VecPointwiseMax,petscRealDouble),PetscErrorCode,(Vec{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3)
    return err
end

function VecPointwiseMaxAbs(arg1::Vec{Float64},arg2::Vec{Float64},arg3::Vec{Float64})
    err = ccall((:VecPointwiseMaxAbs,petscRealDouble),PetscErrorCode,(Vec{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3)
    return err
end

function VecPointwiseMin(arg1::Vec{Float64},arg2::Vec{Float64},arg3::Vec{Float64})
    err = ccall((:VecPointwiseMin,petscRealDouble),PetscErrorCode,(Vec{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3)
    return err
end

function VecPointwiseMult(arg1::Vec{Float64},arg2::Vec{Float64},arg3::Vec{Float64})
    err = ccall((:VecPointwiseMult,petscRealDouble),PetscErrorCode,(Vec{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3)
    return err
end

function VecPointwiseDivide(arg1::Vec{Float64},arg2::Vec{Float64},arg3::Vec{Float64})
    err = ccall((:VecPointwiseDivide,petscRealDouble),PetscErrorCode,(Vec{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3)
    return err
end

function VecMaxPointwiseDivide(arg1::Vec{Float64},arg2::Vec{Float64},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:VecMaxPointwiseDivide,petscRealDouble),PetscErrorCode,(Vec{Float64},Vec{Float64},Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function VecShift(arg1::Vec{Float64},arg2::Float64)
    err = ccall((:VecShift,petscRealDouble),PetscErrorCode,(Vec{Float64},Float64),arg1,arg2)
    return err
end

function VecReciprocal(arg1::Vec{Float64})
    err = ccall((:VecReciprocal,petscRealDouble),PetscErrorCode,(Vec{Float64},),arg1)
    return err
end

function VecPermute(arg1::Vec{Float64},arg2::IS{Float64},arg3::PetscBool)
    err = ccall((:VecPermute,petscRealDouble),PetscErrorCode,(Vec{Float64},IS{Float64},PetscBool),arg1,arg2,arg3)
    return err
end

function VecSqrtAbs(arg1::Vec{Float64})
    err = ccall((:VecSqrtAbs,petscRealDouble),PetscErrorCode,(Vec{Float64},),arg1)
    return err
end

function VecLog(arg1::Vec{Float64})
    err = ccall((:VecLog,petscRealDouble),PetscErrorCode,(Vec{Float64},),arg1)
    return err
end

function VecExp(arg1::Vec{Float64})
    err = ccall((:VecExp,petscRealDouble),PetscErrorCode,(Vec{Float64},),arg1)
    return err
end

function VecAbs(arg1::Vec{Float64})
    err = ccall((:VecAbs,petscRealDouble),PetscErrorCode,(Vec{Float64},),arg1)
    return err
end

function VecDuplicate(arg1::Vec{Float64},arg2::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:VecDuplicate,petscRealDouble),PetscErrorCode,(Vec{Float64},Ptr{Vec{Float64}}),arg1,arg2)
    return err
end

function VecDuplicateVecs(arg1::Vec{Float64},arg2::Integer,arg3::Union{Ptr{Ptr{Vec{Float64}}},StridedArray{Ptr{Vec{Float64}}},Ptr{Ptr{Vec{Float64}}},Ref{Ptr{Vec{Float64}}}})
    err = ccall((:VecDuplicateVecs,petscRealDouble),PetscErrorCode,(Vec{Float64},Int64,Ptr{Ptr{Vec{Float64}}}),arg1,arg2,arg3)
    return err
end

function VecDestroyVecs(arg1::Integer,arg2::Union{Ptr{Ptr{Vec{Float64}}},StridedArray{Ptr{Vec{Float64}}},Ptr{Ptr{Vec{Float64}}},Ref{Ptr{Vec{Float64}}}})
    err = ccall((:VecDestroyVecs,petscRealDouble),PetscErrorCode,(Int64,Ptr{Ptr{Vec{Float64}}}),arg1,arg2)
    return err
end

function VecStrideNormAll(arg1::Vec{Float64},arg2::NormType,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:VecStrideNormAll,petscRealDouble),PetscErrorCode,(Vec{Float64},NormType,Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function VecStrideMaxAll(arg1::Vec{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:VecStrideMaxAll,petscRealDouble),PetscErrorCode,(Vec{Float64},Ptr{Int64},Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function VecStrideMinAll(arg1::Vec{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:VecStrideMinAll,petscRealDouble),PetscErrorCode,(Vec{Float64},Ptr{Int64},Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function VecStrideScaleAll(arg1::Vec{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:VecStrideScaleAll,petscRealDouble),PetscErrorCode,(Vec{Float64},Ptr{Float64}),arg1,arg2)
    return err
end

function VecUniqueEntries(arg1::Vec{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:VecUniqueEntries,petscRealDouble),PetscErrorCode,(Vec{Float64},Ptr{Int64},Ptr{Ptr{Float64}}),arg1,arg2,arg3)
    return err
end

function VecStrideNorm(arg1::Vec{Float64},arg2::Integer,arg3::NormType,arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:VecStrideNorm,petscRealDouble),PetscErrorCode,(Vec{Float64},Int64,NormType,Ptr{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function VecStrideMax(arg1::Vec{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:VecStrideMax,petscRealDouble),PetscErrorCode,(Vec{Float64},Int64,Ptr{Int64},Ptr{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function VecStrideMin(arg1::Vec{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:VecStrideMin,petscRealDouble),PetscErrorCode,(Vec{Float64},Int64,Ptr{Int64},Ptr{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function VecStrideScale(arg1::Vec{Float64},arg2::Integer,arg3::Float64)
    err = ccall((:VecStrideScale,petscRealDouble),PetscErrorCode,(Vec{Float64},Int64,Float64),arg1,arg2,arg3)
    return err
end

function VecStrideSet(arg1::Vec{Float64},arg2::Integer,arg3::Float64)
    err = ccall((:VecStrideSet,petscRealDouble),PetscErrorCode,(Vec{Float64},Int64,Float64),arg1,arg2,arg3)
    return err
end

function VecStrideGather(arg1::Vec{Float64},arg2::Integer,arg3::Vec{Float64},arg4::InsertMode)
    err = ccall((:VecStrideGather,petscRealDouble),PetscErrorCode,(Vec{Float64},Int64,Vec{Float64},InsertMode),arg1,arg2,arg3,arg4)
    return err
end

function VecStrideScatter(arg1::Vec{Float64},arg2::Integer,arg3::Vec{Float64},arg4::InsertMode)
    err = ccall((:VecStrideScatter,petscRealDouble),PetscErrorCode,(Vec{Float64},Int64,Vec{Float64},InsertMode),arg1,arg2,arg3,arg4)
    return err
end

function VecStrideGatherAll(arg1::Vec{Float64},arg2::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}},arg3::InsertMode)
    err = ccall((:VecStrideGatherAll,petscRealDouble),PetscErrorCode,(Vec{Float64},Ptr{Vec{Float64}},InsertMode),arg1,arg2,arg3)
    return err
end

function VecStrideScatterAll(arg1::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}},arg2::Vec{Float64},arg3::InsertMode)
    err = ccall((:VecStrideScatterAll,petscRealDouble),PetscErrorCode,(Ptr{Vec{Float64}},Vec{Float64},InsertMode),arg1,arg2,arg3)
    return err
end

function VecStrideSubSetScatter(arg1::Vec{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Vec{Float64},arg6::InsertMode)
    err = ccall((:VecStrideSubSetScatter,petscRealDouble),PetscErrorCode,(Vec{Float64},Int64,Ptr{Int64},Ptr{Int64},Vec{Float64},InsertMode),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function VecStrideSubSetGather(arg1::Vec{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Vec{Float64},arg6::InsertMode)
    err = ccall((:VecStrideSubSetGather,petscRealDouble),PetscErrorCode,(Vec{Float64},Int64,Ptr{Int64},Ptr{Int64},Vec{Float64},InsertMode),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function VecSetValues(arg1::Vec{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::InsertMode)
    err = ccall((:VecSetValues,petscRealDouble),PetscErrorCode,(Vec{Float64},Int64,Ptr{Int64},Ptr{Float64},InsertMode),arg1,arg2,arg3,arg4,arg5)
    return err
end

function VecGetValues(arg1::Vec{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:VecGetValues,petscRealDouble),PetscErrorCode,(Vec{Float64},Int64,Ptr{Int64},Ptr{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function VecAssemblyBegin(arg1::Vec{Float64})
    err = ccall((:VecAssemblyBegin,petscRealDouble),PetscErrorCode,(Vec{Float64},),arg1)
    return err
end

function VecAssemblyEnd(arg1::Vec{Float64})
    err = ccall((:VecAssemblyEnd,petscRealDouble),PetscErrorCode,(Vec{Float64},),arg1)
    return err
end

function VecStashSetInitialSize(arg1::Vec{Float64},arg2::Integer,arg3::Integer)
    err = ccall((:VecStashSetInitialSize,petscRealDouble),PetscErrorCode,(Vec{Float64},Int64,Int64),arg1,arg2,arg3)
    return err
end

function VecStashView(arg1::Vec{Float64},arg2::PetscViewer{Float64})
    err = ccall((:VecStashView,petscRealDouble),PetscErrorCode,(Vec{Float64},PetscViewer{Float64}),arg1,arg2)
    return err
end

function VecStashViewFromOptions(arg1::Vec{Float64},arg2::PetscObject{Float64},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:VecStashViewFromOptions,petscRealDouble),PetscErrorCode,(Vec{Float64},PetscObject{Float64},Cstring),arg1,arg2,arg3)
    return err
end

function VecStashGetInfo(arg1::Vec{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:VecStashGetInfo,petscRealDouble),PetscErrorCode,(Vec{Float64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function VecGetBlockSize(arg1::Vec{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:VecGetBlockSize,petscRealDouble),PetscErrorCode,(Vec{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function VecSetValuesBlocked(arg1::Vec{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::InsertMode)
    err = ccall((:VecSetValuesBlocked,petscRealDouble),PetscErrorCode,(Vec{Float64},Int64,Ptr{Int64},Ptr{Float64},InsertMode),arg1,arg2,arg3,arg4,arg5)
    return err
end

function VecSetType(arg1::Vec{Float64},arg2::VecType)
    err = ccall((:VecSetType,petscRealDouble),PetscErrorCode,(Vec{Float64},Symbol),arg1,arg2)
    return err
end

function VecGetType(arg1::Vec{Float64},arg2::Union{Ptr{VecType},StridedArray{VecType},Ptr{VecType},Ref{VecType}})
    err = ccall((:VecGetType,petscRealDouble),PetscErrorCode,(Vec{Float64},Ptr{VecType}),arg1,arg2)
    return err
end

function VecRegister(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:VecRegister,petscRealDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function VecScatterCreate(arg1::Vec{Float64},arg2::IS{Float64},arg3::Vec{Float64},arg4::IS{Float64},arg5::Union{Ptr{VecScatter{Float64}},StridedArray{VecScatter{Float64}},Ptr{VecScatter{Float64}},Ref{VecScatter{Float64}}})
    err = ccall((:VecScatterCreate,petscRealDouble),PetscErrorCode,(Vec{Float64},IS{Float64},Vec{Float64},IS{Float64},Ptr{VecScatter{Float64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function VecScatterCreateEmpty(arg1::MPI_Comm,arg2::Union{Ptr{VecScatter{Float64}},StridedArray{VecScatter{Float64}},Ptr{VecScatter{Float64}},Ref{VecScatter{Float64}}})
    err = ccall((:VecScatterCreateEmpty,petscRealDouble),PetscErrorCode,(comm_type,Ptr{VecScatter{Float64}}),arg1,arg2)
    return err
end

function VecScatterCreateLocal(arg1::VecScatter{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Integer,arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg9::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg10::Integer)
    err = ccall((:VecScatterCreateLocal,petscRealDouble),PetscErrorCode,(VecScatter{Float64},Int64,Ptr{Int64},Ptr{Int64},Ptr{Int64},Int64,Ptr{Int64},Ptr{Int64},Ptr{Int64},Int64),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function VecScatterBegin(arg1::VecScatter{Float64},arg2::Vec{Float64},arg3::Vec{Float64},arg4::InsertMode,arg5::ScatterMode)
    err = ccall((:VecScatterBegin,petscRealDouble),PetscErrorCode,(VecScatter{Float64},Vec{Float64},Vec{Float64},InsertMode,ScatterMode),arg1,arg2,arg3,arg4,arg5)
    return err
end

function VecScatterEnd(arg1::VecScatter{Float64},arg2::Vec{Float64},arg3::Vec{Float64},arg4::InsertMode,arg5::ScatterMode)
    err = ccall((:VecScatterEnd,petscRealDouble),PetscErrorCode,(VecScatter{Float64},Vec{Float64},Vec{Float64},InsertMode,ScatterMode),arg1,arg2,arg3,arg4,arg5)
    return err
end

function VecScatterDestroy(arg1::Union{Ptr{VecScatter{Float64}},StridedArray{VecScatter{Float64}},Ptr{VecScatter{Float64}},Ref{VecScatter{Float64}}})
    err = ccall((:VecScatterDestroy,petscRealDouble),PetscErrorCode,(Ptr{VecScatter{Float64}},),arg1)
    return err
end

function VecScatterCopy(arg1::VecScatter{Float64},arg2::Union{Ptr{VecScatter{Float64}},StridedArray{VecScatter{Float64}},Ptr{VecScatter{Float64}},Ref{VecScatter{Float64}}})
    err = ccall((:VecScatterCopy,petscRealDouble),PetscErrorCode,(VecScatter{Float64},Ptr{VecScatter{Float64}}),arg1,arg2)
    return err
end

function VecScatterView(arg1::VecScatter{Float64},arg2::PetscViewer{Float64})
    err = ccall((:VecScatterView,petscRealDouble),PetscErrorCode,(VecScatter{Float64},PetscViewer{Float64}),arg1,arg2)
    return err
end

function VecScatterGetMerged(arg1::VecScatter{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:VecScatterGetMerged,petscRealDouble),PetscErrorCode,(VecScatter{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function VecGetArray4d(arg1::Vec{Float64},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Integer,arg9::Integer,arg10::Union{Ptr{Ptr{Ptr{Ptr{Ptr{Float64}}}}},StridedArray{Ptr{Ptr{Ptr{Ptr{Float64}}}}},Ptr{Ptr{Ptr{Ptr{Ptr{Float64}}}}},Ref{Ptr{Ptr{Ptr{Ptr{Float64}}}}}})
    err = ccall((:VecGetArray4d,petscRealDouble),PetscErrorCode,(Vec{Float64},Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Ptr{Ptr{Ptr{Ptr{Float64}}}}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function VecRestoreArray4d(arg1::Vec{Float64},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Integer,arg9::Integer,arg10::Union{Ptr{Ptr{Ptr{Ptr{Ptr{Float64}}}}},StridedArray{Ptr{Ptr{Ptr{Ptr{Float64}}}}},Ptr{Ptr{Ptr{Ptr{Ptr{Float64}}}}},Ref{Ptr{Ptr{Ptr{Ptr{Float64}}}}}})
    err = ccall((:VecRestoreArray4d,petscRealDouble),PetscErrorCode,(Vec{Float64},Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Ptr{Ptr{Ptr{Ptr{Float64}}}}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function VecGetArray3d(arg1::Vec{Float64},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Union{Ptr{Ptr{Ptr{Ptr{Float64}}}},StridedArray{Ptr{Ptr{Ptr{Float64}}}},Ptr{Ptr{Ptr{Ptr{Float64}}}},Ref{Ptr{Ptr{Ptr{Float64}}}}})
    err = ccall((:VecGetArray3d,petscRealDouble),PetscErrorCode,(Vec{Float64},Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Ptr{Ptr{Ptr{Float64}}}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function VecRestoreArray3d(arg1::Vec{Float64},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Union{Ptr{Ptr{Ptr{Ptr{Float64}}}},StridedArray{Ptr{Ptr{Ptr{Float64}}}},Ptr{Ptr{Ptr{Ptr{Float64}}}},Ref{Ptr{Ptr{Ptr{Float64}}}}})
    err = ccall((:VecRestoreArray3d,petscRealDouble),PetscErrorCode,(Vec{Float64},Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Ptr{Ptr{Ptr{Float64}}}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function VecGetArray2d(arg1::Vec{Float64},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Ptr{Ptr{Float64}}},StridedArray{Ptr{Ptr{Float64}}},Ptr{Ptr{Ptr{Float64}}},Ref{Ptr{Ptr{Float64}}}})
    err = ccall((:VecGetArray2d,petscRealDouble),PetscErrorCode,(Vec{Float64},Int64,Int64,Int64,Int64,Ptr{Ptr{Ptr{Float64}}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function VecRestoreArray2d(arg1::Vec{Float64},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Ptr{Ptr{Float64}}},StridedArray{Ptr{Ptr{Float64}}},Ptr{Ptr{Ptr{Float64}}},Ref{Ptr{Ptr{Float64}}}})
    err = ccall((:VecRestoreArray2d,petscRealDouble),PetscErrorCode,(Vec{Float64},Int64,Int64,Int64,Int64,Ptr{Ptr{Ptr{Float64}}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function VecGetArray1d(arg1::Vec{Float64},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:VecGetArray1d,petscRealDouble),PetscErrorCode,(Vec{Float64},Int64,Int64,Ptr{Ptr{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function VecRestoreArray1d(arg1::Vec{Float64},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:VecRestoreArray1d,petscRealDouble),PetscErrorCode,(Vec{Float64},Int64,Int64,Ptr{Ptr{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function VecGetArray4dRead(arg1::Vec{Float64},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Integer,arg9::Integer,arg10::Union{Ptr{Ptr{Ptr{Ptr{Ptr{Float64}}}}},StridedArray{Ptr{Ptr{Ptr{Ptr{Float64}}}}},Ptr{Ptr{Ptr{Ptr{Ptr{Float64}}}}},Ref{Ptr{Ptr{Ptr{Ptr{Float64}}}}}})
    err = ccall((:VecGetArray4dRead,petscRealDouble),PetscErrorCode,(Vec{Float64},Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Ptr{Ptr{Ptr{Ptr{Float64}}}}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function VecRestoreArray4dRead(arg1::Vec{Float64},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Integer,arg9::Integer,arg10::Union{Ptr{Ptr{Ptr{Ptr{Ptr{Float64}}}}},StridedArray{Ptr{Ptr{Ptr{Ptr{Float64}}}}},Ptr{Ptr{Ptr{Ptr{Ptr{Float64}}}}},Ref{Ptr{Ptr{Ptr{Ptr{Float64}}}}}})
    err = ccall((:VecRestoreArray4dRead,petscRealDouble),PetscErrorCode,(Vec{Float64},Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Ptr{Ptr{Ptr{Ptr{Float64}}}}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function VecGetArray3dRead(arg1::Vec{Float64},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Union{Ptr{Ptr{Ptr{Ptr{Float64}}}},StridedArray{Ptr{Ptr{Ptr{Float64}}}},Ptr{Ptr{Ptr{Ptr{Float64}}}},Ref{Ptr{Ptr{Ptr{Float64}}}}})
    err = ccall((:VecGetArray3dRead,petscRealDouble),PetscErrorCode,(Vec{Float64},Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Ptr{Ptr{Ptr{Float64}}}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function VecRestoreArray3dRead(arg1::Vec{Float64},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Union{Ptr{Ptr{Ptr{Ptr{Float64}}}},StridedArray{Ptr{Ptr{Ptr{Float64}}}},Ptr{Ptr{Ptr{Ptr{Float64}}}},Ref{Ptr{Ptr{Ptr{Float64}}}}})
    err = ccall((:VecRestoreArray3dRead,petscRealDouble),PetscErrorCode,(Vec{Float64},Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Ptr{Ptr{Ptr{Float64}}}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function VecGetArray2dRead(arg1::Vec{Float64},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Ptr{Ptr{Float64}}},StridedArray{Ptr{Ptr{Float64}}},Ptr{Ptr{Ptr{Float64}}},Ref{Ptr{Ptr{Float64}}}})
    err = ccall((:VecGetArray2dRead,petscRealDouble),PetscErrorCode,(Vec{Float64},Int64,Int64,Int64,Int64,Ptr{Ptr{Ptr{Float64}}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function VecRestoreArray2dRead(arg1::Vec{Float64},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Ptr{Ptr{Float64}}},StridedArray{Ptr{Ptr{Float64}}},Ptr{Ptr{Ptr{Float64}}},Ref{Ptr{Ptr{Float64}}}})
    err = ccall((:VecRestoreArray2dRead,petscRealDouble),PetscErrorCode,(Vec{Float64},Int64,Int64,Int64,Int64,Ptr{Ptr{Ptr{Float64}}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function VecGetArray1dRead(arg1::Vec{Float64},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:VecGetArray1dRead,petscRealDouble),PetscErrorCode,(Vec{Float64},Int64,Int64,Ptr{Ptr{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function VecRestoreArray1dRead(arg1::Vec{Float64},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:VecRestoreArray1dRead,petscRealDouble),PetscErrorCode,(Vec{Float64},Int64,Int64,Ptr{Ptr{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function VecPlaceArray(arg1::Vec{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:VecPlaceArray,petscRealDouble),PetscErrorCode,(Vec{Float64},Ptr{Float64}),arg1,arg2)
    return err
end

function VecResetArray(arg1::Vec{Float64})
    err = ccall((:VecResetArray,petscRealDouble),PetscErrorCode,(Vec{Float64},),arg1)
    return err
end

function VecReplaceArray(arg1::Vec{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:VecReplaceArray,petscRealDouble),PetscErrorCode,(Vec{Float64},Ptr{Float64}),arg1,arg2)
    return err
end

function VecGetArrays(arg1::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}},arg2::Integer,arg3::Union{Ptr{Ptr{Ptr{Float64}}},StridedArray{Ptr{Ptr{Float64}}},Ptr{Ptr{Ptr{Float64}}},Ref{Ptr{Ptr{Float64}}}})
    err = ccall((:VecGetArrays,petscRealDouble),PetscErrorCode,(Ptr{Vec{Float64}},Int64,Ptr{Ptr{Ptr{Float64}}}),arg1,arg2,arg3)
    return err
end

function VecRestoreArrays(arg1::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}},arg2::Integer,arg3::Union{Ptr{Ptr{Ptr{Float64}}},StridedArray{Ptr{Ptr{Float64}}},Ptr{Ptr{Ptr{Float64}}},Ref{Ptr{Ptr{Float64}}}})
    err = ccall((:VecRestoreArrays,petscRealDouble),PetscErrorCode,(Ptr{Vec{Float64}},Int64,Ptr{Ptr{Ptr{Float64}}}),arg1,arg2,arg3)
    return err
end

function VecView(arg1::Vec{Float64},arg2::PetscViewer{Float64})
    err = ccall((:VecView,petscRealDouble),PetscErrorCode,(Vec{Float64},PetscViewer{Float64}),arg1,arg2)
    return err
end

function VecEqual(arg1::Vec{Float64},arg2::Vec{Float64},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:VecEqual,petscRealDouble),PetscErrorCode,(Vec{Float64},Vec{Float64},Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function VecLoad(arg1::Vec{Float64},arg2::PetscViewer{Float64})
    err = ccall((:VecLoad,petscRealDouble),PetscErrorCode,(Vec{Float64},PetscViewer{Float64}),arg1,arg2)
    return err
end

function VecGetSize(arg1::Vec{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:VecGetSize,petscRealDouble),PetscErrorCode,(Vec{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function VecGetLocalSize(arg1::Vec{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:VecGetLocalSize,petscRealDouble),PetscErrorCode,(Vec{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function VecGetOwnershipRange(arg1::Vec{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:VecGetOwnershipRange,petscRealDouble),PetscErrorCode,(Vec{Float64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function VecGetOwnershipRanges(arg1::Vec{Float64},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:VecGetOwnershipRanges,petscRealDouble),PetscErrorCode,(Vec{Float64},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function VecSetLocalToGlobalMapping(arg1::Vec{Float64},arg2::ISLocalToGlobalMapping{Float64})
    err = ccall((:VecSetLocalToGlobalMapping,petscRealDouble),PetscErrorCode,(Vec{Float64},ISLocalToGlobalMapping{Float64}),arg1,arg2)
    return err
end

function VecSetValuesLocal(arg1::Vec{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::InsertMode)
    err = ccall((:VecSetValuesLocal,petscRealDouble),PetscErrorCode,(Vec{Float64},Int64,Ptr{Int64},Ptr{Float64},InsertMode),arg1,arg2,arg3,arg4,arg5)
    return err
end

function VecGetLocalToGlobalMapping(arg1::Vec{Float64},arg2::Union{Ptr{ISLocalToGlobalMapping{Float64}},StridedArray{ISLocalToGlobalMapping{Float64}},Ptr{ISLocalToGlobalMapping{Float64}},Ref{ISLocalToGlobalMapping{Float64}}})
    err = ccall((:VecGetLocalToGlobalMapping,petscRealDouble),PetscErrorCode,(Vec{Float64},Ptr{ISLocalToGlobalMapping{Float64}}),arg1,arg2)
    return err
end

function VecDotBegin(arg1::Vec{Float64},arg2::Vec{Float64},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:VecDotBegin,petscRealDouble),PetscErrorCode,(Vec{Float64},Vec{Float64},Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function VecDotEnd(arg1::Vec{Float64},arg2::Vec{Float64},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:VecDotEnd,petscRealDouble),PetscErrorCode,(Vec{Float64},Vec{Float64},Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function VecTDotBegin(arg1::Vec{Float64},arg2::Vec{Float64},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:VecTDotBegin,petscRealDouble),PetscErrorCode,(Vec{Float64},Vec{Float64},Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function VecTDotEnd(arg1::Vec{Float64},arg2::Vec{Float64},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:VecTDotEnd,petscRealDouble),PetscErrorCode,(Vec{Float64},Vec{Float64},Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function VecNormBegin(arg1::Vec{Float64},arg2::NormType,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:VecNormBegin,petscRealDouble),PetscErrorCode,(Vec{Float64},NormType,Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function VecNormEnd(arg1::Vec{Float64},arg2::NormType,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:VecNormEnd,petscRealDouble),PetscErrorCode,(Vec{Float64},NormType,Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function VecMDotBegin(arg1::Vec{Float64},arg2::Integer,arg3::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:VecMDotBegin,petscRealDouble),PetscErrorCode,(Vec{Float64},Int64,Ptr{Vec{Float64}},Ptr{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function VecMDotEnd(arg1::Vec{Float64},arg2::Integer,arg3::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:VecMDotEnd,petscRealDouble),PetscErrorCode,(Vec{Float64},Int64,Ptr{Vec{Float64}},Ptr{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function VecMTDotBegin(arg1::Vec{Float64},arg2::Integer,arg3::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:VecMTDotBegin,petscRealDouble),PetscErrorCode,(Vec{Float64},Int64,Ptr{Vec{Float64}},Ptr{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function VecMTDotEnd(arg1::Vec{Float64},arg2::Integer,arg3::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:VecMTDotEnd,petscRealDouble),PetscErrorCode,(Vec{Float64},Int64,Ptr{Vec{Float64}},Ptr{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function PetscCommSplitReductionBegin(arg0::Type{Float64},arg1::MPI_Comm)
    err = ccall((:PetscCommSplitReductionBegin,petscRealDouble),PetscErrorCode,(comm_type,),arg1)
    return err
end

function VecSetOption(arg1::Vec{Float64},arg2::VecOption,arg3::PetscBool)
    err = ccall((:VecSetOption,petscRealDouble),PetscErrorCode,(Vec{Float64},VecOption,PetscBool),arg1,arg2,arg3)
    return err
end

function VecGetArray(arg1::Vec{Float64},arg2::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:VecGetArray,petscRealDouble),PetscErrorCode,(Vec{Float64},Ptr{Ptr{Float64}}),arg1,arg2)
    return err
end

function VecGetArrayRead(arg1::Vec{Float64},arg2::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:VecGetArrayRead,petscRealDouble),PetscErrorCode,(Vec{Float64},Ptr{Ptr{Float64}}),arg1,arg2)
    return err
end

function VecRestoreArray(arg1::Vec{Float64},arg2::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:VecRestoreArray,petscRealDouble),PetscErrorCode,(Vec{Float64},Ptr{Ptr{Float64}}),arg1,arg2)
    return err
end

function VecRestoreArrayRead(arg1::Vec{Float64},arg2::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:VecRestoreArrayRead,petscRealDouble),PetscErrorCode,(Vec{Float64},Ptr{Ptr{Float64}}),arg1,arg2)
    return err
end

function VecGetLocalVector(arg1::Vec{Float64},arg2::Vec{Float64})
    err = ccall((:VecGetLocalVector,petscRealDouble),PetscErrorCode,(Vec{Float64},Vec{Float64}),arg1,arg2)
    return err
end

function VecRestoreLocalVector(arg1::Vec{Float64},arg2::Vec{Float64})
    err = ccall((:VecRestoreLocalVector,petscRealDouble),PetscErrorCode,(Vec{Float64},Vec{Float64}),arg1,arg2)
    return err
end

function VecGetLocalVectorRead(arg1::Vec{Float64},arg2::Vec{Float64})
    err = ccall((:VecGetLocalVectorRead,petscRealDouble),PetscErrorCode,(Vec{Float64},Vec{Float64}),arg1,arg2)
    return err
end

function VecRestoreLocalVectorRead(arg1::Vec{Float64},arg2::Vec{Float64})
    err = ccall((:VecRestoreLocalVectorRead,petscRealDouble),PetscErrorCode,(Vec{Float64},Vec{Float64}),arg1,arg2)
    return err
end

function VecContourScale(arg1::Vec{Float64},arg2::Float64,arg3::Float64)
    err = ccall((:VecContourScale,petscRealDouble),PetscErrorCode,(Vec{Float64},Float64,Float64),arg1,arg2,arg3)
    return err
end

function VecSetOperation(arg1::Vec{Float64},arg2::VecOperation,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:VecSetOperation,petscRealDouble),PetscErrorCode,(Vec{Float64},VecOperation,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function VecMPISetGhost(arg1::Vec{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:VecMPISetGhost,petscRealDouble),PetscErrorCode,(Vec{Float64},Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function VecCreateGhost(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:VecCreateGhost,petscRealDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Ptr{Int64},Ptr{Vec{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function VecCreateGhostWithArray(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg7::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:VecCreateGhostWithArray,petscRealDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Ptr{Int64},Ptr{Float64},Ptr{Vec{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function VecCreateGhostBlock(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:VecCreateGhostBlock,petscRealDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Vec{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function VecCreateGhostBlockWithArray(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg8::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:VecCreateGhostBlockWithArray,petscRealDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Float64},Ptr{Vec{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function VecGhostGetLocalForm(arg1::Vec{Float64},arg2::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:VecGhostGetLocalForm,petscRealDouble),PetscErrorCode,(Vec{Float64},Ptr{Vec{Float64}}),arg1,arg2)
    return err
end

function VecGhostRestoreLocalForm(arg1::Vec{Float64},arg2::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:VecGhostRestoreLocalForm,petscRealDouble),PetscErrorCode,(Vec{Float64},Ptr{Vec{Float64}}),arg1,arg2)
    return err
end

function VecGhostIsLocalForm(arg1::Vec{Float64},arg2::Vec{Float64},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:VecGhostIsLocalForm,petscRealDouble),PetscErrorCode,(Vec{Float64},Vec{Float64},Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function VecGhostUpdateBegin(arg1::Vec{Float64},arg2::InsertMode,arg3::ScatterMode)
    err = ccall((:VecGhostUpdateBegin,petscRealDouble),PetscErrorCode,(Vec{Float64},InsertMode,ScatterMode),arg1,arg2,arg3)
    return err
end

function VecGhostUpdateEnd(arg1::Vec{Float64},arg2::InsertMode,arg3::ScatterMode)
    err = ccall((:VecGhostUpdateEnd,petscRealDouble),PetscErrorCode,(Vec{Float64},InsertMode,ScatterMode),arg1,arg2,arg3)
    return err
end

function VecConjugate(arg1::Vec{Float64})
    err = ccall((:VecConjugate,petscRealDouble),PetscErrorCode,(Vec{Float64},),arg1)
    return err
end

function VecScatterCreateToAll(arg1::Vec{Float64},arg2::Union{Ptr{VecScatter{Float64}},StridedArray{VecScatter{Float64}},Ptr{VecScatter{Float64}},Ref{VecScatter{Float64}}},arg3::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:VecScatterCreateToAll,petscRealDouble),PetscErrorCode,(Vec{Float64},Ptr{VecScatter{Float64}},Ptr{Vec{Float64}}),arg1,arg2,arg3)
    return err
end

function VecScatterCreateToZero(arg1::Vec{Float64},arg2::Union{Ptr{VecScatter{Float64}},StridedArray{VecScatter{Float64}},Ptr{VecScatter{Float64}},Ref{VecScatter{Float64}}},arg3::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:VecScatterCreateToZero,petscRealDouble),PetscErrorCode,(Vec{Float64},Ptr{VecScatter{Float64}},Ptr{Vec{Float64}}),arg1,arg2,arg3)
    return err
end

function ISComplementVec(arg1::IS{Float64},arg2::Vec{Float64},arg3::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:ISComplementVec,petscRealDouble),PetscErrorCode,(IS{Float64},Vec{Float64},Ptr{IS{Float64}}),arg1,arg2,arg3)
    return err
end

function VecPow(arg1::Vec{Float64},arg2::Float64)
    err = ccall((:VecPow,petscRealDouble),PetscErrorCode,(Vec{Float64},Float64),arg1,arg2)
    return err
end

function VecMedian(arg1::Vec{Float64},arg2::Vec{Float64},arg3::Vec{Float64},arg4::Vec{Float64})
    err = ccall((:VecMedian,petscRealDouble),PetscErrorCode,(Vec{Float64},Vec{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function VecWhichBetween(arg1::Vec{Float64},arg2::Vec{Float64},arg3::Vec{Float64},arg4::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:VecWhichBetween,petscRealDouble),PetscErrorCode,(Vec{Float64},Vec{Float64},Vec{Float64},Ptr{IS{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function VecWhichBetweenOrEqual(arg1::Vec{Float64},arg2::Vec{Float64},arg3::Vec{Float64},arg4::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:VecWhichBetweenOrEqual,petscRealDouble),PetscErrorCode,(Vec{Float64},Vec{Float64},Vec{Float64},Ptr{IS{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function VecWhichGreaterThan(arg1::Vec{Float64},arg2::Vec{Float64},arg3::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:VecWhichGreaterThan,petscRealDouble),PetscErrorCode,(Vec{Float64},Vec{Float64},Ptr{IS{Float64}}),arg1,arg2,arg3)
    return err
end

function VecWhichLessThan(arg1::Vec{Float64},arg2::Vec{Float64},arg3::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:VecWhichLessThan,petscRealDouble),PetscErrorCode,(Vec{Float64},Vec{Float64},Ptr{IS{Float64}}),arg1,arg2,arg3)
    return err
end

function VecWhichEqual(arg1::Vec{Float64},arg2::Vec{Float64},arg3::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:VecWhichEqual,petscRealDouble),PetscErrorCode,(Vec{Float64},Vec{Float64},Ptr{IS{Float64}}),arg1,arg2,arg3)
    return err
end

function VecISAXPY(arg1::Vec{Float64},arg2::IS{Float64},arg3::Float64,arg4::Vec{Float64})
    err = ccall((:VecISAXPY,petscRealDouble),PetscErrorCode,(Vec{Float64},IS{Float64},Float64,Vec{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function VecISSet(arg1::Vec{Float64},arg2::IS{Float64},arg3::Float64)
    err = ccall((:VecISSet,petscRealDouble),PetscErrorCode,(Vec{Float64},IS{Float64},Float64),arg1,arg2,arg3)
    return err
end

function VecBoundGradientProjection(arg1::Vec{Float64},arg2::Vec{Float64},arg3::Vec{Float64},arg4::Vec{Float64},arg5::Vec{Float64})
    err = ccall((:VecBoundGradientProjection,petscRealDouble),PetscErrorCode,(Vec{Float64},Vec{Float64},Vec{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function VecStepBoundInfo(arg1::Vec{Float64},arg2::Vec{Float64},arg3::Vec{Float64},arg4::Vec{Float64},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg7::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:VecStepBoundInfo,petscRealDouble),PetscErrorCode,(Vec{Float64},Vec{Float64},Vec{Float64},Vec{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function VecStepMax(arg1::Vec{Float64},arg2::Vec{Float64},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:VecStepMax,petscRealDouble),PetscErrorCode,(Vec{Float64},Vec{Float64},Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function VecStepMaxBounded(arg1::Vec{Float64},arg2::Vec{Float64},arg3::Vec{Float64},arg4::Vec{Float64},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:VecStepMaxBounded,petscRealDouble),PetscErrorCode,(Vec{Float64},Vec{Float64},Vec{Float64},Vec{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscViewerMathematicaGetVector(arg1::PetscViewer{Float64},arg2::Vec{Float64})
    err = ccall((:PetscViewerMathematicaGetVector,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Vec{Float64}),arg1,arg2)
    return err
end

function PetscViewerMathematicaPutVector(arg1::PetscViewer{Float64},arg2::Vec{Float64})
    err = ccall((:PetscViewerMathematicaPutVector,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Vec{Float64}),arg1,arg2)
    return err
end

function VecsDestroy(arg1::Vecs{Float64})
    err = ccall((:VecsDestroy,petscRealDouble),PetscErrorCode,(Vecs,),arg1)
    return err
end

function VecsCreateSeq(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Vecs{Float64}},StridedArray{Vecs{Float64}},Ptr{Vecs{Float64}},Ref{Vecs{Float64}}})
    err = ccall((:VecsCreateSeq,petscRealDouble),PetscErrorCode,(comm_type,Int64,Int64,Ptr{Vecs}),arg1,arg2,arg3,arg4)
    return err
end

function VecsCreateSeqWithArray(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Vecs{Float64}},StridedArray{Vecs{Float64}},Ptr{Vecs{Float64}},Ref{Vecs{Float64}}})
    err = ccall((:VecsCreateSeqWithArray,petscRealDouble),PetscErrorCode,(comm_type,Int64,Int64,Ptr{Float64},Ptr{Vecs}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function VecsDuplicate(arg1::Vecs{Float64},arg2::Union{Ptr{Vecs{Float64}},StridedArray{Vecs{Float64}},Ptr{Vecs{Float64}},Ref{Vecs{Float64}}})
    err = ccall((:VecsDuplicate,petscRealDouble),PetscErrorCode,(Vecs,Ptr{Vecs}),arg1,arg2)
    return err
end

function VecNestGetSubVecs(arg1::Vec{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Vec{Float64}}},StridedArray{Ptr{Vec{Float64}}},Ptr{Ptr{Vec{Float64}}},Ref{Ptr{Vec{Float64}}}})
    err = ccall((:VecNestGetSubVecs,petscRealDouble),PetscErrorCode,(Vec{Float64},Ptr{Int64},Ptr{Ptr{Vec{Float64}}}),arg1,arg2,arg3)
    return err
end

function VecNestGetSubVec(arg1::Vec{Float64},arg2::Integer,arg3::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:VecNestGetSubVec,petscRealDouble),PetscErrorCode,(Vec{Float64},Int64,Ptr{Vec{Float64}}),arg1,arg2,arg3)
    return err
end

function VecNestSetSubVecs(arg1::Vec{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:VecNestSetSubVecs,petscRealDouble),PetscErrorCode,(Vec{Float64},Int64,Ptr{Int64},Ptr{Vec{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function VecNestSetSubVec(arg1::Vec{Float64},arg2::Integer,arg3::Vec{Float64})
    err = ccall((:VecNestSetSubVec,petscRealDouble),PetscErrorCode,(Vec{Float64},Int64,Vec{Float64}),arg1,arg2,arg3)
    return err
end

function VecCreateNest(arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}},arg4::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}},arg5::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:VecCreateNest,petscRealDouble),PetscErrorCode,(comm_type,Int64,Ptr{IS{Float64}},Ptr{Vec{Float64}},Ptr{Vec{Float64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function VecNestGetSize(arg1::Vec{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:VecNestGetSize,petscRealDouble),PetscErrorCode,(Vec{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscOptionsGetVec(arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Vec{Float64},arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetVec,petscRealDouble),PetscErrorCode,(Cstring,Cstring,Vec{Float64},Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function VecChop(arg1::Vec{Float64},arg2::Float64)
    err = ccall((:VecChop,petscRealDouble),PetscErrorCode,(Vec{Float64},Float64),arg1,arg2)
    return err
end

function VecGetLayout(arg1::Vec{Float64},arg2::Union{Ptr{PetscLayout{Float64}},StridedArray{PetscLayout{Float64}},Ptr{PetscLayout{Float64}},Ref{PetscLayout{Float64}}})
    err = ccall((:VecGetLayout,petscRealDouble),PetscErrorCode,(Vec{Float64},Ptr{PetscLayout{Float64}}),arg1,arg2)
    return err
end

function VecSetLayout(arg1::Vec{Float64},arg2::PetscLayout{Float64})
    err = ccall((:VecSetLayout,petscRealDouble),PetscErrorCode,(Vec{Float64},PetscLayout{Float64}),arg1,arg2)
    return err
end

function PetscSectionVecView(arg1::PetscSection{Float64},arg2::Vec{Float64},arg3::PetscViewer{Float64})
    err = ccall((:PetscSectionVecView,petscRealDouble),PetscErrorCode,(PetscSection{Float64},Vec{Float64},PetscViewer{Float64}),arg1,arg2,arg3)
    return err
end

function VecGetValuesSection(arg1::Vec{Float64},arg2::PetscSection{Float64},arg3::Integer,arg4::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:VecGetValuesSection,petscRealDouble),PetscErrorCode,(Vec{Float64},PetscSection{Float64},Int64,Ptr{Ptr{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function VecSetValuesSection(arg1::Vec{Float64},arg2::PetscSection{Float64},arg3::Integer,arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::InsertMode)
    err = ccall((:VecSetValuesSection,petscRealDouble),PetscErrorCode,(Vec{Float64},PetscSection{Float64},Int64,Ptr{Float64},InsertMode),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscSectionVecNorm(arg1::PetscSection{Float64},arg2::PetscSection{Float64},arg3::Vec{Float64},arg4::NormType,arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscSectionVecNorm,petscRealDouble),PetscErrorCode,(PetscSection{Float64},PetscSection{Float64},Vec{Float64},NormType,Ptr{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatGetFactor(arg1::Mat{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::MatFactorType,arg4::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatGetFactor,petscRealDouble),PetscErrorCode,(Mat{Float64},Cstring,MatFactorType,Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function MatGetFactorAvailable(arg1::Mat{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::MatFactorType,arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatGetFactorAvailable,petscRealDouble),PetscErrorCode,(Mat{Float64},Cstring,MatFactorType,Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function MatFactorGetSolverPackage(arg1::Mat{Float64},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:MatFactorGetSolverPackage,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function MatGetFactorType(arg1::Mat{Float64},arg2::Union{Ptr{MatFactorType},StridedArray{MatFactorType},Ptr{MatFactorType},Ref{MatFactorType}})
    err = ccall((:MatGetFactorType,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{MatFactorType}),arg1,arg2)
    return err
end

function MatSolverPackageRegister(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::MatType,arg3::MatFactorType,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatSolverPackageRegister,petscRealDouble),PetscErrorCode,(Cstring,MatType,MatFactorType,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function MatSolverPackageGet(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::MatType,arg3::MatFactorType,arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg6::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:MatSolverPackageGet,petscRealDouble),PetscErrorCode,(Cstring,MatType,MatFactorType,Ptr{PetscBool},Ptr{PetscBool},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatInitializePackage(arg0::Type{Float64})
    err = ccall((:MatInitializePackage,petscRealDouble),PetscErrorCode,())
    return err
end

function MatCreate(arg1::MPI_Comm,arg2::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatCreate,petscRealDouble),PetscErrorCode,(comm_type,Ptr{Mat{Float64}}),arg1,arg2)
    return err
end

function MatSetSizes(arg1::Mat{Float64},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer)
    err = ccall((:MatSetSizes,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64,Int64,Int64,Int64),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatSetType(arg1::Mat{Float64},arg2::MatType)
    err = ccall((:MatSetType,petscRealDouble),PetscErrorCode,(Mat{Float64},MatType),arg1,arg2)
    return err
end

function MatSetFromOptions(arg1::Mat{Float64})
    err = ccall((:MatSetFromOptions,petscRealDouble),PetscErrorCode,(Mat{Float64},),arg1)
    return err
end

function MatRegisterBaseName(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:MatRegisterBaseName,petscRealDouble),PetscErrorCode,(Cstring,Cstring,Cstring),arg1,arg2,arg3)
    return err
end

function MatSetOptionsPrefix(arg1::Mat{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:MatSetOptionsPrefix,petscRealDouble),PetscErrorCode,(Mat{Float64},Cstring),arg1,arg2)
    return err
end

function MatAppendOptionsPrefix(arg1::Mat{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:MatAppendOptionsPrefix,petscRealDouble),PetscErrorCode,(Mat{Float64},Cstring),arg1,arg2)
    return err
end

function MatGetOptionsPrefix(arg1::Mat{Float64},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:MatGetOptionsPrefix,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function MatSetErrorIfFPE(arg1::Mat{Float64},arg2::PetscBool)
    err = ccall((:MatSetErrorIfFPE,petscRealDouble),PetscErrorCode,(Mat{Float64},PetscBool),arg1,arg2)
    return err
end

function MatCreateSeqDense(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatCreateSeqDense,petscRealDouble),PetscErrorCode,(comm_type,Int64,Int64,Ptr{Float64},Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatCreateDense(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg7::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatCreateDense,petscRealDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Ptr{Float64},Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatCreateSeqAIJ(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatCreateSeqAIJ,petscRealDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Ptr{Int64},Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatCreateAIJ(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Integer,arg9::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg10::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatCreateAIJ,petscRealDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Int64,Ptr{Int64},Int64,Ptr{Int64},Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function MatCreateMPIAIJWithArrays(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg9::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatCreateMPIAIJWithArrays,petscRealDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Int64},Ptr{Float64},Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
    return err
end

function MatCreateMPIAIJWithSplitArrays(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg9::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg10::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg11::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg12::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatCreateMPIAIJWithSplitArrays,petscRealDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Int64},Ptr{Float64},Ptr{Int64},Ptr{Int64},Ptr{Float64},Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12)
    return err
end

function MatCreateSeqBAIJ(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatCreateSeqBAIJ,petscRealDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatCreateBAIJ(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg9::Integer,arg10::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg11::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatCreateBAIJ,petscRealDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Int64},Int64,Ptr{Int64},Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11)
    return err
end

function MatCreateMPIBAIJWithArrays(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg9::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg10::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatCreateMPIBAIJWithArrays,petscRealDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Int64},Ptr{Float64},Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function MatCreateMPIAdj(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatCreateMPIAdj,petscRealDouble),PetscErrorCode,(comm_type,Int64,Int64,Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatCreateSeqSBAIJ(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatCreateSeqSBAIJ,petscRealDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatCreateSBAIJ(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg9::Integer,arg10::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg11::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatCreateSBAIJ,petscRealDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Int64},Int64,Ptr{Int64},Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11)
    return err
end

function MatCreateMPISBAIJWithArrays(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg9::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg10::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatCreateMPISBAIJWithArrays,petscRealDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Int64},Ptr{Float64},Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function MatSeqSBAIJSetPreallocationCSR(arg1::Mat{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:MatSeqSBAIJSetPreallocationCSR,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64,Ptr{Int64},Ptr{Int64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatMPISBAIJSetPreallocationCSR(arg1::Mat{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:MatMPISBAIJSetPreallocationCSR,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64,Ptr{Int64},Ptr{Int64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatXAIJSetPreallocation(arg1::Mat{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatXAIJSetPreallocation,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64,Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatCreateShell(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg7::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatCreateShell,petscRealDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Ptr{Void},Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatCreateNormal(arg1::Mat{Float64},arg2::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatCreateNormal,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{Mat{Float64}}),arg1,arg2)
    return err
end

function MatCreateLRC(arg1::Mat{Float64},arg2::Mat{Float64},arg3::Mat{Float64},arg4::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatCreateLRC,petscRealDouble),PetscErrorCode,(Mat{Float64},Mat{Float64},Mat{Float64},Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function MatCreateIS(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::ISLocalToGlobalMapping{Float64},arg8::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatCreateIS,petscRealDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Int64,ISLocalToGlobalMapping{Float64},Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function MatCreateSeqAIJCRL(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatCreateSeqAIJCRL,petscRealDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Ptr{Int64},Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatCreateMPIAIJCRL(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Integer,arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatCreateMPIAIJCRL,petscRealDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Ptr{Int64},Int64,Ptr{Int64},Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function MatCreateSeqBSTRM(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatCreateSeqBSTRM,petscRealDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatCreateMPIBSTRM(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg9::Integer,arg10::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg11::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatCreateMPIBSTRM,petscRealDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Int64},Int64,Ptr{Int64},Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11)
    return err
end

function MatCreateSeqSBSTRM(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatCreateSeqSBSTRM,petscRealDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatCreateMPISBSTRM(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg9::Integer,arg10::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg11::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatCreateMPISBSTRM,petscRealDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Int64},Int64,Ptr{Int64},Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11)
    return err
end

function MatCreateScatter(arg1::MPI_Comm,arg2::VecScatter{Float64},arg3::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatCreateScatter,petscRealDouble),PetscErrorCode,(comm_type,VecScatter{Float64},Ptr{Mat{Float64}}),arg1,arg2,arg3)
    return err
end

function MatScatterSetVecScatter(arg1::Mat{Float64},arg2::VecScatter{Float64})
    err = ccall((:MatScatterSetVecScatter,petscRealDouble),PetscErrorCode,(Mat{Float64},VecScatter{Float64}),arg1,arg2)
    return err
end

function MatScatterGetVecScatter(arg1::Mat{Float64},arg2::Union{Ptr{VecScatter{Float64}},StridedArray{VecScatter{Float64}},Ptr{VecScatter{Float64}},Ref{VecScatter{Float64}}})
    err = ccall((:MatScatterGetVecScatter,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{VecScatter{Float64}}),arg1,arg2)
    return err
end

function MatCreateBlockMat(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatCreateBlockMat,petscRealDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatCompositeAddMat(arg1::Mat{Float64},arg2::Mat{Float64})
    err = ccall((:MatCompositeAddMat,petscRealDouble),PetscErrorCode,(Mat{Float64},Mat{Float64}),arg1,arg2)
    return err
end

function MatCompositeMerge(arg1::Mat{Float64})
    err = ccall((:MatCompositeMerge,petscRealDouble),PetscErrorCode,(Mat{Float64},),arg1)
    return err
end

function MatCreateComposite(arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}},arg4::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatCreateComposite,petscRealDouble),PetscErrorCode,(comm_type,Int64,Ptr{Mat{Float64}},Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function MatCompositeSetType(arg1::Mat{Float64},arg2::MatCompositeType)
    err = ccall((:MatCompositeSetType,petscRealDouble),PetscErrorCode,(Mat{Float64},MatCompositeType),arg1,arg2)
    return err
end

function MatCreateFFT(arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::MatType,arg5::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatCreateFFT,petscRealDouble),PetscErrorCode,(comm_type,Int64,Ptr{Int64},MatType,Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatCreateSeqCUFFT(arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatCreateSeqCUFFT,petscRealDouble),PetscErrorCode,(comm_type,Int64,Ptr{Int64},Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function MatCreateTranspose(arg1::Mat{Float64},arg2::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatCreateTranspose,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{Mat{Float64}}),arg1,arg2)
    return err
end

function MatCreateHermitianTranspose(arg1::Mat{Float64},arg2::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatCreateHermitianTranspose,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{Mat{Float64}}),arg1,arg2)
    return err
end

function MatCreateSubMatrix(arg1::Mat{Float64},arg2::IS{Float64},arg3::IS{Float64},arg4::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatCreateSubMatrix,petscRealDouble),PetscErrorCode,(Mat{Float64},IS{Float64},IS{Float64},Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function MatSubMatrixUpdate(arg1::Mat{Float64},arg2::Mat{Float64},arg3::IS{Float64},arg4::IS{Float64})
    err = ccall((:MatSubMatrixUpdate,petscRealDouble),PetscErrorCode,(Mat{Float64},Mat{Float64},IS{Float64},IS{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function MatCreateLocalRef(arg1::Mat{Float64},arg2::IS{Float64},arg3::IS{Float64},arg4::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatCreateLocalRef,petscRealDouble),PetscErrorCode,(Mat{Float64},IS{Float64},IS{Float64},Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function MatPythonSetType(arg1::Mat{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:MatPythonSetType,petscRealDouble),PetscErrorCode,(Mat{Float64},Cstring),arg1,arg2)
    return err
end

function MatSetUp(arg1::Mat{Float64})
    err = ccall((:MatSetUp,petscRealDouble),PetscErrorCode,(Mat{Float64},),arg1)
    return err
end

function MatDestroy(arg1::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatDestroy,petscRealDouble),PetscErrorCode,(Ptr{Mat{Float64}},),arg1)
    return err
end

function MatGetNonzeroState(arg1::Mat{Float64},arg2::Union{Ptr{PetscObjectState},StridedArray{PetscObjectState},Ptr{PetscObjectState},Ref{PetscObjectState}})
    err = ccall((:MatGetNonzeroState,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{PetscObjectState}),arg1,arg2)
    return err
end

function MatConjugate(arg1::Mat{Float64})
    err = ccall((:MatConjugate,petscRealDouble),PetscErrorCode,(Mat{Float64},),arg1)
    return err
end

function MatRealPart(arg1::Mat{Float64})
    err = ccall((:MatRealPart,petscRealDouble),PetscErrorCode,(Mat{Float64},),arg1)
    return err
end

function MatImaginaryPart(arg1::Mat{Float64})
    err = ccall((:MatImaginaryPart,petscRealDouble),PetscErrorCode,(Mat{Float64},),arg1)
    return err
end

function MatGetDiagonalBlock(arg1::Mat{Float64},arg2::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatGetDiagonalBlock,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{Mat{Float64}}),arg1,arg2)
    return err
end

function MatGetTrace(arg1::Mat{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:MatGetTrace,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{Float64}),arg1,arg2)
    return err
end

function MatInvertBlockDiagonal(arg1::Mat{Float64},arg2::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:MatInvertBlockDiagonal,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{Ptr{Float64}}),arg1,arg2)
    return err
end

function MatSetValues(arg1::Mat{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg7::InsertMode)
    err = ccall((:MatSetValues,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64,Ptr{Int64},Int64,Ptr{Int64},Ptr{Float64},InsertMode),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatSetValuesBlocked(arg1::Mat{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg7::InsertMode)
    err = ccall((:MatSetValuesBlocked,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64,Ptr{Int64},Int64,Ptr{Int64},Ptr{Float64},InsertMode),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatSetValuesRow(arg1::Mat{Float64},arg2::Integer,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:MatSetValuesRow,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64,Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function MatSetValuesRowLocal(arg1::Mat{Float64},arg2::Integer,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:MatSetValuesRowLocal,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64,Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function MatSetValuesBatch(arg1::Mat{Float64},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:MatSetValuesBatch,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64,Int64,Ptr{Int64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatSetRandom(arg1::Mat{Float64},arg2::PetscRandom{Float64})
    err = ccall((:MatSetRandom,petscRealDouble),PetscErrorCode,(Mat{Float64},PetscRandom{Float64}),arg1,arg2)
    return err
end

function MatSetValuesStencil(arg1::Mat{Float64},arg2::Integer,arg3::Union{Ptr{MatStencil},StridedArray{MatStencil},Ptr{MatStencil},Ref{MatStencil}},arg4::Integer,arg5::Union{Ptr{MatStencil},StridedArray{MatStencil},Ptr{MatStencil},Ref{MatStencil}},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg7::InsertMode)
    err = ccall((:MatSetValuesStencil,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64,Ptr{MatStencil},Int64,Ptr{MatStencil},Ptr{Float64},InsertMode),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatSetValuesBlockedStencil(arg1::Mat{Float64},arg2::Integer,arg3::Union{Ptr{MatStencil},StridedArray{MatStencil},Ptr{MatStencil},Ref{MatStencil}},arg4::Integer,arg5::Union{Ptr{MatStencil},StridedArray{MatStencil},Ptr{MatStencil},Ref{MatStencil}},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg7::InsertMode)
    err = ccall((:MatSetValuesBlockedStencil,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64,Ptr{MatStencil},Int64,Ptr{MatStencil},Ptr{Float64},InsertMode),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatSetStencil(arg1::Mat{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Integer)
    err = ccall((:MatSetStencil,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64,Ptr{Int64},Ptr{Int64},Int64),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatSetColoring(arg1::Mat{Float64},arg2::ISColoring{Float64})
    err = ccall((:MatSetColoring,petscRealDouble),PetscErrorCode,(Mat{Float64},ISColoring{Float64}),arg1,arg2)
    return err
end

function MatSetValuesAdifor(arg1::Mat{Float64},arg2::Integer,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatSetValuesAdifor,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function MatAssemblyBegin(arg1::Mat{Float64},arg2::MatAssemblyType)
    err = ccall((:MatAssemblyBegin,petscRealDouble),PetscErrorCode,(Mat{Float64},MatAssemblyType),arg1,arg2)
    return err
end

function MatAssemblyEnd(arg1::Mat{Float64},arg2::MatAssemblyType)
    err = ccall((:MatAssemblyEnd,petscRealDouble),PetscErrorCode,(Mat{Float64},MatAssemblyType),arg1,arg2)
    return err
end

function MatAssembled(arg1::Mat{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatAssembled,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function MatSetOption(arg1::Mat{Float64},arg2::MatOption,arg3::PetscBool)
    err = ccall((:MatSetOption,petscRealDouble),PetscErrorCode,(Mat{Float64},MatOption,PetscBool),arg1,arg2,arg3)
    return err
end

function MatGetOption(arg1::Mat{Float64},arg2::MatOption,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatGetOption,petscRealDouble),PetscErrorCode,(Mat{Float64},MatOption,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function MatGetType(arg1::Mat{Float64},arg2::Union{Ptr{MatType},StridedArray{MatType},Ptr{MatType},Ref{MatType}})
    err = ccall((:MatGetType,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{MatType}),arg1,arg2)
    return err
end

function MatGetValues(arg1::Mat{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:MatGetValues,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64,Ptr{Int64},Int64,Ptr{Int64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatGetRow(arg1::Mat{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg5::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:MatGetRow,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64,Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Float64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatRestoreRow(arg1::Mat{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg5::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:MatRestoreRow,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64,Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Float64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatGetRowUpperTriangular(arg1::Mat{Float64})
    err = ccall((:MatGetRowUpperTriangular,petscRealDouble),PetscErrorCode,(Mat{Float64},),arg1)
    return err
end

function MatRestoreRowUpperTriangular(arg1::Mat{Float64})
    err = ccall((:MatRestoreRowUpperTriangular,petscRealDouble),PetscErrorCode,(Mat{Float64},),arg1)
    return err
end

function MatGetColumn(arg1::Mat{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg5::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:MatGetColumn,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64,Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Float64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatRestoreColumn(arg1::Mat{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg5::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:MatRestoreColumn,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64,Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Float64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatGetColumnVector(arg1::Mat{Float64},arg2::Vec{Float64},arg3::Integer)
    err = ccall((:MatGetColumnVector,petscRealDouble),PetscErrorCode,(Mat{Float64},Vec{Float64},Int64),arg1,arg2,arg3)
    return err
end

function MatSeqAIJGetArray(arg1::Mat{Float64},arg2::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:MatSeqAIJGetArray,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{Ptr{Float64}}),arg1,arg2)
    return err
end

function MatSeqAIJRestoreArray(arg1::Mat{Float64},arg2::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:MatSeqAIJRestoreArray,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{Ptr{Float64}}),arg1,arg2)
    return err
end

function MatSeqAIJGetMaxRowNonzeros(arg1::Mat{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatSeqAIJGetMaxRowNonzeros,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function MatSeqAIJSetValuesLocalFast(arg1::Mat{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg7::InsertMode)
    err = ccall((:MatSeqAIJSetValuesLocalFast,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64,Ptr{Int64},Int64,Ptr{Int64},Ptr{Float64},InsertMode),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatDenseGetArray(arg1::Mat{Float64},arg2::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:MatDenseGetArray,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{Ptr{Float64}}),arg1,arg2)
    return err
end

function MatDenseRestoreArray(arg1::Mat{Float64},arg2::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:MatDenseRestoreArray,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{Ptr{Float64}}),arg1,arg2)
    return err
end

function MatGetBlockSize(arg1::Mat{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatGetBlockSize,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function MatSetBlockSize(arg1::Mat{Float64},arg2::Integer)
    err = ccall((:MatSetBlockSize,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64),arg1,arg2)
    return err
end

function MatGetBlockSizes(arg1::Mat{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatGetBlockSizes,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function MatSetBlockSizes(arg1::Mat{Float64},arg2::Integer,arg3::Integer)
    err = ccall((:MatSetBlockSizes,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64,Int64),arg1,arg2,arg3)
    return err
end

function MatSetBlockSizesFromMats(arg1::Mat{Float64},arg2::Mat{Float64},arg3::Mat{Float64})
    err = ccall((:MatSetBlockSizesFromMats,petscRealDouble),PetscErrorCode,(Mat{Float64},Mat{Float64},Mat{Float64}),arg1,arg2,arg3)
    return err
end

function MatSetNThreads(arg1::Mat{Float64},arg2::Integer)
    err = ccall((:MatSetNThreads,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64),arg1,arg2)
    return err
end

function MatGetNThreads(arg1::Mat{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatGetNThreads,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function MatMult(arg1::Mat{Float64},arg2::Vec{Float64},arg3::Vec{Float64})
    err = ccall((:MatMult,petscRealDouble),PetscErrorCode,(Mat{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3)
    return err
end

function MatMultDiagonalBlock(arg1::Mat{Float64},arg2::Vec{Float64},arg3::Vec{Float64})
    err = ccall((:MatMultDiagonalBlock,petscRealDouble),PetscErrorCode,(Mat{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3)
    return err
end

function MatMultAdd(arg1::Mat{Float64},arg2::Vec{Float64},arg3::Vec{Float64},arg4::Vec{Float64})
    err = ccall((:MatMultAdd,petscRealDouble),PetscErrorCode,(Mat{Float64},Vec{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function MatMultTranspose(arg1::Mat{Float64},arg2::Vec{Float64},arg3::Vec{Float64})
    err = ccall((:MatMultTranspose,petscRealDouble),PetscErrorCode,(Mat{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3)
    return err
end

function MatMultHermitianTranspose(arg1::Mat{Float64},arg2::Vec{Float64},arg3::Vec{Float64})
    err = ccall((:MatMultHermitianTranspose,petscRealDouble),PetscErrorCode,(Mat{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3)
    return err
end

function MatIsTranspose(arg1::Mat{Float64},arg2::Mat{Float64},arg3::Float64,arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatIsTranspose,petscRealDouble),PetscErrorCode,(Mat{Float64},Mat{Float64},Float64,Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function MatIsHermitianTranspose(arg1::Mat{Float64},arg2::Mat{Float64},arg3::Float64,arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatIsHermitianTranspose,petscRealDouble),PetscErrorCode,(Mat{Float64},Mat{Float64},Float64,Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function MatMultTransposeAdd(arg1::Mat{Float64},arg2::Vec{Float64},arg3::Vec{Float64},arg4::Vec{Float64})
    err = ccall((:MatMultTransposeAdd,petscRealDouble),PetscErrorCode,(Mat{Float64},Vec{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function MatMultHermitianTransposeAdd(arg1::Mat{Float64},arg2::Vec{Float64},arg3::Vec{Float64},arg4::Vec{Float64})
    err = ccall((:MatMultHermitianTransposeAdd,petscRealDouble),PetscErrorCode,(Mat{Float64},Vec{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function MatMultConstrained(arg1::Mat{Float64},arg2::Vec{Float64},arg3::Vec{Float64})
    err = ccall((:MatMultConstrained,petscRealDouble),PetscErrorCode,(Mat{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3)
    return err
end

function MatMultTransposeConstrained(arg1::Mat{Float64},arg2::Vec{Float64},arg3::Vec{Float64})
    err = ccall((:MatMultTransposeConstrained,petscRealDouble),PetscErrorCode,(Mat{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3)
    return err
end

function MatMatSolve(arg1::Mat{Float64},arg2::Mat{Float64},arg3::Mat{Float64})
    err = ccall((:MatMatSolve,petscRealDouble),PetscErrorCode,(Mat{Float64},Mat{Float64},Mat{Float64}),arg1,arg2,arg3)
    return err
end

function MatResidual(arg1::Mat{Float64},arg2::Vec{Float64},arg3::Vec{Float64},arg4::Vec{Float64})
    err = ccall((:MatResidual,petscRealDouble),PetscErrorCode,(Mat{Float64},Vec{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function MatConvert(arg1::Mat{Float64},arg2::MatType,arg3::MatReuse,arg4::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatConvert,petscRealDouble),PetscErrorCode,(Mat{Float64},MatType,MatReuse,Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function MatDuplicate(arg1::Mat{Float64},arg2::MatDuplicateOption,arg3::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatDuplicate,petscRealDouble),PetscErrorCode,(Mat{Float64},MatDuplicateOption,Ptr{Mat{Float64}}),arg1,arg2,arg3)
    return err
end

function MatCopy(arg1::Mat{Float64},arg2::Mat{Float64},arg3::MatStructure)
    err = ccall((:MatCopy,petscRealDouble),PetscErrorCode,(Mat{Float64},Mat{Float64},MatStructure),arg1,arg2,arg3)
    return err
end

function MatView(arg1::Mat{Float64},arg2::PetscViewer{Float64})
    err = ccall((:MatView,petscRealDouble),PetscErrorCode,(Mat{Float64},PetscViewer{Float64}),arg1,arg2)
    return err
end

function MatIsSymmetric(arg1::Mat{Float64},arg2::Float64,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatIsSymmetric,petscRealDouble),PetscErrorCode,(Mat{Float64},Float64,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function MatIsStructurallySymmetric(arg1::Mat{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatIsStructurallySymmetric,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function MatIsHermitian(arg1::Mat{Float64},arg2::Float64,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatIsHermitian,petscRealDouble),PetscErrorCode,(Mat{Float64},Float64,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function MatIsSymmetricKnown(arg1::Mat{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatIsSymmetricKnown,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{PetscBool},Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function MatIsHermitianKnown(arg1::Mat{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatIsHermitianKnown,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{PetscBool},Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function MatMissingDiagonal(arg1::Mat{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatMissingDiagonal,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{PetscBool},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function MatLoad(arg1::Mat{Float64},arg2::PetscViewer{Float64})
    err = ccall((:MatLoad,petscRealDouble),PetscErrorCode,(Mat{Float64},PetscViewer{Float64}),arg1,arg2)
    return err
end

function MatGetRowIJ(arg1::Mat{Float64},arg2::Integer,arg3::PetscBool,arg4::PetscBool,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg7::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg8::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatGetRowIJ,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64,PetscBool,PetscBool,Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function MatRestoreRowIJ(arg1::Mat{Float64},arg2::Integer,arg3::PetscBool,arg4::PetscBool,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg7::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg8::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatRestoreRowIJ,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64,PetscBool,PetscBool,Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function MatGetColumnIJ(arg1::Mat{Float64},arg2::Integer,arg3::PetscBool,arg4::PetscBool,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg7::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg8::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatGetColumnIJ,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64,PetscBool,PetscBool,Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function MatRestoreColumnIJ(arg1::Mat{Float64},arg2::Integer,arg3::PetscBool,arg4::PetscBool,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg7::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg8::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatRestoreColumnIJ,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64,PetscBool,PetscBool,Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function MatGetInfo(arg1::Mat{Float64},arg2::MatInfoType,arg3::Union{Ptr{MatInfo{Float64}},StridedArray{MatInfo{Float64}},Ptr{MatInfo{Float64}},Ref{MatInfo{Float64}}})
    err = ccall((:MatGetInfo,petscRealDouble),PetscErrorCode,(Mat{Float64},MatInfoType,Ptr{MatInfo{Float64}}),arg1,arg2,arg3)
    return err
end

function MatGetDiagonal(arg1::Mat{Float64},arg2::Vec{Float64})
    err = ccall((:MatGetDiagonal,petscRealDouble),PetscErrorCode,(Mat{Float64},Vec{Float64}),arg1,arg2)
    return err
end

function MatGetRowMax(arg1::Mat{Float64},arg2::Vec{Float64},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatGetRowMax,petscRealDouble),PetscErrorCode,(Mat{Float64},Vec{Float64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function MatGetRowMin(arg1::Mat{Float64},arg2::Vec{Float64},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatGetRowMin,petscRealDouble),PetscErrorCode,(Mat{Float64},Vec{Float64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function MatGetRowMaxAbs(arg1::Mat{Float64},arg2::Vec{Float64},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatGetRowMaxAbs,petscRealDouble),PetscErrorCode,(Mat{Float64},Vec{Float64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function MatGetRowMinAbs(arg1::Mat{Float64},arg2::Vec{Float64},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatGetRowMinAbs,petscRealDouble),PetscErrorCode,(Mat{Float64},Vec{Float64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function MatGetRowSum(arg1::Mat{Float64},arg2::Vec{Float64})
    err = ccall((:MatGetRowSum,petscRealDouble),PetscErrorCode,(Mat{Float64},Vec{Float64}),arg1,arg2)
    return err
end

function MatTranspose(arg1::Mat{Float64},arg2::MatReuse,arg3::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatTranspose,petscRealDouble),PetscErrorCode,(Mat{Float64},MatReuse,Ptr{Mat{Float64}}),arg1,arg2,arg3)
    return err
end

function MatHermitianTranspose(arg1::Mat{Float64},arg2::MatReuse,arg3::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatHermitianTranspose,petscRealDouble),PetscErrorCode,(Mat{Float64},MatReuse,Ptr{Mat{Float64}}),arg1,arg2,arg3)
    return err
end

function MatPermute(arg1::Mat{Float64},arg2::IS{Float64},arg3::IS{Float64},arg4::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatPermute,petscRealDouble),PetscErrorCode,(Mat{Float64},IS{Float64},IS{Float64},Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function MatDiagonalScale(arg1::Mat{Float64},arg2::Vec{Float64},arg3::Vec{Float64})
    err = ccall((:MatDiagonalScale,petscRealDouble),PetscErrorCode,(Mat{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3)
    return err
end

function MatDiagonalSet(arg1::Mat{Float64},arg2::Vec{Float64},arg3::InsertMode)
    err = ccall((:MatDiagonalSet,petscRealDouble),PetscErrorCode,(Mat{Float64},Vec{Float64},InsertMode),arg1,arg2,arg3)
    return err
end

function MatEqual(arg1::Mat{Float64},arg2::Mat{Float64},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatEqual,petscRealDouble),PetscErrorCode,(Mat{Float64},Mat{Float64},Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function MatMultEqual(arg1::Mat{Float64},arg2::Mat{Float64},arg3::Integer,arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatMultEqual,petscRealDouble),PetscErrorCode,(Mat{Float64},Mat{Float64},Int64,Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function MatMultAddEqual(arg1::Mat{Float64},arg2::Mat{Float64},arg3::Integer,arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatMultAddEqual,petscRealDouble),PetscErrorCode,(Mat{Float64},Mat{Float64},Int64,Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function MatMultTransposeEqual(arg1::Mat{Float64},arg2::Mat{Float64},arg3::Integer,arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatMultTransposeEqual,petscRealDouble),PetscErrorCode,(Mat{Float64},Mat{Float64},Int64,Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function MatMultTransposeAddEqual(arg1::Mat{Float64},arg2::Mat{Float64},arg3::Integer,arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatMultTransposeAddEqual,petscRealDouble),PetscErrorCode,(Mat{Float64},Mat{Float64},Int64,Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function MatNorm(arg1::Mat{Float64},arg2::NormType,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:MatNorm,petscRealDouble),PetscErrorCode,(Mat{Float64},NormType,Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function MatGetColumnNorms(arg1::Mat{Float64},arg2::NormType,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:MatGetColumnNorms,petscRealDouble),PetscErrorCode,(Mat{Float64},NormType,Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function MatZeroEntries(arg1::Mat{Float64})
    err = ccall((:MatZeroEntries,petscRealDouble),PetscErrorCode,(Mat{Float64},),arg1)
    return err
end

function MatZeroRows(arg1::Mat{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Float64,arg5::Vec{Float64},arg6::Vec{Float64})
    err = ccall((:MatZeroRows,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64,Ptr{Int64},Float64,Vec{Float64},Vec{Float64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatZeroRowsIS(arg1::Mat{Float64},arg2::IS{Float64},arg3::Float64,arg4::Vec{Float64},arg5::Vec{Float64})
    err = ccall((:MatZeroRowsIS,petscRealDouble),PetscErrorCode,(Mat{Float64},IS{Float64},Float64,Vec{Float64},Vec{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatZeroRowsStencil(arg1::Mat{Float64},arg2::Integer,arg3::Union{Ptr{MatStencil},StridedArray{MatStencil},Ptr{MatStencil},Ref{MatStencil}},arg4::Float64,arg5::Vec{Float64},arg6::Vec{Float64})
    err = ccall((:MatZeroRowsStencil,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64,Ptr{MatStencil},Float64,Vec{Float64},Vec{Float64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatZeroRowsColumnsStencil(arg1::Mat{Float64},arg2::Integer,arg3::Union{Ptr{MatStencil},StridedArray{MatStencil},Ptr{MatStencil},Ref{MatStencil}},arg4::Float64,arg5::Vec{Float64},arg6::Vec{Float64})
    err = ccall((:MatZeroRowsColumnsStencil,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64,Ptr{MatStencil},Float64,Vec{Float64},Vec{Float64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatZeroRowsColumns(arg1::Mat{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Float64,arg5::Vec{Float64},arg6::Vec{Float64})
    err = ccall((:MatZeroRowsColumns,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64,Ptr{Int64},Float64,Vec{Float64},Vec{Float64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatZeroRowsColumnsIS(arg1::Mat{Float64},arg2::IS{Float64},arg3::Float64,arg4::Vec{Float64},arg5::Vec{Float64})
    err = ccall((:MatZeroRowsColumnsIS,petscRealDouble),PetscErrorCode,(Mat{Float64},IS{Float64},Float64,Vec{Float64},Vec{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatGetSize(arg1::Mat{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatGetSize,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function MatGetLocalSize(arg1::Mat{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatGetLocalSize,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function MatGetOwnershipRange(arg1::Mat{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatGetOwnershipRange,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function MatGetOwnershipRanges(arg1::Mat{Float64},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:MatGetOwnershipRanges,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function MatGetOwnershipRangeColumn(arg1::Mat{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatGetOwnershipRangeColumn,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function MatGetOwnershipRangesColumn(arg1::Mat{Float64},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:MatGetOwnershipRangesColumn,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function MatGetOwnershipIS(arg1::Mat{Float64},arg2::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}},arg3::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:MatGetOwnershipIS,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{IS{Float64}},Ptr{IS{Float64}}),arg1,arg2,arg3)
    return err
end

function MatGetSubMatrices(arg1::Mat{Float64},arg2::Integer,arg3::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}},arg4::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}},arg5::MatReuse,arg6::Union{Ptr{Ptr{Mat{Float64}}},StridedArray{Ptr{Mat{Float64}}},Ptr{Ptr{Mat{Float64}}},Ref{Ptr{Mat{Float64}}}})
    err = ccall((:MatGetSubMatrices,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64,Ptr{IS{Float64}},Ptr{IS{Float64}},MatReuse,Ptr{Ptr{Mat{Float64}}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatGetSubMatricesMPI(arg1::Mat{Float64},arg2::Integer,arg3::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}},arg4::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}},arg5::MatReuse,arg6::Union{Ptr{Ptr{Mat{Float64}}},StridedArray{Ptr{Mat{Float64}}},Ptr{Ptr{Mat{Float64}}},Ref{Ptr{Mat{Float64}}}})
    err = ccall((:MatGetSubMatricesMPI,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64,Ptr{IS{Float64}},Ptr{IS{Float64}},MatReuse,Ptr{Ptr{Mat{Float64}}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatDestroyMatrices(arg1::Integer,arg2::Union{Ptr{Ptr{Mat{Float64}}},StridedArray{Ptr{Mat{Float64}}},Ptr{Ptr{Mat{Float64}}},Ref{Ptr{Mat{Float64}}}})
    err = ccall((:MatDestroyMatrices,petscRealDouble),PetscErrorCode,(Int64,Ptr{Ptr{Mat{Float64}}}),arg1,arg2)
    return err
end

function MatGetSubMatrix(arg1::Mat{Float64},arg2::IS{Float64},arg3::IS{Float64},arg4::MatReuse,arg5::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatGetSubMatrix,petscRealDouble),PetscErrorCode,(Mat{Float64},IS{Float64},IS{Float64},MatReuse,Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatGetLocalSubMatrix(arg1::Mat{Float64},arg2::IS{Float64},arg3::IS{Float64},arg4::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatGetLocalSubMatrix,petscRealDouble),PetscErrorCode,(Mat{Float64},IS{Float64},IS{Float64},Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function MatRestoreLocalSubMatrix(arg1::Mat{Float64},arg2::IS{Float64},arg3::IS{Float64},arg4::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatRestoreLocalSubMatrix,petscRealDouble),PetscErrorCode,(Mat{Float64},IS{Float64},IS{Float64},Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function MatGetSeqNonzeroStructure(arg1::Mat{Float64},arg2::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatGetSeqNonzeroStructure,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{Mat{Float64}}),arg1,arg2)
    return err
end

function MatDestroySeqNonzeroStructure(arg1::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatDestroySeqNonzeroStructure,petscRealDouble),PetscErrorCode,(Ptr{Mat{Float64}},),arg1)
    return err
end

function MatCreateMPIAIJSumSeqAIJ(arg1::MPI_Comm,arg2::Mat{Float64},arg3::Integer,arg4::Integer,arg5::MatReuse,arg6::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatCreateMPIAIJSumSeqAIJ,petscRealDouble),PetscErrorCode,(comm_type,Mat{Float64},Int64,Int64,MatReuse,Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatCreateMPIAIJSumSeqAIJSymbolic(arg1::MPI_Comm,arg2::Mat{Float64},arg3::Integer,arg4::Integer,arg5::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatCreateMPIAIJSumSeqAIJSymbolic,petscRealDouble),PetscErrorCode,(comm_type,Mat{Float64},Int64,Int64,Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatCreateMPIAIJSumSeqAIJNumeric(arg1::Mat{Float64},arg2::Mat{Float64})
    err = ccall((:MatCreateMPIAIJSumSeqAIJNumeric,petscRealDouble),PetscErrorCode,(Mat{Float64},Mat{Float64}),arg1,arg2)
    return err
end

function MatMPIAIJGetLocalMat(arg1::Mat{Float64},arg2::MatReuse,arg3::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatMPIAIJGetLocalMat,petscRealDouble),PetscErrorCode,(Mat{Float64},MatReuse,Ptr{Mat{Float64}}),arg1,arg2,arg3)
    return err
end

function MatMPIAIJGetLocalMatCondensed(arg1::Mat{Float64},arg2::MatReuse,arg3::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}},arg4::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}},arg5::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatMPIAIJGetLocalMatCondensed,petscRealDouble),PetscErrorCode,(Mat{Float64},MatReuse,Ptr{IS{Float64}},Ptr{IS{Float64}},Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatGetBrowsOfAcols(arg1::Mat{Float64},arg2::Mat{Float64},arg3::MatReuse,arg4::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}},arg5::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}},arg6::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatGetBrowsOfAcols,petscRealDouble),PetscErrorCode,(Mat{Float64},Mat{Float64},MatReuse,Ptr{IS{Float64}},Ptr{IS{Float64}},Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatGetGhosts(arg1::Mat{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:MatGetGhosts,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3)
    return err
end

function MatIncreaseOverlap(arg1::Mat{Float64},arg2::Integer,arg3::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}},arg4::Integer)
    err = ccall((:MatIncreaseOverlap,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64,Ptr{IS{Float64}},Int64),arg1,arg2,arg3,arg4)
    return err
end

function MatMatMult(arg1::Mat{Float64},arg2::Mat{Float64},arg3::MatReuse,arg4::Float64,arg5::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatMatMult,petscRealDouble),PetscErrorCode,(Mat{Float64},Mat{Float64},MatReuse,Float64,Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatMatMultSymbolic(arg1::Mat{Float64},arg2::Mat{Float64},arg3::Float64,arg4::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatMatMultSymbolic,petscRealDouble),PetscErrorCode,(Mat{Float64},Mat{Float64},Float64,Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function MatMatMultNumeric(arg1::Mat{Float64},arg2::Mat{Float64},arg3::Mat{Float64})
    err = ccall((:MatMatMultNumeric,petscRealDouble),PetscErrorCode,(Mat{Float64},Mat{Float64},Mat{Float64}),arg1,arg2,arg3)
    return err
end

function MatMatMatMult(arg1::Mat{Float64},arg2::Mat{Float64},arg3::Mat{Float64},arg4::MatReuse,arg5::Float64,arg6::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatMatMatMult,petscRealDouble),PetscErrorCode,(Mat{Float64},Mat{Float64},Mat{Float64},MatReuse,Float64,Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatMatMatMultSymbolic(arg1::Mat{Float64},arg2::Mat{Float64},arg3::Mat{Float64},arg4::Float64,arg5::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatMatMatMultSymbolic,petscRealDouble),PetscErrorCode,(Mat{Float64},Mat{Float64},Mat{Float64},Float64,Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatMatMatMultNumeric(arg1::Mat{Float64},arg2::Mat{Float64},arg3::Mat{Float64},arg4::Mat{Float64})
    err = ccall((:MatMatMatMultNumeric,petscRealDouble),PetscErrorCode,(Mat{Float64},Mat{Float64},Mat{Float64},Mat{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function MatPtAP(arg1::Mat{Float64},arg2::Mat{Float64},arg3::MatReuse,arg4::Float64,arg5::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatPtAP,petscRealDouble),PetscErrorCode,(Mat{Float64},Mat{Float64},MatReuse,Float64,Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatPtAPSymbolic(arg1::Mat{Float64},arg2::Mat{Float64},arg3::Float64,arg4::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatPtAPSymbolic,petscRealDouble),PetscErrorCode,(Mat{Float64},Mat{Float64},Float64,Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function MatPtAPNumeric(arg1::Mat{Float64},arg2::Mat{Float64},arg3::Mat{Float64})
    err = ccall((:MatPtAPNumeric,petscRealDouble),PetscErrorCode,(Mat{Float64},Mat{Float64},Mat{Float64}),arg1,arg2,arg3)
    return err
end

function MatRARt(arg1::Mat{Float64},arg2::Mat{Float64},arg3::MatReuse,arg4::Float64,arg5::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatRARt,petscRealDouble),PetscErrorCode,(Mat{Float64},Mat{Float64},MatReuse,Float64,Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatRARtSymbolic(arg1::Mat{Float64},arg2::Mat{Float64},arg3::Float64,arg4::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatRARtSymbolic,petscRealDouble),PetscErrorCode,(Mat{Float64},Mat{Float64},Float64,Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function MatRARtNumeric(arg1::Mat{Float64},arg2::Mat{Float64},arg3::Mat{Float64})
    err = ccall((:MatRARtNumeric,petscRealDouble),PetscErrorCode,(Mat{Float64},Mat{Float64},Mat{Float64}),arg1,arg2,arg3)
    return err
end

function MatTransposeMatMult(arg1::Mat{Float64},arg2::Mat{Float64},arg3::MatReuse,arg4::Float64,arg5::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatTransposeMatMult,petscRealDouble),PetscErrorCode,(Mat{Float64},Mat{Float64},MatReuse,Float64,Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatTransposetMatMultSymbolic(arg1::Mat{Float64},arg2::Mat{Float64},arg3::Float64,arg4::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatTransposetMatMultSymbolic,petscRealDouble),PetscErrorCode,(Mat{Float64},Mat{Float64},Float64,Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function MatTransposetMatMultNumeric(arg1::Mat{Float64},arg2::Mat{Float64},arg3::Mat{Float64})
    err = ccall((:MatTransposetMatMultNumeric,petscRealDouble),PetscErrorCode,(Mat{Float64},Mat{Float64},Mat{Float64}),arg1,arg2,arg3)
    return err
end

function MatMatTransposeMult(arg1::Mat{Float64},arg2::Mat{Float64},arg3::MatReuse,arg4::Float64,arg5::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatMatTransposeMult,petscRealDouble),PetscErrorCode,(Mat{Float64},Mat{Float64},MatReuse,Float64,Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatMatTransposeMultSymbolic(arg1::Mat{Float64},arg2::Mat{Float64},arg3::Float64,arg4::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatMatTransposeMultSymbolic,petscRealDouble),PetscErrorCode,(Mat{Float64},Mat{Float64},Float64,Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function MatMatTransposeMultNumeric(arg1::Mat{Float64},arg2::Mat{Float64},arg3::Mat{Float64})
    err = ccall((:MatMatTransposeMultNumeric,petscRealDouble),PetscErrorCode,(Mat{Float64},Mat{Float64},Mat{Float64}),arg1,arg2,arg3)
    return err
end

function MatAXPY(arg1::Mat{Float64},arg2::Float64,arg3::Mat{Float64},arg4::MatStructure)
    err = ccall((:MatAXPY,petscRealDouble),PetscErrorCode,(Mat{Float64},Float64,Mat{Float64},MatStructure),arg1,arg2,arg3,arg4)
    return err
end

function MatAYPX(arg1::Mat{Float64},arg2::Float64,arg3::Mat{Float64},arg4::MatStructure)
    err = ccall((:MatAYPX,petscRealDouble),PetscErrorCode,(Mat{Float64},Float64,Mat{Float64},MatStructure),arg1,arg2,arg3,arg4)
    return err
end

function MatScale(arg1::Mat{Float64},arg2::Float64)
    err = ccall((:MatScale,petscRealDouble),PetscErrorCode,(Mat{Float64},Float64),arg1,arg2)
    return err
end

function MatShift(arg1::Mat{Float64},arg2::Float64)
    err = ccall((:MatShift,petscRealDouble),PetscErrorCode,(Mat{Float64},Float64),arg1,arg2)
    return err
end

function MatSetLocalToGlobalMapping(arg1::Mat{Float64},arg2::ISLocalToGlobalMapping{Float64},arg3::ISLocalToGlobalMapping{Float64})
    err = ccall((:MatSetLocalToGlobalMapping,petscRealDouble),PetscErrorCode,(Mat{Float64},ISLocalToGlobalMapping{Float64},ISLocalToGlobalMapping{Float64}),arg1,arg2,arg3)
    return err
end

function MatGetLocalToGlobalMapping(arg1::Mat{Float64},arg2::Union{Ptr{ISLocalToGlobalMapping{Float64}},StridedArray{ISLocalToGlobalMapping{Float64}},Ptr{ISLocalToGlobalMapping{Float64}},Ref{ISLocalToGlobalMapping{Float64}}},arg3::Union{Ptr{ISLocalToGlobalMapping{Float64}},StridedArray{ISLocalToGlobalMapping{Float64}},Ptr{ISLocalToGlobalMapping{Float64}},Ref{ISLocalToGlobalMapping{Float64}}})
    err = ccall((:MatGetLocalToGlobalMapping,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{ISLocalToGlobalMapping{Float64}},Ptr{ISLocalToGlobalMapping{Float64}}),arg1,arg2,arg3)
    return err
end

function MatGetLayouts(arg1::Mat{Float64},arg2::Union{Ptr{PetscLayout{Float64}},StridedArray{PetscLayout{Float64}},Ptr{PetscLayout{Float64}},Ref{PetscLayout{Float64}}},arg3::Union{Ptr{PetscLayout{Float64}},StridedArray{PetscLayout{Float64}},Ptr{PetscLayout{Float64}},Ref{PetscLayout{Float64}}})
    err = ccall((:MatGetLayouts,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{PetscLayout{Float64}},Ptr{PetscLayout{Float64}}),arg1,arg2,arg3)
    return err
end

function MatZeroRowsLocal(arg1::Mat{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Float64,arg5::Vec{Float64},arg6::Vec{Float64})
    err = ccall((:MatZeroRowsLocal,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64,Ptr{Int64},Float64,Vec{Float64},Vec{Float64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatZeroRowsLocalIS(arg1::Mat{Float64},arg2::IS{Float64},arg3::Float64,arg4::Vec{Float64},arg5::Vec{Float64})
    err = ccall((:MatZeroRowsLocalIS,petscRealDouble),PetscErrorCode,(Mat{Float64},IS{Float64},Float64,Vec{Float64},Vec{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatZeroRowsColumnsLocal(arg1::Mat{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Float64,arg5::Vec{Float64},arg6::Vec{Float64})
    err = ccall((:MatZeroRowsColumnsLocal,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64,Ptr{Int64},Float64,Vec{Float64},Vec{Float64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatZeroRowsColumnsLocalIS(arg1::Mat{Float64},arg2::IS{Float64},arg3::Float64,arg4::Vec{Float64},arg5::Vec{Float64})
    err = ccall((:MatZeroRowsColumnsLocalIS,petscRealDouble),PetscErrorCode,(Mat{Float64},IS{Float64},Float64,Vec{Float64},Vec{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatSetValuesLocal(arg1::Mat{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg7::InsertMode)
    err = ccall((:MatSetValuesLocal,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64,Ptr{Int64},Int64,Ptr{Int64},Ptr{Float64},InsertMode),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatSetValuesBlockedLocal(arg1::Mat{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg7::InsertMode)
    err = ccall((:MatSetValuesBlockedLocal,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64,Ptr{Int64},Int64,Ptr{Int64},Ptr{Float64},InsertMode),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatStashSetInitialSize(arg1::Mat{Float64},arg2::Integer,arg3::Integer)
    err = ccall((:MatStashSetInitialSize,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64,Int64),arg1,arg2,arg3)
    return err
end

function MatStashGetInfo(arg1::Mat{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatStashGetInfo,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatInterpolate(arg1::Mat{Float64},arg2::Vec{Float64},arg3::Vec{Float64})
    err = ccall((:MatInterpolate,petscRealDouble),PetscErrorCode,(Mat{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3)
    return err
end

function MatInterpolateAdd(arg1::Mat{Float64},arg2::Vec{Float64},arg3::Vec{Float64},arg4::Vec{Float64})
    err = ccall((:MatInterpolateAdd,petscRealDouble),PetscErrorCode,(Mat{Float64},Vec{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function MatRestrict(arg1::Mat{Float64},arg2::Vec{Float64},arg3::Vec{Float64})
    err = ccall((:MatRestrict,petscRealDouble),PetscErrorCode,(Mat{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3)
    return err
end

function MatCreateVecs(arg1::Mat{Float64},arg2::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}},arg3::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:MatCreateVecs,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{Vec{Float64}},Ptr{Vec{Float64}}),arg1,arg2,arg3)
    return err
end

function MatGetMultiProcBlock(arg1::Mat{Float64},arg2::MPI_Comm,arg3::MatReuse,arg4::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatGetMultiProcBlock,petscRealDouble),PetscErrorCode,(Mat{Float64},comm_type,MatReuse,Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function MatFindZeroDiagonals(arg1::Mat{Float64},arg2::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:MatFindZeroDiagonals,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{IS{Float64}}),arg1,arg2)
    return err
end

function MatFindOffBlockDiagonalEntries(arg1::Mat{Float64},arg2::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:MatFindOffBlockDiagonalEntries,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{IS{Float64}}),arg1,arg2)
    return err
end

function MatCreateMPIMatConcatenateSeqMat(arg1::MPI_Comm,arg2::Mat{Float64},arg3::Integer,arg4::MatReuse,arg5::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatCreateMPIMatConcatenateSeqMat,petscRealDouble),PetscErrorCode,(comm_type,Mat{Float64},Int64,MatReuse,Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatInodeAdjustForInodes(arg1::Mat{Float64},arg2::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}},arg3::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:MatInodeAdjustForInodes,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{IS{Float64}},Ptr{IS{Float64}}),arg1,arg2,arg3)
    return err
end

function MatInodeGetInodeSizes(arg1::Mat{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatInodeGetInodeSizes,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function MatSeqAIJSetColumnIndices(arg1::Mat{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatSeqAIJSetColumnIndices,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function MatSeqBAIJSetColumnIndices(arg1::Mat{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatSeqBAIJSetColumnIndices,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function MatCreateSeqAIJWithArrays(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg7::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatCreateSeqAIJWithArrays,petscRealDouble),PetscErrorCode,(comm_type,Int64,Int64,Ptr{Int64},Ptr{Int64},Ptr{Float64},Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatCreateSeqBAIJWithArrays(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg8::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatCreateSeqBAIJWithArrays,petscRealDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Ptr{Int64},Ptr{Int64},Ptr{Float64},Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function MatCreateSeqSBAIJWithArrays(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg8::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatCreateSeqSBAIJWithArrays,petscRealDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Ptr{Int64},Ptr{Int64},Ptr{Float64},Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function MatCreateSeqAIJFromTriple(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg7::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}},arg8::Integer,arg9::PetscBool)
    err = ccall((:MatCreateSeqAIJFromTriple,petscRealDouble),PetscErrorCode,(comm_type,Int64,Int64,Ptr{Int64},Ptr{Int64},Ptr{Float64},Ptr{Mat{Float64}},Int64,PetscBool),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
    return err
end

function MatSeqBAIJSetPreallocation(arg1::Mat{Float64},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatSeqBAIJSetPreallocation,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64,Int64,Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function MatSeqSBAIJSetPreallocation(arg1::Mat{Float64},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatSeqSBAIJSetPreallocation,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64,Int64,Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function MatSeqAIJSetPreallocation(arg1::Mat{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatSeqAIJSetPreallocation,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function MatMPIBAIJSetPreallocation(arg1::Mat{Float64},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatMPIBAIJSetPreallocation,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64,Int64,Ptr{Int64},Int64,Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatMPISBAIJSetPreallocation(arg1::Mat{Float64},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatMPISBAIJSetPreallocation,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64,Int64,Ptr{Int64},Int64,Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatMPIAIJSetPreallocation(arg1::Mat{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatMPIAIJSetPreallocation,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64,Ptr{Int64},Int64,Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatSeqAIJSetPreallocationCSR(arg1::Mat{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:MatSeqAIJSetPreallocationCSR,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{Int64},Ptr{Int64},Ptr{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function MatSeqBAIJSetPreallocationCSR(arg1::Mat{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:MatSeqBAIJSetPreallocationCSR,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64,Ptr{Int64},Ptr{Int64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatMPIAIJSetPreallocationCSR(arg1::Mat{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:MatMPIAIJSetPreallocationCSR,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{Int64},Ptr{Int64},Ptr{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function MatMPIBAIJSetPreallocationCSR(arg1::Mat{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:MatMPIBAIJSetPreallocationCSR,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64,Ptr{Int64},Ptr{Int64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatMPIAdjSetPreallocation(arg1::Mat{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatMPIAdjSetPreallocation,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function MatMPIDenseSetPreallocation(arg1::Mat{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:MatMPIDenseSetPreallocation,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{Float64}),arg1,arg2)
    return err
end

function MatSeqDenseSetPreallocation(arg1::Mat{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:MatSeqDenseSetPreallocation,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{Float64}),arg1,arg2)
    return err
end

function MatMPIAIJGetSeqAIJ(arg1::Mat{Float64},arg2::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}},arg3::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:MatMPIAIJGetSeqAIJ,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{Mat{Float64}},Ptr{Mat{Float64}},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4)
    return err
end

function MatMPIBAIJGetSeqBAIJ(arg1::Mat{Float64},arg2::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}},arg3::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:MatMPIBAIJGetSeqBAIJ,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{Mat{Float64}},Ptr{Mat{Float64}},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4)
    return err
end

function MatMPIAdjCreateNonemptySubcommMat(arg1::Mat{Float64},arg2::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatMPIAdjCreateNonemptySubcommMat,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{Mat{Float64}}),arg1,arg2)
    return err
end

function MatISSetPreallocation(arg1::Mat{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatISSetPreallocation,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64,Ptr{Int64},Int64,Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatSeqDenseSetLDA(arg1::Mat{Float64},arg2::Integer)
    err = ccall((:MatSeqDenseSetLDA,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64),arg1,arg2)
    return err
end

function MatDenseGetLocalMatrix(arg1::Mat{Float64},arg2::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatDenseGetLocalMatrix,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{Mat{Float64}}),arg1,arg2)
    return err
end

function MatStoreValues(arg1::Mat{Float64})
    err = ccall((:MatStoreValues,petscRealDouble),PetscErrorCode,(Mat{Float64},),arg1)
    return err
end

function MatRetrieveValues(arg1::Mat{Float64})
    err = ccall((:MatRetrieveValues,petscRealDouble),PetscErrorCode,(Mat{Float64},),arg1)
    return err
end

function MatDAADSetCtx(arg1::Mat{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatDAADSetCtx,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function MatFindNonzeroRows(arg1::Mat{Float64},arg2::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:MatFindNonzeroRows,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{IS{Float64}}),arg1,arg2)
    return err
end

function MatGetOrdering(arg1::Mat{Float64},arg2::MatOrderingType,arg3::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}},arg4::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:MatGetOrdering,petscRealDouble),PetscErrorCode,(Mat{Float64},MatOrderingType,Ptr{IS{Float64}},Ptr{IS{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function MatGetOrderingList(arg1::Union{Ptr{PetscFunctionList{Float64}},StridedArray{PetscFunctionList{Float64}},Ptr{PetscFunctionList{Float64}},Ref{PetscFunctionList{Float64}}})
    err = ccall((:MatGetOrderingList,petscRealDouble),PetscErrorCode,(Ptr{PetscFunctionList},),arg1)
    return err
end

function MatOrderingRegister(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatOrderingRegister,petscRealDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function MatReorderForNonzeroDiagonal(arg1::Mat{Float64},arg2::Float64,arg3::IS{Float64},arg4::IS{Float64})
    err = ccall((:MatReorderForNonzeroDiagonal,petscRealDouble),PetscErrorCode,(Mat{Float64},Float64,IS{Float64},IS{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function MatCreateLaplacian(arg1::Mat{Float64},arg2::Float64,arg3::PetscBool,arg4::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatCreateLaplacian,petscRealDouble),PetscErrorCode,(Mat{Float64},Float64,PetscBool,Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function MatFactorInfoInitialize(arg0::Type{Float64},arg1::Union{Ptr{MatFactorInfo},StridedArray{MatFactorInfo},Ptr{MatFactorInfo},Ref{MatFactorInfo}})
    err = ccall((:MatFactorInfoInitialize,petscRealDouble),PetscErrorCode,(Ptr{MatFactorInfo},),arg1)
    return err
end

function MatCholeskyFactor(arg1::Mat{Float64},arg2::IS{Float64},arg3::Union{Ptr{MatFactorInfo},StridedArray{MatFactorInfo},Ptr{MatFactorInfo},Ref{MatFactorInfo}})
    err = ccall((:MatCholeskyFactor,petscRealDouble),PetscErrorCode,(Mat{Float64},IS{Float64},Ptr{MatFactorInfo}),arg1,arg2,arg3)
    return err
end

function MatCholeskyFactorSymbolic(arg1::Mat{Float64},arg2::Mat{Float64},arg3::IS{Float64},arg4::Union{Ptr{MatFactorInfo},StridedArray{MatFactorInfo},Ptr{MatFactorInfo},Ref{MatFactorInfo}})
    err = ccall((:MatCholeskyFactorSymbolic,petscRealDouble),PetscErrorCode,(Mat{Float64},Mat{Float64},IS{Float64},Ptr{MatFactorInfo}),arg1,arg2,arg3,arg4)
    return err
end

function MatCholeskyFactorNumeric(arg1::Mat{Float64},arg2::Mat{Float64},arg3::Union{Ptr{MatFactorInfo},StridedArray{MatFactorInfo},Ptr{MatFactorInfo},Ref{MatFactorInfo}})
    err = ccall((:MatCholeskyFactorNumeric,petscRealDouble),PetscErrorCode,(Mat{Float64},Mat{Float64},Ptr{MatFactorInfo}),arg1,arg2,arg3)
    return err
end

function MatLUFactor(arg1::Mat{Float64},arg2::IS{Float64},arg3::IS{Float64},arg4::Union{Ptr{MatFactorInfo},StridedArray{MatFactorInfo},Ptr{MatFactorInfo},Ref{MatFactorInfo}})
    err = ccall((:MatLUFactor,petscRealDouble),PetscErrorCode,(Mat{Float64},IS{Float64},IS{Float64},Ptr{MatFactorInfo}),arg1,arg2,arg3,arg4)
    return err
end

function MatILUFactor(arg1::Mat{Float64},arg2::IS{Float64},arg3::IS{Float64},arg4::Union{Ptr{MatFactorInfo},StridedArray{MatFactorInfo},Ptr{MatFactorInfo},Ref{MatFactorInfo}})
    err = ccall((:MatILUFactor,petscRealDouble),PetscErrorCode,(Mat{Float64},IS{Float64},IS{Float64},Ptr{MatFactorInfo}),arg1,arg2,arg3,arg4)
    return err
end

function MatLUFactorSymbolic(arg1::Mat{Float64},arg2::Mat{Float64},arg3::IS{Float64},arg4::IS{Float64},arg5::Union{Ptr{MatFactorInfo},StridedArray{MatFactorInfo},Ptr{MatFactorInfo},Ref{MatFactorInfo}})
    err = ccall((:MatLUFactorSymbolic,petscRealDouble),PetscErrorCode,(Mat{Float64},Mat{Float64},IS{Float64},IS{Float64},Ptr{MatFactorInfo}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatILUFactorSymbolic(arg1::Mat{Float64},arg2::Mat{Float64},arg3::IS{Float64},arg4::IS{Float64},arg5::Union{Ptr{MatFactorInfo},StridedArray{MatFactorInfo},Ptr{MatFactorInfo},Ref{MatFactorInfo}})
    err = ccall((:MatILUFactorSymbolic,petscRealDouble),PetscErrorCode,(Mat{Float64},Mat{Float64},IS{Float64},IS{Float64},Ptr{MatFactorInfo}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatICCFactorSymbolic(arg1::Mat{Float64},arg2::Mat{Float64},arg3::IS{Float64},arg4::Union{Ptr{MatFactorInfo},StridedArray{MatFactorInfo},Ptr{MatFactorInfo},Ref{MatFactorInfo}})
    err = ccall((:MatICCFactorSymbolic,petscRealDouble),PetscErrorCode,(Mat{Float64},Mat{Float64},IS{Float64},Ptr{MatFactorInfo}),arg1,arg2,arg3,arg4)
    return err
end

function MatICCFactor(arg1::Mat{Float64},arg2::IS{Float64},arg3::Union{Ptr{MatFactorInfo},StridedArray{MatFactorInfo},Ptr{MatFactorInfo},Ref{MatFactorInfo}})
    err = ccall((:MatICCFactor,petscRealDouble),PetscErrorCode,(Mat{Float64},IS{Float64},Ptr{MatFactorInfo}),arg1,arg2,arg3)
    return err
end

function MatLUFactorNumeric(arg1::Mat{Float64},arg2::Mat{Float64},arg3::Union{Ptr{MatFactorInfo},StridedArray{MatFactorInfo},Ptr{MatFactorInfo},Ref{MatFactorInfo}})
    err = ccall((:MatLUFactorNumeric,petscRealDouble),PetscErrorCode,(Mat{Float64},Mat{Float64},Ptr{MatFactorInfo}),arg1,arg2,arg3)
    return err
end

function MatGetInertia(arg1::Mat{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatGetInertia,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function MatSolve(arg1::Mat{Float64},arg2::Vec{Float64},arg3::Vec{Float64})
    err = ccall((:MatSolve,petscRealDouble),PetscErrorCode,(Mat{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3)
    return err
end

function MatForwardSolve(arg1::Mat{Float64},arg2::Vec{Float64},arg3::Vec{Float64})
    err = ccall((:MatForwardSolve,petscRealDouble),PetscErrorCode,(Mat{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3)
    return err
end

function MatBackwardSolve(arg1::Mat{Float64},arg2::Vec{Float64},arg3::Vec{Float64})
    err = ccall((:MatBackwardSolve,petscRealDouble),PetscErrorCode,(Mat{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3)
    return err
end

function MatSolveAdd(arg1::Mat{Float64},arg2::Vec{Float64},arg3::Vec{Float64},arg4::Vec{Float64})
    err = ccall((:MatSolveAdd,petscRealDouble),PetscErrorCode,(Mat{Float64},Vec{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function MatSolveTranspose(arg1::Mat{Float64},arg2::Vec{Float64},arg3::Vec{Float64})
    err = ccall((:MatSolveTranspose,petscRealDouble),PetscErrorCode,(Mat{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3)
    return err
end

function MatSolveTransposeAdd(arg1::Mat{Float64},arg2::Vec{Float64},arg3::Vec{Float64},arg4::Vec{Float64})
    err = ccall((:MatSolveTransposeAdd,petscRealDouble),PetscErrorCode,(Mat{Float64},Vec{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function MatSolves(arg1::Mat{Float64},arg2::Vecs{Float64},arg3::Vecs{Float64})
    err = ccall((:MatSolves,petscRealDouble),PetscErrorCode,(Mat{Float64},Vecs,Vecs),arg1,arg2,arg3)
    return err
end

function MatSetUnfactored(arg1::Mat{Float64})
    err = ccall((:MatSetUnfactored,petscRealDouble),PetscErrorCode,(Mat{Float64},),arg1)
    return err
end

function MatSOR(arg1::Mat{Float64},arg2::Vec{Float64},arg3::Float64,arg4::MatSORType,arg5::Float64,arg6::Integer,arg7::Integer,arg8::Vec{Float64})
    err = ccall((:MatSOR,petscRealDouble),PetscErrorCode,(Mat{Float64},Vec{Float64},Float64,MatSORType,Float64,Int64,Int64,Vec{Float64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function MatColoringCreate(arg1::Mat{Float64},arg2::Union{Ptr{MatColoring{Float64}},StridedArray{MatColoring{Float64}},Ptr{MatColoring{Float64}},Ref{MatColoring{Float64}}})
    err = ccall((:MatColoringCreate,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{MatColoring{Float64}}),arg1,arg2)
    return err
end

function MatColoringGetDegrees(arg1::Mat{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatColoringGetDegrees,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function MatColoringDestroy(arg1::Union{Ptr{MatColoring{Float64}},StridedArray{MatColoring{Float64}},Ptr{MatColoring{Float64}},Ref{MatColoring{Float64}}})
    err = ccall((:MatColoringDestroy,petscRealDouble),PetscErrorCode,(Ptr{MatColoring{Float64}},),arg1)
    return err
end

function MatColoringView(arg1::MatColoring{Float64},arg2::PetscViewer{Float64})
    err = ccall((:MatColoringView,petscRealDouble),PetscErrorCode,(MatColoring{Float64},PetscViewer{Float64}),arg1,arg2)
    return err
end

function MatColoringSetType(arg1::MatColoring{Float64},arg2::MatColoringType)
    err = ccall((:MatColoringSetType,petscRealDouble),PetscErrorCode,(MatColoring{Float64},MatColoringType),arg1,arg2)
    return err
end

function MatColoringSetFromOptions(arg1::MatColoring{Float64})
    err = ccall((:MatColoringSetFromOptions,petscRealDouble),PetscErrorCode,(MatColoring{Float64},),arg1)
    return err
end

function MatColoringSetDistance(arg1::MatColoring{Float64},arg2::Integer)
    err = ccall((:MatColoringSetDistance,petscRealDouble),PetscErrorCode,(MatColoring{Float64},Int64),arg1,arg2)
    return err
end

function MatColoringGetDistance(arg1::MatColoring{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatColoringGetDistance,petscRealDouble),PetscErrorCode,(MatColoring{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function MatColoringSetMaxColors(arg1::MatColoring{Float64},arg2::Integer)
    err = ccall((:MatColoringSetMaxColors,petscRealDouble),PetscErrorCode,(MatColoring{Float64},Int64),arg1,arg2)
    return err
end

function MatColoringGetMaxColors(arg1::MatColoring{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatColoringGetMaxColors,petscRealDouble),PetscErrorCode,(MatColoring{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function MatColoringApply(arg1::MatColoring{Float64},arg2::Union{Ptr{ISColoring{Float64}},StridedArray{ISColoring{Float64}},Ptr{ISColoring{Float64}},Ref{ISColoring{Float64}}})
    err = ccall((:MatColoringApply,petscRealDouble),PetscErrorCode,(MatColoring{Float64},Ptr{ISColoring{Float64}}),arg1,arg2)
    return err
end

function MatColoringRegister(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatColoringRegister,petscRealDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function MatColoringPatch(arg1::Mat{Float64},arg2::Integer,arg3::Integer,ISColoringValue::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}},arg4::Union{Ptr{ISColoring{Float64}},StridedArray{ISColoring{Float64}},Ptr{ISColoring{Float64}},Ref{ISColoring{Float64}}})
    err = ccall((:MatColoringPatch,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64,Int64,Ptr{Cint},Ptr{ISColoring{Float64}}),arg1,arg2,arg3,ISColoringValue,arg4)
    return err
end

function MatColoringSetWeightType(arg1::MatColoring{Float64},arg2::MatColoringWeightType)
    err = ccall((:MatColoringSetWeightType,petscRealDouble),PetscErrorCode,(MatColoring{Float64},MatColoringWeightType),arg1,arg2)
    return err
end

function MatColoringSetWeights(arg1::MatColoring{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatColoringSetWeights,petscRealDouble),PetscErrorCode,(MatColoring{Float64},Ptr{Float64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function MatColoringCreateWeights(arg1::MatColoring{Float64},arg2::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},lperm::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:MatColoringCreateWeights,petscRealDouble),PetscErrorCode,(MatColoring{Float64},Ptr{Ptr{Float64}},Ptr{Ptr{Int64}}),arg1,arg2,lperm)
    return err
end

function MatFDColoringCreate(arg1::Mat{Float64},arg2::ISColoring{Float64},arg3::Union{Ptr{MatFDColoring{Float64}},StridedArray{MatFDColoring{Float64}},Ptr{MatFDColoring{Float64}},Ref{MatFDColoring{Float64}}})
    err = ccall((:MatFDColoringCreate,petscRealDouble),PetscErrorCode,(Mat{Float64},ISColoring{Float64},Ptr{MatFDColoring{Float64}}),arg1,arg2,arg3)
    return err
end

function MatFDColoringDestroy(arg1::Union{Ptr{MatFDColoring{Float64}},StridedArray{MatFDColoring{Float64}},Ptr{MatFDColoring{Float64}},Ref{MatFDColoring{Float64}}})
    err = ccall((:MatFDColoringDestroy,petscRealDouble),PetscErrorCode,(Ptr{MatFDColoring{Float64}},),arg1)
    return err
end

function MatFDColoringView(arg1::MatFDColoring{Float64},arg2::PetscViewer{Float64})
    err = ccall((:MatFDColoringView,petscRealDouble),PetscErrorCode,(MatFDColoring{Float64},PetscViewer{Float64}),arg1,arg2)
    return err
end

function MatFDColoringSetFunction(arg1::MatFDColoring{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatFDColoringSetFunction,petscRealDouble),PetscErrorCode,(MatFDColoring{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function MatFDColoringGetFunction(arg1::MatFDColoring{Float64},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:MatFDColoringGetFunction,petscRealDouble),PetscErrorCode,(MatFDColoring{Float64},Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function MatFDColoringSetParameters(arg1::MatFDColoring{Float64},arg2::Float64,arg3::Float64)
    err = ccall((:MatFDColoringSetParameters,petscRealDouble),PetscErrorCode,(MatFDColoring{Float64},Float64,Float64),arg1,arg2,arg3)
    return err
end

function MatFDColoringSetFromOptions(arg1::MatFDColoring{Float64})
    err = ccall((:MatFDColoringSetFromOptions,petscRealDouble),PetscErrorCode,(MatFDColoring{Float64},),arg1)
    return err
end

function MatFDColoringApply(arg1::Mat{Float64},arg2::MatFDColoring{Float64},arg3::Vec{Float64},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatFDColoringApply,petscRealDouble),PetscErrorCode,(Mat{Float64},MatFDColoring{Float64},Vec{Float64},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function MatFDColoringSetF(arg1::MatFDColoring{Float64},arg2::Vec{Float64})
    err = ccall((:MatFDColoringSetF,petscRealDouble),PetscErrorCode,(MatFDColoring{Float64},Vec{Float64}),arg1,arg2)
    return err
end

function MatFDColoringGetPerturbedColumns(arg1::MatFDColoring{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:MatFDColoringGetPerturbedColumns,petscRealDouble),PetscErrorCode,(MatFDColoring{Float64},Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3)
    return err
end

function MatFDColoringSetUp(arg1::Mat{Float64},arg2::ISColoring{Float64},arg3::MatFDColoring{Float64})
    err = ccall((:MatFDColoringSetUp,petscRealDouble),PetscErrorCode,(Mat{Float64},ISColoring{Float64},MatFDColoring{Float64}),arg1,arg2,arg3)
    return err
end

function MatFDColoringSetBlockSize(arg1::MatFDColoring{Float64},arg2::Integer,arg3::Integer)
    err = ccall((:MatFDColoringSetBlockSize,petscRealDouble),PetscErrorCode,(MatFDColoring{Float64},Int64,Int64),arg1,arg2,arg3)
    return err
end

function MatTransposeColoringCreate(arg1::Mat{Float64},arg2::ISColoring{Float64},arg3::Union{Ptr{MatTransposeColoring{Float64}},StridedArray{MatTransposeColoring{Float64}},Ptr{MatTransposeColoring{Float64}},Ref{MatTransposeColoring{Float64}}})
    err = ccall((:MatTransposeColoringCreate,petscRealDouble),PetscErrorCode,(Mat{Float64},ISColoring{Float64},Ptr{MatTransposeColoring{Float64}}),arg1,arg2,arg3)
    return err
end

function MatTransColoringApplySpToDen(arg1::MatTransposeColoring{Float64},arg2::Mat{Float64},arg3::Mat{Float64})
    err = ccall((:MatTransColoringApplySpToDen,petscRealDouble),PetscErrorCode,(MatTransposeColoring{Float64},Mat{Float64},Mat{Float64}),arg1,arg2,arg3)
    return err
end

function MatTransColoringApplyDenToSp(arg1::MatTransposeColoring{Float64},arg2::Mat{Float64},arg3::Mat{Float64})
    err = ccall((:MatTransColoringApplyDenToSp,petscRealDouble),PetscErrorCode,(MatTransposeColoring{Float64},Mat{Float64},Mat{Float64}),arg1,arg2,arg3)
    return err
end

function MatTransposeColoringDestroy(arg1::Union{Ptr{MatTransposeColoring{Float64}},StridedArray{MatTransposeColoring{Float64}},Ptr{MatTransposeColoring{Float64}},Ref{MatTransposeColoring{Float64}}})
    err = ccall((:MatTransposeColoringDestroy,petscRealDouble),PetscErrorCode,(Ptr{MatTransposeColoring{Float64}},),arg1)
    return err
end

function MatPartitioningCreate(arg1::MPI_Comm,arg2::Union{Ptr{MatPartitioning{Float64}},StridedArray{MatPartitioning{Float64}},Ptr{MatPartitioning{Float64}},Ref{MatPartitioning{Float64}}})
    err = ccall((:MatPartitioningCreate,petscRealDouble),PetscErrorCode,(comm_type,Ptr{MatPartitioning{Float64}}),arg1,arg2)
    return err
end

function MatPartitioningSetType(arg1::MatPartitioning{Float64},arg2::MatPartitioningType)
    err = ccall((:MatPartitioningSetType,petscRealDouble),PetscErrorCode,(MatPartitioning{Float64},MatPartitioningType),arg1,arg2)
    return err
end

function MatPartitioningSetNParts(arg1::MatPartitioning{Float64},arg2::Integer)
    err = ccall((:MatPartitioningSetNParts,petscRealDouble),PetscErrorCode,(MatPartitioning{Float64},Int64),arg1,arg2)
    return err
end

function MatPartitioningSetAdjacency(arg1::MatPartitioning{Float64},arg2::Mat{Float64})
    err = ccall((:MatPartitioningSetAdjacency,petscRealDouble),PetscErrorCode,(MatPartitioning{Float64},Mat{Float64}),arg1,arg2)
    return err
end

function MatPartitioningSetVertexWeights(arg1::MatPartitioning{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatPartitioningSetVertexWeights,petscRealDouble),PetscErrorCode,(MatPartitioning{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function MatPartitioningSetPartitionWeights(arg1::MatPartitioning{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:MatPartitioningSetPartitionWeights,petscRealDouble),PetscErrorCode,(MatPartitioning{Float64},Ptr{Float64}),arg1,arg2)
    return err
end

function MatPartitioningApply(arg1::MatPartitioning{Float64},arg2::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:MatPartitioningApply,petscRealDouble),PetscErrorCode,(MatPartitioning{Float64},Ptr{IS{Float64}}),arg1,arg2)
    return err
end

function MatPartitioningDestroy(arg1::Union{Ptr{MatPartitioning{Float64}},StridedArray{MatPartitioning{Float64}},Ptr{MatPartitioning{Float64}},Ref{MatPartitioning{Float64}}})
    err = ccall((:MatPartitioningDestroy,petscRealDouble),PetscErrorCode,(Ptr{MatPartitioning{Float64}},),arg1)
    return err
end

function MatPartitioningRegister(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatPartitioningRegister,petscRealDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function MatPartitioningView(arg1::MatPartitioning{Float64},arg2::PetscViewer{Float64})
    err = ccall((:MatPartitioningView,petscRealDouble),PetscErrorCode,(MatPartitioning{Float64},PetscViewer{Float64}),arg1,arg2)
    return err
end

function MatPartitioningSetFromOptions(arg1::MatPartitioning{Float64})
    err = ccall((:MatPartitioningSetFromOptions,petscRealDouble),PetscErrorCode,(MatPartitioning{Float64},),arg1)
    return err
end

function MatPartitioningGetType(arg1::MatPartitioning{Float64},arg2::Union{Ptr{MatPartitioningType},StridedArray{MatPartitioningType},Ptr{MatPartitioningType},Ref{MatPartitioningType}})
    err = ccall((:MatPartitioningGetType,petscRealDouble),PetscErrorCode,(MatPartitioning{Float64},Ptr{MatPartitioningType}),arg1,arg2)
    return err
end

function MatPartitioningParmetisSetCoarseSequential(arg1::MatPartitioning{Float64})
    err = ccall((:MatPartitioningParmetisSetCoarseSequential,petscRealDouble),PetscErrorCode,(MatPartitioning{Float64},),arg1)
    return err
end

function MatPartitioningParmetisGetEdgeCut(arg1::MatPartitioning{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatPartitioningParmetisGetEdgeCut,petscRealDouble),PetscErrorCode,(MatPartitioning{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function MatPartitioningChacoSetGlobal(arg1::MatPartitioning{Float64},arg2::MPChacoGlobalType)
    err = ccall((:MatPartitioningChacoSetGlobal,petscRealDouble),PetscErrorCode,(MatPartitioning{Float64},MPChacoGlobalType),arg1,arg2)
    return err
end

function MatPartitioningChacoGetGlobal(arg1::MatPartitioning{Float64},arg2::Union{Ptr{MPChacoGlobalType},StridedArray{MPChacoGlobalType},Ptr{MPChacoGlobalType},Ref{MPChacoGlobalType}})
    err = ccall((:MatPartitioningChacoGetGlobal,petscRealDouble),PetscErrorCode,(MatPartitioning{Float64},Ptr{MPChacoGlobalType}),arg1,arg2)
    return err
end

function MatPartitioningChacoSetLocal(arg1::MatPartitioning{Float64},arg2::MPChacoLocalType)
    err = ccall((:MatPartitioningChacoSetLocal,petscRealDouble),PetscErrorCode,(MatPartitioning{Float64},MPChacoLocalType),arg1,arg2)
    return err
end

function MatPartitioningChacoGetLocal(arg1::MatPartitioning{Float64},arg2::Union{Ptr{MPChacoLocalType},StridedArray{MPChacoLocalType},Ptr{MPChacoLocalType},Ref{MPChacoLocalType}})
    err = ccall((:MatPartitioningChacoGetLocal,petscRealDouble),PetscErrorCode,(MatPartitioning{Float64},Ptr{MPChacoLocalType}),arg1,arg2)
    return err
end

function MatPartitioningChacoSetCoarseLevel(arg1::MatPartitioning{Float64},arg2::Float64)
    err = ccall((:MatPartitioningChacoSetCoarseLevel,petscRealDouble),PetscErrorCode,(MatPartitioning{Float64},Float64),arg1,arg2)
    return err
end

function MatPartitioningChacoSetEigenSolver(arg1::MatPartitioning{Float64},arg2::MPChacoEigenType)
    err = ccall((:MatPartitioningChacoSetEigenSolver,petscRealDouble),PetscErrorCode,(MatPartitioning{Float64},MPChacoEigenType),arg1,arg2)
    return err
end

function MatPartitioningChacoGetEigenSolver(arg1::MatPartitioning{Float64},arg2::Union{Ptr{MPChacoEigenType},StridedArray{MPChacoEigenType},Ptr{MPChacoEigenType},Ref{MPChacoEigenType}})
    err = ccall((:MatPartitioningChacoGetEigenSolver,petscRealDouble),PetscErrorCode,(MatPartitioning{Float64},Ptr{MPChacoEigenType}),arg1,arg2)
    return err
end

function MatPartitioningChacoSetEigenTol(arg1::MatPartitioning{Float64},arg2::Float64)
    err = ccall((:MatPartitioningChacoSetEigenTol,petscRealDouble),PetscErrorCode,(MatPartitioning{Float64},Float64),arg1,arg2)
    return err
end

function MatPartitioningChacoGetEigenTol(arg1::MatPartitioning{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:MatPartitioningChacoGetEigenTol,petscRealDouble),PetscErrorCode,(MatPartitioning{Float64},Ptr{Float64}),arg1,arg2)
    return err
end

function MatPartitioningChacoSetEigenNumber(arg1::MatPartitioning{Float64},arg2::Integer)
    err = ccall((:MatPartitioningChacoSetEigenNumber,petscRealDouble),PetscErrorCode,(MatPartitioning{Float64},Int64),arg1,arg2)
    return err
end

function MatPartitioningChacoGetEigenNumber(arg1::MatPartitioning{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatPartitioningChacoGetEigenNumber,petscRealDouble),PetscErrorCode,(MatPartitioning{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function MatPartitioningPartySetGlobal(arg1::MatPartitioning{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:MatPartitioningPartySetGlobal,petscRealDouble),PetscErrorCode,(MatPartitioning{Float64},Cstring),arg1,arg2)
    return err
end

function MatPartitioningPartySetLocal(arg1::MatPartitioning{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:MatPartitioningPartySetLocal,petscRealDouble),PetscErrorCode,(MatPartitioning{Float64},Cstring),arg1,arg2)
    return err
end

function MatPartitioningPartySetCoarseLevel(arg1::MatPartitioning{Float64},arg2::Float64)
    err = ccall((:MatPartitioningPartySetCoarseLevel,petscRealDouble),PetscErrorCode,(MatPartitioning{Float64},Float64),arg1,arg2)
    return err
end

function MatPartitioningPartySetBipart(arg1::MatPartitioning{Float64},arg2::PetscBool)
    err = ccall((:MatPartitioningPartySetBipart,petscRealDouble),PetscErrorCode,(MatPartitioning{Float64},PetscBool),arg1,arg2)
    return err
end

function MatPartitioningPartySetMatchOptimization(arg1::MatPartitioning{Float64},arg2::PetscBool)
    err = ccall((:MatPartitioningPartySetMatchOptimization,petscRealDouble),PetscErrorCode,(MatPartitioning{Float64},PetscBool),arg1,arg2)
    return err
end

function MatPartitioningPTScotchSetImbalance(arg1::MatPartitioning{Float64},arg2::Float64)
    err = ccall((:MatPartitioningPTScotchSetImbalance,petscRealDouble),PetscErrorCode,(MatPartitioning{Float64},Float64),arg1,arg2)
    return err
end

function MatPartitioningPTScotchGetImbalance(arg1::MatPartitioning{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:MatPartitioningPTScotchGetImbalance,petscRealDouble),PetscErrorCode,(MatPartitioning{Float64},Ptr{Float64}),arg1,arg2)
    return err
end

function MatPartitioningPTScotchSetStrategy(arg1::MatPartitioning{Float64},arg2::MPPTScotchStrategyType)
    err = ccall((:MatPartitioningPTScotchSetStrategy,petscRealDouble),PetscErrorCode,(MatPartitioning{Float64},MPPTScotchStrategyType),arg1,arg2)
    return err
end

function MatPartitioningPTScotchGetStrategy(arg1::MatPartitioning{Float64},arg2::Union{Ptr{MPPTScotchStrategyType},StridedArray{MPPTScotchStrategyType},Ptr{MPPTScotchStrategyType},Ref{MPPTScotchStrategyType}})
    err = ccall((:MatPartitioningPTScotchGetStrategy,petscRealDouble),PetscErrorCode,(MatPartitioning{Float64},Ptr{MPPTScotchStrategyType}),arg1,arg2)
    return err
end

function MatCoarsenCreate(arg1::MPI_Comm,arg2::Union{Ptr{MatCoarsen{Float64}},StridedArray{MatCoarsen{Float64}},Ptr{MatCoarsen{Float64}},Ref{MatCoarsen{Float64}}})
    err = ccall((:MatCoarsenCreate,petscRealDouble),PetscErrorCode,(comm_type,Ptr{MatCoarsen{Float64}}),arg1,arg2)
    return err
end

function MatCoarsenSetType(arg1::MatCoarsen{Float64},arg2::MatCoarsenType)
    err = ccall((:MatCoarsenSetType,petscRealDouble),PetscErrorCode,(MatCoarsen{Float64},MatCoarsenType),arg1,arg2)
    return err
end

function MatCoarsenSetAdjacency(arg1::MatCoarsen{Float64},arg2::Mat{Float64})
    err = ccall((:MatCoarsenSetAdjacency,petscRealDouble),PetscErrorCode,(MatCoarsen{Float64},Mat{Float64}),arg1,arg2)
    return err
end

function MatCoarsenSetGreedyOrdering(arg1::MatCoarsen{Float64},arg2::IS{Float64})
    err = ccall((:MatCoarsenSetGreedyOrdering,petscRealDouble),PetscErrorCode,(MatCoarsen{Float64},IS{Float64}),arg1,arg2)
    return err
end

function MatCoarsenSetStrictAggs(arg1::MatCoarsen{Float64},arg2::PetscBool)
    err = ccall((:MatCoarsenSetStrictAggs,petscRealDouble),PetscErrorCode,(MatCoarsen{Float64},PetscBool),arg1,arg2)
    return err
end

function MatCoarsenGetData(arg1::MatCoarsen{Float64},arg2::Union{Ptr{Ptr{PetscCoarsenData{Float64}}},StridedArray{Ptr{PetscCoarsenData{Float64}}},Ptr{Ptr{PetscCoarsenData{Float64}}},Ref{Ptr{PetscCoarsenData{Float64}}}})
    err = ccall((:MatCoarsenGetData,petscRealDouble),PetscErrorCode,(MatCoarsen{Float64},Ptr{Ptr{PetscCoarsenData{Float64}}}),arg1,arg2)
    return err
end

function MatCoarsenApply(arg1::MatCoarsen{Float64})
    err = ccall((:MatCoarsenApply,petscRealDouble),PetscErrorCode,(MatCoarsen{Float64},),arg1)
    return err
end

function MatCoarsenDestroy(arg1::Union{Ptr{MatCoarsen{Float64}},StridedArray{MatCoarsen{Float64}},Ptr{MatCoarsen{Float64}},Ref{MatCoarsen{Float64}}})
    err = ccall((:MatCoarsenDestroy,petscRealDouble),PetscErrorCode,(Ptr{MatCoarsen{Float64}},),arg1)
    return err
end

function MatCoarsenRegister(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatCoarsenRegister,petscRealDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function MatCoarsenView(arg1::MatCoarsen{Float64},arg2::PetscViewer{Float64})
    err = ccall((:MatCoarsenView,petscRealDouble),PetscErrorCode,(MatCoarsen{Float64},PetscViewer{Float64}),arg1,arg2)
    return err
end

function MatCoarsenSetFromOptions(arg1::MatCoarsen{Float64})
    err = ccall((:MatCoarsenSetFromOptions,petscRealDouble),PetscErrorCode,(MatCoarsen{Float64},),arg1)
    return err
end

function MatCoarsenGetType(arg1::MatCoarsen{Float64},arg2::Union{Ptr{MatCoarsenType},StridedArray{MatCoarsenType},Ptr{MatCoarsenType},Ref{MatCoarsenType}})
    err = ccall((:MatCoarsenGetType,petscRealDouble),PetscErrorCode,(MatCoarsen{Float64},Ptr{MatCoarsenType}),arg1,arg2)
    return err
end

function MatMeshToCellGraph(arg1::Mat{Float64},arg2::Integer,arg3::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatMeshToCellGraph,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64,Ptr{Mat{Float64}}),arg1,arg2,arg3)
    return err
end

function MatHasOperation(arg1::Mat{Float64},arg2::MatOperation,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatHasOperation,petscRealDouble),PetscErrorCode,(Mat{Float64},MatOperation,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function MatShellSetOperation(arg1::Mat{Float64},arg2::MatOperation,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatShellSetOperation,petscRealDouble),PetscErrorCode,(Mat{Float64},MatOperation,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function MatShellGetOperation(arg1::Mat{Float64},arg2::MatOperation,arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:MatShellGetOperation,petscRealDouble),PetscErrorCode,(Mat{Float64},MatOperation,Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function MatShellSetContext(arg1::Mat{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatShellSetContext,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function MatMPIBAIJSetHashTableFactor(arg1::Mat{Float64},arg2::Float64)
    err = ccall((:MatMPIBAIJSetHashTableFactor,petscRealDouble),PetscErrorCode,(Mat{Float64},Float64),arg1,arg2)
    return err
end

function MatISGetLocalMat(arg1::Mat{Float64},arg2::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatISGetLocalMat,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{Mat{Float64}}),arg1,arg2)
    return err
end

function MatISSetLocalMat(arg1::Mat{Float64},arg2::Mat{Float64})
    err = ccall((:MatISSetLocalMat,petscRealDouble),PetscErrorCode,(Mat{Float64},Mat{Float64}),arg1,arg2)
    return err
end

function MatISGetMPIXAIJ(arg1::Mat{Float64},arg2::MatReuse,arg3::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatISGetMPIXAIJ,petscRealDouble),PetscErrorCode,(Mat{Float64},MatReuse,Ptr{Mat{Float64}}),arg1,arg2,arg3)
    return err
end

function MatNullSpaceCreate(arg1::MPI_Comm,arg2::PetscBool,arg3::Integer,arg4::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}},arg5::Union{Ptr{MatNullSpace{Float64}},StridedArray{MatNullSpace{Float64}},Ptr{MatNullSpace{Float64}},Ref{MatNullSpace{Float64}}})
    err = ccall((:MatNullSpaceCreate,petscRealDouble),PetscErrorCode,(comm_type,PetscBool,Int64,Ptr{Vec{Float64}},Ptr{MatNullSpace{Float64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatNullSpaceSetFunction(arg1::MatNullSpace{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatNullSpaceSetFunction,petscRealDouble),PetscErrorCode,(MatNullSpace{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function MatNullSpaceDestroy(arg1::Union{Ptr{MatNullSpace{Float64}},StridedArray{MatNullSpace{Float64}},Ptr{MatNullSpace{Float64}},Ref{MatNullSpace{Float64}}})
    err = ccall((:MatNullSpaceDestroy,petscRealDouble),PetscErrorCode,(Ptr{MatNullSpace{Float64}},),arg1)
    return err
end

function MatNullSpaceRemove(arg1::MatNullSpace{Float64},arg2::Vec{Float64})
    err = ccall((:MatNullSpaceRemove,petscRealDouble),PetscErrorCode,(MatNullSpace{Float64},Vec{Float64}),arg1,arg2)
    return err
end

function MatGetNullSpace(arg1::Mat{Float64},arg2::Union{Ptr{MatNullSpace{Float64}},StridedArray{MatNullSpace{Float64}},Ptr{MatNullSpace{Float64}},Ref{MatNullSpace{Float64}}})
    err = ccall((:MatGetNullSpace,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{MatNullSpace{Float64}}),arg1,arg2)
    return err
end

function MatGetTransposeNullSpace(arg1::Mat{Float64},arg2::Union{Ptr{MatNullSpace{Float64}},StridedArray{MatNullSpace{Float64}},Ptr{MatNullSpace{Float64}},Ref{MatNullSpace{Float64}}})
    err = ccall((:MatGetTransposeNullSpace,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{MatNullSpace{Float64}}),arg1,arg2)
    return err
end

function MatSetTransposeNullSpace(arg1::Mat{Float64},arg2::MatNullSpace{Float64})
    err = ccall((:MatSetTransposeNullSpace,petscRealDouble),PetscErrorCode,(Mat{Float64},MatNullSpace{Float64}),arg1,arg2)
    return err
end

function MatSetNullSpace(arg1::Mat{Float64},arg2::MatNullSpace{Float64})
    err = ccall((:MatSetNullSpace,petscRealDouble),PetscErrorCode,(Mat{Float64},MatNullSpace{Float64}),arg1,arg2)
    return err
end

function MatSetNearNullSpace(arg1::Mat{Float64},arg2::MatNullSpace{Float64})
    err = ccall((:MatSetNearNullSpace,petscRealDouble),PetscErrorCode,(Mat{Float64},MatNullSpace{Float64}),arg1,arg2)
    return err
end

function MatGetNearNullSpace(arg1::Mat{Float64},arg2::Union{Ptr{MatNullSpace{Float64}},StridedArray{MatNullSpace{Float64}},Ptr{MatNullSpace{Float64}},Ref{MatNullSpace{Float64}}})
    err = ccall((:MatGetNearNullSpace,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{MatNullSpace{Float64}}),arg1,arg2)
    return err
end

function MatNullSpaceTest(arg1::MatNullSpace{Float64},arg2::Mat{Float64},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatNullSpaceTest,petscRealDouble),PetscErrorCode,(MatNullSpace{Float64},Mat{Float64},Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function MatNullSpaceView(arg1::MatNullSpace{Float64},arg2::PetscViewer{Float64})
    err = ccall((:MatNullSpaceView,petscRealDouble),PetscErrorCode,(MatNullSpace{Float64},PetscViewer{Float64}),arg1,arg2)
    return err
end

function MatNullSpaceGetVecs(arg1::MatNullSpace{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{Vec{Float64}}},StridedArray{Ptr{Vec{Float64}}},Ptr{Ptr{Vec{Float64}}},Ref{Ptr{Vec{Float64}}}})
    err = ccall((:MatNullSpaceGetVecs,petscRealDouble),PetscErrorCode,(MatNullSpace{Float64},Ptr{PetscBool},Ptr{Int64},Ptr{Ptr{Vec{Float64}}}),arg1,arg2,arg3,arg4)
    return err
end

function MatNullSpaceCreateRigidBody(arg1::Vec{Float64},arg2::Union{Ptr{MatNullSpace{Float64}},StridedArray{MatNullSpace{Float64}},Ptr{MatNullSpace{Float64}},Ref{MatNullSpace{Float64}}})
    err = ccall((:MatNullSpaceCreateRigidBody,petscRealDouble),PetscErrorCode,(Vec{Float64},Ptr{MatNullSpace{Float64}}),arg1,arg2)
    return err
end

function MatReorderingSeqSBAIJ(arg1::Mat{Float64},arg2::IS{Float64})
    err = ccall((:MatReorderingSeqSBAIJ,petscRealDouble),PetscErrorCode,(Mat{Float64},IS{Float64}),arg1,arg2)
    return err
end

function MatMPISBAIJSetHashTableFactor(arg1::Mat{Float64},arg2::Float64)
    err = ccall((:MatMPISBAIJSetHashTableFactor,petscRealDouble),PetscErrorCode,(Mat{Float64},Float64),arg1,arg2)
    return err
end

function MatSeqSBAIJSetColumnIndices(arg1::Mat{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatSeqSBAIJSetColumnIndices,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function MatSeqBAIJInvertBlockDiagonal(arg1::Mat{Float64})
    err = ccall((:MatSeqBAIJInvertBlockDiagonal,petscRealDouble),PetscErrorCode,(Mat{Float64},),arg1)
    return err
end

function MatCreateMAIJ(arg1::Mat{Float64},arg2::Integer,arg3::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatCreateMAIJ,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64,Ptr{Mat{Float64}}),arg1,arg2,arg3)
    return err
end

function MatMAIJRedimension(arg1::Mat{Float64},arg2::Integer,arg3::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatMAIJRedimension,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64,Ptr{Mat{Float64}}),arg1,arg2,arg3)
    return err
end

function MatMAIJGetAIJ(arg1::Mat{Float64},arg2::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatMAIJGetAIJ,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{Mat{Float64}}),arg1,arg2)
    return err
end

function MatComputeExplicitOperator(arg1::Mat{Float64},arg2::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatComputeExplicitOperator,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{Mat{Float64}}),arg1,arg2)
    return err
end

function MatDiagonalScaleLocal(arg1::Mat{Float64},arg2::Vec{Float64})
    err = ccall((:MatDiagonalScaleLocal,petscRealDouble),PetscErrorCode,(Mat{Float64},Vec{Float64}),arg1,arg2)
    return err
end

function MatCreateMFFD(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatCreateMFFD,petscRealDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatMFFDSetBase(arg1::Mat{Float64},arg2::Vec{Float64},arg3::Vec{Float64})
    err = ccall((:MatMFFDSetBase,petscRealDouble),PetscErrorCode,(Mat{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3)
    return err
end

function MatMFFDSetFunction(arg1::Mat{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatMFFDSetFunction,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function MatMFFDSetFunctioni(arg1::Mat{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatMFFDSetFunctioni,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function MatMFFDSetFunctioniBase(arg1::Mat{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatMFFDSetFunctioniBase,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function MatMFFDAddNullSpace(arg1::Mat{Float64},arg2::MatNullSpace{Float64})
    err = ccall((:MatMFFDAddNullSpace,petscRealDouble),PetscErrorCode,(Mat{Float64},MatNullSpace{Float64}),arg1,arg2)
    return err
end

function MatMFFDSetHHistory(arg1::Mat{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Integer)
    err = ccall((:MatMFFDSetHHistory,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{Float64},Int64),arg1,arg2,arg3)
    return err
end

function MatMFFDResetHHistory(arg1::Mat{Float64})
    err = ccall((:MatMFFDResetHHistory,petscRealDouble),PetscErrorCode,(Mat{Float64},),arg1)
    return err
end

function MatMFFDSetFunctionError(arg1::Mat{Float64},arg2::Float64)
    err = ccall((:MatMFFDSetFunctionError,petscRealDouble),PetscErrorCode,(Mat{Float64},Float64),arg1,arg2)
    return err
end

function MatMFFDSetPeriod(arg1::Mat{Float64},arg2::Integer)
    err = ccall((:MatMFFDSetPeriod,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64),arg1,arg2)
    return err
end

function MatMFFDGetH(arg1::Mat{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:MatMFFDGetH,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{Float64}),arg1,arg2)
    return err
end

function MatMFFDSetOptionsPrefix(arg1::Mat{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:MatMFFDSetOptionsPrefix,petscRealDouble),PetscErrorCode,(Mat{Float64},Cstring),arg1,arg2)
    return err
end

function MatMFFDCheckPositivity(arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg2::Vec{Float64},arg3::Vec{Float64},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:MatMFFDCheckPositivity,petscRealDouble),PetscErrorCode,(Ptr{Void},Vec{Float64},Vec{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function MatMFFDSetCheckh(arg1::Mat{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatMFFDSetCheckh,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function MatMFFDSetType(arg1::Mat{Float64},arg2::MatMFFDType)
    err = ccall((:MatMFFDSetType,petscRealDouble),PetscErrorCode,(Mat{Float64},MatMFFDType),arg1,arg2)
    return err
end

function MatMFFDRegister(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatMFFDRegister,petscRealDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function MatMFFDDSSetUmin(arg1::Mat{Float64},arg2::Float64)
    err = ccall((:MatMFFDDSSetUmin,petscRealDouble),PetscErrorCode,(Mat{Float64},Float64),arg1,arg2)
    return err
end

function MatMFFDWPSetComputeNormU(arg1::Mat{Float64},arg2::PetscBool)
    err = ccall((:MatMFFDWPSetComputeNormU,petscRealDouble),PetscErrorCode,(Mat{Float64},PetscBool),arg1,arg2)
    return err
end

function PetscViewerMathematicaPutMatrix(arg1::PetscViewer{Float64},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscViewerMathematicaPutMatrix,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Int64,Int64,Ptr{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function PetscViewerMathematicaPutCSRMatrix(arg1::PetscViewer{Float64},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscViewerMathematicaPutCSRMatrix,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},Int64,Int64,Ptr{Int64},Ptr{Int64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatCreateNest(arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}},arg4::Integer,arg5::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}},arg6::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}},arg7::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatCreateNest,petscRealDouble),PetscErrorCode,(comm_type,Int64,Ptr{IS{Float64}},Int64,Ptr{IS{Float64}},Ptr{Mat{Float64}},Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatNestGetSize(arg1::Mat{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatNestGetSize,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function MatNestGetISs(arg1::Mat{Float64},arg2::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}},arg3::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:MatNestGetISs,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{IS{Float64}},Ptr{IS{Float64}}),arg1,arg2,arg3)
    return err
end

function MatNestGetLocalISs(arg1::Mat{Float64},arg2::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}},arg3::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:MatNestGetLocalISs,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{IS{Float64}},Ptr{IS{Float64}}),arg1,arg2,arg3)
    return err
end

function MatNestGetSubMats(arg1::Mat{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{Ptr{Mat{Float64}}}},StridedArray{Ptr{Ptr{Mat{Float64}}}},Ptr{Ptr{Ptr{Mat{Float64}}}},Ref{Ptr{Ptr{Mat{Float64}}}}})
    err = ccall((:MatNestGetSubMats,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{Int64},Ptr{Int64},Ptr{Ptr{Ptr{Mat{Float64}}}}),arg1,arg2,arg3,arg4)
    return err
end

function MatNestGetSubMat(arg1::Mat{Float64},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatNestGetSubMat,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64,Int64,Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function MatNestSetVecType(arg1::Mat{Float64},arg2::VecType)
    err = ccall((:MatNestSetVecType,petscRealDouble),PetscErrorCode,(Mat{Float64},VecType),arg1,arg2)
    return err
end

function MatNestSetSubMats(arg1::Mat{Float64},arg2::Integer,arg3::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}},arg4::Integer,arg5::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}},arg6::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatNestSetSubMats,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64,Ptr{IS{Float64}},Int64,Ptr{IS{Float64}},Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatNestSetSubMat(arg1::Mat{Float64},arg2::Integer,arg3::Integer,arg4::Mat{Float64})
    err = ccall((:MatNestSetSubMat,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64,Int64,Mat{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function MatChop(arg1::Mat{Float64},arg2::Float64)
    err = ccall((:MatChop,petscRealDouble),PetscErrorCode,(Mat{Float64},Float64),arg1,arg2)
    return err
end

function MatComputeBandwidth(arg1::Mat{Float64},arg2::Float64,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatComputeBandwidth,petscRealDouble),PetscErrorCode,(Mat{Float64},Float64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function MatSubdomainsCreateCoalesce(arg1::Mat{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{IS{Float64}}},StridedArray{Ptr{IS{Float64}}},Ptr{Ptr{IS{Float64}}},Ref{Ptr{IS{Float64}}}})
    err = ccall((:MatSubdomainsCreateCoalesce,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64,Ptr{Int64},Ptr{Ptr{IS{Float64}}}),arg1,arg2,arg3,arg4)
    return err
end

function DMInitializePackage(arg0::Type{Float64})
    err = ccall((:DMInitializePackage,petscRealDouble),PetscErrorCode,())
    return err
end

function DMCreate(arg1::MPI_Comm,arg2::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:DMCreate,petscRealDouble),PetscErrorCode,(comm_type,Ptr{DM{Float64}}),arg1,arg2)
    return err
end

function DMClone(arg1::DM{Float64},arg2::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:DMClone,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{DM{Float64}}),arg1,arg2)
    return err
end

function DMSetType(arg1::DM{Float64},arg2::DMType)
    err = ccall((:DMSetType,petscRealDouble),PetscErrorCode,(DM{Float64},DMType),arg1,arg2)
    return err
end

function DMGetType(arg1::DM{Float64},arg2::Union{Ptr{DMType},StridedArray{DMType},Ptr{DMType},Ref{DMType}})
    err = ccall((:DMGetType,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{DMType}),arg1,arg2)
    return err
end

function DMRegister(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMRegister,petscRealDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function DMRegisterDestroy(arg0::Type{Float64})
    err = ccall((:DMRegisterDestroy,petscRealDouble),PetscErrorCode,())
    return err
end

function DMView(arg1::DM{Float64},arg2::PetscViewer{Float64})
    err = ccall((:DMView,petscRealDouble),PetscErrorCode,(DM{Float64},PetscViewer{Float64}),arg1,arg2)
    return err
end

function DMLoad(arg1::DM{Float64},arg2::PetscViewer{Float64})
    err = ccall((:DMLoad,petscRealDouble),PetscErrorCode,(DM{Float64},PetscViewer{Float64}),arg1,arg2)
    return err
end

function DMDestroy(arg1::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:DMDestroy,petscRealDouble),PetscErrorCode,(Ptr{DM{Float64}},),arg1)
    return err
end

function DMCreateGlobalVector(arg1::DM{Float64},arg2::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:DMCreateGlobalVector,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Vec{Float64}}),arg1,arg2)
    return err
end

function DMCreateLocalVector(arg1::DM{Float64},arg2::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:DMCreateLocalVector,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Vec{Float64}}),arg1,arg2)
    return err
end

function DMGetLocalVector(arg1::DM{Float64},arg2::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:DMGetLocalVector,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Vec{Float64}}),arg1,arg2)
    return err
end

function DMRestoreLocalVector(arg1::DM{Float64},arg2::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:DMRestoreLocalVector,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Vec{Float64}}),arg1,arg2)
    return err
end

function DMGetGlobalVector(arg1::DM{Float64},arg2::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:DMGetGlobalVector,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Vec{Float64}}),arg1,arg2)
    return err
end

function DMRestoreGlobalVector(arg1::DM{Float64},arg2::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:DMRestoreGlobalVector,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Vec{Float64}}),arg1,arg2)
    return err
end

function DMClearGlobalVectors(arg1::DM{Float64})
    err = ccall((:DMClearGlobalVectors,petscRealDouble),PetscErrorCode,(DM{Float64},),arg1)
    return err
end

function DMGetNamedGlobalVector(arg1::DM{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:DMGetNamedGlobalVector,petscRealDouble),PetscErrorCode,(DM{Float64},Cstring,Ptr{Vec{Float64}}),arg1,arg2,arg3)
    return err
end

function DMRestoreNamedGlobalVector(arg1::DM{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:DMRestoreNamedGlobalVector,petscRealDouble),PetscErrorCode,(DM{Float64},Cstring,Ptr{Vec{Float64}}),arg1,arg2,arg3)
    return err
end

function DMGetNamedLocalVector(arg1::DM{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:DMGetNamedLocalVector,petscRealDouble),PetscErrorCode,(DM{Float64},Cstring,Ptr{Vec{Float64}}),arg1,arg2,arg3)
    return err
end

function DMRestoreNamedLocalVector(arg1::DM{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:DMRestoreNamedLocalVector,petscRealDouble),PetscErrorCode,(DM{Float64},Cstring,Ptr{Vec{Float64}}),arg1,arg2,arg3)
    return err
end

function DMGetLocalToGlobalMapping(arg1::DM{Float64},arg2::Union{Ptr{ISLocalToGlobalMapping{Float64}},StridedArray{ISLocalToGlobalMapping{Float64}},Ptr{ISLocalToGlobalMapping{Float64}},Ref{ISLocalToGlobalMapping{Float64}}})
    err = ccall((:DMGetLocalToGlobalMapping,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{ISLocalToGlobalMapping{Float64}}),arg1,arg2)
    return err
end

function DMCreateFieldIS(arg1::DM{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}},arg4::Union{Ptr{Ptr{IS{Float64}}},StridedArray{Ptr{IS{Float64}}},Ptr{Ptr{IS{Float64}}},Ref{Ptr{IS{Float64}}}})
    err = ccall((:DMCreateFieldIS,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Int64},Ptr{Ptr{Ptr{UInt8}}},Ptr{Ptr{IS{Float64}}}),arg1,arg2,arg3,arg4)
    return err
end

function DMGetBlockSize(arg1::DM{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMGetBlockSize,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function DMCreateColoring(arg1::DM{Float64},arg2::ISColoringType,arg3::Union{Ptr{ISColoring{Float64}},StridedArray{ISColoring{Float64}},Ptr{ISColoring{Float64}},Ref{ISColoring{Float64}}})
    err = ccall((:DMCreateColoring,petscRealDouble),PetscErrorCode,(DM{Float64},ISColoringType,Ptr{ISColoring{Float64}}),arg1,arg2,arg3)
    return err
end

function DMCreateMatrix(arg1::DM{Float64},arg2::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:DMCreateMatrix,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Mat{Float64}}),arg1,arg2)
    return err
end

function DMSetMatrixPreallocateOnly(arg1::DM{Float64},arg2::PetscBool)
    err = ccall((:DMSetMatrixPreallocateOnly,petscRealDouble),PetscErrorCode,(DM{Float64},PetscBool),arg1,arg2)
    return err
end

function DMCreateInterpolation(arg1::DM{Float64},arg2::DM{Float64},arg3::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}},arg4::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:DMCreateInterpolation,petscRealDouble),PetscErrorCode,(DM{Float64},DM{Float64},Ptr{Mat{Float64}},Ptr{Vec{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function DMCreateInjection(arg1::DM{Float64},arg2::DM{Float64},arg3::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:DMCreateInjection,petscRealDouble),PetscErrorCode,(DM{Float64},DM{Float64},Ptr{Mat{Float64}}),arg1,arg2,arg3)
    return err
end

function DMGetWorkArray(arg1::DM{Float64},arg2::Integer,arg3::PetscDataType,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMGetWorkArray,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,PetscDataType,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function DMRestoreWorkArray(arg1::DM{Float64},arg2::Integer,arg3::PetscDataType,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMRestoreWorkArray,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,PetscDataType,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function DMRefine(arg1::DM{Float64},arg2::MPI_Comm,arg3::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:DMRefine,petscRealDouble),PetscErrorCode,(DM{Float64},comm_type,Ptr{DM{Float64}}),arg1,arg2,arg3)
    return err
end

function DMCoarsen(arg1::DM{Float64},arg2::MPI_Comm,arg3::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:DMCoarsen,petscRealDouble),PetscErrorCode,(DM{Float64},comm_type,Ptr{DM{Float64}}),arg1,arg2,arg3)
    return err
end

function DMRefineHierarchy(arg1::DM{Float64},arg2::Integer,arg3::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:DMRefineHierarchy,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Ptr{DM{Float64}}),arg1,arg2,arg3)
    return err
end

function DMCoarsenHierarchy(arg1::DM{Float64},arg2::Integer,arg3::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:DMCoarsenHierarchy,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Ptr{DM{Float64}}),arg1,arg2,arg3)
    return err
end

function DMCoarsenHookAdd(arg1::DM{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMCoarsenHookAdd,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function DMRefineHookAdd(arg1::DM{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMRefineHookAdd,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function DMRestrict(arg1::DM{Float64},arg2::Mat{Float64},arg3::Vec{Float64},arg4::Mat{Float64},arg5::DM{Float64})
    err = ccall((:DMRestrict,petscRealDouble),PetscErrorCode,(DM{Float64},Mat{Float64},Vec{Float64},Mat{Float64},DM{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMInterpolate(arg1::DM{Float64},arg2::Mat{Float64},arg3::DM{Float64})
    err = ccall((:DMInterpolate,petscRealDouble),PetscErrorCode,(DM{Float64},Mat{Float64},DM{Float64}),arg1,arg2,arg3)
    return err
end

function DMSetFromOptions(arg1::DM{Float64})
    err = ccall((:DMSetFromOptions,petscRealDouble),PetscErrorCode,(DM{Float64},),arg1)
    return err
end

function DMCreateInterpolationScale(arg1::DM{Float64},arg2::DM{Float64},arg3::Mat{Float64},arg4::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:DMCreateInterpolationScale,petscRealDouble),PetscErrorCode,(DM{Float64},DM{Float64},Mat{Float64},Ptr{Vec{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function DMCreateAggregates(arg1::DM{Float64},arg2::DM{Float64},arg3::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:DMCreateAggregates,petscRealDouble),PetscErrorCode,(DM{Float64},DM{Float64},Ptr{Mat{Float64}}),arg1,arg2,arg3)
    return err
end

function DMGlobalToLocalHookAdd(arg1::DM{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMGlobalToLocalHookAdd,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function DMLocalToGlobalHookAdd(arg1::DM{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMLocalToGlobalHookAdd,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function DMGlobalToLocalBegin(arg1::DM{Float64},arg2::Vec{Float64},arg3::InsertMode,arg4::Vec{Float64})
    err = ccall((:DMGlobalToLocalBegin,petscRealDouble),PetscErrorCode,(DM{Float64},Vec{Float64},InsertMode,Vec{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function DMGlobalToLocalEnd(arg1::DM{Float64},arg2::Vec{Float64},arg3::InsertMode,arg4::Vec{Float64})
    err = ccall((:DMGlobalToLocalEnd,petscRealDouble),PetscErrorCode,(DM{Float64},Vec{Float64},InsertMode,Vec{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function DMLocalToGlobalBegin(arg1::DM{Float64},arg2::Vec{Float64},arg3::InsertMode,arg4::Vec{Float64})
    err = ccall((:DMLocalToGlobalBegin,petscRealDouble),PetscErrorCode,(DM{Float64},Vec{Float64},InsertMode,Vec{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function DMLocalToGlobalEnd(arg1::DM{Float64},arg2::Vec{Float64},arg3::InsertMode,arg4::Vec{Float64})
    err = ccall((:DMLocalToGlobalEnd,petscRealDouble),PetscErrorCode,(DM{Float64},Vec{Float64},InsertMode,Vec{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function DMLocalToLocalBegin(arg1::DM{Float64},arg2::Vec{Float64},arg3::InsertMode,arg4::Vec{Float64})
    err = ccall((:DMLocalToLocalBegin,petscRealDouble),PetscErrorCode,(DM{Float64},Vec{Float64},InsertMode,Vec{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function DMLocalToLocalEnd(arg1::DM{Float64},arg2::Vec{Float64},arg3::InsertMode,arg4::Vec{Float64})
    err = ccall((:DMLocalToLocalEnd,petscRealDouble),PetscErrorCode,(DM{Float64},Vec{Float64},InsertMode,Vec{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function DMConvert(arg1::DM{Float64},arg2::DMType,arg3::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:DMConvert,petscRealDouble),PetscErrorCode,(DM{Float64},DMType,Ptr{DM{Float64}}),arg1,arg2,arg3)
    return err
end

function DMGetDimension(arg1::DM{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMGetDimension,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function DMSetDimension(arg1::DM{Float64},arg2::Integer)
    err = ccall((:DMSetDimension,petscRealDouble),PetscErrorCode,(DM{Float64},Int64),arg1,arg2)
    return err
end

function DMGetDimPoints(arg1::DM{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMGetDimPoints,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function DMGetCoordinateDM(arg1::DM{Float64},arg2::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:DMGetCoordinateDM,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{DM{Float64}}),arg1,arg2)
    return err
end

function DMSetCoordinateDM(arg1::DM{Float64},arg2::DM{Float64})
    err = ccall((:DMSetCoordinateDM,petscRealDouble),PetscErrorCode,(DM{Float64},DM{Float64}),arg1,arg2)
    return err
end

function DMGetCoordinateDim(arg1::DM{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMGetCoordinateDim,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function DMSetCoordinateDim(arg1::DM{Float64},arg2::Integer)
    err = ccall((:DMSetCoordinateDim,petscRealDouble),PetscErrorCode,(DM{Float64},Int64),arg1,arg2)
    return err
end

function DMGetCoordinateSection(arg1::DM{Float64},arg2::Union{Ptr{PetscSection{Float64}},StridedArray{PetscSection{Float64}},Ptr{PetscSection{Float64}},Ref{PetscSection{Float64}}})
    err = ccall((:DMGetCoordinateSection,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{PetscSection{Float64}}),arg1,arg2)
    return err
end

function DMSetCoordinateSection(arg1::DM{Float64},arg2::Integer,arg3::PetscSection{Float64})
    err = ccall((:DMSetCoordinateSection,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,PetscSection{Float64}),arg1,arg2,arg3)
    return err
end

function DMGetCoordinates(arg1::DM{Float64},arg2::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:DMGetCoordinates,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Vec{Float64}}),arg1,arg2)
    return err
end

function DMSetCoordinates(arg1::DM{Float64},arg2::Vec{Float64})
    err = ccall((:DMSetCoordinates,petscRealDouble),PetscErrorCode,(DM{Float64},Vec{Float64}),arg1,arg2)
    return err
end

function DMGetCoordinatesLocal(arg1::DM{Float64},arg2::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:DMGetCoordinatesLocal,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Vec{Float64}}),arg1,arg2)
    return err
end

function DMSetCoordinatesLocal(arg1::DM{Float64},arg2::Vec{Float64})
    err = ccall((:DMSetCoordinatesLocal,petscRealDouble),PetscErrorCode,(DM{Float64},Vec{Float64}),arg1,arg2)
    return err
end

function DMLocatePoints(arg1::DM{Float64},arg2::Vec{Float64},arg3::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:DMLocatePoints,petscRealDouble),PetscErrorCode,(DM{Float64},Vec{Float64},Ptr{IS{Float64}}),arg1,arg2,arg3)
    return err
end

function DMGetPeriodicity(arg1::DM{Float64},arg2::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg3::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg4::Union{Ptr{Ptr{DMBoundaryType}},StridedArray{Ptr{DMBoundaryType}},Ptr{Ptr{DMBoundaryType}},Ref{Ptr{DMBoundaryType}}})
    err = ccall((:DMGetPeriodicity,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Ptr{Float64}},Ptr{Ptr{Float64}},Ptr{Ptr{DMBoundaryType}}),arg1,arg2,arg3,arg4)
    return err
end

function DMSetPeriodicity(arg1::DM{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{DMBoundaryType},StridedArray{DMBoundaryType},Ptr{DMBoundaryType},Ref{DMBoundaryType}})
    err = ccall((:DMSetPeriodicity,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Float64},Ptr{Float64},Ptr{DMBoundaryType}),arg1,arg2,arg3,arg4)
    return err
end

function DMSubDomainHookAdd(arg1::DM{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMSubDomainHookAdd,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function DMSubDomainRestrict(arg1::DM{Float64},arg2::VecScatter{Float64},arg3::VecScatter{Float64},arg4::DM{Float64})
    err = ccall((:DMSubDomainRestrict,petscRealDouble),PetscErrorCode,(DM{Float64},VecScatter{Float64},VecScatter{Float64},DM{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function DMSetOptionsPrefix(arg1::DM{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:DMSetOptionsPrefix,petscRealDouble),PetscErrorCode,(DM{Float64},Cstring),arg1,arg2)
    return err
end

function DMSetVecType(arg1::DM{Float64},arg2::VecType)
    err = ccall((:DMSetVecType,petscRealDouble),PetscErrorCode,(DM{Float64},VecType),arg1,arg2)
    return err
end

function DMGetVecType(arg1::DM{Float64},arg2::Union{Ptr{VecType},StridedArray{VecType},Ptr{VecType},Ref{VecType}})
    err = ccall((:DMGetVecType,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{VecType}),arg1,arg2)
    return err
end

function DMSetMatType(arg1::DM{Float64},arg2::MatType)
    err = ccall((:DMSetMatType,petscRealDouble),PetscErrorCode,(DM{Float64},MatType),arg1,arg2)
    return err
end

function DMGetMatType(arg1::DM{Float64},arg2::Union{Ptr{MatType},StridedArray{MatType},Ptr{MatType},Ref{MatType}})
    err = ccall((:DMGetMatType,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{MatType}),arg1,arg2)
    return err
end

function DMSetApplicationContext(arg1::DM{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMSetApplicationContext,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function DMSetApplicationContextDestroy(arg1::DM{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMSetApplicationContextDestroy,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function DMGetApplicationContext(arg1::DM{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMGetApplicationContext,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function DMSetVariableBounds(arg1::DM{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMSetVariableBounds,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function DMHasVariableBounds(arg1::DM{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:DMHasVariableBounds,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function DMHasColoring(arg1::DM{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:DMHasColoring,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function DMComputeVariableBounds(arg1::DM{Float64},arg2::Vec{Float64},arg3::Vec{Float64})
    err = ccall((:DMComputeVariableBounds,petscRealDouble),PetscErrorCode,(DM{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3)
    return err
end

function DMCreateSubDM(arg1::DM{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}},arg5::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:DMCreateSubDM,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Ptr{Int64},Ptr{IS{Float64}},Ptr{DM{Float64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMCreateFieldDecomposition(arg1::DM{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}},arg4::Union{Ptr{Ptr{IS{Float64}}},StridedArray{Ptr{IS{Float64}}},Ptr{Ptr{IS{Float64}}},Ref{Ptr{IS{Float64}}}},arg5::Union{Ptr{Ptr{DM{Float64}}},StridedArray{Ptr{DM{Float64}}},Ptr{Ptr{DM{Float64}}},Ref{Ptr{DM{Float64}}}})
    err = ccall((:DMCreateFieldDecomposition,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Int64},Ptr{Ptr{Ptr{UInt8}}},Ptr{Ptr{IS{Float64}}},Ptr{Ptr{DM{Float64}}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMCreateDomainDecomposition(arg1::DM{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}},arg4::Union{Ptr{Ptr{IS{Float64}}},StridedArray{Ptr{IS{Float64}}},Ptr{Ptr{IS{Float64}}},Ref{Ptr{IS{Float64}}}},arg5::Union{Ptr{Ptr{IS{Float64}}},StridedArray{Ptr{IS{Float64}}},Ptr{Ptr{IS{Float64}}},Ref{Ptr{IS{Float64}}}},arg6::Union{Ptr{Ptr{DM{Float64}}},StridedArray{Ptr{DM{Float64}}},Ptr{Ptr{DM{Float64}}},Ref{Ptr{DM{Float64}}}})
    err = ccall((:DMCreateDomainDecomposition,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Int64},Ptr{Ptr{Ptr{UInt8}}},Ptr{Ptr{IS{Float64}}},Ptr{Ptr{IS{Float64}}},Ptr{Ptr{DM{Float64}}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMCreateDomainDecompositionScatters(arg1::DM{Float64},arg2::Integer,arg3::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}},arg4::Union{Ptr{Ptr{VecScatter{Float64}}},StridedArray{Ptr{VecScatter{Float64}}},Ptr{Ptr{VecScatter{Float64}}},Ref{Ptr{VecScatter{Float64}}}},arg5::Union{Ptr{Ptr{VecScatter{Float64}}},StridedArray{Ptr{VecScatter{Float64}}},Ptr{Ptr{VecScatter{Float64}}},Ref{Ptr{VecScatter{Float64}}}},arg6::Union{Ptr{Ptr{VecScatter{Float64}}},StridedArray{Ptr{VecScatter{Float64}}},Ptr{Ptr{VecScatter{Float64}}},Ref{Ptr{VecScatter{Float64}}}})
    err = ccall((:DMCreateDomainDecompositionScatters,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Ptr{DM{Float64}},Ptr{Ptr{VecScatter{Float64}}},Ptr{Ptr{VecScatter{Float64}}},Ptr{Ptr{VecScatter{Float64}}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMGetRefineLevel(arg1::DM{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMGetRefineLevel,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function DMGetCoarsenLevel(arg1::DM{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMGetCoarsenLevel,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function DMFinalizePackage(arg0::Type{Float64})
    err = ccall((:DMFinalizePackage,petscRealDouble),PetscErrorCode,())
    return err
end

function VecGetDM(arg1::Vec{Float64},arg2::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:VecGetDM,petscRealDouble),PetscErrorCode,(Vec{Float64},Ptr{DM{Float64}}),arg1,arg2)
    return err
end

function VecSetDM(arg1::Vec{Float64},arg2::DM{Float64})
    err = ccall((:VecSetDM,petscRealDouble),PetscErrorCode,(Vec{Float64},DM{Float64}),arg1,arg2)
    return err
end

function MatGetDM(arg1::Mat{Float64},arg2::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:MatGetDM,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{DM{Float64}}),arg1,arg2)
    return err
end

function MatSetDM(arg1::Mat{Float64},arg2::DM{Float64})
    err = ccall((:MatSetDM,petscRealDouble),PetscErrorCode,(Mat{Float64},DM{Float64}),arg1,arg2)
    return err
end

function DMPrintCellVector(arg0::Type{Float64},arg1::Integer,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer,arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:DMPrintCellVector,petscRealDouble),PetscErrorCode,(Int64,Cstring,Int64,Ptr{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function DMPrintCellMatrix(arg0::Type{Float64},arg1::Integer,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer,arg4::Integer,arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:DMPrintCellMatrix,petscRealDouble),PetscErrorCode,(Int64,Cstring,Int64,Int64,Ptr{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPrintLocalVec(arg1::DM{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Float64,arg4::Vec{Float64})
    err = ccall((:DMPrintLocalVec,petscRealDouble),PetscErrorCode,(DM{Float64},Cstring,Float64,Vec{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function DMGetDefaultSection(arg1::DM{Float64},arg2::Union{Ptr{PetscSection{Float64}},StridedArray{PetscSection{Float64}},Ptr{PetscSection{Float64}},Ref{PetscSection{Float64}}})
    err = ccall((:DMGetDefaultSection,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{PetscSection{Float64}}),arg1,arg2)
    return err
end

function DMSetDefaultSection(arg1::DM{Float64},arg2::PetscSection{Float64})
    err = ccall((:DMSetDefaultSection,petscRealDouble),PetscErrorCode,(DM{Float64},PetscSection{Float64}),arg1,arg2)
    return err
end

function DMGetDefaultConstraints(arg1::DM{Float64},arg2::Union{Ptr{PetscSection{Float64}},StridedArray{PetscSection{Float64}},Ptr{PetscSection{Float64}},Ref{PetscSection{Float64}}},arg3::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:DMGetDefaultConstraints,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{PetscSection{Float64}},Ptr{Mat{Float64}}),arg1,arg2,arg3)
    return err
end

function DMSetDefaultConstraints(arg1::DM{Float64},arg2::PetscSection{Float64},arg3::Mat{Float64})
    err = ccall((:DMSetDefaultConstraints,petscRealDouble),PetscErrorCode,(DM{Float64},PetscSection{Float64},Mat{Float64}),arg1,arg2,arg3)
    return err
end

function DMGetDefaultGlobalSection(arg1::DM{Float64},arg2::Union{Ptr{PetscSection{Float64}},StridedArray{PetscSection{Float64}},Ptr{PetscSection{Float64}},Ref{PetscSection{Float64}}})
    err = ccall((:DMGetDefaultGlobalSection,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{PetscSection{Float64}}),arg1,arg2)
    return err
end

function DMSetDefaultGlobalSection(arg1::DM{Float64},arg2::PetscSection{Float64})
    err = ccall((:DMSetDefaultGlobalSection,petscRealDouble),PetscErrorCode,(DM{Float64},PetscSection{Float64}),arg1,arg2)
    return err
end

function DMGetDefaultSF(arg1::DM{Float64},arg2::Union{Ptr{PetscSF{Float64}},StridedArray{PetscSF{Float64}},Ptr{PetscSF{Float64}},Ref{PetscSF{Float64}}})
    err = ccall((:DMGetDefaultSF,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{PetscSF{Float64}}),arg1,arg2)
    return err
end

function DMSetDefaultSF(arg1::DM{Float64},arg2::PetscSF{Float64})
    err = ccall((:DMSetDefaultSF,petscRealDouble),PetscErrorCode,(DM{Float64},PetscSF{Float64}),arg1,arg2)
    return err
end

function DMCreateDefaultSF(arg1::DM{Float64},arg2::PetscSection{Float64},arg3::PetscSection{Float64})
    err = ccall((:DMCreateDefaultSF,petscRealDouble),PetscErrorCode,(DM{Float64},PetscSection{Float64},PetscSection{Float64}),arg1,arg2,arg3)
    return err
end

function DMGetPointSF(arg1::DM{Float64},arg2::Union{Ptr{PetscSF{Float64}},StridedArray{PetscSF{Float64}},Ptr{PetscSF{Float64}},Ref{PetscSF{Float64}}})
    err = ccall((:DMGetPointSF,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{PetscSF{Float64}}),arg1,arg2)
    return err
end

function DMSetPointSF(arg1::DM{Float64},arg2::PetscSF{Float64})
    err = ccall((:DMSetPointSF,petscRealDouble),PetscErrorCode,(DM{Float64},PetscSF{Float64}),arg1,arg2)
    return err
end

function DMGetOutputDM(arg1::DM{Float64},arg2::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:DMGetOutputDM,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{DM{Float64}}),arg1,arg2)
    return err
end

function DMGetOutputSequenceNumber(arg1::DM{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:DMGetOutputSequenceNumber,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Int64},Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function DMSetOutputSequenceNumber(arg1::DM{Float64},arg2::Integer,arg3::Float64)
    err = ccall((:DMSetOutputSequenceNumber,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Float64),arg1,arg2,arg3)
    return err
end

function DMOutputSequenceLoad(arg1::DM{Float64},arg2::PetscViewer{Float64},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Integer,arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:DMOutputSequenceLoad,petscRealDouble),PetscErrorCode,(DM{Float64},PetscViewer{Float64},Cstring,Int64,Ptr{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMGetDS(arg1::DM{Float64},arg2::Union{Ptr{PetscDS{Float64}},StridedArray{PetscDS{Float64}},Ptr{PetscDS{Float64}},Ref{PetscDS{Float64}}})
    err = ccall((:DMGetDS,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{PetscDS{Float64}}),arg1,arg2)
    return err
end

function DMSetDS(arg1::DM{Float64},arg2::PetscDS{Float64})
    err = ccall((:DMSetDS,petscRealDouble),PetscErrorCode,(DM{Float64},PetscDS{Float64}),arg1,arg2)
    return err
end

function DMGetNumFields(arg1::DM{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMGetNumFields,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function DMSetNumFields(arg1::DM{Float64},arg2::Integer)
    err = ccall((:DMSetNumFields,petscRealDouble),PetscErrorCode,(DM{Float64},Int64),arg1,arg2)
    return err
end

function DMGetField(arg1::DM{Float64},arg2::Integer,arg3::Union{Ptr{PetscObject{Float64}},StridedArray{PetscObject{Float64}},Ptr{PetscObject{Float64}},Ref{PetscObject{Float64}}})
    err = ccall((:DMGetField,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Ptr{PetscObject{Float64}}),arg1,arg2,arg3)
    return err
end

function DMSetField(arg1::DM{Float64},arg2::Integer,arg3::PetscObject{Float64})
    err = ccall((:DMSetField,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,PetscObject{Float64}),arg1,arg2,arg3)
    return err
end

function DMInterpolationCreate(arg1::MPI_Comm,arg2::Union{Ptr{DMInterpolationInfo{Float64}},StridedArray{DMInterpolationInfo{Float64}},Ptr{DMInterpolationInfo{Float64}},Ref{DMInterpolationInfo{Float64}}})
    err = ccall((:DMInterpolationCreate,petscRealDouble),PetscErrorCode,(comm_type,Ptr{DMInterpolationInfo{Float64}}),arg1,arg2)
    return err
end

function DMInterpolationSetDim(arg1::DMInterpolationInfo{Float64},arg2::Integer)
    err = ccall((:DMInterpolationSetDim,petscRealDouble),PetscErrorCode,(DMInterpolationInfo{Float64},Int64),arg1,arg2)
    return err
end

function DMInterpolationGetDim(arg1::DMInterpolationInfo{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMInterpolationGetDim,petscRealDouble),PetscErrorCode,(DMInterpolationInfo{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function DMInterpolationSetDof(arg1::DMInterpolationInfo{Float64},arg2::Integer)
    err = ccall((:DMInterpolationSetDof,petscRealDouble),PetscErrorCode,(DMInterpolationInfo{Float64},Int64),arg1,arg2)
    return err
end

function DMInterpolationGetDof(arg1::DMInterpolationInfo{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMInterpolationGetDof,petscRealDouble),PetscErrorCode,(DMInterpolationInfo{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function DMInterpolationAddPoints(arg1::DMInterpolationInfo{Float64},arg2::Integer,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:DMInterpolationAddPoints,petscRealDouble),PetscErrorCode,(DMInterpolationInfo{Float64},Int64,Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function DMInterpolationSetUp(arg1::DMInterpolationInfo{Float64},arg2::DM{Float64},arg3::PetscBool)
    err = ccall((:DMInterpolationSetUp,petscRealDouble),PetscErrorCode,(DMInterpolationInfo{Float64},DM{Float64},PetscBool),arg1,arg2,arg3)
    return err
end

function DMInterpolationGetCoordinates(arg1::DMInterpolationInfo{Float64},arg2::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:DMInterpolationGetCoordinates,petscRealDouble),PetscErrorCode,(DMInterpolationInfo{Float64},Ptr{Vec{Float64}}),arg1,arg2)
    return err
end

function DMInterpolationGetVector(arg1::DMInterpolationInfo{Float64},arg2::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:DMInterpolationGetVector,petscRealDouble),PetscErrorCode,(DMInterpolationInfo{Float64},Ptr{Vec{Float64}}),arg1,arg2)
    return err
end

function DMInterpolationRestoreVector(arg1::DMInterpolationInfo{Float64},arg2::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:DMInterpolationRestoreVector,petscRealDouble),PetscErrorCode,(DMInterpolationInfo{Float64},Ptr{Vec{Float64}}),arg1,arg2)
    return err
end

function DMInterpolationEvaluate(arg1::DMInterpolationInfo{Float64},arg2::DM{Float64},arg3::Vec{Float64},arg4::Vec{Float64})
    err = ccall((:DMInterpolationEvaluate,petscRealDouble),PetscErrorCode,(DMInterpolationInfo{Float64},DM{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function DMInterpolationDestroy(arg1::Union{Ptr{DMInterpolationInfo{Float64}},StridedArray{DMInterpolationInfo{Float64}},Ptr{DMInterpolationInfo{Float64}},Ref{DMInterpolationInfo{Float64}}})
    err = ccall((:DMInterpolationDestroy,petscRealDouble),PetscErrorCode,(Ptr{DMInterpolationInfo{Float64}},),arg1)
    return err
end

function PFCreate(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Union{Ptr{PF{Float64}},StridedArray{PF{Float64}},Ptr{PF{Float64}},Ref{PF{Float64}}})
    err = ccall((:PFCreate,petscRealDouble),PetscErrorCode,(comm_type,Int64,Int64,Ptr{PF{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function PFSetType(arg1::PF{Float64},arg2::PFType,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PFSetType,petscRealDouble),PetscErrorCode,(PF{Float64},PFType,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function PFSet(arg1::PF{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PFSet,petscRealDouble),PetscErrorCode,(PF{Float64},Ptr{Void},Ptr{Void},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PFApply(arg1::PF{Float64},arg2::Integer,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PFApply,petscRealDouble),PetscErrorCode,(PF{Float64},Int64,Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function PFApplyVec(arg1::PF{Float64},arg2::Vec{Float64},arg3::Vec{Float64})
    err = ccall((:PFApplyVec,petscRealDouble),PetscErrorCode,(PF{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3)
    return err
end

function PFInitializePackage(arg0::Type{Float64})
    err = ccall((:PFInitializePackage,petscRealDouble),PetscErrorCode,())
    return err
end

function PFRegister(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PFRegister,petscRealDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function PFDestroy(arg1::Union{Ptr{PF{Float64}},StridedArray{PF{Float64}},Ptr{PF{Float64}},Ref{PF{Float64}}})
    err = ccall((:PFDestroy,petscRealDouble),PetscErrorCode,(Ptr{PF{Float64}},),arg1)
    return err
end

function PFSetFromOptions(arg1::PF{Float64})
    err = ccall((:PFSetFromOptions,petscRealDouble),PetscErrorCode,(PF{Float64},),arg1)
    return err
end

function PFGetType(arg1::PF{Float64},arg2::Union{Ptr{PFType},StridedArray{PFType},Ptr{PFType},Ref{PFType}})
    err = ccall((:PFGetType,petscRealDouble),PetscErrorCode,(PF{Float64},Ptr{PFType}),arg1,arg2)
    return err
end

function PFView(arg1::PF{Float64},arg2::PetscViewer{Float64})
    err = ccall((:PFView,petscRealDouble),PetscErrorCode,(PF{Float64},PetscViewer{Float64}),arg1,arg2)
    return err
end

function AOInitializePackage(arg0::Type{Float64})
    err = ccall((:AOInitializePackage,petscRealDouble),PetscErrorCode,())
    return err
end

function AOCreate(arg0::Type{Float64},arg1::MPI_Comm,arg2::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:AOCreate,petscRealDouble),PetscErrorCode,(comm_type,Ptr{Cint}),arg1,arg2)
    return err
end

function AOSetIS(arg0::Type{Float64})
    err = ccall((:AOSetIS,petscRealDouble),PetscErrorCode,())
    return err
end

function AOSetFromOptions(arg0::Type{Float64})
    err = ccall((:AOSetFromOptions,petscRealDouble),PetscErrorCode,())
    return err
end

function AOCreateBasic(arg0::Type{Float64},arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:AOCreateBasic,petscRealDouble),PetscErrorCode,(comm_type,Int64,Ptr{Int64},Ptr{Int64},Ptr{Cint}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function AOCreateBasicIS(arg1::IS{Float64},arg2::IS{Float64},arg3::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:AOCreateBasicIS,petscRealDouble),PetscErrorCode,(IS{Float64},IS{Float64},Ptr{Cint}),arg1,arg2,arg3)
    return err
end

function AOCreateMemoryScalable(arg0::Type{Float64},arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:AOCreateMemoryScalable,petscRealDouble),PetscErrorCode,(comm_type,Int64,Ptr{Int64},Ptr{Int64},Ptr{Cint}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function AOCreateMemoryScalableIS(arg1::IS{Float64},arg2::IS{Float64},arg3::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:AOCreateMemoryScalableIS,petscRealDouble),PetscErrorCode,(IS{Float64},IS{Float64},Ptr{Cint}),arg1,arg2,arg3)
    return err
end

function AOCreateMapping(arg0::Type{Float64},arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:AOCreateMapping,petscRealDouble),PetscErrorCode,(comm_type,Int64,Ptr{Int64},Ptr{Int64},Ptr{Cint}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function AOCreateMappingIS(arg1::IS{Float64},arg2::IS{Float64},arg3::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:AOCreateMappingIS,petscRealDouble),PetscErrorCode,(IS{Float64},IS{Float64},Ptr{Cint}),arg1,arg2,arg3)
    return err
end

function AOView(arg0::Type{Float64})
    err = ccall((:AOView,petscRealDouble),PetscErrorCode,())
    return err
end

function AOSetType(arg0::Type{Float64})
    err = ccall((:AOSetType,petscRealDouble),PetscErrorCode,())
    return err
end

function AOGetType(arg0::Type{Float64})
    err = ccall((:AOGetType,petscRealDouble),PetscErrorCode,())
    return err
end

function AORegister(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:AORegister,petscRealDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function AOPetscToApplication(arg0::Type{Float64})
    err = ccall((:AOPetscToApplication,petscRealDouble),PetscErrorCode,())
    return err
end

function AOApplicationToPetsc(arg0::Type{Float64})
    err = ccall((:AOApplicationToPetsc,petscRealDouble),PetscErrorCode,())
    return err
end

function AOPetscToApplicationIS(arg0::Type{Float64})
    err = ccall((:AOPetscToApplicationIS,petscRealDouble),PetscErrorCode,())
    return err
end

function AOApplicationToPetscIS(arg0::Type{Float64})
    err = ccall((:AOApplicationToPetscIS,petscRealDouble),PetscErrorCode,())
    return err
end

function AOPetscToApplicationPermuteInt(arg0::Type{Float64})
    err = ccall((:AOPetscToApplicationPermuteInt,petscRealDouble),PetscErrorCode,())
    return err
end

function AOApplicationToPetscPermuteInt(arg0::Type{Float64})
    err = ccall((:AOApplicationToPetscPermuteInt,petscRealDouble),PetscErrorCode,())
    return err
end

function AOPetscToApplicationPermuteReal(arg0::Type{Float64})
    err = ccall((:AOPetscToApplicationPermuteReal,petscRealDouble),PetscErrorCode,())
    return err
end

function AOApplicationToPetscPermuteReal(arg0::Type{Float64})
    err = ccall((:AOApplicationToPetscPermuteReal,petscRealDouble),PetscErrorCode,())
    return err
end

function AOMappingHasApplicationIndex(arg0::Type{Float64})
    err = ccall((:AOMappingHasApplicationIndex,petscRealDouble),PetscErrorCode,())
    return err
end

function AOMappingHasPetscIndex(arg0::Type{Float64})
    err = ccall((:AOMappingHasPetscIndex,petscRealDouble),PetscErrorCode,())
    return err
end

function PetscQuadratureCreate(arg1::MPI_Comm,arg2::Union{Ptr{PetscQuadrature{Float64}},StridedArray{PetscQuadrature{Float64}},Ptr{PetscQuadrature{Float64}},Ref{PetscQuadrature{Float64}}})
    err = ccall((:PetscQuadratureCreate,petscRealDouble),PetscErrorCode,(comm_type,Ptr{PetscQuadrature{Float64}}),arg1,arg2)
    return err
end

function PetscQuadratureDuplicate(arg1::PetscQuadrature{Float64},arg2::Union{Ptr{PetscQuadrature{Float64}},StridedArray{PetscQuadrature{Float64}},Ptr{PetscQuadrature{Float64}},Ref{PetscQuadrature{Float64}}})
    err = ccall((:PetscQuadratureDuplicate,petscRealDouble),PetscErrorCode,(PetscQuadrature{Float64},Ptr{PetscQuadrature{Float64}}),arg1,arg2)
    return err
end

function PetscQuadratureGetOrder(arg1::PetscQuadrature{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscQuadratureGetOrder,petscRealDouble),PetscErrorCode,(PetscQuadrature{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscQuadratureSetOrder(arg1::PetscQuadrature{Float64},arg2::Integer)
    err = ccall((:PetscQuadratureSetOrder,petscRealDouble),PetscErrorCode,(PetscQuadrature{Float64},Int64),arg1,arg2)
    return err
end

function PetscQuadratureGetData(arg1::PetscQuadrature{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg5::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:PetscQuadratureGetData,petscRealDouble),PetscErrorCode,(PetscQuadrature{Float64},Ptr{Int64},Ptr{Int64},Ptr{Ptr{Float64}},Ptr{Ptr{Float64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscQuadratureSetData(arg1::PetscQuadrature{Float64},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscQuadratureSetData,petscRealDouble),PetscErrorCode,(PetscQuadrature{Float64},Int64,Int64,Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscQuadratureView(arg1::PetscQuadrature{Float64},arg2::PetscViewer{Float64})
    err = ccall((:PetscQuadratureView,petscRealDouble),PetscErrorCode,(PetscQuadrature{Float64},PetscViewer{Float64}),arg1,arg2)
    return err
end

function PetscQuadratureDestroy(arg1::Union{Ptr{PetscQuadrature{Float64}},StridedArray{PetscQuadrature{Float64}},Ptr{PetscQuadrature{Float64}},Ref{PetscQuadrature{Float64}}})
    err = ccall((:PetscQuadratureDestroy,petscRealDouble),PetscErrorCode,(Ptr{PetscQuadrature{Float64}},),arg1)
    return err
end

function PetscQuadratureExpandComposite(arg1::PetscQuadrature{Float64},arg2::Integer,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{PetscQuadrature{Float64}},StridedArray{PetscQuadrature{Float64}},Ptr{PetscQuadrature{Float64}},Ref{PetscQuadrature{Float64}}})
    err = ccall((:PetscQuadratureExpandComposite,petscRealDouble),PetscErrorCode,(PetscQuadrature{Float64},Int64,Ptr{Float64},Ptr{Float64},Ptr{PetscQuadrature{Float64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDTLegendreEval(arg0::Type{Float64},arg1::Integer,arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg7::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscDTLegendreEval,petscRealDouble),PetscErrorCode,(Int64,Ptr{Float64},Int64,Ptr{Int64},Ptr{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function PetscDTGaussQuadrature(arg0::Type{Float64},arg1::Integer,arg2::Float64,arg3::Float64,arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscDTGaussQuadrature,petscRealDouble),PetscErrorCode,(Int64,Float64,Float64,Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDTReconstructPoly(arg0::Type{Float64},arg1::Integer,arg2::Integer,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Integer,arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscDTReconstructPoly,petscRealDouble),PetscErrorCode,(Int64,Int64,Ptr{Float64},Int64,Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscDTGaussTensorQuadrature(arg1::Integer,arg2::Integer,arg3::Float64,arg4::Float64,arg5::Union{Ptr{PetscQuadrature{Float64}},StridedArray{PetscQuadrature{Float64}},Ptr{PetscQuadrature{Float64}},Ref{PetscQuadrature{Float64}}})
    err = ccall((:PetscDTGaussTensorQuadrature,petscRealDouble),PetscErrorCode,(Int64,Int64,Float64,Float64,Ptr{PetscQuadrature{Float64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDTGaussJacobiQuadrature(arg1::Integer,arg2::Integer,arg3::Float64,arg4::Float64,arg5::Union{Ptr{PetscQuadrature{Float64}},StridedArray{PetscQuadrature{Float64}},Ptr{PetscQuadrature{Float64}},Ref{PetscQuadrature{Float64}}})
    err = ccall((:PetscDTGaussJacobiQuadrature,petscRealDouble),PetscErrorCode,(Int64,Int64,Float64,Float64,Ptr{PetscQuadrature{Float64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscFEInitializePackage(arg0::Type{Float64})
    err = ccall((:PetscFEInitializePackage,petscRealDouble),PetscErrorCode,())
    return err
end

function PetscSpaceCreate(arg1::MPI_Comm,arg2::Union{Ptr{PetscSpace{Float64}},StridedArray{PetscSpace{Float64}},Ptr{PetscSpace{Float64}},Ref{PetscSpace{Float64}}})
    err = ccall((:PetscSpaceCreate,petscRealDouble),PetscErrorCode,(comm_type,Ptr{PetscSpace{Float64}}),arg1,arg2)
    return err
end

function PetscSpaceDestroy(arg1::Union{Ptr{PetscSpace{Float64}},StridedArray{PetscSpace{Float64}},Ptr{PetscSpace{Float64}},Ref{PetscSpace{Float64}}})
    err = ccall((:PetscSpaceDestroy,petscRealDouble),PetscErrorCode,(Ptr{PetscSpace{Float64}},),arg1)
    return err
end

function PetscSpaceSetType(arg1::PetscSpace{Float64},arg2::PetscSpaceType)
    err = ccall((:PetscSpaceSetType,petscRealDouble),PetscErrorCode,(PetscSpace{Float64},PetscSpaceType),arg1,arg2)
    return err
end

function PetscSpaceGetType(arg1::PetscSpace{Float64},arg2::Union{Ptr{PetscSpaceType},StridedArray{PetscSpaceType},Ptr{PetscSpaceType},Ref{PetscSpaceType}})
    err = ccall((:PetscSpaceGetType,petscRealDouble),PetscErrorCode,(PetscSpace{Float64},Ptr{PetscSpaceType}),arg1,arg2)
    return err
end

function PetscSpaceSetUp(arg1::PetscSpace{Float64})
    err = ccall((:PetscSpaceSetUp,petscRealDouble),PetscErrorCode,(PetscSpace{Float64},),arg1)
    return err
end

function PetscSpaceSetFromOptions(arg1::PetscSpace{Float64})
    err = ccall((:PetscSpaceSetFromOptions,petscRealDouble),PetscErrorCode,(PetscSpace{Float64},),arg1)
    return err
end

function PetscSpaceRegister(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscSpaceRegister,petscRealDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function PetscSpaceRegisterDestroy(arg0::Type{Float64})
    err = ccall((:PetscSpaceRegisterDestroy,petscRealDouble),PetscErrorCode,())
    return err
end

function PetscSpaceGetDimension(arg1::PetscSpace{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSpaceGetDimension,petscRealDouble),PetscErrorCode,(PetscSpace{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscSpaceSetOrder(arg1::PetscSpace{Float64},arg2::Integer)
    err = ccall((:PetscSpaceSetOrder,petscRealDouble),PetscErrorCode,(PetscSpace{Float64},Int64),arg1,arg2)
    return err
end

function PetscSpaceGetOrder(arg1::PetscSpace{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSpaceGetOrder,petscRealDouble),PetscErrorCode,(PetscSpace{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscSpaceEvaluate(arg1::PetscSpace{Float64},arg2::Integer,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscSpaceEvaluate,petscRealDouble),PetscErrorCode,(PetscSpace{Float64},Int64,Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscSpacePolynomialSetNumVariables(arg1::PetscSpace{Float64},arg2::Integer)
    err = ccall((:PetscSpacePolynomialSetNumVariables,petscRealDouble),PetscErrorCode,(PetscSpace{Float64},Int64),arg1,arg2)
    return err
end

function PetscSpacePolynomialGetNumVariables(arg1::PetscSpace{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSpacePolynomialGetNumVariables,petscRealDouble),PetscErrorCode,(PetscSpace{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscSpacePolynomialSetSymmetric(arg1::PetscSpace{Float64},arg2::PetscBool)
    err = ccall((:PetscSpacePolynomialSetSymmetric,petscRealDouble),PetscErrorCode,(PetscSpace{Float64},PetscBool),arg1,arg2)
    return err
end

function PetscSpacePolynomialGetSymmetric(arg1::PetscSpace{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscSpacePolynomialGetSymmetric,petscRealDouble),PetscErrorCode,(PetscSpace{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscSpacePolynomialSetTensor(arg1::PetscSpace{Float64},arg2::PetscBool)
    err = ccall((:PetscSpacePolynomialSetTensor,petscRealDouble),PetscErrorCode,(PetscSpace{Float64},PetscBool),arg1,arg2)
    return err
end

function PetscSpacePolynomialGetTensor(arg1::PetscSpace{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscSpacePolynomialGetTensor,petscRealDouble),PetscErrorCode,(PetscSpace{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscSpaceDGSetQuadrature(arg1::PetscSpace{Float64},arg2::PetscQuadrature{Float64})
    err = ccall((:PetscSpaceDGSetQuadrature,petscRealDouble),PetscErrorCode,(PetscSpace{Float64},PetscQuadrature{Float64}),arg1,arg2)
    return err
end

function PetscSpaceDGGetQuadrature(arg1::PetscSpace{Float64},arg2::Union{Ptr{PetscQuadrature{Float64}},StridedArray{PetscQuadrature{Float64}},Ptr{PetscQuadrature{Float64}},Ref{PetscQuadrature{Float64}}})
    err = ccall((:PetscSpaceDGGetQuadrature,petscRealDouble),PetscErrorCode,(PetscSpace{Float64},Ptr{PetscQuadrature{Float64}}),arg1,arg2)
    return err
end

function PetscDualSpaceCreate(arg1::MPI_Comm,arg2::Union{Ptr{PetscDualSpace{Float64}},StridedArray{PetscDualSpace{Float64}},Ptr{PetscDualSpace{Float64}},Ref{PetscDualSpace{Float64}}})
    err = ccall((:PetscDualSpaceCreate,petscRealDouble),PetscErrorCode,(comm_type,Ptr{PetscDualSpace{Float64}}),arg1,arg2)
    return err
end

function PetscDualSpaceDestroy(arg1::Union{Ptr{PetscDualSpace{Float64}},StridedArray{PetscDualSpace{Float64}},Ptr{PetscDualSpace{Float64}},Ref{PetscDualSpace{Float64}}})
    err = ccall((:PetscDualSpaceDestroy,petscRealDouble),PetscErrorCode,(Ptr{PetscDualSpace{Float64}},),arg1)
    return err
end

function PetscDualSpaceDuplicate(arg1::PetscDualSpace{Float64},arg2::Union{Ptr{PetscDualSpace{Float64}},StridedArray{PetscDualSpace{Float64}},Ptr{PetscDualSpace{Float64}},Ref{PetscDualSpace{Float64}}})
    err = ccall((:PetscDualSpaceDuplicate,petscRealDouble),PetscErrorCode,(PetscDualSpace{Float64},Ptr{PetscDualSpace{Float64}}),arg1,arg2)
    return err
end

function PetscDualSpaceSetType(arg1::PetscDualSpace{Float64},arg2::PetscDualSpaceType)
    err = ccall((:PetscDualSpaceSetType,petscRealDouble),PetscErrorCode,(PetscDualSpace{Float64},PetscDualSpaceType),arg1,arg2)
    return err
end

function PetscDualSpaceGetType(arg1::PetscDualSpace{Float64},arg2::Union{Ptr{PetscDualSpaceType},StridedArray{PetscDualSpaceType},Ptr{PetscDualSpaceType},Ref{PetscDualSpaceType}})
    err = ccall((:PetscDualSpaceGetType,petscRealDouble),PetscErrorCode,(PetscDualSpace{Float64},Ptr{PetscDualSpaceType}),arg1,arg2)
    return err
end

function PetscDualSpaceSetUp(arg1::PetscDualSpace{Float64})
    err = ccall((:PetscDualSpaceSetUp,petscRealDouble),PetscErrorCode,(PetscDualSpace{Float64},),arg1)
    return err
end

function PetscDualSpaceSetFromOptions(arg1::PetscDualSpace{Float64})
    err = ccall((:PetscDualSpaceSetFromOptions,petscRealDouble),PetscErrorCode,(PetscDualSpace{Float64},),arg1)
    return err
end

function PetscDualSpaceRegister(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscDualSpaceRegister,petscRealDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function PetscDualSpaceRegisterDestroy(arg0::Type{Float64})
    err = ccall((:PetscDualSpaceRegisterDestroy,petscRealDouble),PetscErrorCode,())
    return err
end

function PetscDualSpaceGetDimension(arg1::PetscDualSpace{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscDualSpaceGetDimension,petscRealDouble),PetscErrorCode,(PetscDualSpace{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscDualSpaceSetOrder(arg1::PetscDualSpace{Float64},arg2::Integer)
    err = ccall((:PetscDualSpaceSetOrder,petscRealDouble),PetscErrorCode,(PetscDualSpace{Float64},Int64),arg1,arg2)
    return err
end

function PetscDualSpaceGetOrder(arg1::PetscDualSpace{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscDualSpaceGetOrder,petscRealDouble),PetscErrorCode,(PetscDualSpace{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscDualSpaceSetDM(arg1::PetscDualSpace{Float64},arg2::DM{Float64})
    err = ccall((:PetscDualSpaceSetDM,petscRealDouble),PetscErrorCode,(PetscDualSpace{Float64},DM{Float64}),arg1,arg2)
    return err
end

function PetscDualSpaceGetDM(arg1::PetscDualSpace{Float64},arg2::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:PetscDualSpaceGetDM,petscRealDouble),PetscErrorCode,(PetscDualSpace{Float64},Ptr{DM{Float64}}),arg1,arg2)
    return err
end

function PetscDualSpaceGetFunctional(arg1::PetscDualSpace{Float64},arg2::Integer,arg3::Union{Ptr{PetscQuadrature{Float64}},StridedArray{PetscQuadrature{Float64}},Ptr{PetscQuadrature{Float64}},Ref{PetscQuadrature{Float64}}})
    err = ccall((:PetscDualSpaceGetFunctional,petscRealDouble),PetscErrorCode,(PetscDualSpace{Float64},Int64,Ptr{PetscQuadrature{Float64}}),arg1,arg2,arg3)
    return err
end

function PetscDualSpaceCreateReferenceCell(arg1::PetscDualSpace{Float64},arg2::Integer,arg3::PetscBool,arg4::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:PetscDualSpaceCreateReferenceCell,petscRealDouble),PetscErrorCode,(PetscDualSpace{Float64},Int64,PetscBool,Ptr{DM{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscDualSpaceApply(arg1::PetscDualSpace{Float64},arg2::Integer,arg3::Union{Ptr{PetscFECellGeom},StridedArray{PetscFECellGeom},Ptr{PetscFECellGeom},Ref{PetscFECellGeom}},arg4::Integer,arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg7::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscDualSpaceApply,petscRealDouble),PetscErrorCode,(PetscDualSpace{Float64},Int64,Ptr{PetscFECellGeom},Int64,Ptr{Void},Ptr{Void},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function PetscDualSpaceLagrangeGetContinuity(arg1::PetscDualSpace{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscDualSpaceLagrangeGetContinuity,petscRealDouble),PetscErrorCode,(PetscDualSpace{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscDualSpaceLagrangeSetContinuity(arg1::PetscDualSpace{Float64},arg2::PetscBool)
    err = ccall((:PetscDualSpaceLagrangeSetContinuity,petscRealDouble),PetscErrorCode,(PetscDualSpace{Float64},PetscBool),arg1,arg2)
    return err
end

function PetscDualSpaceGetHeightSubspace(arg1::PetscDualSpace{Float64},arg2::Integer,arg3::Union{Ptr{PetscDualSpace{Float64}},StridedArray{PetscDualSpace{Float64}},Ptr{PetscDualSpace{Float64}},Ref{PetscDualSpace{Float64}}})
    err = ccall((:PetscDualSpaceGetHeightSubspace,petscRealDouble),PetscErrorCode,(PetscDualSpace{Float64},Int64,Ptr{PetscDualSpace{Float64}}),arg1,arg2,arg3)
    return err
end

function PetscDualSpaceSimpleSetDimension(arg1::PetscDualSpace{Float64},arg2::Integer)
    err = ccall((:PetscDualSpaceSimpleSetDimension,petscRealDouble),PetscErrorCode,(PetscDualSpace{Float64},Int64),arg1,arg2)
    return err
end

function PetscDualSpaceSimpleSetFunctional(arg1::PetscDualSpace{Float64},arg2::Integer,arg3::PetscQuadrature{Float64})
    err = ccall((:PetscDualSpaceSimpleSetFunctional,petscRealDouble),PetscErrorCode,(PetscDualSpace{Float64},Int64,PetscQuadrature{Float64}),arg1,arg2,arg3)
    return err
end

function PetscFECreate(arg1::MPI_Comm,arg2::Union{Ptr{PetscFE{Float64}},StridedArray{PetscFE{Float64}},Ptr{PetscFE{Float64}},Ref{PetscFE{Float64}}})
    err = ccall((:PetscFECreate,petscRealDouble),PetscErrorCode,(comm_type,Ptr{PetscFE{Float64}}),arg1,arg2)
    return err
end

function PetscFEDestroy(arg1::Union{Ptr{PetscFE{Float64}},StridedArray{PetscFE{Float64}},Ptr{PetscFE{Float64}},Ref{PetscFE{Float64}}})
    err = ccall((:PetscFEDestroy,petscRealDouble),PetscErrorCode,(Ptr{PetscFE{Float64}},),arg1)
    return err
end

function PetscFESetType(arg1::PetscFE{Float64},arg2::PetscFEType)
    err = ccall((:PetscFESetType,petscRealDouble),PetscErrorCode,(PetscFE{Float64},PetscFEType),arg1,arg2)
    return err
end

function PetscFEGetType(arg1::PetscFE{Float64},arg2::Union{Ptr{PetscFEType},StridedArray{PetscFEType},Ptr{PetscFEType},Ref{PetscFEType}})
    err = ccall((:PetscFEGetType,petscRealDouble),PetscErrorCode,(PetscFE{Float64},Ptr{PetscFEType}),arg1,arg2)
    return err
end

function PetscFESetUp(arg1::PetscFE{Float64})
    err = ccall((:PetscFESetUp,petscRealDouble),PetscErrorCode,(PetscFE{Float64},),arg1)
    return err
end

function PetscFESetFromOptions(arg1::PetscFE{Float64})
    err = ccall((:PetscFESetFromOptions,petscRealDouble),PetscErrorCode,(PetscFE{Float64},),arg1)
    return err
end

function PetscFERegister(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscFERegister,petscRealDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function PetscFERegisterDestroy(arg0::Type{Float64})
    err = ccall((:PetscFERegisterDestroy,petscRealDouble),PetscErrorCode,())
    return err
end

function PetscFECreateDefault(arg1::DM{Float64},arg2::Integer,arg3::Integer,arg4::PetscBool,arg5::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg6::Integer,arg7::Union{Ptr{PetscFE{Float64}},StridedArray{PetscFE{Float64}},Ptr{PetscFE{Float64}},Ref{PetscFE{Float64}}})
    err = ccall((:PetscFECreateDefault,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Int64,PetscBool,Cstring,Int64,Ptr{PetscFE{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function PetscFEGetDimension(arg1::PetscFE{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscFEGetDimension,petscRealDouble),PetscErrorCode,(PetscFE{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscFEGetSpatialDimension(arg1::PetscFE{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscFEGetSpatialDimension,petscRealDouble),PetscErrorCode,(PetscFE{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscFESetNumComponents(arg1::PetscFE{Float64},arg2::Integer)
    err = ccall((:PetscFESetNumComponents,petscRealDouble),PetscErrorCode,(PetscFE{Float64},Int64),arg1,arg2)
    return err
end

function PetscFEGetNumComponents(arg1::PetscFE{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscFEGetNumComponents,petscRealDouble),PetscErrorCode,(PetscFE{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscFEGetTileSizes(arg1::PetscFE{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscFEGetTileSizes,petscRealDouble),PetscErrorCode,(PetscFE{Float64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscFESetTileSizes(arg1::PetscFE{Float64},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer)
    err = ccall((:PetscFESetTileSizes,petscRealDouble),PetscErrorCode,(PetscFE{Float64},Int64,Int64,Int64,Int64),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscFESetBasisSpace(arg1::PetscFE{Float64},arg2::PetscSpace{Float64})
    err = ccall((:PetscFESetBasisSpace,petscRealDouble),PetscErrorCode,(PetscFE{Float64},PetscSpace{Float64}),arg1,arg2)
    return err
end

function PetscFEGetBasisSpace(arg1::PetscFE{Float64},arg2::Union{Ptr{PetscSpace{Float64}},StridedArray{PetscSpace{Float64}},Ptr{PetscSpace{Float64}},Ref{PetscSpace{Float64}}})
    err = ccall((:PetscFEGetBasisSpace,petscRealDouble),PetscErrorCode,(PetscFE{Float64},Ptr{PetscSpace{Float64}}),arg1,arg2)
    return err
end

function PetscFESetDualSpace(arg1::PetscFE{Float64},arg2::PetscDualSpace{Float64})
    err = ccall((:PetscFESetDualSpace,petscRealDouble),PetscErrorCode,(PetscFE{Float64},PetscDualSpace{Float64}),arg1,arg2)
    return err
end

function PetscFEGetDualSpace(arg1::PetscFE{Float64},arg2::Union{Ptr{PetscDualSpace{Float64}},StridedArray{PetscDualSpace{Float64}},Ptr{PetscDualSpace{Float64}},Ref{PetscDualSpace{Float64}}})
    err = ccall((:PetscFEGetDualSpace,petscRealDouble),PetscErrorCode,(PetscFE{Float64},Ptr{PetscDualSpace{Float64}}),arg1,arg2)
    return err
end

function PetscFESetQuadrature(arg1::PetscFE{Float64},arg2::PetscQuadrature{Float64})
    err = ccall((:PetscFESetQuadrature,petscRealDouble),PetscErrorCode,(PetscFE{Float64},PetscQuadrature{Float64}),arg1,arg2)
    return err
end

function PetscFEGetQuadrature(arg1::PetscFE{Float64},arg2::Union{Ptr{PetscQuadrature{Float64}},StridedArray{PetscQuadrature{Float64}},Ptr{PetscQuadrature{Float64}},Ref{PetscQuadrature{Float64}}})
    err = ccall((:PetscFEGetQuadrature,petscRealDouble),PetscErrorCode,(PetscFE{Float64},Ptr{PetscQuadrature{Float64}}),arg1,arg2)
    return err
end

function PetscFEGetNumDof(arg1::PetscFE{Float64},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:PetscFEGetNumDof,petscRealDouble),PetscErrorCode,(PetscFE{Float64},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function PetscFEGetDefaultTabulation(arg1::PetscFE{Float64},arg2::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg3::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg4::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:PetscFEGetDefaultTabulation,petscRealDouble),PetscErrorCode,(PetscFE{Float64},Ptr{Ptr{Float64}},Ptr{Ptr{Float64}},Ptr{Ptr{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscFEGetFaceTabulation(arg1::PetscFE{Float64},arg2::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:PetscFEGetFaceTabulation,petscRealDouble),PetscErrorCode,(PetscFE{Float64},Ptr{Ptr{Float64}}),arg1,arg2)
    return err
end

function PetscFEGetTabulation(arg1::PetscFE{Float64},arg2::Integer,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg5::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg6::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:PetscFEGetTabulation,petscRealDouble),PetscErrorCode,(PetscFE{Float64},Int64,Ptr{Float64},Ptr{Ptr{Float64}},Ptr{Ptr{Float64}},Ptr{Ptr{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscFERestoreTabulation(arg1::PetscFE{Float64},arg2::Integer,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg5::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg6::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:PetscFERestoreTabulation,petscRealDouble),PetscErrorCode,(PetscFE{Float64},Int64,Ptr{Float64},Ptr{Ptr{Float64}},Ptr{Ptr{Float64}},Ptr{Ptr{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscFERefine(arg1::PetscFE{Float64},arg2::Union{Ptr{PetscFE{Float64}},StridedArray{PetscFE{Float64}},Ptr{PetscFE{Float64}},Ref{PetscFE{Float64}}})
    err = ccall((:PetscFERefine,petscRealDouble),PetscErrorCode,(PetscFE{Float64},Ptr{PetscFE{Float64}}),arg1,arg2)
    return err
end

function PetscFEIntegrate(arg1::PetscFE{Float64},arg2::PetscDS{Float64},arg3::Integer,arg4::Integer,arg5::Union{Ptr{PetscFECellGeom},StridedArray{PetscFECellGeom},Ptr{PetscFECellGeom},Ref{PetscFECellGeom}},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg7::PetscDS{Float64},arg8::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg9::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscFEIntegrate,petscRealDouble),PetscErrorCode,(PetscFE{Float64},PetscDS{Float64},Int64,Int64,Ptr{PetscFECellGeom},Ptr{Float64},PetscDS{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
    return err
end

function PetscFEIntegrateResidual(arg1::PetscFE{Float64},arg2::PetscDS{Float64},arg3::Integer,arg4::Integer,arg5::Union{Ptr{PetscFECellGeom},StridedArray{PetscFECellGeom},Ptr{PetscFECellGeom},Ref{PetscFECellGeom}},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg7::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg8::PetscDS{Float64},arg9::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg10::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscFEIntegrateResidual,petscRealDouble),PetscErrorCode,(PetscFE{Float64},PetscDS{Float64},Int64,Int64,Ptr{PetscFECellGeom},Ptr{Float64},Ptr{Float64},PetscDS{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function PetscFEIntegrateBdResidual(arg1::PetscFE{Float64},arg2::PetscDS{Float64},arg3::Integer,arg4::Integer,arg5::Union{Ptr{PetscFECellGeom},StridedArray{PetscFECellGeom},Ptr{PetscFECellGeom},Ref{PetscFECellGeom}},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg7::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg8::PetscDS{Float64},arg9::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg10::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscFEIntegrateBdResidual,petscRealDouble),PetscErrorCode,(PetscFE{Float64},PetscDS{Float64},Int64,Int64,Ptr{PetscFECellGeom},Ptr{Float64},Ptr{Float64},PetscDS{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function PetscFEIntegrateJacobian(arg1::PetscFE{Float64},arg2::PetscDS{Float64},arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{PetscFECellGeom},StridedArray{PetscFECellGeom},Ptr{PetscFECellGeom},Ref{PetscFECellGeom}},arg7::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg8::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg9::PetscDS{Float64},arg10::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg11::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscFEIntegrateJacobian,petscRealDouble),PetscErrorCode,(PetscFE{Float64},PetscDS{Float64},Int64,Int64,Int64,Ptr{PetscFECellGeom},Ptr{Float64},Ptr{Float64},PetscDS{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11)
    return err
end

function PetscFEIntegrateBdJacobian(arg1::PetscFE{Float64},arg2::PetscDS{Float64},arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{PetscFECellGeom},StridedArray{PetscFECellGeom},Ptr{PetscFECellGeom},Ref{PetscFECellGeom}},arg7::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg8::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg9::PetscDS{Float64},arg10::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg11::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscFEIntegrateBdJacobian,petscRealDouble),PetscErrorCode,(PetscFE{Float64},PetscDS{Float64},Int64,Int64,Int64,Ptr{PetscFECellGeom},Ptr{Float64},Ptr{Float64},PetscDS{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11)
    return err
end

function PetscFECompositeGetMapping(arg1::PetscFE{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg4::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg5::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:PetscFECompositeGetMapping,petscRealDouble),PetscErrorCode,(PetscFE{Float64},Ptr{Int64},Ptr{Ptr{Float64}},Ptr{Ptr{Float64}},Ptr{Ptr{Float64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscFEOpenCLSetRealType(arg1::PetscFE{Float64},arg2::PetscDataType)
    err = ccall((:PetscFEOpenCLSetRealType,petscRealDouble),PetscErrorCode,(PetscFE{Float64},PetscDataType),arg1,arg2)
    return err
end

function PetscFEOpenCLGetRealType(arg1::PetscFE{Float64},arg2::Union{Ptr{PetscDataType},StridedArray{PetscDataType},Ptr{PetscDataType},Ref{PetscDataType}})
    err = ccall((:PetscFEOpenCLGetRealType,petscRealDouble),PetscErrorCode,(PetscFE{Float64},Ptr{PetscDataType}),arg1,arg2)
    return err
end

function DMDASetInterpolationType(arg1::DM{Float64},arg2::DMDAInterpolationType)
    err = ccall((:DMDASetInterpolationType,petscRealDouble),PetscErrorCode,(DM{Float64},DMDAInterpolationType),arg1,arg2)
    return err
end

function DMDAGetInterpolationType(arg1::DM{Float64},arg2::Union{Ptr{DMDAInterpolationType},StridedArray{DMDAInterpolationType},Ptr{DMDAInterpolationType},Ref{DMDAInterpolationType}})
    err = ccall((:DMDAGetInterpolationType,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{DMDAInterpolationType}),arg1,arg2)
    return err
end

function DMDASetElementType(arg1::DM{Float64},arg2::DMDAElementType)
    err = ccall((:DMDASetElementType,petscRealDouble),PetscErrorCode,(DM{Float64},DMDAElementType),arg1,arg2)
    return err
end

function DMDAGetElementType(arg1::DM{Float64},arg2::Union{Ptr{DMDAElementType},StridedArray{DMDAElementType},Ptr{DMDAElementType},Ref{DMDAElementType}})
    err = ccall((:DMDAGetElementType,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{DMDAElementType}),arg1,arg2)
    return err
end

function DMDAGetElements(arg1::DM{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMDAGetElements,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Int64},Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4)
    return err
end

function DMDARestoreElements(arg1::DM{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMDARestoreElements,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Int64},Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4)
    return err
end

function DMDACreate(arg1::MPI_Comm,arg2::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:DMDACreate,petscRealDouble),PetscErrorCode,(comm_type,Ptr{DM{Float64}}),arg1,arg2)
    return err
end

function DMDASetSizes(arg1::DM{Float64},arg2::Integer,arg3::Integer,arg4::Integer)
    err = ccall((:DMDASetSizes,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Int64,Int64),arg1,arg2,arg3,arg4)
    return err
end

function DMDACreate1d(arg1::MPI_Comm,arg2::DMBoundaryType,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:DMDACreate1d,petscRealDouble),PetscErrorCode,(comm_type,DMBoundaryType,Int64,Int64,Int64,Ptr{Int64},Ptr{DM{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function DMDACreate2d(arg1::MPI_Comm,arg2::DMBoundaryType,arg3::DMBoundaryType,arg4::DMDAStencilType,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Integer,arg9::Integer,arg10::Integer,arg11::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg12::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg13::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:DMDACreate2d,petscRealDouble),PetscErrorCode,(comm_type,DMBoundaryType,DMBoundaryType,DMDAStencilType,Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Int64},Ptr{DM{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13)
    return err
end

function DMDACreate3d(arg1::MPI_Comm,arg2::DMBoundaryType,arg3::DMBoundaryType,arg4::DMBoundaryType,arg5::DMDAStencilType,arg6::Integer,arg7::Integer,arg8::Integer,arg9::Integer,arg10::Integer,arg11::Integer,arg12::Integer,arg13::Integer,arg14::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg15::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg16::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg17::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:DMDACreate3d,petscRealDouble),PetscErrorCode,(comm_type,DMBoundaryType,DMBoundaryType,DMBoundaryType,DMDAStencilType,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{DM{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17)
    return err
end

function DMDAGlobalToNaturalBegin(arg1::DM{Float64},arg2::Vec{Float64},arg3::InsertMode,arg4::Vec{Float64})
    err = ccall((:DMDAGlobalToNaturalBegin,petscRealDouble),PetscErrorCode,(DM{Float64},Vec{Float64},InsertMode,Vec{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function DMDAGlobalToNaturalEnd(arg1::DM{Float64},arg2::Vec{Float64},arg3::InsertMode,arg4::Vec{Float64})
    err = ccall((:DMDAGlobalToNaturalEnd,petscRealDouble),PetscErrorCode,(DM{Float64},Vec{Float64},InsertMode,Vec{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function DMDANaturalToGlobalBegin(arg1::DM{Float64},arg2::Vec{Float64},arg3::InsertMode,arg4::Vec{Float64})
    err = ccall((:DMDANaturalToGlobalBegin,petscRealDouble),PetscErrorCode,(DM{Float64},Vec{Float64},InsertMode,Vec{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function DMDANaturalToGlobalEnd(arg1::DM{Float64},arg2::Vec{Float64},arg3::InsertMode,arg4::Vec{Float64})
    err = ccall((:DMDANaturalToGlobalEnd,petscRealDouble),PetscErrorCode,(DM{Float64},Vec{Float64},InsertMode,Vec{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function DMDAGetCorners(arg1::DM{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMDAGetCorners,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function DMDAGetGhostCorners(arg1::DM{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMDAGetGhostCorners,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function DMDAGetInfo(arg1::DM{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg9::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg10::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg11::Union{Ptr{DMBoundaryType},StridedArray{DMBoundaryType},Ptr{DMBoundaryType},Ref{DMBoundaryType}},arg12::Union{Ptr{DMBoundaryType},StridedArray{DMBoundaryType},Ptr{DMBoundaryType},Ref{DMBoundaryType}},arg13::Union{Ptr{DMBoundaryType},StridedArray{DMBoundaryType},Ptr{DMBoundaryType},Ref{DMBoundaryType}},arg14::Union{Ptr{DMDAStencilType},StridedArray{DMDAStencilType},Ptr{DMDAStencilType},Ref{DMDAStencilType}})
    err = ccall((:DMDAGetInfo,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{DMBoundaryType},Ptr{DMBoundaryType},Ptr{DMBoundaryType},Ptr{DMDAStencilType}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14)
    return err
end

function DMDAGetProcessorSubset(arg1::DM{Float64},arg2::DMDADirection,arg3::Integer,arg4::Union{Ptr{MPI_Comm},StridedArray{MPI_Comm},Ptr{MPI_Comm},Ref{MPI_Comm}})
    err = ccall((:DMDAGetProcessorSubset,petscRealDouble),PetscErrorCode,(DM{Float64},DMDADirection,Int64,Ptr{comm_type}),arg1,arg2,arg3,arg4)
    return err
end

function DMDAGetProcessorSubsets(arg1::DM{Float64},arg2::DMDADirection,arg3::Union{Ptr{MPI_Comm},StridedArray{MPI_Comm},Ptr{MPI_Comm},Ref{MPI_Comm}})
    err = ccall((:DMDAGetProcessorSubsets,petscRealDouble),PetscErrorCode,(DM{Float64},DMDADirection,Ptr{comm_type}),arg1,arg2,arg3)
    return err
end

function DMDAGetRay(arg1::DM{Float64},arg2::DMDADirection,arg3::Integer,arg4::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}},arg5::Union{Ptr{VecScatter{Float64}},StridedArray{VecScatter{Float64}},Ptr{VecScatter{Float64}},Ref{VecScatter{Float64}}})
    err = ccall((:DMDAGetRay,petscRealDouble),PetscErrorCode,(DM{Float64},DMDADirection,Int64,Ptr{Vec{Float64}},Ptr{VecScatter{Float64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMDAGlobalToNaturalAllCreate(arg1::DM{Float64},arg2::Union{Ptr{VecScatter{Float64}},StridedArray{VecScatter{Float64}},Ptr{VecScatter{Float64}},Ref{VecScatter{Float64}}})
    err = ccall((:DMDAGlobalToNaturalAllCreate,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{VecScatter{Float64}}),arg1,arg2)
    return err
end

function DMDANaturalAllToGlobalCreate(arg1::DM{Float64},arg2::Union{Ptr{VecScatter{Float64}},StridedArray{VecScatter{Float64}},Ptr{VecScatter{Float64}},Ref{VecScatter{Float64}}})
    err = ccall((:DMDANaturalAllToGlobalCreate,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{VecScatter{Float64}}),arg1,arg2)
    return err
end

function DMDAGetScatter(arg1::DM{Float64},arg2::Union{Ptr{VecScatter{Float64}},StridedArray{VecScatter{Float64}},Ptr{VecScatter{Float64}},Ref{VecScatter{Float64}}},arg3::Union{Ptr{VecScatter{Float64}},StridedArray{VecScatter{Float64}},Ptr{VecScatter{Float64}},Ref{VecScatter{Float64}}})
    err = ccall((:DMDAGetScatter,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{VecScatter{Float64}},Ptr{VecScatter{Float64}}),arg1,arg2,arg3)
    return err
end

function DMDAGetNeighbors(arg1::DM{Float64},arg2::Union{Ptr{Ptr{PetscMPIInt}},StridedArray{Ptr{PetscMPIInt}},Ptr{Ptr{PetscMPIInt}},Ref{Ptr{PetscMPIInt}}})
    err = ccall((:DMDAGetNeighbors,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Ptr{PetscMPIInt}}),arg1,arg2)
    return err
end

function DMDASetAOType(arg1::DM{Float64},arg2::AOType)
    err = ccall((:DMDASetAOType,petscRealDouble),PetscErrorCode,(DM{Float64},AOType),arg1,arg2)
    return err
end

function DMDAGetAO(arg1::DM{Float64},arg2::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:DMDAGetAO,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Cint}),arg1,arg2)
    return err
end

function DMDASetUniformCoordinates(arg1::DM{Float64},arg2::Float64,arg3::Float64,arg4::Float64,arg5::Float64,arg6::Float64,arg7::Float64)
    err = ccall((:DMDASetUniformCoordinates,petscRealDouble),PetscErrorCode,(DM{Float64},Float64,Float64,Float64,Float64,Float64,Float64),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function DMDAGetCoordinateArray(arg1::DM{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDAGetCoordinateArray,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function DMDARestoreCoordinateArray(arg1::DM{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDARestoreCoordinateArray,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function DMDAGetBoundingBox(arg1::DM{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:DMDAGetBoundingBox,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function DMDAGetLocalBoundingBox(arg1::DM{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:DMDAGetLocalBoundingBox,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function DMDAGetLogicalCoordinate(arg1::DM{Float64},arg2::Float64,arg3::Float64,arg4::Float64,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg9::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg10::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:DMDAGetLogicalCoordinate,petscRealDouble),PetscErrorCode,(DM{Float64},Float64,Float64,Float64,Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function DMDAMapCoordsToPeriodicDomain(arg1::DM{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:DMDAMapCoordsToPeriodicDomain,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function DMDAGetReducedDMDA(arg1::DM{Float64},arg2::Integer,arg3::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:DMDAGetReducedDMDA,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Ptr{DM{Float64}}),arg1,arg2,arg3)
    return err
end

function DMDASetFieldName(arg1::DM{Float64},arg2::Integer,arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:DMDASetFieldName,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Cstring),arg1,arg2,arg3)
    return err
end

function DMDAGetFieldName(arg1::DM{Float64},arg2::Integer,arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:DMDAGetFieldName,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Ptr{Ptr{UInt8}}),arg1,arg2,arg3)
    return err
end

function DMDASetFieldNames(arg1::DM{Float64},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:DMDASetFieldNames,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function DMDAGetFieldNames(arg1::DM{Float64},arg2::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}})
    err = ccall((:DMDAGetFieldNames,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Ptr{Ptr{UInt8}}}),arg1,arg2)
    return err
end

function DMDASetCoordinateName(arg1::DM{Float64},arg2::Integer,arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:DMDASetCoordinateName,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Cstring),arg1,arg2,arg3)
    return err
end

function DMDAGetCoordinateName(arg1::DM{Float64},arg2::Integer,arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:DMDAGetCoordinateName,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Ptr{Ptr{UInt8}}),arg1,arg2,arg3)
    return err
end

function DMDASetBoundaryType(arg1::DM{Float64},arg2::DMBoundaryType,arg3::DMBoundaryType,arg4::DMBoundaryType)
    err = ccall((:DMDASetBoundaryType,petscRealDouble),PetscErrorCode,(DM{Float64},DMBoundaryType,DMBoundaryType,DMBoundaryType),arg1,arg2,arg3,arg4)
    return err
end

function DMDASetDof(arg1::DM{Float64},arg2::Integer)
    err = ccall((:DMDASetDof,petscRealDouble),PetscErrorCode,(DM{Float64},Int64),arg1,arg2)
    return err
end

function DMDASetOverlap(arg1::DM{Float64},arg2::Integer,arg3::Integer,arg4::Integer)
    err = ccall((:DMDASetOverlap,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Int64,Int64),arg1,arg2,arg3,arg4)
    return err
end

function DMDAGetOverlap(arg1::DM{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMDAGetOverlap,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function DMDASetNumLocalSubDomains(arg1::DM{Float64},arg2::Integer)
    err = ccall((:DMDASetNumLocalSubDomains,petscRealDouble),PetscErrorCode,(DM{Float64},Int64),arg1,arg2)
    return err
end

function DMDAGetNumLocalSubDomains(arg1::DM{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMDAGetNumLocalSubDomains,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function DMDAGetOffset(arg1::DM{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMDAGetOffset,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function DMDASetOffset(arg1::DM{Float64},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer)
    err = ccall((:DMDASetOffset,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Int64,Int64,Int64,Int64,Int64),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function DMDAGetNonOverlappingRegion(arg1::DM{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMDAGetNonOverlappingRegion,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function DMDASetNonOverlappingRegion(arg1::DM{Float64},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer)
    err = ccall((:DMDASetNonOverlappingRegion,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Int64,Int64,Int64,Int64,Int64),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function DMDASetStencilWidth(arg1::DM{Float64},arg2::Integer)
    err = ccall((:DMDASetStencilWidth,petscRealDouble),PetscErrorCode,(DM{Float64},Int64),arg1,arg2)
    return err
end

function DMDASetOwnershipRanges(arg1::DM{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMDASetOwnershipRanges,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function DMDAGetOwnershipRanges(arg1::DM{Float64},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMDAGetOwnershipRanges,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4)
    return err
end

function DMDASetNumProcs(arg1::DM{Float64},arg2::Integer,arg3::Integer,arg4::Integer)
    err = ccall((:DMDASetNumProcs,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Int64,Int64),arg1,arg2,arg3,arg4)
    return err
end

function DMDASetStencilType(arg1::DM{Float64},arg2::DMDAStencilType)
    err = ccall((:DMDASetStencilType,petscRealDouble),PetscErrorCode,(DM{Float64},DMDAStencilType),arg1,arg2)
    return err
end

function DMDAVecGetArray(arg1::DM{Float64},arg2::Vec{Float64},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDAVecGetArray,petscRealDouble),PetscErrorCode,(DM{Float64},Vec{Float64},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMDAVecRestoreArray(arg1::DM{Float64},arg2::Vec{Float64},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDAVecRestoreArray,petscRealDouble),PetscErrorCode,(DM{Float64},Vec{Float64},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMDAVecGetArrayDOF(arg1::DM{Float64},arg2::Vec{Float64},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDAVecGetArrayDOF,petscRealDouble),PetscErrorCode,(DM{Float64},Vec{Float64},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMDAVecRestoreArrayDOF(arg1::DM{Float64},arg2::Vec{Float64},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDAVecRestoreArrayDOF,petscRealDouble),PetscErrorCode,(DM{Float64},Vec{Float64},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMDAVecGetArrayRead(arg1::DM{Float64},arg2::Vec{Float64},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDAVecGetArrayRead,petscRealDouble),PetscErrorCode,(DM{Float64},Vec{Float64},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMDAVecRestoreArrayRead(arg1::DM{Float64},arg2::Vec{Float64},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDAVecRestoreArrayRead,petscRealDouble),PetscErrorCode,(DM{Float64},Vec{Float64},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMDAVecGetArrayDOFRead(arg1::DM{Float64},arg2::Vec{Float64},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDAVecGetArrayDOFRead,petscRealDouble),PetscErrorCode,(DM{Float64},Vec{Float64},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMDAVecRestoreArrayDOFRead(arg1::DM{Float64},arg2::Vec{Float64},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDAVecRestoreArrayDOFRead,petscRealDouble),PetscErrorCode,(DM{Float64},Vec{Float64},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMDASplitComm2d(arg0::Type{Float64},arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{MPI_Comm},StridedArray{MPI_Comm},Ptr{MPI_Comm},Ref{MPI_Comm}})
    err = ccall((:DMDASplitComm2d,petscRealDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Ptr{comm_type}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMDACreatePatchIS(arg1::DM{Float64},arg2::Union{Ptr{MatStencil},StridedArray{MatStencil},Ptr{MatStencil},Ref{MatStencil}},arg3::Union{Ptr{MatStencil},StridedArray{MatStencil},Ptr{MatStencil},Ref{MatStencil}},arg4::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:DMDACreatePatchIS,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{MatStencil},Ptr{MatStencil},Ptr{IS{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function DMDAGetLocalInfo(arg1::DM{Float64},arg2::Union{Ptr{DMDALocalInfo},StridedArray{DMDALocalInfo},Ptr{DMDALocalInfo},Ref{DMDALocalInfo}})
    err = ccall((:DMDAGetLocalInfo,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{DMDALocalInfo}),arg1,arg2)
    return err
end

function MatRegisterDAAD(arg0::Type{Float64})
    err = ccall((:MatRegisterDAAD,petscRealDouble),PetscErrorCode,())
    return err
end

function MatCreateDAAD(arg1::DM{Float64},arg2::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatCreateDAAD,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Mat{Float64}}),arg1,arg2)
    return err
end

function MatCreateSeqUSFFT(arg1::Vec{Float64},arg2::DM{Float64},arg3::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatCreateSeqUSFFT,petscRealDouble),PetscErrorCode,(Vec{Float64},DM{Float64},Ptr{Mat{Float64}}),arg1,arg2,arg3)
    return err
end

function DMDASetGetMatrix(arg1::DM{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDASetGetMatrix,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function DMDASetBlockFills(arg1::DM{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMDASetBlockFills,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function DMDASetRefinementFactor(arg1::DM{Float64},arg2::Integer,arg3::Integer,arg4::Integer)
    err = ccall((:DMDASetRefinementFactor,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Int64,Int64),arg1,arg2,arg3,arg4)
    return err
end

function DMDAGetRefinementFactor(arg1::DM{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMDAGetRefinementFactor,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function DMDAGetArray(arg1::DM{Float64},arg2::PetscBool,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDAGetArray,petscRealDouble),PetscErrorCode,(DM{Float64},PetscBool,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMDARestoreArray(arg1::DM{Float64},arg2::PetscBool,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDARestoreArray,petscRealDouble),PetscErrorCode,(DM{Float64},PetscBool,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMDACreatePF(arg1::DM{Float64},arg2::Union{Ptr{PF{Float64}},StridedArray{PF{Float64}},Ptr{PF{Float64}},Ref{PF{Float64}}})
    err = ccall((:DMDACreatePF,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{PF{Float64}}),arg1,arg2)
    return err
end

function DMDAGetNumCells(arg1::DM{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMDAGetNumCells,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMDAGetCellPoint(arg1::DM{Float64},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMDAGetCellPoint,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Int64,Int64,Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMDAGetNumVertices(arg1::DM{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMDAGetNumVertices,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMDAGetNumFaces(arg1::DM{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMDAGetNumFaces,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function DMDAGetHeightStratum(arg1::DM{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMDAGetHeightStratum,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function DMDAGetDepthStratum(arg1::DM{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMDAGetDepthStratum,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function DMDACreateSection(arg1::DM{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{PetscSection{Float64}},StridedArray{PetscSection{Float64}},Ptr{PetscSection{Float64}},Ref{PetscSection{Float64}}})
    err = ccall((:DMDACreateSection,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{PetscSection{Float64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMDAComputeCellGeometryFEM(arg1::DM{Float64},arg2::Integer,arg3::PetscQuadrature{Float64},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg7::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:DMDAComputeCellGeometryFEM,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,PetscQuadrature{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function DMDAGetTransitiveClosure(arg1::DM{Float64},arg2::Integer,arg3::PetscBool,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMDAGetTransitiveClosure,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,PetscBool,Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMDARestoreTransitiveClosure(arg1::DM{Float64},arg2::Integer,arg3::PetscBool,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMDARestoreTransitiveClosure,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,PetscBool,Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMDAVecGetClosure(arg1::DM{Float64},arg2::PetscSection{Float64},arg3::Vec{Float64},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:DMDAVecGetClosure,petscRealDouble),PetscErrorCode,(DM{Float64},PetscSection{Float64},Vec{Float64},Int64,Ptr{Int64},Ptr{Ptr{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMDAVecRestoreClosure(arg1::DM{Float64},arg2::PetscSection{Float64},arg3::Vec{Float64},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:DMDAVecRestoreClosure,petscRealDouble),PetscErrorCode,(DM{Float64},PetscSection{Float64},Vec{Float64},Int64,Ptr{Int64},Ptr{Ptr{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMDAVecSetClosure(arg1::DM{Float64},arg2::PetscSection{Float64},arg3::Vec{Float64},arg4::Integer,arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg6::InsertMode)
    err = ccall((:DMDAVecSetClosure,petscRealDouble),PetscErrorCode,(DM{Float64},PetscSection{Float64},Vec{Float64},Int64,Ptr{Float64},InsertMode),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMDAGetClosure(arg1::DM{Float64},arg2::PetscSection{Float64},arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMDAGetClosure,petscRealDouble),PetscErrorCode,(DM{Float64},PetscSection{Float64},Int64,Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMDARestoreClosure(arg1::DM{Float64},arg2::PetscSection{Float64},arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMDARestoreClosure,petscRealDouble),PetscErrorCode,(DM{Float64},PetscSection{Float64},Int64,Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMDAGetClosureScalar(arg1::DM{Float64},arg2::PetscSection{Float64},arg3::Integer,arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:DMDAGetClosureScalar,petscRealDouble),PetscErrorCode,(DM{Float64},PetscSection{Float64},Int64,Ptr{Float64},Ptr{Int64},Ptr{Ptr{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMDARestoreClosureScalar(arg1::DM{Float64},arg2::PetscSection{Float64},arg3::Integer,arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:DMDARestoreClosureScalar,petscRealDouble),PetscErrorCode,(DM{Float64},PetscSection{Float64},Int64,Ptr{Float64},Ptr{Int64},Ptr{Ptr{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMDASetClosureScalar(arg1::DM{Float64},arg2::PetscSection{Float64},arg3::Integer,arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg6::InsertMode)
    err = ccall((:DMDASetClosureScalar,petscRealDouble),PetscErrorCode,(DM{Float64},PetscSection{Float64},Int64,Ptr{Float64},Ptr{Float64},InsertMode),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMDAConvertToCell(arg1::DM{Float64},arg2::MatStencil,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMDAConvertToCell,petscRealDouble),PetscErrorCode,(DM{Float64},MatStencil,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function DMDASetVertexCoordinates(arg1::DM{Float64},arg2::Float64,arg3::Float64,arg4::Float64,arg5::Float64,arg6::Float64,arg7::Float64)
    err = ccall((:DMDASetVertexCoordinates,petscRealDouble),PetscErrorCode,(DM{Float64},Float64,Float64,Float64,Float64,Float64,Float64),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function DMDASetPreallocationCenterDimension(arg1::DM{Float64},arg2::Integer)
    err = ccall((:DMDASetPreallocationCenterDimension,petscRealDouble),PetscErrorCode,(DM{Float64},Int64),arg1,arg2)
    return err
end

function DMDAGetPreallocationCenterDimension(arg1::DM{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMDAGetPreallocationCenterDimension,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function DMDAProjectFunction(arg1::DM{Float64},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::InsertMode,arg5::Vec{Float64})
    err = ccall((:DMDAProjectFunction,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Ptr{Void}},Ptr{Ptr{Void}},InsertMode,Vec{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMDAProjectFunctionLocal(arg1::DM{Float64},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::InsertMode,arg5::Vec{Float64})
    err = ccall((:DMDAProjectFunctionLocal,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Ptr{Void}},Ptr{Ptr{Void}},InsertMode,Vec{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMDAComputeL2Diff(arg1::DM{Float64},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::Vec{Float64},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:DMDAComputeL2Diff,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Ptr{Void}},Ptr{Ptr{Void}},Vec{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMDAComputeL2GradientDiff(arg1::DM{Float64},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::Vec{Float64},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:DMDAComputeL2GradientDiff,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Ptr{Void}},Ptr{Ptr{Void}},Vec{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMCompositeCreate(arg1::MPI_Comm,arg2::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:DMCompositeCreate,petscRealDouble),PetscErrorCode,(comm_type,Ptr{DM{Float64}}),arg1,arg2)
    return err
end

function DMCompositeAddDM(arg1::DM{Float64},arg2::DM{Float64})
    err = ccall((:DMCompositeAddDM,petscRealDouble),PetscErrorCode,(DM{Float64},DM{Float64}),arg1,arg2)
    return err
end

function DMCompositeSetCoupling(arg1::DM{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMCompositeSetCoupling,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function DMCompositeAddVecScatter(arg1::DM{Float64},arg2::VecScatter{Float64})
    err = ccall((:DMCompositeAddVecScatter,petscRealDouble),PetscErrorCode,(DM{Float64},VecScatter{Float64}),arg1,arg2)
    return err
end

function DMCompositeScatterArray(arg1::DM{Float64},arg2::Vec{Float64},arg3::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:DMCompositeScatterArray,petscRealDouble),PetscErrorCode,(DM{Float64},Vec{Float64},Ptr{Vec{Float64}}),arg1,arg2,arg3)
    return err
end

function DMCompositeGatherArray(arg1::DM{Float64},arg2::Vec{Float64},arg3::InsertMode,arg4::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:DMCompositeGatherArray,petscRealDouble),PetscErrorCode,(DM{Float64},Vec{Float64},InsertMode,Ptr{Vec{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function DMCompositeGetNumberDM(arg1::DM{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMCompositeGetNumberDM,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function DMCompositeGetAccessArray(arg1::DM{Float64},arg2::Vec{Float64},arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:DMCompositeGetAccessArray,petscRealDouble),PetscErrorCode,(DM{Float64},Vec{Float64},Int64,Ptr{Int64},Ptr{Vec{Float64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMCompositeRestoreAccessArray(arg1::DM{Float64},arg2::Vec{Float64},arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:DMCompositeRestoreAccessArray,petscRealDouble),PetscErrorCode,(DM{Float64},Vec{Float64},Int64,Ptr{Int64},Ptr{Vec{Float64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMCompositeGetEntriesArray(arg1::DM{Float64},arg2::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:DMCompositeGetEntriesArray,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{DM{Float64}}),arg1,arg2)
    return err
end

function DMCompositeGetGlobalISs(arg1::DM{Float64},arg2::Union{Ptr{Ptr{IS{Float64}}},StridedArray{Ptr{IS{Float64}}},Ptr{Ptr{IS{Float64}}},Ref{Ptr{IS{Float64}}}})
    err = ccall((:DMCompositeGetGlobalISs,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Ptr{IS{Float64}}}),arg1,arg2)
    return err
end

function DMCompositeGetLocalISs(arg1::DM{Float64},arg2::Union{Ptr{Ptr{IS{Float64}}},StridedArray{Ptr{IS{Float64}}},Ptr{Ptr{IS{Float64}}},Ref{Ptr{IS{Float64}}}})
    err = ccall((:DMCompositeGetLocalISs,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Ptr{IS{Float64}}}),arg1,arg2)
    return err
end

function DMCompositeGetISLocalToGlobalMappings(arg1::DM{Float64},arg2::Union{Ptr{Ptr{ISLocalToGlobalMapping{Float64}}},StridedArray{Ptr{ISLocalToGlobalMapping{Float64}}},Ptr{Ptr{ISLocalToGlobalMapping{Float64}}},Ref{Ptr{ISLocalToGlobalMapping{Float64}}}})
    err = ccall((:DMCompositeGetISLocalToGlobalMappings,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Ptr{ISLocalToGlobalMapping{Float64}}}),arg1,arg2)
    return err
end

function DMPatchCreate(arg1::MPI_Comm,arg2::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:DMPatchCreate,petscRealDouble),PetscErrorCode,(comm_type,Ptr{DM{Float64}}),arg1,arg2)
    return err
end

function DMPatchZoom(arg1::DM{Float64},arg2::Vec{Float64},arg3::MatStencil,arg4::MatStencil,arg5::MPI_Comm,arg6::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}},arg7::Union{Ptr{PetscSF{Float64}},StridedArray{PetscSF{Float64}},Ptr{PetscSF{Float64}},Ref{PetscSF{Float64}}},arg8::Union{Ptr{PetscSF{Float64}},StridedArray{PetscSF{Float64}},Ptr{PetscSF{Float64}},Ref{PetscSF{Float64}}})
    err = ccall((:DMPatchZoom,petscRealDouble),PetscErrorCode,(DM{Float64},Vec{Float64},MatStencil,MatStencil,comm_type,Ptr{DM{Float64}},Ptr{PetscSF{Float64}},Ptr{PetscSF{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function DMPatchSolve(arg1::DM{Float64})
    err = ccall((:DMPatchSolve,petscRealDouble),PetscErrorCode,(DM{Float64},),arg1)
    return err
end

function DMPatchGetPatchSize(arg1::DM{Float64},arg2::Union{Ptr{MatStencil},StridedArray{MatStencil},Ptr{MatStencil},Ref{MatStencil}})
    err = ccall((:DMPatchGetPatchSize,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{MatStencil}),arg1,arg2)
    return err
end

function DMPatchSetPatchSize(arg1::DM{Float64},arg2::MatStencil)
    err = ccall((:DMPatchSetPatchSize,petscRealDouble),PetscErrorCode,(DM{Float64},MatStencil),arg1,arg2)
    return err
end

function DMPatchGetCommSize(arg1::DM{Float64},arg2::Union{Ptr{MatStencil},StridedArray{MatStencil},Ptr{MatStencil},Ref{MatStencil}})
    err = ccall((:DMPatchGetCommSize,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{MatStencil}),arg1,arg2)
    return err
end

function DMPatchSetCommSize(arg1::DM{Float64},arg2::MatStencil)
    err = ccall((:DMPatchSetCommSize,petscRealDouble),PetscErrorCode,(DM{Float64},MatStencil),arg1,arg2)
    return err
end

function DMPatchGetCoarse(arg1::DM{Float64},arg2::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:DMPatchGetCoarse,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{DM{Float64}}),arg1,arg2)
    return err
end

function DMPatchCreateGrid(arg1::MPI_Comm,arg2::Integer,arg3::MatStencil,arg4::MatStencil,arg5::MatStencil,arg6::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:DMPatchCreateGrid,petscRealDouble),PetscErrorCode,(comm_type,Int64,MatStencil,MatStencil,MatStencil,Ptr{DM{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscLimiterCreate(arg1::MPI_Comm,arg2::Union{Ptr{PetscLimiter{Float64}},StridedArray{PetscLimiter{Float64}},Ptr{PetscLimiter{Float64}},Ref{PetscLimiter{Float64}}})
    err = ccall((:PetscLimiterCreate,petscRealDouble),PetscErrorCode,(comm_type,Ptr{PetscLimiter{Float64}}),arg1,arg2)
    return err
end

function PetscLimiterDestroy(arg1::Union{Ptr{PetscLimiter{Float64}},StridedArray{PetscLimiter{Float64}},Ptr{PetscLimiter{Float64}},Ref{PetscLimiter{Float64}}})
    err = ccall((:PetscLimiterDestroy,petscRealDouble),PetscErrorCode,(Ptr{PetscLimiter{Float64}},),arg1)
    return err
end

function PetscLimiterSetType(arg1::PetscLimiter{Float64},arg2::PetscLimiterType)
    err = ccall((:PetscLimiterSetType,petscRealDouble),PetscErrorCode,(PetscLimiter{Float64},PetscLimiterType),arg1,arg2)
    return err
end

function PetscLimiterGetType(arg1::PetscLimiter{Float64},arg2::Union{Ptr{PetscLimiterType},StridedArray{PetscLimiterType},Ptr{PetscLimiterType},Ref{PetscLimiterType}})
    err = ccall((:PetscLimiterGetType,petscRealDouble),PetscErrorCode,(PetscLimiter{Float64},Ptr{PetscLimiterType}),arg1,arg2)
    return err
end

function PetscLimiterSetUp(arg1::PetscLimiter{Float64})
    err = ccall((:PetscLimiterSetUp,petscRealDouble),PetscErrorCode,(PetscLimiter{Float64},),arg1)
    return err
end

function PetscLimiterSetFromOptions(arg1::PetscLimiter{Float64})
    err = ccall((:PetscLimiterSetFromOptions,petscRealDouble),PetscErrorCode,(PetscLimiter{Float64},),arg1)
    return err
end

function PetscLimiterRegister(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscLimiterRegister,petscRealDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function PetscLimiterRegisterDestroy(arg0::Type{Float64})
    err = ccall((:PetscLimiterRegisterDestroy,petscRealDouble),PetscErrorCode,())
    return err
end

function PetscLimiterLimit(arg1::PetscLimiter{Float64},arg2::Float64,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscLimiterLimit,petscRealDouble),PetscErrorCode,(PetscLimiter{Float64},Float64,Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function PetscFVInitializePackage(arg0::Type{Float64})
    err = ccall((:PetscFVInitializePackage,petscRealDouble),PetscErrorCode,())
    return err
end

function PetscFVCreate(arg1::MPI_Comm,arg2::Union{Ptr{PetscFV{Float64}},StridedArray{PetscFV{Float64}},Ptr{PetscFV{Float64}},Ref{PetscFV{Float64}}})
    err = ccall((:PetscFVCreate,petscRealDouble),PetscErrorCode,(comm_type,Ptr{PetscFV{Float64}}),arg1,arg2)
    return err
end

function PetscFVDestroy(arg1::Union{Ptr{PetscFV{Float64}},StridedArray{PetscFV{Float64}},Ptr{PetscFV{Float64}},Ref{PetscFV{Float64}}})
    err = ccall((:PetscFVDestroy,petscRealDouble),PetscErrorCode,(Ptr{PetscFV{Float64}},),arg1)
    return err
end

function PetscFVSetType(arg1::PetscFV{Float64},arg2::PetscFVType)
    err = ccall((:PetscFVSetType,petscRealDouble),PetscErrorCode,(PetscFV{Float64},PetscFVType),arg1,arg2)
    return err
end

function PetscFVGetType(arg1::PetscFV{Float64},arg2::Union{Ptr{PetscFVType},StridedArray{PetscFVType},Ptr{PetscFVType},Ref{PetscFVType}})
    err = ccall((:PetscFVGetType,petscRealDouble),PetscErrorCode,(PetscFV{Float64},Ptr{PetscFVType}),arg1,arg2)
    return err
end

function PetscFVSetUp(arg1::PetscFV{Float64})
    err = ccall((:PetscFVSetUp,petscRealDouble),PetscErrorCode,(PetscFV{Float64},),arg1)
    return err
end

function PetscFVSetFromOptions(arg1::PetscFV{Float64})
    err = ccall((:PetscFVSetFromOptions,petscRealDouble),PetscErrorCode,(PetscFV{Float64},),arg1)
    return err
end

function PetscFVRegister(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscFVRegister,petscRealDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function PetscFVRegisterDestroy(arg0::Type{Float64})
    err = ccall((:PetscFVRegisterDestroy,petscRealDouble),PetscErrorCode,())
    return err
end

function PetscFVSetLimiter(arg1::PetscFV{Float64},arg2::PetscLimiter{Float64})
    err = ccall((:PetscFVSetLimiter,petscRealDouble),PetscErrorCode,(PetscFV{Float64},PetscLimiter{Float64}),arg1,arg2)
    return err
end

function PetscFVGetLimiter(arg1::PetscFV{Float64},arg2::Union{Ptr{PetscLimiter{Float64}},StridedArray{PetscLimiter{Float64}},Ptr{PetscLimiter{Float64}},Ref{PetscLimiter{Float64}}})
    err = ccall((:PetscFVGetLimiter,petscRealDouble),PetscErrorCode,(PetscFV{Float64},Ptr{PetscLimiter{Float64}}),arg1,arg2)
    return err
end

function PetscFVSetNumComponents(arg1::PetscFV{Float64},arg2::Integer)
    err = ccall((:PetscFVSetNumComponents,petscRealDouble),PetscErrorCode,(PetscFV{Float64},Int64),arg1,arg2)
    return err
end

function PetscFVGetNumComponents(arg1::PetscFV{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscFVGetNumComponents,petscRealDouble),PetscErrorCode,(PetscFV{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscFVSetSpatialDimension(arg1::PetscFV{Float64},arg2::Integer)
    err = ccall((:PetscFVSetSpatialDimension,petscRealDouble),PetscErrorCode,(PetscFV{Float64},Int64),arg1,arg2)
    return err
end

function PetscFVGetSpatialDimension(arg1::PetscFV{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscFVGetSpatialDimension,petscRealDouble),PetscErrorCode,(PetscFV{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscFVSetComputeGradients(arg1::PetscFV{Float64},arg2::PetscBool)
    err = ccall((:PetscFVSetComputeGradients,petscRealDouble),PetscErrorCode,(PetscFV{Float64},PetscBool),arg1,arg2)
    return err
end

function PetscFVGetComputeGradients(arg1::PetscFV{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscFVGetComputeGradients,petscRealDouble),PetscErrorCode,(PetscFV{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscFVSetQuadrature(arg1::PetscFV{Float64},arg2::PetscQuadrature{Float64})
    err = ccall((:PetscFVSetQuadrature,petscRealDouble),PetscErrorCode,(PetscFV{Float64},PetscQuadrature{Float64}),arg1,arg2)
    return err
end

function PetscFVGetQuadrature(arg1::PetscFV{Float64},arg2::Union{Ptr{PetscQuadrature{Float64}},StridedArray{PetscQuadrature{Float64}},Ptr{PetscQuadrature{Float64}},Ref{PetscQuadrature{Float64}}})
    err = ccall((:PetscFVGetQuadrature,petscRealDouble),PetscErrorCode,(PetscFV{Float64},Ptr{PetscQuadrature{Float64}}),arg1,arg2)
    return err
end

function PetscFVSetDualSpace(arg1::PetscFV{Float64},arg2::PetscDualSpace{Float64})
    err = ccall((:PetscFVSetDualSpace,petscRealDouble),PetscErrorCode,(PetscFV{Float64},PetscDualSpace{Float64}),arg1,arg2)
    return err
end

function PetscFVGetDualSpace(arg1::PetscFV{Float64},arg2::Union{Ptr{PetscDualSpace{Float64}},StridedArray{PetscDualSpace{Float64}},Ptr{PetscDualSpace{Float64}},Ref{PetscDualSpace{Float64}}})
    err = ccall((:PetscFVGetDualSpace,petscRealDouble),PetscErrorCode,(PetscFV{Float64},Ptr{PetscDualSpace{Float64}}),arg1,arg2)
    return err
end

function PetscFVRefine(arg1::PetscFV{Float64},arg2::Union{Ptr{PetscFV{Float64}},StridedArray{PetscFV{Float64}},Ptr{PetscFV{Float64}},Ref{PetscFV{Float64}}})
    err = ccall((:PetscFVRefine,petscRealDouble),PetscErrorCode,(PetscFV{Float64},Ptr{PetscFV{Float64}}),arg1,arg2)
    return err
end

function PetscFVGetDefaultTabulation(arg1::PetscFV{Float64},arg2::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg3::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg4::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:PetscFVGetDefaultTabulation,petscRealDouble),PetscErrorCode,(PetscFV{Float64},Ptr{Ptr{Float64}},Ptr{Ptr{Float64}},Ptr{Ptr{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscFVGetTabulation(arg1::PetscFV{Float64},arg2::Integer,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg5::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg6::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:PetscFVGetTabulation,petscRealDouble),PetscErrorCode,(PetscFV{Float64},Int64,Ptr{Float64},Ptr{Ptr{Float64}},Ptr{Ptr{Float64}},Ptr{Ptr{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscFVRestoreTabulation(arg1::PetscFV{Float64},arg2::Integer,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg5::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg6::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:PetscFVRestoreTabulation,petscRealDouble),PetscErrorCode,(PetscFV{Float64},Int64,Ptr{Float64},Ptr{Ptr{Float64}},Ptr{Ptr{Float64}},Ptr{Ptr{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscFVComputeGradient(arg1::PetscFV{Float64},arg2::Integer,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscFVComputeGradient,petscRealDouble),PetscErrorCode,(PetscFV{Float64},Int64,Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function PetscFVIntegrateRHSFunction(arg1::PetscFV{Float64},arg2::PetscDS{Float64},arg3::Integer,arg4::Integer,arg5::Union{Ptr{PetscFVFaceGeom},StridedArray{PetscFVFaceGeom},Ptr{PetscFVFaceGeom},Ref{PetscFVFaceGeom}},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg7::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg8::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg9::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg10::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PetscFVIntegrateRHSFunction,petscRealDouble),PetscErrorCode,(PetscFV{Float64},PetscDS{Float64},Int64,Int64,Ptr{PetscFVFaceGeom},Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function PetscFVLeastSquaresSetMaxFaces(arg1::PetscFV{Float64},arg2::Integer)
    err = ccall((:PetscFVLeastSquaresSetMaxFaces,petscRealDouble),PetscErrorCode,(PetscFV{Float64},Int64),arg1,arg2)
    return err
end

function PetscPartitionerCreate(arg1::MPI_Comm,arg2::Union{Ptr{PetscPartitioner{Float64}},StridedArray{PetscPartitioner{Float64}},Ptr{PetscPartitioner{Float64}},Ref{PetscPartitioner{Float64}}})
    err = ccall((:PetscPartitionerCreate,petscRealDouble),PetscErrorCode,(comm_type,Ptr{PetscPartitioner{Float64}}),arg1,arg2)
    return err
end

function PetscPartitionerDestroy(arg1::Union{Ptr{PetscPartitioner{Float64}},StridedArray{PetscPartitioner{Float64}},Ptr{PetscPartitioner{Float64}},Ref{PetscPartitioner{Float64}}})
    err = ccall((:PetscPartitionerDestroy,petscRealDouble),PetscErrorCode,(Ptr{PetscPartitioner{Float64}},),arg1)
    return err
end

function PetscPartitionerSetType(arg1::PetscPartitioner{Float64},arg2::PetscPartitionerType)
    err = ccall((:PetscPartitionerSetType,petscRealDouble),PetscErrorCode,(PetscPartitioner{Float64},PetscPartitionerType),arg1,arg2)
    return err
end

function PetscPartitionerGetType(arg1::PetscPartitioner{Float64},arg2::Union{Ptr{PetscPartitionerType},StridedArray{PetscPartitionerType},Ptr{PetscPartitionerType},Ref{PetscPartitionerType}})
    err = ccall((:PetscPartitionerGetType,petscRealDouble),PetscErrorCode,(PetscPartitioner{Float64},Ptr{PetscPartitionerType}),arg1,arg2)
    return err
end

function PetscPartitionerSetUp(arg1::PetscPartitioner{Float64})
    err = ccall((:PetscPartitionerSetUp,petscRealDouble),PetscErrorCode,(PetscPartitioner{Float64},),arg1)
    return err
end

function PetscPartitionerSetFromOptions(arg1::PetscPartitioner{Float64})
    err = ccall((:PetscPartitionerSetFromOptions,petscRealDouble),PetscErrorCode,(PetscPartitioner{Float64},),arg1)
    return err
end

function PetscPartitionerRegister(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscPartitionerRegister,petscRealDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function PetscPartitionerRegisterDestroy(arg0::Type{Float64})
    err = ccall((:PetscPartitionerRegisterDestroy,petscRealDouble),PetscErrorCode,())
    return err
end

function PetscPartitionerPartition(arg1::PetscPartitioner{Float64},arg2::DM{Float64},arg3::PetscSection{Float64},arg4::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:PetscPartitionerPartition,petscRealDouble),PetscErrorCode,(PetscPartitioner{Float64},DM{Float64},PetscSection{Float64},Ptr{IS{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscPartitionerShellSetPartition(arg1::PetscPartitioner{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscPartitionerShellSetPartition,petscRealDouble),PetscErrorCode,(PetscPartitioner{Float64},Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexCreate(arg1::MPI_Comm,arg2::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:DMPlexCreate,petscRealDouble),PetscErrorCode,(comm_type,Ptr{DM{Float64}}),arg1,arg2)
    return err
end

function DMPlexCreateCohesiveSubmesh(arg1::DM{Float64},arg2::PetscBool,arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Integer,arg5::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:DMPlexCreateCohesiveSubmesh,petscRealDouble),PetscErrorCode,(DM{Float64},PetscBool,Cstring,Int64,Ptr{DM{Float64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexCreateFromCellList(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::PetscBool,arg7::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}},arg8::Integer,arg9::Union{Ptr{Cdouble},StridedArray{Cdouble},Ptr{Cdouble},Ref{Cdouble}},arg10::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:DMPlexCreateFromCellList,petscRealDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,PetscBool,Ptr{Cint},Int64,Ptr{Cdouble},Ptr{DM{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function DMPlexCreateFromDAG(arg1::DM{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:DMPlexCreateFromDAG,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function DMPlexCreateReferenceCell(arg1::MPI_Comm,arg2::Integer,arg3::PetscBool,arg4::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:DMPlexCreateReferenceCell,petscRealDouble),PetscErrorCode,(comm_type,Int64,PetscBool,Ptr{DM{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexGetChart(arg1::DM{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetChart,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function DMPlexSetChart(arg1::DM{Float64},arg2::Integer,arg3::Integer)
    err = ccall((:DMPlexSetChart,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Int64),arg1,arg2,arg3)
    return err
end

function DMPlexGetConeSize(arg1::DM{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetConeSize,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function DMPlexSetConeSize(arg1::DM{Float64},arg2::Integer,arg3::Integer)
    err = ccall((:DMPlexSetConeSize,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Int64),arg1,arg2,arg3)
    return err
end

function DMPlexAddConeSize(arg1::DM{Float64},arg2::Integer,arg3::Integer)
    err = ccall((:DMPlexAddConeSize,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Int64),arg1,arg2,arg3)
    return err
end

function DMPlexGetCone(arg1::DM{Float64},arg2::Integer,arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMPlexGetCone,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Ptr{Ptr{Int64}}),arg1,arg2,arg3)
    return err
end

function DMPlexSetCone(arg1::DM{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexSetCone,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function DMPlexInsertCone(arg1::DM{Float64},arg2::Integer,arg3::Integer,arg4::Integer)
    err = ccall((:DMPlexInsertCone,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Int64,Int64),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexInsertConeOrientation(arg1::DM{Float64},arg2::Integer,arg3::Integer,arg4::Integer)
    err = ccall((:DMPlexInsertConeOrientation,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Int64,Int64),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexGetConeOrientation(arg1::DM{Float64},arg2::Integer,arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMPlexGetConeOrientation,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Ptr{Ptr{Int64}}),arg1,arg2,arg3)
    return err
end

function DMPlexSetConeOrientation(arg1::DM{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexSetConeOrientation,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function DMPlexGetSupportSize(arg1::DM{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetSupportSize,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function DMPlexSetSupportSize(arg1::DM{Float64},arg2::Integer,arg3::Integer)
    err = ccall((:DMPlexSetSupportSize,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Int64),arg1,arg2,arg3)
    return err
end

function DMPlexGetSupport(arg1::DM{Float64},arg2::Integer,arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMPlexGetSupport,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Ptr{Ptr{Int64}}),arg1,arg2,arg3)
    return err
end

function DMPlexSetSupport(arg1::DM{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexSetSupport,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function DMPlexInsertSupport(arg1::DM{Float64},arg2::Integer,arg3::Integer,arg4::Integer)
    err = ccall((:DMPlexInsertSupport,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Int64,Int64),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexGetConeSection(arg1::DM{Float64},arg2::Union{Ptr{PetscSection{Float64}},StridedArray{PetscSection{Float64}},Ptr{PetscSection{Float64}},Ref{PetscSection{Float64}}})
    err = ccall((:DMPlexGetConeSection,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{PetscSection{Float64}}),arg1,arg2)
    return err
end

function DMPlexGetSupportSection(arg1::DM{Float64},arg2::Union{Ptr{PetscSection{Float64}},StridedArray{PetscSection{Float64}},Ptr{PetscSection{Float64}},Ref{PetscSection{Float64}}})
    err = ccall((:DMPlexGetSupportSection,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{PetscSection{Float64}}),arg1,arg2)
    return err
end

function DMPlexGetCones(arg1::DM{Float64},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMPlexGetCones,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function DMPlexGetConeOrientations(arg1::DM{Float64},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMPlexGetConeOrientations,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function DMPlexGetMaxSizes(arg1::DM{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetMaxSizes,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function DMPlexSymmetrize(arg1::DM{Float64})
    err = ccall((:DMPlexSymmetrize,petscRealDouble),PetscErrorCode,(DM{Float64},),arg1)
    return err
end

function DMPlexStratify(arg1::DM{Float64})
    err = ccall((:DMPlexStratify,petscRealDouble),PetscErrorCode,(DM{Float64},),arg1)
    return err
end

function DMPlexEqual(arg1::DM{Float64},arg2::DM{Float64},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:DMPlexEqual,petscRealDouble),PetscErrorCode,(DM{Float64},DM{Float64},Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function DMPlexReverseCell(arg1::DM{Float64},arg2::Integer)
    err = ccall((:DMPlexReverseCell,petscRealDouble),PetscErrorCode,(DM{Float64},Int64),arg1,arg2)
    return err
end

function DMPlexOrient(arg1::DM{Float64})
    err = ccall((:DMPlexOrient,petscRealDouble),PetscErrorCode,(DM{Float64},),arg1)
    return err
end

function DMPlexInterpolate(arg1::DM{Float64},arg2::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:DMPlexInterpolate,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{DM{Float64}}),arg1,arg2)
    return err
end

function DMPlexUninterpolate(arg1::DM{Float64},arg2::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:DMPlexUninterpolate,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{DM{Float64}}),arg1,arg2)
    return err
end

function DMPlexLoad(arg1::PetscViewer{Float64},arg2::DM{Float64})
    err = ccall((:DMPlexLoad,petscRealDouble),PetscErrorCode,(PetscViewer{Float64},DM{Float64}),arg1,arg2)
    return err
end

function DMPlexPreallocateOperator(arg1::DM{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Mat{Float64},arg8::PetscBool)
    err = ccall((:DMPlexPreallocateOperator,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Mat{Float64},PetscBool),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function DMPlexGetPointLocal(arg1::DM{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetPointLocal,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexPointLocalRead(arg1::DM{Float64},arg2::Integer,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMPlexPointLocalRead,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Ptr{Float64},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexPointLocalRef(arg1::DM{Float64},arg2::Integer,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMPlexPointLocalRef,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Ptr{Float64},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexGetPointLocalField(arg1::DM{Float64},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetPointLocalField,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexPointLocalFieldRef(arg1::DM{Float64},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMPlexPointLocalFieldRef,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Int64,Ptr{Float64},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexPointLocalFieldRead(arg1::DM{Float64},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMPlexPointLocalFieldRead,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Int64,Ptr{Float64},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexGetPointGlobal(arg1::DM{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetPointGlobal,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexPointGlobalRead(arg1::DM{Float64},arg2::Integer,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMPlexPointGlobalRead,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Ptr{Float64},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexPointGlobalRef(arg1::DM{Float64},arg2::Integer,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMPlexPointGlobalRef,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Ptr{Float64},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexGetPointGlobalField(arg1::DM{Float64},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetPointGlobalField,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexPointGlobalFieldRef(arg1::DM{Float64},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMPlexPointGlobalFieldRef,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Int64,Ptr{Float64},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexPointGlobalFieldRead(arg1::DM{Float64},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMPlexPointGlobalFieldRead,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Int64,Ptr{Float64},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMLabelCreate(arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{DMLabel{Float64}},StridedArray{DMLabel{Float64}},Ptr{DMLabel{Float64}},Ref{DMLabel{Float64}}})
    err = ccall((:DMLabelCreate,petscRealDouble),PetscErrorCode,(Cstring,Ptr{DMLabel{Float64}}),arg1,arg2)
    return err
end

function DMLabelView(arg1::DMLabel{Float64},arg2::PetscViewer{Float64})
    err = ccall((:DMLabelView,petscRealDouble),PetscErrorCode,(DMLabel{Float64},PetscViewer{Float64}),arg1,arg2)
    return err
end

function DMLabelDestroy(arg1::Union{Ptr{DMLabel{Float64}},StridedArray{DMLabel{Float64}},Ptr{DMLabel{Float64}},Ref{DMLabel{Float64}}})
    err = ccall((:DMLabelDestroy,petscRealDouble),PetscErrorCode,(Ptr{DMLabel{Float64}},),arg1)
    return err
end

function DMLabelDuplicate(arg1::DMLabel{Float64},arg2::Union{Ptr{DMLabel{Float64}},StridedArray{DMLabel{Float64}},Ptr{DMLabel{Float64}},Ref{DMLabel{Float64}}})
    err = ccall((:DMLabelDuplicate,petscRealDouble),PetscErrorCode,(DMLabel{Float64},Ptr{DMLabel{Float64}}),arg1,arg2)
    return err
end

function DMLabelGetName(arg1::DMLabel{Float64},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:DMLabelGetName,petscRealDouble),PetscErrorCode,(DMLabel{Float64},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function DMLabelGetValue(arg1::DMLabel{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMLabelGetValue,petscRealDouble),PetscErrorCode,(DMLabel{Float64},Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function DMLabelSetValue(arg1::DMLabel{Float64},arg2::Integer,arg3::Integer)
    err = ccall((:DMLabelSetValue,petscRealDouble),PetscErrorCode,(DMLabel{Float64},Int64,Int64),arg1,arg2,arg3)
    return err
end

function DMLabelClearValue(arg1::DMLabel{Float64},arg2::Integer,arg3::Integer)
    err = ccall((:DMLabelClearValue,petscRealDouble),PetscErrorCode,(DMLabel{Float64},Int64,Int64),arg1,arg2,arg3)
    return err
end

function DMLabelInsertIS(arg1::DMLabel{Float64},arg2::IS{Float64},arg3::Integer)
    err = ccall((:DMLabelInsertIS,petscRealDouble),PetscErrorCode,(DMLabel{Float64},IS{Float64},Int64),arg1,arg2,arg3)
    return err
end

function DMLabelGetNumValues(arg1::DMLabel{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMLabelGetNumValues,petscRealDouble),PetscErrorCode,(DMLabel{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function DMLabelGetStratumBounds(arg1::DMLabel{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMLabelGetStratumBounds,petscRealDouble),PetscErrorCode,(DMLabel{Float64},Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function DMLabelGetValueIS(arg1::DMLabel{Float64},arg2::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:DMLabelGetValueIS,petscRealDouble),PetscErrorCode,(DMLabel{Float64},Ptr{IS{Float64}}),arg1,arg2)
    return err
end

function DMLabelStratumHasPoint(arg1::DMLabel{Float64},arg2::Integer,arg3::Integer,arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:DMLabelStratumHasPoint,petscRealDouble),PetscErrorCode,(DMLabel{Float64},Int64,Int64,Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function DMLabelGetStratumSize(arg1::DMLabel{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMLabelGetStratumSize,petscRealDouble),PetscErrorCode,(DMLabel{Float64},Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function DMLabelGetStratumIS(arg1::DMLabel{Float64},arg2::Integer,arg3::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:DMLabelGetStratumIS,petscRealDouble),PetscErrorCode,(DMLabel{Float64},Int64,Ptr{IS{Float64}}),arg1,arg2,arg3)
    return err
end

function DMLabelClearStratum(arg1::DMLabel{Float64},arg2::Integer)
    err = ccall((:DMLabelClearStratum,petscRealDouble),PetscErrorCode,(DMLabel{Float64},Int64),arg1,arg2)
    return err
end

function DMLabelCreateIndex(arg1::DMLabel{Float64},arg2::Integer,arg3::Integer)
    err = ccall((:DMLabelCreateIndex,petscRealDouble),PetscErrorCode,(DMLabel{Float64},Int64,Int64),arg1,arg2,arg3)
    return err
end

function DMLabelDestroyIndex(arg1::DMLabel{Float64})
    err = ccall((:DMLabelDestroyIndex,petscRealDouble),PetscErrorCode,(DMLabel{Float64},),arg1)
    return err
end

function DMLabelHasValue(arg1::DMLabel{Float64},arg2::Integer,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:DMLabelHasValue,petscRealDouble),PetscErrorCode,(DMLabel{Float64},Int64,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function DMLabelHasPoint(arg1::DMLabel{Float64},arg2::Integer,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:DMLabelHasPoint,petscRealDouble),PetscErrorCode,(DMLabel{Float64},Int64,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function DMLabelFilter(arg1::DMLabel{Float64},arg2::Integer,arg3::Integer)
    err = ccall((:DMLabelFilter,petscRealDouble),PetscErrorCode,(DMLabel{Float64},Int64,Int64),arg1,arg2,arg3)
    return err
end

function DMLabelPermute(arg1::DMLabel{Float64},arg2::IS{Float64},arg3::Union{Ptr{DMLabel{Float64}},StridedArray{DMLabel{Float64}},Ptr{DMLabel{Float64}},Ref{DMLabel{Float64}}})
    err = ccall((:DMLabelPermute,petscRealDouble),PetscErrorCode,(DMLabel{Float64},IS{Float64},Ptr{DMLabel{Float64}}),arg1,arg2,arg3)
    return err
end

function DMLabelDistribute(arg1::DMLabel{Float64},arg2::PetscSF{Float64},arg3::Union{Ptr{DMLabel{Float64}},StridedArray{DMLabel{Float64}},Ptr{DMLabel{Float64}},Ref{DMLabel{Float64}}})
    err = ccall((:DMLabelDistribute,petscRealDouble),PetscErrorCode,(DMLabel{Float64},PetscSF{Float64},Ptr{DMLabel{Float64}}),arg1,arg2,arg3)
    return err
end

function DMPlexCreateLabel(arg1::DM{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:DMPlexCreateLabel,petscRealDouble),PetscErrorCode,(DM{Float64},Cstring),arg1,arg2)
    return err
end

function DMPlexGetLabelValue(arg1::DM{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetLabelValue,petscRealDouble),PetscErrorCode,(DM{Float64},Cstring,Int64,Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexSetLabelValue(arg1::DM{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer,arg4::Integer)
    err = ccall((:DMPlexSetLabelValue,petscRealDouble),PetscErrorCode,(DM{Float64},Cstring,Int64,Int64),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexClearLabelValue(arg1::DM{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer,arg4::Integer)
    err = ccall((:DMPlexClearLabelValue,petscRealDouble),PetscErrorCode,(DM{Float64},Cstring,Int64,Int64),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexGetLabelSize(arg1::DM{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetLabelSize,petscRealDouble),PetscErrorCode,(DM{Float64},Cstring,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function DMPlexGetLabelIdIS(arg1::DM{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:DMPlexGetLabelIdIS,petscRealDouble),PetscErrorCode,(DM{Float64},Cstring,Ptr{IS{Float64}}),arg1,arg2,arg3)
    return err
end

function DMPlexGetStratumSize(arg1::DM{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetStratumSize,petscRealDouble),PetscErrorCode,(DM{Float64},Cstring,Int64,Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexGetStratumIS(arg1::DM{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer,arg4::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:DMPlexGetStratumIS,petscRealDouble),PetscErrorCode,(DM{Float64},Cstring,Int64,Ptr{IS{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexClearLabelStratum(arg1::DM{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer)
    err = ccall((:DMPlexClearLabelStratum,petscRealDouble),PetscErrorCode,(DM{Float64},Cstring,Int64),arg1,arg2,arg3)
    return err
end

function DMPlexGetLabelOutput(arg1::DM{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:DMPlexGetLabelOutput,petscRealDouble),PetscErrorCode,(DM{Float64},Cstring,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function DMPlexSetLabelOutput(arg1::DM{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::PetscBool)
    err = ccall((:DMPlexSetLabelOutput,petscRealDouble),PetscErrorCode,(DM{Float64},Cstring,PetscBool),arg1,arg2,arg3)
    return err
end

function PetscSectionCreateGlobalSectionLabel(arg1::PetscSection{Float64},arg2::PetscSF{Float64},arg3::PetscBool,arg4::DMLabel{Float64},arg5::Integer,arg6::Union{Ptr{PetscSection{Float64}},StridedArray{PetscSection{Float64}},Ptr{PetscSection{Float64}},Ref{PetscSection{Float64}}})
    err = ccall((:PetscSectionCreateGlobalSectionLabel,petscRealDouble),PetscErrorCode,(PetscSection{Float64},PetscSF{Float64},PetscBool,DMLabel{Float64},Int64,Ptr{PetscSection{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMPlexGetNumLabels(arg1::DM{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetNumLabels,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function DMPlexGetLabelName(arg1::DM{Float64},arg2::Integer,arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:DMPlexGetLabelName,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Ptr{Ptr{UInt8}}),arg1,arg2,arg3)
    return err
end

function DMPlexHasLabel(arg1::DM{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:DMPlexHasLabel,petscRealDouble),PetscErrorCode,(DM{Float64},Cstring,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function DMPlexGetLabel(arg1::DM{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{DMLabel{Float64}},StridedArray{DMLabel{Float64}},Ptr{DMLabel{Float64}},Ref{DMLabel{Float64}}})
    err = ccall((:DMPlexGetLabel,petscRealDouble),PetscErrorCode,(DM{Float64},Cstring,Ptr{DMLabel{Float64}}),arg1,arg2,arg3)
    return err
end

function DMPlexGetLabelByNum(arg1::DM{Float64},arg2::Integer,arg3::Union{Ptr{DMLabel{Float64}},StridedArray{DMLabel{Float64}},Ptr{DMLabel{Float64}},Ref{DMLabel{Float64}}})
    err = ccall((:DMPlexGetLabelByNum,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Ptr{DMLabel{Float64}}),arg1,arg2,arg3)
    return err
end

function DMPlexAddLabel(arg1::DM{Float64},arg2::DMLabel{Float64})
    err = ccall((:DMPlexAddLabel,petscRealDouble),PetscErrorCode,(DM{Float64},DMLabel{Float64}),arg1,arg2)
    return err
end

function DMPlexRemoveLabel(arg1::DM{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{DMLabel{Float64}},StridedArray{DMLabel{Float64}},Ptr{DMLabel{Float64}},Ref{DMLabel{Float64}}})
    err = ccall((:DMPlexRemoveLabel,petscRealDouble),PetscErrorCode,(DM{Float64},Cstring,Ptr{DMLabel{Float64}}),arg1,arg2,arg3)
    return err
end

function DMPlexGetCellNumbering(arg1::DM{Float64},arg2::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:DMPlexGetCellNumbering,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{IS{Float64}}),arg1,arg2)
    return err
end

function DMPlexGetVertexNumbering(arg1::DM{Float64},arg2::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:DMPlexGetVertexNumbering,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{IS{Float64}}),arg1,arg2)
    return err
end

function DMPlexCreatePointNumbering(arg1::DM{Float64},arg2::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:DMPlexCreatePointNumbering,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{IS{Float64}}),arg1,arg2)
    return err
end

function DMPlexGetDepth(arg1::DM{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetDepth,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function DMPlexGetDepthLabel(arg1::DM{Float64},arg2::Union{Ptr{DMLabel{Float64}},StridedArray{DMLabel{Float64}},Ptr{DMLabel{Float64}},Ref{DMLabel{Float64}}})
    err = ccall((:DMPlexGetDepthLabel,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{DMLabel{Float64}}),arg1,arg2)
    return err
end

function DMPlexGetDepthStratum(arg1::DM{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetDepthStratum,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexGetHeightStratum(arg1::DM{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetHeightStratum,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexGetMeet(arg1::DM{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMPlexGetMeet,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Ptr{Int64},Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexGetFullMeet(arg1::DM{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMPlexGetFullMeet,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Ptr{Int64},Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexRestoreMeet(arg1::DM{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMPlexRestoreMeet,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Ptr{Int64},Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexGetJoin(arg1::DM{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMPlexGetJoin,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Ptr{Int64},Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexGetFullJoin(arg1::DM{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMPlexGetFullJoin,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Ptr{Int64},Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexRestoreJoin(arg1::DM{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMPlexRestoreJoin,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Ptr{Int64},Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexGetTransitiveClosure(arg1::DM{Float64},arg2::Integer,arg3::PetscBool,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMPlexGetTransitiveClosure,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,PetscBool,Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexRestoreTransitiveClosure(arg1::DM{Float64},arg2::Integer,arg3::PetscBool,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMPlexRestoreTransitiveClosure,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,PetscBool,Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexGenerate(arg1::DM{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::PetscBool,arg4::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:DMPlexGenerate,petscRealDouble),PetscErrorCode,(DM{Float64},Cstring,PetscBool,Ptr{DM{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexCopyCoordinates(arg1::DM{Float64},arg2::DM{Float64})
    err = ccall((:DMPlexCopyCoordinates,petscRealDouble),PetscErrorCode,(DM{Float64},DM{Float64}),arg1,arg2)
    return err
end

function DMPlexCopyLabels(arg1::DM{Float64},arg2::DM{Float64})
    err = ccall((:DMPlexCopyLabels,petscRealDouble),PetscErrorCode,(DM{Float64},DM{Float64}),arg1,arg2)
    return err
end

function DMPlexCreateDoublet(arg1::MPI_Comm,arg2::Integer,arg3::PetscBool,arg4::PetscBool,arg5::PetscBool,arg6::Float64,arg7::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:DMPlexCreateDoublet,petscRealDouble),PetscErrorCode,(comm_type,Int64,PetscBool,PetscBool,PetscBool,Float64,Ptr{DM{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function DMPlexCreateSquareBoundary(arg1::DM{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexCreateSquareBoundary,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Float64},Ptr{Float64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexCreateCubeBoundary(arg1::DM{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexCreateCubeBoundary,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Float64},Ptr{Float64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexCreateSquareMesh(arg1::DM{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::DMBoundaryType,arg6::DMBoundaryType)
    err = ccall((:DMPlexCreateSquareMesh,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Float64},Ptr{Float64},Ptr{Int64},DMBoundaryType,DMBoundaryType),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMPlexCreateBoxMesh(arg1::MPI_Comm,arg2::Integer,arg3::PetscBool,arg4::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:DMPlexCreateBoxMesh,petscRealDouble),PetscErrorCode,(comm_type,Int64,PetscBool,Ptr{DM{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexCreateHexBoxMesh(arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::DMBoundaryType,arg5::DMBoundaryType,arg6::DMBoundaryType,arg7::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:DMPlexCreateHexBoxMesh,petscRealDouble),PetscErrorCode,(comm_type,Int64,Ptr{Int64},DMBoundaryType,DMBoundaryType,DMBoundaryType,Ptr{DM{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function DMPlexCreateConeSection(arg1::DM{Float64},arg2::Union{Ptr{PetscSection{Float64}},StridedArray{PetscSection{Float64}},Ptr{PetscSection{Float64}},Ref{PetscSection{Float64}}})
    err = ccall((:DMPlexCreateConeSection,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{PetscSection{Float64}}),arg1,arg2)
    return err
end

function DMPlexInvertCell(arg0::Type{Float64},arg1::Integer,arg2::Integer,arg3::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:DMPlexInvertCell,petscRealDouble),PetscErrorCode,(Int64,Int64,Ptr{Cint}),arg1,arg2,arg3)
    return err
end

function DMPlexLocalizeCoordinate(arg1::DM{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:DMPlexLocalizeCoordinate,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function DMPlexLocalizeCoordinates(arg1::DM{Float64})
    err = ccall((:DMPlexLocalizeCoordinates,petscRealDouble),PetscErrorCode,(DM{Float64},),arg1)
    return err
end

function DMPlexCheckSymmetry(arg1::DM{Float64})
    err = ccall((:DMPlexCheckSymmetry,petscRealDouble),PetscErrorCode,(DM{Float64},),arg1)
    return err
end

function DMPlexCheckSkeleton(arg1::DM{Float64},arg2::PetscBool,arg3::Integer)
    err = ccall((:DMPlexCheckSkeleton,petscRealDouble),PetscErrorCode,(DM{Float64},PetscBool,Int64),arg1,arg2,arg3)
    return err
end

function DMPlexCheckFaces(arg1::DM{Float64},arg2::PetscBool,arg3::Integer)
    err = ccall((:DMPlexCheckFaces,petscRealDouble),PetscErrorCode,(DM{Float64},PetscBool,Int64),arg1,arg2,arg3)
    return err
end

function DMPlexTriangleSetOptions(arg1::DM{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:DMPlexTriangleSetOptions,petscRealDouble),PetscErrorCode,(DM{Float64},Cstring),arg1,arg2)
    return err
end

function DMPlexTetgenSetOptions(arg1::DM{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:DMPlexTetgenSetOptions,petscRealDouble),PetscErrorCode,(DM{Float64},Cstring),arg1,arg2)
    return err
end

function DMPlexCreateNeighborCSR(arg1::DM{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMPlexCreateNeighborCSR,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexGetPartitioner(arg1::DM{Float64},arg2::Union{Ptr{PetscPartitioner{Float64}},StridedArray{PetscPartitioner{Float64}},Ptr{PetscPartitioner{Float64}},Ref{PetscPartitioner{Float64}}})
    err = ccall((:DMPlexGetPartitioner,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{PetscPartitioner{Float64}}),arg1,arg2)
    return err
end

function DMPlexSetPartitioner(arg1::DM{Float64},arg2::PetscPartitioner{Float64})
    err = ccall((:DMPlexSetPartitioner,petscRealDouble),PetscErrorCode,(DM{Float64},PetscPartitioner{Float64}),arg1,arg2)
    return err
end

function DMPlexCreatePartition(arg1::DM{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer,arg4::PetscBool,arg5::Union{Ptr{PetscSection{Float64}},StridedArray{PetscSection{Float64}},Ptr{PetscSection{Float64}},Ref{PetscSection{Float64}}},arg6::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}},arg7::Union{Ptr{PetscSection{Float64}},StridedArray{PetscSection{Float64}},Ptr{PetscSection{Float64}},Ref{PetscSection{Float64}}},arg8::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:DMPlexCreatePartition,petscRealDouble),PetscErrorCode,(DM{Float64},Cstring,Int64,PetscBool,Ptr{PetscSection{Float64}},Ptr{IS{Float64}},Ptr{PetscSection{Float64}},Ptr{IS{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function DMPlexCreatePartitionerGraph(arg1::DM{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMPlexCreatePartitionerGraph,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexCreatePartitionClosure(arg1::DM{Float64},arg2::PetscSection{Float64},arg3::IS{Float64},arg4::Union{Ptr{PetscSection{Float64}},StridedArray{PetscSection{Float64}},Ptr{PetscSection{Float64}},Ref{PetscSection{Float64}}},arg5::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:DMPlexCreatePartitionClosure,petscRealDouble),PetscErrorCode,(DM{Float64},PetscSection{Float64},IS{Float64},Ptr{PetscSection{Float64}},Ptr{IS{Float64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexPartitionLabelInvert(arg1::DM{Float64},arg2::DMLabel{Float64},arg3::PetscSF{Float64},arg4::DMLabel{Float64})
    err = ccall((:DMPlexPartitionLabelInvert,petscRealDouble),PetscErrorCode,(DM{Float64},DMLabel{Float64},PetscSF{Float64},DMLabel{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexPartitionLabelClosure(arg1::DM{Float64},arg2::DMLabel{Float64})
    err = ccall((:DMPlexPartitionLabelClosure,petscRealDouble),PetscErrorCode,(DM{Float64},DMLabel{Float64}),arg1,arg2)
    return err
end

function DMPlexPartitionLabelAdjacency(arg1::DM{Float64},arg2::DMLabel{Float64})
    err = ccall((:DMPlexPartitionLabelAdjacency,petscRealDouble),PetscErrorCode,(DM{Float64},DMLabel{Float64}),arg1,arg2)
    return err
end

function DMPlexPartitionLabelCreateSF(arg1::DM{Float64},arg2::DMLabel{Float64},arg3::Union{Ptr{PetscSF{Float64}},StridedArray{PetscSF{Float64}},Ptr{PetscSF{Float64}},Ref{PetscSF{Float64}}})
    err = ccall((:DMPlexPartitionLabelCreateSF,petscRealDouble),PetscErrorCode,(DM{Float64},DMLabel{Float64},Ptr{PetscSF{Float64}}),arg1,arg2,arg3)
    return err
end

function DMPlexDistribute(arg1::DM{Float64},arg2::Integer,arg3::Union{Ptr{PetscSF{Float64}},StridedArray{PetscSF{Float64}},Ptr{PetscSF{Float64}},Ref{PetscSF{Float64}}},arg4::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:DMPlexDistribute,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Ptr{PetscSF{Float64}},Ptr{DM{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexDistributeOverlap(arg1::DM{Float64},arg2::Integer,arg3::Union{Ptr{PetscSF{Float64}},StridedArray{PetscSF{Float64}},Ptr{PetscSF{Float64}},Ref{PetscSF{Float64}}},arg4::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:DMPlexDistributeOverlap,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Ptr{PetscSF{Float64}},Ptr{DM{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexDistributeField(arg1::DM{Float64},arg2::PetscSF{Float64},arg3::PetscSection{Float64},arg4::Vec{Float64},arg5::PetscSection{Float64},arg6::Vec{Float64})
    err = ccall((:DMPlexDistributeField,petscRealDouble),PetscErrorCode,(DM{Float64},PetscSF{Float64},PetscSection{Float64},Vec{Float64},PetscSection{Float64},Vec{Float64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMPlexDistributeFieldIS(arg1::DM{Float64},arg2::PetscSF{Float64},arg3::PetscSection{Float64},arg4::IS{Float64},arg5::PetscSection{Float64},arg6::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:DMPlexDistributeFieldIS,petscRealDouble),PetscErrorCode,(DM{Float64},PetscSF{Float64},PetscSection{Float64},IS{Float64},PetscSection{Float64},Ptr{IS{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

#= skipping function with undefined symbols: 
 function DMPlexDistributeData(arg1::DM{Float64},arg2::PetscSF{Float64},arg3::PetscSection{Float64},arg4::MPI_Datatype,arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg6::PetscSection{Float64},arg7::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    ccall((:DMPlexDistributeData,petscRealDouble),PetscErrorCode,(DM{Float64},PetscSF{Float64},PetscSection{Float64},MPI_Datatype,Ptr{Void},PetscSection{Float64},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end 
=#
function DMPlexMigrate(arg1::DM{Float64},arg2::PetscSF{Float64},arg3::DM{Float64})
    err = ccall((:DMPlexMigrate,petscRealDouble),PetscErrorCode,(DM{Float64},PetscSF{Float64},DM{Float64}),arg1,arg2,arg3)
    return err
end

function DMPlexSetAdjacencyUseCone(arg1::DM{Float64},arg2::PetscBool)
    err = ccall((:DMPlexSetAdjacencyUseCone,petscRealDouble),PetscErrorCode,(DM{Float64},PetscBool),arg1,arg2)
    return err
end

function DMPlexGetAdjacencyUseCone(arg1::DM{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:DMPlexGetAdjacencyUseCone,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function DMPlexSetAdjacencyUseClosure(arg1::DM{Float64},arg2::PetscBool)
    err = ccall((:DMPlexSetAdjacencyUseClosure,petscRealDouble),PetscErrorCode,(DM{Float64},PetscBool),arg1,arg2)
    return err
end

function DMPlexGetAdjacencyUseClosure(arg1::DM{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:DMPlexGetAdjacencyUseClosure,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function DMPlexSetAdjacencyUseAnchors(arg1::DM{Float64},arg2::PetscBool)
    err = ccall((:DMPlexSetAdjacencyUseAnchors,petscRealDouble),PetscErrorCode,(DM{Float64},PetscBool),arg1,arg2)
    return err
end

function DMPlexGetAdjacencyUseAnchors(arg1::DM{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:DMPlexGetAdjacencyUseAnchors,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function DMPlexGetAdjacency(arg1::DM{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMPlexGetAdjacency,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexGetOrdering(arg1::DM{Float64},arg2::MatOrderingType,arg3::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:DMPlexGetOrdering,petscRealDouble),PetscErrorCode,(DM{Float64},MatOrderingType,Ptr{IS{Float64}}),arg1,arg2,arg3)
    return err
end

function DMPlexPermute(arg1::DM{Float64},arg2::IS{Float64},arg3::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:DMPlexPermute,petscRealDouble),PetscErrorCode,(DM{Float64},IS{Float64},Ptr{DM{Float64}}),arg1,arg2,arg3)
    return err
end

function DMPlexCreateProcessSF(arg1::DM{Float64},arg2::PetscSF{Float64},arg3::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}},arg4::Union{Ptr{PetscSF{Float64}},StridedArray{PetscSF{Float64}},Ptr{PetscSF{Float64}},Ref{PetscSF{Float64}}})
    err = ccall((:DMPlexCreateProcessSF,petscRealDouble),PetscErrorCode,(DM{Float64},PetscSF{Float64},Ptr{IS{Float64}},Ptr{PetscSF{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexCreateTwoSidedProcessSF(arg1::DM{Float64},arg2::PetscSF{Float64},arg3::PetscSection{Float64},arg4::IS{Float64},arg5::PetscSection{Float64},arg6::IS{Float64},arg7::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}},arg8::Union{Ptr{PetscSF{Float64}},StridedArray{PetscSF{Float64}},Ptr{PetscSF{Float64}},Ref{PetscSF{Float64}}})
    err = ccall((:DMPlexCreateTwoSidedProcessSF,petscRealDouble),PetscErrorCode,(DM{Float64},PetscSF{Float64},PetscSection{Float64},IS{Float64},PetscSection{Float64},IS{Float64},Ptr{IS{Float64}},Ptr{PetscSF{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function DMPlexDistributeOwnership(arg1::DM{Float64},arg2::PetscSection{Float64},arg3::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}},arg4::PetscSection{Float64},arg5::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:DMPlexDistributeOwnership,petscRealDouble),PetscErrorCode,(DM{Float64},PetscSection{Float64},Ptr{IS{Float64}},PetscSection{Float64},Ptr{IS{Float64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexCreateOverlap(arg1::DM{Float64},arg2::Integer,arg3::PetscSection{Float64},arg4::IS{Float64},arg5::PetscSection{Float64},arg6::IS{Float64},arg7::Union{Ptr{DMLabel{Float64}},StridedArray{DMLabel{Float64}},Ptr{DMLabel{Float64}},Ref{DMLabel{Float64}}})
    err = ccall((:DMPlexCreateOverlap,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,PetscSection{Float64},IS{Float64},PetscSection{Float64},IS{Float64},Ptr{DMLabel{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function DMPlexCreateOverlapMigrationSF(arg1::DM{Float64},arg2::PetscSF{Float64},arg3::Union{Ptr{PetscSF{Float64}},StridedArray{PetscSF{Float64}},Ptr{PetscSF{Float64}},Ref{PetscSF{Float64}}})
    err = ccall((:DMPlexCreateOverlapMigrationSF,petscRealDouble),PetscErrorCode,(DM{Float64},PetscSF{Float64},Ptr{PetscSF{Float64}}),arg1,arg2,arg3)
    return err
end

function DMPlexStratifyMigrationSF(arg1::DM{Float64},arg2::PetscSF{Float64},arg3::Union{Ptr{PetscSF{Float64}},StridedArray{PetscSF{Float64}},Ptr{PetscSF{Float64}},Ref{PetscSF{Float64}}})
    err = ccall((:DMPlexStratifyMigrationSF,petscRealDouble),PetscErrorCode,(DM{Float64},PetscSF{Float64},Ptr{PetscSF{Float64}}),arg1,arg2,arg3)
    return err
end

function DMPlexCreateSubmesh(arg1::DM{Float64},arg2::DMLabel{Float64},arg3::Integer,arg4::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:DMPlexCreateSubmesh,petscRealDouble),PetscErrorCode,(DM{Float64},DMLabel{Float64},Int64,Ptr{DM{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexCreateHybridMesh(arg1::DM{Float64},arg2::DMLabel{Float64},arg3::Union{Ptr{DMLabel{Float64}},StridedArray{DMLabel{Float64}},Ptr{DMLabel{Float64}},Ref{DMLabel{Float64}}},arg4::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:DMPlexCreateHybridMesh,petscRealDouble),PetscErrorCode,(DM{Float64},DMLabel{Float64},Ptr{DMLabel{Float64}},Ptr{DM{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexGetSubpointMap(arg1::DM{Float64},arg2::Union{Ptr{DMLabel{Float64}},StridedArray{DMLabel{Float64}},Ptr{DMLabel{Float64}},Ref{DMLabel{Float64}}})
    err = ccall((:DMPlexGetSubpointMap,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{DMLabel{Float64}}),arg1,arg2)
    return err
end

function DMPlexSetSubpointMap(arg1::DM{Float64},arg2::DMLabel{Float64})
    err = ccall((:DMPlexSetSubpointMap,petscRealDouble),PetscErrorCode,(DM{Float64},DMLabel{Float64}),arg1,arg2)
    return err
end

function DMPlexCreateSubpointIS(arg1::DM{Float64},arg2::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:DMPlexCreateSubpointIS,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{IS{Float64}}),arg1,arg2)
    return err
end

function DMPlexMarkBoundaryFaces(arg1::DM{Float64},arg2::DMLabel{Float64})
    err = ccall((:DMPlexMarkBoundaryFaces,petscRealDouble),PetscErrorCode,(DM{Float64},DMLabel{Float64}),arg1,arg2)
    return err
end

function DMPlexLabelComplete(arg1::DM{Float64},arg2::DMLabel{Float64})
    err = ccall((:DMPlexLabelComplete,petscRealDouble),PetscErrorCode,(DM{Float64},DMLabel{Float64}),arg1,arg2)
    return err
end

function DMPlexLabelCohesiveComplete(arg1::DM{Float64},arg2::DMLabel{Float64},arg3::DMLabel{Float64},arg4::PetscBool,arg5::DM{Float64})
    err = ccall((:DMPlexLabelCohesiveComplete,petscRealDouble),PetscErrorCode,(DM{Float64},DMLabel{Float64},DMLabel{Float64},PetscBool,DM{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexLabelAddCells(arg1::DM{Float64},arg2::DMLabel{Float64})
    err = ccall((:DMPlexLabelAddCells,petscRealDouble),PetscErrorCode,(DM{Float64},DMLabel{Float64}),arg1,arg2)
    return err
end

function DMPlexGetRefinementLimit(arg1::DM{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:DMPlexGetRefinementLimit,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Float64}),arg1,arg2)
    return err
end

function DMPlexSetRefinementLimit(arg1::DM{Float64},arg2::Float64)
    err = ccall((:DMPlexSetRefinementLimit,petscRealDouble),PetscErrorCode,(DM{Float64},Float64),arg1,arg2)
    return err
end

function DMPlexGetRefinementUniform(arg1::DM{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:DMPlexGetRefinementUniform,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function DMPlexSetRefinementUniform(arg1::DM{Float64},arg2::PetscBool)
    err = ccall((:DMPlexSetRefinementUniform,petscRealDouble),PetscErrorCode,(DM{Float64},PetscBool),arg1,arg2)
    return err
end

function DMPlexGetCoarseDM(arg1::DM{Float64},arg2::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:DMPlexGetCoarseDM,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{DM{Float64}}),arg1,arg2)
    return err
end

function DMPlexSetCoarseDM(arg1::DM{Float64},arg2::DM{Float64})
    err = ccall((:DMPlexSetCoarseDM,petscRealDouble),PetscErrorCode,(DM{Float64},DM{Float64}),arg1,arg2)
    return err
end

function DMPlexCreateCoarsePointIS(arg1::DM{Float64},arg2::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:DMPlexCreateCoarsePointIS,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{IS{Float64}}),arg1,arg2)
    return err
end

function DMPlexGetNumFaceVertices(arg1::DM{Float64},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetNumFaceVertices,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Int64,Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexGetOrientedFace(arg1::DM{Float64},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg9::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:DMPlexGetOrientedFace,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Int64,Ptr{Int64},Int64,Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
    return err
end

function DMPlexGetMinRadius(arg1::DM{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:DMPlexGetMinRadius,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Float64}),arg1,arg2)
    return err
end

function DMPlexSetMinRadius(arg1::DM{Float64},arg2::Float64)
    err = ccall((:DMPlexSetMinRadius,petscRealDouble),PetscErrorCode,(DM{Float64},Float64),arg1,arg2)
    return err
end

function DMPlexComputeCellGeometryFVM(arg1::DM{Float64},arg2::Integer,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:DMPlexComputeCellGeometryFVM,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Ptr{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexComputeGeometryFVM(arg1::DM{Float64},arg2::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}},arg3::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:DMPlexComputeGeometryFVM,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Vec{Float64}},Ptr{Vec{Float64}}),arg1,arg2,arg3)
    return err
end

function DMPlexComputeGradientFVM(arg1::DM{Float64},arg2::PetscFV{Float64},arg3::Vec{Float64},arg4::Vec{Float64},arg5::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:DMPlexComputeGradientFVM,petscRealDouble),PetscErrorCode,(DM{Float64},PetscFV{Float64},Vec{Float64},Vec{Float64},Ptr{DM{Float64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexInsertBoundaryValues(arg1::DM{Float64},arg2::Vec{Float64},arg3::Float64,arg4::Vec{Float64},arg5::Vec{Float64},arg6::Vec{Float64})
    err = ccall((:DMPlexInsertBoundaryValues,petscRealDouble),PetscErrorCode,(DM{Float64},Vec{Float64},Float64,Vec{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMPlexCreateSection(arg1::DM{Float64},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Integer,arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}},arg9::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}},arg10::IS{Float64},arg11::Union{Ptr{PetscSection{Float64}},StridedArray{PetscSection{Float64}},Ptr{PetscSection{Float64}},Ref{PetscSection{Float64}}})
    err = ccall((:DMPlexCreateSection,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Int64,Ptr{Int64},Ptr{Int64},Int64,Ptr{Int64},Ptr{IS{Float64}},Ptr{IS{Float64}},IS{Float64},Ptr{PetscSection{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11)
    return err
end

function DMPlexComputeCellGeometryAffineFEM(arg1::DM{Float64},arg2::Integer,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:DMPlexComputeCellGeometryAffineFEM,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMPlexComputeCellGeometryFEM(arg1::DM{Float64},arg2::Integer,arg3::PetscFE{Float64},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg7::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:DMPlexComputeCellGeometryFEM,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,PetscFE{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function DMPlexComputeGeometryFEM(arg1::DM{Float64},arg2::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:DMPlexComputeGeometryFEM,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Vec{Float64}}),arg1,arg2)
    return err
end

function DMPlexVecGetClosure(arg1::DM{Float64},arg2::PetscSection{Float64},arg3::Vec{Float64},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:DMPlexVecGetClosure,petscRealDouble),PetscErrorCode,(DM{Float64},PetscSection{Float64},Vec{Float64},Int64,Ptr{Int64},Ptr{Ptr{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMPlexVecRestoreClosure(arg1::DM{Float64},arg2::PetscSection{Float64},arg3::Vec{Float64},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:DMPlexVecRestoreClosure,petscRealDouble),PetscErrorCode,(DM{Float64},PetscSection{Float64},Vec{Float64},Int64,Ptr{Int64},Ptr{Ptr{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMPlexVecSetClosure(arg1::DM{Float64},arg2::PetscSection{Float64},arg3::Vec{Float64},arg4::Integer,arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg6::InsertMode)
    err = ccall((:DMPlexVecSetClosure,petscRealDouble),PetscErrorCode,(DM{Float64},PetscSection{Float64},Vec{Float64},Int64,Ptr{Float64},InsertMode),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMPlexMatSetClosure(arg1::DM{Float64},arg2::PetscSection{Float64},arg3::PetscSection{Float64},arg4::Mat{Float64},arg5::Integer,arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg7::InsertMode)
    err = ccall((:DMPlexMatSetClosure,petscRealDouble),PetscErrorCode,(DM{Float64},PetscSection{Float64},PetscSection{Float64},Mat{Float64},Int64,Ptr{Float64},InsertMode),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function DMPlexMatSetClosureRefined(arg1::DM{Float64},arg2::PetscSection{Float64},arg3::PetscSection{Float64},arg4::DM{Float64},arg5::PetscSection{Float64},arg6::PetscSection{Float64},arg7::Mat{Float64},arg8::Integer,arg9::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg10::InsertMode)
    err = ccall((:DMPlexMatSetClosureRefined,petscRealDouble),PetscErrorCode,(DM{Float64},PetscSection{Float64},PetscSection{Float64},DM{Float64},PetscSection{Float64},PetscSection{Float64},Mat{Float64},Int64,Ptr{Float64},InsertMode),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function DMPlexMatGetClosureIndicesRefined(arg1::DM{Float64},arg2::PetscSection{Float64},arg3::PetscSection{Float64},arg4::DM{Float64},arg5::PetscSection{Float64},arg6::PetscSection{Float64},arg7::Integer,arg8::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg9::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexMatGetClosureIndicesRefined,petscRealDouble),PetscErrorCode,(DM{Float64},PetscSection{Float64},PetscSection{Float64},DM{Float64},PetscSection{Float64},PetscSection{Float64},Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
    return err
end

function DMPlexCreateClosureIndex(arg1::DM{Float64},arg2::PetscSection{Float64})
    err = ccall((:DMPlexCreateClosureIndex,petscRealDouble),PetscErrorCode,(DM{Float64},PetscSection{Float64}),arg1,arg2)
    return err
end

function DMPlexCreateFromFile(arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::PetscBool,arg4::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:DMPlexCreateFromFile,petscRealDouble),PetscErrorCode,(comm_type,Cstring,PetscBool,Ptr{DM{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexCreateExodus(arg1::MPI_Comm,arg2::Integer,arg3::PetscBool,arg4::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:DMPlexCreateExodus,petscRealDouble),PetscErrorCode,(comm_type,Int64,PetscBool,Ptr{DM{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexCreateExodusFromFile(arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::PetscBool,arg4::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:DMPlexCreateExodusFromFile,petscRealDouble),PetscErrorCode,(comm_type,Cstring,PetscBool,Ptr{DM{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexCreateCGNS(arg1::MPI_Comm,arg2::Integer,arg3::PetscBool,arg4::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:DMPlexCreateCGNS,petscRealDouble),PetscErrorCode,(comm_type,Int64,PetscBool,Ptr{DM{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexCreateCGNSFromFile(arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::PetscBool,arg4::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:DMPlexCreateCGNSFromFile,petscRealDouble),PetscErrorCode,(comm_type,Cstring,PetscBool,Ptr{DM{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexCreateGmsh(arg1::MPI_Comm,arg2::PetscViewer{Float64},arg3::PetscBool,arg4::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:DMPlexCreateGmsh,petscRealDouble),PetscErrorCode,(comm_type,PetscViewer{Float64},PetscBool,Ptr{DM{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexCreateGmshFromFile(arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::PetscBool,arg4::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:DMPlexCreateGmshFromFile,petscRealDouble),PetscErrorCode,(comm_type,Cstring,PetscBool,Ptr{DM{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexCreateFluent(arg1::MPI_Comm,arg2::PetscViewer{Float64},arg3::PetscBool,arg4::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:DMPlexCreateFluent,petscRealDouble),PetscErrorCode,(comm_type,PetscViewer{Float64},PetscBool,Ptr{DM{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexCreateFluentFromFile(arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::PetscBool,arg4::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:DMPlexCreateFluentFromFile,petscRealDouble),PetscErrorCode,(comm_type,Cstring,PetscBool,Ptr{DM{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexConstructGhostCells(arg1::DM{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:DMPlexConstructGhostCells,petscRealDouble),PetscErrorCode,(DM{Float64},Cstring,Ptr{Int64},Ptr{DM{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexConstructCohesiveCells(arg1::DM{Float64},arg2::DMLabel{Float64},arg3::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:DMPlexConstructCohesiveCells,petscRealDouble),PetscErrorCode,(DM{Float64},DMLabel{Float64},Ptr{DM{Float64}}),arg1,arg2,arg3)
    return err
end

function DMPlexGetHybridBounds(arg1::DM{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetHybridBounds,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexSetHybridBounds(arg1::DM{Float64},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer)
    err = ccall((:DMPlexSetHybridBounds,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Int64,Int64,Int64),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexGetVTKCellHeight(arg1::DM{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetVTKCellHeight,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function DMPlexSetVTKCellHeight(arg1::DM{Float64},arg2::Integer)
    err = ccall((:DMPlexSetVTKCellHeight,petscRealDouble),PetscErrorCode,(DM{Float64},Int64),arg1,arg2)
    return err
end

function DMPlexVTKWriteAll(arg1::PetscObject{Float64},arg2::PetscViewer{Float64})
    err = ccall((:DMPlexVTKWriteAll,petscRealDouble),PetscErrorCode,(PetscObject{Float64},PetscViewer{Float64}),arg1,arg2)
    return err
end

function DMPlexGetScale(arg1::DM{Float64},arg2::PetscUnit,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:DMPlexGetScale,petscRealDouble),PetscErrorCode,(DM{Float64},PetscUnit,Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function DMPlexSetScale(arg1::DM{Float64},arg2::PetscUnit,arg3::Float64)
    err = ccall((:DMPlexSetScale,petscRealDouble),PetscErrorCode,(DM{Float64},PetscUnit,Float64),arg1,arg2,arg3)
    return err
end

function DMPlexAddBoundary(arg1::DM{Float64},arg2::PetscBool,arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg5::Integer,arg6::Integer,arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg9::Integer,arg10::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg11::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMPlexAddBoundary,petscRealDouble),PetscErrorCode,(DM{Float64},PetscBool,Cstring,Cstring,Int64,Int64,Ptr{Int64},Ptr{Void},Int64,Ptr{Int64},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11)
    return err
end

function DMPlexGetNumBoundary(arg1::DM{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetNumBoundary,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function DMPlexGetBoundary(arg1::DM{Float64},arg2::Integer,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg4::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg5::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg9::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg10::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg11::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg12::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:DMPlexGetBoundary,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Ptr{PetscBool},Ptr{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ptr{Int64},Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Void}},Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12)
    return err
end

function DMPlexIsBoundaryPoint(arg1::DM{Float64},arg2::Integer,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:DMPlexIsBoundaryPoint,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function DMPlexCopyBoundary(arg1::DM{Float64},arg2::DM{Float64})
    err = ccall((:DMPlexCopyBoundary,petscRealDouble),PetscErrorCode,(DM{Float64},DM{Float64}),arg1,arg2)
    return err
end

function DMPlexInsertBoundaryValuesFEM(arg1::DM{Float64},arg2::Vec{Float64})
    err = ccall((:DMPlexInsertBoundaryValuesFEM,petscRealDouble),PetscErrorCode,(DM{Float64},Vec{Float64}),arg1,arg2)
    return err
end

function DMPlexSetMaxProjectionHeight(arg1::DM{Float64},arg2::Integer)
    err = ccall((:DMPlexSetMaxProjectionHeight,petscRealDouble),PetscErrorCode,(DM{Float64},Int64),arg1,arg2)
    return err
end

function DMPlexGetMaxProjectionHeight(arg1::DM{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetMaxProjectionHeight,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function DMPlexProjectFunction(arg1::DM{Float64},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::InsertMode,arg5::Vec{Float64})
    err = ccall((:DMPlexProjectFunction,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Ptr{Void}},Ptr{Ptr{Void}},InsertMode,Vec{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexProjectFunctionLocal(arg1::DM{Float64},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::InsertMode,arg5::Vec{Float64})
    err = ccall((:DMPlexProjectFunctionLocal,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Ptr{Void}},Ptr{Ptr{Void}},InsertMode,Vec{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexProjectFieldLocal(arg1::DM{Float64},arg2::Vec{Float64},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::InsertMode,arg5::Vec{Float64})
    err = ccall((:DMPlexProjectFieldLocal,petscRealDouble),PetscErrorCode,(DM{Float64},Vec{Float64},Ptr{Ptr{Void}},InsertMode,Vec{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexComputeL2Diff(arg1::DM{Float64},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::Vec{Float64},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:DMPlexComputeL2Diff,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Ptr{Void}},Ptr{Ptr{Void}},Vec{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexComputeL2GradientDiff(arg1::DM{Float64},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::Vec{Float64},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:DMPlexComputeL2GradientDiff,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Ptr{Void}},Ptr{Ptr{Void}},Vec{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMPlexComputeL2FieldDiff(arg1::DM{Float64},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::Vec{Float64},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:DMPlexComputeL2FieldDiff,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Ptr{Void}},Ptr{Ptr{Void}},Vec{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexComputeIntegralFEM(arg1::DM{Float64},arg2::Vec{Float64},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMPlexComputeIntegralFEM,petscRealDouble),PetscErrorCode,(DM{Float64},Vec{Float64},Ptr{Float64},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexComputeInterpolatorFEM(arg1::DM{Float64},arg2::DM{Float64},arg3::Mat{Float64},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMPlexComputeInterpolatorFEM,petscRealDouble),PetscErrorCode,(DM{Float64},DM{Float64},Mat{Float64},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexComputeInjectorFEM(arg1::DM{Float64},arg2::DM{Float64},arg3::Union{Ptr{VecScatter{Float64}},StridedArray{VecScatter{Float64}},Ptr{VecScatter{Float64}},Ref{VecScatter{Float64}}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMPlexComputeInjectorFEM,petscRealDouble),PetscErrorCode,(DM{Float64},DM{Float64},Ptr{VecScatter{Float64}},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexCreateRigidBody(arg1::DM{Float64},arg2::Union{Ptr{MatNullSpace{Float64}},StridedArray{MatNullSpace{Float64}},Ptr{MatNullSpace{Float64}},Ref{MatNullSpace{Float64}}})
    err = ccall((:DMPlexCreateRigidBody,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{MatNullSpace{Float64}}),arg1,arg2)
    return err
end

function DMPlexSNESComputeResidualFEM(arg1::DM{Float64},arg2::Vec{Float64},arg3::Vec{Float64},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMPlexSNESComputeResidualFEM,petscRealDouble),PetscErrorCode,(DM{Float64},Vec{Float64},Vec{Float64},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexSNESComputeJacobianFEM(arg1::DM{Float64},arg2::Vec{Float64},arg3::Mat{Float64},arg4::Mat{Float64},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMPlexSNESComputeJacobianFEM,petscRealDouble),PetscErrorCode,(DM{Float64},Vec{Float64},Mat{Float64},Mat{Float64},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexTSComputeRHSFunctionFVM(arg1::DM{Float64},arg2::Float64,arg3::Vec{Float64},arg4::Vec{Float64},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMPlexTSComputeRHSFunctionFVM,petscRealDouble),PetscErrorCode,(DM{Float64},Float64,Vec{Float64},Vec{Float64},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexTSComputeIFunctionFEM(arg1::DM{Float64},arg2::Float64,arg3::Vec{Float64},arg4::Vec{Float64},arg5::Vec{Float64},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMPlexTSComputeIFunctionFEM,petscRealDouble),PetscErrorCode,(DM{Float64},Float64,Vec{Float64},Vec{Float64},Vec{Float64},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMPlexComputeRHSFunctionFVM(arg1::DM{Float64},arg2::Float64,arg3::Vec{Float64},arg4::Vec{Float64},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMPlexComputeRHSFunctionFVM,petscRealDouble),PetscErrorCode,(DM{Float64},Float64,Vec{Float64},Vec{Float64},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexGetAnchors(arg1::DM{Float64},arg2::Union{Ptr{PetscSection{Float64}},StridedArray{PetscSection{Float64}},Ptr{PetscSection{Float64}},Ref{PetscSection{Float64}}},arg3::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:DMPlexGetAnchors,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{PetscSection{Float64}},Ptr{IS{Float64}}),arg1,arg2,arg3)
    return err
end

function DMPlexSetAnchors(arg1::DM{Float64},arg2::PetscSection{Float64},arg3::IS{Float64})
    err = ccall((:DMPlexSetAnchors,petscRealDouble),PetscErrorCode,(DM{Float64},PetscSection{Float64},IS{Float64}),arg1,arg2,arg3)
    return err
end

function DMPlexSetReferenceTree(arg1::DM{Float64},arg2::DM{Float64})
    err = ccall((:DMPlexSetReferenceTree,petscRealDouble),PetscErrorCode,(DM{Float64},DM{Float64}),arg1,arg2)
    return err
end

function DMPlexGetReferenceTree(arg1::DM{Float64},arg2::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:DMPlexGetReferenceTree,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{DM{Float64}}),arg1,arg2)
    return err
end

function DMPlexReferenceTreeGetChildSymmetry(arg1::DM{Float64},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexReferenceTreeGetChildSymmetry,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function DMPlexCreateDefaultReferenceTree(arg1::MPI_Comm,arg2::Integer,arg3::PetscBool,arg4::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:DMPlexCreateDefaultReferenceTree,petscRealDouble),PetscErrorCode,(comm_type,Int64,PetscBool,Ptr{DM{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexSetTree(arg1::DM{Float64},arg2::PetscSection{Float64},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexSetTree,petscRealDouble),PetscErrorCode,(DM{Float64},PetscSection{Float64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexGetTree(arg1::DM{Float64},arg2::Union{Ptr{PetscSection{Float64}},StridedArray{PetscSection{Float64}},Ptr{PetscSection{Float64}},Ref{PetscSection{Float64}}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg5::Union{Ptr{PetscSection{Float64}},StridedArray{PetscSection{Float64}},Ptr{PetscSection{Float64}},Ref{PetscSection{Float64}}},arg6::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMPlexGetTree,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{PetscSection{Float64}},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}},Ptr{PetscSection{Float64}},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function DMPlexGetTreeParent(arg1::DM{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMPlexGetTreeParent,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexGetTreeChildren(arg1::DM{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:DMPlexGetTreeChildren,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexTreeRefineCell(arg1::DM{Float64},arg2::Integer,arg3::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:DMPlexTreeRefineCell,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Ptr{DM{Float64}}),arg1,arg2,arg3)
    return err
end

function DMRedundantCreate(arg1::MPI_Comm,arg2::PetscMPIInt,arg3::Integer,arg4::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:DMRedundantCreate,petscRealDouble),PetscErrorCode,(comm_type,PetscMPIInt,Int64,Ptr{DM{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function DMRedundantSetSize(arg1::DM{Float64},arg2::PetscMPIInt,arg3::Integer)
    err = ccall((:DMRedundantSetSize,petscRealDouble),PetscErrorCode,(DM{Float64},PetscMPIInt,Int64),arg1,arg2,arg3)
    return err
end

function DMRedundantGetSize(arg1::DM{Float64},arg2::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMRedundantGetSize,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{PetscMPIInt},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function DMShellCreate(arg1::MPI_Comm,arg2::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:DMShellCreate,petscRealDouble),PetscErrorCode,(comm_type,Ptr{DM{Float64}}),arg1,arg2)
    return err
end

function DMShellSetMatrix(arg1::DM{Float64},arg2::Mat{Float64})
    err = ccall((:DMShellSetMatrix,petscRealDouble),PetscErrorCode,(DM{Float64},Mat{Float64}),arg1,arg2)
    return err
end

function DMShellSetGlobalVector(arg1::DM{Float64},arg2::Vec{Float64})
    err = ccall((:DMShellSetGlobalVector,petscRealDouble),PetscErrorCode,(DM{Float64},Vec{Float64}),arg1,arg2)
    return err
end

function DMShellSetLocalVector(arg1::DM{Float64},arg2::Vec{Float64})
    err = ccall((:DMShellSetLocalVector,petscRealDouble),PetscErrorCode,(DM{Float64},Vec{Float64}),arg1,arg2)
    return err
end

function DMShellSetCreateGlobalVector(arg1::DM{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMShellSetCreateGlobalVector,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function DMShellSetCreateLocalVector(arg1::DM{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMShellSetCreateLocalVector,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function DMShellSetGlobalToLocal(arg1::DM{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMShellSetGlobalToLocal,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMShellSetGlobalToLocalVecScatter(arg1::DM{Float64},arg2::VecScatter{Float64})
    err = ccall((:DMShellSetGlobalToLocalVecScatter,petscRealDouble),PetscErrorCode,(DM{Float64},VecScatter{Float64}),arg1,arg2)
    return err
end

function DMShellSetLocalToGlobal(arg1::DM{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMShellSetLocalToGlobal,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMShellSetLocalToGlobalVecScatter(arg1::DM{Float64},arg2::VecScatter{Float64})
    err = ccall((:DMShellSetLocalToGlobalVecScatter,petscRealDouble),PetscErrorCode,(DM{Float64},VecScatter{Float64}),arg1,arg2)
    return err
end

function DMShellSetLocalToLocal(arg1::DM{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMShellSetLocalToLocal,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMShellSetLocalToLocalVecScatter(arg1::DM{Float64},arg2::VecScatter{Float64})
    err = ccall((:DMShellSetLocalToLocalVecScatter,petscRealDouble),PetscErrorCode,(DM{Float64},VecScatter{Float64}),arg1,arg2)
    return err
end

function DMShellSetCreateMatrix(arg1::DM{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMShellSetCreateMatrix,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function DMShellSetCoarsen(arg1::DM{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMShellSetCoarsen,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function DMShellSetRefine(arg1::DM{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMShellSetRefine,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function DMShellSetCreateInterpolation(arg1::DM{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMShellSetCreateInterpolation,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function DMShellSetCreateInjection(arg1::DM{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMShellSetCreateInjection,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function DMShellSetCreateFieldDecomposition(arg1::DM{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMShellSetCreateFieldDecomposition,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function DMGlobalToLocalBeginDefaultShell(arg1::DM{Float64},arg2::Vec{Float64},arg3::InsertMode,arg4::Vec{Float64})
    err = ccall((:DMGlobalToLocalBeginDefaultShell,petscRealDouble),PetscErrorCode,(DM{Float64},Vec{Float64},InsertMode,Vec{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function DMGlobalToLocalEndDefaultShell(arg1::DM{Float64},arg2::Vec{Float64},arg3::InsertMode,arg4::Vec{Float64})
    err = ccall((:DMGlobalToLocalEndDefaultShell,petscRealDouble),PetscErrorCode,(DM{Float64},Vec{Float64},InsertMode,Vec{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function DMLocalToGlobalBeginDefaultShell(arg1::DM{Float64},arg2::Vec{Float64},arg3::InsertMode,arg4::Vec{Float64})
    err = ccall((:DMLocalToGlobalBeginDefaultShell,petscRealDouble),PetscErrorCode,(DM{Float64},Vec{Float64},InsertMode,Vec{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function DMLocalToGlobalEndDefaultShell(arg1::DM{Float64},arg2::Vec{Float64},arg3::InsertMode,arg4::Vec{Float64})
    err = ccall((:DMLocalToGlobalEndDefaultShell,petscRealDouble),PetscErrorCode,(DM{Float64},Vec{Float64},InsertMode,Vec{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function DMLocalToLocalBeginDefaultShell(arg1::DM{Float64},arg2::Vec{Float64},arg3::InsertMode,arg4::Vec{Float64})
    err = ccall((:DMLocalToLocalBeginDefaultShell,petscRealDouble),PetscErrorCode,(DM{Float64},Vec{Float64},InsertMode,Vec{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function DMLocalToLocalEndDefaultShell(arg1::DM{Float64},arg2::Vec{Float64},arg3::InsertMode,arg4::Vec{Float64})
    err = ccall((:DMLocalToLocalEndDefaultShell,petscRealDouble),PetscErrorCode,(DM{Float64},Vec{Float64},InsertMode,Vec{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function DMSlicedCreate(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:DMSlicedCreate,petscRealDouble),PetscErrorCode,(comm_type,Int64,Int64,Int64,Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{DM{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function DMSlicedSetPreallocation(arg1::DM{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMSlicedSetPreallocation,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Ptr{Int64},Int64,Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMSlicedSetBlockFills(arg1::DM{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMSlicedSetBlockFills,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function DMSlicedSetGhosts(arg1::DM{Float64},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:DMSlicedSetGhosts,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Int64,Int64,Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDSInitializePackage(arg0::Type{Float64})
    err = ccall((:PetscDSInitializePackage,petscRealDouble),PetscErrorCode,())
    return err
end

function PetscDSCreate(arg1::MPI_Comm,arg2::Union{Ptr{PetscDS{Float64}},StridedArray{PetscDS{Float64}},Ptr{PetscDS{Float64}},Ref{PetscDS{Float64}}})
    err = ccall((:PetscDSCreate,petscRealDouble),PetscErrorCode,(comm_type,Ptr{PetscDS{Float64}}),arg1,arg2)
    return err
end

function PetscDSDestroy(arg1::Union{Ptr{PetscDS{Float64}},StridedArray{PetscDS{Float64}},Ptr{PetscDS{Float64}},Ref{PetscDS{Float64}}})
    err = ccall((:PetscDSDestroy,petscRealDouble),PetscErrorCode,(Ptr{PetscDS{Float64}},),arg1)
    return err
end

function PetscDSSetType(arg1::PetscDS{Float64},arg2::PetscDSType)
    err = ccall((:PetscDSSetType,petscRealDouble),PetscErrorCode,(PetscDS{Float64},PetscDSType),arg1,arg2)
    return err
end

function PetscDSGetType(arg1::PetscDS{Float64},arg2::Union{Ptr{PetscDSType},StridedArray{PetscDSType},Ptr{PetscDSType},Ref{PetscDSType}})
    err = ccall((:PetscDSGetType,petscRealDouble),PetscErrorCode,(PetscDS{Float64},Ptr{PetscDSType}),arg1,arg2)
    return err
end

function PetscDSSetUp(arg1::PetscDS{Float64})
    err = ccall((:PetscDSSetUp,petscRealDouble),PetscErrorCode,(PetscDS{Float64},),arg1)
    return err
end

function PetscDSSetFromOptions(arg1::PetscDS{Float64})
    err = ccall((:PetscDSSetFromOptions,petscRealDouble),PetscErrorCode,(PetscDS{Float64},),arg1)
    return err
end

function PetscDSRegister(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscDSRegister,petscRealDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function PetscDSRegisterDestroy(arg0::Type{Float64})
    err = ccall((:PetscDSRegisterDestroy,petscRealDouble),PetscErrorCode,())
    return err
end

function PetscDSGetSpatialDimension(arg1::PetscDS{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscDSGetSpatialDimension,petscRealDouble),PetscErrorCode,(PetscDS{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscDSGetNumFields(arg1::PetscDS{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscDSGetNumFields,petscRealDouble),PetscErrorCode,(PetscDS{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscDSGetTotalDimension(arg1::PetscDS{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscDSGetTotalDimension,petscRealDouble),PetscErrorCode,(PetscDS{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscDSGetTotalBdDimension(arg1::PetscDS{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscDSGetTotalBdDimension,petscRealDouble),PetscErrorCode,(PetscDS{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscDSGetTotalComponents(arg1::PetscDS{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscDSGetTotalComponents,petscRealDouble),PetscErrorCode,(PetscDS{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscDSGetFieldOffset(arg1::PetscDS{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscDSGetFieldOffset,petscRealDouble),PetscErrorCode,(PetscDS{Float64},Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PetscDSGetBdFieldOffset(arg1::PetscDS{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscDSGetBdFieldOffset,petscRealDouble),PetscErrorCode,(PetscDS{Float64},Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PetscDSGetComponentOffset(arg1::PetscDS{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscDSGetComponentOffset,petscRealDouble),PetscErrorCode,(PetscDS{Float64},Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PetscDSGetComponentOffsets(arg1::PetscDS{Float64},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:PetscDSGetComponentOffsets,petscRealDouble),PetscErrorCode,(PetscDS{Float64},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function PetscDSGetComponentBdOffsets(arg1::PetscDS{Float64},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:PetscDSGetComponentBdOffsets,petscRealDouble),PetscErrorCode,(PetscDS{Float64},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function PetscDSGetComponentDerivativeOffsets(arg1::PetscDS{Float64},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:PetscDSGetComponentDerivativeOffsets,petscRealDouble),PetscErrorCode,(PetscDS{Float64},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function PetscDSGetComponentBdDerivativeOffsets(arg1::PetscDS{Float64},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:PetscDSGetComponentBdDerivativeOffsets,petscRealDouble),PetscErrorCode,(PetscDS{Float64},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function PetscDSGetDiscretization(arg1::PetscDS{Float64},arg2::Integer,arg3::Union{Ptr{PetscObject{Float64}},StridedArray{PetscObject{Float64}},Ptr{PetscObject{Float64}},Ref{PetscObject{Float64}}})
    err = ccall((:PetscDSGetDiscretization,petscRealDouble),PetscErrorCode,(PetscDS{Float64},Int64,Ptr{PetscObject{Float64}}),arg1,arg2,arg3)
    return err
end

function PetscDSSetDiscretization(arg1::PetscDS{Float64},arg2::Integer,arg3::PetscObject{Float64})
    err = ccall((:PetscDSSetDiscretization,petscRealDouble),PetscErrorCode,(PetscDS{Float64},Int64,PetscObject{Float64}),arg1,arg2,arg3)
    return err
end

function PetscDSAddDiscretization(arg1::PetscDS{Float64},arg2::PetscObject{Float64})
    err = ccall((:PetscDSAddDiscretization,petscRealDouble),PetscErrorCode,(PetscDS{Float64},PetscObject{Float64}),arg1,arg2)
    return err
end

function PetscDSGetBdDiscretization(arg1::PetscDS{Float64},arg2::Integer,arg3::Union{Ptr{PetscObject{Float64}},StridedArray{PetscObject{Float64}},Ptr{PetscObject{Float64}},Ref{PetscObject{Float64}}})
    err = ccall((:PetscDSGetBdDiscretization,petscRealDouble),PetscErrorCode,(PetscDS{Float64},Int64,Ptr{PetscObject{Float64}}),arg1,arg2,arg3)
    return err
end

function PetscDSSetBdDiscretization(arg1::PetscDS{Float64},arg2::Integer,arg3::PetscObject{Float64})
    err = ccall((:PetscDSSetBdDiscretization,petscRealDouble),PetscErrorCode,(PetscDS{Float64},Int64,PetscObject{Float64}),arg1,arg2,arg3)
    return err
end

function PetscDSAddBdDiscretization(arg1::PetscDS{Float64},arg2::PetscObject{Float64})
    err = ccall((:PetscDSAddBdDiscretization,petscRealDouble),PetscErrorCode,(PetscDS{Float64},PetscObject{Float64}),arg1,arg2)
    return err
end

function PetscDSGetImplicit(arg1::PetscDS{Float64},arg2::Integer,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscDSGetImplicit,petscRealDouble),PetscErrorCode,(PetscDS{Float64},Int64,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function PetscDSSetImplicit(arg1::PetscDS{Float64},arg2::Integer,arg3::PetscBool)
    err = ccall((:PetscDSSetImplicit,petscRealDouble),PetscErrorCode,(PetscDS{Float64},Int64,PetscBool),arg1,arg2,arg3)
    return err
end

function PetscDSGetAdjacency(arg1::PetscDS{Float64},arg2::Integer,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscDSGetAdjacency,petscRealDouble),PetscErrorCode,(PetscDS{Float64},Int64,Ptr{PetscBool},Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function PetscDSSetAdjacency(arg1::PetscDS{Float64},arg2::Integer,arg3::PetscBool,arg4::PetscBool)
    err = ccall((:PetscDSSetAdjacency,petscRealDouble),PetscErrorCode,(PetscDS{Float64},Int64,PetscBool,PetscBool),arg1,arg2,arg3,arg4)
    return err
end

function PetscDSGetObjective(arg1::PetscDS{Float64},arg2::Integer,arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:PetscDSGetObjective,petscRealDouble),PetscErrorCode,(PetscDS{Float64},Int64,Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function PetscDSSetObjective(arg1::PetscDS{Float64},arg2::Integer,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscDSSetObjective,petscRealDouble),PetscErrorCode,(PetscDS{Float64},Int64,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function PetscDSGetResidual(arg1::PetscDS{Float64},arg2::Integer,arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:PetscDSGetResidual,petscRealDouble),PetscErrorCode,(PetscDS{Float64},Int64,Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscDSSetResidual(arg1::PetscDS{Float64},arg2::Integer,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscDSSetResidual,petscRealDouble),PetscErrorCode,(PetscDS{Float64},Int64,Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function PetscDSGetJacobian(arg1::PetscDS{Float64},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg5::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg6::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg7::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:PetscDSGetJacobian,petscRealDouble),PetscErrorCode,(PetscDS{Float64},Int64,Int64,Ptr{Ptr{Void}},Ptr{Ptr{Void}},Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function PetscDSSetJacobian(arg1::PetscDS{Float64},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg7::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscDSSetJacobian,petscRealDouble),PetscErrorCode,(PetscDS{Float64},Int64,Int64,Ptr{Void},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function PetscDSGetRiemannSolver(arg1::PetscDS{Float64},arg2::Integer,arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:PetscDSGetRiemannSolver,petscRealDouble),PetscErrorCode,(PetscDS{Float64},Int64,Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function PetscDSSetRiemannSolver(arg1::PetscDS{Float64},arg2::Integer,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscDSSetRiemannSolver,petscRealDouble),PetscErrorCode,(PetscDS{Float64},Int64,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function PetscDSGetContext(arg1::PetscDS{Float64},arg2::Integer,arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:PetscDSGetContext,petscRealDouble),PetscErrorCode,(PetscDS{Float64},Int64,Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function PetscDSSetContext(arg1::PetscDS{Float64},arg2::Integer,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscDSSetContext,petscRealDouble),PetscErrorCode,(PetscDS{Float64},Int64,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function PetscDSGetBdResidual(arg1::PetscDS{Float64},arg2::Integer,arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:PetscDSGetBdResidual,petscRealDouble),PetscErrorCode,(PetscDS{Float64},Int64,Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscDSSetBdResidual(arg1::PetscDS{Float64},arg2::Integer,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscDSSetBdResidual,petscRealDouble),PetscErrorCode,(PetscDS{Float64},Int64,Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function PetscDSGetBdJacobian(arg1::PetscDS{Float64},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg5::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg6::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg7::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:PetscDSGetBdJacobian,petscRealDouble),PetscErrorCode,(PetscDS{Float64},Int64,Int64,Ptr{Ptr{Void}},Ptr{Ptr{Void}},Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function PetscDSSetBdJacobian(arg1::PetscDS{Float64},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg7::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscDSSetBdJacobian,petscRealDouble),PetscErrorCode,(PetscDS{Float64},Int64,Int64,Ptr{Void},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function PetscDSGetTabulation(arg1::PetscDS{Float64},arg2::Union{Ptr{Ptr{Ptr{Float64}}},StridedArray{Ptr{Ptr{Float64}}},Ptr{Ptr{Ptr{Float64}}},Ref{Ptr{Ptr{Float64}}}},arg3::Union{Ptr{Ptr{Ptr{Float64}}},StridedArray{Ptr{Ptr{Float64}}},Ptr{Ptr{Ptr{Float64}}},Ref{Ptr{Ptr{Float64}}}})
    err = ccall((:PetscDSGetTabulation,petscRealDouble),PetscErrorCode,(PetscDS{Float64},Ptr{Ptr{Ptr{Float64}}},Ptr{Ptr{Ptr{Float64}}}),arg1,arg2,arg3)
    return err
end

function PetscDSGetBdTabulation(arg1::PetscDS{Float64},arg2::Union{Ptr{Ptr{Ptr{Float64}}},StridedArray{Ptr{Ptr{Float64}}},Ptr{Ptr{Ptr{Float64}}},Ref{Ptr{Ptr{Float64}}}},arg3::Union{Ptr{Ptr{Ptr{Float64}}},StridedArray{Ptr{Ptr{Float64}}},Ptr{Ptr{Ptr{Float64}}},Ref{Ptr{Ptr{Float64}}}})
    err = ccall((:PetscDSGetBdTabulation,petscRealDouble),PetscErrorCode,(PetscDS{Float64},Ptr{Ptr{Ptr{Float64}}},Ptr{Ptr{Ptr{Float64}}}),arg1,arg2,arg3)
    return err
end

function PetscDSGetEvaluationArrays(arg1::PetscDS{Float64},arg2::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg3::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg4::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:PetscDSGetEvaluationArrays,petscRealDouble),PetscErrorCode,(PetscDS{Float64},Ptr{Ptr{Float64}},Ptr{Ptr{Float64}},Ptr{Ptr{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscDSGetWeakFormArrays(arg1::PetscDS{Float64},arg2::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg3::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg4::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg5::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg6::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg7::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:PetscDSGetWeakFormArrays,petscRealDouble),PetscErrorCode,(PetscDS{Float64},Ptr{Ptr{Float64}},Ptr{Ptr{Float64}},Ptr{Ptr{Float64}},Ptr{Ptr{Float64}},Ptr{Ptr{Float64}},Ptr{Ptr{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function PetscDSGetRefCoordArrays(arg1::PetscDS{Float64},arg2::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg3::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:PetscDSGetRefCoordArrays,petscRealDouble),PetscErrorCode,(PetscDS{Float64},Ptr{Ptr{Float64}},Ptr{Ptr{Float64}}),arg1,arg2,arg3)
    return err
end

function CharacteristicInitializePackage(arg0::Type{Float64})
    err = ccall((:CharacteristicInitializePackage,petscRealDouble),PetscErrorCode,())
    return err
end

function CharacteristicCreate(arg1::MPI_Comm,arg2::Union{Ptr{Characteristic{Float64}},StridedArray{Characteristic{Float64}},Ptr{Characteristic{Float64}},Ref{Characteristic{Float64}}})
    err = ccall((:CharacteristicCreate,petscRealDouble),PetscErrorCode,(comm_type,Ptr{Characteristic{Float64}}),arg1,arg2)
    return err
end

function CharacteristicSetType(arg1::Characteristic{Float64},arg2::CharacteristicType)
    err = ccall((:CharacteristicSetType,petscRealDouble),PetscErrorCode,(Characteristic{Float64},CharacteristicType),arg1,arg2)
    return err
end

function CharacteristicSetUp(arg1::Characteristic{Float64})
    err = ccall((:CharacteristicSetUp,petscRealDouble),PetscErrorCode,(Characteristic{Float64},),arg1)
    return err
end

function CharacteristicSetVelocityInterpolation(arg1::Characteristic{Float64},arg2::DM{Float64},arg3::Vec{Float64},arg4::Vec{Float64},arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg8::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:CharacteristicSetVelocityInterpolation,petscRealDouble),PetscErrorCode,(Characteristic{Float64},DM{Float64},Vec{Float64},Vec{Float64},Int64,Ptr{Int64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function CharacteristicSetVelocityInterpolationLocal(arg1::Characteristic{Float64},arg2::DM{Float64},arg3::Vec{Float64},arg4::Vec{Float64},arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg8::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:CharacteristicSetVelocityInterpolationLocal,petscRealDouble),PetscErrorCode,(Characteristic{Float64},DM{Float64},Vec{Float64},Vec{Float64},Int64,Ptr{Int64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function CharacteristicSetFieldInterpolation(arg1::Characteristic{Float64},arg2::DM{Float64},arg3::Vec{Float64},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg7::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:CharacteristicSetFieldInterpolation,petscRealDouble),PetscErrorCode,(Characteristic{Float64},DM{Float64},Vec{Float64},Int64,Ptr{Int64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function CharacteristicSetFieldInterpolationLocal(arg1::Characteristic{Float64},arg2::DM{Float64},arg3::Vec{Float64},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg7::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:CharacteristicSetFieldInterpolationLocal,petscRealDouble),PetscErrorCode,(Characteristic{Float64},DM{Float64},Vec{Float64},Int64,Ptr{Int64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function CharacteristicSolve(arg1::Characteristic{Float64},arg2::Float64,arg3::Vec{Float64})
    err = ccall((:CharacteristicSolve,petscRealDouble),PetscErrorCode,(Characteristic{Float64},Float64,Vec{Float64}),arg1,arg2,arg3)
    return err
end

function CharacteristicDestroy(arg1::Union{Ptr{Characteristic{Float64}},StridedArray{Characteristic{Float64}},Ptr{Characteristic{Float64}},Ref{Characteristic{Float64}}})
    err = ccall((:CharacteristicDestroy,petscRealDouble),PetscErrorCode,(Ptr{Characteristic{Float64}},),arg1)
    return err
end

function CharacteristicRegister(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:CharacteristicRegister,petscRealDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function PCExoticSetType(arg1::PC{Float64},arg2::PCExoticType)
    err = ccall((:PCExoticSetType,petscRealDouble),PetscErrorCode,(PC{Float64},PCExoticType),arg1,arg2)
    return err
end

function PCInitializePackage(arg0::Type{Float64})
    err = ccall((:PCInitializePackage,petscRealDouble),PetscErrorCode,())
    return err
end

function PCCreate(arg1::MPI_Comm,arg2::Union{Ptr{PC{Float64}},StridedArray{PC{Float64}},Ptr{PC{Float64}},Ref{PC{Float64}}})
    err = ccall((:PCCreate,petscRealDouble),PetscErrorCode,(comm_type,Ptr{PC{Float64}}),arg1,arg2)
    return err
end

function PCSetType(arg1::PC{Float64},arg2::PCType)
    err = ccall((:PCSetType,petscRealDouble),PetscErrorCode,(PC{Float64},PCType),arg1,arg2)
    return err
end

function PCGetType(arg1::PC{Float64},arg2::Union{Ptr{PCType},StridedArray{PCType},Ptr{PCType},Ref{PCType}})
    err = ccall((:PCGetType,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{PCType}),arg1,arg2)
    return err
end

function PCSetUp(arg1::PC{Float64})
    err = ccall((:PCSetUp,petscRealDouble),PetscErrorCode,(PC{Float64},),arg1)
    return err
end

function PCGetSetUpFailedReason(arg1::PC{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PCGetSetUpFailedReason,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function PCSetUpOnBlocks(arg1::PC{Float64})
    err = ccall((:PCSetUpOnBlocks,petscRealDouble),PetscErrorCode,(PC{Float64},),arg1)
    return err
end

function PCApply(arg1::PC{Float64},arg2::Vec{Float64},arg3::Vec{Float64})
    err = ccall((:PCApply,petscRealDouble),PetscErrorCode,(PC{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3)
    return err
end

function PCApplySymmetricLeft(arg1::PC{Float64},arg2::Vec{Float64},arg3::Vec{Float64})
    err = ccall((:PCApplySymmetricLeft,petscRealDouble),PetscErrorCode,(PC{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3)
    return err
end

function PCApplySymmetricRight(arg1::PC{Float64},arg2::Vec{Float64},arg3::Vec{Float64})
    err = ccall((:PCApplySymmetricRight,petscRealDouble),PetscErrorCode,(PC{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3)
    return err
end

function PCApplyBAorAB(arg1::PC{Float64},arg2::PCSide,arg3::Vec{Float64},arg4::Vec{Float64},arg5::Vec{Float64})
    err = ccall((:PCApplyBAorAB,petscRealDouble),PetscErrorCode,(PC{Float64},PCSide,Vec{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PCApplyTranspose(arg1::PC{Float64},arg2::Vec{Float64},arg3::Vec{Float64})
    err = ccall((:PCApplyTranspose,petscRealDouble),PetscErrorCode,(PC{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3)
    return err
end

function PCApplyTransposeExists(arg1::PC{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCApplyTransposeExists,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCApplyBAorABTranspose(arg1::PC{Float64},arg2::PCSide,arg3::Vec{Float64},arg4::Vec{Float64},arg5::Vec{Float64})
    err = ccall((:PCApplyBAorABTranspose,petscRealDouble),PetscErrorCode,(PC{Float64},PCSide,Vec{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PCSetReusePreconditioner(arg1::PC{Float64},arg2::PetscBool)
    err = ccall((:PCSetReusePreconditioner,petscRealDouble),PetscErrorCode,(PC{Float64},PetscBool),arg1,arg2)
    return err
end

function PCGetReusePreconditioner(arg1::PC{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCGetReusePreconditioner,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCSetErrorIfFailure(arg1::PC{Float64},arg2::PetscBool)
    err = ccall((:PCSetErrorIfFailure,petscRealDouble),PetscErrorCode,(PC{Float64},PetscBool),arg1,arg2)
    return err
end

function PCApplyRichardson(arg1::PC{Float64},arg2::Vec{Float64},arg3::Vec{Float64},arg4::Vec{Float64},arg5::Float64,arg6::Float64,arg7::Float64,arg8::Integer,arg9::PetscBool,arg10::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg11::Union{Ptr{PCRichardsonConvergedReason},StridedArray{PCRichardsonConvergedReason},Ptr{PCRichardsonConvergedReason},Ref{PCRichardsonConvergedReason}})
    err = ccall((:PCApplyRichardson,petscRealDouble),PetscErrorCode,(PC{Float64},Vec{Float64},Vec{Float64},Vec{Float64},Float64,Float64,Float64,Int64,PetscBool,Ptr{Int64},Ptr{PCRichardsonConvergedReason}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11)
    return err
end

function PCApplyRichardsonExists(arg1::PC{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCApplyRichardsonExists,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCSetInitialGuessNonzero(arg1::PC{Float64},arg2::PetscBool)
    err = ccall((:PCSetInitialGuessNonzero,petscRealDouble),PetscErrorCode,(PC{Float64},PetscBool),arg1,arg2)
    return err
end

function PCGetInitialGuessNonzero(arg1::PC{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCGetInitialGuessNonzero,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCSetUseAmat(arg1::PC{Float64},arg2::PetscBool)
    err = ccall((:PCSetUseAmat,petscRealDouble),PetscErrorCode,(PC{Float64},PetscBool),arg1,arg2)
    return err
end

function PCGetUseAmat(arg1::PC{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCGetUseAmat,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCRegister(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCRegister,petscRealDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function PCReset(arg1::PC{Float64})
    err = ccall((:PCReset,petscRealDouble),PetscErrorCode,(PC{Float64},),arg1)
    return err
end

function PCDestroy(arg1::Union{Ptr{PC{Float64}},StridedArray{PC{Float64}},Ptr{PC{Float64}},Ref{PC{Float64}}})
    err = ccall((:PCDestroy,petscRealDouble),PetscErrorCode,(Ptr{PC{Float64}},),arg1)
    return err
end

function PCSetFromOptions(arg1::PC{Float64})
    err = ccall((:PCSetFromOptions,petscRealDouble),PetscErrorCode,(PC{Float64},),arg1)
    return err
end

function PCFactorGetMatrix(arg1::PC{Float64},arg2::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:PCFactorGetMatrix,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{Mat{Float64}}),arg1,arg2)
    return err
end

function PCSetModifySubMatrices(arg1::PC{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCSetModifySubMatrices,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function PCModifySubMatrices(arg1::PC{Float64},arg2::Integer,arg3::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}},arg4::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}},arg5::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCModifySubMatrices,petscRealDouble),PetscErrorCode,(PC{Float64},Int64,Ptr{IS{Float64}},Ptr{IS{Float64}},Ptr{Mat{Float64}},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PCSetOperators(arg1::PC{Float64},arg2::Mat{Float64},arg3::Mat{Float64})
    err = ccall((:PCSetOperators,petscRealDouble),PetscErrorCode,(PC{Float64},Mat{Float64},Mat{Float64}),arg1,arg2,arg3)
    return err
end

function PCGetOperators(arg1::PC{Float64},arg2::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}},arg3::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:PCGetOperators,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{Mat{Float64}},Ptr{Mat{Float64}}),arg1,arg2,arg3)
    return err
end

function PCGetOperatorsSet(arg1::PC{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCGetOperatorsSet,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{PetscBool},Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function PCView(arg1::PC{Float64},arg2::PetscViewer{Float64})
    err = ccall((:PCView,petscRealDouble),PetscErrorCode,(PC{Float64},PetscViewer{Float64}),arg1,arg2)
    return err
end

function PCLoad(arg1::PC{Float64},arg2::PetscViewer{Float64})
    err = ccall((:PCLoad,petscRealDouble),PetscErrorCode,(PC{Float64},PetscViewer{Float64}),arg1,arg2)
    return err
end

function PCAppendOptionsPrefix(arg1::PC{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PCAppendOptionsPrefix,petscRealDouble),PetscErrorCode,(PC{Float64},Cstring),arg1,arg2)
    return err
end

function PCGetOptionsPrefix(arg1::PC{Float64},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PCGetOptionsPrefix,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PCComputeExplicitOperator(arg1::PC{Float64},arg2::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:PCComputeExplicitOperator,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{Mat{Float64}}),arg1,arg2)
    return err
end

function PCGetDiagonalScale(arg1::PC{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCGetDiagonalScale,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCDiagonalScaleLeft(arg1::PC{Float64},arg2::Vec{Float64},arg3::Vec{Float64})
    err = ccall((:PCDiagonalScaleLeft,petscRealDouble),PetscErrorCode,(PC{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3)
    return err
end

function PCDiagonalScaleRight(arg1::PC{Float64},arg2::Vec{Float64},arg3::Vec{Float64})
    err = ccall((:PCDiagonalScaleRight,petscRealDouble),PetscErrorCode,(PC{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3)
    return err
end

function PCSetDiagonalScale(arg1::PC{Float64},arg2::Vec{Float64})
    err = ccall((:PCSetDiagonalScale,petscRealDouble),PetscErrorCode,(PC{Float64},Vec{Float64}),arg1,arg2)
    return err
end

function PCJacobiSetType(arg1::PC{Float64},arg2::PCJacobiType)
    err = ccall((:PCJacobiSetType,petscRealDouble),PetscErrorCode,(PC{Float64},PCJacobiType),arg1,arg2)
    return err
end

function PCJacobiGetType(arg1::PC{Float64},arg2::Union{Ptr{PCJacobiType},StridedArray{PCJacobiType},Ptr{PCJacobiType},Ref{PCJacobiType}})
    err = ccall((:PCJacobiGetType,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{PCJacobiType}),arg1,arg2)
    return err
end

function PCJacobiSetUseAbs(arg1::PC{Float64},arg2::PetscBool)
    err = ccall((:PCJacobiSetUseAbs,petscRealDouble),PetscErrorCode,(PC{Float64},PetscBool),arg1,arg2)
    return err
end

function PCJacobiGetUseAbs(arg1::PC{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCJacobiGetUseAbs,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCSORSetSymmetric(arg1::PC{Float64},arg2::MatSORType)
    err = ccall((:PCSORSetSymmetric,petscRealDouble),PetscErrorCode,(PC{Float64},MatSORType),arg1,arg2)
    return err
end

function PCSORGetSymmetric(arg1::PC{Float64},arg2::Union{Ptr{MatSORType},StridedArray{MatSORType},Ptr{MatSORType},Ref{MatSORType}})
    err = ccall((:PCSORGetSymmetric,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{MatSORType}),arg1,arg2)
    return err
end

function PCSORSetOmega(arg1::PC{Float64},arg2::Float64)
    err = ccall((:PCSORSetOmega,petscRealDouble),PetscErrorCode,(PC{Float64},Float64),arg1,arg2)
    return err
end

function PCSORGetOmega(arg1::PC{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PCSORGetOmega,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{Float64}),arg1,arg2)
    return err
end

function PCSORSetIterations(arg1::PC{Float64},arg2::Integer,arg3::Integer)
    err = ccall((:PCSORSetIterations,petscRealDouble),PetscErrorCode,(PC{Float64},Int64,Int64),arg1,arg2,arg3)
    return err
end

function PCSORGetIterations(arg1::PC{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PCSORGetIterations,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PCEisenstatSetOmega(arg1::PC{Float64},arg2::Float64)
    err = ccall((:PCEisenstatSetOmega,petscRealDouble),PetscErrorCode,(PC{Float64},Float64),arg1,arg2)
    return err
end

function PCEisenstatGetOmega(arg1::PC{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PCEisenstatGetOmega,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{Float64}),arg1,arg2)
    return err
end

function PCEisenstatSetNoDiagonalScaling(arg1::PC{Float64},arg2::PetscBool)
    err = ccall((:PCEisenstatSetNoDiagonalScaling,petscRealDouble),PetscErrorCode,(PC{Float64},PetscBool),arg1,arg2)
    return err
end

function PCEisenstatGetNoDiagonalScaling(arg1::PC{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCEisenstatGetNoDiagonalScaling,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCBJacobiSetTotalBlocks(arg1::PC{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PCBJacobiSetTotalBlocks,petscRealDouble),PetscErrorCode,(PC{Float64},Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PCBJacobiGetTotalBlocks(arg1::PC{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:PCBJacobiGetTotalBlocks,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3)
    return err
end

function PCBJacobiSetLocalBlocks(arg1::PC{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PCBJacobiSetLocalBlocks,petscRealDouble),PetscErrorCode,(PC{Float64},Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PCBJacobiGetLocalBlocks(arg1::PC{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:PCBJacobiGetLocalBlocks,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3)
    return err
end

function PCShellSetApply(arg1::PC{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCShellSetApply,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function PCShellSetApplyBA(arg1::PC{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCShellSetApplyBA,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function PCShellSetApplyTranspose(arg1::PC{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCShellSetApplyTranspose,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function PCShellSetSetUp(arg1::PC{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCShellSetSetUp,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function PCShellSetApplyRichardson(arg1::PC{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCShellSetApplyRichardson,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function PCShellSetView(arg1::PC{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCShellSetView,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function PCShellSetDestroy(arg1::PC{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCShellSetDestroy,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function PCShellSetContext(arg1::PC{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCShellSetContext,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function PCShellGetContext(arg1::PC{Float64},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:PCShellGetContext,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{Ptr{Void}}),arg1,arg2)
    return err
end

function PCShellSetName(arg1::PC{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PCShellSetName,petscRealDouble),PetscErrorCode,(PC{Float64},Cstring),arg1,arg2)
    return err
end

function PCShellGetName(arg1::PC{Float64},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PCShellGetName,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PCFactorSetZeroPivot(arg1::PC{Float64},arg2::Float64)
    err = ccall((:PCFactorSetZeroPivot,petscRealDouble),PetscErrorCode,(PC{Float64},Float64),arg1,arg2)
    return err
end

function PCFactorSetShiftType(arg1::PC{Float64},arg2::MatFactorShiftType)
    err = ccall((:PCFactorSetShiftType,petscRealDouble),PetscErrorCode,(PC{Float64},MatFactorShiftType),arg1,arg2)
    return err
end

function PCFactorSetShiftAmount(arg1::PC{Float64},arg2::Float64)
    err = ccall((:PCFactorSetShiftAmount,petscRealDouble),PetscErrorCode,(PC{Float64},Float64),arg1,arg2)
    return err
end

function PCFactorSetMatSolverPackage(arg1::PC{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PCFactorSetMatSolverPackage,petscRealDouble),PetscErrorCode,(PC{Float64},Cstring),arg1,arg2)
    return err
end

function PCFactorGetMatSolverPackage(arg1::PC{Float64},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PCFactorGetMatSolverPackage,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PCFactorSetUpMatSolverPackage(arg1::PC{Float64})
    err = ccall((:PCFactorSetUpMatSolverPackage,petscRealDouble),PetscErrorCode,(PC{Float64},),arg1)
    return err
end

function PCFactorSetFill(arg1::PC{Float64},arg2::Float64)
    err = ccall((:PCFactorSetFill,petscRealDouble),PetscErrorCode,(PC{Float64},Float64),arg1,arg2)
    return err
end

function PCFactorSetColumnPivot(arg1::PC{Float64},arg2::Float64)
    err = ccall((:PCFactorSetColumnPivot,petscRealDouble),PetscErrorCode,(PC{Float64},Float64),arg1,arg2)
    return err
end

function PCFactorReorderForNonzeroDiagonal(arg1::PC{Float64},arg2::Float64)
    err = ccall((:PCFactorReorderForNonzeroDiagonal,petscRealDouble),PetscErrorCode,(PC{Float64},Float64),arg1,arg2)
    return err
end

function PCFactorSetMatOrderingType(arg1::PC{Float64},arg2::MatOrderingType)
    err = ccall((:PCFactorSetMatOrderingType,petscRealDouble),PetscErrorCode,(PC{Float64},MatOrderingType),arg1,arg2)
    return err
end

function PCFactorSetReuseOrdering(arg1::PC{Float64},arg2::PetscBool)
    err = ccall((:PCFactorSetReuseOrdering,petscRealDouble),PetscErrorCode,(PC{Float64},PetscBool),arg1,arg2)
    return err
end

function PCFactorSetReuseFill(arg1::PC{Float64},arg2::PetscBool)
    err = ccall((:PCFactorSetReuseFill,petscRealDouble),PetscErrorCode,(PC{Float64},PetscBool),arg1,arg2)
    return err
end

function PCFactorSetUseInPlace(arg1::PC{Float64},arg2::PetscBool)
    err = ccall((:PCFactorSetUseInPlace,petscRealDouble),PetscErrorCode,(PC{Float64},PetscBool),arg1,arg2)
    return err
end

function PCFactorGetUseInPlace(arg1::PC{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCFactorGetUseInPlace,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCFactorSetAllowDiagonalFill(arg1::PC{Float64},arg2::PetscBool)
    err = ccall((:PCFactorSetAllowDiagonalFill,petscRealDouble),PetscErrorCode,(PC{Float64},PetscBool),arg1,arg2)
    return err
end

function PCFactorGetAllowDiagonalFill(arg1::PC{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCFactorGetAllowDiagonalFill,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCFactorSetPivotInBlocks(arg1::PC{Float64},arg2::PetscBool)
    err = ccall((:PCFactorSetPivotInBlocks,petscRealDouble),PetscErrorCode,(PC{Float64},PetscBool),arg1,arg2)
    return err
end

function PCFactorSetLevels(arg1::PC{Float64},arg2::Integer)
    err = ccall((:PCFactorSetLevels,petscRealDouble),PetscErrorCode,(PC{Float64},Int64),arg1,arg2)
    return err
end

function PCFactorGetLevels(arg1::PC{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PCFactorGetLevels,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function PCFactorSetDropTolerance(arg1::PC{Float64},arg2::Float64,arg3::Float64,arg4::Integer)
    err = ccall((:PCFactorSetDropTolerance,petscRealDouble),PetscErrorCode,(PC{Float64},Float64,Float64,Int64),arg1,arg2,arg3,arg4)
    return err
end

function PCASMSetLocalSubdomains(arg1::PC{Float64},arg2::Integer,arg3::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}},arg4::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:PCASMSetLocalSubdomains,petscRealDouble),PetscErrorCode,(PC{Float64},Int64,Ptr{IS{Float64}},Ptr{IS{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function PCASMSetTotalSubdomains(arg1::PC{Float64},arg2::Integer,arg3::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}},arg4::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:PCASMSetTotalSubdomains,petscRealDouble),PetscErrorCode,(PC{Float64},Int64,Ptr{IS{Float64}},Ptr{IS{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function PCASMSetOverlap(arg1::PC{Float64},arg2::Integer)
    err = ccall((:PCASMSetOverlap,petscRealDouble),PetscErrorCode,(PC{Float64},Int64),arg1,arg2)
    return err
end

function PCASMSetDMSubdomains(arg1::PC{Float64},arg2::PetscBool)
    err = ccall((:PCASMSetDMSubdomains,petscRealDouble),PetscErrorCode,(PC{Float64},PetscBool),arg1,arg2)
    return err
end

function PCASMGetDMSubdomains(arg1::PC{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCASMGetDMSubdomains,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCASMSetSortIndices(arg1::PC{Float64},arg2::PetscBool)
    err = ccall((:PCASMSetSortIndices,petscRealDouble),PetscErrorCode,(PC{Float64},PetscBool),arg1,arg2)
    return err
end

function PCASMSetType(arg1::PC{Float64},arg2::PCASMType)
    err = ccall((:PCASMSetType,petscRealDouble),PetscErrorCode,(PC{Float64},PCASMType),arg1,arg2)
    return err
end

function PCASMGetType(arg1::PC{Float64},arg2::Union{Ptr{PCASMType},StridedArray{PCASMType},Ptr{PCASMType},Ref{PCASMType}})
    err = ccall((:PCASMGetType,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{PCASMType}),arg1,arg2)
    return err
end

function PCASMSetLocalType(arg1::PC{Float64},arg2::PCCompositeType)
    err = ccall((:PCASMSetLocalType,petscRealDouble),PetscErrorCode,(PC{Float64},PCCompositeType),arg1,arg2)
    return err
end

function PCASMGetLocalType(arg1::PC{Float64},arg2::Union{Ptr{PCCompositeType},StridedArray{PCCompositeType},Ptr{PCCompositeType},Ref{PCCompositeType}})
    err = ccall((:PCASMGetLocalType,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{PCCompositeType}),arg1,arg2)
    return err
end

function PCASMCreateSubdomains(arg1::Mat{Float64},arg2::Integer,arg3::Union{Ptr{Ptr{IS{Float64}}},StridedArray{Ptr{IS{Float64}}},Ptr{Ptr{IS{Float64}}},Ref{Ptr{IS{Float64}}}})
    err = ccall((:PCASMCreateSubdomains,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64,Ptr{Ptr{IS{Float64}}}),arg1,arg2,arg3)
    return err
end

function PCASMDestroySubdomains(arg1::Integer,arg2::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}},arg3::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:PCASMDestroySubdomains,petscRealDouble),PetscErrorCode,(Int64,Ptr{IS{Float64}},Ptr{IS{Float64}}),arg1,arg2,arg3)
    return err
end

function PCASMCreateSubdomains2D(arg1::Integer,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Ptr{IS{Float64}}},StridedArray{Ptr{IS{Float64}}},Ptr{Ptr{IS{Float64}}},Ref{Ptr{IS{Float64}}}},arg9::Union{Ptr{Ptr{IS{Float64}}},StridedArray{Ptr{IS{Float64}}},Ptr{Ptr{IS{Float64}}},Ref{Ptr{IS{Float64}}}})
    err = ccall((:PCASMCreateSubdomains2D,petscRealDouble),PetscErrorCode,(Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Ptr{IS{Float64}}},Ptr{Ptr{IS{Float64}}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
    return err
end

function PCASMGetLocalSubdomains(arg1::PC{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{IS{Float64}}},StridedArray{Ptr{IS{Float64}}},Ptr{Ptr{IS{Float64}}},Ref{Ptr{IS{Float64}}}},arg4::Union{Ptr{Ptr{IS{Float64}}},StridedArray{Ptr{IS{Float64}}},Ptr{Ptr{IS{Float64}}},Ref{Ptr{IS{Float64}}}})
    err = ccall((:PCASMGetLocalSubdomains,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{Int64},Ptr{Ptr{IS{Float64}}},Ptr{Ptr{IS{Float64}}}),arg1,arg2,arg3,arg4)
    return err
end

function PCASMGetLocalSubmatrices(arg1::PC{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Mat{Float64}}},StridedArray{Ptr{Mat{Float64}}},Ptr{Ptr{Mat{Float64}}},Ref{Ptr{Mat{Float64}}}})
    err = ccall((:PCASMGetLocalSubmatrices,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{Int64},Ptr{Ptr{Mat{Float64}}}),arg1,arg2,arg3)
    return err
end

function PCGASMSetTotalSubdomains(arg1::PC{Float64},arg2::Integer)
    err = ccall((:PCGASMSetTotalSubdomains,petscRealDouble),PetscErrorCode,(PC{Float64},Int64),arg1,arg2)
    return err
end

function PCGASMSetSubdomains(arg1::PC{Float64},arg2::Integer,arg3::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}},arg4::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:PCGASMSetSubdomains,petscRealDouble),PetscErrorCode,(PC{Float64},Int64,Ptr{IS{Float64}},Ptr{IS{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function PCGASMSetOverlap(arg1::PC{Float64},arg2::Integer)
    err = ccall((:PCGASMSetOverlap,petscRealDouble),PetscErrorCode,(PC{Float64},Int64),arg1,arg2)
    return err
end

function PCGASMSetUseDMSubdomains(arg1::PC{Float64},arg2::PetscBool)
    err = ccall((:PCGASMSetUseDMSubdomains,petscRealDouble),PetscErrorCode,(PC{Float64},PetscBool),arg1,arg2)
    return err
end

function PCGASMGetUseDMSubdomains(arg1::PC{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCGASMGetUseDMSubdomains,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCGASMSetSortIndices(arg1::PC{Float64},arg2::PetscBool)
    err = ccall((:PCGASMSetSortIndices,petscRealDouble),PetscErrorCode,(PC{Float64},PetscBool),arg1,arg2)
    return err
end

function PCGASMSetType(arg1::PC{Float64},arg2::PCGASMType)
    err = ccall((:PCGASMSetType,petscRealDouble),PetscErrorCode,(PC{Float64},PCGASMType),arg1,arg2)
    return err
end

function PCGASMCreateSubdomains(arg1::Mat{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{IS{Float64}}},StridedArray{Ptr{IS{Float64}}},Ptr{Ptr{IS{Float64}}},Ref{Ptr{IS{Float64}}}})
    err = ccall((:PCGASMCreateSubdomains,petscRealDouble),PetscErrorCode,(Mat{Float64},Int64,Ptr{Int64},Ptr{Ptr{IS{Float64}}}),arg1,arg2,arg3,arg4)
    return err
end

function PCGASMDestroySubdomains(arg1::Integer,arg2::Union{Ptr{Ptr{IS{Float64}}},StridedArray{Ptr{IS{Float64}}},Ptr{Ptr{IS{Float64}}},Ref{Ptr{IS{Float64}}}},arg3::Union{Ptr{Ptr{IS{Float64}}},StridedArray{Ptr{IS{Float64}}},Ptr{Ptr{IS{Float64}}},Ref{Ptr{IS{Float64}}}})
    err = ccall((:PCGASMDestroySubdomains,petscRealDouble),PetscErrorCode,(Int64,Ptr{Ptr{IS{Float64}}},Ptr{Ptr{IS{Float64}}}),arg1,arg2,arg3)
    return err
end

function PCGASMCreateSubdomains2D(arg1::PC{Float64},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg9::Union{Ptr{Ptr{IS{Float64}}},StridedArray{Ptr{IS{Float64}}},Ptr{Ptr{IS{Float64}}},Ref{Ptr{IS{Float64}}}},arg10::Union{Ptr{Ptr{IS{Float64}}},StridedArray{Ptr{IS{Float64}}},Ptr{Ptr{IS{Float64}}},Ref{Ptr{IS{Float64}}}})
    err = ccall((:PCGASMCreateSubdomains2D,petscRealDouble),PetscErrorCode,(PC{Float64},Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Ptr{IS{Float64}}},Ptr{Ptr{IS{Float64}}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function PCGASMGetSubdomains(arg1::PC{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{IS{Float64}}},StridedArray{Ptr{IS{Float64}}},Ptr{Ptr{IS{Float64}}},Ref{Ptr{IS{Float64}}}},arg4::Union{Ptr{Ptr{IS{Float64}}},StridedArray{Ptr{IS{Float64}}},Ptr{Ptr{IS{Float64}}},Ref{Ptr{IS{Float64}}}})
    err = ccall((:PCGASMGetSubdomains,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{Int64},Ptr{Ptr{IS{Float64}}},Ptr{Ptr{IS{Float64}}}),arg1,arg2,arg3,arg4)
    return err
end

function PCGASMGetSubmatrices(arg1::PC{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Mat{Float64}}},StridedArray{Ptr{Mat{Float64}}},Ptr{Ptr{Mat{Float64}}},Ref{Ptr{Mat{Float64}}}})
    err = ccall((:PCGASMGetSubmatrices,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{Int64},Ptr{Ptr{Mat{Float64}}}),arg1,arg2,arg3)
    return err
end

function PCCompositeSetType(arg1::PC{Float64},arg2::PCCompositeType)
    err = ccall((:PCCompositeSetType,petscRealDouble),PetscErrorCode,(PC{Float64},PCCompositeType),arg1,arg2)
    return err
end

function PCCompositeGetType(arg1::PC{Float64},arg2::Union{Ptr{PCCompositeType},StridedArray{PCCompositeType},Ptr{PCCompositeType},Ref{PCCompositeType}})
    err = ccall((:PCCompositeGetType,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{PCCompositeType}),arg1,arg2)
    return err
end

function PCCompositeAddPC(arg1::PC{Float64},arg2::PCType)
    err = ccall((:PCCompositeAddPC,petscRealDouble),PetscErrorCode,(PC{Float64},PCType),arg1,arg2)
    return err
end

function PCCompositeGetPC(arg1::PC{Float64},arg2::Integer,arg3::Union{Ptr{PC{Float64}},StridedArray{PC{Float64}},Ptr{PC{Float64}},Ref{PC{Float64}}})
    err = ccall((:PCCompositeGetPC,petscRealDouble),PetscErrorCode,(PC{Float64},Int64,Ptr{PC{Float64}}),arg1,arg2,arg3)
    return err
end

function PCCompositeSpecialSetAlpha(arg1::PC{Float64},arg2::Float64)
    err = ccall((:PCCompositeSpecialSetAlpha,petscRealDouble),PetscErrorCode,(PC{Float64},Float64),arg1,arg2)
    return err
end

function PCRedundantSetNumber(arg1::PC{Float64},arg2::Integer)
    err = ccall((:PCRedundantSetNumber,petscRealDouble),PetscErrorCode,(PC{Float64},Int64),arg1,arg2)
    return err
end

function PCRedundantSetScatter(arg1::PC{Float64},arg2::VecScatter{Float64},arg3::VecScatter{Float64})
    err = ccall((:PCRedundantSetScatter,petscRealDouble),PetscErrorCode,(PC{Float64},VecScatter{Float64},VecScatter{Float64}),arg1,arg2,arg3)
    return err
end

function PCRedundantGetOperators(arg1::PC{Float64},arg2::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}},arg3::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:PCRedundantGetOperators,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{Mat{Float64}},Ptr{Mat{Float64}}),arg1,arg2,arg3)
    return err
end

function PCSPAISetEpsilon(arg1::PC{Float64},arg2::Cdouble)
    err = ccall((:PCSPAISetEpsilon,petscRealDouble),PetscErrorCode,(PC{Float64},Cdouble),arg1,arg2)
    return err
end

function PCSPAISetNBSteps(arg1::PC{Float64},arg2::Integer)
    err = ccall((:PCSPAISetNBSteps,petscRealDouble),PetscErrorCode,(PC{Float64},Int64),arg1,arg2)
    return err
end

function PCSPAISetMax(arg1::PC{Float64},arg2::Integer)
    err = ccall((:PCSPAISetMax,petscRealDouble),PetscErrorCode,(PC{Float64},Int64),arg1,arg2)
    return err
end

function PCSPAISetMaxNew(arg1::PC{Float64},arg2::Integer)
    err = ccall((:PCSPAISetMaxNew,petscRealDouble),PetscErrorCode,(PC{Float64},Int64),arg1,arg2)
    return err
end

function PCSPAISetBlockSize(arg1::PC{Float64},arg2::Integer)
    err = ccall((:PCSPAISetBlockSize,petscRealDouble),PetscErrorCode,(PC{Float64},Int64),arg1,arg2)
    return err
end

function PCSPAISetCacheSize(arg1::PC{Float64},arg2::Integer)
    err = ccall((:PCSPAISetCacheSize,petscRealDouble),PetscErrorCode,(PC{Float64},Int64),arg1,arg2)
    return err
end

function PCSPAISetVerbose(arg1::PC{Float64},arg2::Integer)
    err = ccall((:PCSPAISetVerbose,petscRealDouble),PetscErrorCode,(PC{Float64},Int64),arg1,arg2)
    return err
end

function PCSPAISetSp(arg1::PC{Float64},arg2::Integer)
    err = ccall((:PCSPAISetSp,petscRealDouble),PetscErrorCode,(PC{Float64},Int64),arg1,arg2)
    return err
end

function PCHYPRESetType(arg1::PC{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PCHYPRESetType,petscRealDouble),PetscErrorCode,(PC{Float64},Cstring),arg1,arg2)
    return err
end

function PCHYPREGetType(arg1::PC{Float64},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PCHYPREGetType,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PCHYPRESetDiscreteGradient(arg1::PC{Float64},arg2::Mat{Float64})
    err = ccall((:PCHYPRESetDiscreteGradient,petscRealDouble),PetscErrorCode,(PC{Float64},Mat{Float64}),arg1,arg2)
    return err
end

function PCHYPRESetDiscreteCurl(arg1::PC{Float64},arg2::Mat{Float64})
    err = ccall((:PCHYPRESetDiscreteCurl,petscRealDouble),PetscErrorCode,(PC{Float64},Mat{Float64}),arg1,arg2)
    return err
end

function PCHYPRESetEdgeConstantVectors(arg1::PC{Float64},arg2::Vec{Float64},arg3::Vec{Float64},arg4::Vec{Float64})
    err = ccall((:PCHYPRESetEdgeConstantVectors,petscRealDouble),PetscErrorCode,(PC{Float64},Vec{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function PCHYPRESetAlphaPoissonMatrix(arg1::PC{Float64},arg2::Mat{Float64})
    err = ccall((:PCHYPRESetAlphaPoissonMatrix,petscRealDouble),PetscErrorCode,(PC{Float64},Mat{Float64}),arg1,arg2)
    return err
end

function PCHYPRESetBetaPoissonMatrix(arg1::PC{Float64},arg2::Mat{Float64})
    err = ccall((:PCHYPRESetBetaPoissonMatrix,petscRealDouble),PetscErrorCode,(PC{Float64},Mat{Float64}),arg1,arg2)
    return err
end

function PCBJacobiGetLocalBlocks(arg1::PC{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:PCBJacobiGetLocalBlocks,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3)
    return err
end

function PCBJacobiGetTotalBlocks(arg1::PC{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:PCBJacobiGetTotalBlocks,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3)
    return err
end

function PCFieldSplitSetFields(arg1::PC{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PCFieldSplitSetFields,petscRealDouble),PetscErrorCode,(PC{Float64},Cstring,Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PCFieldSplitSetType(arg1::PC{Float64},arg2::PCCompositeType)
    err = ccall((:PCFieldSplitSetType,petscRealDouble),PetscErrorCode,(PC{Float64},PCCompositeType),arg1,arg2)
    return err
end

function PCFieldSplitGetType(arg1::PC{Float64},arg2::Union{Ptr{PCCompositeType},StridedArray{PCCompositeType},Ptr{PCCompositeType},Ref{PCCompositeType}})
    err = ccall((:PCFieldSplitGetType,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{PCCompositeType}),arg1,arg2)
    return err
end

function PCFieldSplitSetBlockSize(arg1::PC{Float64},arg2::Integer)
    err = ccall((:PCFieldSplitSetBlockSize,petscRealDouble),PetscErrorCode,(PC{Float64},Int64),arg1,arg2)
    return err
end

function PCFieldSplitSetIS(arg1::PC{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::IS{Float64})
    err = ccall((:PCFieldSplitSetIS,petscRealDouble),PetscErrorCode,(PC{Float64},Cstring,IS{Float64}),arg1,arg2,arg3)
    return err
end

function PCFieldSplitGetIS(arg1::PC{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:PCFieldSplitGetIS,petscRealDouble),PetscErrorCode,(PC{Float64},Cstring,Ptr{IS{Float64}}),arg1,arg2,arg3)
    return err
end

function PCFieldSplitSetDMSplits(arg1::PC{Float64},arg2::PetscBool)
    err = ccall((:PCFieldSplitSetDMSplits,petscRealDouble),PetscErrorCode,(PC{Float64},PetscBool),arg1,arg2)
    return err
end

function PCFieldSplitGetDMSplits(arg1::PC{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCFieldSplitGetDMSplits,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCFieldSplitSetDiagUseAmat(arg1::PC{Float64},arg2::PetscBool)
    err = ccall((:PCFieldSplitSetDiagUseAmat,petscRealDouble),PetscErrorCode,(PC{Float64},PetscBool),arg1,arg2)
    return err
end

function PCFieldSplitGetDiagUseAmat(arg1::PC{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCFieldSplitGetDiagUseAmat,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCFieldSplitSetOffDiagUseAmat(arg1::PC{Float64},arg2::PetscBool)
    err = ccall((:PCFieldSplitSetOffDiagUseAmat,petscRealDouble),PetscErrorCode,(PC{Float64},PetscBool),arg1,arg2)
    return err
end

function PCFieldSplitGetOffDiagUseAmat(arg1::PC{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCFieldSplitGetOffDiagUseAmat,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PETSC_DEPRECATED(arg0::Type{Float64})
    err = ccall((:PETSC_DEPRECATED,petscRealDouble),Cint,())
    return err
end

function PCFieldSplitSchurPrecondition(arg1::PC{Float64},arg2::PCFieldSplitSchurPreType,arg3::Mat{Float64})
    err = ccall((:PCFieldSplitSchurPrecondition,petscRealDouble),PetscErrorCode,(PC{Float64},PCFieldSplitSchurPreType,Mat{Float64}),arg1,arg2,arg3)
    return err
end

function PCFieldSplitSetSchurPre(arg1::PC{Float64},arg2::PCFieldSplitSchurPreType,arg3::Mat{Float64})
    err = ccall((:PCFieldSplitSetSchurPre,petscRealDouble),PetscErrorCode,(PC{Float64},PCFieldSplitSchurPreType,Mat{Float64}),arg1,arg2,arg3)
    return err
end

function PCFieldSplitGetSchurPre(arg1::PC{Float64},arg2::Union{Ptr{PCFieldSplitSchurPreType},StridedArray{PCFieldSplitSchurPreType},Ptr{PCFieldSplitSchurPreType},Ref{PCFieldSplitSchurPreType}},arg3::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:PCFieldSplitGetSchurPre,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{PCFieldSplitSchurPreType},Ptr{Mat{Float64}}),arg1,arg2,arg3)
    return err
end

function PCFieldSplitSetSchurFactType(arg1::PC{Float64},arg2::PCFieldSplitSchurFactType)
    err = ccall((:PCFieldSplitSetSchurFactType,petscRealDouble),PetscErrorCode,(PC{Float64},PCFieldSplitSchurFactType),arg1,arg2)
    return err
end

function PCFieldSplitGetSchurBlocks(arg1::PC{Float64},arg2::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}},arg3::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}},arg4::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}},arg5::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:PCFieldSplitGetSchurBlocks,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{Mat{Float64}},Ptr{Mat{Float64}},Ptr{Mat{Float64}},Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PCFieldSplitSchurGetS(arg1::PC{Float64},S::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:PCFieldSplitSchurGetS,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{Mat{Float64}}),arg1,S)
    return err
end

function PCFieldSplitSchurRestoreS(arg1::PC{Float64},S::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:PCFieldSplitSchurRestoreS,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{Mat{Float64}}),arg1,S)
    return err
end

function PCGalerkinSetRestriction(arg1::PC{Float64},arg2::Mat{Float64})
    err = ccall((:PCGalerkinSetRestriction,petscRealDouble),PetscErrorCode,(PC{Float64},Mat{Float64}),arg1,arg2)
    return err
end

function PCGalerkinSetInterpolation(arg1::PC{Float64},arg2::Mat{Float64})
    err = ccall((:PCGalerkinSetInterpolation,petscRealDouble),PetscErrorCode,(PC{Float64},Mat{Float64}),arg1,arg2)
    return err
end

function PCSetCoordinates(arg1::PC{Float64},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:PCSetCoordinates,petscRealDouble),PetscErrorCode,(PC{Float64},Int64,Int64,Ptr{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function PCPythonSetType(arg1::PC{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:PCPythonSetType,petscRealDouble),PetscErrorCode,(PC{Float64},Cstring),arg1,arg2)
    return err
end

function PCSetDM(arg1::PC{Float64},arg2::DM{Float64})
    err = ccall((:PCSetDM,petscRealDouble),PetscErrorCode,(PC{Float64},DM{Float64}),arg1,arg2)
    return err
end

function PCGetDM(arg1::PC{Float64},arg2::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:PCGetDM,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{DM{Float64}}),arg1,arg2)
    return err
end

function PCSetApplicationContext(arg1::PC{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCSetApplicationContext,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function PCGetApplicationContext(arg1::PC{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCGetApplicationContext,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function PCBiCGStabCUSPSetTolerance(arg1::PC{Float64},arg2::Float64)
    err = ccall((:PCBiCGStabCUSPSetTolerance,petscRealDouble),PetscErrorCode,(PC{Float64},Float64),arg1,arg2)
    return err
end

function PCBiCGStabCUSPSetIterations(arg1::PC{Float64},arg2::Integer)
    err = ccall((:PCBiCGStabCUSPSetIterations,petscRealDouble),PetscErrorCode,(PC{Float64},Int64),arg1,arg2)
    return err
end

function PCBiCGStabCUSPSetUseVerboseMonitor(arg1::PC{Float64},arg2::PetscBool)
    err = ccall((:PCBiCGStabCUSPSetUseVerboseMonitor,petscRealDouble),PetscErrorCode,(PC{Float64},PetscBool),arg1,arg2)
    return err
end

function PCAINVCUSPSetDropTolerance(arg1::PC{Float64},arg2::Float64)
    err = ccall((:PCAINVCUSPSetDropTolerance,petscRealDouble),PetscErrorCode,(PC{Float64},Float64),arg1,arg2)
    return err
end

function PCAINVCUSPUseScaling(arg1::PC{Float64},arg2::PetscBool)
    err = ccall((:PCAINVCUSPUseScaling,petscRealDouble),PetscErrorCode,(PC{Float64},PetscBool),arg1,arg2)
    return err
end

function PCAINVCUSPSetNonzeros(arg1::PC{Float64},arg2::Integer)
    err = ccall((:PCAINVCUSPSetNonzeros,petscRealDouble),PetscErrorCode,(PC{Float64},Int64),arg1,arg2)
    return err
end

function PCAINVCUSPSetLinParameter(arg1::PC{Float64},arg2::Integer)
    err = ccall((:PCAINVCUSPSetLinParameter,petscRealDouble),PetscErrorCode,(PC{Float64},Int64),arg1,arg2)
    return err
end

function PCPARMSSetGlobal(arg1::PC{Float64},arg2::PCPARMSGlobalType)
    err = ccall((:PCPARMSSetGlobal,petscRealDouble),PetscErrorCode,(PC{Float64},PCPARMSGlobalType),arg1,arg2)
    return err
end

function PCPARMSSetLocal(arg1::PC{Float64},arg2::PCPARMSLocalType)
    err = ccall((:PCPARMSSetLocal,petscRealDouble),PetscErrorCode,(PC{Float64},PCPARMSLocalType),arg1,arg2)
    return err
end

function PCPARMSSetSolveTolerances(arg1::PC{Float64},arg2::Float64,arg3::Integer)
    err = ccall((:PCPARMSSetSolveTolerances,petscRealDouble),PetscErrorCode,(PC{Float64},Float64,Int64),arg1,arg2,arg3)
    return err
end

function PCPARMSSetSolveRestart(arg1::PC{Float64},arg2::Integer)
    err = ccall((:PCPARMSSetSolveRestart,petscRealDouble),PetscErrorCode,(PC{Float64},Int64),arg1,arg2)
    return err
end

function PCPARMSSetNonsymPerm(arg1::PC{Float64},arg2::PetscBool)
    err = ccall((:PCPARMSSetNonsymPerm,petscRealDouble),PetscErrorCode,(PC{Float64},PetscBool),arg1,arg2)
    return err
end

function PCPARMSSetFill(arg1::PC{Float64},arg2::Integer,arg3::Integer,arg4::Integer)
    err = ccall((:PCPARMSSetFill,petscRealDouble),PetscErrorCode,(PC{Float64},Int64,Int64,Int64),arg1,arg2,arg3,arg4)
    return err
end

function PCGAMGSetType(arg1::PC{Float64},arg2::PCGAMGType)
    err = ccall((:PCGAMGSetType,petscRealDouble),PetscErrorCode,(PC{Float64},PCGAMGType),arg1,arg2)
    return err
end

function PCGAMGGetType(arg1::PC{Float64},arg2::Union{Ptr{PCGAMGType},StridedArray{PCGAMGType},Ptr{PCGAMGType},Ref{PCGAMGType}})
    err = ccall((:PCGAMGGetType,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{PCGAMGType}),arg1,arg2)
    return err
end

function PCGAMGSetProcEqLim(arg1::PC{Float64},arg2::Integer)
    err = ccall((:PCGAMGSetProcEqLim,petscRealDouble),PetscErrorCode,(PC{Float64},Int64),arg1,arg2)
    return err
end

function PCGAMGSetRepartitioning(arg1::PC{Float64},arg2::PetscBool)
    err = ccall((:PCGAMGSetRepartitioning,petscRealDouble),PetscErrorCode,(PC{Float64},PetscBool),arg1,arg2)
    return err
end

function PCGAMGSetUseASMAggs(arg1::PC{Float64},arg2::PetscBool)
    err = ccall((:PCGAMGSetUseASMAggs,petscRealDouble),PetscErrorCode,(PC{Float64},PetscBool),arg1,arg2)
    return err
end

function PCGAMGSetSolverType(arg1::PC{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer)
    err = ccall((:PCGAMGSetSolverType,petscRealDouble),PetscErrorCode,(PC{Float64},Cstring,Int64),arg1,arg2,arg3)
    return err
end

function PCGAMGSetThreshold(arg1::PC{Float64},arg2::Float64)
    err = ccall((:PCGAMGSetThreshold,petscRealDouble),PetscErrorCode,(PC{Float64},Float64),arg1,arg2)
    return err
end

function PCGAMGSetCoarseEqLim(arg1::PC{Float64},arg2::Integer)
    err = ccall((:PCGAMGSetCoarseEqLim,petscRealDouble),PetscErrorCode,(PC{Float64},Int64),arg1,arg2)
    return err
end

function PCGAMGSetNlevels(arg1::PC{Float64},arg2::Integer)
    err = ccall((:PCGAMGSetNlevels,petscRealDouble),PetscErrorCode,(PC{Float64},Int64),arg1,arg2)
    return err
end

function PCGAMGSetNSmooths(arg1::PC{Float64},arg2::Integer)
    err = ccall((:PCGAMGSetNSmooths,petscRealDouble),PetscErrorCode,(PC{Float64},Int64),arg1,arg2)
    return err
end

function PCGAMGSetSymGraph(arg1::PC{Float64},arg2::PetscBool)
    err = ccall((:PCGAMGSetSymGraph,petscRealDouble),PetscErrorCode,(PC{Float64},PetscBool),arg1,arg2)
    return err
end

function PCGAMGSetSquareGraph(arg1::PC{Float64},arg2::Integer)
    err = ccall((:PCGAMGSetSquareGraph,petscRealDouble),PetscErrorCode,(PC{Float64},Int64),arg1,arg2)
    return err
end

function PCGAMGSetReuseInterpolation(arg1::PC{Float64},arg2::PetscBool)
    err = ccall((:PCGAMGSetReuseInterpolation,petscRealDouble),PetscErrorCode,(PC{Float64},PetscBool),arg1,arg2)
    return err
end

function PCGAMGFinalizePackage(arg0::Type{Float64})
    err = ccall((:PCGAMGFinalizePackage,petscRealDouble),PetscErrorCode,())
    return err
end

function PCGAMGInitializePackage(arg0::Type{Float64})
    err = ccall((:PCGAMGInitializePackage,petscRealDouble),PetscErrorCode,())
    return err
end

function PCGAMGRegister(arg0::Type{Float64},arg1::PCGAMGType,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCGAMGRegister,petscRealDouble),PetscErrorCode,(PCGAMGType,Ptr{Void}),arg1,arg2)
    return err
end

function PCGAMGClassicalSetType(arg1::PC{Float64},arg2::PCGAMGClassicalType)
    err = ccall((:PCGAMGClassicalSetType,petscRealDouble),PetscErrorCode,(PC{Float64},PCGAMGClassicalType),arg1,arg2)
    return err
end

function PCGAMGClassicalGetType(arg1::PC{Float64},arg2::Union{Ptr{PCGAMGClassicalType},StridedArray{PCGAMGClassicalType},Ptr{PCGAMGClassicalType},Ref{PCGAMGClassicalType}})
    err = ccall((:PCGAMGClassicalGetType,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{PCGAMGClassicalType}),arg1,arg2)
    return err
end

function PCBDDCSetChangeOfBasisMat(arg1::PC{Float64},arg2::Mat{Float64})
    err = ccall((:PCBDDCSetChangeOfBasisMat,petscRealDouble),PetscErrorCode,(PC{Float64},Mat{Float64}),arg1,arg2)
    return err
end

function PCBDDCSetPrimalVerticesLocalIS(arg1::PC{Float64},arg2::IS{Float64})
    err = ccall((:PCBDDCSetPrimalVerticesLocalIS,petscRealDouble),PetscErrorCode,(PC{Float64},IS{Float64}),arg1,arg2)
    return err
end

function PCBDDCSetCoarseningRatio(arg1::PC{Float64},arg2::Integer)
    err = ccall((:PCBDDCSetCoarseningRatio,petscRealDouble),PetscErrorCode,(PC{Float64},Int64),arg1,arg2)
    return err
end

function PCBDDCSetLevels(arg1::PC{Float64},arg2::Integer)
    err = ccall((:PCBDDCSetLevels,petscRealDouble),PetscErrorCode,(PC{Float64},Int64),arg1,arg2)
    return err
end

function PCBDDCSetNullSpace(arg1::PC{Float64},arg2::MatNullSpace{Float64})
    err = ccall((:PCBDDCSetNullSpace,petscRealDouble),PetscErrorCode,(PC{Float64},MatNullSpace{Float64}),arg1,arg2)
    return err
end

function PCBDDCSetDirichletBoundaries(arg1::PC{Float64},arg2::IS{Float64})
    err = ccall((:PCBDDCSetDirichletBoundaries,petscRealDouble),PetscErrorCode,(PC{Float64},IS{Float64}),arg1,arg2)
    return err
end

function PCBDDCSetDirichletBoundariesLocal(arg1::PC{Float64},arg2::IS{Float64})
    err = ccall((:PCBDDCSetDirichletBoundariesLocal,petscRealDouble),PetscErrorCode,(PC{Float64},IS{Float64}),arg1,arg2)
    return err
end

function PCBDDCGetDirichletBoundaries(arg1::PC{Float64},arg2::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:PCBDDCGetDirichletBoundaries,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{IS{Float64}}),arg1,arg2)
    return err
end

function PCBDDCGetDirichletBoundariesLocal(arg1::PC{Float64},arg2::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:PCBDDCGetDirichletBoundariesLocal,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{IS{Float64}}),arg1,arg2)
    return err
end

function PCBDDCSetNeumannBoundaries(arg1::PC{Float64},arg2::IS{Float64})
    err = ccall((:PCBDDCSetNeumannBoundaries,petscRealDouble),PetscErrorCode,(PC{Float64},IS{Float64}),arg1,arg2)
    return err
end

function PCBDDCSetNeumannBoundariesLocal(arg1::PC{Float64},arg2::IS{Float64})
    err = ccall((:PCBDDCSetNeumannBoundariesLocal,petscRealDouble),PetscErrorCode,(PC{Float64},IS{Float64}),arg1,arg2)
    return err
end

function PCBDDCGetNeumannBoundaries(arg1::PC{Float64},arg2::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:PCBDDCGetNeumannBoundaries,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{IS{Float64}}),arg1,arg2)
    return err
end

function PCBDDCGetNeumannBoundariesLocal(arg1::PC{Float64},arg2::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:PCBDDCGetNeumannBoundariesLocal,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{IS{Float64}}),arg1,arg2)
    return err
end

function PCBDDCSetDofsSplitting(arg1::PC{Float64},arg2::Integer,arg3::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:PCBDDCSetDofsSplitting,petscRealDouble),PetscErrorCode,(PC{Float64},Int64,Ptr{IS{Float64}}),arg1,arg2,arg3)
    return err
end

function PCBDDCSetDofsSplittingLocal(arg1::PC{Float64},arg2::Integer,arg3::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:PCBDDCSetDofsSplittingLocal,petscRealDouble),PetscErrorCode,(PC{Float64},Int64,Ptr{IS{Float64}}),arg1,arg2,arg3)
    return err
end

function PCBDDCSetLocalAdjacencyGraph(arg1::PC{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},PetscCopyMode::Integer)
    err = ccall((:PCBDDCSetLocalAdjacencyGraph,petscRealDouble),PetscErrorCode,(PC{Float64},Int64,Ptr{Int64},Ptr{Int64},Cint),arg1,arg2,arg3,arg4,PetscCopyMode)
    return err
end

function PCBDDCCreateFETIDPOperators(arg1::PC{Float64},arg2::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}},arg3::Union{Ptr{PC{Float64}},StridedArray{PC{Float64}},Ptr{PC{Float64}},Ref{PC{Float64}}})
    err = ccall((:PCBDDCCreateFETIDPOperators,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{Mat{Float64}},Ptr{PC{Float64}}),arg1,arg2,arg3)
    return err
end

function PCBDDCMatFETIDPGetRHS(arg1::Mat{Float64},arg2::Vec{Float64},arg3::Vec{Float64})
    err = ccall((:PCBDDCMatFETIDPGetRHS,petscRealDouble),PetscErrorCode,(Mat{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3)
    return err
end

function PCBDDCMatFETIDPGetSolution(arg1::Mat{Float64},arg2::Vec{Float64},arg3::Vec{Float64})
    err = ccall((:PCBDDCMatFETIDPGetSolution,petscRealDouble),PetscErrorCode,(Mat{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3)
    return err
end

function PCISSetUseStiffnessScaling(arg1::PC{Float64},arg2::PetscBool)
    err = ccall((:PCISSetUseStiffnessScaling,petscRealDouble),PetscErrorCode,(PC{Float64},PetscBool),arg1,arg2)
    return err
end

function PCISSetSubdomainScalingFactor(arg1::PC{Float64},arg2::Float64)
    err = ccall((:PCISSetSubdomainScalingFactor,petscRealDouble),PetscErrorCode,(PC{Float64},Float64),arg1,arg2)
    return err
end

function PCISSetSubdomainDiagonalScaling(arg1::PC{Float64},arg2::Vec{Float64})
    err = ccall((:PCISSetSubdomainDiagonalScaling,petscRealDouble),PetscErrorCode,(PC{Float64},Vec{Float64}),arg1,arg2)
    return err
end

function PCMGSetType(arg1::PC{Float64},arg2::PCMGType)
    err = ccall((:PCMGSetType,petscRealDouble),PetscErrorCode,(PC{Float64},PCMGType),arg1,arg2)
    return err
end

function PCMGGetType(arg1::PC{Float64},arg2::Union{Ptr{PCMGType},StridedArray{PCMGType},Ptr{PCMGType},Ref{PCMGType}})
    err = ccall((:PCMGGetType,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{PCMGType}),arg1,arg2)
    return err
end

function PCMGSetLevels(arg1::PC{Float64},arg2::Integer,arg3::Union{Ptr{MPI_Comm},StridedArray{MPI_Comm},Ptr{MPI_Comm},Ref{MPI_Comm}})
    err = ccall((:PCMGSetLevels,petscRealDouble),PetscErrorCode,(PC{Float64},Int64,Ptr{comm_type}),arg1,arg2,arg3)
    return err
end

function PCMGGetLevels(arg1::PC{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PCMGGetLevels,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function PCMGSetNumberSmoothUp(arg1::PC{Float64},arg2::Integer)
    err = ccall((:PCMGSetNumberSmoothUp,petscRealDouble),PetscErrorCode,(PC{Float64},Int64),arg1,arg2)
    return err
end

function PCMGSetNumberSmoothDown(arg1::PC{Float64},arg2::Integer)
    err = ccall((:PCMGSetNumberSmoothDown,petscRealDouble),PetscErrorCode,(PC{Float64},Int64),arg1,arg2)
    return err
end

function PCMGSetCycleType(arg1::PC{Float64},arg2::PCMGCycleType)
    err = ccall((:PCMGSetCycleType,petscRealDouble),PetscErrorCode,(PC{Float64},PCMGCycleType),arg1,arg2)
    return err
end

function PCMGSetCycleTypeOnLevel(arg1::PC{Float64},arg2::Integer,arg3::PCMGCycleType)
    err = ccall((:PCMGSetCycleTypeOnLevel,petscRealDouble),PetscErrorCode,(PC{Float64},Int64,PCMGCycleType),arg1,arg2,arg3)
    return err
end

function PCMGSetCyclesOnLevel(arg1::PC{Float64},arg2::Integer,arg3::Integer)
    err = ccall((:PCMGSetCyclesOnLevel,petscRealDouble),PetscErrorCode,(PC{Float64},Int64,Int64),arg1,arg2,arg3)
    return err
end

function PCMGMultiplicativeSetCycles(arg1::PC{Float64},arg2::Integer)
    err = ccall((:PCMGMultiplicativeSetCycles,petscRealDouble),PetscErrorCode,(PC{Float64},Int64),arg1,arg2)
    return err
end

function PCMGSetGalerkin(arg1::PC{Float64},arg2::PetscBool)
    err = ccall((:PCMGSetGalerkin,petscRealDouble),PetscErrorCode,(PC{Float64},PetscBool),arg1,arg2)
    return err
end

function PCMGGetGalerkin(arg1::PC{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCMGGetGalerkin,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCMGSetRhs(arg1::PC{Float64},arg2::Integer,arg3::Vec{Float64})
    err = ccall((:PCMGSetRhs,petscRealDouble),PetscErrorCode,(PC{Float64},Int64,Vec{Float64}),arg1,arg2,arg3)
    return err
end

function PCMGSetX(arg1::PC{Float64},arg2::Integer,arg3::Vec{Float64})
    err = ccall((:PCMGSetX,petscRealDouble),PetscErrorCode,(PC{Float64},Int64,Vec{Float64}),arg1,arg2,arg3)
    return err
end

function PCMGSetR(arg1::PC{Float64},arg2::Integer,arg3::Vec{Float64})
    err = ccall((:PCMGSetR,petscRealDouble),PetscErrorCode,(PC{Float64},Int64,Vec{Float64}),arg1,arg2,arg3)
    return err
end

function PCMGSetRestriction(arg1::PC{Float64},arg2::Integer,arg3::Mat{Float64})
    err = ccall((:PCMGSetRestriction,petscRealDouble),PetscErrorCode,(PC{Float64},Int64,Mat{Float64}),arg1,arg2,arg3)
    return err
end

function PCMGGetRestriction(arg1::PC{Float64},arg2::Integer,arg3::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:PCMGGetRestriction,petscRealDouble),PetscErrorCode,(PC{Float64},Int64,Ptr{Mat{Float64}}),arg1,arg2,arg3)
    return err
end

function PCMGSetInterpolation(arg1::PC{Float64},arg2::Integer,arg3::Mat{Float64})
    err = ccall((:PCMGSetInterpolation,petscRealDouble),PetscErrorCode,(PC{Float64},Int64,Mat{Float64}),arg1,arg2,arg3)
    return err
end

function PCMGGetInterpolation(arg1::PC{Float64},arg2::Integer,arg3::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:PCMGGetInterpolation,petscRealDouble),PetscErrorCode,(PC{Float64},Int64,Ptr{Mat{Float64}}),arg1,arg2,arg3)
    return err
end

function PCMGSetRScale(arg1::PC{Float64},arg2::Integer,arg3::Vec{Float64})
    err = ccall((:PCMGSetRScale,petscRealDouble),PetscErrorCode,(PC{Float64},Int64,Vec{Float64}),arg1,arg2,arg3)
    return err
end

function PCMGGetRScale(arg1::PC{Float64},arg2::Integer,arg3::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:PCMGGetRScale,petscRealDouble),PetscErrorCode,(PC{Float64},Int64,Ptr{Vec{Float64}}),arg1,arg2,arg3)
    return err
end

function PCMGSetResidual(arg1::PC{Float64},arg2::Integer,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Mat{Float64})
    err = ccall((:PCMGSetResidual,petscRealDouble),PetscErrorCode,(PC{Float64},Int64,Ptr{Void},Mat{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function PCMGResidualDefault(arg1::Mat{Float64},arg2::Vec{Float64},arg3::Vec{Float64},arg4::Vec{Float64})
    err = ccall((:PCMGResidualDefault,petscRealDouble),PetscErrorCode,(Mat{Float64},Vec{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function KSPInitializePackage(arg0::Type{Float64})
    err = ccall((:KSPInitializePackage,petscRealDouble),PetscErrorCode,())
    return err
end

function KSPCreate(arg1::MPI_Comm,arg2::Union{Ptr{KSP{Float64}},StridedArray{KSP{Float64}},Ptr{KSP{Float64}},Ref{KSP{Float64}}})
    err = ccall((:KSPCreate,petscRealDouble),PetscErrorCode,(comm_type,Ptr{KSP{Float64}}),arg1,arg2)
    return err
end

function KSPSetType(arg1::KSP{Float64},arg2::KSPType)
    err = ccall((:KSPSetType,petscRealDouble),PetscErrorCode,(KSP{Float64},KSPType),arg1,arg2)
    return err
end

function KSPGetType(arg1::KSP{Float64},arg2::Union{Ptr{KSPType},StridedArray{KSPType},Ptr{KSPType},Ref{KSPType}})
    err = ccall((:KSPGetType,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{KSPType}),arg1,arg2)
    return err
end

function KSPSetUp(arg1::KSP{Float64})
    err = ccall((:KSPSetUp,petscRealDouble),PetscErrorCode,(KSP{Float64},),arg1)
    return err
end

function KSPSetUpOnBlocks(arg1::KSP{Float64})
    err = ccall((:KSPSetUpOnBlocks,petscRealDouble),PetscErrorCode,(KSP{Float64},),arg1)
    return err
end

function KSPSolve(arg1::KSP{Float64},arg2::Vec{Float64},arg3::Vec{Float64})
    err = ccall((:KSPSolve,petscRealDouble),PetscErrorCode,(KSP{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3)
    return err
end

function KSPSolveTranspose(arg1::KSP{Float64},arg2::Vec{Float64},arg3::Vec{Float64})
    err = ccall((:KSPSolveTranspose,petscRealDouble),PetscErrorCode,(KSP{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3)
    return err
end

function KSPReset(arg1::KSP{Float64})
    err = ccall((:KSPReset,petscRealDouble),PetscErrorCode,(KSP{Float64},),arg1)
    return err
end

function KSPDestroy(arg1::Union{Ptr{KSP{Float64}},StridedArray{KSP{Float64}},Ptr{KSP{Float64}},Ref{KSP{Float64}}})
    err = ccall((:KSPDestroy,petscRealDouble),PetscErrorCode,(Ptr{KSP{Float64}},),arg1)
    return err
end

function KSPSetReusePreconditioner(arg1::KSP{Float64},arg2::PetscBool)
    err = ccall((:KSPSetReusePreconditioner,petscRealDouble),PetscErrorCode,(KSP{Float64},PetscBool),arg1,arg2)
    return err
end

function KSPSetSkipPCSetFromOptions(arg1::KSP{Float64},arg2::PetscBool)
    err = ccall((:KSPSetSkipPCSetFromOptions,petscRealDouble),PetscErrorCode,(KSP{Float64},PetscBool),arg1,arg2)
    return err
end

function KSPRegister(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPRegister,petscRealDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function KSPSetPCSide(arg1::KSP{Float64},arg2::PCSide)
    err = ccall((:KSPSetPCSide,petscRealDouble),PetscErrorCode,(KSP{Float64},PCSide),arg1,arg2)
    return err
end

function KSPGetPCSide(arg1::KSP{Float64},arg2::Union{Ptr{PCSide},StridedArray{PCSide},Ptr{PCSide},Ref{PCSide}})
    err = ccall((:KSPGetPCSide,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{PCSide}),arg1,arg2)
    return err
end

function KSPSetTolerances(arg1::KSP{Float64},arg2::Float64,arg3::Float64,arg4::Float64,arg5::Integer)
    err = ccall((:KSPSetTolerances,petscRealDouble),PetscErrorCode,(KSP{Float64},Float64,Float64,Float64,Int64),arg1,arg2,arg3,arg4,arg5)
    return err
end

function KSPGetTolerances(arg1::KSP{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:KSPGetTolerances,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function KSPSetInitialGuessNonzero(arg1::KSP{Float64},arg2::PetscBool)
    err = ccall((:KSPSetInitialGuessNonzero,petscRealDouble),PetscErrorCode,(KSP{Float64},PetscBool),arg1,arg2)
    return err
end

function KSPGetInitialGuessNonzero(arg1::KSP{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:KSPGetInitialGuessNonzero,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function KSPSetInitialGuessKnoll(arg1::KSP{Float64},arg2::PetscBool)
    err = ccall((:KSPSetInitialGuessKnoll,petscRealDouble),PetscErrorCode,(KSP{Float64},PetscBool),arg1,arg2)
    return err
end

function KSPGetInitialGuessKnoll(arg1::KSP{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:KSPGetInitialGuessKnoll,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function KSPSetErrorIfNotConverged(arg1::KSP{Float64},arg2::PetscBool)
    err = ccall((:KSPSetErrorIfNotConverged,petscRealDouble),PetscErrorCode,(KSP{Float64},PetscBool),arg1,arg2)
    return err
end

function KSPGetErrorIfNotConverged(arg1::KSP{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:KSPGetErrorIfNotConverged,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function KSPSetComputeEigenvalues(arg1::KSP{Float64},arg2::PetscBool)
    err = ccall((:KSPSetComputeEigenvalues,petscRealDouble),PetscErrorCode,(KSP{Float64},PetscBool),arg1,arg2)
    return err
end

function KSPGetComputeEigenvalues(arg1::KSP{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:KSPGetComputeEigenvalues,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function KSPSetComputeSingularValues(arg1::KSP{Float64},arg2::PetscBool)
    err = ccall((:KSPSetComputeSingularValues,petscRealDouble),PetscErrorCode,(KSP{Float64},PetscBool),arg1,arg2)
    return err
end

function KSPGetComputeSingularValues(arg1::KSP{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:KSPGetComputeSingularValues,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function KSPGetRhs(arg1::KSP{Float64},arg2::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:KSPGetRhs,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{Vec{Float64}}),arg1,arg2)
    return err
end

function KSPGetSolution(arg1::KSP{Float64},arg2::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:KSPGetSolution,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{Vec{Float64}}),arg1,arg2)
    return err
end

function KSPGetResidualNorm(arg1::KSP{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:KSPGetResidualNorm,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{Float64}),arg1,arg2)
    return err
end

function KSPGetIterationNumber(arg1::KSP{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:KSPGetIterationNumber,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function KSPGetTotalIterations(arg1::KSP{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:KSPGetTotalIterations,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function KSPCreateVecs(arg1::KSP{Float64},arg2::Integer,arg3::Union{Ptr{Ptr{Vec{Float64}}},StridedArray{Ptr{Vec{Float64}}},Ptr{Ptr{Vec{Float64}}},Ref{Ptr{Vec{Float64}}}},arg4::Integer,arg5::Union{Ptr{Ptr{Vec{Float64}}},StridedArray{Ptr{Vec{Float64}}},Ptr{Ptr{Vec{Float64}}},Ref{Ptr{Vec{Float64}}}})
    err = ccall((:KSPCreateVecs,petscRealDouble),PetscErrorCode,(KSP{Float64},Int64,Ptr{Ptr{Vec{Float64}}},Int64,Ptr{Ptr{Vec{Float64}}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function KSPSetPostSolve(arg1::KSP{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPSetPostSolve,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function KSPSetPC(arg1::KSP{Float64},arg2::PC{Float64})
    err = ccall((:KSPSetPC,petscRealDouble),PetscErrorCode,(KSP{Float64},PC{Float64}),arg1,arg2)
    return err
end

function KSPGetPC(arg1::KSP{Float64},arg2::Union{Ptr{PC{Float64}},StridedArray{PC{Float64}},Ptr{PC{Float64}},Ref{PC{Float64}}})
    err = ccall((:KSPGetPC,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{PC{Float64}}),arg1,arg2)
    return err
end

function KSPMonitor(arg1::KSP{Float64},arg2::Integer,arg3::Float64)
    err = ccall((:KSPMonitor,petscRealDouble),PetscErrorCode,(KSP{Float64},Int64,Float64),arg1,arg2,arg3)
    return err
end

function KSPMonitorSet(arg1::KSP{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPMonitorSet,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPMonitorCancel(arg1::KSP{Float64})
    err = ccall((:KSPMonitorCancel,petscRealDouble),PetscErrorCode,(KSP{Float64},),arg1)
    return err
end

function KSPGetMonitorContext(arg1::KSP{Float64},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:KSPGetMonitorContext,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{Ptr{Void}}),arg1,arg2)
    return err
end

function KSPGetResidualHistory(arg1::KSP{Float64},arg2::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:KSPGetResidualHistory,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{Ptr{Float64}},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function KSPSetResidualHistory(arg1::KSP{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Integer,arg4::PetscBool)
    err = ccall((:KSPSetResidualHistory,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{Float64},Int64,PetscBool),arg1,arg2,arg3,arg4)
    return err
end

function KSPBuildSolutionDefault(arg1::KSP{Float64},arg2::Vec{Float64},arg3::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:KSPBuildSolutionDefault,petscRealDouble),PetscErrorCode,(KSP{Float64},Vec{Float64},Ptr{Vec{Float64}}),arg1,arg2,arg3)
    return err
end

function KSPBuildResidualDefault(arg1::KSP{Float64},arg2::Vec{Float64},arg3::Vec{Float64},arg4::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:KSPBuildResidualDefault,petscRealDouble),PetscErrorCode,(KSP{Float64},Vec{Float64},Vec{Float64},Ptr{Vec{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function KSPDestroyDefault(arg1::KSP{Float64})
    err = ccall((:KSPDestroyDefault,petscRealDouble),PetscErrorCode,(KSP{Float64},),arg1)
    return err
end

function KSPSetWorkVecs(arg1::KSP{Float64},arg2::Integer)
    err = ccall((:KSPSetWorkVecs,petscRealDouble),PetscErrorCode,(KSP{Float64},Int64),arg1,arg2)
    return err
end

function PCKSPGetKSP(arg1::PC{Float64},arg2::Union{Ptr{KSP{Float64}},StridedArray{KSP{Float64}},Ptr{KSP{Float64}},Ref{KSP{Float64}}})
    err = ccall((:PCKSPGetKSP,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{KSP{Float64}}),arg1,arg2)
    return err
end

function PCBJacobiGetSubKSP(arg1::PC{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{KSP{Float64}}},StridedArray{Ptr{KSP{Float64}}},Ptr{Ptr{KSP{Float64}}},Ref{Ptr{KSP{Float64}}}})
    err = ccall((:PCBJacobiGetSubKSP,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{Int64},Ptr{Int64},Ptr{Ptr{KSP{Float64}}}),arg1,arg2,arg3,arg4)
    return err
end

function PCASMGetSubKSP(arg1::PC{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{KSP{Float64}}},StridedArray{Ptr{KSP{Float64}}},Ptr{Ptr{KSP{Float64}}},Ref{Ptr{KSP{Float64}}}})
    err = ccall((:PCASMGetSubKSP,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{Int64},Ptr{Int64},Ptr{Ptr{KSP{Float64}}}),arg1,arg2,arg3,arg4)
    return err
end

function PCGASMGetSubKSP(arg1::PC{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{KSP{Float64}}},StridedArray{Ptr{KSP{Float64}}},Ptr{Ptr{KSP{Float64}}},Ref{Ptr{KSP{Float64}}}})
    err = ccall((:PCGASMGetSubKSP,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{Int64},Ptr{Int64},Ptr{Ptr{KSP{Float64}}}),arg1,arg2,arg3,arg4)
    return err
end

function PCFieldSplitGetSubKSP(arg1::PC{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{KSP{Float64}}},StridedArray{Ptr{KSP{Float64}}},Ptr{Ptr{KSP{Float64}}},Ref{Ptr{KSP{Float64}}}})
    err = ccall((:PCFieldSplitGetSubKSP,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{Int64},Ptr{Ptr{KSP{Float64}}}),arg1,arg2,arg3)
    return err
end

function PCMGGetSmoother(arg1::PC{Float64},arg2::Integer,arg3::Union{Ptr{KSP{Float64}},StridedArray{KSP{Float64}},Ptr{KSP{Float64}},Ref{KSP{Float64}}})
    err = ccall((:PCMGGetSmoother,petscRealDouble),PetscErrorCode,(PC{Float64},Int64,Ptr{KSP{Float64}}),arg1,arg2,arg3)
    return err
end

function PCMGGetSmootherDown(arg1::PC{Float64},arg2::Integer,arg3::Union{Ptr{KSP{Float64}},StridedArray{KSP{Float64}},Ptr{KSP{Float64}},Ref{KSP{Float64}}})
    err = ccall((:PCMGGetSmootherDown,petscRealDouble),PetscErrorCode,(PC{Float64},Int64,Ptr{KSP{Float64}}),arg1,arg2,arg3)
    return err
end

function PCMGGetSmootherUp(arg1::PC{Float64},arg2::Integer,arg3::Union{Ptr{KSP{Float64}},StridedArray{KSP{Float64}},Ptr{KSP{Float64}},Ref{KSP{Float64}}})
    err = ccall((:PCMGGetSmootherUp,petscRealDouble),PetscErrorCode,(PC{Float64},Int64,Ptr{KSP{Float64}}),arg1,arg2,arg3)
    return err
end

function PCMGGetCoarseSolve(arg1::PC{Float64},arg2::Union{Ptr{KSP{Float64}},StridedArray{KSP{Float64}},Ptr{KSP{Float64}},Ref{KSP{Float64}}})
    err = ccall((:PCMGGetCoarseSolve,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{KSP{Float64}}),arg1,arg2)
    return err
end

function PCGalerkinGetKSP(arg1::PC{Float64},arg2::Union{Ptr{KSP{Float64}},StridedArray{KSP{Float64}},Ptr{KSP{Float64}},Ref{KSP{Float64}}})
    err = ccall((:PCGalerkinGetKSP,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{KSP{Float64}}),arg1,arg2)
    return err
end

function KSPBuildSolution(arg1::KSP{Float64},arg2::Vec{Float64},arg3::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:KSPBuildSolution,petscRealDouble),PetscErrorCode,(KSP{Float64},Vec{Float64},Ptr{Vec{Float64}}),arg1,arg2,arg3)
    return err
end

function KSPBuildResidual(arg1::KSP{Float64},arg2::Vec{Float64},arg3::Vec{Float64},arg4::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:KSPBuildResidual,petscRealDouble),PetscErrorCode,(KSP{Float64},Vec{Float64},Vec{Float64},Ptr{Vec{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function KSPRichardsonSetScale(arg1::KSP{Float64},arg2::Float64)
    err = ccall((:KSPRichardsonSetScale,petscRealDouble),PetscErrorCode,(KSP{Float64},Float64),arg1,arg2)
    return err
end

function KSPRichardsonSetSelfScale(arg1::KSP{Float64},arg2::PetscBool)
    err = ccall((:KSPRichardsonSetSelfScale,petscRealDouble),PetscErrorCode,(KSP{Float64},PetscBool),arg1,arg2)
    return err
end

function KSPChebyshevSetEigenvalues(arg1::KSP{Float64},arg2::Float64,arg3::Float64)
    err = ccall((:KSPChebyshevSetEigenvalues,petscRealDouble),PetscErrorCode,(KSP{Float64},Float64,Float64),arg1,arg2,arg3)
    return err
end

function KSPChebyshevEstEigSet(arg1::KSP{Float64},arg2::Float64,arg3::Float64,arg4::Float64,arg5::Float64)
    err = ccall((:KSPChebyshevEstEigSet,petscRealDouble),PetscErrorCode,(KSP{Float64},Float64,Float64,Float64,Float64),arg1,arg2,arg3,arg4,arg5)
    return err
end

function KSPChebyshevEstEigSetRandom(arg1::KSP{Float64},arg2::PetscRandom{Float64})
    err = ccall((:KSPChebyshevEstEigSetRandom,petscRealDouble),PetscErrorCode,(KSP{Float64},PetscRandom{Float64}),arg1,arg2)
    return err
end

function KSPChebyshevEstEigGetKSP(arg1::KSP{Float64},arg2::Union{Ptr{KSP{Float64}},StridedArray{KSP{Float64}},Ptr{KSP{Float64}},Ref{KSP{Float64}}})
    err = ccall((:KSPChebyshevEstEigGetKSP,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{KSP{Float64}}),arg1,arg2)
    return err
end

function KSPComputeExtremeSingularValues(arg1::KSP{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:KSPComputeExtremeSingularValues,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function KSPComputeEigenvalues(arg1::KSP{Float64},arg2::Integer,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:KSPComputeEigenvalues,petscRealDouble),PetscErrorCode,(KSP{Float64},Int64,Ptr{Float64},Ptr{Float64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function KSPComputeEigenvaluesExplicitly(arg1::KSP{Float64},arg2::Integer,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:KSPComputeEigenvaluesExplicitly,petscRealDouble),PetscErrorCode,(KSP{Float64},Int64,Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function KSPFCGSetMmax(arg1::KSP{Float64},arg2::Integer)
    err = ccall((:KSPFCGSetMmax,petscRealDouble),PetscErrorCode,(KSP{Float64},Int64),arg1,arg2)
    return err
end

function KSPFCGGetMmax(arg1::KSP{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:KSPFCGGetMmax,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function KSPFCGSetNprealloc(arg1::KSP{Float64},arg2::Integer)
    err = ccall((:KSPFCGSetNprealloc,petscRealDouble),PetscErrorCode,(KSP{Float64},Int64),arg1,arg2)
    return err
end

function KSPFCGGetNprealloc(arg1::KSP{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:KSPFCGGetNprealloc,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function KSPFCGSetTruncationType(arg1::KSP{Float64},arg2::KSPFCGTruncationType)
    err = ccall((:KSPFCGSetTruncationType,petscRealDouble),PetscErrorCode,(KSP{Float64},KSPFCGTruncationType),arg1,arg2)
    return err
end

function KSPFCGGetTruncationType(arg1::KSP{Float64},arg2::Union{Ptr{KSPFCGTruncationType},StridedArray{KSPFCGTruncationType},Ptr{KSPFCGTruncationType},Ref{KSPFCGTruncationType}})
    err = ccall((:KSPFCGGetTruncationType,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{KSPFCGTruncationType}),arg1,arg2)
    return err
end

function KSPGMRESSetRestart(arg1::KSP{Float64},arg2::Integer)
    err = ccall((:KSPGMRESSetRestart,petscRealDouble),PetscErrorCode,(KSP{Float64},Int64),arg1,arg2)
    return err
end

function KSPGMRESGetRestart(arg1::KSP{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:KSPGMRESGetRestart,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function KSPGMRESSetHapTol(arg1::KSP{Float64},arg2::Float64)
    err = ccall((:KSPGMRESSetHapTol,petscRealDouble),PetscErrorCode,(KSP{Float64},Float64),arg1,arg2)
    return err
end

function KSPGMRESSetPreAllocateVectors(arg1::KSP{Float64})
    err = ccall((:KSPGMRESSetPreAllocateVectors,petscRealDouble),PetscErrorCode,(KSP{Float64},),arg1)
    return err
end

function KSPGMRESSetOrthogonalization(arg1::KSP{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPGMRESSetOrthogonalization,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function KSPGMRESGetOrthogonalization(arg1::KSP{Float64},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:KSPGMRESGetOrthogonalization,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{Ptr{Void}}),arg1,arg2)
    return err
end

function KSPGMRESModifiedGramSchmidtOrthogonalization(arg1::KSP{Float64},arg2::Integer)
    err = ccall((:KSPGMRESModifiedGramSchmidtOrthogonalization,petscRealDouble),PetscErrorCode,(KSP{Float64},Int64),arg1,arg2)
    return err
end

function KSPGMRESClassicalGramSchmidtOrthogonalization(arg1::KSP{Float64},arg2::Integer)
    err = ccall((:KSPGMRESClassicalGramSchmidtOrthogonalization,petscRealDouble),PetscErrorCode,(KSP{Float64},Int64),arg1,arg2)
    return err
end

function KSPLGMRESSetAugDim(arg1::KSP{Float64},arg2::Integer)
    err = ccall((:KSPLGMRESSetAugDim,petscRealDouble),PetscErrorCode,(KSP{Float64},Int64),arg1,arg2)
    return err
end

function KSPLGMRESSetConstant(arg1::KSP{Float64})
    err = ccall((:KSPLGMRESSetConstant,petscRealDouble),PetscErrorCode,(KSP{Float64},),arg1)
    return err
end

function KSPGCRSetRestart(arg1::KSP{Float64},arg2::Integer)
    err = ccall((:KSPGCRSetRestart,petscRealDouble),PetscErrorCode,(KSP{Float64},Int64),arg1,arg2)
    return err
end

function KSPGCRGetRestart(arg1::KSP{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:KSPGCRGetRestart,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function KSPGCRSetModifyPC(arg1::KSP{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPGCRSetModifyPC,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPGMRESSetCGSRefinementType(arg1::KSP{Float64},arg2::KSPGMRESCGSRefinementType)
    err = ccall((:KSPGMRESSetCGSRefinementType,petscRealDouble),PetscErrorCode,(KSP{Float64},KSPGMRESCGSRefinementType),arg1,arg2)
    return err
end

function KSPGMRESGetCGSRefinementType(arg1::KSP{Float64},arg2::Union{Ptr{KSPGMRESCGSRefinementType},StridedArray{KSPGMRESCGSRefinementType},Ptr{KSPGMRESCGSRefinementType},Ref{KSPGMRESCGSRefinementType}})
    err = ccall((:KSPGMRESGetCGSRefinementType,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{KSPGMRESCGSRefinementType}),arg1,arg2)
    return err
end

function KSPFGMRESModifyPCNoChange(arg1::KSP{Float64},arg2::Integer,arg3::Integer,arg4::Float64,arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPFGMRESModifyPCNoChange,petscRealDouble),PetscErrorCode,(KSP{Float64},Int64,Int64,Float64,Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function KSPFGMRESModifyPCKSP(arg1::KSP{Float64},arg2::Integer,arg3::Integer,arg4::Float64,arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPFGMRESModifyPCKSP,petscRealDouble),PetscErrorCode,(KSP{Float64},Int64,Int64,Float64,Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function KSPFGMRESSetModifyPC(arg1::KSP{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPFGMRESSetModifyPC,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPQCGSetTrustRegionRadius(arg1::KSP{Float64},arg2::Float64)
    err = ccall((:KSPQCGSetTrustRegionRadius,petscRealDouble),PetscErrorCode,(KSP{Float64},Float64),arg1,arg2)
    return err
end

function KSPQCGGetQuadratic(arg1::KSP{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:KSPQCGGetQuadratic,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{Float64}),arg1,arg2)
    return err
end

function KSPQCGGetTrialStepNorm(arg1::KSP{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:KSPQCGGetTrialStepNorm,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{Float64}),arg1,arg2)
    return err
end

function KSPBCGSLSetXRes(arg1::KSP{Float64},arg2::Float64)
    err = ccall((:KSPBCGSLSetXRes,petscRealDouble),PetscErrorCode,(KSP{Float64},Float64),arg1,arg2)
    return err
end

function KSPBCGSLSetPol(arg1::KSP{Float64},arg2::PetscBool)
    err = ccall((:KSPBCGSLSetPol,petscRealDouble),PetscErrorCode,(KSP{Float64},PetscBool),arg1,arg2)
    return err
end

function KSPBCGSLSetEll(arg1::KSP{Float64},arg2::Integer)
    err = ccall((:KSPBCGSLSetEll,petscRealDouble),PetscErrorCode,(KSP{Float64},Int64),arg1,arg2)
    return err
end

function KSPBCGSLSetUsePseudoinverse(arg1::KSP{Float64},arg2::PetscBool)
    err = ccall((:KSPBCGSLSetUsePseudoinverse,petscRealDouble),PetscErrorCode,(KSP{Float64},PetscBool),arg1,arg2)
    return err
end

function KSPSetFromOptions(arg1::KSP{Float64})
    err = ccall((:KSPSetFromOptions,petscRealDouble),PetscErrorCode,(KSP{Float64},),arg1)
    return err
end

function KSPAddOptionsChecker(arg0::Type{Float64},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPAddOptionsChecker,petscRealDouble),PetscErrorCode,(Ptr{Void},),arg1)
    return err
end

function KSPMonitorSingularValue(arg1::KSP{Float64},arg2::Integer,arg3::Float64,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPMonitorSingularValue,petscRealDouble),PetscErrorCode,(KSP{Float64},Int64,Float64,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPMonitorDefault(arg1::KSP{Float64},arg2::Integer,arg3::Float64,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPMonitorDefault,petscRealDouble),PetscErrorCode,(KSP{Float64},Int64,Float64,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPLSQRMonitorDefault(arg1::KSP{Float64},arg2::Integer,arg3::Float64,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPLSQRMonitorDefault,petscRealDouble),PetscErrorCode,(KSP{Float64},Int64,Float64,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPMonitorRange(arg1::KSP{Float64},arg2::Integer,arg3::Float64,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPMonitorRange,petscRealDouble),PetscErrorCode,(KSP{Float64},Int64,Float64,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPMonitorDynamicTolerance(ksp::KSP{Float64},its::Integer,fnorm::Float64,dummy::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPMonitorDynamicTolerance,petscRealDouble),PetscErrorCode,(KSP{Float64},Int64,Float64,Ptr{Void}),ksp,its,fnorm,dummy)
    return err
end

function KSPMonitorDynamicToleranceDestroy(arg0::Type{Float64},dummy::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:KSPMonitorDynamicToleranceDestroy,petscRealDouble),PetscErrorCode,(Ptr{Ptr{Void}},),dummy)
    return err
end

function KSPMonitorTrueResidualNorm(arg1::KSP{Float64},arg2::Integer,arg3::Float64,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPMonitorTrueResidualNorm,petscRealDouble),PetscErrorCode,(KSP{Float64},Int64,Float64,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPMonitorTrueResidualMaxNorm(arg1::KSP{Float64},arg2::Integer,arg3::Float64,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPMonitorTrueResidualMaxNorm,petscRealDouble),PetscErrorCode,(KSP{Float64},Int64,Float64,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPMonitorDefaultShort(arg1::KSP{Float64},arg2::Integer,arg3::Float64,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPMonitorDefaultShort,petscRealDouble),PetscErrorCode,(KSP{Float64},Int64,Float64,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPMonitorSolution(arg1::KSP{Float64},arg2::Integer,arg3::Float64,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPMonitorSolution,petscRealDouble),PetscErrorCode,(KSP{Float64},Int64,Float64,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPMonitorSAWs(arg1::KSP{Float64},arg2::Integer,arg3::Float64,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPMonitorSAWs,petscRealDouble),PetscErrorCode,(KSP{Float64},Int64,Float64,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPMonitorSAWsCreate(arg1::KSP{Float64},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:KSPMonitorSAWsCreate,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{Ptr{Void}}),arg1,arg2)
    return err
end

function KSPMonitorSAWsDestroy(arg0::Type{Float64},arg1::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:KSPMonitorSAWsDestroy,petscRealDouble),PetscErrorCode,(Ptr{Ptr{Void}},),arg1)
    return err
end

function KSPGMRESMonitorKrylov(arg1::KSP{Float64},arg2::Integer,arg3::Float64,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPGMRESMonitorKrylov,petscRealDouble),PetscErrorCode,(KSP{Float64},Int64,Float64,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPUnwindPreconditioner(arg1::KSP{Float64},arg2::Vec{Float64},arg3::Vec{Float64})
    err = ccall((:KSPUnwindPreconditioner,petscRealDouble),PetscErrorCode,(KSP{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3)
    return err
end

function KSPInitialResidual(arg1::KSP{Float64},arg2::Vec{Float64},arg3::Vec{Float64},arg4::Vec{Float64},arg5::Vec{Float64},arg6::Vec{Float64})
    err = ccall((:KSPInitialResidual,petscRealDouble),PetscErrorCode,(KSP{Float64},Vec{Float64},Vec{Float64},Vec{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function KSPSetOperators(arg1::KSP{Float64},arg2::Mat{Float64},arg3::Mat{Float64})
    err = ccall((:KSPSetOperators,petscRealDouble),PetscErrorCode,(KSP{Float64},Mat{Float64},Mat{Float64}),arg1,arg2,arg3)
    return err
end

function KSPGetOperators(arg1::KSP{Float64},arg2::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}},arg3::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:KSPGetOperators,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{Mat{Float64}},Ptr{Mat{Float64}}),arg1,arg2,arg3)
    return err
end

function KSPGetOperatorsSet(arg1::KSP{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:KSPGetOperatorsSet,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{PetscBool},Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function KSPSetOptionsPrefix(arg1::KSP{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:KSPSetOptionsPrefix,petscRealDouble),PetscErrorCode,(KSP{Float64},Cstring),arg1,arg2)
    return err
end

function KSPAppendOptionsPrefix(arg1::KSP{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:KSPAppendOptionsPrefix,petscRealDouble),PetscErrorCode,(KSP{Float64},Cstring),arg1,arg2)
    return err
end

function KSPGetOptionsPrefix(arg1::KSP{Float64},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:KSPGetOptionsPrefix,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function KSPSetTabLevel(arg1::KSP{Float64},arg2::Integer)
    err = ccall((:KSPSetTabLevel,petscRealDouble),PetscErrorCode,(KSP{Float64},Int64),arg1,arg2)
    return err
end

function KSPGetTabLevel(arg1::KSP{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:KSPGetTabLevel,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function KSPSetDiagonalScale(arg1::KSP{Float64},arg2::PetscBool)
    err = ccall((:KSPSetDiagonalScale,petscRealDouble),PetscErrorCode,(KSP{Float64},PetscBool),arg1,arg2)
    return err
end

function KSPGetDiagonalScale(arg1::KSP{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:KSPGetDiagonalScale,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function KSPSetDiagonalScaleFix(arg1::KSP{Float64},arg2::PetscBool)
    err = ccall((:KSPSetDiagonalScaleFix,petscRealDouble),PetscErrorCode,(KSP{Float64},PetscBool),arg1,arg2)
    return err
end

function KSPGetDiagonalScaleFix(arg1::KSP{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:KSPGetDiagonalScaleFix,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function KSPView(arg1::KSP{Float64},arg2::PetscViewer{Float64})
    err = ccall((:KSPView,petscRealDouble),PetscErrorCode,(KSP{Float64},PetscViewer{Float64}),arg1,arg2)
    return err
end

function KSPLoad(arg1::KSP{Float64},arg2::PetscViewer{Float64})
    err = ccall((:KSPLoad,petscRealDouble),PetscErrorCode,(KSP{Float64},PetscViewer{Float64}),arg1,arg2)
    return err
end

function KSPReasonViewFromOptions(arg1::KSP{Float64})
    err = ccall((:KSPReasonViewFromOptions,petscRealDouble),PetscErrorCode,(KSP{Float64},),arg1)
    return err
end

function KSPLSQRSetStandardErrorVec(arg1::KSP{Float64},arg2::Vec{Float64})
    err = ccall((:KSPLSQRSetStandardErrorVec,petscRealDouble),PetscErrorCode,(KSP{Float64},Vec{Float64}),arg1,arg2)
    return err
end

function KSPLSQRGetStandardErrorVec(arg1::KSP{Float64},arg2::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:KSPLSQRGetStandardErrorVec,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{Vec{Float64}}),arg1,arg2)
    return err
end

function PCRedundantGetKSP(arg1::PC{Float64},arg2::Union{Ptr{KSP{Float64}},StridedArray{KSP{Float64}},Ptr{KSP{Float64}},Ref{KSP{Float64}}})
    err = ccall((:PCRedundantGetKSP,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{KSP{Float64}}),arg1,arg2)
    return err
end

function PCRedistributeGetKSP(arg1::PC{Float64},arg2::Union{Ptr{KSP{Float64}},StridedArray{KSP{Float64}},Ptr{KSP{Float64}},Ref{KSP{Float64}}})
    err = ccall((:PCRedistributeGetKSP,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{KSP{Float64}}),arg1,arg2)
    return err
end

function KSPSetNormType(arg1::KSP{Float64},arg2::KSPNormType)
    err = ccall((:KSPSetNormType,petscRealDouble),PetscErrorCode,(KSP{Float64},KSPNormType),arg1,arg2)
    return err
end

function KSPGetNormType(arg1::KSP{Float64},arg2::Union{Ptr{KSPNormType},StridedArray{KSPNormType},Ptr{KSPNormType},Ref{KSPNormType}})
    err = ccall((:KSPGetNormType,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{KSPNormType}),arg1,arg2)
    return err
end

function KSPSetSupportedNorm(ksp::KSP{Float64},arg1::KSPNormType,arg2::PCSide,arg3::Integer)
    err = ccall((:KSPSetSupportedNorm,petscRealDouble),PetscErrorCode,(KSP{Float64},KSPNormType,PCSide,Int64),ksp,arg1,arg2,arg3)
    return err
end

function KSPSetCheckNormIteration(arg1::KSP{Float64},arg2::Integer)
    err = ccall((:KSPSetCheckNormIteration,petscRealDouble),PetscErrorCode,(KSP{Float64},Int64),arg1,arg2)
    return err
end

function KSPSetLagNorm(arg1::KSP{Float64},arg2::PetscBool)
    err = ccall((:KSPSetLagNorm,petscRealDouble),PetscErrorCode,(KSP{Float64},PetscBool),arg1,arg2)
    return err
end

function KSPSetConvergenceTest(arg1::KSP{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPSetConvergenceTest,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPGetConvergenceContext(arg1::KSP{Float64},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:KSPGetConvergenceContext,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{Ptr{Void}}),arg1,arg2)
    return err
end

function KSPConvergedDefault(arg1::KSP{Float64},arg2::Integer,arg3::Float64,arg4::Union{Ptr{KSPConvergedReason},StridedArray{KSPConvergedReason},Ptr{KSPConvergedReason},Ref{KSPConvergedReason}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPConvergedDefault,petscRealDouble),PetscErrorCode,(KSP{Float64},Int64,Float64,Ptr{KSPConvergedReason},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function KSPConvergedLSQR(arg1::KSP{Float64},arg2::Integer,arg3::Float64,arg4::Union{Ptr{KSPConvergedReason},StridedArray{KSPConvergedReason},Ptr{KSPConvergedReason},Ref{KSPConvergedReason}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPConvergedLSQR,petscRealDouble),PetscErrorCode,(KSP{Float64},Int64,Float64,Ptr{KSPConvergedReason},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function KSPConvergedDefaultDestroy(arg0::Type{Float64},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPConvergedDefaultDestroy,petscRealDouble),PetscErrorCode,(Ptr{Void},),arg1)
    return err
end

function KSPConvergedDefaultCreate(arg0::Type{Float64},arg1::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:KSPConvergedDefaultCreate,petscRealDouble),PetscErrorCode,(Ptr{Ptr{Void}},),arg1)
    return err
end

function KSPConvergedDefaultSetUIRNorm(arg1::KSP{Float64})
    err = ccall((:KSPConvergedDefaultSetUIRNorm,petscRealDouble),PetscErrorCode,(KSP{Float64},),arg1)
    return err
end

function KSPConvergedDefaultSetUMIRNorm(arg1::KSP{Float64})
    err = ccall((:KSPConvergedDefaultSetUMIRNorm,petscRealDouble),PetscErrorCode,(KSP{Float64},),arg1)
    return err
end

function KSPConvergedSkip(arg1::KSP{Float64},arg2::Integer,arg3::Float64,arg4::Union{Ptr{KSPConvergedReason},StridedArray{KSPConvergedReason},Ptr{KSPConvergedReason},Ref{KSPConvergedReason}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPConvergedSkip,petscRealDouble),PetscErrorCode,(KSP{Float64},Int64,Float64,Ptr{KSPConvergedReason},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function KSPGetConvergedReason(arg1::KSP{Float64},arg2::Union{Ptr{KSPConvergedReason},StridedArray{KSPConvergedReason},Ptr{KSPConvergedReason},Ref{KSPConvergedReason}})
    err = ccall((:KSPGetConvergedReason,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{KSPConvergedReason}),arg1,arg2)
    return err
end

function KSPCGSetType(arg1::KSP{Float64},arg2::KSPCGType)
    err = ccall((:KSPCGSetType,petscRealDouble),PetscErrorCode,(KSP{Float64},KSPCGType),arg1,arg2)
    return err
end

function KSPCGUseSingleReduction(arg1::KSP{Float64},arg2::PetscBool)
    err = ccall((:KSPCGUseSingleReduction,petscRealDouble),PetscErrorCode,(KSP{Float64},PetscBool),arg1,arg2)
    return err
end

function KSPNASHSetRadius(arg1::KSP{Float64},arg2::Float64)
    err = ccall((:KSPNASHSetRadius,petscRealDouble),PetscErrorCode,(KSP{Float64},Float64),arg1,arg2)
    return err
end

function KSPNASHGetNormD(arg1::KSP{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:KSPNASHGetNormD,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{Float64}),arg1,arg2)
    return err
end

function KSPNASHGetObjFcn(arg1::KSP{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:KSPNASHGetObjFcn,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{Float64}),arg1,arg2)
    return err
end

function KSPSTCGSetRadius(arg1::KSP{Float64},arg2::Float64)
    err = ccall((:KSPSTCGSetRadius,petscRealDouble),PetscErrorCode,(KSP{Float64},Float64),arg1,arg2)
    return err
end

function KSPSTCGGetNormD(arg1::KSP{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:KSPSTCGGetNormD,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{Float64}),arg1,arg2)
    return err
end

function KSPSTCGGetObjFcn(arg1::KSP{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:KSPSTCGGetObjFcn,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{Float64}),arg1,arg2)
    return err
end

function KSPGLTRSetRadius(arg1::KSP{Float64},arg2::Float64)
    err = ccall((:KSPGLTRSetRadius,petscRealDouble),PetscErrorCode,(KSP{Float64},Float64),arg1,arg2)
    return err
end

function KSPGLTRGetNormD(arg1::KSP{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:KSPGLTRGetNormD,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{Float64}),arg1,arg2)
    return err
end

function KSPGLTRGetObjFcn(arg1::KSP{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:KSPGLTRGetObjFcn,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{Float64}),arg1,arg2)
    return err
end

function KSPGLTRGetMinEig(arg1::KSP{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:KSPGLTRGetMinEig,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{Float64}),arg1,arg2)
    return err
end

function KSPGLTRGetLambda(arg1::KSP{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:KSPGLTRGetLambda,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{Float64}),arg1,arg2)
    return err
end

function KSPPythonSetType(arg1::KSP{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:KSPPythonSetType,petscRealDouble),PetscErrorCode,(KSP{Float64},Cstring),arg1,arg2)
    return err
end

function PCPreSolve(arg1::PC{Float64},arg2::KSP{Float64})
    err = ccall((:PCPreSolve,petscRealDouble),PetscErrorCode,(PC{Float64},KSP{Float64}),arg1,arg2)
    return err
end

function PCPostSolve(arg1::PC{Float64},arg2::KSP{Float64})
    err = ccall((:PCPostSolve,petscRealDouble),PetscErrorCode,(PC{Float64},KSP{Float64}),arg1,arg2)
    return err
end

function KSPMonitorLGResidualNormCreate(arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Union{Ptr{Ptr{PetscObject{Float64}}},StridedArray{Ptr{PetscObject{Float64}}},Ptr{Ptr{PetscObject{Float64}}},Ref{Ptr{PetscObject{Float64}}}})
    err = ccall((:KSPMonitorLGResidualNormCreate,petscRealDouble),PetscErrorCode,(Cstring,Cstring,Cint,Cint,Cint,Cint,Ptr{Ptr{PetscObject{Float64}}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function KSPMonitorLGResidualNorm(arg1::KSP{Float64},arg2::Integer,arg3::Float64,arg4::Union{Ptr{PetscObject{Float64}},StridedArray{PetscObject{Float64}},Ptr{PetscObject{Float64}},Ref{PetscObject{Float64}}})
    err = ccall((:KSPMonitorLGResidualNorm,petscRealDouble),PetscErrorCode,(KSP{Float64},Int64,Float64,Ptr{PetscObject{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function KSPMonitorLGResidualNormDestroy(arg1::Union{Ptr{Ptr{PetscObject{Float64}}},StridedArray{Ptr{PetscObject{Float64}}},Ptr{Ptr{PetscObject{Float64}}},Ref{Ptr{PetscObject{Float64}}}})
    err = ccall((:KSPMonitorLGResidualNormDestroy,petscRealDouble),PetscErrorCode,(Ptr{Ptr{PetscObject{Float64}}},),arg1)
    return err
end

function KSPMonitorLGTrueResidualNormCreate(arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Union{Ptr{Ptr{PetscObject{Float64}}},StridedArray{Ptr{PetscObject{Float64}}},Ptr{Ptr{PetscObject{Float64}}},Ref{Ptr{PetscObject{Float64}}}})
    err = ccall((:KSPMonitorLGTrueResidualNormCreate,petscRealDouble),PetscErrorCode,(Cstring,Cstring,Cint,Cint,Cint,Cint,Ptr{Ptr{PetscObject{Float64}}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function KSPMonitorLGTrueResidualNorm(arg1::KSP{Float64},arg2::Integer,arg3::Float64,arg4::Union{Ptr{PetscObject{Float64}},StridedArray{PetscObject{Float64}},Ptr{PetscObject{Float64}},Ref{PetscObject{Float64}}})
    err = ccall((:KSPMonitorLGTrueResidualNorm,petscRealDouble),PetscErrorCode,(KSP{Float64},Int64,Float64,Ptr{PetscObject{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function KSPMonitorLGTrueResidualNormDestroy(arg1::Union{Ptr{Ptr{PetscObject{Float64}}},StridedArray{Ptr{PetscObject{Float64}}},Ptr{Ptr{PetscObject{Float64}}},Ref{Ptr{PetscObject{Float64}}}})
    err = ccall((:KSPMonitorLGTrueResidualNormDestroy,petscRealDouble),PetscErrorCode,(Ptr{Ptr{PetscObject{Float64}}},),arg1)
    return err
end

function KSPMonitorLGRange(arg1::KSP{Float64},arg2::Integer,arg3::Float64,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPMonitorLGRange,petscRealDouble),PetscErrorCode,(KSP{Float64},Int64,Float64,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function PCShellSetPreSolve(arg1::PC{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCShellSetPreSolve,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function PCShellSetPostSolve(arg1::PC{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCShellSetPostSolve,petscRealDouble),PetscErrorCode,(PC{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function KSPFischerGuessCreate(arg1::KSP{Float64},arg2::Integer,arg3::Integer,arg4::Union{Ptr{KSPFischerGuess{Float64}},StridedArray{KSPFischerGuess{Float64}},Ptr{KSPFischerGuess{Float64}},Ref{KSPFischerGuess{Float64}}})
    err = ccall((:KSPFischerGuessCreate,petscRealDouble),PetscErrorCode,(KSP{Float64},Int64,Int64,Ptr{KSPFischerGuess{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function KSPFischerGuessDestroy(arg1::Union{Ptr{KSPFischerGuess{Float64}},StridedArray{KSPFischerGuess{Float64}},Ptr{KSPFischerGuess{Float64}},Ref{KSPFischerGuess{Float64}}})
    err = ccall((:KSPFischerGuessDestroy,petscRealDouble),PetscErrorCode,(Ptr{KSPFischerGuess{Float64}},),arg1)
    return err
end

function KSPFischerGuessReset(arg1::KSPFischerGuess{Float64})
    err = ccall((:KSPFischerGuessReset,petscRealDouble),PetscErrorCode,(KSPFischerGuess{Float64},),arg1)
    return err
end

function KSPFischerGuessUpdate(arg1::KSPFischerGuess{Float64},arg2::Vec{Float64})
    err = ccall((:KSPFischerGuessUpdate,petscRealDouble),PetscErrorCode,(KSPFischerGuess{Float64},Vec{Float64}),arg1,arg2)
    return err
end

function KSPFischerGuessFormGuess(arg1::KSPFischerGuess{Float64},arg2::Vec{Float64},arg3::Vec{Float64})
    err = ccall((:KSPFischerGuessFormGuess,petscRealDouble),PetscErrorCode,(KSPFischerGuess{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3)
    return err
end

function KSPFischerGuessSetFromOptions(arg1::KSPFischerGuess{Float64})
    err = ccall((:KSPFischerGuessSetFromOptions,petscRealDouble),PetscErrorCode,(KSPFischerGuess{Float64},),arg1)
    return err
end

function KSPSetUseFischerGuess(arg1::KSP{Float64},arg2::Integer,arg3::Integer)
    err = ccall((:KSPSetUseFischerGuess,petscRealDouble),PetscErrorCode,(KSP{Float64},Int64,Int64),arg1,arg2,arg3)
    return err
end

function KSPSetFischerGuess(arg1::KSP{Float64},arg2::KSPFischerGuess{Float64})
    err = ccall((:KSPSetFischerGuess,petscRealDouble),PetscErrorCode,(KSP{Float64},KSPFischerGuess{Float64}),arg1,arg2)
    return err
end

function KSPGetFischerGuess(arg1::KSP{Float64},arg2::Union{Ptr{KSPFischerGuess{Float64}},StridedArray{KSPFischerGuess{Float64}},Ptr{KSPFischerGuess{Float64}},Ref{KSPFischerGuess{Float64}}})
    err = ccall((:KSPGetFischerGuess,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{KSPFischerGuess{Float64}}),arg1,arg2)
    return err
end

function MatCreateSchurComplement(arg1::Mat{Float64},arg2::Mat{Float64},arg3::Mat{Float64},arg4::Mat{Float64},arg5::Mat{Float64},arg6::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatCreateSchurComplement,petscRealDouble),PetscErrorCode,(Mat{Float64},Mat{Float64},Mat{Float64},Mat{Float64},Mat{Float64},Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatSchurComplementGetKSP(arg1::Mat{Float64},arg2::Union{Ptr{KSP{Float64}},StridedArray{KSP{Float64}},Ptr{KSP{Float64}},Ref{KSP{Float64}}})
    err = ccall((:MatSchurComplementGetKSP,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{KSP{Float64}}),arg1,arg2)
    return err
end

function MatSchurComplementSetKSP(arg1::Mat{Float64},arg2::KSP{Float64})
    err = ccall((:MatSchurComplementSetKSP,petscRealDouble),PetscErrorCode,(Mat{Float64},KSP{Float64}),arg1,arg2)
    return err
end

function MatSchurComplementSetSubMatrices(arg1::Mat{Float64},arg2::Mat{Float64},arg3::Mat{Float64},arg4::Mat{Float64},arg5::Mat{Float64},arg6::Mat{Float64})
    err = ccall((:MatSchurComplementSetSubMatrices,petscRealDouble),PetscErrorCode,(Mat{Float64},Mat{Float64},Mat{Float64},Mat{Float64},Mat{Float64},Mat{Float64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatSchurComplementUpdateSubMatrices(arg1::Mat{Float64},arg2::Mat{Float64},arg3::Mat{Float64},arg4::Mat{Float64},arg5::Mat{Float64},arg6::Mat{Float64})
    err = ccall((:MatSchurComplementUpdateSubMatrices,petscRealDouble),PetscErrorCode,(Mat{Float64},Mat{Float64},Mat{Float64},Mat{Float64},Mat{Float64},Mat{Float64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatSchurComplementGetSubMatrices(arg1::Mat{Float64},arg2::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}},arg3::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}},arg4::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}},arg5::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}},arg6::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatSchurComplementGetSubMatrices,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{Mat{Float64}},Ptr{Mat{Float64}},Ptr{Mat{Float64}},Ptr{Mat{Float64}},Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatSchurComplementSetAinvType(arg1::Mat{Float64},arg2::MatSchurComplementAinvType)
    err = ccall((:MatSchurComplementSetAinvType,petscRealDouble),PetscErrorCode,(Mat{Float64},MatSchurComplementAinvType),arg1,arg2)
    return err
end

function MatSchurComplementGetAinvType(arg1::Mat{Float64},arg2::Union{Ptr{MatSchurComplementAinvType},StridedArray{MatSchurComplementAinvType},Ptr{MatSchurComplementAinvType},Ref{MatSchurComplementAinvType}})
    err = ccall((:MatSchurComplementGetAinvType,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{MatSchurComplementAinvType}),arg1,arg2)
    return err
end

function MatSchurComplementGetPmat(arg1::Mat{Float64},arg2::MatReuse,arg3::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatSchurComplementGetPmat,petscRealDouble),PetscErrorCode,(Mat{Float64},MatReuse,Ptr{Mat{Float64}}),arg1,arg2,arg3)
    return err
end

function MatSchurComplementComputeExplicitOperator(arg1::Mat{Float64},arg2::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatSchurComplementComputeExplicitOperator,petscRealDouble),PetscErrorCode,(Mat{Float64},Ptr{Mat{Float64}}),arg1,arg2)
    return err
end

function MatGetSchurComplement(arg1::Mat{Float64},arg2::IS{Float64},arg3::IS{Float64},arg4::IS{Float64},arg5::IS{Float64},arg6::MatReuse,arg7::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}},arg8::MatSchurComplementAinvType,arg9::MatReuse,arg10::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatGetSchurComplement,petscRealDouble),PetscErrorCode,(Mat{Float64},IS{Float64},IS{Float64},IS{Float64},IS{Float64},MatReuse,Ptr{Mat{Float64}},MatSchurComplementAinvType,MatReuse,Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function MatCreateSchurComplementPmat(arg1::Mat{Float64},arg2::Mat{Float64},arg3::Mat{Float64},arg4::Mat{Float64},arg5::MatSchurComplementAinvType,arg6::MatReuse,arg7::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatCreateSchurComplementPmat,petscRealDouble),PetscErrorCode,(Mat{Float64},Mat{Float64},Mat{Float64},Mat{Float64},MatSchurComplementAinvType,MatReuse,Ptr{Mat{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function KSPSetDM(arg1::KSP{Float64},arg2::DM{Float64})
    err = ccall((:KSPSetDM,petscRealDouble),PetscErrorCode,(KSP{Float64},DM{Float64}),arg1,arg2)
    return err
end

function KSPSetDMActive(arg1::KSP{Float64},arg2::PetscBool)
    err = ccall((:KSPSetDMActive,petscRealDouble),PetscErrorCode,(KSP{Float64},PetscBool),arg1,arg2)
    return err
end

function KSPGetDM(arg1::KSP{Float64},arg2::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:KSPGetDM,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{DM{Float64}}),arg1,arg2)
    return err
end

function KSPSetApplicationContext(arg1::KSP{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPSetApplicationContext,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function KSPGetApplicationContext(arg1::KSP{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPGetApplicationContext,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function KSPSetComputeRHS(arg1::KSP{Float64},func::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPSetComputeRHS,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{Void},Ptr{Void}),arg1,func,arg2)
    return err
end

function KSPSetComputeOperators(arg1::KSP{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPSetComputeOperators,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function KSPSetComputeInitialGuess(arg1::KSP{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPSetComputeInitialGuess,petscRealDouble),PetscErrorCode,(KSP{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMKSPSetComputeOperators(arg1::DM{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMKSPSetComputeOperators,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMKSPGetComputeOperators(arg1::DM{Float64},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMKSPGetComputeOperators,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Ptr{Void}},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMKSPSetComputeRHS(arg1::DM{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMKSPSetComputeRHS,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMKSPGetComputeRHS(arg1::DM{Float64},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMKSPGetComputeRHS,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Ptr{Void}},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMKSPSetComputeInitialGuess(arg1::DM{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMKSPSetComputeInitialGuess,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMKSPGetComputeInitialGuess(arg1::DM{Float64},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMKSPGetComputeInitialGuess,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Ptr{Void}},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMGlobalToLocalSolve(arg1::DM{Float64},arg2::Vec{Float64},arg3::Vec{Float64})
    err = ccall((:DMGlobalToLocalSolve,petscRealDouble),PetscErrorCode,(DM{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3)
    return err
end

function DMPlexProjectField(arg1::DM{Float64},arg2::Vec{Float64},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::InsertMode,arg5::Vec{Float64})
    err = ccall((:DMPlexProjectField,petscRealDouble),PetscErrorCode,(DM{Float64},Vec{Float64},Ptr{Ptr{Void}},InsertMode,Vec{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function SNESInitializePackage(arg0::Type{Float64})
    err = ccall((:SNESInitializePackage,petscRealDouble),PetscErrorCode,())
    return err
end

function SNESCreate(arg1::MPI_Comm,arg2::Union{Ptr{SNES{Float64}},StridedArray{SNES{Float64}},Ptr{SNES{Float64}},Ref{SNES{Float64}}})
    err = ccall((:SNESCreate,petscRealDouble),PetscErrorCode,(comm_type,Ptr{SNES{Float64}}),arg1,arg2)
    return err
end

function SNESReset(arg1::SNES{Float64})
    err = ccall((:SNESReset,petscRealDouble),PetscErrorCode,(SNES{Float64},),arg1)
    return err
end

function SNESDestroy(arg1::Union{Ptr{SNES{Float64}},StridedArray{SNES{Float64}},Ptr{SNES{Float64}},Ref{SNES{Float64}}})
    err = ccall((:SNESDestroy,petscRealDouble),PetscErrorCode,(Ptr{SNES{Float64}},),arg1)
    return err
end

function SNESSetType(arg1::SNES{Float64},arg2::SNESType)
    err = ccall((:SNESSetType,petscRealDouble),PetscErrorCode,(SNES{Float64},SNESType),arg1,arg2)
    return err
end

function SNESMonitor(arg1::SNES{Float64},arg2::Integer,arg3::Float64)
    err = ccall((:SNESMonitor,petscRealDouble),PetscErrorCode,(SNES{Float64},Int64,Float64),arg1,arg2,arg3)
    return err
end

function SNESMonitorSet(arg1::SNES{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESMonitorSet,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function SNESMonitorCancel(arg1::SNES{Float64})
    err = ccall((:SNESMonitorCancel,petscRealDouble),PetscErrorCode,(SNES{Float64},),arg1)
    return err
end

function SNESMonitorSAWs(arg1::SNES{Float64},arg2::Integer,arg3::Float64,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESMonitorSAWs,petscRealDouble),PetscErrorCode,(SNES{Float64},Int64,Float64,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function SNESMonitorSAWsCreate(arg1::SNES{Float64},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:SNESMonitorSAWsCreate,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{Ptr{Void}}),arg1,arg2)
    return err
end

function SNESMonitorSAWsDestroy(arg0::Type{Float64},arg1::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:SNESMonitorSAWsDestroy,petscRealDouble),PetscErrorCode,(Ptr{Ptr{Void}},),arg1)
    return err
end

function SNESSetConvergenceHistory(arg1::SNES{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Integer,arg5::PetscBool)
    err = ccall((:SNESSetConvergenceHistory,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{Float64},Ptr{Int64},Int64,PetscBool),arg1,arg2,arg3,arg4,arg5)
    return err
end

function SNESGetConvergenceHistory(arg1::SNES{Float64},arg2::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:SNESGetConvergenceHistory,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{Ptr{Float64}},Ptr{Ptr{Int64}},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function SNESSetUp(arg1::SNES{Float64})
    err = ccall((:SNESSetUp,petscRealDouble),PetscErrorCode,(SNES{Float64},),arg1)
    return err
end

function SNESSolve(arg1::SNES{Float64},arg2::Vec{Float64},arg3::Vec{Float64})
    err = ccall((:SNESSolve,petscRealDouble),PetscErrorCode,(SNES{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3)
    return err
end

function SNESSetErrorIfNotConverged(arg1::SNES{Float64},arg2::PetscBool)
    err = ccall((:SNESSetErrorIfNotConverged,petscRealDouble),PetscErrorCode,(SNES{Float64},PetscBool),arg1,arg2)
    return err
end

function SNESGetErrorIfNotConverged(arg1::SNES{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:SNESGetErrorIfNotConverged,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function SNESSetWorkVecs(arg1::SNES{Float64},arg2::Integer)
    err = ccall((:SNESSetWorkVecs,petscRealDouble),PetscErrorCode,(SNES{Float64},Int64),arg1,arg2)
    return err
end

function SNESAddOptionsChecker(arg0::Type{Float64},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESAddOptionsChecker,petscRealDouble),PetscErrorCode,(Ptr{Void},),arg1)
    return err
end

function SNESSetUpdate(arg1::SNES{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESSetUpdate,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function SNESRegister(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESRegister,petscRealDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function SNESGetKSP(arg1::SNES{Float64},arg2::Union{Ptr{KSP{Float64}},StridedArray{KSP{Float64}},Ptr{KSP{Float64}},Ref{KSP{Float64}}})
    err = ccall((:SNESGetKSP,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{KSP{Float64}}),arg1,arg2)
    return err
end

function SNESSetKSP(arg1::SNES{Float64},arg2::KSP{Float64})
    err = ccall((:SNESSetKSP,petscRealDouble),PetscErrorCode,(SNES{Float64},KSP{Float64}),arg1,arg2)
    return err
end

function SNESSetSolution(arg1::SNES{Float64},arg2::Vec{Float64})
    err = ccall((:SNESSetSolution,petscRealDouble),PetscErrorCode,(SNES{Float64},Vec{Float64}),arg1,arg2)
    return err
end

function SNESGetSolution(arg1::SNES{Float64},arg2::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:SNESGetSolution,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{Vec{Float64}}),arg1,arg2)
    return err
end

function SNESGetSolutionUpdate(arg1::SNES{Float64},arg2::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:SNESGetSolutionUpdate,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{Vec{Float64}}),arg1,arg2)
    return err
end

function SNESGetRhs(arg1::SNES{Float64},arg2::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:SNESGetRhs,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{Vec{Float64}}),arg1,arg2)
    return err
end

function SNESView(arg1::SNES{Float64},arg2::PetscViewer{Float64})
    err = ccall((:SNESView,petscRealDouble),PetscErrorCode,(SNES{Float64},PetscViewer{Float64}),arg1,arg2)
    return err
end

function SNESLoad(arg1::SNES{Float64},arg2::PetscViewer{Float64})
    err = ccall((:SNESLoad,petscRealDouble),PetscErrorCode,(SNES{Float64},PetscViewer{Float64}),arg1,arg2)
    return err
end

function SNESReasonViewFromOptions(arg1::SNES{Float64})
    err = ccall((:SNESReasonViewFromOptions,petscRealDouble),PetscErrorCode,(SNES{Float64},),arg1)
    return err
end

function SNESSetOptionsPrefix(arg1::SNES{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:SNESSetOptionsPrefix,petscRealDouble),PetscErrorCode,(SNES{Float64},Cstring),arg1,arg2)
    return err
end

function SNESAppendOptionsPrefix(arg1::SNES{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:SNESAppendOptionsPrefix,petscRealDouble),PetscErrorCode,(SNES{Float64},Cstring),arg1,arg2)
    return err
end

function SNESGetOptionsPrefix(arg1::SNES{Float64},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:SNESGetOptionsPrefix,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function SNESSetFromOptions(arg1::SNES{Float64})
    err = ccall((:SNESSetFromOptions,petscRealDouble),PetscErrorCode,(SNES{Float64},),arg1)
    return err
end

function MatCreateSNESMF(arg1::SNES{Float64},arg2::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:MatCreateSNESMF,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{Mat{Float64}}),arg1,arg2)
    return err
end

function MatMFFDComputeJacobian(arg1::SNES{Float64},arg2::Vec{Float64},arg3::Mat{Float64},arg4::Mat{Float64},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatMFFDComputeJacobian,petscRealDouble),PetscErrorCode,(SNES{Float64},Vec{Float64},Mat{Float64},Mat{Float64},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatDAADSetSNES(arg1::Mat{Float64},arg2::SNES{Float64})
    err = ccall((:MatDAADSetSNES,petscRealDouble),PetscErrorCode,(Mat{Float64},SNES{Float64}),arg1,arg2)
    return err
end

function SNESGetType(arg1::SNES{Float64},arg2::Union{Ptr{SNESType},StridedArray{SNESType},Ptr{SNESType},Ref{SNESType}})
    err = ccall((:SNESGetType,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{SNESType}),arg1,arg2)
    return err
end

function SNESMonitorDefault(arg1::SNES{Float64},arg2::Integer,arg3::Float64,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESMonitorDefault,petscRealDouble),PetscErrorCode,(SNES{Float64},Int64,Float64,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function SNESMonitorRange(arg1::SNES{Float64},arg2::Integer,arg3::Float64,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESMonitorRange,petscRealDouble),PetscErrorCode,(SNES{Float64},Int64,Float64,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function SNESMonitorRatio(arg1::SNES{Float64},arg2::Integer,arg3::Float64,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESMonitorRatio,petscRealDouble),PetscErrorCode,(SNES{Float64},Int64,Float64,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function SNESMonitorSetRatio(arg1::SNES{Float64},arg2::PetscViewer{Float64})
    err = ccall((:SNESMonitorSetRatio,petscRealDouble),PetscErrorCode,(SNES{Float64},PetscViewer{Float64}),arg1,arg2)
    return err
end

function SNESMonitorSolution(arg1::SNES{Float64},arg2::Integer,arg3::Float64,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESMonitorSolution,petscRealDouble),PetscErrorCode,(SNES{Float64},Int64,Float64,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function SNESMonitorResidual(arg1::SNES{Float64},arg2::Integer,arg3::Float64,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESMonitorResidual,petscRealDouble),PetscErrorCode,(SNES{Float64},Int64,Float64,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function SNESMonitorSolutionUpdate(arg1::SNES{Float64},arg2::Integer,arg3::Float64,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESMonitorSolutionUpdate,petscRealDouble),PetscErrorCode,(SNES{Float64},Int64,Float64,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function SNESMonitorDefaultShort(arg1::SNES{Float64},arg2::Integer,arg3::Float64,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESMonitorDefaultShort,petscRealDouble),PetscErrorCode,(SNES{Float64},Int64,Float64,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function SNESMonitorDefaultField(arg1::SNES{Float64},arg2::Integer,arg3::Float64,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESMonitorDefaultField,petscRealDouble),PetscErrorCode,(SNES{Float64},Int64,Float64,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function SNESMonitorJacUpdateSpectrum(arg1::SNES{Float64},arg2::Integer,arg3::Float64,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESMonitorJacUpdateSpectrum,petscRealDouble),PetscErrorCode,(SNES{Float64},Int64,Float64,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function SNESMonitorFields(arg1::SNES{Float64},arg2::Integer,arg3::Float64,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESMonitorFields,petscRealDouble),PetscErrorCode,(SNES{Float64},Int64,Float64,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPMonitorSNES(arg1::KSP{Float64},arg2::Integer,arg3::Float64,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPMonitorSNES,petscRealDouble),PetscErrorCode,(KSP{Float64},Int64,Float64,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPMonitorSNESLGResidualNormCreate(arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Union{Ptr{Ptr{PetscObject{Float64}}},StridedArray{Ptr{PetscObject{Float64}}},Ptr{Ptr{PetscObject{Float64}}},Ref{Ptr{PetscObject{Float64}}}})
    err = ccall((:KSPMonitorSNESLGResidualNormCreate,petscRealDouble),PetscErrorCode,(Cstring,Cstring,Cint,Cint,Cint,Cint,Ptr{Ptr{PetscObject{Float64}}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function KSPMonitorSNESLGResidualNorm(arg1::KSP{Float64},arg2::Integer,arg3::Float64,arg4::Union{Ptr{PetscObject{Float64}},StridedArray{PetscObject{Float64}},Ptr{PetscObject{Float64}},Ref{PetscObject{Float64}}})
    err = ccall((:KSPMonitorSNESLGResidualNorm,petscRealDouble),PetscErrorCode,(KSP{Float64},Int64,Float64,Ptr{PetscObject{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function KSPMonitorSNESLGResidualNormDestroy(arg1::Union{Ptr{Ptr{PetscObject{Float64}}},StridedArray{Ptr{PetscObject{Float64}}},Ptr{Ptr{PetscObject{Float64}}},Ref{Ptr{PetscObject{Float64}}}})
    err = ccall((:KSPMonitorSNESLGResidualNormDestroy,petscRealDouble),PetscErrorCode,(Ptr{Ptr{PetscObject{Float64}}},),arg1)
    return err
end

function SNESSetTolerances(arg1::SNES{Float64},arg2::Float64,arg3::Float64,arg4::Float64,arg5::Integer,arg6::Integer)
    err = ccall((:SNESSetTolerances,petscRealDouble),PetscErrorCode,(SNES{Float64},Float64,Float64,Float64,Int64,Int64),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function SNESGetTolerances(arg1::SNES{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:SNESGetTolerances,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function SNESSetTrustRegionTolerance(arg1::SNES{Float64},arg2::Float64)
    err = ccall((:SNESSetTrustRegionTolerance,petscRealDouble),PetscErrorCode,(SNES{Float64},Float64),arg1,arg2)
    return err
end

function SNESGetIterationNumber(arg1::SNES{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:SNESGetIterationNumber,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function SNESSetIterationNumber(arg1::SNES{Float64},arg2::Integer)
    err = ccall((:SNESSetIterationNumber,petscRealDouble),PetscErrorCode,(SNES{Float64},Int64),arg1,arg2)
    return err
end

function SNESGetNonlinearStepFailures(arg1::SNES{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:SNESGetNonlinearStepFailures,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function SNESSetMaxNonlinearStepFailures(arg1::SNES{Float64},arg2::Integer)
    err = ccall((:SNESSetMaxNonlinearStepFailures,petscRealDouble),PetscErrorCode,(SNES{Float64},Int64),arg1,arg2)
    return err
end

function SNESGetMaxNonlinearStepFailures(arg1::SNES{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:SNESGetMaxNonlinearStepFailures,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function SNESGetNumberFunctionEvals(arg1::SNES{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:SNESGetNumberFunctionEvals,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function SNESSetLagPreconditioner(arg1::SNES{Float64},arg2::Integer)
    err = ccall((:SNESSetLagPreconditioner,petscRealDouble),PetscErrorCode,(SNES{Float64},Int64),arg1,arg2)
    return err
end

function SNESGetLagPreconditioner(arg1::SNES{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:SNESGetLagPreconditioner,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function SNESSetLagJacobian(arg1::SNES{Float64},arg2::Integer)
    err = ccall((:SNESSetLagJacobian,petscRealDouble),PetscErrorCode,(SNES{Float64},Int64),arg1,arg2)
    return err
end

function SNESGetLagJacobian(arg1::SNES{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:SNESGetLagJacobian,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function SNESSetLagPreconditionerPersists(arg1::SNES{Float64},arg2::PetscBool)
    err = ccall((:SNESSetLagPreconditionerPersists,petscRealDouble),PetscErrorCode,(SNES{Float64},PetscBool),arg1,arg2)
    return err
end

function SNESSetLagJacobianPersists(arg1::SNES{Float64},arg2::PetscBool)
    err = ccall((:SNESSetLagJacobianPersists,petscRealDouble),PetscErrorCode,(SNES{Float64},PetscBool),arg1,arg2)
    return err
end

function SNESSetGridSequence(arg1::SNES{Float64},arg2::Integer)
    err = ccall((:SNESSetGridSequence,petscRealDouble),PetscErrorCode,(SNES{Float64},Int64),arg1,arg2)
    return err
end

function SNESGetGridSequence(arg1::SNES{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:SNESGetGridSequence,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function SNESGetLinearSolveIterations(arg1::SNES{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:SNESGetLinearSolveIterations,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function SNESGetLinearSolveFailures(arg1::SNES{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:SNESGetLinearSolveFailures,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function SNESSetMaxLinearSolveFailures(arg1::SNES{Float64},arg2::Integer)
    err = ccall((:SNESSetMaxLinearSolveFailures,petscRealDouble),PetscErrorCode,(SNES{Float64},Int64),arg1,arg2)
    return err
end

function SNESGetMaxLinearSolveFailures(arg1::SNES{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:SNESGetMaxLinearSolveFailures,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function SNESSetCountersReset(arg1::SNES{Float64},arg2::PetscBool)
    err = ccall((:SNESSetCountersReset,petscRealDouble),PetscErrorCode,(SNES{Float64},PetscBool),arg1,arg2)
    return err
end

function SNESKSPSetUseEW(arg1::SNES{Float64},arg2::PetscBool)
    err = ccall((:SNESKSPSetUseEW,petscRealDouble),PetscErrorCode,(SNES{Float64},PetscBool),arg1,arg2)
    return err
end

function SNESKSPGetUseEW(arg1::SNES{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:SNESKSPGetUseEW,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function SNESKSPSetParametersEW(arg1::SNES{Float64},arg2::Integer,arg3::Float64,arg4::Float64,arg5::Float64,arg6::Float64,arg7::Float64,arg8::Float64)
    err = ccall((:SNESKSPSetParametersEW,petscRealDouble),PetscErrorCode,(SNES{Float64},Int64,Float64,Float64,Float64,Float64,Float64,Float64),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function SNESKSPGetParametersEW(arg1::SNES{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg7::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg8::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:SNESKSPGetParametersEW,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{Int64},Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function SNESMonitorLGCreate(arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Union{Ptr{Ptr{PetscObject{Float64}}},StridedArray{Ptr{PetscObject{Float64}}},Ptr{Ptr{PetscObject{Float64}}},Ref{Ptr{PetscObject{Float64}}}})
    err = ccall((:SNESMonitorLGCreate,petscRealDouble),PetscErrorCode,(Cstring,Cstring,Cint,Cint,Cint,Cint,Ptr{Ptr{PetscObject{Float64}}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function SNESMonitorLGResidualNorm(arg1::SNES{Float64},arg2::Integer,arg3::Float64,arg4::Union{Ptr{PetscObject{Float64}},StridedArray{PetscObject{Float64}},Ptr{PetscObject{Float64}},Ref{PetscObject{Float64}}})
    err = ccall((:SNESMonitorLGResidualNorm,petscRealDouble),PetscErrorCode,(SNES{Float64},Int64,Float64,Ptr{PetscObject{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function SNESMonitorLGDestroy(arg1::Union{Ptr{Ptr{PetscObject{Float64}}},StridedArray{Ptr{PetscObject{Float64}}},Ptr{Ptr{PetscObject{Float64}}},Ref{Ptr{PetscObject{Float64}}}})
    err = ccall((:SNESMonitorLGDestroy,petscRealDouble),PetscErrorCode,(Ptr{Ptr{PetscObject{Float64}}},),arg1)
    return err
end

function SNESMonitorLGRange(arg1::SNES{Float64},arg2::Integer,arg3::Float64,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESMonitorLGRange,petscRealDouble),PetscErrorCode,(SNES{Float64},Int64,Float64,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function SNESSetApplicationContext(arg1::SNES{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESSetApplicationContext,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function SNESGetApplicationContext(arg1::SNES{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESGetApplicationContext,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function SNESSetComputeApplicationContext(arg1::SNES{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESSetComputeApplicationContext,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function SNESPythonSetType(arg1::SNES{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:SNESPythonSetType,petscRealDouble),PetscErrorCode,(SNES{Float64},Cstring),arg1,arg2)
    return err
end

function SNESSetFunctionDomainError(arg1::SNES{Float64})
    err = ccall((:SNESSetFunctionDomainError,petscRealDouble),PetscErrorCode,(SNES{Float64},),arg1)
    return err
end

function SNESGetFunctionDomainError(arg1::SNES{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:SNESGetFunctionDomainError,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function SNESSetConvergenceTest(arg1::SNES{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESSetConvergenceTest,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function SNESConvergedDefault(arg1::SNES{Float64},arg2::Integer,arg3::Float64,arg4::Float64,arg5::Float64,arg6::Union{Ptr{SNESConvergedReason},StridedArray{SNESConvergedReason},Ptr{SNESConvergedReason},Ref{SNESConvergedReason}},arg7::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESConvergedDefault,petscRealDouble),PetscErrorCode,(SNES{Float64},Int64,Float64,Float64,Float64,Ptr{SNESConvergedReason},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function SNESConvergedSkip(arg1::SNES{Float64},arg2::Integer,arg3::Float64,arg4::Float64,arg5::Float64,arg6::Union{Ptr{SNESConvergedReason},StridedArray{SNESConvergedReason},Ptr{SNESConvergedReason},Ref{SNESConvergedReason}},arg7::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESConvergedSkip,petscRealDouble),PetscErrorCode,(SNES{Float64},Int64,Float64,Float64,Float64,Ptr{SNESConvergedReason},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function SNESGetConvergedReason(arg1::SNES{Float64},arg2::Union{Ptr{SNESConvergedReason},StridedArray{SNESConvergedReason},Ptr{SNESConvergedReason},Ref{SNESConvergedReason}})
    err = ccall((:SNESGetConvergedReason,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{SNESConvergedReason}),arg1,arg2)
    return err
end

function SNESGetFunction(arg1::SNES{Float64},arg2::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:SNESGetFunction,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{Vec{Float64}},Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4)
    return err
end

function SNESComputeFunction(arg1::SNES{Float64},arg2::Vec{Float64},arg3::Vec{Float64})
    err = ccall((:SNESComputeFunction,petscRealDouble),PetscErrorCode,(SNES{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3)
    return err
end

function SNESSetJacobian(arg1::SNES{Float64},arg2::Mat{Float64},arg3::Mat{Float64},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESSetJacobian,petscRealDouble),PetscErrorCode,(SNES{Float64},Mat{Float64},Mat{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function SNESGetJacobian(arg1::SNES{Float64},arg2::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}},arg3::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}},arg4::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg5::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:SNESGetJacobian,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{Mat{Float64}},Ptr{Mat{Float64}},Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function SNESObjectiveComputeFunctionDefaultFD(arg1::SNES{Float64},arg2::Vec{Float64},arg3::Vec{Float64},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESObjectiveComputeFunctionDefaultFD,petscRealDouble),PetscErrorCode,(SNES{Float64},Vec{Float64},Vec{Float64},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function SNESComputeJacobianDefault(arg1::SNES{Float64},arg2::Vec{Float64},arg3::Mat{Float64},arg4::Mat{Float64},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESComputeJacobianDefault,petscRealDouble),PetscErrorCode,(SNES{Float64},Vec{Float64},Mat{Float64},Mat{Float64},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function SNESComputeJacobianDefaultColor(arg1::SNES{Float64},arg2::Vec{Float64},arg3::Mat{Float64},arg4::Mat{Float64},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESComputeJacobianDefaultColor,petscRealDouble),PetscErrorCode,(SNES{Float64},Vec{Float64},Mat{Float64},Mat{Float64},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function SNESSetComputeInitialGuess(arg1::SNES{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESSetComputeInitialGuess,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function SNESSetPicard(arg1::SNES{Float64},arg2::Vec{Float64},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Mat{Float64},arg5::Mat{Float64},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg7::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESSetPicard,petscRealDouble),PetscErrorCode,(SNES{Float64},Vec{Float64},Ptr{Void},Mat{Float64},Mat{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function SNESGetPicard(arg1::SNES{Float64},arg2::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}},arg5::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}},arg6::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg7::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:SNESGetPicard,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{Vec{Float64}},Ptr{Ptr{Void}},Ptr{Mat{Float64}},Ptr{Mat{Float64}},Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function SNESSetInitialFunction(arg1::SNES{Float64},arg2::Vec{Float64})
    err = ccall((:SNESSetInitialFunction,petscRealDouble),PetscErrorCode,(SNES{Float64},Vec{Float64}),arg1,arg2)
    return err
end

function SNESSetObjective(arg1::SNES{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESSetObjective,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function SNESGetObjective(arg1::SNES{Float64},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:SNESGetObjective,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function SNESComputeObjective(arg1::SNES{Float64},arg2::Vec{Float64},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:SNESComputeObjective,petscRealDouble),PetscErrorCode,(SNES{Float64},Vec{Float64},Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function SNESSetNormSchedule(arg1::SNES{Float64},arg2::SNESNormSchedule)
    err = ccall((:SNESSetNormSchedule,petscRealDouble),PetscErrorCode,(SNES{Float64},SNESNormSchedule),arg1,arg2)
    return err
end

function SNESGetNormSchedule(arg1::SNES{Float64},arg2::Union{Ptr{SNESNormSchedule},StridedArray{SNESNormSchedule},Ptr{SNESNormSchedule},Ref{SNESNormSchedule}})
    err = ccall((:SNESGetNormSchedule,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{SNESNormSchedule}),arg1,arg2)
    return err
end

function SNESSetFunctionType(arg1::SNES{Float64},arg2::SNESFunctionType)
    err = ccall((:SNESSetFunctionType,petscRealDouble),PetscErrorCode,(SNES{Float64},SNESFunctionType),arg1,arg2)
    return err
end

function SNESGetFunctionType(arg1::SNES{Float64},arg2::Union{Ptr{SNESFunctionType},StridedArray{SNESFunctionType},Ptr{SNESFunctionType},Ref{SNESFunctionType}})
    err = ccall((:SNESGetFunctionType,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{SNESFunctionType}),arg1,arg2)
    return err
end

function SNESSetNGS(arg1::SNES{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESSetNGS,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function SNESGetNGS(arg1::SNES{Float64},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:SNESGetNGS,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function SNESSetUseNGS(arg1::SNES{Float64},arg2::PetscBool)
    err = ccall((:SNESSetUseNGS,petscRealDouble),PetscErrorCode,(SNES{Float64},PetscBool),arg1,arg2)
    return err
end

function SNESGetUseNGS(arg1::SNES{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:SNESGetUseNGS,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function SNESComputeNGS(arg1::SNES{Float64},arg2::Vec{Float64},arg3::Vec{Float64})
    err = ccall((:SNESComputeNGS,petscRealDouble),PetscErrorCode,(SNES{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3)
    return err
end

function SNESNGSSetSweeps(arg1::SNES{Float64},arg2::Integer)
    err = ccall((:SNESNGSSetSweeps,petscRealDouble),PetscErrorCode,(SNES{Float64},Int64),arg1,arg2)
    return err
end

function SNESNGSGetSweeps(arg1::SNES{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:SNESNGSGetSweeps,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function SNESNGSSetTolerances(arg1::SNES{Float64},arg2::Float64,arg3::Float64,arg4::Float64,arg5::Integer)
    err = ccall((:SNESNGSSetTolerances,petscRealDouble),PetscErrorCode,(SNES{Float64},Float64,Float64,Float64,Int64),arg1,arg2,arg3,arg4,arg5)
    return err
end

function SNESNGSGetTolerances(arg1::SNES{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:SNESNGSGetTolerances,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function SNESUpdateCheckJacobian(arg1::SNES{Float64},arg2::Integer)
    err = ccall((:SNESUpdateCheckJacobian,petscRealDouble),PetscErrorCode,(SNES{Float64},Int64),arg1,arg2)
    return err
end

function SNESShellGetContext(arg1::SNES{Float64},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:SNESShellGetContext,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{Ptr{Void}}),arg1,arg2)
    return err
end

function SNESShellSetContext(arg1::SNES{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESShellSetContext,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function SNESShellSetSolve(arg1::SNES{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESShellSetSolve,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function SNESLineSearchCreate(arg1::MPI_Comm,arg2::Union{Ptr{SNESLineSearch{Float64}},StridedArray{SNESLineSearch{Float64}},Ptr{SNESLineSearch{Float64}},Ref{SNESLineSearch{Float64}}})
    err = ccall((:SNESLineSearchCreate,petscRealDouble),PetscErrorCode,(comm_type,Ptr{SNESLineSearch{Float64}}),arg1,arg2)
    return err
end

function SNESLineSearchReset(arg1::SNESLineSearch{Float64})
    err = ccall((:SNESLineSearchReset,petscRealDouble),PetscErrorCode,(SNESLineSearch{Float64},),arg1)
    return err
end

function SNESLineSearchView(arg1::SNESLineSearch{Float64},arg2::PetscViewer{Float64})
    err = ccall((:SNESLineSearchView,petscRealDouble),PetscErrorCode,(SNESLineSearch{Float64},PetscViewer{Float64}),arg1,arg2)
    return err
end

function SNESLineSearchDestroy(arg1::Union{Ptr{SNESLineSearch{Float64}},StridedArray{SNESLineSearch{Float64}},Ptr{SNESLineSearch{Float64}},Ref{SNESLineSearch{Float64}}})
    err = ccall((:SNESLineSearchDestroy,petscRealDouble),PetscErrorCode,(Ptr{SNESLineSearch{Float64}},),arg1)
    return err
end

function SNESLineSearchSetType(arg1::SNESLineSearch{Float64},arg2::SNESLineSearchType)
    err = ccall((:SNESLineSearchSetType,petscRealDouble),PetscErrorCode,(SNESLineSearch{Float64},SNESLineSearchType),arg1,arg2)
    return err
end

function SNESLineSearchSetFromOptions(arg1::SNESLineSearch{Float64})
    err = ccall((:SNESLineSearchSetFromOptions,petscRealDouble),PetscErrorCode,(SNESLineSearch{Float64},),arg1)
    return err
end

function SNESLineSearchSetFunction(arg1::SNESLineSearch{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESLineSearchSetFunction,petscRealDouble),PetscErrorCode,(SNESLineSearch{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function SNESLineSearchSetUp(arg1::SNESLineSearch{Float64})
    err = ccall((:SNESLineSearchSetUp,petscRealDouble),PetscErrorCode,(SNESLineSearch{Float64},),arg1)
    return err
end

function SNESLineSearchApply(arg1::SNESLineSearch{Float64},arg2::Vec{Float64},arg3::Vec{Float64},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Vec{Float64})
    err = ccall((:SNESLineSearchApply,petscRealDouble),PetscErrorCode,(SNESLineSearch{Float64},Vec{Float64},Vec{Float64},Ptr{Float64},Vec{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function SNESLineSearchPreCheck(arg1::SNESLineSearch{Float64},arg2::Vec{Float64},arg3::Vec{Float64},arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:SNESLineSearchPreCheck,petscRealDouble),PetscErrorCode,(SNESLineSearch{Float64},Vec{Float64},Vec{Float64},Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function SNESLineSearchPostCheck(arg1::SNESLineSearch{Float64},arg2::Vec{Float64},arg3::Vec{Float64},arg4::Vec{Float64},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg6::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:SNESLineSearchPostCheck,petscRealDouble),PetscErrorCode,(SNESLineSearch{Float64},Vec{Float64},Vec{Float64},Vec{Float64},Ptr{PetscBool},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function SNESLineSearchSetWorkVecs(arg1::SNESLineSearch{Float64},arg2::Integer)
    err = ccall((:SNESLineSearchSetWorkVecs,petscRealDouble),PetscErrorCode,(SNESLineSearch{Float64},Int64),arg1,arg2)
    return err
end

function SNESLineSearchSetPreCheck(arg1::SNESLineSearch{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},ctx::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESLineSearchSetPreCheck,petscRealDouble),PetscErrorCode,(SNESLineSearch{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,ctx)
    return err
end

function SNESLineSearchSetPostCheck(arg1::SNESLineSearch{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},ctx::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESLineSearchSetPostCheck,petscRealDouble),PetscErrorCode,(SNESLineSearch{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,ctx)
    return err
end

function SNESLineSearchGetPreCheck(arg1::SNESLineSearch{Float64},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},ctx::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:SNESLineSearchGetPreCheck,petscRealDouble),PetscErrorCode,(SNESLineSearch{Float64},Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,ctx)
    return err
end

function SNESLineSearchGetPostCheck(arg1::SNESLineSearch{Float64},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},ctx::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:SNESLineSearchGetPostCheck,petscRealDouble),PetscErrorCode,(SNESLineSearch{Float64},Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,ctx)
    return err
end

function SNESLineSearchSetVIFunctions(arg1::SNESLineSearch{Float64},arg2::SNESLineSearchVIProjectFunc,arg3::SNESLineSearchVINormFunc)
    err = ccall((:SNESLineSearchSetVIFunctions,petscRealDouble),PetscErrorCode,(SNESLineSearch{Float64},SNESLineSearchVIProjectFunc,SNESLineSearchVINormFunc),arg1,arg2,arg3)
    return err
end

function SNESLineSearchGetVIFunctions(arg1::SNESLineSearch{Float64},arg2::Union{Ptr{SNESLineSearchVIProjectFunc},StridedArray{SNESLineSearchVIProjectFunc},Ptr{SNESLineSearchVIProjectFunc},Ref{SNESLineSearchVIProjectFunc}},arg3::Union{Ptr{SNESLineSearchVINormFunc},StridedArray{SNESLineSearchVINormFunc},Ptr{SNESLineSearchVINormFunc},Ref{SNESLineSearchVINormFunc}})
    err = ccall((:SNESLineSearchGetVIFunctions,petscRealDouble),PetscErrorCode,(SNESLineSearch{Float64},Ptr{SNESLineSearchVIProjectFunc},Ptr{SNESLineSearchVINormFunc}),arg1,arg2,arg3)
    return err
end

function SNESLineSearchSetSNES(arg1::SNESLineSearch{Float64},arg2::SNES{Float64})
    err = ccall((:SNESLineSearchSetSNES,petscRealDouble),PetscErrorCode,(SNESLineSearch{Float64},SNES{Float64}),arg1,arg2)
    return err
end

function SNESLineSearchGetSNES(arg1::SNESLineSearch{Float64},arg2::Union{Ptr{SNES{Float64}},StridedArray{SNES{Float64}},Ptr{SNES{Float64}},Ref{SNES{Float64}}})
    err = ccall((:SNESLineSearchGetSNES,petscRealDouble),PetscErrorCode,(SNESLineSearch{Float64},Ptr{SNES{Float64}}),arg1,arg2)
    return err
end

function SNESLineSearchGetTolerances(arg1::SNESLineSearch{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:SNESLineSearchGetTolerances,petscRealDouble),PetscErrorCode,(SNESLineSearch{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function SNESLineSearchSetTolerances(arg1::SNESLineSearch{Float64},arg2::Float64,arg3::Float64,arg4::Float64,arg5::Float64,arg6::Float64,arg7::Integer)
    err = ccall((:SNESLineSearchSetTolerances,petscRealDouble),PetscErrorCode,(SNESLineSearch{Float64},Float64,Float64,Float64,Float64,Float64,Int64),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function SNESLineSearchPreCheckPicard(arg1::SNESLineSearch{Float64},arg2::Vec{Float64},arg3::Vec{Float64},arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESLineSearchPreCheckPicard,petscRealDouble),PetscErrorCode,(SNESLineSearch{Float64},Vec{Float64},Vec{Float64},Ptr{PetscBool},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function SNESLineSearchGetLambda(arg1::SNESLineSearch{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:SNESLineSearchGetLambda,petscRealDouble),PetscErrorCode,(SNESLineSearch{Float64},Ptr{Float64}),arg1,arg2)
    return err
end

function SNESLineSearchSetLambda(arg1::SNESLineSearch{Float64},arg2::Float64)
    err = ccall((:SNESLineSearchSetLambda,petscRealDouble),PetscErrorCode,(SNESLineSearch{Float64},Float64),arg1,arg2)
    return err
end

function SNESLineSearchGetDamping(arg1::SNESLineSearch{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:SNESLineSearchGetDamping,petscRealDouble),PetscErrorCode,(SNESLineSearch{Float64},Ptr{Float64}),arg1,arg2)
    return err
end

function SNESLineSearchSetDamping(arg1::SNESLineSearch{Float64},arg2::Float64)
    err = ccall((:SNESLineSearchSetDamping,petscRealDouble),PetscErrorCode,(SNESLineSearch{Float64},Float64),arg1,arg2)
    return err
end

function SNESLineSearchGetOrder(arg1::SNESLineSearch{Float64},order::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:SNESLineSearchGetOrder,petscRealDouble),PetscErrorCode,(SNESLineSearch{Float64},Ptr{Int64}),arg1,order)
    return err
end

function SNESLineSearchSetOrder(arg1::SNESLineSearch{Float64},order::Integer)
    err = ccall((:SNESLineSearchSetOrder,petscRealDouble),PetscErrorCode,(SNESLineSearch{Float64},Int64),arg1,order)
    return err
end

function SNESLineSearchGetReason(arg1::SNESLineSearch{Float64},arg2::Union{Ptr{SNESLineSearchReason},StridedArray{SNESLineSearchReason},Ptr{SNESLineSearchReason},Ref{SNESLineSearchReason}})
    err = ccall((:SNESLineSearchGetReason,petscRealDouble),PetscErrorCode,(SNESLineSearch{Float64},Ptr{SNESLineSearchReason}),arg1,arg2)
    return err
end

function SNESLineSearchSetReason(arg1::SNESLineSearch{Float64},arg2::SNESLineSearchReason)
    err = ccall((:SNESLineSearchSetReason,petscRealDouble),PetscErrorCode,(SNESLineSearch{Float64},SNESLineSearchReason),arg1,arg2)
    return err
end

function SNESLineSearchGetVecs(arg1::SNESLineSearch{Float64},arg2::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}},arg3::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}},arg4::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}},arg5::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}},arg6::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:SNESLineSearchGetVecs,petscRealDouble),PetscErrorCode,(SNESLineSearch{Float64},Ptr{Vec{Float64}},Ptr{Vec{Float64}},Ptr{Vec{Float64}},Ptr{Vec{Float64}},Ptr{Vec{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function SNESLineSearchSetVecs(arg1::SNESLineSearch{Float64},arg2::Vec{Float64},arg3::Vec{Float64},arg4::Vec{Float64},arg5::Vec{Float64},arg6::Vec{Float64})
    err = ccall((:SNESLineSearchSetVecs,petscRealDouble),PetscErrorCode,(SNESLineSearch{Float64},Vec{Float64},Vec{Float64},Vec{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function SNESLineSearchGetNorms(arg1::SNESLineSearch{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:SNESLineSearchGetNorms,petscRealDouble),PetscErrorCode,(SNESLineSearch{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function SNESLineSearchSetNorms(arg1::SNESLineSearch{Float64},arg2::Float64,arg3::Float64,arg4::Float64)
    err = ccall((:SNESLineSearchSetNorms,petscRealDouble),PetscErrorCode,(SNESLineSearch{Float64},Float64,Float64,Float64),arg1,arg2,arg3,arg4)
    return err
end

function SNESLineSearchComputeNorms(arg1::SNESLineSearch{Float64})
    err = ccall((:SNESLineSearchComputeNorms,petscRealDouble),PetscErrorCode,(SNESLineSearch{Float64},),arg1)
    return err
end

function SNESLineSearchSetComputeNorms(arg1::SNESLineSearch{Float64},arg2::PetscBool)
    err = ccall((:SNESLineSearchSetComputeNorms,petscRealDouble),PetscErrorCode,(SNESLineSearch{Float64},PetscBool),arg1,arg2)
    return err
end

function SNESLineSearchSetMonitor(arg1::SNESLineSearch{Float64},arg2::PetscBool)
    err = ccall((:SNESLineSearchSetMonitor,petscRealDouble),PetscErrorCode,(SNESLineSearch{Float64},PetscBool),arg1,arg2)
    return err
end

function SNESLineSearchGetMonitor(arg1::SNESLineSearch{Float64},arg2::Union{Ptr{PetscViewer{Float64}},StridedArray{PetscViewer{Float64}},Ptr{PetscViewer{Float64}},Ref{PetscViewer{Float64}}})
    err = ccall((:SNESLineSearchGetMonitor,petscRealDouble),PetscErrorCode,(SNESLineSearch{Float64},Ptr{PetscViewer{Float64}}),arg1,arg2)
    return err
end

function SNESLineSearchAppendOptionsPrefix(arg1::SNESLineSearch{Float64},prefix::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:SNESLineSearchAppendOptionsPrefix,petscRealDouble),PetscErrorCode,(SNESLineSearch{Float64},Cstring),arg1,prefix)
    return err
end

function SNESLineSearchGetOptionsPrefix(arg1::SNESLineSearch{Float64},prefix::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:SNESLineSearchGetOptionsPrefix,petscRealDouble),PetscErrorCode,(SNESLineSearch{Float64},Ptr{Ptr{UInt8}}),arg1,prefix)
    return err
end

function SNESLineSearchShellSetUserFunc(arg1::SNESLineSearch{Float64},arg2::SNESLineSearchUserFunc,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESLineSearchShellSetUserFunc,petscRealDouble),PetscErrorCode,(SNESLineSearch{Float64},SNESLineSearchUserFunc,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function SNESLineSearchShellGetUserFunc(arg1::SNESLineSearch{Float64},arg2::Union{Ptr{SNESLineSearchUserFunc},StridedArray{SNESLineSearchUserFunc},Ptr{SNESLineSearchUserFunc},Ref{SNESLineSearchUserFunc}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:SNESLineSearchShellGetUserFunc,petscRealDouble),PetscErrorCode,(SNESLineSearch{Float64},Ptr{SNESLineSearchUserFunc},Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function SNESLineSearchBTSetAlpha(arg1::SNESLineSearch{Float64},arg2::Float64)
    err = ccall((:SNESLineSearchBTSetAlpha,petscRealDouble),PetscErrorCode,(SNESLineSearch{Float64},Float64),arg1,arg2)
    return err
end

function SNESLineSearchBTGetAlpha(arg1::SNESLineSearch{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:SNESLineSearchBTGetAlpha,petscRealDouble),PetscErrorCode,(SNESLineSearch{Float64},Ptr{Float64}),arg1,arg2)
    return err
end

function SNESLineSearchRegister(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESLineSearchRegister,petscRealDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function SNESVISetVariableBounds(arg1::SNES{Float64},arg2::Vec{Float64},arg3::Vec{Float64})
    err = ccall((:SNESVISetVariableBounds,petscRealDouble),PetscErrorCode,(SNES{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3)
    return err
end

function SNESVISetComputeVariableBounds(arg1::SNES{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESVISetComputeVariableBounds,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function SNESVIGetInactiveSet(arg1::SNES{Float64},arg2::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:SNESVIGetInactiveSet,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{IS{Float64}}),arg1,arg2)
    return err
end

function SNESVIGetActiveSetIS(arg1::SNES{Float64},arg2::Vec{Float64},arg3::Vec{Float64},arg4::Union{Ptr{IS{Float64}},StridedArray{IS{Float64}},Ptr{IS{Float64}},Ref{IS{Float64}}})
    err = ccall((:SNESVIGetActiveSetIS,petscRealDouble),PetscErrorCode,(SNES{Float64},Vec{Float64},Vec{Float64},Ptr{IS{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function SNESVIComputeInactiveSetFnorm(arg1::SNES{Float64},arg2::Vec{Float64},arg3::Vec{Float64},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:SNESVIComputeInactiveSetFnorm,petscRealDouble),PetscErrorCode,(SNES{Float64},Vec{Float64},Vec{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function SNESVISetRedundancyCheck(arg1::SNES{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESVISetRedundancyCheck,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function SNESTestLocalMin(arg1::SNES{Float64})
    err = ccall((:SNESTestLocalMin,petscRealDouble),PetscErrorCode,(SNES{Float64},),arg1)
    return err
end

function SNESComputeJacobian(arg1::SNES{Float64},arg2::Vec{Float64},arg3::Mat{Float64},arg4::Mat{Float64})
    err = ccall((:SNESComputeJacobian,petscRealDouble),PetscErrorCode,(SNES{Float64},Vec{Float64},Mat{Float64},Mat{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function SNESSetDM(arg1::SNES{Float64},arg2::DM{Float64})
    err = ccall((:SNESSetDM,petscRealDouble),PetscErrorCode,(SNES{Float64},DM{Float64}),arg1,arg2)
    return err
end

function SNESGetDM(arg1::SNES{Float64},arg2::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:SNESGetDM,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{DM{Float64}}),arg1,arg2)
    return err
end

function SNESSetNPC(arg1::SNES{Float64},arg2::SNES{Float64})
    err = ccall((:SNESSetNPC,petscRealDouble),PetscErrorCode,(SNES{Float64},SNES{Float64}),arg1,arg2)
    return err
end

function SNESGetNPC(arg1::SNES{Float64},arg2::Union{Ptr{SNES{Float64}},StridedArray{SNES{Float64}},Ptr{SNES{Float64}},Ref{SNES{Float64}}})
    err = ccall((:SNESGetNPC,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{SNES{Float64}}),arg1,arg2)
    return err
end

function SNESHasNPC(arg1::SNES{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:SNESHasNPC,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function SNESApplyNPC(arg1::SNES{Float64},arg2::Vec{Float64},arg3::Vec{Float64},arg4::Vec{Float64})
    err = ccall((:SNESApplyNPC,petscRealDouble),PetscErrorCode,(SNES{Float64},Vec{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function SNESGetNPCFunction(arg1::SNES{Float64},arg2::Vec{Float64},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:SNESGetNPCFunction,petscRealDouble),PetscErrorCode,(SNES{Float64},Vec{Float64},Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function SNESComputeFunctionDefaultNPC(arg1::SNES{Float64},arg2::Vec{Float64},arg3::Vec{Float64})
    err = ccall((:SNESComputeFunctionDefaultNPC,petscRealDouble),PetscErrorCode,(SNES{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3)
    return err
end

function SNESSetNPCSide(arg1::SNES{Float64},arg2::PCSide)
    err = ccall((:SNESSetNPCSide,petscRealDouble),PetscErrorCode,(SNES{Float64},PCSide),arg1,arg2)
    return err
end

function SNESGetNPCSide(arg1::SNES{Float64},arg2::Union{Ptr{PCSide},StridedArray{PCSide},Ptr{PCSide},Ref{PCSide}})
    err = ccall((:SNESGetNPCSide,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{PCSide}),arg1,arg2)
    return err
end

function SNESSetLineSearch(arg1::SNES{Float64},arg2::SNESLineSearch{Float64})
    err = ccall((:SNESSetLineSearch,petscRealDouble),PetscErrorCode,(SNES{Float64},SNESLineSearch{Float64}),arg1,arg2)
    return err
end

function SNESGetLineSearch(arg1::SNES{Float64},arg2::Union{Ptr{SNESLineSearch{Float64}},StridedArray{SNESLineSearch{Float64}},Ptr{SNESLineSearch{Float64}},Ref{SNESLineSearch{Float64}}})
    err = ccall((:SNESGetLineSearch,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{SNESLineSearch{Float64}}),arg1,arg2)
    return err
end

function SNESRestrictHookAdd(arg1::SNES{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESRestrictHookAdd,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function SNESRestrictHooksRun(arg1::SNES{Float64},arg2::SNES{Float64})
    err = ccall((:SNESRestrictHooksRun,petscRealDouble),PetscErrorCode,(SNES{Float64},SNES{Float64}),arg1,arg2)
    return err
end

function DMSNESSetFunction(arg1::DM{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMSNESSetFunction,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMSNESGetFunction(arg1::DM{Float64},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:DMSNESGetFunction,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function DMSNESSetNGS(arg1::DM{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMSNESSetNGS,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMSNESGetNGS(arg1::DM{Float64},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:DMSNESGetNGS,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function DMSNESSetJacobian(arg1::DM{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMSNESSetJacobian,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMSNESGetJacobian(arg1::DM{Float64},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:DMSNESGetJacobian,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function DMSNESSetPicard(arg1::DM{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMSNESSetPicard,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function DMSNESGetPicard(arg1::DM{Float64},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:DMSNESGetPicard,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Ptr{Void}},Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4)
    return err
end

function DMSNESSetObjective(arg1::DM{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMSNESSetObjective,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMSNESGetObjective(arg1::DM{Float64},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:DMSNESGetObjective,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function DMDASNESSetFunctionLocal(arg1::DM{Float64},arg2::InsertMode,arg3::DMDASNESFunction,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDASNESSetFunctionLocal,petscRealDouble),PetscErrorCode,(DM{Float64},InsertMode,DMDASNESFunction,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function DMDASNESSetJacobianLocal(arg1::DM{Float64},arg2::DMDASNESJacobian,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDASNESSetJacobianLocal,petscRealDouble),PetscErrorCode,(DM{Float64},DMDASNESJacobian,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMDASNESSetObjectiveLocal(arg1::DM{Float64},arg2::DMDASNESObjective,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDASNESSetObjectiveLocal,petscRealDouble),PetscErrorCode,(DM{Float64},DMDASNESObjective,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMDASNESSetPicardLocal(arg1::DM{Float64},arg2::InsertMode,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDASNESSetPicardLocal,petscRealDouble),PetscErrorCode,(DM{Float64},InsertMode,Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function DMPlexSNESGetGeometryFEM(arg1::DM{Float64},arg2::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:DMPlexSNESGetGeometryFEM,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Vec{Float64}}),arg1,arg2)
    return err
end

function DMPlexSNESGetGeometryFVM(arg1::DM{Float64},arg2::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}},arg3::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:DMPlexSNESGetGeometryFVM,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Vec{Float64}},Ptr{Vec{Float64}},Ptr{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function DMPlexSNESGetGradientDM(arg1::DM{Float64},arg2::PetscFV{Float64},arg3::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:DMPlexSNESGetGradientDM,petscRealDouble),PetscErrorCode,(DM{Float64},PetscFV{Float64},Ptr{DM{Float64}}),arg1,arg2,arg3)
    return err
end

function DMPlexGetCellFields(arg1::DM{Float64},arg2::Integer,arg3::Integer,arg4::Vec{Float64},arg5::Vec{Float64},arg6::Vec{Float64},arg7::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg8::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg9::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:DMPlexGetCellFields,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Int64,Vec{Float64},Vec{Float64},Vec{Float64},Ptr{Ptr{Float64}},Ptr{Ptr{Float64}},Ptr{Ptr{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
    return err
end

function DMPlexRestoreCellFields(arg1::DM{Float64},arg2::Integer,arg3::Integer,arg4::Vec{Float64},arg5::Vec{Float64},arg6::Vec{Float64},arg7::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg8::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg9::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:DMPlexRestoreCellFields,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Int64,Vec{Float64},Vec{Float64},Vec{Float64},Ptr{Ptr{Float64}},Ptr{Ptr{Float64}},Ptr{Ptr{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
    return err
end

function DMPlexGetFaceFields(arg1::DM{Float64},arg2::Integer,arg3::Integer,arg4::Vec{Float64},arg5::Vec{Float64},arg6::Vec{Float64},arg7::Vec{Float64},arg8::Vec{Float64},arg9::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg10::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:DMPlexGetFaceFields,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Int64,Vec{Float64},Vec{Float64},Vec{Float64},Vec{Float64},Vec{Float64},Ptr{Ptr{Float64}},Ptr{Ptr{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function DMPlexRestoreFaceFields(arg1::DM{Float64},arg2::Integer,arg3::Integer,arg4::Vec{Float64},arg5::Vec{Float64},arg6::Vec{Float64},arg7::Vec{Float64},arg8::Vec{Float64},arg9::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg10::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:DMPlexRestoreFaceFields,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Int64,Vec{Float64},Vec{Float64},Vec{Float64},Vec{Float64},Vec{Float64},Ptr{Ptr{Float64}},Ptr{Ptr{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function DMPlexGetFaceGeometry(arg1::DM{Float64},arg2::Integer,arg3::Integer,arg4::Vec{Float64},arg5::Vec{Float64},arg6::Union{Ptr{Ptr{PetscFVFaceGeom}},StridedArray{Ptr{PetscFVFaceGeom}},Ptr{Ptr{PetscFVFaceGeom}},Ref{Ptr{PetscFVFaceGeom}}},arg7::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:DMPlexGetFaceGeometry,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Int64,Vec{Float64},Vec{Float64},Ptr{Ptr{PetscFVFaceGeom}},Ptr{Ptr{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function DMPlexRestoreFaceGeometry(arg1::DM{Float64},arg2::Integer,arg3::Integer,arg4::Vec{Float64},arg5::Vec{Float64},arg6::Union{Ptr{Ptr{PetscFVFaceGeom}},StridedArray{Ptr{PetscFVFaceGeom}},Ptr{Ptr{PetscFVFaceGeom}},Ref{Ptr{PetscFVFaceGeom}}},arg7::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:DMPlexRestoreFaceGeometry,petscRealDouble),PetscErrorCode,(DM{Float64},Int64,Int64,Vec{Float64},Vec{Float64},Ptr{Ptr{PetscFVFaceGeom}},Ptr{Ptr{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function DMSNESSetFunctionLocal(arg1::DM{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMSNESSetFunctionLocal,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMSNESSetJacobianLocal(arg1::DM{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMSNESSetJacobianLocal,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function SNESMultiblockSetFields(arg1::SNES{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:SNESMultiblockSetFields,petscRealDouble),PetscErrorCode,(SNES{Float64},Cstring,Int64,Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function SNESMultiblockSetIS(arg1::SNES{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::IS{Float64})
    err = ccall((:SNESMultiblockSetIS,petscRealDouble),PetscErrorCode,(SNES{Float64},Cstring,IS{Float64}),arg1,arg2,arg3)
    return err
end

function SNESMultiblockSetBlockSize(arg1::SNES{Float64},arg2::Integer)
    err = ccall((:SNESMultiblockSetBlockSize,petscRealDouble),PetscErrorCode,(SNES{Float64},Int64),arg1,arg2)
    return err
end

function SNESMultiblockSetType(arg1::SNES{Float64},arg2::PCCompositeType)
    err = ccall((:SNESMultiblockSetType,petscRealDouble),PetscErrorCode,(SNES{Float64},PCCompositeType),arg1,arg2)
    return err
end

function SNESMSRegister(arg0::Type{Float64},arg1::SNESMSType,arg2::Integer,arg3::Integer,arg4::Float64,arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg7::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:SNESMSRegister,petscRealDouble),PetscErrorCode,(SNESMSType,Int64,Int64,Float64,Ptr{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function SNESMSSetType(arg1::SNES{Float64},arg2::SNESMSType)
    err = ccall((:SNESMSSetType,petscRealDouble),PetscErrorCode,(SNES{Float64},SNESMSType),arg1,arg2)
    return err
end

function SNESMSFinalizePackage(arg0::Type{Float64})
    err = ccall((:SNESMSFinalizePackage,petscRealDouble),PetscErrorCode,())
    return err
end

function SNESMSInitializePackage(arg0::Type{Float64})
    err = ccall((:SNESMSInitializePackage,petscRealDouble),PetscErrorCode,())
    return err
end

function SNESMSRegisterDestroy(arg0::Type{Float64})
    err = ccall((:SNESMSRegisterDestroy,petscRealDouble),PetscErrorCode,())
    return err
end

function SNESNGMRESSetRestartType(arg1::SNES{Float64},arg2::SNESNGMRESRestartType)
    err = ccall((:SNESNGMRESSetRestartType,petscRealDouble),PetscErrorCode,(SNES{Float64},SNESNGMRESRestartType),arg1,arg2)
    return err
end

function SNESNGMRESSetSelectType(arg1::SNES{Float64},arg2::SNESNGMRESSelectType)
    err = ccall((:SNESNGMRESSetSelectType,petscRealDouble),PetscErrorCode,(SNES{Float64},SNESNGMRESSelectType),arg1,arg2)
    return err
end

function SNESNCGSetType(arg1::SNES{Float64},arg2::SNESNCGType)
    err = ccall((:SNESNCGSetType,petscRealDouble),PetscErrorCode,(SNES{Float64},SNESNCGType),arg1,arg2)
    return err
end

function SNESQNSetType(arg1::SNES{Float64},arg2::SNESQNType)
    err = ccall((:SNESQNSetType,petscRealDouble),PetscErrorCode,(SNES{Float64},SNESQNType),arg1,arg2)
    return err
end

function SNESQNSetScaleType(arg1::SNES{Float64},arg2::SNESQNScaleType)
    err = ccall((:SNESQNSetScaleType,petscRealDouble),PetscErrorCode,(SNES{Float64},SNESQNScaleType),arg1,arg2)
    return err
end

function SNESQNSetRestartType(arg1::SNES{Float64},arg2::SNESQNRestartType)
    err = ccall((:SNESQNSetRestartType,petscRealDouble),PetscErrorCode,(SNES{Float64},SNESQNRestartType),arg1,arg2)
    return err
end

function SNESNASMGetType(arg1::SNES{Float64},arg2::Union{Ptr{PCASMType},StridedArray{PCASMType},Ptr{PCASMType},Ref{PCASMType}})
    err = ccall((:SNESNASMGetType,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{PCASMType}),arg1,arg2)
    return err
end

function SNESNASMSetType(arg1::SNES{Float64},arg2::PCASMType)
    err = ccall((:SNESNASMSetType,petscRealDouble),PetscErrorCode,(SNES{Float64},PCASMType),arg1,arg2)
    return err
end

function SNESNASMGetSubdomains(arg1::SNES{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{SNES{Float64}}},StridedArray{Ptr{SNES{Float64}}},Ptr{Ptr{SNES{Float64}}},Ref{Ptr{SNES{Float64}}}},arg4::Union{Ptr{Ptr{VecScatter{Float64}}},StridedArray{Ptr{VecScatter{Float64}}},Ptr{Ptr{VecScatter{Float64}}},Ref{Ptr{VecScatter{Float64}}}},arg5::Union{Ptr{Ptr{VecScatter{Float64}}},StridedArray{Ptr{VecScatter{Float64}}},Ptr{Ptr{VecScatter{Float64}}},Ref{Ptr{VecScatter{Float64}}}},arg6::Union{Ptr{Ptr{VecScatter{Float64}}},StridedArray{Ptr{VecScatter{Float64}}},Ptr{Ptr{VecScatter{Float64}}},Ref{Ptr{VecScatter{Float64}}}})
    err = ccall((:SNESNASMGetSubdomains,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{Int64},Ptr{Ptr{SNES{Float64}}},Ptr{Ptr{VecScatter{Float64}}},Ptr{Ptr{VecScatter{Float64}}},Ptr{Ptr{VecScatter{Float64}}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function SNESNASMSetSubdomains(arg1::SNES{Float64},arg2::Integer,arg3::Union{Ptr{SNES{Float64}},StridedArray{SNES{Float64}},Ptr{SNES{Float64}},Ref{SNES{Float64}}},arg4::Union{Ptr{VecScatter{Float64}},StridedArray{VecScatter{Float64}},Ptr{VecScatter{Float64}},Ref{VecScatter{Float64}}},arg5::Union{Ptr{VecScatter{Float64}},StridedArray{VecScatter{Float64}},Ptr{VecScatter{Float64}},Ref{VecScatter{Float64}}},arg6::Union{Ptr{VecScatter{Float64}},StridedArray{VecScatter{Float64}},Ptr{VecScatter{Float64}},Ref{VecScatter{Float64}}})
    err = ccall((:SNESNASMSetSubdomains,petscRealDouble),PetscErrorCode,(SNES{Float64},Int64,Ptr{SNES{Float64}},Ptr{VecScatter{Float64}},Ptr{VecScatter{Float64}},Ptr{VecScatter{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function SNESNASMSetDamping(arg1::SNES{Float64},arg2::Float64)
    err = ccall((:SNESNASMSetDamping,petscRealDouble),PetscErrorCode,(SNES{Float64},Float64),arg1,arg2)
    return err
end

function SNESNASMGetDamping(arg1::SNES{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:SNESNASMGetDamping,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{Float64}),arg1,arg2)
    return err
end

function SNESNASMGetSubdomainVecs(arg1::SNES{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Vec{Float64}}},StridedArray{Ptr{Vec{Float64}}},Ptr{Ptr{Vec{Float64}}},Ref{Ptr{Vec{Float64}}}},arg4::Union{Ptr{Ptr{Vec{Float64}}},StridedArray{Ptr{Vec{Float64}}},Ptr{Ptr{Vec{Float64}}},Ref{Ptr{Vec{Float64}}}},arg5::Union{Ptr{Ptr{Vec{Float64}}},StridedArray{Ptr{Vec{Float64}}},Ptr{Ptr{Vec{Float64}}},Ref{Ptr{Vec{Float64}}}},arg6::Union{Ptr{Ptr{Vec{Float64}}},StridedArray{Ptr{Vec{Float64}}},Ptr{Ptr{Vec{Float64}}},Ref{Ptr{Vec{Float64}}}})
    err = ccall((:SNESNASMGetSubdomainVecs,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{Int64},Ptr{Ptr{Vec{Float64}}},Ptr{Ptr{Vec{Float64}}},Ptr{Ptr{Vec{Float64}}},Ptr{Ptr{Vec{Float64}}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function SNESNASMSetComputeFinalJacobian(arg1::SNES{Float64},arg2::PetscBool)
    err = ccall((:SNESNASMSetComputeFinalJacobian,petscRealDouble),PetscErrorCode,(SNES{Float64},PetscBool),arg1,arg2)
    return err
end

function SNESCompositeSetType(arg1::SNES{Float64},arg2::SNESCompositeType)
    err = ccall((:SNESCompositeSetType,petscRealDouble),PetscErrorCode,(SNES{Float64},SNESCompositeType),arg1,arg2)
    return err
end

function SNESCompositeAddSNES(arg1::SNES{Float64},arg2::SNESType)
    err = ccall((:SNESCompositeAddSNES,petscRealDouble),PetscErrorCode,(SNES{Float64},SNESType),arg1,arg2)
    return err
end

function SNESCompositeGetSNES(arg1::SNES{Float64},arg2::Integer,arg3::Union{Ptr{SNES{Float64}},StridedArray{SNES{Float64}},Ptr{SNES{Float64}},Ref{SNES{Float64}}})
    err = ccall((:SNESCompositeGetSNES,petscRealDouble),PetscErrorCode,(SNES{Float64},Int64,Ptr{SNES{Float64}}),arg1,arg2,arg3)
    return err
end

function SNESCompositeGetNumber(arg1::SNES{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:SNESCompositeGetNumber,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function SNESCompositeSetDamping(arg1::SNES{Float64},arg2::Integer,arg3::Float64)
    err = ccall((:SNESCompositeSetDamping,petscRealDouble),PetscErrorCode,(SNES{Float64},Int64,Float64),arg1,arg2,arg3)
    return err
end

function SNESFASSetType(arg1::SNES{Float64},arg2::SNESFASType)
    err = ccall((:SNESFASSetType,petscRealDouble),PetscErrorCode,(SNES{Float64},SNESFASType),arg1,arg2)
    return err
end

function SNESFASGetType(arg1::SNES{Float64},arg2::Union{Ptr{SNESFASType},StridedArray{SNESFASType},Ptr{SNESFASType},Ref{SNESFASType}})
    err = ccall((:SNESFASGetType,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{SNESFASType}),arg1,arg2)
    return err
end

function SNESFASSetLevels(arg1::SNES{Float64},arg2::Integer,arg3::Union{Ptr{MPI_Comm},StridedArray{MPI_Comm},Ptr{MPI_Comm},Ref{MPI_Comm}})
    err = ccall((:SNESFASSetLevels,petscRealDouble),PetscErrorCode,(SNES{Float64},Int64,Ptr{comm_type}),arg1,arg2,arg3)
    return err
end

function SNESFASGetLevels(arg1::SNES{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:SNESFASGetLevels,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function SNESFASGetCycleSNES(arg1::SNES{Float64},arg2::Integer,arg3::Union{Ptr{SNES{Float64}},StridedArray{SNES{Float64}},Ptr{SNES{Float64}},Ref{SNES{Float64}}})
    err = ccall((:SNESFASGetCycleSNES,petscRealDouble),PetscErrorCode,(SNES{Float64},Int64,Ptr{SNES{Float64}}),arg1,arg2,arg3)
    return err
end

function SNESFASSetNumberSmoothUp(arg1::SNES{Float64},arg2::Integer)
    err = ccall((:SNESFASSetNumberSmoothUp,petscRealDouble),PetscErrorCode,(SNES{Float64},Int64),arg1,arg2)
    return err
end

function SNESFASSetNumberSmoothDown(arg1::SNES{Float64},arg2::Integer)
    err = ccall((:SNESFASSetNumberSmoothDown,petscRealDouble),PetscErrorCode,(SNES{Float64},Int64),arg1,arg2)
    return err
end

function SNESFASSetCycles(arg1::SNES{Float64},arg2::Integer)
    err = ccall((:SNESFASSetCycles,petscRealDouble),PetscErrorCode,(SNES{Float64},Int64),arg1,arg2)
    return err
end

function SNESFASSetMonitor(arg1::SNES{Float64},arg2::PetscBool)
    err = ccall((:SNESFASSetMonitor,petscRealDouble),PetscErrorCode,(SNES{Float64},PetscBool),arg1,arg2)
    return err
end

function SNESFASSetLog(arg1::SNES{Float64},arg2::PetscBool)
    err = ccall((:SNESFASSetLog,petscRealDouble),PetscErrorCode,(SNES{Float64},PetscBool),arg1,arg2)
    return err
end

function SNESFASSetGalerkin(arg1::SNES{Float64},arg2::PetscBool)
    err = ccall((:SNESFASSetGalerkin,petscRealDouble),PetscErrorCode,(SNES{Float64},PetscBool),arg1,arg2)
    return err
end

function SNESFASGetGalerkin(arg1::SNES{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:SNESFASGetGalerkin,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function SNESFASCycleGetSmoother(arg1::SNES{Float64},arg2::Union{Ptr{SNES{Float64}},StridedArray{SNES{Float64}},Ptr{SNES{Float64}},Ref{SNES{Float64}}})
    err = ccall((:SNESFASCycleGetSmoother,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{SNES{Float64}}),arg1,arg2)
    return err
end

function SNESFASCycleGetSmootherUp(arg1::SNES{Float64},arg2::Union{Ptr{SNES{Float64}},StridedArray{SNES{Float64}},Ptr{SNES{Float64}},Ref{SNES{Float64}}})
    err = ccall((:SNESFASCycleGetSmootherUp,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{SNES{Float64}}),arg1,arg2)
    return err
end

function SNESFASCycleGetSmootherDown(arg1::SNES{Float64},arg2::Union{Ptr{SNES{Float64}},StridedArray{SNES{Float64}},Ptr{SNES{Float64}},Ref{SNES{Float64}}})
    err = ccall((:SNESFASCycleGetSmootherDown,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{SNES{Float64}}),arg1,arg2)
    return err
end

function SNESFASCycleGetCorrection(arg1::SNES{Float64},arg2::Union{Ptr{SNES{Float64}},StridedArray{SNES{Float64}},Ptr{SNES{Float64}},Ref{SNES{Float64}}})
    err = ccall((:SNESFASCycleGetCorrection,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{SNES{Float64}}),arg1,arg2)
    return err
end

function SNESFASCycleGetInterpolation(arg1::SNES{Float64},arg2::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:SNESFASCycleGetInterpolation,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{Mat{Float64}}),arg1,arg2)
    return err
end

function SNESFASCycleGetRestriction(arg1::SNES{Float64},arg2::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:SNESFASCycleGetRestriction,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{Mat{Float64}}),arg1,arg2)
    return err
end

function SNESFASCycleGetInjection(arg1::SNES{Float64},arg2::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:SNESFASCycleGetInjection,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{Mat{Float64}}),arg1,arg2)
    return err
end

function SNESFASCycleGetRScale(arg1::SNES{Float64},arg2::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:SNESFASCycleGetRScale,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{Vec{Float64}}),arg1,arg2)
    return err
end

function SNESFASCycleSetCycles(arg1::SNES{Float64},arg2::Integer)
    err = ccall((:SNESFASCycleSetCycles,petscRealDouble),PetscErrorCode,(SNES{Float64},Int64),arg1,arg2)
    return err
end

function SNESFASCycleIsFine(arg1::SNES{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:SNESFASCycleIsFine,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function SNESFASSetInterpolation(arg1::SNES{Float64},arg2::Integer,arg3::Mat{Float64})
    err = ccall((:SNESFASSetInterpolation,petscRealDouble),PetscErrorCode,(SNES{Float64},Int64,Mat{Float64}),arg1,arg2,arg3)
    return err
end

function SNESFASGetInterpolation(arg1::SNES{Float64},arg2::Integer,arg3::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:SNESFASGetInterpolation,petscRealDouble),PetscErrorCode,(SNES{Float64},Int64,Ptr{Mat{Float64}}),arg1,arg2,arg3)
    return err
end

function SNESFASSetRestriction(arg1::SNES{Float64},arg2::Integer,arg3::Mat{Float64})
    err = ccall((:SNESFASSetRestriction,petscRealDouble),PetscErrorCode,(SNES{Float64},Int64,Mat{Float64}),arg1,arg2,arg3)
    return err
end

function SNESFASGetRestriction(arg1::SNES{Float64},arg2::Integer,arg3::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:SNESFASGetRestriction,petscRealDouble),PetscErrorCode,(SNES{Float64},Int64,Ptr{Mat{Float64}}),arg1,arg2,arg3)
    return err
end

function SNESFASSetInjection(arg1::SNES{Float64},arg2::Integer,arg3::Mat{Float64})
    err = ccall((:SNESFASSetInjection,petscRealDouble),PetscErrorCode,(SNES{Float64},Int64,Mat{Float64}),arg1,arg2,arg3)
    return err
end

function SNESFASGetInjection(arg1::SNES{Float64},arg2::Integer,arg3::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}})
    err = ccall((:SNESFASGetInjection,petscRealDouble),PetscErrorCode,(SNES{Float64},Int64,Ptr{Mat{Float64}}),arg1,arg2,arg3)
    return err
end

function SNESFASSetRScale(arg1::SNES{Float64},arg2::Integer,arg3::Vec{Float64})
    err = ccall((:SNESFASSetRScale,petscRealDouble),PetscErrorCode,(SNES{Float64},Int64,Vec{Float64}),arg1,arg2,arg3)
    return err
end

function SNESFASGetRScale(arg1::SNES{Float64},arg2::Integer,arg3::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:SNESFASGetRScale,petscRealDouble),PetscErrorCode,(SNES{Float64},Int64,Ptr{Vec{Float64}}),arg1,arg2,arg3)
    return err
end

function SNESFASSetContinuation(arg1::SNES{Float64},arg2::PetscBool)
    err = ccall((:SNESFASSetContinuation,petscRealDouble),PetscErrorCode,(SNES{Float64},PetscBool),arg1,arg2)
    return err
end

function SNESFASGetSmoother(arg1::SNES{Float64},arg2::Integer,arg3::Union{Ptr{SNES{Float64}},StridedArray{SNES{Float64}},Ptr{SNES{Float64}},Ref{SNES{Float64}}})
    err = ccall((:SNESFASGetSmoother,petscRealDouble),PetscErrorCode,(SNES{Float64},Int64,Ptr{SNES{Float64}}),arg1,arg2,arg3)
    return err
end

function SNESFASGetSmootherUp(arg1::SNES{Float64},arg2::Integer,arg3::Union{Ptr{SNES{Float64}},StridedArray{SNES{Float64}},Ptr{SNES{Float64}},Ref{SNES{Float64}}})
    err = ccall((:SNESFASGetSmootherUp,petscRealDouble),PetscErrorCode,(SNES{Float64},Int64,Ptr{SNES{Float64}}),arg1,arg2,arg3)
    return err
end

function SNESFASGetSmootherDown(arg1::SNES{Float64},arg2::Integer,arg3::Union{Ptr{SNES{Float64}},StridedArray{SNES{Float64}},Ptr{SNES{Float64}},Ref{SNES{Float64}}})
    err = ccall((:SNESFASGetSmootherDown,petscRealDouble),PetscErrorCode,(SNES{Float64},Int64,Ptr{SNES{Float64}}),arg1,arg2,arg3)
    return err
end

function SNESFASGetCoarseSolve(arg1::SNES{Float64},arg2::Union{Ptr{SNES{Float64}},StridedArray{SNES{Float64}},Ptr{SNES{Float64}},Ref{SNES{Float64}}})
    err = ccall((:SNESFASGetCoarseSolve,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{SNES{Float64}}),arg1,arg2)
    return err
end

function SNESFASFullSetDownSweep(arg1::SNES{Float64},arg2::PetscBool)
    err = ccall((:SNESFASFullSetDownSweep,petscRealDouble),PetscErrorCode,(SNES{Float64},PetscBool),arg1,arg2)
    return err
end

function SNESFASCreateCoarseVec(arg1::SNES{Float64},arg2::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:SNESFASCreateCoarseVec,petscRealDouble),PetscErrorCode,(SNES{Float64},Ptr{Vec{Float64}}),arg1,arg2)
    return err
end

function SNESFASRestrict(arg1::SNES{Float64},arg2::Vec{Float64},arg3::Vec{Float64})
    err = ccall((:SNESFASRestrict,petscRealDouble),PetscErrorCode,(SNES{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3)
    return err
end

function DMSNESCheckFromOptions(arg1::SNES{Float64},arg2::Vec{Float64},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:DMSNESCheckFromOptions,petscRealDouble),PetscErrorCode,(SNES{Float64},Vec{Float64},Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4)
    return err
end

function TSInitializePackage(arg0::Type{Float64})
    err = ccall((:TSInitializePackage,petscRealDouble),PetscErrorCode,())
    return err
end

function TSCreate(arg1::MPI_Comm,arg2::Union{Ptr{TS{Float64}},StridedArray{TS{Float64}},Ptr{TS{Float64}},Ref{TS{Float64}}})
    err = ccall((:TSCreate,petscRealDouble),PetscErrorCode,(comm_type,Ptr{TS{Float64}}),arg1,arg2)
    return err
end

function TSClone(arg1::TS{Float64},arg2::Union{Ptr{TS{Float64}},StridedArray{TS{Float64}},Ptr{TS{Float64}},Ref{TS{Float64}}})
    err = ccall((:TSClone,petscRealDouble),PetscErrorCode,(TS{Float64},Ptr{TS{Float64}}),arg1,arg2)
    return err
end

function TSDestroy(arg1::Union{Ptr{TS{Float64}},StridedArray{TS{Float64}},Ptr{TS{Float64}},Ref{TS{Float64}}})
    err = ccall((:TSDestroy,petscRealDouble),PetscErrorCode,(Ptr{TS{Float64}},),arg1)
    return err
end

function TSSetProblemType(arg1::TS{Float64},arg2::TSProblemType)
    err = ccall((:TSSetProblemType,petscRealDouble),PetscErrorCode,(TS{Float64},TSProblemType),arg1,arg2)
    return err
end

function TSGetProblemType(arg1::TS{Float64},arg2::Union{Ptr{TSProblemType},StridedArray{TSProblemType},Ptr{TSProblemType},Ref{TSProblemType}})
    err = ccall((:TSGetProblemType,petscRealDouble),PetscErrorCode,(TS{Float64},Ptr{TSProblemType}),arg1,arg2)
    return err
end

function TSMonitor(arg1::TS{Float64},arg2::Integer,arg3::Float64,arg4::Vec{Float64})
    err = ccall((:TSMonitor,petscRealDouble),PetscErrorCode,(TS{Float64},Int64,Float64,Vec{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function TSMonitorSet(arg1::TS{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSMonitorSet,petscRealDouble),PetscErrorCode,(TS{Float64},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function TSMonitorCancel(arg1::TS{Float64})
    err = ccall((:TSMonitorCancel,petscRealDouble),PetscErrorCode,(TS{Float64},),arg1)
    return err
end

function TSSetOptionsPrefix(arg1::TS{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:TSSetOptionsPrefix,petscRealDouble),PetscErrorCode,(TS{Float64},Cstring),arg1,arg2)
    return err
end

function TSAppendOptionsPrefix(arg1::TS{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:TSAppendOptionsPrefix,petscRealDouble),PetscErrorCode,(TS{Float64},Cstring),arg1,arg2)
    return err
end

function TSGetOptionsPrefix(arg1::TS{Float64},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:TSGetOptionsPrefix,petscRealDouble),PetscErrorCode,(TS{Float64},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function TSSetFromOptions(arg1::TS{Float64})
    err = ccall((:TSSetFromOptions,petscRealDouble),PetscErrorCode,(TS{Float64},),arg1)
    return err
end

function TSSetUp(arg1::TS{Float64})
    err = ccall((:TSSetUp,petscRealDouble),PetscErrorCode,(TS{Float64},),arg1)
    return err
end

function TSReset(arg1::TS{Float64})
    err = ccall((:TSReset,petscRealDouble),PetscErrorCode,(TS{Float64},),arg1)
    return err
end

function TSSetSolution(arg1::TS{Float64},arg2::Vec{Float64})
    err = ccall((:TSSetSolution,petscRealDouble),PetscErrorCode,(TS{Float64},Vec{Float64}),arg1,arg2)
    return err
end

function TSGetSolution(arg1::TS{Float64},arg2::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:TSGetSolution,petscRealDouble),PetscErrorCode,(TS{Float64},Ptr{Vec{Float64}}),arg1,arg2)
    return err
end

function TSSetSaveTrajectory(arg1::TS{Float64})
    err = ccall((:TSSetSaveTrajectory,petscRealDouble),PetscErrorCode,(TS{Float64},),arg1)
    return err
end

function TSTrajectoryCreate(arg1::MPI_Comm,arg2::Union{Ptr{TSTrajectory{Float64}},StridedArray{TSTrajectory{Float64}},Ptr{TSTrajectory{Float64}},Ref{TSTrajectory{Float64}}})
    err = ccall((:TSTrajectoryCreate,petscRealDouble),PetscErrorCode,(comm_type,Ptr{TSTrajectory{Float64}}),arg1,arg2)
    return err
end

function TSTrajectoryDestroy(arg1::Union{Ptr{TSTrajectory{Float64}},StridedArray{TSTrajectory{Float64}},Ptr{TSTrajectory{Float64}},Ref{TSTrajectory{Float64}}})
    err = ccall((:TSTrajectoryDestroy,petscRealDouble),PetscErrorCode,(Ptr{TSTrajectory{Float64}},),arg1)
    return err
end

function TSTrajectorySetType(arg1::TSTrajectory{Float64},arg2::TSTrajectoryType)
    err = ccall((:TSTrajectorySetType,petscRealDouble),PetscErrorCode,(TSTrajectory{Float64},TSTrajectoryType),arg1,arg2)
    return err
end

function TSTrajectorySet(arg1::TSTrajectory{Float64},arg2::TS{Float64},arg3::Integer,arg4::Float64,arg5::Vec{Float64})
    err = ccall((:TSTrajectorySet,petscRealDouble),PetscErrorCode,(TSTrajectory{Float64},TS{Float64},Int64,Float64,Vec{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSTrajectoryGet(arg1::TSTrajectory{Float64},arg2::TS{Float64},arg3::Integer,arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:TSTrajectoryGet,petscRealDouble),PetscErrorCode,(TSTrajectory{Float64},TS{Float64},Int64,Ptr{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function TSTrajectorySetFromOptions(arg1::TSTrajectory{Float64})
    err = ccall((:TSTrajectorySetFromOptions,petscRealDouble),PetscErrorCode,(TSTrajectory{Float64},),arg1)
    return err
end

function TSTrajectoryRegisterAll(arg0::Type{Float64})
    err = ccall((:TSTrajectoryRegisterAll,petscRealDouble),PetscErrorCode,())
    return err
end

function TSSetCostGradients(arg1::TS{Float64},arg2::Integer,arg3::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}},arg4::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:TSSetCostGradients,petscRealDouble),PetscErrorCode,(TS{Float64},Int64,Ptr{Vec{Float64}},Ptr{Vec{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function TSGetCostGradients(arg1::TS{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Vec{Float64}}},StridedArray{Ptr{Vec{Float64}}},Ptr{Ptr{Vec{Float64}}},Ref{Ptr{Vec{Float64}}}},arg4::Union{Ptr{Ptr{Vec{Float64}}},StridedArray{Ptr{Vec{Float64}}},Ptr{Ptr{Vec{Float64}}},Ref{Ptr{Vec{Float64}}}})
    err = ccall((:TSGetCostGradients,petscRealDouble),PetscErrorCode,(TS{Float64},Ptr{Int64},Ptr{Ptr{Vec{Float64}}},Ptr{Ptr{Vec{Float64}}}),arg1,arg2,arg3,arg4)
    return err
end

function TSSetCostIntegrand(arg1::TS{Float64},arg2::Integer,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSSetCostIntegrand,petscRealDouble),PetscErrorCode,(TS{Float64},Int64,Ptr{Void},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function TSGetCostIntegral(arg1::TS{Float64},arg2::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:TSGetCostIntegral,petscRealDouble),PetscErrorCode,(TS{Float64},Ptr{Vec{Float64}}),arg1,arg2)
    return err
end

function TSAdjointSetRHSJacobian(arg1::TS{Float64},arg2::Mat{Float64},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSAdjointSetRHSJacobian,petscRealDouble),PetscErrorCode,(TS{Float64},Mat{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function TSAdjointSolve(arg1::TS{Float64})
    err = ccall((:TSAdjointSolve,petscRealDouble),PetscErrorCode,(TS{Float64},),arg1)
    return err
end

function TSAdjointSetSteps(arg1::TS{Float64},arg2::Integer)
    err = ccall((:TSAdjointSetSteps,petscRealDouble),PetscErrorCode,(TS{Float64},Int64),arg1,arg2)
    return err
end

function TSAdjointComputeRHSJacobian(arg1::TS{Float64},arg2::Float64,arg3::Vec{Float64},arg4::Mat{Float64})
    err = ccall((:TSAdjointComputeRHSJacobian,petscRealDouble),PetscErrorCode,(TS{Float64},Float64,Vec{Float64},Mat{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function TSAdjointStep(arg1::TS{Float64})
    err = ccall((:TSAdjointStep,petscRealDouble),PetscErrorCode,(TS{Float64},),arg1)
    return err
end

function TSAdjointSetUp(arg1::TS{Float64})
    err = ccall((:TSAdjointSetUp,petscRealDouble),PetscErrorCode,(TS{Float64},),arg1)
    return err
end

function TSAdjointComputeDRDPFunction(arg1::TS{Float64},arg2::Float64,arg3::Vec{Float64},arg4::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:TSAdjointComputeDRDPFunction,petscRealDouble),PetscErrorCode,(TS{Float64},Float64,Vec{Float64},Ptr{Vec{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function TSAdjointComputeDRDYFunction(arg1::TS{Float64},arg2::Float64,arg3::Vec{Float64},arg4::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:TSAdjointComputeDRDYFunction,petscRealDouble),PetscErrorCode,(TS{Float64},Float64,Vec{Float64},Ptr{Vec{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function TSAdjointComputeCostIntegrand(arg1::TS{Float64},arg2::Float64,arg3::Vec{Float64},arg4::Vec{Float64})
    err = ccall((:TSAdjointComputeCostIntegrand,petscRealDouble),PetscErrorCode,(TS{Float64},Float64,Vec{Float64},Vec{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function TSSetDuration(arg1::TS{Float64},arg2::Integer,arg3::Float64)
    err = ccall((:TSSetDuration,petscRealDouble),PetscErrorCode,(TS{Float64},Int64,Float64),arg1,arg2,arg3)
    return err
end

function TSGetDuration(arg1::TS{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:TSGetDuration,petscRealDouble),PetscErrorCode,(TS{Float64},Ptr{Int64},Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function TSSetExactFinalTime(arg1::TS{Float64},arg2::TSExactFinalTimeOption)
    err = ccall((:TSSetExactFinalTime,petscRealDouble),PetscErrorCode,(TS{Float64},TSExactFinalTimeOption),arg1,arg2)
    return err
end

function TSMonitorDefault(arg1::TS{Float64},arg2::Integer,arg3::Float64,arg4::Vec{Float64},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSMonitorDefault,petscRealDouble),PetscErrorCode,(TS{Float64},Int64,Float64,Vec{Float64},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSMonitorDrawCtxCreate(arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Integer,arg9::Union{Ptr{TSMonitorDrawCtx{Float64}},StridedArray{TSMonitorDrawCtx{Float64}},Ptr{TSMonitorDrawCtx{Float64}},Ref{TSMonitorDrawCtx{Float64}}})
    err = ccall((:TSMonitorDrawCtxCreate,petscRealDouble),PetscErrorCode,(comm_type,Cstring,Cstring,Cint,Cint,Cint,Cint,Int64,Ptr{TSMonitorDrawCtx}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
    return err
end

function TSMonitorDrawCtxDestroy(arg1::Union{Ptr{TSMonitorDrawCtx{Float64}},StridedArray{TSMonitorDrawCtx{Float64}},Ptr{TSMonitorDrawCtx{Float64}},Ref{TSMonitorDrawCtx{Float64}}})
    err = ccall((:TSMonitorDrawCtxDestroy,petscRealDouble),PetscErrorCode,(Ptr{TSMonitorDrawCtx},),arg1)
    return err
end

function TSMonitorDrawSolution(arg1::TS{Float64},arg2::Integer,arg3::Float64,arg4::Vec{Float64},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSMonitorDrawSolution,petscRealDouble),PetscErrorCode,(TS{Float64},Int64,Float64,Vec{Float64},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSMonitorDrawSolutionPhase(arg1::TS{Float64},arg2::Integer,arg3::Float64,arg4::Vec{Float64},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSMonitorDrawSolutionPhase,petscRealDouble),PetscErrorCode,(TS{Float64},Int64,Float64,Vec{Float64},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSMonitorDrawError(arg1::TS{Float64},arg2::Integer,arg3::Float64,arg4::Vec{Float64},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSMonitorDrawError,petscRealDouble),PetscErrorCode,(TS{Float64},Int64,Float64,Vec{Float64},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSMonitorSolutionBinary(arg1::TS{Float64},arg2::Integer,arg3::Float64,arg4::Vec{Float64},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSMonitorSolutionBinary,petscRealDouble),PetscErrorCode,(TS{Float64},Int64,Float64,Vec{Float64},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSMonitorSolutionVTK(arg1::TS{Float64},arg2::Integer,arg3::Float64,arg4::Vec{Float64},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSMonitorSolutionVTK,petscRealDouble),PetscErrorCode,(TS{Float64},Int64,Float64,Vec{Float64},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSMonitorSolutionVTKDestroy(arg0::Type{Float64},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSMonitorSolutionVTKDestroy,petscRealDouble),PetscErrorCode,(Ptr{Void},),arg1)
    return err
end

function TSStep(arg1::TS{Float64})
    err = ccall((:TSStep,petscRealDouble),PetscErrorCode,(TS{Float64},),arg1)
    return err
end

function TSEvaluateStep(arg1::TS{Float64},arg2::Integer,arg3::Vec{Float64},arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:TSEvaluateStep,petscRealDouble),PetscErrorCode,(TS{Float64},Int64,Vec{Float64},Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function TSSolve(arg1::TS{Float64},arg2::Vec{Float64})
    err = ccall((:TSSolve,petscRealDouble),PetscErrorCode,(TS{Float64},Vec{Float64}),arg1,arg2)
    return err
end

function TSGetEquationType(arg1::TS{Float64},arg2::Union{Ptr{TSEquationType},StridedArray{TSEquationType},Ptr{TSEquationType},Ref{TSEquationType}})
    err = ccall((:TSGetEquationType,petscRealDouble),PetscErrorCode,(TS{Float64},Ptr{TSEquationType}),arg1,arg2)
    return err
end

function TSSetEquationType(arg1::TS{Float64},arg2::TSEquationType)
    err = ccall((:TSSetEquationType,petscRealDouble),PetscErrorCode,(TS{Float64},TSEquationType),arg1,arg2)
    return err
end

function TSGetConvergedReason(arg1::TS{Float64},arg2::Union{Ptr{TSConvergedReason},StridedArray{TSConvergedReason},Ptr{TSConvergedReason},Ref{TSConvergedReason}})
    err = ccall((:TSGetConvergedReason,petscRealDouble),PetscErrorCode,(TS{Float64},Ptr{TSConvergedReason}),arg1,arg2)
    return err
end

function TSSetConvergedReason(arg1::TS{Float64},arg2::TSConvergedReason)
    err = ccall((:TSSetConvergedReason,petscRealDouble),PetscErrorCode,(TS{Float64},TSConvergedReason),arg1,arg2)
    return err
end

function TSGetSolveTime(arg1::TS{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:TSGetSolveTime,petscRealDouble),PetscErrorCode,(TS{Float64},Ptr{Float64}),arg1,arg2)
    return err
end

function TSGetSNESIterations(arg1::TS{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:TSGetSNESIterations,petscRealDouble),PetscErrorCode,(TS{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function TSGetKSPIterations(arg1::TS{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:TSGetKSPIterations,petscRealDouble),PetscErrorCode,(TS{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function TSGetStepRejections(arg1::TS{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:TSGetStepRejections,petscRealDouble),PetscErrorCode,(TS{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function TSSetMaxStepRejections(arg1::TS{Float64},arg2::Integer)
    err = ccall((:TSSetMaxStepRejections,petscRealDouble),PetscErrorCode,(TS{Float64},Int64),arg1,arg2)
    return err
end

function TSGetSNESFailures(arg1::TS{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:TSGetSNESFailures,petscRealDouble),PetscErrorCode,(TS{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function TSSetMaxSNESFailures(arg1::TS{Float64},arg2::Integer)
    err = ccall((:TSSetMaxSNESFailures,petscRealDouble),PetscErrorCode,(TS{Float64},Int64),arg1,arg2)
    return err
end

function TSSetErrorIfStepFails(arg1::TS{Float64},arg2::PetscBool)
    err = ccall((:TSSetErrorIfStepFails,petscRealDouble),PetscErrorCode,(TS{Float64},PetscBool),arg1,arg2)
    return err
end

function TSRollBack(arg1::TS{Float64})
    err = ccall((:TSRollBack,petscRealDouble),PetscErrorCode,(TS{Float64},),arg1)
    return err
end

function TSGetTotalSteps(arg1::TS{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:TSGetTotalSteps,petscRealDouble),PetscErrorCode,(TS{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function TSGetStages(arg1::TS{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Vec{Float64}}},StridedArray{Ptr{Vec{Float64}}},Ptr{Ptr{Vec{Float64}}},Ref{Ptr{Vec{Float64}}}})
    err = ccall((:TSGetStages,petscRealDouble),PetscErrorCode,(TS{Float64},Ptr{Int64},Ptr{Ptr{Vec{Float64}}}),arg1,arg2,arg3)
    return err
end

function TSSetInitialTimeStep(arg1::TS{Float64},arg2::Float64,arg3::Float64)
    err = ccall((:TSSetInitialTimeStep,petscRealDouble),PetscErrorCode,(TS{Float64},Float64,Float64),arg1,arg2,arg3)
    return err
end

function TSGetTimeStep(arg1::TS{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:TSGetTimeStep,petscRealDouble),PetscErrorCode,(TS{Float64},Ptr{Float64}),arg1,arg2)
    return err
end

function TSGetTime(arg1::TS{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:TSGetTime,petscRealDouble),PetscErrorCode,(TS{Float64},Ptr{Float64}),arg1,arg2)
    return err
end

function TSSetTime(arg1::TS{Float64},arg2::Float64)
    err = ccall((:TSSetTime,petscRealDouble),PetscErrorCode,(TS{Float64},Float64),arg1,arg2)
    return err
end

function TSGetTimeStepNumber(arg1::TS{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:TSGetTimeStepNumber,petscRealDouble),PetscErrorCode,(TS{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function TSSetTimeStep(arg1::TS{Float64},arg2::Float64)
    err = ccall((:TSSetTimeStep,petscRealDouble),PetscErrorCode,(TS{Float64},Float64),arg1,arg2)
    return err
end

function TSGetPrevTime(arg1::TS{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:TSGetPrevTime,petscRealDouble),PetscErrorCode,(TS{Float64},Ptr{Float64}),arg1,arg2)
    return err
end

function TSSetRHSFunction(arg1::TS{Float64},arg2::Vec{Float64},arg3::TSRHSFunction,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSSetRHSFunction,petscRealDouble),PetscErrorCode,(TS{Float64},Vec{Float64},TSRHSFunction,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function TSGetRHSFunction(arg1::TS{Float64},arg2::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}},arg3::Union{Ptr{TSRHSFunction},StridedArray{TSRHSFunction},Ptr{TSRHSFunction},Ref{TSRHSFunction}},arg4::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:TSGetRHSFunction,petscRealDouble),PetscErrorCode,(TS{Float64},Ptr{Vec{Float64}},Ptr{TSRHSFunction},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4)
    return err
end

function TSSetRHSJacobian(arg1::TS{Float64},arg2::Mat{Float64},arg3::Mat{Float64},arg4::TSRHSJacobian,arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSSetRHSJacobian,petscRealDouble),PetscErrorCode,(TS{Float64},Mat{Float64},Mat{Float64},TSRHSJacobian,Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSGetRHSJacobian(arg1::TS{Float64},arg2::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}},arg3::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}},arg4::Union{Ptr{TSRHSJacobian},StridedArray{TSRHSJacobian},Ptr{TSRHSJacobian},Ref{TSRHSJacobian}},arg5::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:TSGetRHSJacobian,petscRealDouble),PetscErrorCode,(TS{Float64},Ptr{Mat{Float64}},Ptr{Mat{Float64}},Ptr{TSRHSJacobian},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSRHSJacobianSetReuse(arg1::TS{Float64},arg2::PetscBool)
    err = ccall((:TSRHSJacobianSetReuse,petscRealDouble),PetscErrorCode,(TS{Float64},PetscBool),arg1,arg2)
    return err
end

function TSSetSolutionFunction(arg1::TS{Float64},arg2::TSSolutionFunction,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSSetSolutionFunction,petscRealDouble),PetscErrorCode,(TS{Float64},TSSolutionFunction,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function TSSetForcingFunction(arg1::TS{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSSetForcingFunction,petscRealDouble),PetscErrorCode,(TS{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function TSSetIFunction(arg1::TS{Float64},arg2::Vec{Float64},arg3::TSIFunction,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSSetIFunction,petscRealDouble),PetscErrorCode,(TS{Float64},Vec{Float64},TSIFunction,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function TSGetIFunction(arg1::TS{Float64},arg2::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}},arg3::Union{Ptr{TSIFunction},StridedArray{TSIFunction},Ptr{TSIFunction},Ref{TSIFunction}},arg4::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:TSGetIFunction,petscRealDouble),PetscErrorCode,(TS{Float64},Ptr{Vec{Float64}},Ptr{TSIFunction},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4)
    return err
end

function TSSetIJacobian(arg1::TS{Float64},arg2::Mat{Float64},arg3::Mat{Float64},arg4::TSIJacobian,arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSSetIJacobian,petscRealDouble),PetscErrorCode,(TS{Float64},Mat{Float64},Mat{Float64},TSIJacobian,Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSGetIJacobian(arg1::TS{Float64},arg2::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}},arg3::Union{Ptr{Mat{Float64}},StridedArray{Mat{Float64}},Ptr{Mat{Float64}},Ref{Mat{Float64}}},arg4::Union{Ptr{TSIJacobian},StridedArray{TSIJacobian},Ptr{TSIJacobian},Ref{TSIJacobian}},arg5::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:TSGetIJacobian,petscRealDouble),PetscErrorCode,(TS{Float64},Ptr{Mat{Float64}},Ptr{Mat{Float64}},Ptr{TSIJacobian},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSComputeRHSFunctionLinear(arg1::TS{Float64},arg2::Float64,arg3::Vec{Float64},arg4::Vec{Float64},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSComputeRHSFunctionLinear,petscRealDouble),PetscErrorCode,(TS{Float64},Float64,Vec{Float64},Vec{Float64},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSComputeRHSJacobianConstant(arg1::TS{Float64},arg2::Float64,arg3::Vec{Float64},arg4::Mat{Float64},arg5::Mat{Float64},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSComputeRHSJacobianConstant,petscRealDouble),PetscErrorCode,(TS{Float64},Float64,Vec{Float64},Mat{Float64},Mat{Float64},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function TSComputeIFunctionLinear(arg1::TS{Float64},arg2::Float64,arg3::Vec{Float64},arg4::Vec{Float64},arg5::Vec{Float64},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSComputeIFunctionLinear,petscRealDouble),PetscErrorCode,(TS{Float64},Float64,Vec{Float64},Vec{Float64},Vec{Float64},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function TSComputeIJacobianConstant(arg1::TS{Float64},arg2::Float64,arg3::Vec{Float64},arg4::Vec{Float64},arg5::Float64,arg6::Mat{Float64},arg7::Mat{Float64},arg8::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSComputeIJacobianConstant,petscRealDouble),PetscErrorCode,(TS{Float64},Float64,Vec{Float64},Vec{Float64},Float64,Mat{Float64},Mat{Float64},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function TSComputeSolutionFunction(arg1::TS{Float64},arg2::Float64,arg3::Vec{Float64})
    err = ccall((:TSComputeSolutionFunction,petscRealDouble),PetscErrorCode,(TS{Float64},Float64,Vec{Float64}),arg1,arg2,arg3)
    return err
end

function TSComputeForcingFunction(arg1::TS{Float64},arg2::Float64,arg3::Vec{Float64})
    err = ccall((:TSComputeForcingFunction,petscRealDouble),PetscErrorCode,(TS{Float64},Float64,Vec{Float64}),arg1,arg2,arg3)
    return err
end

function TSComputeIJacobianDefaultColor(arg1::TS{Float64},arg2::Float64,arg3::Vec{Float64},arg4::Vec{Float64},arg5::Float64,arg6::Mat{Float64},arg7::Mat{Float64},arg8::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSComputeIJacobianDefaultColor,petscRealDouble),PetscErrorCode,(TS{Float64},Float64,Vec{Float64},Vec{Float64},Float64,Mat{Float64},Mat{Float64},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function TSSetPreStep(arg1::TS{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSSetPreStep,petscRealDouble),PetscErrorCode,(TS{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function TSSetPreStage(arg1::TS{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSSetPreStage,petscRealDouble),PetscErrorCode,(TS{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function TSSetPostStage(arg1::TS{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSSetPostStage,petscRealDouble),PetscErrorCode,(TS{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function TSSetPostStep(arg1::TS{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSSetPostStep,petscRealDouble),PetscErrorCode,(TS{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function TSPreStep(arg1::TS{Float64})
    err = ccall((:TSPreStep,petscRealDouble),PetscErrorCode,(TS{Float64},),arg1)
    return err
end

function TSPreStage(arg1::TS{Float64},arg2::Float64)
    err = ccall((:TSPreStage,petscRealDouble),PetscErrorCode,(TS{Float64},Float64),arg1,arg2)
    return err
end

function TSPostStage(arg1::TS{Float64},arg2::Float64,arg3::Integer,arg4::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:TSPostStage,petscRealDouble),PetscErrorCode,(TS{Float64},Float64,Int64,Ptr{Vec{Float64}}),arg1,arg2,arg3,arg4)
    return err
end

function TSPostStep(arg1::TS{Float64})
    err = ccall((:TSPostStep,petscRealDouble),PetscErrorCode,(TS{Float64},),arg1)
    return err
end

function TSSetRetainStages(arg1::TS{Float64},arg2::PetscBool)
    err = ccall((:TSSetRetainStages,petscRealDouble),PetscErrorCode,(TS{Float64},PetscBool),arg1,arg2)
    return err
end

function TSInterpolate(arg1::TS{Float64},arg2::Float64,arg3::Vec{Float64})
    err = ccall((:TSInterpolate,petscRealDouble),PetscErrorCode,(TS{Float64},Float64,Vec{Float64}),arg1,arg2,arg3)
    return err
end

function TSSetTolerances(arg1::TS{Float64},arg2::Float64,arg3::Vec{Float64},arg4::Float64,arg5::Vec{Float64})
    err = ccall((:TSSetTolerances,petscRealDouble),PetscErrorCode,(TS{Float64},Float64,Vec{Float64},Float64,Vec{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSGetTolerances(arg1::TS{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:TSGetTolerances,petscRealDouble),PetscErrorCode,(TS{Float64},Ptr{Float64},Ptr{Vec{Float64}},Ptr{Float64},Ptr{Vec{Float64}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSErrorWeightedNormInfinity(arg1::TS{Float64},arg2::Vec{Float64},arg3::Vec{Float64},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:TSErrorWeightedNormInfinity,petscRealDouble),PetscErrorCode,(TS{Float64},Vec{Float64},Vec{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function TSErrorWeightedNorm2(arg1::TS{Float64},arg2::Vec{Float64},arg3::Vec{Float64},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:TSErrorWeightedNorm2,petscRealDouble),PetscErrorCode,(TS{Float64},Vec{Float64},Vec{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function TSErrorWeightedNorm(arg1::TS{Float64},arg2::Vec{Float64},arg3::Vec{Float64},arg4::NormType,arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:TSErrorWeightedNorm,petscRealDouble),PetscErrorCode,(TS{Float64},Vec{Float64},Vec{Float64},NormType,Ptr{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSSetCFLTimeLocal(arg1::TS{Float64},arg2::Float64)
    err = ccall((:TSSetCFLTimeLocal,petscRealDouble),PetscErrorCode,(TS{Float64},Float64),arg1,arg2)
    return err
end

function TSGetCFLTime(arg1::TS{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:TSGetCFLTime,petscRealDouble),PetscErrorCode,(TS{Float64},Ptr{Float64}),arg1,arg2)
    return err
end

function TSPseudoSetTimeStep(arg1::TS{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSPseudoSetTimeStep,petscRealDouble),PetscErrorCode,(TS{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function TSPseudoTimeStepDefault(arg1::TS{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSPseudoTimeStepDefault,petscRealDouble),PetscErrorCode,(TS{Float64},Ptr{Float64},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function TSPseudoComputeTimeStep(arg1::TS{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:TSPseudoComputeTimeStep,petscRealDouble),PetscErrorCode,(TS{Float64},Ptr{Float64}),arg1,arg2)
    return err
end

function TSPseudoSetMaxTimeStep(arg1::TS{Float64},arg2::Float64)
    err = ccall((:TSPseudoSetMaxTimeStep,petscRealDouble),PetscErrorCode,(TS{Float64},Float64),arg1,arg2)
    return err
end

function TSPseudoSetVerifyTimeStep(arg1::TS{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSPseudoSetVerifyTimeStep,petscRealDouble),PetscErrorCode,(TS{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function TSPseudoVerifyTimeStepDefault(arg1::TS{Float64},arg2::Vec{Float64},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:TSPseudoVerifyTimeStepDefault,petscRealDouble),PetscErrorCode,(TS{Float64},Vec{Float64},Ptr{Void},Ptr{Float64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSPseudoVerifyTimeStep(arg1::TS{Float64},arg2::Vec{Float64},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:TSPseudoVerifyTimeStep,petscRealDouble),PetscErrorCode,(TS{Float64},Vec{Float64},Ptr{Float64},Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function TSPseudoSetTimeStepIncrement(arg1::TS{Float64},arg2::Float64)
    err = ccall((:TSPseudoSetTimeStepIncrement,petscRealDouble),PetscErrorCode,(TS{Float64},Float64),arg1,arg2)
    return err
end

function TSPseudoIncrementDtFromInitialDt(arg1::TS{Float64})
    err = ccall((:TSPseudoIncrementDtFromInitialDt,petscRealDouble),PetscErrorCode,(TS{Float64},),arg1)
    return err
end

function TSPythonSetType(arg1::TS{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:TSPythonSetType,petscRealDouble),PetscErrorCode,(TS{Float64},Cstring),arg1,arg2)
    return err
end

function TSComputeRHSFunction(arg1::TS{Float64},arg2::Float64,arg3::Vec{Float64},arg4::Vec{Float64})
    err = ccall((:TSComputeRHSFunction,petscRealDouble),PetscErrorCode,(TS{Float64},Float64,Vec{Float64},Vec{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function TSComputeRHSJacobian(arg1::TS{Float64},arg2::Float64,arg3::Vec{Float64},arg4::Mat{Float64},arg5::Mat{Float64})
    err = ccall((:TSComputeRHSJacobian,petscRealDouble),PetscErrorCode,(TS{Float64},Float64,Vec{Float64},Mat{Float64},Mat{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSComputeIFunction(arg1::TS{Float64},arg2::Float64,arg3::Vec{Float64},arg4::Vec{Float64},arg5::Vec{Float64},arg6::PetscBool)
    err = ccall((:TSComputeIFunction,petscRealDouble),PetscErrorCode,(TS{Float64},Float64,Vec{Float64},Vec{Float64},Vec{Float64},PetscBool),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function TSComputeIJacobian(arg1::TS{Float64},arg2::Float64,arg3::Vec{Float64},arg4::Vec{Float64},arg5::Float64,arg6::Mat{Float64},arg7::Mat{Float64},arg8::PetscBool)
    err = ccall((:TSComputeIJacobian,petscRealDouble),PetscErrorCode,(TS{Float64},Float64,Vec{Float64},Vec{Float64},Float64,Mat{Float64},Mat{Float64},PetscBool),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function TSComputeLinearStability(arg1::TS{Float64},arg2::Float64,arg3::Float64,arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:TSComputeLinearStability,petscRealDouble),PetscErrorCode,(TS{Float64},Float64,Float64,Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSVISetVariableBounds(arg1::TS{Float64},arg2::Vec{Float64},arg3::Vec{Float64})
    err = ccall((:TSVISetVariableBounds,petscRealDouble),PetscErrorCode,(TS{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3)
    return err
end

function DMTSSetRHSFunction(arg1::DM{Float64},arg2::TSRHSFunction,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMTSSetRHSFunction,petscRealDouble),PetscErrorCode,(DM{Float64},TSRHSFunction,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMTSGetRHSFunction(arg1::DM{Float64},arg2::Union{Ptr{TSRHSFunction},StridedArray{TSRHSFunction},Ptr{TSRHSFunction},Ref{TSRHSFunction}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:DMTSGetRHSFunction,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{TSRHSFunction},Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function DMTSSetRHSJacobian(arg1::DM{Float64},arg2::TSRHSJacobian,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMTSSetRHSJacobian,petscRealDouble),PetscErrorCode,(DM{Float64},TSRHSJacobian,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMTSGetRHSJacobian(arg1::DM{Float64},arg2::Union{Ptr{TSRHSJacobian},StridedArray{TSRHSJacobian},Ptr{TSRHSJacobian},Ref{TSRHSJacobian}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:DMTSGetRHSJacobian,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{TSRHSJacobian},Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function DMTSSetIFunction(arg1::DM{Float64},arg2::TSIFunction,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMTSSetIFunction,petscRealDouble),PetscErrorCode,(DM{Float64},TSIFunction,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMTSGetIFunction(arg1::DM{Float64},arg2::Union{Ptr{TSIFunction},StridedArray{TSIFunction},Ptr{TSIFunction},Ref{TSIFunction}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:DMTSGetIFunction,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{TSIFunction},Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function DMTSSetIJacobian(arg1::DM{Float64},arg2::TSIJacobian,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMTSSetIJacobian,petscRealDouble),PetscErrorCode,(DM{Float64},TSIJacobian,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMTSGetIJacobian(arg1::DM{Float64},arg2::Union{Ptr{TSIJacobian},StridedArray{TSIJacobian},Ptr{TSIJacobian},Ref{TSIJacobian}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:DMTSGetIJacobian,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{TSIJacobian},Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function DMTSSetSolutionFunction(arg1::DM{Float64},arg2::TSSolutionFunction,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMTSSetSolutionFunction,petscRealDouble),PetscErrorCode,(DM{Float64},TSSolutionFunction,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMTSGetSolutionFunction(arg1::DM{Float64},arg2::Union{Ptr{TSSolutionFunction},StridedArray{TSSolutionFunction},Ptr{TSSolutionFunction},Ref{TSSolutionFunction}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:DMTSGetSolutionFunction,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{TSSolutionFunction},Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function DMTSSetForcingFunction(arg1::DM{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMTSSetForcingFunction,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMTSGetForcingFunction(arg1::DM{Float64},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:DMTSGetForcingFunction,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function DMTSGetMinRadius(arg1::DM{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:DMTSGetMinRadius,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Float64}),arg1,arg2)
    return err
end

function DMTSSetMinRadius(arg1::DM{Float64},arg2::Float64)
    err = ccall((:DMTSSetMinRadius,petscRealDouble),PetscErrorCode,(DM{Float64},Float64),arg1,arg2)
    return err
end

function DMTSCheckFromOptions(arg1::TS{Float64},arg2::Vec{Float64},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:DMTSCheckFromOptions,petscRealDouble),PetscErrorCode,(TS{Float64},Vec{Float64},Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4)
    return err
end

function DMTSSetIFunctionLocal(arg1::DM{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMTSSetIFunctionLocal,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMTSSetIJacobianLocal(arg1::DM{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMTSSetIJacobianLocal,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMTSSetRHSFunctionLocal(arg1::DM{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMTSSetRHSFunctionLocal,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMTSSetIFunctionSerialize(arg1::DM{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMTSSetIFunctionSerialize,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMTSSetIJacobianSerialize(arg1::DM{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMTSSetIJacobianSerialize,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMDATSSetRHSFunctionLocal(arg1::DM{Float64},arg2::InsertMode,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDATSSetRHSFunctionLocal,petscRealDouble),PetscErrorCode,(DM{Float64},InsertMode,Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function DMDATSSetRHSJacobianLocal(arg1::DM{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDATSSetRHSJacobianLocal,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMDATSSetIFunctionLocal(arg1::DM{Float64},arg2::InsertMode,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDATSSetIFunctionLocal,petscRealDouble),PetscErrorCode,(DM{Float64},InsertMode,Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function DMDATSSetIJacobianLocal(arg1::DM{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMDATSSetIJacobianLocal,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function DMPlexTSGetGeometryFVM(arg1::DM{Float64},arg2::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}},arg3::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:DMPlexTSGetGeometryFVM,petscRealDouble),PetscErrorCode,(DM{Float64},Ptr{Vec{Float64}},Ptr{Vec{Float64}},Ptr{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function TSMonitorDMDARayDestroy(arg0::Type{Float64},arg1::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:TSMonitorDMDARayDestroy,petscRealDouble),PetscErrorCode,(Ptr{Ptr{Void}},),arg1)
    return err
end

function TSMonitorDMDARay(arg1::TS{Float64},arg2::Integer,arg3::Float64,arg4::Vec{Float64},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSMonitorDMDARay,petscRealDouble),PetscErrorCode,(TS{Float64},Int64,Float64,Vec{Float64},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSMonitorLGDMDARay(arg1::TS{Float64},arg2::Integer,arg3::Float64,arg4::Vec{Float64},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSMonitorLGDMDARay,petscRealDouble),PetscErrorCode,(TS{Float64},Int64,Float64,Vec{Float64},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSGetType(arg1::TS{Float64},arg2::Union{Ptr{TSType},StridedArray{TSType},Ptr{TSType},Ref{TSType}})
    err = ccall((:TSGetType,petscRealDouble),PetscErrorCode,(TS{Float64},Ptr{TSType}),arg1,arg2)
    return err
end

function TSSetType(arg1::TS{Float64},arg2::TSType)
    err = ccall((:TSSetType,petscRealDouble),PetscErrorCode,(TS{Float64},TSType),arg1,arg2)
    return err
end

function TSRegister(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSRegister,petscRealDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function TSGetSNES(arg1::TS{Float64},arg2::Union{Ptr{SNES{Float64}},StridedArray{SNES{Float64}},Ptr{SNES{Float64}},Ref{SNES{Float64}}})
    err = ccall((:TSGetSNES,petscRealDouble),PetscErrorCode,(TS{Float64},Ptr{SNES{Float64}}),arg1,arg2)
    return err
end

function TSSetSNES(arg1::TS{Float64},arg2::SNES{Float64})
    err = ccall((:TSSetSNES,petscRealDouble),PetscErrorCode,(TS{Float64},SNES{Float64}),arg1,arg2)
    return err
end

function TSGetKSP(arg1::TS{Float64},arg2::Union{Ptr{KSP{Float64}},StridedArray{KSP{Float64}},Ptr{KSP{Float64}},Ref{KSP{Float64}}})
    err = ccall((:TSGetKSP,petscRealDouble),PetscErrorCode,(TS{Float64},Ptr{KSP{Float64}}),arg1,arg2)
    return err
end

function TSView(arg1::TS{Float64},arg2::PetscViewer{Float64})
    err = ccall((:TSView,petscRealDouble),PetscErrorCode,(TS{Float64},PetscViewer{Float64}),arg1,arg2)
    return err
end

function TSLoad(arg1::TS{Float64},arg2::PetscViewer{Float64})
    err = ccall((:TSLoad,petscRealDouble),PetscErrorCode,(TS{Float64},PetscViewer{Float64}),arg1,arg2)
    return err
end

function TSGetApplicationContext(arg1::TS{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSGetApplicationContext,petscRealDouble),PetscErrorCode,(TS{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function TSMonitorLGCtxCreate(arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Integer,arg9::Union{Ptr{TSMonitorLGCtx{Float64}},StridedArray{TSMonitorLGCtx{Float64}},Ptr{TSMonitorLGCtx{Float64}},Ref{TSMonitorLGCtx{Float64}}})
    err = ccall((:TSMonitorLGCtxCreate,petscRealDouble),PetscErrorCode,(comm_type,Cstring,Cstring,Cint,Cint,Cint,Cint,Int64,Ptr{TSMonitorLGCtx}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
    return err
end

function TSMonitorLGCtxDestroy(arg1::Union{Ptr{TSMonitorLGCtx{Float64}},StridedArray{TSMonitorLGCtx{Float64}},Ptr{TSMonitorLGCtx{Float64}},Ref{TSMonitorLGCtx{Float64}}})
    err = ccall((:TSMonitorLGCtxDestroy,petscRealDouble),PetscErrorCode,(Ptr{TSMonitorLGCtx},),arg1)
    return err
end

function TSMonitorLGTimeStep(arg1::TS{Float64},arg2::Integer,arg3::Float64,arg4::Vec{Float64},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSMonitorLGTimeStep,petscRealDouble),PetscErrorCode,(TS{Float64},Int64,Float64,Vec{Float64},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSMonitorLGSolution(arg1::TS{Float64},arg2::Integer,arg3::Float64,arg4::Vec{Float64},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSMonitorLGSolution,petscRealDouble),PetscErrorCode,(TS{Float64},Int64,Float64,Vec{Float64},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSMonitorLGSetVariableNames(arg1::TS{Float64},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:TSMonitorLGSetVariableNames,petscRealDouble),PetscErrorCode,(TS{Float64},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function TSMonitorLGGetVariableNames(arg1::TS{Float64},arg2::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}})
    err = ccall((:TSMonitorLGGetVariableNames,petscRealDouble),PetscErrorCode,(TS{Float64},Ptr{Ptr{Ptr{UInt8}}}),arg1,arg2)
    return err
end

function TSMonitorLGCtxSetVariableNames(arg1::TSMonitorLGCtx{Float64},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:TSMonitorLGCtxSetVariableNames,petscRealDouble),PetscErrorCode,(TSMonitorLGCtx,Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function TSMonitorLGSetDisplayVariables(arg1::TS{Float64},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:TSMonitorLGSetDisplayVariables,petscRealDouble),PetscErrorCode,(TS{Float64},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function TSMonitorLGCtxSetDisplayVariables(arg1::TSMonitorLGCtx{Float64},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:TSMonitorLGCtxSetDisplayVariables,petscRealDouble),PetscErrorCode,(TSMonitorLGCtx,Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function TSMonitorLGSetTransform(arg1::TS{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSMonitorLGSetTransform,petscRealDouble),PetscErrorCode,(TS{Float64},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function TSMonitorLGCtxSetTransform(arg1::TSMonitorLGCtx{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSMonitorLGCtxSetTransform,petscRealDouble),PetscErrorCode,(TSMonitorLGCtx,Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function TSMonitorLGError(arg1::TS{Float64},arg2::Integer,arg3::Float64,arg4::Vec{Float64},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSMonitorLGError,petscRealDouble),PetscErrorCode,(TS{Float64},Int64,Float64,Vec{Float64},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSMonitorLGSNESIterations(arg1::TS{Float64},arg2::Integer,arg3::Float64,arg4::Vec{Float64},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSMonitorLGSNESIterations,petscRealDouble),PetscErrorCode,(TS{Float64},Int64,Float64,Vec{Float64},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSMonitorLGKSPIterations(arg1::TS{Float64},arg2::Integer,arg3::Float64,arg4::Vec{Float64},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSMonitorLGKSPIterations,petscRealDouble),PetscErrorCode,(TS{Float64},Int64,Float64,Vec{Float64},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSMonitorEnvelopeCtxCreate(arg1::TS{Float64},arg2::Union{Ptr{TSMonitorEnvelopeCtx{Float64}},StridedArray{TSMonitorEnvelopeCtx{Float64}},Ptr{TSMonitorEnvelopeCtx{Float64}},Ref{TSMonitorEnvelopeCtx{Float64}}})
    err = ccall((:TSMonitorEnvelopeCtxCreate,petscRealDouble),PetscErrorCode,(TS{Float64},Ptr{TSMonitorEnvelopeCtx}),arg1,arg2)
    return err
end

function TSMonitorEnvelope(arg1::TS{Float64},arg2::Integer,arg3::Float64,arg4::Vec{Float64},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSMonitorEnvelope,petscRealDouble),PetscErrorCode,(TS{Float64},Int64,Float64,Vec{Float64},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSMonitorEnvelopeGetBounds(arg1::TS{Float64},arg2::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}},arg3::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:TSMonitorEnvelopeGetBounds,petscRealDouble),PetscErrorCode,(TS{Float64},Ptr{Vec{Float64}},Ptr{Vec{Float64}}),arg1,arg2,arg3)
    return err
end

function TSMonitorEnvelopeCtxDestroy(arg1::Union{Ptr{TSMonitorEnvelopeCtx{Float64}},StridedArray{TSMonitorEnvelopeCtx{Float64}},Ptr{TSMonitorEnvelopeCtx{Float64}},Ref{TSMonitorEnvelopeCtx{Float64}}})
    err = ccall((:TSMonitorEnvelopeCtxDestroy,petscRealDouble),PetscErrorCode,(Ptr{TSMonitorEnvelopeCtx},),arg1)
    return err
end

function TSMonitorSPEigCtxCreate(arg1::MPI_Comm,arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Integer,arg9::Union{Ptr{TSMonitorSPEigCtx{Float64}},StridedArray{TSMonitorSPEigCtx{Float64}},Ptr{TSMonitorSPEigCtx{Float64}},Ref{TSMonitorSPEigCtx{Float64}}})
    err = ccall((:TSMonitorSPEigCtxCreate,petscRealDouble),PetscErrorCode,(comm_type,Cstring,Cstring,Cint,Cint,Cint,Cint,Int64,Ptr{TSMonitorSPEigCtx}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
    return err
end

function TSMonitorSPEigCtxDestroy(arg1::Union{Ptr{TSMonitorSPEigCtx{Float64}},StridedArray{TSMonitorSPEigCtx{Float64}},Ptr{TSMonitorSPEigCtx{Float64}},Ref{TSMonitorSPEigCtx{Float64}}})
    err = ccall((:TSMonitorSPEigCtxDestroy,petscRealDouble),PetscErrorCode,(Ptr{TSMonitorSPEigCtx},),arg1)
    return err
end

function TSMonitorSPEig(arg1::TS{Float64},arg2::Integer,arg3::Float64,arg4::Vec{Float64},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSMonitorSPEig,petscRealDouble),PetscErrorCode,(TS{Float64},Int64,Float64,Vec{Float64},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TSSetEventMonitor(arg1::TS{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg7::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSSetEventMonitor,petscRealDouble),PetscErrorCode,(TS{Float64},Int64,Ptr{Int64},Ptr{PetscBool},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function TSSetEventTolerances(arg1::TS{Float64},arg2::Float64,arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:TSSetEventTolerances,petscRealDouble),PetscErrorCode,(TS{Float64},Float64,Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function TSSSPSetType(arg1::TS{Float64},arg2::TSSSPType)
    err = ccall((:TSSSPSetType,petscRealDouble),PetscErrorCode,(TS{Float64},TSSSPType),arg1,arg2)
    return err
end

function TSSSPGetType(arg1::TS{Float64},arg2::Union{Ptr{TSSSPType},StridedArray{TSSSPType},Ptr{TSSSPType},Ref{TSSSPType}})
    err = ccall((:TSSSPGetType,petscRealDouble),PetscErrorCode,(TS{Float64},Ptr{TSSSPType}),arg1,arg2)
    return err
end

function TSSSPSetNumStages(arg1::TS{Float64},arg2::Integer)
    err = ccall((:TSSSPSetNumStages,petscRealDouble),PetscErrorCode,(TS{Float64},Int64),arg1,arg2)
    return err
end

function TSSSPGetNumStages(arg1::TS{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:TSSSPGetNumStages,petscRealDouble),PetscErrorCode,(TS{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function TSSSPFinalizePackage(arg0::Type{Float64})
    err = ccall((:TSSSPFinalizePackage,petscRealDouble),PetscErrorCode,())
    return err
end

function TSSSPInitializePackage(arg0::Type{Float64})
    err = ccall((:TSSSPInitializePackage,petscRealDouble),PetscErrorCode,())
    return err
end

function TSGetAdapt(arg1::TS{Float64},arg2::Union{Ptr{TSAdapt{Float64}},StridedArray{TSAdapt{Float64}},Ptr{TSAdapt{Float64}},Ref{TSAdapt{Float64}}})
    err = ccall((:TSGetAdapt,petscRealDouble),PetscErrorCode,(TS{Float64},Ptr{TSAdapt{Float64}}),arg1,arg2)
    return err
end

function TSAdaptRegister(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSAdaptRegister,petscRealDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function TSAdaptInitializePackage(arg0::Type{Float64})
    err = ccall((:TSAdaptInitializePackage,petscRealDouble),PetscErrorCode,())
    return err
end

function TSAdaptFinalizePackage(arg0::Type{Float64})
    err = ccall((:TSAdaptFinalizePackage,petscRealDouble),PetscErrorCode,())
    return err
end

function TSAdaptCreate(arg1::MPI_Comm,arg2::Union{Ptr{TSAdapt{Float64}},StridedArray{TSAdapt{Float64}},Ptr{TSAdapt{Float64}},Ref{TSAdapt{Float64}}})
    err = ccall((:TSAdaptCreate,petscRealDouble),PetscErrorCode,(comm_type,Ptr{TSAdapt{Float64}}),arg1,arg2)
    return err
end

function TSAdaptSetType(arg1::TSAdapt{Float64},arg2::TSAdaptType)
    err = ccall((:TSAdaptSetType,petscRealDouble),PetscErrorCode,(TSAdapt{Float64},TSAdaptType),arg1,arg2)
    return err
end

function TSAdaptSetOptionsPrefix(arg1::TSAdapt{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:TSAdaptSetOptionsPrefix,petscRealDouble),PetscErrorCode,(TSAdapt{Float64},Cstring),arg1,arg2)
    return err
end

function TSAdaptCandidatesClear(arg1::TSAdapt{Float64})
    err = ccall((:TSAdaptCandidatesClear,petscRealDouble),PetscErrorCode,(TSAdapt{Float64},),arg1)
    return err
end

function TSAdaptCandidateAdd(arg1::TSAdapt{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg3::Integer,arg4::Integer,arg5::Float64,arg6::Float64,arg7::PetscBool)
    err = ccall((:TSAdaptCandidateAdd,petscRealDouble),PetscErrorCode,(TSAdapt{Float64},Cstring,Int64,Int64,Float64,Float64,PetscBool),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function TSAdaptCandidatesGet(arg1::TSAdapt{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg5::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg6::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}})
    err = ccall((:TSAdaptCandidatesGet,petscRealDouble),PetscErrorCode,(TSAdapt{Float64},Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}},Ptr{Ptr{Float64}},Ptr{Ptr{Float64}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function TSAdaptChoose(arg1::TSAdapt{Float64},arg2::TS{Float64},arg3::Float64,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg6::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:TSAdaptChoose,petscRealDouble),PetscErrorCode,(TSAdapt{Float64},TS{Float64},Float64,Ptr{Int64},Ptr{Float64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function TSAdaptCheckStage(arg1::TSAdapt{Float64},arg2::TS{Float64},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:TSAdaptCheckStage,petscRealDouble),PetscErrorCode,(TSAdapt{Float64},TS{Float64},Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function TSAdaptView(arg1::TSAdapt{Float64},arg2::PetscViewer{Float64})
    err = ccall((:TSAdaptView,petscRealDouble),PetscErrorCode,(TSAdapt{Float64},PetscViewer{Float64}),arg1,arg2)
    return err
end

function TSAdaptLoad(arg1::TSAdapt{Float64},arg2::PetscViewer{Float64})
    err = ccall((:TSAdaptLoad,petscRealDouble),PetscErrorCode,(TSAdapt{Float64},PetscViewer{Float64}),arg1,arg2)
    return err
end

function TSAdaptSetFromOptions(arg1::Union{Ptr{PetscOptions{Float64}},StridedArray{PetscOptions{Float64}},Ptr{PetscOptions{Float64}},Ref{PetscOptions{Float64}}},arg2::TSAdapt{Float64})
    err = ccall((:TSAdaptSetFromOptions,petscRealDouble),PetscErrorCode,(Ptr{PetscOptions{Float64}},TSAdapt{Float64}),arg1,arg2)
    return err
end

function TSAdaptReset(arg1::TSAdapt{Float64})
    err = ccall((:TSAdaptReset,petscRealDouble),PetscErrorCode,(TSAdapt{Float64},),arg1)
    return err
end

function TSAdaptDestroy(arg1::Union{Ptr{TSAdapt{Float64}},StridedArray{TSAdapt{Float64}},Ptr{TSAdapt{Float64}},Ref{TSAdapt{Float64}}})
    err = ccall((:TSAdaptDestroy,petscRealDouble),PetscErrorCode,(Ptr{TSAdapt{Float64}},),arg1)
    return err
end

function TSAdaptSetMonitor(arg1::TSAdapt{Float64},arg2::PetscBool)
    err = ccall((:TSAdaptSetMonitor,petscRealDouble),PetscErrorCode,(TSAdapt{Float64},PetscBool),arg1,arg2)
    return err
end

function TSAdaptSetStepLimits(arg1::TSAdapt{Float64},arg2::Float64,arg3::Float64)
    err = ccall((:TSAdaptSetStepLimits,petscRealDouble),PetscErrorCode,(TSAdapt{Float64},Float64,Float64),arg1,arg2,arg3)
    return err
end

function TSAdaptSetCheckStage(arg1::TSAdapt{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSAdaptSetCheckStage,petscRealDouble),PetscErrorCode,(TSAdapt{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function TSGLAdaptRegister(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSGLAdaptRegister,petscRealDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function TSGLAdaptInitializePackage(arg0::Type{Float64})
    err = ccall((:TSGLAdaptInitializePackage,petscRealDouble),PetscErrorCode,())
    return err
end

function TSGLAdaptFinalizePackage(arg0::Type{Float64})
    err = ccall((:TSGLAdaptFinalizePackage,petscRealDouble),PetscErrorCode,())
    return err
end

function TSGLAdaptCreate(arg1::MPI_Comm,arg2::Union{Ptr{TSGLAdapt{Float64}},StridedArray{TSGLAdapt{Float64}},Ptr{TSGLAdapt{Float64}},Ref{TSGLAdapt{Float64}}})
    err = ccall((:TSGLAdaptCreate,petscRealDouble),PetscErrorCode,(comm_type,Ptr{TSGLAdapt{Float64}}),arg1,arg2)
    return err
end

function TSGLAdaptSetType(arg1::TSGLAdapt{Float64},arg2::TSGLAdaptType)
    err = ccall((:TSGLAdaptSetType,petscRealDouble),PetscErrorCode,(TSGLAdapt{Float64},TSGLAdaptType),arg1,arg2)
    return err
end

function TSGLAdaptSetOptionsPrefix(arg1::TSGLAdapt{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:TSGLAdaptSetOptionsPrefix,petscRealDouble),PetscErrorCode,(TSGLAdapt{Float64},Cstring),arg1,arg2)
    return err
end

function TSGLAdaptChoose(arg1::TSGLAdapt{Float64},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg6::Integer,arg7::Float64,arg8::Float64,arg9::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg10::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg11::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:TSGLAdaptChoose,petscRealDouble),PetscErrorCode,(TSGLAdapt{Float64},Int64,Ptr{Int64},Ptr{Float64},Ptr{Float64},Int64,Float64,Float64,Ptr{Int64},Ptr{Float64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11)
    return err
end

function TSGLAdaptView(arg1::TSGLAdapt{Float64},arg2::PetscViewer{Float64})
    err = ccall((:TSGLAdaptView,petscRealDouble),PetscErrorCode,(TSGLAdapt{Float64},PetscViewer{Float64}),arg1,arg2)
    return err
end

function TSGLAdaptSetFromOptions(arg1::Union{Ptr{PetscOptions{Float64}},StridedArray{PetscOptions{Float64}},Ptr{PetscOptions{Float64}},Ref{PetscOptions{Float64}}},arg2::TSGLAdapt{Float64})
    err = ccall((:TSGLAdaptSetFromOptions,petscRealDouble),PetscErrorCode,(Ptr{PetscOptions{Float64}},TSGLAdapt{Float64}),arg1,arg2)
    return err
end

function TSGLAdaptDestroy(arg1::Union{Ptr{TSGLAdapt{Float64}},StridedArray{TSGLAdapt{Float64}},Ptr{TSGLAdapt{Float64}},Ref{TSGLAdapt{Float64}}})
    err = ccall((:TSGLAdaptDestroy,petscRealDouble),PetscErrorCode,(Ptr{TSGLAdapt{Float64}},),arg1)
    return err
end

function TSGLAcceptRegister(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::TSGLAcceptFunction)
    err = ccall((:TSGLAcceptRegister,petscRealDouble),PetscErrorCode,(Cstring,TSGLAcceptFunction),arg1,arg2)
    return err
end

function TSGLRegister(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSGLRegister,petscRealDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function TSGLInitializePackage(arg0::Type{Float64})
    err = ccall((:TSGLInitializePackage,petscRealDouble),PetscErrorCode,())
    return err
end

function TSGLFinalizePackage(arg0::Type{Float64})
    err = ccall((:TSGLFinalizePackage,petscRealDouble),PetscErrorCode,())
    return err
end

function TSGLSetType(arg1::TS{Float64},arg2::TSGLType)
    err = ccall((:TSGLSetType,petscRealDouble),PetscErrorCode,(TS{Float64},TSGLType),arg1,arg2)
    return err
end

function TSGLGetAdapt(arg1::TS{Float64},arg2::Union{Ptr{TSGLAdapt{Float64}},StridedArray{TSGLAdapt{Float64}},Ptr{TSGLAdapt{Float64}},Ref{TSGLAdapt{Float64}}})
    err = ccall((:TSGLGetAdapt,petscRealDouble),PetscErrorCode,(TS{Float64},Ptr{TSGLAdapt{Float64}}),arg1,arg2)
    return err
end

function TSGLSetAcceptType(arg1::TS{Float64},arg2::TSGLAcceptType)
    err = ccall((:TSGLSetAcceptType,petscRealDouble),PetscErrorCode,(TS{Float64},TSGLAcceptType),arg1,arg2)
    return err
end

function TSEIMEXSetMaxRows(ts::TS{Float64},arg1::Integer)
    err = ccall((:TSEIMEXSetMaxRows,petscRealDouble),PetscErrorCode,(TS{Float64},Int64),ts,arg1)
    return err
end

function TSEIMEXSetRowCol(ts::TS{Float64},arg1::Integer,arg2::Integer)
    err = ccall((:TSEIMEXSetRowCol,petscRealDouble),PetscErrorCode,(TS{Float64},Int64,Int64),ts,arg1,arg2)
    return err
end

function TSEIMEXSetOrdAdapt(arg1::TS{Float64},arg2::PetscBool)
    err = ccall((:TSEIMEXSetOrdAdapt,petscRealDouble),PetscErrorCode,(TS{Float64},PetscBool),arg1,arg2)
    return err
end

function TSRKGetType(ts::TS{Float64},arg1::Union{Ptr{TSRKType},StridedArray{TSRKType},Ptr{TSRKType},Ref{TSRKType}})
    err = ccall((:TSRKGetType,petscRealDouble),PetscErrorCode,(TS{Float64},Ptr{TSRKType}),ts,arg1)
    return err
end

function TSRKSetType(ts::TS{Float64},arg1::TSRKType)
    err = ccall((:TSRKSetType,petscRealDouble),PetscErrorCode,(TS{Float64},TSRKType),ts,arg1)
    return err
end

function TSRKSetFullyImplicit(arg1::TS{Float64},arg2::PetscBool)
    err = ccall((:TSRKSetFullyImplicit,petscRealDouble),PetscErrorCode,(TS{Float64},PetscBool),arg1,arg2)
    return err
end

function TSRKRegister(arg0::Type{Float64},arg1::TSRKType,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg7::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg8::Integer,arg9::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:TSRKRegister,petscRealDouble),PetscErrorCode,(TSRKType,Int64,Int64,Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64},Int64,Ptr{Float64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
    return err
end

function TSRKFinalizePackage(arg0::Type{Float64})
    err = ccall((:TSRKFinalizePackage,petscRealDouble),PetscErrorCode,())
    return err
end

function TSRKInitializePackage(arg0::Type{Float64})
    err = ccall((:TSRKInitializePackage,petscRealDouble),PetscErrorCode,())
    return err
end

function TSRKRegisterDestroy(arg0::Type{Float64})
    err = ccall((:TSRKRegisterDestroy,petscRealDouble),PetscErrorCode,())
    return err
end

function TSARKIMEXGetType(ts::TS{Float64},arg1::Union{Ptr{TSARKIMEXType},StridedArray{TSARKIMEXType},Ptr{TSARKIMEXType},Ref{TSARKIMEXType}})
    err = ccall((:TSARKIMEXGetType,petscRealDouble),PetscErrorCode,(TS{Float64},Ptr{TSARKIMEXType}),ts,arg1)
    return err
end

function TSARKIMEXSetType(ts::TS{Float64},arg1::TSARKIMEXType)
    err = ccall((:TSARKIMEXSetType,petscRealDouble),PetscErrorCode,(TS{Float64},TSARKIMEXType),ts,arg1)
    return err
end

function TSARKIMEXSetFullyImplicit(arg1::TS{Float64},arg2::PetscBool)
    err = ccall((:TSARKIMEXSetFullyImplicit,petscRealDouble),PetscErrorCode,(TS{Float64},PetscBool),arg1,arg2)
    return err
end

function TSARKIMEXRegister(arg0::Type{Float64},arg1::TSARKIMEXType,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg7::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg8::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg9::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg10::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg11::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg12::Integer,arg13::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg14::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:TSARKIMEXRegister,petscRealDouble),PetscErrorCode,(TSARKIMEXType,Int64,Int64,Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64},Int64,Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14)
    return err
end

function TSARKIMEXFinalizePackage(arg0::Type{Float64})
    err = ccall((:TSARKIMEXFinalizePackage,petscRealDouble),PetscErrorCode,())
    return err
end

function TSARKIMEXInitializePackage(arg0::Type{Float64})
    err = ccall((:TSARKIMEXInitializePackage,petscRealDouble),PetscErrorCode,())
    return err
end

function TSARKIMEXRegisterDestroy(arg0::Type{Float64})
    err = ccall((:TSARKIMEXRegisterDestroy,petscRealDouble),PetscErrorCode,())
    return err
end

function TSRosWGetType(ts::TS{Float64},arg1::Union{Ptr{TSRosWType},StridedArray{TSRosWType},Ptr{TSRosWType},Ref{TSRosWType}})
    err = ccall((:TSRosWGetType,petscRealDouble),PetscErrorCode,(TS{Float64},Ptr{TSRosWType}),ts,arg1)
    return err
end

function TSRosWSetType(ts::TS{Float64},arg1::TSRosWType)
    err = ccall((:TSRosWSetType,petscRealDouble),PetscErrorCode,(TS{Float64},TSRosWType),ts,arg1)
    return err
end

function TSRosWSetRecomputeJacobian(arg1::TS{Float64},arg2::PetscBool)
    err = ccall((:TSRosWSetRecomputeJacobian,petscRealDouble),PetscErrorCode,(TS{Float64},PetscBool),arg1,arg2)
    return err
end

function TSRosWRegister(arg0::Type{Float64},arg1::TSRosWType,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg7::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg8::Integer,arg9::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:TSRosWRegister,petscRealDouble),PetscErrorCode,(TSRosWType,Int64,Int64,Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64},Int64,Ptr{Float64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
    return err
end

function TSRosWRegisterRos4(arg0::Type{Float64},arg1::TSRosWType,arg2::Float64,arg3::Float64,arg4::Float64,arg5::Float64,arg6::Float64)
    err = ccall((:TSRosWRegisterRos4,petscRealDouble),PetscErrorCode,(TSRosWType,Float64,Float64,Float64,Float64,Float64),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function TSRosWFinalizePackage(arg0::Type{Float64})
    err = ccall((:TSRosWFinalizePackage,petscRealDouble),PetscErrorCode,())
    return err
end

function TSRosWInitializePackage(arg0::Type{Float64})
    err = ccall((:TSRosWInitializePackage,petscRealDouble),PetscErrorCode,())
    return err
end

function TSRosWRegisterDestroy(arg0::Type{Float64})
    err = ccall((:TSRosWRegisterDestroy,petscRealDouble),PetscErrorCode,())
    return err
end

function TSThetaSetTheta(arg1::TS{Float64},arg2::Float64)
    err = ccall((:TSThetaSetTheta,petscRealDouble),PetscErrorCode,(TS{Float64},Float64),arg1,arg2)
    return err
end

function TSThetaGetTheta(arg1::TS{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:TSThetaGetTheta,petscRealDouble),PetscErrorCode,(TS{Float64},Ptr{Float64}),arg1,arg2)
    return err
end

function TSThetaGetEndpoint(arg1::TS{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:TSThetaGetEndpoint,petscRealDouble),PetscErrorCode,(TS{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function TSThetaSetEndpoint(arg1::TS{Float64},arg2::PetscBool)
    err = ccall((:TSThetaSetEndpoint,petscRealDouble),PetscErrorCode,(TS{Float64},PetscBool),arg1,arg2)
    return err
end

function TSAlphaSetAdapt(arg1::TS{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSAlphaSetAdapt,petscRealDouble),PetscErrorCode,(TS{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function TSAlphaAdaptDefault(arg1::TS{Float64},arg2::Float64,arg3::Vec{Float64},arg4::Vec{Float64},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg6::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg7::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSAlphaAdaptDefault,petscRealDouble),PetscErrorCode,(TS{Float64},Float64,Vec{Float64},Vec{Float64},Ptr{Float64},Ptr{PetscBool},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function TSAlphaSetRadius(arg1::TS{Float64},arg2::Float64)
    err = ccall((:TSAlphaSetRadius,petscRealDouble),PetscErrorCode,(TS{Float64},Float64),arg1,arg2)
    return err
end

function TSAlphaSetParams(arg1::TS{Float64},arg2::Float64,arg3::Float64,arg4::Float64)
    err = ccall((:TSAlphaSetParams,petscRealDouble),PetscErrorCode,(TS{Float64},Float64,Float64,Float64),arg1,arg2,arg3,arg4)
    return err
end

function TSAlphaGetParams(arg1::TS{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:TSAlphaGetParams,petscRealDouble),PetscErrorCode,(TS{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function TSSetDM(arg1::TS{Float64},arg2::DM{Float64})
    err = ccall((:TSSetDM,petscRealDouble),PetscErrorCode,(TS{Float64},DM{Float64}),arg1,arg2)
    return err
end

function TSGetDM(arg1::TS{Float64},arg2::Union{Ptr{DM{Float64}},StridedArray{DM{Float64}},Ptr{DM{Float64}},Ref{DM{Float64}}})
    err = ccall((:TSGetDM,petscRealDouble),PetscErrorCode,(TS{Float64},Ptr{DM{Float64}}),arg1,arg2)
    return err
end

function SNESTSFormFunction(arg1::SNES{Float64},arg2::Vec{Float64},arg3::Vec{Float64},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESTSFormFunction,petscRealDouble),PetscErrorCode,(SNES{Float64},Vec{Float64},Vec{Float64},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function SNESTSFormJacobian(arg1::SNES{Float64},arg2::Vec{Float64},arg3::Mat{Float64},arg4::Mat{Float64},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESTSFormJacobian,petscRealDouble),PetscErrorCode,(SNES{Float64},Vec{Float64},Mat{Float64},Mat{Float64},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function VecFischer(arg1::Vec{Float64},arg2::Vec{Float64},arg3::Vec{Float64},arg4::Vec{Float64},arg5::Vec{Float64})
    err = ccall((:VecFischer,petscRealDouble),PetscErrorCode,(Vec{Float64},Vec{Float64},Vec{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function VecSFischer(arg1::Vec{Float64},arg2::Vec{Float64},arg3::Vec{Float64},arg4::Vec{Float64},arg5::Float64,arg6::Vec{Float64})
    err = ccall((:VecSFischer,petscRealDouble),PetscErrorCode,(Vec{Float64},Vec{Float64},Vec{Float64},Vec{Float64},Float64,Vec{Float64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatDFischer(arg1::Mat{Float64},arg2::Vec{Float64},arg3::Vec{Float64},arg4::Vec{Float64},arg5::Vec{Float64},arg6::Vec{Float64},arg7::Vec{Float64},arg8::Vec{Float64},arg9::Vec{Float64})
    err = ccall((:MatDFischer,petscRealDouble),PetscErrorCode,(Mat{Float64},Vec{Float64},Vec{Float64},Vec{Float64},Vec{Float64},Vec{Float64},Vec{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
    return err
end

function MatDSFischer(arg1::Mat{Float64},arg2::Vec{Float64},arg3::Vec{Float64},arg4::Vec{Float64},arg5::Vec{Float64},arg6::Float64,arg7::Vec{Float64},arg8::Vec{Float64},arg9::Vec{Float64},arg10::Vec{Float64},arg11::Vec{Float64})
    err = ccall((:MatDSFischer,petscRealDouble),PetscErrorCode,(Mat{Float64},Vec{Float64},Vec{Float64},Vec{Float64},Vec{Float64},Float64,Vec{Float64},Vec{Float64},Vec{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11)
    return err
end

function TaoInitializePackage(arg0::Type{Float64})
    err = ccall((:TaoInitializePackage,petscRealDouble),PetscErrorCode,())
    return err
end

function TaoFinalizePackage(arg0::Type{Float64})
    err = ccall((:TaoFinalizePackage,petscRealDouble),PetscErrorCode,())
    return err
end

function TaoCreate(arg1::MPI_Comm,arg2::Union{Ptr{Tao{Float64}},StridedArray{Tao{Float64}},Ptr{Tao{Float64}},Ref{Tao{Float64}}})
    err = ccall((:TaoCreate,petscRealDouble),PetscErrorCode,(comm_type,Ptr{Tao{Float64}}),arg1,arg2)
    return err
end

function TaoSetFromOptions(arg1::Tao{Float64})
    err = ccall((:TaoSetFromOptions,petscRealDouble),PetscErrorCode,(Tao{Float64},),arg1)
    return err
end

function TaoSetUp(arg1::Tao{Float64})
    err = ccall((:TaoSetUp,petscRealDouble),PetscErrorCode,(Tao{Float64},),arg1)
    return err
end

function TaoSetType(arg1::Tao{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:TaoSetType,petscRealDouble),PetscErrorCode,(Tao{Float64},Cstring),arg1,arg2)
    return err
end

function TaoGetType(arg1::Tao{Float64},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:TaoGetType,petscRealDouble),PetscErrorCode,(Tao{Float64},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function TaoSetApplicationContext(arg1::Tao{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoSetApplicationContext,petscRealDouble),PetscErrorCode,(Tao{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function TaoGetApplicationContext(arg1::Tao{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoGetApplicationContext,petscRealDouble),PetscErrorCode,(Tao{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function TaoDestroy(arg1::Union{Ptr{Tao{Float64}},StridedArray{Tao{Float64}},Ptr{Tao{Float64}},Ref{Tao{Float64}}})
    err = ccall((:TaoDestroy,petscRealDouble),PetscErrorCode,(Ptr{Tao{Float64}},),arg1)
    return err
end

function TaoSetOptionsPrefix(arg1::Tao{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:TaoSetOptionsPrefix,petscRealDouble),PetscErrorCode,(Tao{Float64},Cstring),arg1,arg2)
    return err
end

function TaoView(arg1::Tao{Float64},arg2::PetscViewer{Float64})
    err = ccall((:TaoView,petscRealDouble),PetscErrorCode,(Tao{Float64},PetscViewer{Float64}),arg1,arg2)
    return err
end

function TaoRegister(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoRegister,petscRealDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function TaoRegisterDestroy(arg0::Type{Float64})
    err = ccall((:TaoRegisterDestroy,petscRealDouble),PetscErrorCode,())
    return err
end

function TaoGetConvergedReason(arg1::Tao{Float64},arg2::Union{Ptr{TaoConvergedReason},StridedArray{TaoConvergedReason},Ptr{TaoConvergedReason},Ref{TaoConvergedReason}})
    err = ccall((:TaoGetConvergedReason,petscRealDouble),PetscErrorCode,(Tao{Float64},Ptr{TaoConvergedReason}),arg1,arg2)
    return err
end

function TaoGetSolutionStatus(arg1::Tao{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg7::Union{Ptr{TaoConvergedReason},StridedArray{TaoConvergedReason},Ptr{TaoConvergedReason},Ref{TaoConvergedReason}})
    err = ccall((:TaoGetSolutionStatus,petscRealDouble),PetscErrorCode,(Tao{Float64},Ptr{Int64},Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{TaoConvergedReason}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function TaoSetConvergedReason(arg1::Tao{Float64},arg2::TaoConvergedReason)
    err = ccall((:TaoSetConvergedReason,petscRealDouble),PetscErrorCode,(Tao{Float64},TaoConvergedReason),arg1,arg2)
    return err
end

function TaoSetInitialVector(arg1::Tao{Float64},arg2::Vec{Float64})
    err = ccall((:TaoSetInitialVector,petscRealDouble),PetscErrorCode,(Tao{Float64},Vec{Float64}),arg1,arg2)
    return err
end

function TaoGetSolutionVector(arg1::Tao{Float64},arg2::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:TaoGetSolutionVector,petscRealDouble),PetscErrorCode,(Tao{Float64},Ptr{Vec{Float64}}),arg1,arg2)
    return err
end

function TaoGetGradientVector(arg1::Tao{Float64},arg2::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:TaoGetGradientVector,petscRealDouble),PetscErrorCode,(Tao{Float64},Ptr{Vec{Float64}}),arg1,arg2)
    return err
end

function TaoSetObjectiveRoutine(arg1::Tao{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoSetObjectiveRoutine,petscRealDouble),PetscErrorCode,(Tao{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function TaoSetGradientRoutine(arg1::Tao{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoSetGradientRoutine,petscRealDouble),PetscErrorCode,(Tao{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function TaoSetObjectiveAndGradientRoutine(arg1::Tao{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoSetObjectiveAndGradientRoutine,petscRealDouble),PetscErrorCode,(Tao{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function TaoSetHessianRoutine(arg1::Tao{Float64},arg2::Mat{Float64},arg3::Mat{Float64},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoSetHessianRoutine,petscRealDouble),PetscErrorCode,(Tao{Float64},Mat{Float64},Mat{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TaoSetSeparableObjectiveRoutine(arg1::Tao{Float64},arg2::Vec{Float64},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoSetSeparableObjectiveRoutine,petscRealDouble),PetscErrorCode,(Tao{Float64},Vec{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function TaoSetConstraintsRoutine(arg1::Tao{Float64},arg2::Vec{Float64},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoSetConstraintsRoutine,petscRealDouble),PetscErrorCode,(Tao{Float64},Vec{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function TaoSetInequalityConstraintsRoutine(arg1::Tao{Float64},arg2::Vec{Float64},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoSetInequalityConstraintsRoutine,petscRealDouble),PetscErrorCode,(Tao{Float64},Vec{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function TaoSetEqualityConstraintsRoutine(arg1::Tao{Float64},arg2::Vec{Float64},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoSetEqualityConstraintsRoutine,petscRealDouble),PetscErrorCode,(Tao{Float64},Vec{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function TaoSetJacobianRoutine(arg1::Tao{Float64},arg2::Mat{Float64},arg3::Mat{Float64},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoSetJacobianRoutine,petscRealDouble),PetscErrorCode,(Tao{Float64},Mat{Float64},Mat{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TaoSetJacobianStateRoutine(arg1::Tao{Float64},arg2::Mat{Float64},arg3::Mat{Float64},arg4::Mat{Float64},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoSetJacobianStateRoutine,petscRealDouble),PetscErrorCode,(Tao{Float64},Mat{Float64},Mat{Float64},Mat{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function TaoSetJacobianDesignRoutine(arg1::Tao{Float64},arg2::Mat{Float64},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoSetJacobianDesignRoutine,petscRealDouble),PetscErrorCode,(Tao{Float64},Mat{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function TaoSetJacobianInequalityRoutine(arg1::Tao{Float64},arg2::Mat{Float64},arg3::Mat{Float64},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoSetJacobianInequalityRoutine,petscRealDouble),PetscErrorCode,(Tao{Float64},Mat{Float64},Mat{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TaoSetJacobianEqualityRoutine(arg1::Tao{Float64},arg2::Mat{Float64},arg3::Mat{Float64},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoSetJacobianEqualityRoutine,petscRealDouble),PetscErrorCode,(Tao{Float64},Mat{Float64},Mat{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TaoSetStateDesignIS(arg1::Tao{Float64},arg2::IS{Float64},arg3::IS{Float64})
    err = ccall((:TaoSetStateDesignIS,petscRealDouble),PetscErrorCode,(Tao{Float64},IS{Float64},IS{Float64}),arg1,arg2,arg3)
    return err
end

function TaoComputeObjective(arg1::Tao{Float64},arg2::Vec{Float64},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:TaoComputeObjective,petscRealDouble),PetscErrorCode,(Tao{Float64},Vec{Float64},Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function TaoComputeSeparableObjective(arg1::Tao{Float64},arg2::Vec{Float64},arg3::Vec{Float64})
    err = ccall((:TaoComputeSeparableObjective,petscRealDouble),PetscErrorCode,(Tao{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3)
    return err
end

function TaoComputeGradient(arg1::Tao{Float64},arg2::Vec{Float64},arg3::Vec{Float64})
    err = ccall((:TaoComputeGradient,petscRealDouble),PetscErrorCode,(Tao{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3)
    return err
end

function TaoComputeObjectiveAndGradient(arg1::Tao{Float64},arg2::Vec{Float64},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Vec{Float64})
    err = ccall((:TaoComputeObjectiveAndGradient,petscRealDouble),PetscErrorCode,(Tao{Float64},Vec{Float64},Ptr{Float64},Vec{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function TaoComputeConstraints(arg1::Tao{Float64},arg2::Vec{Float64},arg3::Vec{Float64})
    err = ccall((:TaoComputeConstraints,petscRealDouble),PetscErrorCode,(Tao{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3)
    return err
end

function TaoComputeInequalityConstraints(arg1::Tao{Float64},arg2::Vec{Float64},arg3::Vec{Float64})
    err = ccall((:TaoComputeInequalityConstraints,petscRealDouble),PetscErrorCode,(Tao{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3)
    return err
end

function TaoComputeEqualityConstraints(arg1::Tao{Float64},arg2::Vec{Float64},arg3::Vec{Float64})
    err = ccall((:TaoComputeEqualityConstraints,petscRealDouble),PetscErrorCode,(Tao{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3)
    return err
end

function TaoDefaultComputeGradient(arg1::Tao{Float64},arg2::Vec{Float64},arg3::Vec{Float64},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoDefaultComputeGradient,petscRealDouble),PetscErrorCode,(Tao{Float64},Vec{Float64},Vec{Float64},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function TaoIsObjectiveDefined(arg1::Tao{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:TaoIsObjectiveDefined,petscRealDouble),PetscErrorCode,(Tao{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function TaoIsGradientDefined(arg1::Tao{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:TaoIsGradientDefined,petscRealDouble),PetscErrorCode,(Tao{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function TaoIsObjectiveAndGradientDefined(arg1::Tao{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:TaoIsObjectiveAndGradientDefined,petscRealDouble),PetscErrorCode,(Tao{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function TaoComputeHessian(arg1::Tao{Float64},arg2::Vec{Float64},arg3::Mat{Float64},arg4::Mat{Float64})
    err = ccall((:TaoComputeHessian,petscRealDouble),PetscErrorCode,(Tao{Float64},Vec{Float64},Mat{Float64},Mat{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function TaoComputeJacobian(arg1::Tao{Float64},arg2::Vec{Float64},arg3::Mat{Float64},arg4::Mat{Float64})
    err = ccall((:TaoComputeJacobian,petscRealDouble),PetscErrorCode,(Tao{Float64},Vec{Float64},Mat{Float64},Mat{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function TaoComputeJacobianState(arg1::Tao{Float64},arg2::Vec{Float64},arg3::Mat{Float64},arg4::Mat{Float64},arg5::Mat{Float64})
    err = ccall((:TaoComputeJacobianState,petscRealDouble),PetscErrorCode,(Tao{Float64},Vec{Float64},Mat{Float64},Mat{Float64},Mat{Float64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TaoComputeJacobianEquality(arg1::Tao{Float64},arg2::Vec{Float64},arg3::Mat{Float64},arg4::Mat{Float64})
    err = ccall((:TaoComputeJacobianEquality,petscRealDouble),PetscErrorCode,(Tao{Float64},Vec{Float64},Mat{Float64},Mat{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function TaoComputeJacobianInequality(arg1::Tao{Float64},arg2::Vec{Float64},arg3::Mat{Float64},arg4::Mat{Float64})
    err = ccall((:TaoComputeJacobianInequality,petscRealDouble),PetscErrorCode,(Tao{Float64},Vec{Float64},Mat{Float64},Mat{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function TaoComputeJacobianDesign(arg1::Tao{Float64},arg2::Vec{Float64},arg3::Mat{Float64})
    err = ccall((:TaoComputeJacobianDesign,petscRealDouble),PetscErrorCode,(Tao{Float64},Vec{Float64},Mat{Float64}),arg1,arg2,arg3)
    return err
end

function TaoDefaultComputeHessian(arg1::Tao{Float64},arg2::Vec{Float64},arg3::Mat{Float64},arg4::Mat{Float64},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoDefaultComputeHessian,petscRealDouble),PetscErrorCode,(Tao{Float64},Vec{Float64},Mat{Float64},Mat{Float64},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TaoDefaultComputeHessianColor(arg1::Tao{Float64},arg2::Vec{Float64},arg3::Mat{Float64},arg4::Mat{Float64},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoDefaultComputeHessianColor,petscRealDouble),PetscErrorCode,(Tao{Float64},Vec{Float64},Mat{Float64},Mat{Float64},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function TaoComputeDualVariables(arg1::Tao{Float64},arg2::Vec{Float64},arg3::Vec{Float64})
    err = ccall((:TaoComputeDualVariables,petscRealDouble),PetscErrorCode,(Tao{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3)
    return err
end

function TaoComputeDualVariables(arg1::Tao{Float64},arg2::Vec{Float64},arg3::Vec{Float64})
    err = ccall((:TaoComputeDualVariables,petscRealDouble),PetscErrorCode,(Tao{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3)
    return err
end

function TaoSetVariableBounds(arg1::Tao{Float64},arg2::Vec{Float64},arg3::Vec{Float64})
    err = ccall((:TaoSetVariableBounds,petscRealDouble),PetscErrorCode,(Tao{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3)
    return err
end

function TaoGetVariableBounds(arg1::Tao{Float64},arg2::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}},arg3::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:TaoGetVariableBounds,petscRealDouble),PetscErrorCode,(Tao{Float64},Ptr{Vec{Float64}},Ptr{Vec{Float64}}),arg1,arg2,arg3)
    return err
end

function TaoGetDualVariables(arg1::Tao{Float64},arg2::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}},arg3::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:TaoGetDualVariables,petscRealDouble),PetscErrorCode,(Tao{Float64},Ptr{Vec{Float64}},Ptr{Vec{Float64}}),arg1,arg2,arg3)
    return err
end

function TaoSetInequalityBounds(arg1::Tao{Float64},arg2::Vec{Float64},arg3::Vec{Float64})
    err = ccall((:TaoSetInequalityBounds,petscRealDouble),PetscErrorCode,(Tao{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3)
    return err
end

function TaoGetInequalityBounds(arg1::Tao{Float64},arg2::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}},arg3::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:TaoGetInequalityBounds,petscRealDouble),PetscErrorCode,(Tao{Float64},Ptr{Vec{Float64}},Ptr{Vec{Float64}}),arg1,arg2,arg3)
    return err
end

function TaoSetVariableBoundsRoutine(arg1::Tao{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoSetVariableBoundsRoutine,petscRealDouble),PetscErrorCode,(Tao{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function TaoComputeVariableBounds(arg1::Tao{Float64})
    err = ccall((:TaoComputeVariableBounds,petscRealDouble),PetscErrorCode,(Tao{Float64},),arg1)
    return err
end

function TaoGetTolerances(arg1::Tao{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:TaoGetTolerances,petscRealDouble),PetscErrorCode,(Tao{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function TaoSetTolerances(arg1::Tao{Float64},arg2::Float64,arg3::Float64,arg4::Float64,arg5::Float64,arg6::Float64)
    err = ccall((:TaoSetTolerances,petscRealDouble),PetscErrorCode,(Tao{Float64},Float64,Float64,Float64,Float64,Float64),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function TaoGetConstraintTolerances(arg1::Tao{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:TaoGetConstraintTolerances,petscRealDouble),PetscErrorCode,(Tao{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function TaoSetConstraintTolerances(arg1::Tao{Float64},arg2::Float64,arg3::Float64)
    err = ccall((:TaoSetConstraintTolerances,petscRealDouble),PetscErrorCode,(Tao{Float64},Float64,Float64),arg1,arg2,arg3)
    return err
end

function TaoSetFunctionLowerBound(arg1::Tao{Float64},arg2::Float64)
    err = ccall((:TaoSetFunctionLowerBound,petscRealDouble),PetscErrorCode,(Tao{Float64},Float64),arg1,arg2)
    return err
end

function TaoSetInitialTrustRegionRadius(arg1::Tao{Float64},arg2::Float64)
    err = ccall((:TaoSetInitialTrustRegionRadius,petscRealDouble),PetscErrorCode,(Tao{Float64},Float64),arg1,arg2)
    return err
end

function TaoSetMaximumIterations(arg1::Tao{Float64},arg2::Integer)
    err = ccall((:TaoSetMaximumIterations,petscRealDouble),PetscErrorCode,(Tao{Float64},Int64),arg1,arg2)
    return err
end

function TaoSetMaximumFunctionEvaluations(arg1::Tao{Float64},arg2::Integer)
    err = ccall((:TaoSetMaximumFunctionEvaluations,petscRealDouble),PetscErrorCode,(Tao{Float64},Int64),arg1,arg2)
    return err
end

function TaoGetFunctionLowerBound(arg1::Tao{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:TaoGetFunctionLowerBound,petscRealDouble),PetscErrorCode,(Tao{Float64},Ptr{Float64}),arg1,arg2)
    return err
end

function TaoGetInitialTrustRegionRadius(arg1::Tao{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:TaoGetInitialTrustRegionRadius,petscRealDouble),PetscErrorCode,(Tao{Float64},Ptr{Float64}),arg1,arg2)
    return err
end

function TaoGetCurrentTrustRegionRadius(arg1::Tao{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:TaoGetCurrentTrustRegionRadius,petscRealDouble),PetscErrorCode,(Tao{Float64},Ptr{Float64}),arg1,arg2)
    return err
end

function TaoGetMaximumIterations(arg1::Tao{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:TaoGetMaximumIterations,petscRealDouble),PetscErrorCode,(Tao{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function TaoGetCurrentFunctionEvaluations(arg1::Tao{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:TaoGetCurrentFunctionEvaluations,petscRealDouble),PetscErrorCode,(Tao{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function TaoGetMaximumFunctionEvaluations(arg1::Tao{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:TaoGetMaximumFunctionEvaluations,petscRealDouble),PetscErrorCode,(Tao{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function TaoGetIterationNumber(arg1::Tao{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:TaoGetIterationNumber,petscRealDouble),PetscErrorCode,(Tao{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function TaoSetIterationNumber(arg1::Tao{Float64},arg2::Integer)
    err = ccall((:TaoSetIterationNumber,petscRealDouble),PetscErrorCode,(Tao{Float64},Int64),arg1,arg2)
    return err
end

function TaoGetTotalIterationNumber(arg1::Tao{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:TaoGetTotalIterationNumber,petscRealDouble),PetscErrorCode,(Tao{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function TaoSetTotalIterationNumber(arg1::Tao{Float64},arg2::Integer)
    err = ccall((:TaoSetTotalIterationNumber,petscRealDouble),PetscErrorCode,(Tao{Float64},Int64),arg1,arg2)
    return err
end

function TaoSetOptionsPrefix(arg1::Tao{Float64},p::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:TaoSetOptionsPrefix,petscRealDouble),PetscErrorCode,(Tao{Float64},Cstring),arg1,p)
    return err
end

function TaoAppendOptionsPrefix(arg1::Tao{Float64},p::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:TaoAppendOptionsPrefix,petscRealDouble),PetscErrorCode,(Tao{Float64},Cstring),arg1,p)
    return err
end

function TaoGetOptionsPrefix(arg1::Tao{Float64},p::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:TaoGetOptionsPrefix,petscRealDouble),PetscErrorCode,(Tao{Float64},Ptr{Ptr{UInt8}}),arg1,p)
    return err
end

function TaoResetStatistics(arg1::Tao{Float64})
    err = ccall((:TaoResetStatistics,petscRealDouble),PetscErrorCode,(Tao{Float64},),arg1)
    return err
end

function TaoGetKSP(arg1::Tao{Float64},arg2::Union{Ptr{KSP{Float64}},StridedArray{KSP{Float64}},Ptr{KSP{Float64}},Ref{KSP{Float64}}})
    err = ccall((:TaoGetKSP,petscRealDouble),PetscErrorCode,(Tao{Float64},Ptr{KSP{Float64}}),arg1,arg2)
    return err
end

function TaoGetLinearSolveIterations(arg1::Tao{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:TaoGetLinearSolveIterations,petscRealDouble),PetscErrorCode,(Tao{Float64},Ptr{Int64}),arg1,arg2)
    return err
end

function TaoLineSearchCreate(arg1::MPI_Comm,arg2::Union{Ptr{TaoLineSearch{Float64}},StridedArray{TaoLineSearch{Float64}},Ptr{TaoLineSearch{Float64}},Ref{TaoLineSearch{Float64}}})
    err = ccall((:TaoLineSearchCreate,petscRealDouble),PetscErrorCode,(comm_type,Ptr{TaoLineSearch{Float64}}),arg1,arg2)
    return err
end

function TaoLineSearchSetFromOptions(arg1::TaoLineSearch{Float64})
    err = ccall((:TaoLineSearchSetFromOptions,petscRealDouble),PetscErrorCode,(TaoLineSearch{Float64},),arg1)
    return err
end

function TaoLineSearchSetUp(arg1::TaoLineSearch{Float64})
    err = ccall((:TaoLineSearchSetUp,petscRealDouble),PetscErrorCode,(TaoLineSearch{Float64},),arg1)
    return err
end

function TaoLineSearchDestroy(arg1::Union{Ptr{TaoLineSearch{Float64}},StridedArray{TaoLineSearch{Float64}},Ptr{TaoLineSearch{Float64}},Ref{TaoLineSearch{Float64}}})
    err = ccall((:TaoLineSearchDestroy,petscRealDouble),PetscErrorCode,(Ptr{TaoLineSearch{Float64}},),arg1)
    return err
end

function TaoLineSearchView(arg1::TaoLineSearch{Float64},arg2::PetscViewer{Float64})
    err = ccall((:TaoLineSearchView,petscRealDouble),PetscErrorCode,(TaoLineSearch{Float64},PetscViewer{Float64}),arg1,arg2)
    return err
end

function TaoLineSearchReset(arg1::TaoLineSearch{Float64})
    err = ccall((:TaoLineSearchReset,petscRealDouble),PetscErrorCode,(TaoLineSearch{Float64},),arg1)
    return err
end

function TaoLineSearchAppendOptionsPrefix(arg1::TaoLineSearch{Float64},prefix::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:TaoLineSearchAppendOptionsPrefix,petscRealDouble),PetscErrorCode,(TaoLineSearch{Float64},Cstring),arg1,prefix)
    return err
end

function TaoLineSearchGetOptionsPrefix(arg1::TaoLineSearch{Float64},prefix::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:TaoLineSearchGetOptionsPrefix,petscRealDouble),PetscErrorCode,(TaoLineSearch{Float64},Ptr{Ptr{UInt8}}),arg1,prefix)
    return err
end

function TaoLineSearchApply(arg1::TaoLineSearch{Float64},arg2::Vec{Float64},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Vec{Float64},arg5::Vec{Float64},arg6::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg7::Union{Ptr{TaoLineSearchConvergedReason},StridedArray{TaoLineSearchConvergedReason},Ptr{TaoLineSearchConvergedReason},Ref{TaoLineSearchConvergedReason}})
    err = ccall((:TaoLineSearchApply,petscRealDouble),PetscErrorCode,(TaoLineSearch{Float64},Vec{Float64},Ptr{Float64},Vec{Float64},Vec{Float64},Ptr{Float64},Ptr{TaoLineSearchConvergedReason}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function TaoLineSearchGetStepLength(arg1::TaoLineSearch{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:TaoLineSearchGetStepLength,petscRealDouble),PetscErrorCode,(TaoLineSearch{Float64},Ptr{Float64}),arg1,arg2)
    return err
end

function TaoLineSearchGetStartingVector(arg1::TaoLineSearch{Float64},arg2::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:TaoLineSearchGetStartingVector,petscRealDouble),PetscErrorCode,(TaoLineSearch{Float64},Ptr{Vec{Float64}}),arg1,arg2)
    return err
end

function TaoLineSearchGetStepDirection(arg1::TaoLineSearch{Float64},arg2::Union{Ptr{Vec{Float64}},StridedArray{Vec{Float64}},Ptr{Vec{Float64}},Ref{Vec{Float64}}})
    err = ccall((:TaoLineSearchGetStepDirection,petscRealDouble),PetscErrorCode,(TaoLineSearch{Float64},Ptr{Vec{Float64}}),arg1,arg2)
    return err
end

function TaoLineSearchSetInitialStepLength(arg1::TaoLineSearch{Float64},arg2::Float64)
    err = ccall((:TaoLineSearchSetInitialStepLength,petscRealDouble),PetscErrorCode,(TaoLineSearch{Float64},Float64),arg1,arg2)
    return err
end

function TaoLineSearchGetSolution(arg1::TaoLineSearch{Float64},arg2::Vec{Float64},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Vec{Float64},arg5::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg6::Union{Ptr{TaoLineSearchConvergedReason},StridedArray{TaoLineSearchConvergedReason},Ptr{TaoLineSearchConvergedReason},Ref{TaoLineSearchConvergedReason}})
    err = ccall((:TaoLineSearchGetSolution,petscRealDouble),PetscErrorCode,(TaoLineSearch{Float64},Vec{Float64},Ptr{Float64},Vec{Float64},Ptr{Float64},Ptr{TaoLineSearchConvergedReason}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function TaoLineSearchGetFullStepObjective(arg1::TaoLineSearch{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:TaoLineSearchGetFullStepObjective,petscRealDouble),PetscErrorCode,(TaoLineSearch{Float64},Ptr{Float64}),arg1,arg2)
    return err
end

function TaoLineSearchGetNumberFunctionEvaluations(arg1::TaoLineSearch{Float64},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:TaoLineSearchGetNumberFunctionEvaluations,petscRealDouble),PetscErrorCode,(TaoLineSearch{Float64},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function TaoLineSearchGetType(arg1::TaoLineSearch{Float64},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:TaoLineSearchGetType,petscRealDouble),PetscErrorCode,(TaoLineSearch{Float64},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function TaoLineSearchSetType(arg1::TaoLineSearch{Float64},arg2::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}})
    err = ccall((:TaoLineSearchSetType,petscRealDouble),PetscErrorCode,(TaoLineSearch{Float64},Cstring),arg1,arg2)
    return err
end

function TaoLineSearchIsUsingTaoRoutines(arg1::TaoLineSearch{Float64},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:TaoLineSearchIsUsingTaoRoutines,petscRealDouble),PetscErrorCode,(TaoLineSearch{Float64},Ptr{PetscBool}),arg1,arg2)
    return err
end

function TaoLineSearchSetObjectiveAndGTSRoutine(arg1::TaoLineSearch{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoLineSearchSetObjectiveAndGTSRoutine,petscRealDouble),PetscErrorCode,(TaoLineSearch{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function TaoLineSearchSetObjectiveRoutine(arg1::TaoLineSearch{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoLineSearchSetObjectiveRoutine,petscRealDouble),PetscErrorCode,(TaoLineSearch{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function TaoLineSearchSetGradientRoutine(arg1::TaoLineSearch{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoLineSearchSetGradientRoutine,petscRealDouble),PetscErrorCode,(TaoLineSearch{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function TaoLineSearchSetObjectiveAndGradientRoutine(arg1::TaoLineSearch{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoLineSearchSetObjectiveAndGradientRoutine,petscRealDouble),PetscErrorCode,(TaoLineSearch{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function TaoLineSearchComputeObjective(arg1::TaoLineSearch{Float64},arg2::Vec{Float64},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:TaoLineSearchComputeObjective,petscRealDouble),PetscErrorCode,(TaoLineSearch{Float64},Vec{Float64},Ptr{Float64}),arg1,arg2,arg3)
    return err
end

function TaoLineSearchComputeGradient(arg1::TaoLineSearch{Float64},arg2::Vec{Float64},arg3::Vec{Float64})
    err = ccall((:TaoLineSearchComputeGradient,petscRealDouble),PetscErrorCode,(TaoLineSearch{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3)
    return err
end

function TaoLineSearchComputeObjectiveAndGradient(arg1::TaoLineSearch{Float64},arg2::Vec{Float64},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Vec{Float64})
    err = ccall((:TaoLineSearchComputeObjectiveAndGradient,petscRealDouble),PetscErrorCode,(TaoLineSearch{Float64},Vec{Float64},Ptr{Float64},Vec{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function TaoLineSearchComputeObjectiveAndGTS(arg1::TaoLineSearch{Float64},arg2::Vec{Float64},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}})
    err = ccall((:TaoLineSearchComputeObjectiveAndGTS,petscRealDouble),PetscErrorCode,(TaoLineSearch{Float64},Vec{Float64},Ptr{Float64},Ptr{Float64}),arg1,arg2,arg3,arg4)
    return err
end

function TaoLineSearchSetVariableBounds(arg1::TaoLineSearch{Float64},arg2::Vec{Float64},arg3::Vec{Float64})
    err = ccall((:TaoLineSearchSetVariableBounds,petscRealDouble),PetscErrorCode,(TaoLineSearch{Float64},Vec{Float64},Vec{Float64}),arg1,arg2,arg3)
    return err
end

function TaoLineSearchInitializePackage(arg0::Type{Float64})
    err = ccall((:TaoLineSearchInitializePackage,petscRealDouble),PetscErrorCode,())
    return err
end

function TaoLineSearchFinalizePackage(arg0::Type{Float64})
    err = ccall((:TaoLineSearchFinalizePackage,petscRealDouble),PetscErrorCode,())
    return err
end

function TaoLineSearchRegister(arg0::Type{Float64},arg1::Union{ByteString,Symbol,Array{UInt8},Ptr{UInt8}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoLineSearchRegister,petscRealDouble),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function TaoLineSearchUseTaoRoutines(arg1::TaoLineSearch{Float64},arg2::Tao{Float64})
    err = ccall((:TaoLineSearchUseTaoRoutines,petscRealDouble),PetscErrorCode,(TaoLineSearch{Float64},Tao{Float64}),arg1,arg2)
    return err
end

function TaoGetLineSearch(arg1::Tao{Float64},arg2::Union{Ptr{TaoLineSearch{Float64}},StridedArray{TaoLineSearch{Float64}},Ptr{TaoLineSearch{Float64}},Ref{TaoLineSearch{Float64}}})
    err = ccall((:TaoGetLineSearch,petscRealDouble),PetscErrorCode,(Tao{Float64},Ptr{TaoLineSearch{Float64}}),arg1,arg2)
    return err
end

function TaoSetConvergenceHistory(arg1::Tao{Float64},arg2::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg3::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg4::Union{Ptr{Float64},StridedArray{Float64},Ptr{Float64},Ref{Float64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Integer,arg7::PetscBool)
    err = ccall((:TaoSetConvergenceHistory,petscRealDouble),PetscErrorCode,(Tao{Float64},Ptr{Float64},Ptr{Float64},Ptr{Float64},Ptr{Int64},Int64,PetscBool),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function TaoGetConvergenceHistory(arg1::Tao{Float64},arg2::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg3::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg4::Union{Ptr{Ptr{Float64}},StridedArray{Ptr{Float64}},Ptr{Ptr{Float64}},Ref{Ptr{Float64}}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:TaoGetConvergenceHistory,petscRealDouble),PetscErrorCode,(Tao{Float64},Ptr{Ptr{Float64}},Ptr{Ptr{Float64}},Ptr{Ptr{Float64}},Ptr{Ptr{Int64}},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function TaoSetMonitor(arg1::Tao{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoSetMonitor,petscRealDouble),PetscErrorCode,(Tao{Float64},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function TaoCancelMonitors(arg1::Tao{Float64})
    err = ccall((:TaoCancelMonitors,petscRealDouble),PetscErrorCode,(Tao{Float64},),arg1)
    return err
end

function TaoDefaultMonitor(arg1::Tao{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoDefaultMonitor,petscRealDouble),PetscErrorCode,(Tao{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function TaoDefaultSMonitor(arg1::Tao{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoDefaultSMonitor,petscRealDouble),PetscErrorCode,(Tao{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function TaoDefaultCMonitor(arg1::Tao{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoDefaultCMonitor,petscRealDouble),PetscErrorCode,(Tao{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function TaoSolutionMonitor(arg1::Tao{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoSolutionMonitor,petscRealDouble),PetscErrorCode,(Tao{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function TaoSeparableObjectiveMonitor(arg1::Tao{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoSeparableObjectiveMonitor,petscRealDouble),PetscErrorCode,(Tao{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function TaoGradientMonitor(arg1::Tao{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoGradientMonitor,petscRealDouble),PetscErrorCode,(Tao{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function TaoStepDirectionMonitor(arg1::Tao{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoStepDirectionMonitor,petscRealDouble),PetscErrorCode,(Tao{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function TaoDrawSolutionMonitor(arg1::Tao{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoDrawSolutionMonitor,petscRealDouble),PetscErrorCode,(Tao{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function TaoDrawStepMonitor(arg1::Tao{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoDrawStepMonitor,petscRealDouble),PetscErrorCode,(Tao{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function TaoDrawGradientMonitor(arg1::Tao{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoDrawGradientMonitor,petscRealDouble),PetscErrorCode,(Tao{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function TaoAddLineSearchCounts(arg1::Tao{Float64})
    err = ccall((:TaoAddLineSearchCounts,petscRealDouble),PetscErrorCode,(Tao{Float64},),arg1)
    return err
end

function TaoDefaultConvergenceTest(arg1::Tao{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoDefaultConvergenceTest,petscRealDouble),PetscErrorCode,(Tao{Float64},Ptr{Void}),arg1,arg2)
    return err
end

function TaoSetConvergenceTest(arg1::Tao{Float64},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoSetConvergenceTest,petscRealDouble),PetscErrorCode,(Tao{Float64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function TaoSQPCONSetStateDesignIS(arg1::Tao{Float64},arg2::IS{Float64},arg3::IS{Float64})
    err = ccall((:TaoSQPCONSetStateDesignIS,petscRealDouble),PetscErrorCode,(Tao{Float64},IS{Float64},IS{Float64}),arg1,arg2,arg3)
    return err
end

function TaoLCLSetStateDesignIS(arg1::Tao{Float64},arg2::IS{Float64},arg3::IS{Float64})
    err = ccall((:TaoLCLSetStateDesignIS,petscRealDouble),PetscErrorCode,(Tao{Float64},IS{Float64},IS{Float64}),arg1,arg2,arg3)
    return err
end

function TaoMonitor(arg1::Tao{Float64},arg2::Integer,arg3::Float64,arg4::Float64,arg5::Float64,arg6::Float64,arg7::Union{Ptr{TaoConvergedReason},StridedArray{TaoConvergedReason},Ptr{TaoConvergedReason},Ref{TaoConvergedReason}})
    err = ccall((:TaoMonitor,petscRealDouble),PetscErrorCode,(Tao{Float64},Int64,Float64,Float64,Float64,Float64,Ptr{TaoConvergedReason}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end
