const unary_ops = ((:(Base.acos), :acos!, :Acos),
                   (:(Base.asin), :asin!, :Asin),
                   (:(Base.atan), :atan!, :Atan),
                   (:(Base.cos), :cos!, :Cos),
                   (:(Base.sin), :sin!, :Sin),
                   (:(Base.tan), :tan!, :Tan),
                   (:(Base.acosh), :acosh!, :Acosh),
                   (:(Base.asinh), :asinh!, :Asinh),
                   (:(Base.atanh), :atanh!, :Atanh),
                   (:(Base.cosh), :cosh!, :Cosh),
                   (:(Base.sinh), :sinh!, :Sinh),
                   (:(Base.tanh), :tanh!, :Tanh),
                   (:(Base.cbrt), :cbrt!, :Cbrt),
                   (:(Base.sqrt), :sqrt!, :Sqrt),
                   (:(Base.exp), :exp!, :Exp),
                   (:(Base.expm1), :expm1!, :Expm1),
                   (:(Base.log), :log!, :Ln),
                   (:(Base.log10), :log10!, :Log10),
                   (:(Base.log1p), :log1p, :Log1p),
                   (:(Base.abs), :abs!, :Abs),
                   (:(Base.abs2), :abs2!, :Sqr),
                   (:(Base.ceil), :ceil!, :Ceil),
                   (:(Base.floor), :floor!, :Floor),
                   # (:(Base.modf), :modf!, :Modf),
                   (:(Base.round), :round!, :Round),
                   (:(Base.trunc), :trunc!, :Trunc),
                   (:(Base.erf), :erf!, :Erf),
                   (:(Base.erfc), :erfc!, :Erfc),
                   (:(Base.erfinv), :erfinv!, :ErfInv),
                   (:(Base.erfcinv), :erfcinv!, :ErfcInv),
                   (:(Base.lgamma), :lgamma!, :LGamma),
                   (:(Base.gamma), :gamma!, :TGamma),
                   # Not in Base
                   (:inv_cbrt, :inv_cbrt!, :InvCbrt),
                   (:inv_sqrt, :inv_sqrt!, :InvSqrt),
                   (:pow2o3, :pow2o3!, :Pow2o3),
                   (:pow3o2, :pow3o2!, :Pow3o2))

const binary_vector_ops = ((:(Base.atan2), :atan2!, :Atan2),
                           (:(Base.hypot), :hypot!, :Hypot),
                           (:(Base.(:.^)), :pow!, :Pow),
                           (:(Base.(:.+)), :add!, :Add),
                           (:(Base.(:./)), :divide!, :Div),
                           (:(Base.(:.*)), :multiply!, :Mul),
                           (:(Base.(:.-)), :subtract!, :Sub))
