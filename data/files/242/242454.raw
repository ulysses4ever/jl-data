# The auction model, inputs are parameters and sample size
function AuctionModel(theta, x, valuations)
    # the model
	theta1 = theta[1]
	theta2 = theta[2]
	N = 6
	# valuations drawn from exponetial mean phi
	phi = exp(theta1 .+ theta2.*x)
	# highest valuation
	v = -log(minimum(valuations,2)).*phi
	# get winning bid
	z = v./phi
	D = exp(-5.*z).*(60.*exp(5.*z) + 300.*phi .* exp(4.*z) - 300.*phi .* exp(3.*z)
	    + 200.*phi .* exp(2.*z) - 75.*phi .* exp(z) + 12.*phi)/60. - 137.*phi/60.
	b = v - D ./ ((1. - exp(-v./phi)).^(N-1))
	b = b.*(b.>0)
	data = [b x]
end

# Auxiliary statistic.
function aux_stat(theta, randdraws="")
    n = 80
	# random components: quality and valuations
	if randdraws == ""
        x = rand(n,1) # quality of good
        valuations = rand(n,6) # valuations of 6 bidders
    else
        x = randdraws[:,1]
        valuations = randdraws[:,2:end]
    end    
    data = AuctionModel(theta, x, valuations)
	b = data[:,1]
	# bound bid for numeric stability
	b = (b.>0.01).*b + (b.<0.01)*0.01
	y = log(b) # use log of bid
	n = size(y,1)
    x = [ones(n,1) data[:,2]]
	bhat = x\y
	e = y - x*bhat
	sig = log(e'*e/(n-2.))
	m1 = mean(log(b))
	m2 = std(log(b))
	m3 = mean((log(b)-m1).^3.)
	Z = [bhat; sig; m1; m2; m3]
    return Z
end

function check_in_support(theta)
    lb = [-1. 0.]
    ub = [3. 2.]
    ok = all((theta .>= lb) & (theta .<= ub))
    return ok, lb, ub
end

