#|

Javadoc Sawfish Module.  Version 1.1.

Copyright (c) 2004-2005 Ewan Mellor <sawfish@ewanmellor.org.uk>.
All rights reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
  IN THE SOFTWARE.


This module contains one function: javadoc-lookup.  Given a partially or fully
qualified Java or C++ class or package name it returns the filename of the
corresponding documentation page.  The name given need not match case-wise
unless there is a conflict.  For example, "container" will find the
documentation for java.util.Container, but "applet" will find the
documentation for the package java.applet, not java.applet.Applet.  Priority
in the event of name clashes is determined by the index file.  See
javadoc-indexer.py for details.  In the event of a clash, a partial or fully
qualified name may be used to resolve the conflict.  For example, "List" may
find the documentation for java.util.List.  In this event, the term "awt.List"
or "java.awt.List" may be used to access the documentation for java.awt.List.

This module now supports C++ names too.  These may be using either :: or . as
a separator.

This module relies upon an index generated for it by javadoc-indexer.py.  This
index should be placed in the file .javadoc-index in your home directory, or
whichever file is referenced by index-file below.  To invoke the indexer, call

javadoc-indexer.py <dir>* >~/.javadoc-index

where <dir> is a fully qualified path to a Javadoc or Doxygen-generated
documentation tree root.  For example, to index both my JDK 1.4 and my Log4J
documentation, I would use

javadoc-indexer.py /usr/local/share/doc/j2sdk1.4/api/                        \
                   ~/log4j/jakarta-log4j-1.2.8/docs/api/                     \
  >~/.javadoc-index


This module depends upon the string2 module (version 1.6+).
It also needs a user-interface component to be of any use; lookup.jl is one
example.  javadoc-indexer.py, string2.jl, and lookup.jl all available from

http://www.ewanmellor.org.uk/sawfish.html


Install this file by placing it inside your ~/.sawfish/lisp/ directory, and
generate the Javadoc index as described above.

|#


(define-structure javadoc
  (export javadoc-lookup)

  (open rep
        rep.data.tables
        rep.io.files
        string2
        )
    
(defconst index-file "~/.javadoc-index")

(define table (make-table string-hash equal))

(when (file-exists-p index-file)
  (let ((maps
         (let ((stream (open-file index-file 'read)))
           (let loop ((result ()))
                (let ((l (read-line stream)))
                  (if l
                      (let* ((s (make-string-input-stream l))
                             (k (read s))
                             (v (read s)))
                        (loop (cons (cons k v) result)))
                    result)
                  )))))
    (mapc (lambda (x) (table-set table (string-downcase (car x)) (cdr x)))
          maps)
    (mapc (lambda (x) (table-set table (car x) (cdr x))) maps)
    )
  )


(define (javadoc-lookup name)
  "Find the documentation page corresponding to the given name.  The name
should be a partially or fully qualified Java or C++ class or package name, in
response to which this function will return the filename of the corresponding
documentation page, or nil if no documentation is found.  The name given need
not match case-wise unless there is a conflict.  For example, \"container\"
will find the documentation for java.util.Container, but \"applet\" will find
the documentation for the package java.applet, not java.applet.Applet.
Priority in the event of name clashes is determined by the index file.  See
javadoc-indexer.py for details.  In the event of a clash, a partial or fully
qualified name may be used to resolve the conflict.  For example, \"List\" may
find the documentation for java.util.List.  In this event, the term
\"awt.List\" or \"java.awt.List\" may be used to access the documentation for
java.awt.List."

  ; C++ qualified names such as std::list are mapped to std.list in order to
  ; simplify the indexer.
  (let ((n (string2-replace name "::" ".")))
    (or (table-ref table n)
        (table-ref table (string-downcase n)))
    )
  )
)
