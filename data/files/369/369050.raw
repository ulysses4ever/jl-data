println("Initializing shared parser...")

before = time()

require("shared_cky.jl")

#Check if a grammar was specified
if length(ARGS) < 1
    error("Please specify a grammar as an argument.")
end

grammar_file = ARGS[1]

grammar = parse_grammar(grammar_file)

#Receive sentence to parse
#print("Please enter a sentence: ")
#sentence = readline(STDIN)
#sentence = "he is a man she is a woman he is he is a man she is a woman he is"
sentence = "she is a woman"

#Split sentence into words
tokens = split(replace(sentence, "\n", ""), " ")
n = length(tokens)

#Check if grammar can parse sentence
check_coverage(tokens, grammar)
(stoi_table, itos_table) = build_lookup_tables(grammar, tokens)
(shared_grammar, shared_probs) = share_grammar(grammar, stoi_table)

@printf "Parser initialized in %.4f seconds\n" (time() - before) 

println("Parsing...")

#Assumes start symbol is nonterminal of first rule in grammar - i.e. it is itos_table[1]

before = time()
(table_ints, table_floats) = parse(grammar, shared_grammar, shared_probs, tokens, n, stoi_table)
@printf "Sentence parsed in %.4f seconds\n" (time() - before) 
print_table(table_ints, itos_table, n)

#x = 100

#while x > 0
#	(table_ints, table_floats) = parse(grammar, shared_grammar, shared_probs, tokens, n, stoi_table) 
#	x -= 1
#end
#@printf "100 sentences of length %d parsed in %.4f seconds\n" length(tokens) (time() - before) 
println("done!")
