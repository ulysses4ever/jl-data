include("config.jl")
include("preallocation.jl")
include("genotype.jl")
include("population.jl")


import Preallocation
import Genotype
import Config
import Population


function walk()

    NUM_FIRST_ORDER_SEARCH = 20000000
    NUM_SECOND_ORDER_SEARCH = 20000

    SEARCH_DEPTH = 200
    NUM_MUTANTS = 10000

    config_vals::Config.Type_Config_Values = Config.Type_Config_Values()
    population = Population.make_population(config_vals)

    num_differences = rand(1:1)
    target = zeros(Int32, 2, 16)
    
    for i = 1:16
        target[1, i] = rand(Int32(0):Int32(1))
        target[2, i] = target[1, i]
    end

    for i = 1:num_differences
        done = false
        
        while !done
            index = rand(1:16)
            if target[2, index] == target[1, index]
                target[1, index] = 1 - target[1, index]
                done = true
            end
        end

    end

    config_vals.logic_network_outputs = target
    println(num_differences)
    println(target)

    dummy_genotype = Genotype.make_random_genotype(config_vals)
    dummy_genotype2 = Genotype.make_random_genotype(config_vals)
    best_genotype = Genotype.make_random_genotype(config_vals)
    previous_best_genotype = Genotype.make_random_genotype(config_vals)
    target_number = 1

    for i = 1:NUM_FIRST_ORDER_SEARCH
        if (i % 10000) == 0
            println("i ", i)
        end
        target_number = 1
        dummy_genotype = Genotype.make_random_genotype(config_vals)
        Genotype.evaluate(dummy_genotype, config_vals, target_number, 1, population.preallocation)
        if dummy_genotype.fitness == 16.0
            target_number = 2
            for j = 1:NUM_SECOND_ORDER_SEARCH
                Genotype.copy_into(dummy_genotype2, dummy_genotype)
                Genotype.mutate_at_global_rate(dummy_genotype2, config_vals)
                Genotype.evaluate(dummy_genotype2, config_vals, target_number, 1, population.preallocation)
                if dummy_genotype2.fitness == 16.0
                    for k = 1:SEARCH_DEPTH
                        if target_number == 2
                            target_number = 1
                        else
                            target_number = 2
                        end
                        Genotype.copy_into(dummy_genotype, dummy_genotype2)
                        for l = 1:NUM_MUTANTS
                            Genotype.copy_into(dummy_genotype2, dummy_genotype)
                            Genotype.mutate_at_global_rate(dummy_genotype2, config_vals)
                            Genotype.evaluate(dummy_genotype2, config_vals, target_number, 1, population.preallocation)
                            if dummy_genotype2.fitness == 16.0
                                break
                            end
                        end
                        if l == NUM_MUTANTS
                            println("failed mutants")
                            break
                        else
                            println(l)
                        end
                    end
                    break
                end
            end # for j = 1:NUM_SECOND_ORDER_SEARCH
            if j == NUM_SECOND_ORDER_SEARCH
                println("failed")
            end
        end # if dummy_genotype.fitness == 16.0
    end # for i = 1:NUM_FIRST_ORDER_SEARCH


end

walk()
