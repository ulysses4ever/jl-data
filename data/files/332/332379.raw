function bits_to_int(bits::Array{Int, 1})

    integer::Int64 = 1

    for i = 1:length(bits)
        integer += bits[i] * 2^(i - 1)
    end

    return integer

end

inputs = [0 0 0 0;
          0 0 0 1;
          0 0 1 0;
          0 0 1 1;
          0 1 0 0;
          0 1 0 1;
          0 1 1 0;
          0 1 1 1;
          1 0 0 0;
          1 0 0 1;
          1 0 1 0;
          1 0 1 1;
          1 1 0 0;
          1 1 0 1;
          1 1 1 0;
          1 1 1 1;]

outputs = [0 0 0 0 0 1 1 0 0 1 1 0 0 0 0 0;
           0 1 1 0 1 1 1 1 1 1 1 1 0 1 1 0;]

pattern_frequencies = zeros(Int, 32)
indeces = [1, 3]

for i = 1:16
    bits = Int[]
    
    for index in indeces
        push!(bits, inputs[i, index])
    end

    push!(bits, outputs[1, i])
    #println(bits)
    pattern_frequencies[bits_to_int(bits)] += 1
    #println(pattern_frequencies)
    
end

sum = 0

for i = 1:(2^(length(indeces) + 1))
    if pattern_frequencies[i] > 0
        sum -= ((pattern_frequencies[i] / length(inputs)) * log2(pattern_frequencies[i] / length(inputs)))
    end
end
println(pattern_frequencies)
println(sum)

