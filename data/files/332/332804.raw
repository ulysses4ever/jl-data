include("config.jl")
#include("genotype.jl")
include("fixed_genotype.jl")
#include("population.jl")

#import Genotype
import Fixed_Genotype
import Config
#import Population

# function evolve()
#     config_vals::Config.Type_Config_Values = Config.Type_Config_Values()
#     population::Population.Type_Population = Population.make_population(config_vals)    
#     j = 2
#     for i = convert(Int32, 1):config_vals.num_generations
#         Population.evaluate(population, i, config_vals)
#         if (i % config_vals.generations_per_target_switch) in config_vals.print_times
#             print(i % config_vals.generations_per_target_switch, " ")
#             Population.print_stats(population, config_vals)
#         end
#         Population.breed_and_exterminate(population, config_vals)
#         if i % config_vals.generations_per_target_switch == 0
#             println("\n target switch ", j, "\n")
#             if j == 1
#                 j = 2
#             else
#                 j = 1
#             end
#             Population.switch_target(population, config_vals)
#         end
#      end
#     best = population.genotypes[1]
#     max_fitness::Float32 = 0
#     for genotype in population.genotypes
#         if genotype.fitness > max_fitness
#             max_fitness = genotype.fitness
#             best = genotype
#         end
#     end

    # println("connections")
    # for i = 1:best.num_nodes
    #     println(best.connections[(best.connection_indeces[i] + 1):best.connection_indeces[i + 1]])
    # end
    # if Config.use_truth_table
    #     println("truth table")
    #     for i = 1:best.num_nodes
    #         println(best.truth_table[(best.truth_table_indeces[i] + 1):best.truth_table_indeces[i + 1]])
    #     end
    # else
    #     println("thresholds")
    #     println(best.thresholds)
    #     println("weights")
    #     for i = 1:best.num_nodes
    #         println(best.weights[(best.connection_indeces[i] + 1):best.connection_indeces[i + 1]])
    #     end
    # end
    # println("activations")
    # for i = 1:Config.num_simulation_iterations
    #     println(best.activations[((i - 1) * best.num_nodes + 1):(i * best.num_nodes)])
    # end
#end

function test_functionality()
    config_vals::Config.Type_Config_Values = Config.Type_Config_Values()
    println("\n INITIALISE \n")
    #println(methods(Fixed_Genotype.make_random_fixed_genotype))
    #println(methods(Genotype.make_random_genotype))
    foo = Fixed_Genotype.make_random_genotype(config_vals)

    println("connections")
    println(foo.connections)
    println("used connections")
    println(foo.used_connections)
    println("weights")
    println(foo.weights)
    println("thresholds")
    println(foo.thresholds)
    println("activations")
    println(foo.activations)

    println("\n DELETE NODE \n")
    Fixed_Genotype.delete_node(foo, config_vals, convert(Int32, 2))
    println("connections")
    println(foo.connections)
    println("used connections")
    println(foo.used_connections)
    println("weights")
    println(foo.weights)
    println("thresholds")
    println(foo.thresholds)
    println("activations")
    println(foo.activations)

    println("\n DUPLICATE NODE \n")
    Fixed_Genotype.duplicate_node(foo, config_vals, convert(Int32, 2))
    println("connections")
    println(foo.connections)
    println("used connections")
    println(foo.used_connections)
    println("weights")
    println(foo.weights)
    println("thresholds")
    println(foo.thresholds)
    println("activations")
    println(foo.activations)

    println("\n ADD CONNECTION \n")
    Fixed_Genotype.add_connection(foo, config_vals, convert(Int32, 2), convert(Int32, 0))
    println("connections")
    println(foo.connections)
    println("used connections")
    println(foo.used_connections)
    println("weights")
    println(foo.weights)
    println("thresholds")
    println(foo.thresholds)
    println("activations")
    println(foo.activations)

    println("\n DELETE CONNECTION \n")
    Fixed_Genotype.delete_connection(foo, config_vals, convert(Int32, 2), convert(Int32, 3))
    println("connections")
    println(foo.connections)
    println("used connections")
    println(foo.used_connections)
    println("weights")
    println(foo.weights)
    println("thresholds")
    println(foo.thresholds)
    println("activations")
    println(foo.activations)

    println("\n MUTATE CONNECTION \n")
    Fixed_Genotype.mutate_connection(foo, config_vals, convert(Int32, 3), convert(Int32, 2))
    println("connections")
    println(foo.connections)
    println("used connections")
    println(foo.used_connections)
    println("weights")
    println(foo.weights)
    println("thresholds")
    println(foo.thresholds)
    println("activations")
    println(foo.activations)


    println("\n MUTATE WEIGHT \n")
    Fixed_Genotype.mutate_weight(foo, config_vals, convert(Int32, 3), convert(Int32, 2))
    println("connections")
    println(foo.connections)
    println("used connections")
    println(foo.used_connections)
    println("weights")
    println(foo.weights)
    println("thresholds")
    println(foo.thresholds)
    println("activations")
    println(foo.activations)

    println("\n SIMULATE \n")
    Fixed_Genotype.simulate(foo, config_vals)
    println("activations")
    for i = 1:config_vals.num_simulation_iterations
        println(foo.activations[((i - 1) * config_vals.max_num_nodes + 1):((i) * config_vals.max_num_nodes)])
    end
end

#@time evolve()


test_functionality()
    
