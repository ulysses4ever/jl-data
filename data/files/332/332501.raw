include("config.jl")

module Fixed_Genotype
using Config

type Type_Genotype
    num_nodes::Int32
    used_connections::Array{Int32, 1}
    connections::Array{Int32, 1}
    activations::Array{Int32, 1}
    weights::Array{Int32, 1}
    thresholds::Array{Int32, 1}
    fitness::Float32
    marked_for_removal::Bool
    node_weights::Array{Int32, 1}
    updated_weights::Array{Int32, 1}
    parents_node_weights::Array{Int32, 1}
    parents_connections::Array{Int32, 1}
    parents_activations::Array{Int32, 1}
    parents_weights::Array{Int32, 1}
    parents_thresholds::Array{Int32, 1}
end

function copy_into(target::Type_Genotype, source::Type_Genotype)
    target.num_nodes = source.num_nodes
    for i = 1:length(target.used_connections)
        target.used_connections[i] = source.used_connections[i]
    end
    for i = 1:length(target.connections)
        target.connections[i] = source.connections[i]
    end
    for i = 1:length(target.activations)
        target.activations[i] = source.activations[i]
    end
    for i = 1:length(target.weights)
        target.weights[i] = source.weights[i]
    end
    for i = 1:length(target.thresholds)
        target.thresholds[i] = source.thresholds[i]
    end
    target.fitness = source.fitness
    target.marked_for_removal = source.marked_for_removal
    for i = 1:length(target.node_weights)
        target.node_weights[i] = source.node_weights[i]
    end
    for i = 1:length(target.updated_weights)
        target.updated_weights[i] = source.updated_weights[i]
    end
    for i = 1:length(target.parents_node_weights)
        target.parents_node_weights[i] = source.parents_node_weights[i]
    end
    for i = 1:length(target.parents_connections)
        target.parents_connections[i] = source.parents_connections[i]
    end
    for i = 1:length(target.parents_activations)
        target.parents_activations[i] = source.parents_activations[i]
    end
    for i = 1:length(target.parents_weights)
        target.parents_weights[i] = source.parents_weights[i]
    end
    for i = 1:length(target.parents_thresholds)
        target.parents_thresholds[i] = source.parents_thresholds[i]
    end
end

function make_random_genotype(config_vals::Config.Type_Config_Values)
    num_nodes = config_vals.initial_num_nodes
    used_connections::Array{Int32, 1} = zeros(Int32, config_vals.max_num_nodes)
    connections::Array{Int32, 1} = zeros(Int32, config_vals.max_num_nodes * config_vals.max_num_connections)
    parents_connections::Array{Int32, 1} = zeros(Int32, config_vals.max_num_nodes * config_vals.max_num_connections)
    weights::Array{Int32, 1} = zeros(Int32, config_vals.max_num_nodes * config_vals.max_num_connections)
    parents_weights::Array{Int32, 1} = zeros(Int32, config_vals.max_num_nodes * config_vals.max_num_connections)
    for i = 1:num_nodes
        connections_to_use = rand(config_vals.initial_min_num_connections:config_vals.initial_max_num_connections)
        used_connections[i] = connections_to_use
        start_index = (i - 1) * config_vals.max_num_connections
        for j = 1:connections_to_use
            weight_value = 0
            while weight_value == 0
                weight_value = rand(config_vals.min_weight:config_vals.max_weight)
            end
            weights[start_index + j] = weight_value
            connection_value = 0
            found_connection_value = false
            while !found_connection_value
                connection_value = rand(1:num_nodes)
                found_connection_value = true
                for k = 1:(j - 1)
                    if connection_value == connections[start_index + k]
                        found_connection_value = false
                    end
                end
            end
            connections[start_index + j] = connection_value
        end
    end
    activations::Array{Int32, 1} = zeros(Int32, config_vals.max_num_nodes * (config_vals.num_simulation_iterations + 1))
    parents_activations::Array{Int32, 1} = zeros(Int32, config_vals.max_num_nodes * (config_vals.num_simulation_iterations + 1))
    rand!(sub(activations, 1:num_nodes), 0:1)
    thresholds::Array{Int32, 1} = zeros(Int32, config_vals.max_num_nodes)
    parents_thresholds::Array{Int32, 1} = zeros(Int32, config_vals.max_num_nodes)
    rand!(sub(thresholds, 1:num_nodes), config_vals.min_threshold:config_vals.max_threshold)
    node_weights::Array{Int32, 1} = ones(Int32, config_vals.max_num_nodes)
    parents_node_weights::Array{Int32, 1} = ones(Int32, config_vals.max_num_nodes)
    updated_weights::Array{Int32, 1} = ones(Int32, config_vals.max_num_nodes * config_vals.max_num_connections)
    return Type_Genotype(num_nodes, used_connections, connections, activations, weights, 
                         thresholds,  -1.0, false, node_weights, updated_weights, parents_node_weights, 
                         parents_connections, parents_activations, parents_weights, parents_thresholds)
end

function randomize_genotype(config_vals::Config.Type_Config_Values, genotype::Type_Genotype)
    fill!(genotype.used_connections, convert(Int32, 0))
    fill!(genotype.connections, convert(Int32, 0))
    fill!(genotype.weights, convert(Int32, 0))
    num_nodes = config_vals.initial_num_nodes
    for i = 1:num_nodes
        connections_to_use = rand(config_vals.initial_min_num_connections:config_vals.initial_max_num_connections)
        genotype.used_connections[i] = connections_to_use
        start_index = (i - 1) * config_vals.max_num_connections
        for j = 1:connections_to_use
            weight_value = 0
            while weight_value == 0
                weight_value = rand(config_vals.min_weight:config_vals.max_weight)
            end
            genotype.weights[start_index + j] = weight_value
            connection_value = 0
            found_connection_value = false
            while !found_connection_value
                connection_value = rand(1:num_nodes)
                found_connection_value = true
                for k = 1:(j - 1)
                    if connection_value == genotype.connections[start_index + k]
                        found_connection_value = false
                    end
                end
            end
            genotype.connections[start_index + j] = connection_value
        end
    end
    rand!(sub(genotype.activations, 1:num_nodes), 0:1)
    rand!(sub(genotype.thresholds, 1:num_nodes), config_vals.min_threshold:config_vals.max_threshold)
    fill!(genotype.node_weights, convert(Int32, 1))
    genotype.fitness = -1.0
    return 0
end

import Base
Base.(:(==))(x::Type_Genotype, y::Type_Genotype) = (
                                                    function (x::Type_Genotype, y::Type_Genotype)
                                                    for i = 1:length(x.connections)
                                                    if x.connections[i] != y.connections[i]
                                                    return false
                                                    end
                                                    end
                                                        for i = 1:length(x.activations)
                                                            if x.activations[i] != y.activations[i]
                                                                return false
                                                            end
                                                        end
                                                        for i = 1:length(x.weights)
                                                            if x.weights[i] != y.weights[i]
                                                                return false
                                                            end
                                                        end
                                                        for i = 1:length(x.thresholds)
                                                            if x.thresholds[i] != y.thresholds[i]
                                                                return false
                                                            end
                                                        end
                                                        return true
                                                    end) (x::Type_Genotype, y::Type_Genotype)

Base.hash(genotype::Type_Genotype) = (
                                      function (genotype::Type_Genotype)
                                      hash_code = 1
                                      for i = 1:length(genotype.connections)
                                      hash_code += genotype.connections[i] * 10^i
                                      end
                                      for i = 1:length(genotype.activations)
                                          hash_code += genotype.activations[i] * 10^i
                                      end
                                          for i = 1:length(genotype.weights)
                                              hash_code += genotype.weights[i] * 10^i
                                          end
                                          for i = 1:length(genotype.thresholds)
                                              hash_code += genotype.thresholds[i] * 10^i
                                          end
                                          return hash_code
                                      end) (genotype::Type_Genotype)
                                                    

function simulate(genotype::Type_Genotype, config_vals::Config.Type_Config_Values, verbose::Int32)
    Libdl.dlopen("/home/david/TehzCodes/GRNEvolution/libboolnet")
    for i = 1:length(genotype.connections)
        genotype.updated_weights[i] = genotype.weights[i]
    end
    for i = 1:length(genotype.node_weights)
        for j = 1:length(genotype.updated_weights)
            if genotype.connections[j] == i
                genotype.updated_weights[j] *= genotype.node_weights[i]
            end
        end
    end
    ccall((:run_network_fixed, "/home/david/TehzCodes/GRNEvolution/libboolnet"), Void,
          (Int32, Int32, Int32, Int32, Ptr{Int32}, Ptr{Int32}, Ptr{Int32}, Ptr{Int32}, Int32),
          config_vals.num_simulation_iterations, genotype.num_nodes,
          config_vals.max_num_nodes, config_vals.max_num_connections,
          genotype.activations,
          genotype.connections, genotype.updated_weights, genotype.thresholds, verbose)
    return 0
end

function evaluate(genotype::Type_Genotype, target_expression::Array{Int32, 1}, config_vals::Config.Type_Config_Values, fitness_vals::Dict{Int64, Float64})
    if genotype.fitness == -1.0
        genotype.fitness = 0.0
        simulate(genotype, config_vals, convert(Int32, 0))
        if config_vals.use_fitness_table
            println("foo")
            #genotype.fitness = fitness_vals[activations_to_int(config_vals, genotype)]
        elseif config_vals.use_bash
            genotype_int::Int64 = activations_to_int(config_vals, genotype)
            fitness::Float64 = get(fitness_vals, genotype_int, 0)
            if fitness == 0
                bash_string::String = ""
                for i = (config_vals.num_simulation_iterations - 1) * config_vals.max_num_nodes:length(genotype.activations)
                    bash_string = string(bash_string, genotype.activations[i])
                end
                #=for i = 1:length(target_expression)
                    bash_string = string(bash_string, " ", target_expression[i])
                end=#
                #bash_string = string("./a.out ", bash_string) 
                bash_output = readall(`./a.out $bash_string $target_expression[:]`)
                coords = split(bash_output)
                #=sum = 0
                for i = 1:(length(target_expression) - 1)
                    sum += (parse(Float64, coords[1 + i]) - target_expression[i]) ^ 2
                end
                sum = sqrt(sum)
                fitness = 10000 - sum=#
                fitness = parse(coords[2])
                fitness_vals[genotype_int] = fitness
            end
            genotype.fitness = fitness
        else
            start_1 = genotype.num_nodes * (config_vals.num_simulation_iterations - 1) + 1
            end_1 = start_1 + genotype.num_nodes - 1
            start_2 = genotype.num_nodes * config_vals.num_simulation_iterations + 1
            end_2 = start_2 + genotype.num_nodes - 1
            if isequal(sub(genotype.activations, start_1:end_1), sub(genotype.activations, start_2:end_2))
                #if true
                for i = 1:length(target_expression)
                    if genotype.activations[(config_vals.num_simulation_iterations * config_vals.max_num_nodes)  + i] == target_expression[i]
                        genotype.fitness += 1.0
                    end
                end
            end
        end
    end
    return 0
end

function activations_to_int(config_vals::Config.Type_Config_Values, genotype::Type_Genotype)
    integer::Int64 = 0
    for i = 1:config_vals.initial_num_nodes
        integer += genotype.activations[(config_vals.num_simulation_iterations * config_vals.max_num_nodes)  + i] * 2^(i - 1)
    end
    integer += 1
    return integer
end

function mutate(genotype::Type_Genotype, config_vals::Config.Type_Config_Values)
    genotype.fitness = -1.0
    for i = 1:length(genotype.node_weights)
        genotype.parents_node_weights[i] = genotype.node_weights[i]
    end
    for i = 1:length(genotype.parents_connections)
        genotype.parents_connections[i] = genotype.connections[i]
    end
    for i = 1:length(genotype.parents_activations)
        genotype.parents_activations[i] = genotype.activations[i]
    end
    for i = 1:length(genotype.parents_weights)
        genotype.parents_weights[i] = genotype.weights[i]
    end
    for i = 1:length(genotype.parents_thresholds)
        genotype.parents_thresholds[i] = genotype.thresholds[i]
    end
    if rand(1:100) < 100 * config_vals.mutate_dup_del_prob
        if rand(0:1) == 0
            for i = 1:rand(config_vals.min_num_dups_or_dels:config_vals.max_num_dups_or_dels)
                delete_node(genotype, config_vals, convert(Int32, rand(1:genotype.num_nodes)))
            end
        else
            for i = 1:rand(config_vals.min_num_dups_or_dels:config_vals.max_num_dups_or_dels)
                duplicate_node(genotype, config_vals, convert(Int32, rand(1:genotype.num_nodes)))
            end
        end
    else
        if rand(1:100) <= 100 * config_vals.mutate_conn_prob 
            for i = 1:rand(config_vals.min_num_conn_muts:config_vals.max_num_conn_muts)
                node = rand(1:genotype.num_nodes)
                mutate_connection(genotype, config_vals, convert(Int32, node), convert(Int32, rand(1:genotype.used_connections[node])))
            end
        end
        if rand(1:100) <= 100 * config_vals.mutate_activation_prob
            for i = 1:rand(config_vals.min_num_activation_muts:config_vals.max_num_activation_muts)
                mutate_activation(genotype, config_vals, convert(Int32, rand(1:genotype.num_nodes)))
            end
        end
        if rand(1:100) <= 100 * config_vals.delete_conn_prob
            for i = 1:rand(config_vals.min_num_conn_dels:config_vals.max_num_conn_dels)
                node = rand(1:genotype.num_nodes)
                delete_incomming_connection(genotype, config_vals, convert(Int32, node), convert(Int32, rand(1:genotype.used_connections[node])))
            end
        end
        if rand(1:100) <= 100 * config_vals.add_conn_prob
            node::Int32 = rand(1:genotype.num_nodes)
            for i = 1:rand(config_vals.min_num_conn_adds:config_vals.max_num_conn_adds)
                add_incoming_connection(genotype, config_vals, node, convert(Int32, 0))
            end
        end
        if rand(1:100) <= 100 * config_vals.mutate_threshold_prob
            for i = 1:rand(config_vals.min_num_thresh_muts:config_vals.max_num_thresh_muts)
                mutate_threshold(genotype, config_vals, convert(Int32, rand(1:genotype.num_nodes)))
            end
        end
        if rand(1:100) <= 100 * config_vals.mutate_weight_prob
            for i = 1:rand(config_vals.min_num_weight_muts:config_vals.max_num_weight_muts)
                node = rand(1:genotype.num_nodes)
                mutate_weight(genotype, config_vals, convert(Int32, node), convert(Int32, rand(1:genotype.used_connections[node])))
            end
        end
        if rand(1:100) <= 100 * config_vals.mutate_node_weight_prob
            for i = 1:rand(config_vals.min_num_node_weight_muts:config_vals.max_num_node_weight_muts)
                node = rand(1:genotype.num_nodes)
                mutate_node_weight(genotype, config_vals, convert(Int32, node))
            end
        end
    end
    return 0
end

function point_mutate(genotype::Type_Genotype, config_vals::Config.Type_Config_Values)
    genotype.fitness = -1.0

    choice = rand(1:5)
    if choice == 1
        node = rand(1:genotype.num_nodes)
        mutate_connection(genotype, config_vals, convert(Int32, node), convert(Int32, rand(1:genotype.used_connections[node])))
    elseif choice == 2
        mutate_activation(genotype, config_vals, convert(Int32, rand(1:genotype.num_nodes)))
    elseif choice == 3
        node = rand(1:genotype.num_nodes)
        delete_incomming_connection(genotype, config_vals, convert(Int32, node), convert(Int32, rand(1:genotype.used_connections[node])))
    elseif choice == 4
        node::Int32 = rand(1:genotype.num_nodes)
        add_incoming_connection(genotype, config_vals, node, convert(Int32, 0))
    else
        node = rand(1:genotype.num_nodes)
        mutate_weight(genotype, config_vals, convert(Int32, node), convert(Int32, rand(1:genotype.used_connections[node])))
    end
    return 0
end

function move_node(genotype::Type_Genotype, config_vals::Config.Type_Config_Values, from_index::Int32, to_index::Int32)
    from_range_start = ((from_index - 1) * config_vals.max_num_connections) + 1
    from_range_end = ((from_index - 1) * config_vals.max_num_connections) + genotype.used_connections[from_index]
    for i = from_range_start:from_range_end
        genotype.connections[i + ((to_index - from_index) * config_vals.max_num_connections)] = genotype.connections[i]
        genotype.connections[i] = 0
        genotype.weights[i + ((to_index - from_index) * config_vals.max_num_connections)] = genotype.weights[i]
        genotype.weights[i] = 0
    end
    genotype.used_connections[to_index] = genotype.used_connections[from_index]
    genotype.used_connections[from_index] = 0
    genotype.activations[to_index] = genotype.activations[from_index]
    genotype.activations[from_index] = 0
    genotype.thresholds[to_index] = genotype.thresholds[from_index]
    genotype.thresholds[from_index] = 0

    for i = 1:genotype.num_nodes
        for j = 1:genotype.used_connections[i]
            if genotype.connections[(i - 1) * config_vals.max_num_connections + j] == from_index
                genotype.connections[(i - 1) * config_vals.max_num_connections + j] = to_index
            end
        end
    end

    return 0
end

function delete_node(genotype::Type_Genotype, config_vals::Config.Type_Config_Values, index::Int32)
    if genotype.num_nodes > config_vals.min_num_nodes
        for i = 1:genotype.num_nodes
            for j = 1:genotype.used_connections[i]
                if genotype.connections[(i - 1) * config_vals.max_num_connections + j] == index
                    delete_incomming_connection(genotype, config_vals, convert(Int32, i), convert(Int32, j))
                end
            end
        end
        genotype.num_nodes -= 1
        range_start = ((index - 1) * config_vals.max_num_connections) + 1
        range_end = ((index - 1) * config_vals.max_num_connections) + genotype.used_connections[index]
        for i = range_start:range_end
            genotype.connections[i] = 0
            genotype.weights[i] = 0
        end
        genotype.used_connections[index] = 0
        genotype.activations[index] = 0
        genotype.thresholds[index] = 0
        move_node(genotype, config_vals, genotype.num_nodes + convert(Int32, 1), index)
    end
    return 0
end

function duplicate_node(genotype::Type_Genotype, config_vals::Config.Type_Config_Values, index::Int32)
    if genotype.num_nodes < config_vals.max_num_nodes
        genotype.num_nodes += 1
        for i = 1:genotype.num_nodes
            for j = 1:genotype.used_connections[i]
                if genotype.connections[(i - 1) * config_vals.max_num_connections + j] == index
                    add_incoming_connection(genotype, config_vals, convert(Int32, i), genotype.num_nodes)
                end
            end
        end
        genotype.used_connections[genotype.num_nodes] = genotype.used_connections[index]
        genotype.activations[genotype.num_nodes] = genotype.activations[index]
        genotype.thresholds[genotype.num_nodes] = genotype.thresholds[index]
        from_start = (index - 1) * config_vals.max_num_connections
        to_start = (genotype.num_nodes - 1) * config_vals.max_num_connections
        for i = 1:genotype.used_connections[index]
            genotype.connections[to_start + i] = genotype.connections[from_start + i]
            genotype.weights[to_start + i] = genotype.weights[from_start + i]
        end
    end
    return 0
end

function add_incoming_connection(genotype::Type_Genotype, config_vals::Config.Type_Config_Values, node::Int32, connection_value::Int32)
    if genotype.used_connections[node] < config_vals.max_num_connections
        node_index = (node - 1) * config_vals.max_num_connections
        insert_index = (node - 1) * config_vals.max_num_connections + 1 + genotype.used_connections[node]
        weight_value = 0
        while weight_value == 0
            weight_value = rand(config_vals.min_weight:config_vals.max_weight)
        end
        genotype.weights[insert_index] = weight_value
        if connection_value == 0
            found_connection_value = false
            while !found_connection_value
                connection_value = rand(1:genotype.num_nodes)
                found_connection_value = true
                for k = 1:genotype.used_connections[node]
                    if connection_value == genotype.connections[node_index + k]
                        found_connection_value = false
                    end
                end
            end
        end
        genotype.connections[insert_index] = connection_value
        genotype.used_connections[node] += 1
    end

    return 0
end

function add_outgoing_connection(genotype::Type_Genotype, config_vals::Config.Type_Config_Values, node::Int32, connection_value::Int32)
    connection_value = node
    while node == connection_value
        node = rand(1:genotype.num_nodes)
    end
    if genotype.used_connections[node] < config_vals.max_num_connections
        node_index = (node - 1) * config_vals.max_num_connections
        insert_index = (node - 1) * config_vals.max_num_connections + 1 + genotype.used_connections[node]
        weight_value = 0
        while weight_value == 0
            weight_value = rand(config_vals.min_weight:config_vals.max_weight)
        end
        genotype.weights[insert_index] = weight_value
        if connection_value == 0
            found_connection_value = false
            while !found_connection_value
                connection_value = rand(1:genotype.num_nodes)
                found_connection_value = true
                for k = 1:genotype.used_connections[node]
                    if connection_value == genotype.connections[node_index + k]
                        found_connection_value = false
                    end
                end
            end
        end
        genotype.connections[insert_index] = connection_value
        genotype.used_connections[node] += 1
    end

    return 0
end

function delete_incomming_connection(genotype::Type_Genotype, config_vals::Config.Type_Config_Values, node::Int32, conn_num::Int32)
    if genotype.used_connections[node] > config_vals.min_num_connections
        delete_index = (node - 1) * config_vals.max_num_connections + conn_num
        nodes_last_index = (node - 1) * config_vals.max_num_connections + genotype.used_connections[node]
        if conn_num < genotype.used_connections[node]
            genotype.connections[delete_index] = genotype.connections[nodes_last_index]
            genotype.weights[delete_index] = genotype.weights[nodes_last_index]
        end
        genotype.connections[nodes_last_index] = 0
        genotype.weights[nodes_last_index] = 0
        genotype.used_connections[node] -= 1
    end
    return 0
end

function mutate_connection(genotype::Type_Genotype, config_vals::Config.Type_Config_Values, node::Int32, conn_num::Int32)
    nodes_first_index = (node - 1) * config_vals.max_num_connections
    connection_value = 0
    found_connection_value = false
    while !found_connection_value
        connection_value = rand(1:genotype.num_nodes)
        found_connection_value = true
        for j = 1:genotype.used_connections[node]
            if connection_value == genotype.connections[nodes_first_index + j]
                found_connection_value = false
            end
        end
    end
    genotype.connections[nodes_first_index + conn_num] = connection_value
    return 0
end

function mutate_weight(genotype::Type_Genotype, config_vals::Config.Type_Config_Values, node::Int32, weight_num::Int32)
    index = (node - 1) * config_vals.max_num_connections + weight_num
    new_weight = 0
    while true
        new_weight = rand(config_vals.min_weight:config_vals.max_weight)
        if (new_weight != genotype.weights[index]) && (new_weight != 0) 
            break
        end
    end
    genotype.weights[index] = new_weight
    return 0
end

function mutate_activation(genotype::Type_Genotype, config_vals::Config.Type_Config_Values, node::Int32)
    genotype.activations[node] = 1 - genotype.activations[node]
    return 0
end

function mutate_node_weight(genotype::Type_Genotype, config_vals::Config.Type_Config_Values, node::Int32)
    if rand(0:1) == 0
        if genotype.node_weights[node] < config_vals.max_node_weight
            genotype.node_weights[node] += 1
        end
    else
        if genotype.node_weights[node] > config_vals.min_node_weight
            genotype.node_weights[node] -= 1
        end
    end
    return 0
end

function mutate_threshold(genotype::Type_Genotype, config_vals::Config.Type_Config_Values, node::Int32)
    new_value = 0
    while true
        new_value = rand(config_vals.min_threshold:config_vals.max_threshold)
        if new_value != genotype.thresholds[node]
            break
        end
    end
    genotype.thresholds[node] = new_value
    return 0
end

end
