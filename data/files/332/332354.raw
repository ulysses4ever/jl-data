N = 20
#K_VALS = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
K_VALS = [1, 2, 3]
Q = 2
A = 2

max_map_value = N * (Q-1)
TARGET_PHENOTYPES = [(max_map_value / 2), ((3 * max_map_value) / 4)]

SAMPLE_SIZE = 500
NUM_MAPS = 5

function convert_to_int(vals::Array{Int, 1})
    return_int = 0
    for i = 1:length(vals)
        return_int += vals[i] * (A^(i-1))
    end
    return return_int
end

function evaluate(W::Array{Int32, 2}, neighbours::Array{Int, 2}, w::Array{Int, 1}, K)
    return_int = 0
    for i = 1:length(w)
        index = w[i] + 1
        for j = 1:K
            index += w[neighbours[i, j]] * (A^j)
        end
        #println(w)
        #println(index)
        return_int += W[i, index]
    end
    return return_int
end

function robustness(N, K, Q, A, SAMPLE_SIZE, neighbours, W, w)
    returned_robustness = 0
    parent_genotype = evaluate(W, neighbours, w, K)
    w_copy = deepcopy(w)
    for i = 1:N
        for j = 0:(A - 1)
            if w[i] != j
                w_copy[i] = j
                if evaluate(W, neighbours, w_copy, K) == parent_genotype
                    returned_robustness += 1
                end
                w_copy[i] = w[i]
            end
        end
    end
    return returned_robustness
end

function sample(N, K, Q, A, SAMPLE_SIZE, neighbours, W, specified_genotype)
    x = []
    y = []
    for i = 1:SAMPLE_SIZE
        w = rand(0:(A - 1), N)
        while evaluate(W, neighbours, w, K) != specified_genotype
            #println(specified_genotype)
            w = rand(0:(A - 1), N)
        end
        parent_robustness = robustness(N, K, Q, A, SAMPLE_SIZE, neighbours, W, w)
        parent_genotype = evaluate(W, neighbours, w, K)
        w_copy = deepcopy(w)
        for j = 1:N
            for k = 0:(A - 1)
                if w[j] != k
                    w_copy[j] = k
                    #w_copy = rand(0:(A - 1), N)
                    if evaluate(W, neighbours, w_copy, K) == parent_genotype
                        #neighbour_genotype = evaluate(W, neighbours, w_copy)
                        neighbour_robustness = robustness(N, K, Q, A, SAMPLE_SIZE, neighbours, W, w_copy)
                        push!(x, parent_robustness)
                        push!(y, neighbour_robustness)
                        #push!(x, parent_genotype)
                        #push!(y, neighbour_genotype)
                    end
                    w_copy[j] = w[j]
                end
            end
        end
    end
    #println(x[end-10:end])
    #println(y[end-10:end])
    #println(cor(x, y))
    #println("correlation ", cor(x, y))
    return cor(x, y)
end

f = open(string("nk_output", ARGS[1]), "w")

correlations = zeros(Float64, length(K_VALS), length(TARGET_PHENOTYPES), NUM_MAPS)

for a in 1:length(K_VALS)
    K = K_VALS[a]
    println(K)
    for m = 1:NUM_MAPS
        println("map ", m)
        neighbours = zeros(Int, N, K)
        for i = 1:N
            for j = 1:K
                found = false
                new_neighbour = 0
                while !found
                    found = true
                    new_neighbour = rand(Int(1):Int(N))
                    for k = 1:K
                        if (new_neighbour == neighbours[i, k]) | (new_neighbour == i)
                            found = false
                        end 
                    end
                end
                neighbours[i, j] = new_neighbour
            end
        end
        W = rand(Int32(0):Int32(Q - 1), N, A^(K + 1))
        for l = 1:length(TARGET_PHENOTYPES)
            #println(K)
            #println(TARGET_PHENOTYPES[l])
            #println(sample(N, K, Q, A, SAMPLE_SIZE, neighbours, W, TARGET_PHENOTYPES[l]))
            correlations[a, l, m] = sample(N, K, Q, A, SAMPLE_SIZE, neighbours, W, TARGET_PHENOTYPES[l])
        end
    end
end

for p = 1:length(TARGET_PHENOTYPES)
    for k = 1:length(K_VALS)
        for m = 1:NUM_MAPS
            write(f, string(correlations[k, p, m]))
            write(f, " ")
        end
        write(f, "\n")
    end
end
