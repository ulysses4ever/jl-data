include("config.jl")

module Genotype
 import Config
 type Type_Genotype
   num_nodes::Int32
   used_connections::Array{Int32}
   connection_indeces::Array{Int32}
   truth_table_indeces::Array{Int32}
   connections::Array{Int32}
   truth_table::Array{Int32}
   activations::Array{Int32}
 end

 function make_random_genotype()
   used_connections::Array{Int32} = rand(0:Config.initial_max_num_connections, Config.initial_num_nodes)
   connection_indeces::Array{Int32} = zeros(Int32, Config.initial_num_nodes + 1)
   truth_table_indeces::Array{Int32} = zeros(Int32, Config.initial_num_nodes + 1)
   for i = 2:(Config.initial_num_nodes + 1)
     connection_indeces[i] = connection_indeces[i - 1] + used_connections[i - 1]
     truth_table_indeces[i] = truth_table_indeces[i - 1] + 2^used_connections[i - 1]
   end
   num_nodes = (sizeof(connection_indeces)/sizeof(connection_indeces[0])) - 1
   connections::Array{Int32} = rand(1:Config.initial_num_nodes, convert(Int64, connection_indeces[Config.initial_num_nodes + 1]))
   truth_table::Array{Int32} = rand(0:1, convert(Int64, truth_table_indeces[Config.initial_num_nodes + 1]))
   activations::Array{Int32} = zeros(Int32, Config.initial_num_nodes * (Config.num_simulation_iterations + 1))
   rand!(0:1, activations[1:Config.initial_num_nodes])
   return Type_Genotype(num_nodes, used_connections, connection_indeces, truth_table_indeces, connections, truth_table, activations)
 end

 function simulate(genotype::Type_Genotype)
   dlopen("/home/david/TehzCodes/GRNEvolution/libboolnet")
   ccall((:run_network_flat, "/home/david/TehzCodes/GRNEvolution/libboolnet"), Void,
         (Int32, Int32, Ptr{Int32}, Ptr{Int32}, Ptr{Int32}, Ptr{Int32}, Ptr{Int32}),
         Config.num_simulation_iterations, genotype.num_nodes,
         genotype.connection_indeces, genotype.truth_table_indeces, genotype.activations,
         genotype.connections, genotype.truth_table)
 end
end

