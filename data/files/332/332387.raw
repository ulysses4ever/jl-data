include("config.jl")
include("preallocation.jl")
include("genotype.jl")
include("population.jl")


import Preallocation
import Genotype
import Config
import Population



function evolve(config_vals::Config.Type_Config_Values)



    for repetition = 1:config_vals.num_experiment_repetitions
        population::Population.Type_Population = Population.make_population(config_vals)    
        
        local_switch_ticker = 0
        
        generation = 0

        for generation = 1:config_vals.num_generations
            if (generation % config_vals.generations_per_target_switch) == 0
                Population.switch_target(population, config_vals, repetition, generation)
            end
            Population.breed_and_exterminate(population, config_vals)
            Population.print_stats(population, config_vals, repetition, generation)
            if (config_vals.logic_network & (population.best.fitness == length(config_vals.logic_network_outputs[1, :])) & (population.target_number == 1)) | ((population.best.fitness == length(config_vals.GRN_target_expressions[1, :])) & !config_vals.logic_network)
                break
            end
        end

        println(generation)
    end

end



function make_inputs(num_inputs, inputs)
    if num_inputs == 1
        append!(inputs, [1, 0])
    else
        make_inputs(num_inputs - 1, inputs)
        len = length(inputs)
        for i = 1:(2^(num_inputs - 1))
            for j = 1:(num_inputs - 1)
                insert!(inputs, (i - 1) * (2 * num_inputs) + (num_inputs - 1) + j, inputs[(i - 1) * (2 * num_inputs) + j])
            end
            insert!(inputs, (i - 1) * (2 * num_inputs) + num_inputs, 1)
            insert!(inputs, (i - 1) * (2 * num_inputs) + (2 * num_inputs), 0)
        end
    end
end



function init_then_evolve()
    num_inputs = 3
    num_targets = 4
    inputs = []
    make_inputs(num_inputs, inputs)
    inputs = reshape(inputs, num_inputs, 2^num_inputs)
    inputs = transpose(inputs)
    config_vals::Config.Type_Config_Values = Config.Type_Config_Values()
    config_vals.logic_network_inputs = inputs
    target = rand(0:1, 2^num_inputs)
    targets = []
    append!(targets, target)
    for i = 1:(num_targets - 1)
        varied_target = deepcopy(varied_target, target)
        indeces = []
        index = 0
        while (index == 0) | (index in indeces)
            index = rand(1:2^num_inputs)
        end
        varied_target[index] = 1 - varied_target[index]
        append!(targets, varied_target)
    end
    targets = reshape(targets, 2^num_inputs, num_targets)
    targets = transpose(targets)
    println(targets)
    
    #evolve(config_vals)
end


init_then_evolve()
