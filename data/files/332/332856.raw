include("config.jl")
include("preallocation.jl")
include("genotype.jl")
include("population.jl")


import Preallocation
import Genotype
import Config
import Population


function evolve()

    config_vals::Config.Type_Config_Values = Config.Type_Config_Values()

    setup(config_vals)
    
    for repetition = 1:config_vals.num_experiment_repetitions
        population::Population.Type_Population = Population.make_population(config_vals)    
        population.target_number = 1
        generation = 0
        for generation = 1:config_vals.num_generations
            if (generation % config_vals.generations_per_target_switch) == 0
                Population.switch_target(population, config_vals, repetition, generation)
            end
            Population.breed_and_exterminate(population, config_vals, generation)
            Population.print_stats(population, config_vals, repetition, generation)
        end
    end

end

function setup(config_vals::Config.Type_Config_Values)
    if (parse(Int, ARGS[1]) % 2) == 0
        config_vals.max_threshold = 3
        config_vals.min_threshold = 3
        config_vals.max_weight = 2
        config_vals.min_weight = -2
        config_vals.max_num_connections = 10
        config_vals.min_num_connections = 1
        config_vals.network_timesteps = 6
        config_vals.initial_max_num_connections = 10
        config_vals.initial_min_num_connections = 1
        println("threshold")
    else
        config_vals.max_threshold = -2
        config_vals.min_threshold = -2
        config_vals.max_weight = -1
        config_vals.min_weight = -1
        config_vals.max_num_connections = 2
        config_vals.min_num_connections = 2
        config_vals.network_timesteps = 6
        config_vals.initial_max_num_connections = 2
        config_vals.initial_min_num_connections = 2
        println("NAND")
    end
    num_differences = rand(1:8)
    target = zeros(Int32, 2, 16)
    for i = 1:16
        target[1, i] = rand(Int32(0):Int32(1))
        target[2, i] = target[1, i]
    end
    for i = 1:num_differences
        done = false
        while !done
            index = rand(1:16)
            if target[2, index] == target[1, index]
                target[1, index] = 1 - target[1, index]
                done = true
            end
        end
    end
    config_vals.logic_network_outputs = target
    println(num_differences)
    println(target)
end
    
evolve()

