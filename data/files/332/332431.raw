include("config.jl")
include("fixed_genotype.jl")

import Fixed_Genotype
import Config

function evolve_local_search()
    config_vals::Config.Type_Config_Values = Config.Type_Config_Values()
    start_genotype::Fixed_Genotype.Type_Genotype = Fixed_Genotype.make_random_genotype(config_vals)
    genotypes::Array{Fixed_Genotype.Type_Genotype, 1} = []
    for i = 1:10000
        push!(genotypes, Fixed_Genotype.make_random_genotype(config_vals))
    end
    for genotype in genotypes
        Fixed_Genotype.copy_into(genotype, start_genotype)
    end
    
    dummy::Array{Float64, 1} = []
    j = 1
    for i = convert(Int32, 1):config_vals.num_generations
        if i % 5 == 0
            println("generation ", i)
        end
        for genotype in genotypes
            Fixed_Genotype.mutate(genotype, config_vals)
            if j == 1
                Fixed_Genotype.evaluate(genotype, config_vals.expression_1, config_vals, dummy)
            else
                Fixed_Genotype.evaluate(genotype, config_vals.expression_2, config_vals, dummy)
            end
            if genotype.fitness == 13.0
                println("target switch ", j)
                fitness_values::Array{Float64, 1} = []
                temp = Fixed_Genotype.make_random_genotype(config_vals)
                for i = 1:500
                    Fixed_Genotype.copy_into(temp, genotype)
                    Fixed_Genotype.mutate(temp, config_vals)
                    if j == 2
                        Fixed_Genotype.evaluate(temp, config_vals.expression_1, config_vals, dummy)
                    else
                        Fixed_Genotype.evaluate(temp, config_vals.expression_2, config_vals, dummy)
                    end
                    push!(fitness_values, temp.fitness)
                end
                fitness_values = sort(fitness_values)
                println("mutattions ", fitness_values)
                if j == 1
                    j = 2
                else
                    j = 1
                end
                for dead_genotype in genotypes
                    Fixed_Genotype.copy_into(dead_genotype, genotype)
                end
            end
        end 
    end
end

#=function evolve_random_walk()
    config_vals::Config.Type_Config_Values = Config.Type_Config_Values()
    primary_goal::Array{Int32, 1} = 
    
    start_genotype::Fixed_Genotype.Type_Genotype = Fixed_Genotype.make_random_genotype(config_vals)
    genotype_store::Array{Fixed_Genotype.Type_Genotype, 1} = []
    for i = 1:10000
        push!(genotype_store, Fixed_Genotype.make_random_genotype(config_vals))
    end
end=#

evolve_random_walk()
