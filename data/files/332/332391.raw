include("config.jl")
include("genotype.jl")

import Genotype
import Config

max_num_nodes = 5000

config_vals = Config.Type_Config_Values()
temp = Genotype.make_random_genotype(config_vals)
genotypes = [temp,]
for i = 1:max_num_nodes
    temp = Genotype.make_random_genotype(config_vals)
    push!(genotypes, temp)
end
num_edges = 0
num_nodes = 0
dictionary = Dict{Genotype.Type_Genotype, Int64}()
file_lines = ["<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n", 
              "<gexf xmlns=\"http://www.gexf.net/1.2draft\" xmlns:viz=\"http://www.gexf.net/1.1draft/viz\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\" version=\"1.2\">",
              "<graph>\n",
              "<nodes>\n",
              "</nodes>\n",
	      "<edges>\n",
              "</edges>\n",
              "</graph>\n",
              "</gexf>\n"]

function enumerate()
    global num_edges
    global num_nodes
    global dictionary
    global file_lines
    global max_num_nodes
    
    start_genotype::Genotype.Type_Genotype = Genotype.make_random_genotype(config_vals)
    Genotype.run_GRN(start_genotype, config_vals, convert(Int32, 0))
    dictionary[start_genotype] = num_nodes
    add_node_xml(config_vals, start_genotype, num_nodes)
    num_nodes += 1

    generate_genotypes(config_vals, start_genotype, 1, 2)

    outfile = open("out.gexf", "w")

    for line in file_lines
        write(outfile, line)
    end
end

function generate_genotypes(config_vals::Config.Type_Config_Values, parent::Genotype.Type_Genotype, node_depth::Int64, edge_depth::Int64)
    global num_edges
    global num_nodes
    global dictionary
    global file_lines
    global max_num_nodes

    parent_index = dictionary[parent]
    for i = 1:parent.num_nodes
        temp = genotypes[num_nodes]
        Genotype.copy_into(temp, parent)
        if temp.activations[i] == 0
            temp.activations[i] = 1
        else
            temp.activations[i] = 0
        end
        Genotype.run_GRN(temp, config_vals, convert(Int32, 0))
        add_node(config_vals, temp, parent, node_depth, edge_depth)
    end
    for i = 1:parent.num_nodes
        for j = config_vals.min_threshold:config_vals.max_threshold
            temp = genotypes[num_nodes]
            Genotype.copy_into(temp, parent)
            if j != temp.thresholds[i]
                temp.thresholds[i] = j
                Genotype.run_GRN(temp, config_vals, convert(Int32, 0))
                add_node(config_vals, temp, parent, node_depth, edge_depth)
            else
                continue
            end
        end
    end
    # # for i = 1:parent.num_nodes
        
    # #     if temp.used_connections[i] < config_vals.max_num_connections
    # #         temp = genotypes[num_nodes]
    # #     Genotype.copy_into(temp, parent)
    # #         for 
    # #             temp.thresholds[i] = j
    # #             Genotype.run_GRN(temp, config_vals, convert(Int32, 0))
    # #             add_node(config_vals, temp, parent, depth)
    # #         else
    # #             continue
    # #         end
    # #     end
    # # end
    for i = 1:length(parent.weights)
        if parent.weights[i] != 0
            for j = config_vals.min_weight:config_vals.max_weight
                if j != parent.weights[i] & j != 0
                    temp = genotypes[num_nodes]
                    Genotype.copy_into(temp, parent)
                    temp.weights[i] = j
                    Genotype.run_GRN(temp, config_vals, convert(Int32, 0))
                    add_node(config_vals, temp, parent, node_depth, edge_depth)
                else
                    continue
                end
            end
        end
    end
end

function add_node(config_vals::Config.Type_Config_Values, genotype::Genotype.Type_Genotype, parent::Genotype.Type_Genotype, node_depth::Int64, edge_depth::Int64)
    global num_edges
    global num_nodes
    global dictionary
    global file_lines
    global max_num_nodes
    parent_index = dictionary[parent]
    Genotype.run_GRN(genotype, config_vals, convert(Int32, 0))
    index = get(dictionary, genotype, -1)
    if index == -1
        if (num_nodes < max_num_nodes) & (node_depth >= 0)
            dictionary[genotype] = num_nodes
            add_node_xml(config_vals, genotype, num_nodes)
            num_nodes += 1
            add_edge_xml(config_vals, num_nodes - 1, parent_index, num_nodes, num_edges)
            num_edges += 1
            if edge_depth > 0
                generate_genotypes(config_vals, genotype, node_depth - 1, edge_depth - 1)
            end
        end
    else
        add_edge_xml(config_vals, index, parent_index, num_nodes, num_edges)
        num_edges += 1
    end
end

function add_node_xml(config_vals::Config.Type_Config_Values, genotype::Genotype.Type_Genotype, num_nodes)
    Genotype.run_GRN(genotype, config_vals, convert(Int32, 0))
    num_bits_per_color = Int(floor(config_vals.max_num_nodes / 3))
    if (config_vals.max_num_nodes -  3 * num_bits_per_color) == 0
        blue = compute_color_value(genotype, 1, num_bits_per_color)
        blue *= 2.0^(8 - num_bits_per_color)
        green = compute_color_value(genotype, (num_bits_per_color + 1), (2 * num_bits_per_color))
        green *= 2.0^(8 - num_bits_per_color)
        red = compute_color_value(genotype, (2 * num_bits_per_color) + 1, 3 * num_bits_per_color)
        red *= 2.0^(8 - num_bits_per_color)
    elseif (config_vals.max_num_nodes - 3 * num_bits_per_color) == 1
        blue = compute_color_value(genotype, 1, num_bits_per_color)
        blue *= 2.0^(8 - num_bits_per_color)
        green = compute_color_value(genotype, num_bits_per_color + 1, 2 * num_bits_per_color)
        green *= 2.0^(8 - num_bits_per_color)
        red = compute_color_value(genotype, (2 * num_bits_per_color) + 1, 3 * num_bits_per_color + 1)
        red *= 2.0^(8 - num_bits_per_color - 1)
    else
        blue = compute_color_value(genotype, 1, num_bits_per_color)
        blue *= 2.0^(8 - num_bits_per_color)
        green = compute_color_value(genotype, num_bits_per_color + 1, 2 * num_bits_per_color + 1)
        green *= 2.0^(8 - num_bits_per_color - 1)
        red = compute_color_value(genotype, (2 * num_bits_per_color) + 2.0, 3 * num_bits_per_color + 2.0)
        red *= 2.0^(8 - num_bits_per_color - 1)
    end
    red = Int(round(red/2))
    green = Int(round(green/2))
    blue = Int(round(blue/2))
    red += 120
    green += 120
    blue += 120
    insert!(file_lines, 5 + 3 * num_nodes, string("<node id=\"", num_nodes, "\" label=\"", red, green, blue,"\" genotype=\"",red, green, blue ,"\">\n"))
    insert!(file_lines, 6 + 3 * num_nodes, string("<viz:color r=\"", red,"\" g=\"", green,"\" b=\"", blue,"\" a=\"0.9\"/>\n"))
    insert!(file_lines, 7 + 3 * num_nodes, "</node>\n")
end

function add_edge_xml(config_vals::Config.Type_Config_Values, source::Int64, destination::Int64, 
                      num_nodes::Int64, num_edges::Int64)
    insert!(file_lines, 7  + 3 * num_nodes + num_edges, string("<edge id=\"", num_edges,"\" source=\"", source,"\" target=\"", destination,"\" />\n"))
end

function compute_color_value(genotype::Genotype.Type_Genotype, start_index::Int64, end_index::Int64) 
    color_value::Int64 = 0
    j = 0
    for i = start_index:end_index
        color_value += genotype.activations[(config_vals.GRN_timesteps * config_vals.max_num_nodes)  + i] * 2^(j)
        j += 1
    end
    return color_value
end

enumerate()
