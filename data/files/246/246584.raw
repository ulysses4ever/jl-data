using ApproxSets, FactCheck
import ApproxSets.issetapprox

# Define some approximation methods for types that appear in tests
issetapprox(i::Real,j::Real,tol=1e-6) = (abs(i-j) <= tol)
issetapprox(i::Vector{Float64}, j::Vector{Float64}, tol=1e-6) = 
    (norm(i-j) <= tol)
issetapprox(i::ASCIIString, j::ASCIIString, tol=0) =
    abs(length(i) - length(j)) <= tol

facts("Construction") do
    context("Empty") do
        s = ApproxSet()
        @fact length(s) => 0
        @fact eltype(s) => Any 
        s = ApproxSet(tol=Inf)
        @fact length(s) => 0
        @fact eltype(s) => Any 
    end
    
    context("Single item") do
        s = ApproxSet(5.0)
        @fact length(s) => 1
        @fact eltype(s) => Float64
        @fact collect(s) => [5.0]
        s = ApproxSet('a')
        @fact length(s) => 1
        @fact eltype(s) => Char
        @fact collect(s) => ['a']
        s = ApproxSet([1.2,3.0])
        @fact length(s) => 1
        @fact eltype(s) => Vector{Float64}
    end

    context("Multiple items") do
        s = ApproxSet(5.0, 6.0, 7.0)
        @fact length(s) => 3
        @fact eltype(s) => Float64
        s = ApproxSet(5, 7.0)
        @fact length(s) => 2
        @fact eltype(s) => Real
        s = ApproxSet(5.0, nextfloat(5.0), tol=0.0)
        @fact length(s) => 2
        @fact eltype(s) => Float64
        s = ApproxSet(5.0, nextfloat(5.0), tol=1e-6)
        @fact length(s) => 1
        @fact eltype(s) => Float64
        s = ApproxSet(5.0, nextfloat(5.0))
        @fact length(s) => 1
        @fact eltype(s) => Float64
    end
end

facts("Pushing") do
    context("Fallbacks") do
        s = ApproxSet(:A,:B,:C)
        @fact length(s) => 3
        push!(s,:A)
        @fact length(s) => 3
        push!(s,:A,tol=:foo)  # should not do anything
        @fact length(s) => 3
        push!(s,:D,tol=:foo)  # should not do anything
        @fact length(s) => 4
    end

    context("Tol provided at construction") do
        s = ApproxSet([0.0,0.0],tol=1e-6)
        @fact length(s) => 1
        # Test using inbuilt tolerance
        push!(s, [1.0,1.0])
        @fact length(s) => 2
        # Test overriding tolerance
        push!(s, [0.5,0.5], tol=10)
        @fact length(s) => 2
    end

    context("No tol at construction") do
        s = ApproxSet("AB","BC","CDA")
        @fact length(s) => 2
        # Test using inbuilt tolerance (there is none)
        push!(s, "FEDA")
        @fact length(s) => 3
        push!(s, "FED")
        @fact length(s) => 3
        # Test providing a tolerance when there is no default one
        push!(s, "FEDAF", tol=1)
        @fact length(s) => 3
        push!(s, "FEDAFG", tol=1)
        @fact length(s) => 4
    end
end

facts("Set operations") do
    context("union and union!") do
        s1 = ApproxSet(:A,:B)
        s2 = ApproxSet(:B,:C)
        union!(s1,s2)
        @fact length(s1) => 3
        @fact length(s2) => 2
        s3 = ApproxSet(:C,:D)
        s4 = union(s1,s3)
        @fact length(s1) => 3
        @fact length(s3) => 2
        @fact length(s4) => 4
    end
end

FactCheck.exitstatus()