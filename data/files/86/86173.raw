module GlobTest
include("../src/Glob.jl")
using .Glob
using Base.Test

if VERSION < v"0.3-"
    macro test_throws(a,b)
        :( Base.Test.@test_throws($b) )
    end
end

# various unit tests, in no particular order

@test !ismatch(fn"abc*", "ABXABXAB")
@test ismatch(fn"AB*AB*AB", "ABXABXAB")
@test ismatch(fn"AB*AB*AB", "ABXABAB")
@test !ismatch(fn"AB*AB*AB", "AABAB")
@test ismatch(fn"AB*AB*AB", "ABABAB")
@test ismatch(fn"AB*AB*B", "ABABAB")
@test ismatch(fn"AB*AB*", "ABABAB")
@test ismatch(fn"AB*AB*??", "ABABAB")
@test !ismatch(fn"AB*AB*???", "ABABAB")
@test ismatch(fn"AB*AB*??***", "ABABAB")
@test ismatch(fn"AB*AB*??***", "ABABABC")
@test ismatch(fn"AB*AB*??***", "ABABABCDEFG")
@test ismatch(fn"?AB*AB*??***", ".ABABABCDEFG")
@test !ismatch(fn"?AB*AB*??***"p, ".ABABABCDEFG")
@test_throws ErrorException Glob.FilenameMatch("?AB*AB*??***","z")
@test ismatch(fn"[abc]", "a")
@test !ismatch(fn"[abc]", "A")
@test ismatch(fn"[abc]"i, "A")
@test ismatch(fn"[abc]", "b")
@test ismatch(fn"[abc]", "c")
@test !ismatch(fn"[abc]", "x")
@test !ismatch(fn"[a-d]", "x")
@test ismatch(fn"[a-d]", "a")
@test ismatch(fn"[a-d]", "d")
@test !ismatch(fn"[a--]", "e")
@test ismatch(fn"[--e]", "e")
@test !ismatch(fn"[f-e]", "e")
@test !ismatch(fn"[g-e]", "e")
@test !ismatch(fn"[g-f]", "e")
@test ismatch(fn"[a-f]", "e")
@test ismatch(fn"[a-e]", "e")
@test ismatch(fn"[f-ee]", "e")
@test !ismatch(fn"[A-Z]", "e")
@test ismatch(fn"[A-z]", "e")
@test_throws ErrorException ismatch(fn"[[:a:]]", "e")
@test !ismatch(fn"[\[:a:]]", "e")
@test_throws ErrorException ismatch(fn"[\\[:a:]]", "e")
@test ismatch(fn"[\[:a-e:]]", "e]")
@test ismatch(fn"[\[:a-e:]", "e")
@test !ismatch(fn"[\[:a-e:xxxx", "e")
@test ismatch(fn"[\[:a-e:xxxx-]", "e")
@test ismatch(fn"[a-]", "a")
@test ismatch(fn"[a-]", "-")
@test !ismatch(fn"[a-]", "b")
@test ismatch(fn"[!a-]", "b")
@test !ismatch(fn"[!a-]", "a")
@test ismatch(fn"[!a]", "!")
@test !ismatch(fn"[!!]", "!")
@test !ismatch(fn"[!a]", "a")
@test ismatch(fn"[!a]", "b")
@test !ismatch(fn"[][]", "")
@test ismatch(fn"[]", "[]")
@test ismatch(fn"[][]", "[")
@test ismatch(fn"[][]", "]")
@test !ismatch(fn"[][]", "x")
@test !ismatch(fn"[]-[]", "x")
@test !ismatch(fn"[]-[]", "-")
@test !ismatch(fn"[]-[]", "\\")
@test ismatch(fn"[\[-\]]*", "][")
@test ismatch(fn"[\]]*", "][")
@test ismatch(fn"[\[-\]]*", "][")
@test ismatch(fn"[[-\]]*", "][")
@test ismatch(fn"base/[\[-\]]*"dp,"base/][x")
@test ismatch(fn"[\[-\]]", "\\")
@test ismatch(fn"[[-\]]", "\\")
@test ismatch(fn"[---]", "-")
@test !ismatch(fn"[!---]", "-")
@test ismatch(fn"[!---]", "0")
@test !ismatch(fn"[---a-zA-Z]", "0")
@test !ismatch(fn"[---a-zA-Z:]", "0")
@test !ismatch(fn"[---!]", "0")
@test ismatch(fn"[---!]", "!")
@test !ismatch(fn"[---!]", "a")
@test !ismatch(fn"[---!]", "\0")
@test ismatch(fn"ab/c/d"dp, "ab/c/d")
@test !ismatch(fn"ab/c/d"dp, "ab/c?d")
@test !ismatch(fn"ab/./d"dp, "ab/?/d")
@test ismatch(fn"[a-z]"i, "B")
@test !ismatch(fn"[a-z]"i, "_")
@test ismatch(fn"[A-z]"i, "_")
@test !ismatch(fn"[a-Z]"i, "_")
@test !ismatch(fn"#[a-Z]%"i, "#a%")
@test ismatch(fn"#[α-ω]%"i, "#Γ%")
@test !ismatch(fn"#[α-ω]%", "#Γ%")
@test ismatch(fn"#[α-ω]%", "#γ%")
@test !ismatch(fn"a?b"d, "a/b")
@test ismatch(fn"a?b", "a/b")
@test !ismatch(fn"?b"p, ".b")
@test ismatch(fn"?b", ".b")
@test ismatch(fn"?/?b", "./.b")
@test !ismatch(fn"?/?b"p, "./.b")
@test ismatch(fn"./?b"p, "./.b")
@test !ismatch(fn"./?b"pd, "./.b")
@test ismatch(fn"./.b"pd, "./.b")
@test !ismatch(fn"?/.b"pd, "./.b")

@test !ismatch(fn"\?", "\\?")
@test ismatch(fn"\?", "?")
@test ismatch(fn"\?"e, "\\!")
@test !ismatch(fn"\?"e, "?")

@test tuple(map(typeof, glob"ab/?/d".pattern)...) <: (String, Glob.FilenameMatch, String)
@test tuple(map(typeof, glob"ab/*/d".pattern)...) <: (String, Glob.FilenameMatch, String)
@test length(glob"ab/[/d".pattern) == 3
@test length(glob"ab/[/]d".pattern) == 3
@test tuple(map(typeof, glob"ab/[/]d".pattern)...) <: (String, String, String)
@test tuple(map(typeof, glob"ab/[/d".pattern)...) <: (String, String, String)
@test tuple(map(typeof, glob"ab/[]/d".pattern)...) <: (String, String, String)
@test tuple(map(typeof, glob"ab/[]]/d".pattern)...) <: (String, Glob.FilenameMatch, String)

@test glob("*") == filter(x->!beginswith(x,'.'), readdir()) == readdir(glob"*")
@test glob(".*") == filter(x->beginswith(x,'.'), readdir()) == readdir(glob".*")
@test isempty(Glob.glob("[.]*"))
@test glob([r".*"]) == readdir()
@test glob([".", r".*"]) == map(x->joinpath(".",x), readdir())
@test all([!beginswith(x,'.') for x in Glob.glob("*.*")])

function test_string(x1)
    x2 = string(eval(parse(x1)))
    x1 == x2 ? nothing : error(string(
        "string test failed:", 
        "\noriginal: ", x1,
        "\n\nstringify: ", x2))
end
test_string("""Glob.GlobMatch({"base",r"h\.+"})""")
test_string("""glob"base/*/a/[b]\"""")
test_string("""fn"base/*/a/[b]\"ipd""")

end
