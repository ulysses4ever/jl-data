# FASTA in Julia for the Computer Language Benchmark Game
# Contributed by Jay Bromley
function genrandom(ia=3877, ic=29573, im=139968)
    seed = 42
    imf = float(im)
    while true
        seed = (seed * ia + ic) % im
        produce(seed / imf)
    end
end

function make_cumulative(table)
    probs = zeros(Float64, length(table))
    chars = zeros(Char, length(table))
    prob = 0.0
    index = 1
    for (ch, p) in table
        prob += p
        @inbounds probs[index] = prob
        @inbounds chars[index] = ch
        index += 1
    end
    return (probs, chars)
end

function bisect(a, x)
    total = zero(x)
    index = 1
    while a[index] < x && index <= endof(a)
        index += 1
    end
    return index
end

function repeat_fasta(src, n)
    width = 60
    r = length(src)
    s = string(repeat(src, 2), src[1:n % r])
    for j in 0:div(n, width) - 1
        i = 1 + (j * width % r)
        println(s[i:i + width - 1])
    end
    if n % width != 0
        println(s[end - (n % width) + 1:end])
    end
 end

function random_fasta(table, n, gr)
    width = 60
    r = 1:width
    probs, chars = make_cumulative(table)
    for j in 1:div(n, width)
        println(join([chars[bisect(probs, gr())] for i in r], ""))
    end
    if n % width != 0
        print(join([chars[bisect(probs, gr())] for i in 1:n % width]))
    end
end


function run(n)
    println(">ONE Homo sapiens alu")
    alu = string("GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG",
                 "GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA",
                 "CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT",
                 "ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA",
                 "GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG",
                 "AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC",
                 "AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA")
    repeat_fasta(alu, n * 2)

    println(">TWO IUB ambiguity codes")
    iub = [p for p in zip("acgtBDHKMNRSVWY",
                          [0.27, 0.12, 0.12, 0.27, 0.02, 0.02, 0.02, 0.02,
                           0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02,])]
    rgt = Task(genrandom)
    gr = () -> consume(rgt)
    random_fasta(iub, n * 3, gr)

    println(">THREE Homo sapiens frequency")
    homosapiens = [('a', 0.3029549426680), ('c', 0.1979883004921),
                   ('g', 0.1975473066391), ('t', 0.3015094502008)]
    random_fasta(homosapiens, n * 5, gr)
end

iterations = int(ARGS[1])
run(iterations)
