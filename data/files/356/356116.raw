const BLANK = 0
const ONES = 0b1111111110

InBlock = Array(Int, 81)
InRow = Array(Int, 81)
InCol = Array(Int, 81)

SeqPtr = 1
Sequence = Array(Int, 81)
println("start $SeqPtr")
Entry = Array(Int, 81)
Block = Array(Int, 9)
Row = Array(Int, 9)
Col = Array(Int, 9)

Count = 0
LevelCount = Array(Int, 81)

function initialize()
  for i = 1:9; for j = 1:9
      Square = 9 * (i - 1) + j
      InRow[Square] = i
      InCol[Square] = j
      InBlock[Square] = floor((i-1)/3) * 3 + floor((j-1)/3) + 1
    end

    for i = 1:81
      Sequence[i] = i
      Entry[i] = BLANK
      LevelCount[i] = 0
    end

    for i = 1:9
      Block[i] = ONES;
      Row[i] = ONES;
      Col[i] = ONES;
    end
  end
  println("Initialize $SeqPtr")
end

function initentry(puzzle)
  global SeqPtr
  println(SeqPtr)
  for i = 1:9; for j = 1:9
      Square = 9 * (i-1) + j
      valbit = 1 << puzzle[i,j]

      Entry[Square] = valbit
      Block[InBlock[Square]] &= ~valbit
      Col[InCol[Square]] &= ~valbit
      Row[InRow[Square]] &= ~valbit

      SeqPtr2 = SeqPtr
      println("BEFORE while: (i,j) = ($i,$j) SeqPtr $SeqPtr SeqPtr2 $SeqPtr2")
      while SeqPtr2 < 81 && Sequence[SeqPtr2] != Square
        SeqPtr2 += 1
      end
      println("AFTER while: SeqPtr $SeqPtr SeqPtr2 $SeqPtr2")
      println("Before swap $SeqPtr")
      swapseqentries(SeqPtr, SeqPtr2)
      SeqPtr += 1
    end
  end
end

function swapseqentries(S1, S2)
  Sequence[S1], Sequence[S2] = Sequence[S2], Sequence[S1]
end

function main()
  initialize()
  initentry()
end
