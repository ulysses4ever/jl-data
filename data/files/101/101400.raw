## To use perseusWin.exe, I change the last part of the code.
#### The following function transfomrs the information of filtered complex into a fixed format:
#### The first row indicates how many "coordinates" are used to represent a vertex
#### From the 2nd row on, each row represents a simplex, and in each row,
#### (1) the first entry indicates the birth time of the simplex,
#### (2) the last entry indicates the dimension of the simplex,
#### (3) in-between the first and last entry (exclusively) is the representation of the simplex.
function write_perseus_simplex_file(faces, filtLevels, baseFileName)
  # See https://www.sas.upenn.edu/~vnanda/perseus/ for file formet
  # faces: rows are binary strings corresponding to faces, cols are vertices
  # filtLevels: vector with natural number filtration levels for the rows in faces
  # baseFileName: name of the output file
    outfile = open("$baseFileName.txt", "w");

    writedlm(outfile, "1");             # dimension of data points for perseus -- ignore but leave here

                                          # threshold parameters
    for i=1:size(faces,1);
        writedlm(outfile, [sum(faces[i,:])-1 find(faces[i,:])' filtLevels[i]], ' ');
    end
                                                    # matrix
    close(outfile);
end



## This function computes the persistence intervals (over F_2) of a filtered complex
## The inputs are
## (1) a filtered complex of type FiltrationOfSimplicialComplexes,
## (2) an upper bound for the computation of considered dimensions H_k
##     (i.e. we only compute H_k for k less than or equal to maxdim)
## The output is an array,
## whose ith entry is the (i-1)-dimensional persistence intervals.
function Filtration2PersistenceIntervals(FS::FiltrationOfSimplicialComplexes, maxdim)
    ## This box is transforming a filtered complex into binary expression
    baseFileName="Temp"
    FacesMatrix=zeros(Int,length(FS.birth),length(FS.vertices))
    for i=1:length(FS.birth)
        for j=1:length(FS.vertices)
            if j in (FS.faces)[i]
                FacesMatrix[i,j]=1
            end
        end
        end
    FacesMatrix

    ## Use write_perseus_simplex_file to transform FacesMatrix and birth
    ## into the required format used by perseusWin.exe
    write_perseus_simplex_file(FacesMatrix, FS.birth, baseFileName)

    ## Use perseusWin.exe to compute the persistence intervals and store them in txt files
    TheLocationOfPerseusExecutable="/Users/vui1/repositories/Simplicial/src/HomologyComputations/perseus/"
    print("Computing simplicial homology. This may take some time and memory..")
    if is_windows()
        run(`perseusWin.exe nmfsimtop $baseFileName.txt $baseFileName`)
    elseif is_linux()
        perseus=TheLocationOfPerseusExecutable*"perseusLin"
        # run(`chmod +x perseusLin`)
    elseif is_apple()
        perseus=TheLocationOfPerseusExecutable*"perseusMac"
        run(`chmod +x $perseus`)
    else
         error("Unsupported operating system. Cannot run perseus on this machine.")
    end
     run(`$perseus nmfsimtop $baseFileName.txt $baseFileName`)
     println("..done!")
    ## Read from the result txt files the persistence intervals and store them into the array Intervals
    Intervals=Any[]
    for k=0:maxdim
        try
            push!(Intervals,readdlm("$baseFileName"*"_$k.txt"))
        end
    end

    ## Remove the files generated by write_perseus_simplex_file and perseusWin.exe
    k=0
    while k>=0
        try
            rm("$baseFileName"*"_$k.txt")
            k=k+1
        catch
            break
        end
    end
    rm("$baseFileName.txt")
    rm("$baseFileName"*"_betti.txt")

    ## Return the desired resulting array
    Intervals
end
