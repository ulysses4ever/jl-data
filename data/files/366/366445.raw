#!/usr/bin/env julia

###################################################
# Granular dynamics simulator by Anders Damsgaard #
###################################################

#=
Add Sphere to your julia path by:
    push!(LOAD_PATH, "/Users/ad/src/julia/sphere")

If this statement is added to `~/.juliarc.jl`, it will become persistent between
julia sessions. Note that the `~` symbol for the home folder does not seem to
work (julia v. 0.4.1) in the `.juliarc.jl` file.

Import package contents with:
    import Sphere

=#


module Sphere

#export addGrain
#export getPosition

#include("vectors.jl")
#include("grain.jl")
#include("contact_search.jl")
#include("interaction.jl")


## Global arrays for general simulation data
g_position = Array{Float64, 2}[]
g_velocity = Array{Float64, 2}[]
g_acceleration = Array{Float64, 2}[]
g_force = Array{Float64, 2}[]

g_rotational_position = Array{Float64, 2}[]
g_rotational_velocity = Array{Float64, 2}[]
g_rotational_acceleration = Array{Float64, 2}[]
g_torque = Array{Float64, 2}[]

g_density = Float64[]
g_radius = Float64[]

g_time = Float64
g_time_total = Float64
g_time_step = Float64
g_file_time_step = Float64 


## Functions to create and delete grains, and set and retrieve their parameter
## values
"""
Adds a grain to the simulation. Example:

    Sphere.addSphericalGrain([1.0 2.0 3.0], 1.0)
"""
function addSphericalGrain(
    position::Array{Float64, 2},
    radius::Float64 = 1.0,
    velocity::Array{Float64, 2} = [0. 0. 0.],
    acceleration::Array{Float64, 2} = [0. 0. 0.],
    force::Array{Float64, 2} = [0. 0. 0.],
    rotational_position::Array{Float64, 2} = [0. 0. 0.],
    rotational_velocity::Array{Float64, 2} = [0. 0. 0.],
    rotational_acceleration::Array{Float64, 2} = [0. 0. 0.],
    torque::Array{Float64, 2} = [0. 0. 0.],
    density::Float64 = 2600)

    push!(g_position, position)
    push!(g_radius, radius)
    push!(g_velocity, velocity)
    push!(g_acceleration, acceleration)
    push!(g_force, force)

    push!(g_rotational_position, rotational_position)
    push!(g_rotational_velocity, rotational_velocity)
    push!(g_rotational_acceleration, rotational_acceleration)
    push!(g_torque, torque)

    push!(g_density, density)
    volume = 4.0/3.0*pi*g_radius[i]^3
    push!(g_volume, volume)
    push!(g_mass, density*volume)
    push!(g_rotational_inertia, 0.0) # TODO
end

function removeGrain(i::Int)
    delete!(g_position, i)
    delete!(g_radius, i)
end

## Time integration functions
function updateKinematics(i::Int)
    g_acceleration[i] = g_force[i]/g_mass[i]
    vel_new::Array{Float64, 2} = g_velocity[i] + g_acceleration[i]*g_time_step
    g_position += g_velocity[i]*g_time_step
        + 0.5*g_acceleration[i]*g_time_step^2
    g_velocity[i] = velocity_new
end




end # module end
