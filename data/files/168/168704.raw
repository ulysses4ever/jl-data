abstract _Function
abstract Vectorizable <: _Function

function call{T1}(fn::Vectorizable, v1::Vector{T1})
	return T1[fn(v1[i]) for i in 1:length(v1)]
end
function call{T1,T2}(fn::Vectorizable, v1::Vector{T1}, v2::Vector{T2})
	RT = promote_type(T1,T2) #For type stability!
	return RT[fn(v1[i],v2[i]) for i in 1:length(v1)]
end

#SECTION F: Function in need of vectorizing:
immutable MyAddFn <: Vectorizable; end
const myadd = MyAddFn()
function call(::MyAddFn, x::Number)
	return x-3
end
function call(::MyAddFn, x::Number, y::Number)
	return x+y+1
end

@show myadd(5,6)
@show myadd(collect(1:10),collect(21:30.0)) #Type stable
@show myadd(5)
@show myadd(collect(21:30.0))
:DONE

#==Would be nicer if Julia syntax allowed section F to be replaced with:

function myadd <: Vectorizable #Implicitly, functions are <: Function
function myadd(x::Number)
	return x-3
end
function myadd(x::Number, y::Number)
	return x+y+1
end



==#
