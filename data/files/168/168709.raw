#include("units_test_angles.jl")

#-------------------------------------------------------------------------------
#Main Units module
#-------------------------------------------------------------------------------
module Units
export val, Unit
export deg, rad, rev
export Angle, Degrees, Radians, Revolutions


#-----Unit Definitions-----
#NOTE: All Units must have a ".v" value and be immutable, for efficiency.
abstract Unit
val(x::Unit) = x.v
/{U<:Unit}(num::U, denom::U) = val(num)/val(denom)
+{U<:Unit}(x::U, y::U) = U(val(x)+val(y))
-{U<:Unit}(x::U, y::U) = U(val(x)-val(y))
*{U<:Unit}(x::U, f::Number) = U(val(x)*f)
*{U<:Unit}(f::Number, x::U) = x*f
/{U<:Unit}(x::U, f::Number) = U(val(x)/f)

#-----Angle Definitions-----
#Can this be generated by macro or something?
abstract Angle <: Unit
immutable type Degrees{T<:Number} <: Angle
	v::T
end
immutable type Radians{T<:Number} <: Angle
	v::T
end
immutable type Revolutions{T<:Number} <: Angle
	v::T
end

#Can this be made more generic (single line per convert)?
Base.convert(::Type{Degrees}, x::Radians) = Degrees(rad2deg(val(x)))
Base.convert{T}(::Type{Degrees{T}}, x::Radians) = Degrees(rad2deg(val(x)))
Base.convert(::Type{Radians}, x::Degrees) = Radians(deg2rad(val(x)))
Base.convert{T}(::Type{Radians{T}}, x::Degrees) = Radians(deg2rad(val(x)))
Base.convert(::Type{Radians}, x::Revolutions) = Radians(val(x)*(2π))
Base.convert{T}(::Type{Radians{T}}, x::Revolutions) = Radians(val(x)*(2π))
#...

#This can probably be made generic...
Degrees(x::Degrees) = x
Radians(x::Radians) = x
Revolutions(x::Revolutions) = x
Degrees(x) = convert(Degrees, x)
Radians(x) = convert(Radians, x)
Revolutions(x) = convert(Revolutions, x)

#Convenience:
const deg = Degrees(1.0)
const rad = Radians(1.0)
const rev = Revolutions(1.0)

end

#-------------------------------------------------------------------------------
#Sample functions: Simple
#-------------------------------------------------------------------------------

module Trigonometry
using Units

#Just demo with sin()
Base.sin(x::Radians) = sin(val(x))
Base.sin(x::Degrees) = sind(val(x)) #No problem getting more accurate version
Base.sin(x::Angle) = sin(Radians(x)) #"Auto-promote" any other type of angle
end

using Units
using Trigonometry

#-------------------------------------------------------------------------------
#Test code
#-------------------------------------------------------------------------------
@show ang1 = 45deg
@show ang2 = (π/4)rad
@show ang3 = (1/8)rev
@show sin(ang1)
@show sin(ang2)
@show sin(ang3)
e = sin(120*ang1)-sin(120*ang2)
@printf("Indeed there can be differences: %E\n", e)

:Done
