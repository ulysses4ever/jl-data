abstract Vectorizable
#Could easily have parameterized Vectorizable, but want to show inheritance case:
abstract Vectorizable2Arg <: Vectorizable

function call{T1,T2}(fn::Vectorizable2Arg, v1::Vector{T1}, v2::Vector{T2})
	RT = promote_type(T1,T2) #For type stability!
	return RT[fn(v1[i],v2[i]) for i in 1:length(v1)]
end

#Function in need of vectorizing:
immutable MyAddType <: Vectorizable2Arg; end
const myadd = MyAddType()
function call(::MyAddType, x::Number, y::Number)
	return x+y+1
end

@show myadd(5,6)
@show myadd(collect(1:10),collect(21:30.0)) #Type stable

#==But this would be significantly nicer if Julia syntax allowed:
abstract Vectorizable <: Function
abstract Vectorizable2Arg <: Vectorizable

function call{T1,T2}(fn::Vectorizable2Arg, v1::Vector{T1}, v2::Vector{T2})
	RT = promote_type(T1,T2) #For type stability!
	return RT[fn(v1[i],v2[i]) for i in 1:length(v1)]
end

#Note: by default, functions would be <: Function:
function myadd(x::Number, y::Number) <: Vectorizable2Arg
	return x+y+1
end

==#
