###################################################
## Brain type
###################################################

 """ Most basic implementation of a neural network,
 maps node_types into learned weights.
 """
type Brain
  learned_weights::Array{Float64}
  discount::Float64
  step_size::Float64

  function Brain(weights::Array{Float64};
            discount::Float64 = 0.99, step_size::Float64 = 0.01)
    obj = new()
    obj.learned_weights = weights
    obj.discount = discount
    obj.step_size = step_size
    return obj
  end

end

function update_weights(brain::Brain, prev_state::Array{Int64}, reward::Float64, new_state::Array{Int64})
  delta = reward + brain.discount * dot(new_state, brain.learned_weights) - dot(prev_state, brain.learned_weights)
  learned_weights += delta * brain.step_size * prev_state
  update_step_size(brain)
end

function update_step_size(brain::Brain)
  pass
end

function weight(brain::Brain, type_node_id)
  return brain.learned_weights[type_node_id]
end
