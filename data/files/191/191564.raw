function pearson(v1,v2)
  sum1 = sum(v1)
  sum2 = sum(v2)
  
  sum1Sq = sum([v^2 for v in v1])
  sum2Sq = sum([v^2 for v in v2])
  
  pSum = sum([v1[i]*v2[i] for i=1:length(v1)])
  
  num = pSum-(sum1*sum2/length(v1))
  den = sqrt((sum1Sq-sum1^2/length(v1))*(sum2Sq-sum2^2/length(v1)))
  if den == 0
    return 0
  end
  
  return 1.0-num/den
end

function kmeans(rows,k)
  ranges = [(minimum([rows[i][j] for i=1:length(rows)])
            ,maximum([rows[i][j] for i=1:length(rows)]))
             for j=1:length(rows[1])]
  
  clusters=[[rand()*(ranges[i][2]-ranges[i][1])+ranges[i][1]
             for i=1:length(rows[1])]
              for j=1:k]
  
  lastmatches = None
  
  bestmatches = []
  
  for t=0:100
    println("Iteration $t")
    bestmatches = [Int64[] for i=1:k]
    row = ()
    for j=1:length(rows)
      row = rows[j]
      bestmatch=1
      for i=1:k
        d = pearson(clusters[i],row)
        if d < pearson(clusters[bestmatch],row)
          bestmatch = i
        end
      end
      push!(bestmatches[bestmatch],j)
    end
    if bestmatches == lastmatches
      break
    end
    lastmatches = bestmatches
    for i=1:k
      global avgs=[0.0 for i=1:length(rows[1])]
      if length(bestmatches[i])>0
        for rowid in bestmatches[i]
          for m=1:length(rows[rowid])
            avgs[m]+=rows[rowid][m]
          end
        end
        for j=1:length(avgs)
          avgs[j]/=length(bestmatches[i])
        end
      clusters[i]=avgs
      end
    end
  end
  return bestmatches
end

data=((7.858531603,5.340331066,2.529390216,1.438476883,6.638999116,5.400873863,9.152272414,5.457560306,6.43277072,8.580922811,0.515068337,8.123291214,7.548527285,3.590394835,0.521118916,0.36640464),
(4.021005973,0.49350955,5.098953822,4.327802844,5.780880007,2.895664516,3.764347127,3.250220602,3.82990388,3.346650165,0.433677853,6.71479002,7.730956674,2.362939359,2.552573281,7.287619134),
(5.933285129,2.721887492,2.96432898,1.31735636,3.395613947,5.592556417,0.11654142,2.39685755,4.753333027,8.909197056,6.915999953,4.27716372,5.595925411,5.025718646,6.046889208,1.662684874),
(9.721944369,3.110376535,1.722213237,4.305386209,7.414301611,4.826635991,7.484022931,3.385601841,2.706522701,3.100222768,4.272989398,3.577878738,6.17547639,6.614834022,4.109942057,9.449095821),
(5.392957537,9.103244145,4.832413894,7.49435251,5.186920963,2.0108404,9.3856192,0.702388965,1.877890371,4.051611531,5.682882491,0.059880066,1.762196744,1.245650292,9.858332013,4.31857385),
(8.573141312,0.702551302,9.40360747,3.424615938,2.395569053,7.925873034,1.654241447,3.609131984,7.906943829,2.661873385,5.541790113,8.602008278,8.632014372,2.026074236,1.872360669,2.311318225),
(1.291819928,5.085955375,1.652520127,3.751663368,2.667703467,9.535421963,0.731138562,0.806621992,5.26824787,8.544247228,5.171003371,0.361572401,9.375906909,0.283620118,7.202388481,5.3856848),
(9.364993739,1.349892193,1.089156348,9.492643901,0.760304893,9.05263935,7.312249259,1.931088047,8.915367565,6.849599866,5.88400693,9.23079428,9.406514842,3.380728903,3.961314648,3.254504348),
(3.958528688,2.174807521,4.644256537,4.356088642,0.828177374,8.289046559,9.836976519,5.819925181,2.017976307,9.19248241,4.179805273,2.961797457,1.023712401,9.97148398,5.560986172,8.81028815),
(4.427639432,7.905489956,8.744760966,5.07312745,6.287985181,3.079938132,5.891963656,2.581473743,4.13797087,8.561622849,5.399794742,3.663578749,1.1695276,6.275510767,9.763788763,5.715185913),
(8.680626971,5.730690881,5.85497282,8.256733458,3.792614829,3.045643201,0.432639301,4.440134321,1.862678762,1.923175264,5.600933115,9.052593346,4.759707767,2.467889091,4.51270497,8.135884664),
(5.033568953,1.049528075,5.568020132,8.947258449,1.653959239,4.335851711,8.962403381,9.327239348,4.506103755,7.512480704,9.504667095,1.652499583,2.565071391,0.722520885,7.671394761,1.99756189),
(9.293881795,2.183502533,3.684381112,6.06482449,6.021543044,8.430865485,0.885859079,9.230902753,5.816522741,7.94256176,0.99294681,3.976971716,4.526417425,1.961155229,2.515012561,3.945265772),
(5.996578753,5.546924034,5.108032895,3.776301242,3.45127327,5.877631743,6.284109401,3.384430543,3.571149936,6.78411795,4.194652323,4.26352386,4.202740874,8.510851186,1.299229575,8.621197893),
(3.838941729,8.651572615,3.803721175,1.957190106,3.528091885,8.195511373,0.389758127,9.98240797,6.954118815,3.385804199,0.339851029,1.823680468,6.369612038,0.694905102,3.167491441,7.801080985),
(2.718386929,1.843795919,2.059808281,7.560358134,1.600904736,2.615964517,0.517113126,0.447996987,9.796024428,5.373066847,2.035175886,3.912787348,9.145293047,4.805855014,7.369353045,1.675384521),
(6.621848009,6.024126114,6.071160047,3.248364916,1.517103184,8.372866972,3.038581518,5.610167584,1.24286882,4.54523096,5.379296247,7.69503448,2.62616507,1.451404671,1.686713417,3.936466443),
(7.941568994,6.641932226,8.64402009,2.119588122,1.102398064,3.519155553,5.995271034,8.243228001,6.614594343,1.814667392,2.955878935,6.190347235,6.558524781,3.212779072,6.380778751,5.70795886),
(1.992664227,3.672323157,6.654828499,0.008624776,3.233931867,3.004442907,2.051220836,1.269001573,5.713572787,5.878122044,5.898109269,5.804584066,3.429209151,1.693765364,0.223270276,2.154002152),
(5.491447069,8.394253375,3.15475547,5.016222747,8.646959335,5.788830615,5.833165358,5.468187459,5.015851965,9.305244302,3.855193422,7.930226613,5.100069577,1.902328919,5.653777664,5.79258051))

println(kmeans(data,4))