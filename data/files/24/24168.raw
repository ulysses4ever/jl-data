import Plots

"Convert a Vector of equal-length Vectors to a Matrix"
function vecvec_to_mat(x::Vector{Vector})
    n = length(x)
    p = length(x[1])
    mat = zeros(n, p)
    for i in 1:n
        mat[i, :] = x[i]'
    end
    mat
end


"""
### Plot the history of an OnlineStat
`traceplot{O<:OnlineStat}(v::Vector{O}, f::Function)`

For a Vector of OnlineStats (generate with `tracefit!()`),
create a traceplot by calling `Plots.plot(m::Matrix)` where the i-th row of `m` has
been generated by `f(v[i])`.  `f` must return a Vector.  See the `Plots` documentation
for supported plotting back-ends.

### Example

This plots the coefficients of a stochastic gradient descent model

`o = SGModel(size(x,2))`

`traceplot(tracefit!(o, batchsize, x, y), StatsBase.coef)`
"""
function traceplot{O <: OnlineStat}(v::Vector{O}, f::Function)
    mat = vecvec_to_mat(Vector[f(vi) for vi in v])
    nvec = Int[nobs(vi) for vi in v]
    plt = Plots.plot(nvec, mat)
end




# TEST
# n, p = 1_000_000, 5
# x = randn(n, p)
# β = vcat(1:p) - p/2
# y = x*β + randn(n)
# o = OnlineStats.SGModel(p)
# v = OnlineStats.tracefit!(o, 1000, x, y)
# OnlineStats.traceplot(v, coef)
