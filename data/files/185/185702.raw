include("typographyaux.jl")

export text, textFont, textSize
export textWidth, textHeight, textAscent, textDescent

## Loading & Displaying

#loadFont

function text(str::String, x, y)
	x = ((x+1)/2)*state.width
	y = ((y+1)/2)*state.height
	switchShader("fontDrawing")
	glActiveTexture(GL_TEXTURE1)
	# glBindBuffer(GL_ARRAY_BUFFER, globjs.vbos[2])
	for c in str
		ch = fontState.characters[c]

		xpos = x + ch.bearing[1] * state.textSize
        ypos = y - (ch.size[2] - ch.bearing[2]) * state.textSize

        w = ch.size[1] * state.textSize
        h = ch.size[2] * state.textSize

        vertexData = zeros(GLfloat, 6*8)
        vertexData[1] = xpos
        vertexData[2] = ypos + h
        vertexData[3] = 0.0
        vertexData[4] = 1.0

        vertexData[5] = 0.0
        vertexData[6] = 0.0
        vertexData[7] = 0.0
        vertexData[8] = 0.0

		vertexData[9] = xpos
        vertexData[10] = ypos
        vertexData[11] = 0.0
        vertexData[12] = 1.0

        vertexData[13] = 0.0
        vertexData[14] = 1.0
        vertexData[15] = 0.0
        vertexData[16] = 0.0

        vertexData[17] = xpos + w
        vertexData[18] = ypos
        vertexData[19] = 0.0
        vertexData[20] = 1.0

        vertexData[21] = 1.0
        vertexData[22] = 1.0
        vertexData[23] = 0.0
        vertexData[24] = 0.0

        vertexData[25] = xpos
        vertexData[26] = ypos + h
        vertexData[27] = 0.0
        vertexData[28] = 1.0

        vertexData[29] = 0.0
        vertexData[30] = 0.0
        vertexData[31] = 0.0
        vertexData[32] = 0.0

        vertexData[33] = xpos + w
        vertexData[34] = ypos
        vertexData[35] = 0.0
        vertexData[36] = 1.0

        vertexData[37] = 1.0
        vertexData[38] = 1.0
        vertexData[39] = 0.0
        vertexData[40] = 0.0

        vertexData[41] = xpos + w
        vertexData[42] = ypos + h
        vertexData[43] = 0.0
        vertexData[44] = 1.0

        vertexData[45] = 1.0
        vertexData[46] = 0.0
        vertexData[47] = 0.0
        vertexData[48] = 0.0

        glBindTexture(GL_TEXTURE_2D, ch.texID)
        # glBufferSubData(GL_ARRAY_BUFFER, 0, sizeof(vertexData), vertexData)
        glBufferData(GL_ARRAY_BUFFER, sizeof(vertexData), vertexData, GL_DYNAMIC_DRAW)
		glDrawArrays(GL_TRIANGLES, 0, 6)
		x += ch.advance * state.textSize
	end
	switchShader("basicShapes")
	# glBindBuffer(GL_ARRAY_BUFFER, globjs.vbos[1])
end

function textFont(fontname::String)
    state.fontFace = fontname
    fontState = fontStruct(newface(state.fontFace), Dict(' ' => blankChar), 0, 12)
	setpixelsize(fontState.face, fontState.fontWidth, fontState.fontHeight)
	setupFontCharacters()
end

## Attributes

#function textAlign()
#
#end

#textLeading
#textMode

function textSize(size)
	state.textSize = size
end

function textWidth(str::String)
    # extents = Cairo.text_extents(cr, str)
    # return extents[1]
end

function textHeight(str::String)
    # extents = Cairo.text_extents(cr, str)
    # return extents[2]
end

## Metrics

function textAscent(str::String)
   # extents = Cairo.scaled_font_extents(cr, str)
   # return extents[1]
end

function textDescent(str::String)
   # extents = Cairo.scaled_font_extents(cr, str)
   # return extents[2]
end
