export applyMatrix, popMatrix, pushMatrix, resetMatrix
export rotate, Scale, shearX, shearY, translate

currMatrix = GLfloat[]
matrixStack = Array{GLfloat}[]

function applyMatrix(n00, n01, n02, n03, n10, n11, n12, n13, n20, n21, n22, n23, n30, n31, n32, n33)
	m = GLfloat[n00 n01 n02 n03;
		n10 n11 n12 n13;
		n20 n21 n22 n23;
		n30 n31 n32 n33]
end

function popMatrix()
	currMatrix = matrixStack[end]
	deleteat!(matrixStack, length(matrixStack))
end

function pushMatrix()
	push!(matrixStack, currMatrix)
end

function resetMatrix()
	currMatrix = GLfloat[1 0 0 0;
		0 1 0 0;
		0 0 1 0;
		0 0 0 1]

	glUniformMatrix4fv(glGetUniformLocation(state.program, "MVP"), 1, false, model)
end

function rotate(angle, x, y, z)
	MVP = GLfloat[cos(angle) -sin(angle) 0 0;
		sin(angle) cos(angle) 0 0;
		0 0 1 0;
		0 0 0 1]

	glUniformMatrix4fv(glGetUniformLocation(state.program, "MVP"), 1, false, model)
end

function Scale(x, y, z)

end

function shearX(angle)
	MVP = [1 tan(angle) 0 0;
		0 1 0 0;
		0 0 1 0;
		0 0 0 1]

	glUniformMatrix4fv(glGetUniformLocation(state.program, "MVP"), 1, false, model)
end

function shearY(angle)
	MVP = [1 0 0 0;
		tan(angle) 1 0 0;
		0 0 1 0;
		0 0 0 1]

	glUniformMatrix4fv(glGetUniformLocation(state.program, "MVP"), 1, false, model)
end

function translate(x, y)

end

function printMatrix()
	print(currMatrix)
end
