###################################################
## Main file
###################################################

techno = ARGS[1]
# can be "2_cycles" or "23_cycles"

prio = ARGS[2]
# can be "greedy", "auto", "regression"

steps = parse(Int, ARGS[3])
# solve time is about steps/batch seconds

batch = parse(Int, ARGS[4])
# can be any Int64

solver = ARGS[5]
# Can be "gurobi" or "mosek"

data_folder = ARGS[6]
# name of the folder under 'data' where the types and matrix should be retrieved
# also the folder under  'results' where results will be stored

job_id = ARGS[7]
# identifier to save the results

learn = parse(Bool, ARGS[8])
# whether or not to learn weights

cluster = parse(Bool, ARGS[9])

if solver == "gurobi"
  using Gurobi
else
  using Mosek
end

if cluster
  cd("/home/mburq/Kidney-dynamic-matching/src")
else
  cd("/Users/mburq/Documents/Research/Kidney/Kidney-dynamic-matching/src/")
end

include("KidneyMatching.jl")
using KidneyMatching
using DataFrames

srand(1234) #setting the random seed

data = import_data(data_folder)
feature_dimension = size(data.features)[2]
p = Params(batch = batch, techno = techno, prio = prio, solver = solver)
b = Brain(feature_dimension, learn = learn)

log = run_dynamic(data, steps, b, p);
if learn
  save(b, p, data_folder, job_id)
end
writetable("../results/$data_folder/$techno/$prio/batch=$batch/$job_id.csv", log.summary)
