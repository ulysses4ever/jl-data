#=
Various numerical experiments vaguely related to reproducing kernel Hilbert spaces.
=#


import Distributions

""" solak{T}(gamma::Array{T,1}, alpha::Float64, nu::Float64)

Returns a function,
    function K{U<:Real}(x::Array{U,2}, i::Int, j::Int),
with a closure containing gamma, alpha, and nu, where K(x,i,j) evaluates the kernel given in the reference at x[:,i] and x[:,j]. The first dimension of x must match that of gamma. 

Reference: Solak et. al., Derivative observations in Gaussian Process Models of Dynamic Systems. [link](http://eprints.gla.ac.uk/3119/) [ungated pdf](http://eprints.gla.ac.uk/3119/01/derivative.pdf)
"""
function solak{T<:Real}(gamma::Array{T,1}, alpha::Float64, nu::Float64)
    d = size(gamma,1)
    function K{U<:Real}(x::Array{U,2}, i::Int, j::Int)
        size(x,1)== d || error("x and gamma must have same number of rows")
        if i==j
            return nu + alpha
        else
            return alpha*exp(-.5*sum((gamma.*(x[:,i]-x[:,j])).^2))
        end
    end
end
    

function grammian{T<:Real}(x::Array{T,2}, K::Function)
    d,n = size(x)
    gram = zeros(T,n,n)
    for i in 1:n
        gram[i,i] = K(x,i,i)
        for j in (i+1):n
            gram[j,i]=gram[i,j]=K(x,i,j)
        end
    end
    return gram
end
