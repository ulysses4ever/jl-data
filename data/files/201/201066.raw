# TODO: exports
export SCIPcreate, SCIPgetStage, SCIPgetStatus, SCIPisTransformed

# TODO: upgrade to SCIP 3.1 and include version # in libscipopt
# Macro for calling SCIP functions that return misc. types
macro scip_ccall(func, args...)
    return quote
        ccall(($func, "libscipopt"), $(args...))
    end
end
import Base: pointer

# Macro for calling SCIP functions that have checked return codes
macro scip_ccall_check(func, args...)
    return quote
        ret = ccall(($func, "libscipopt"), Int8, $(args...))
        if ret != SCIP_OKAY
            error(SCIP_RETCODE[ret])
        end
    end
end

# SCIP function wrappers: unchecked functions
SCIPexprcurvAdd(curv1, curv2) = @scip_ccall("SCIPexprcurvAdd", SCIP_EXPRCURV, (SCIP_EXPRCURV, SCIP_EXPRCURV), curv1, curv2)
SCIPexprcurvNegate(curvature) = @scip_ccall("SCIPexprcurvNegate", SCIP_EXPRCURV, (SCIP_EXPRCURV,), curvature)
SCIPexprcurvMultiply(factor, curvature) = @scip_ccall("SCIPexprcurvMultiply", SCIP_EXPRCURV, (SCIP_Real, SCIP_EXPRCURV), factor, curvature)
SCIPexprcurvPower(basebounds, basecurv, exponent) = @scip_ccall("SCIPexprcurvPower", SCIP_EXPRCURV, (SCIP_INTERVAL, SCIP_EXPRCURV, SCIP_Real), basebounds, basecurv, exponent)
SCIPexpropGetNChildren(op) = @scip_ccall("SCIPexpropGetNChildren", Int, (SCIP_EXPROP,), op)
SCIPexprGetOperator(expr) = @scip_ccall("SCIPexprGetOperator", SCIP_EXPROP, (Ptr{SCIP_EXPR},), expr)
SCIPexprGetNChildren(expr) = @scip_ccall("SCIPexprGetNChildren", Int, (Ptr{SCIP_EXPR},), expr)
SCIPexprGetChildren(expr) = @scip_ccall("SCIPexprGetChildren", Ptr{Ptr{SCIP_EXPR}}, (Ptr{SCIP_EXPR},), expr)
SCIPexprGetOpIndex(expr) = @scip_ccall("SCIPexprGetOpIndex", Int, (Ptr{SCIP_EXPR},), expr)
SCIPexprGetOpReal(expr) = @scip_ccall("SCIPexprGetOpReal", SCIP_Real, (Ptr{SCIP_EXPR},), expr)
SCIPexprGetRealPowerExponent(expr) = @scip_ccall("SCIPexprGetRealPowerExponent", SCIP_Real, (Ptr{SCIP_EXPR},), expr)
SCIPexprGetIntPowerExponent(expr) = @scip_ccall("SCIPexprGetIntPowerExponent", Int, (Ptr{SCIP_EXPR},), expr)
SCIPexprGetSignPowerExponent(expr) = @scip_ccall("SCIPexprGetSignPowerExponent", SCIP_Real, (Ptr{SCIP_EXPR},), expr)
SCIPexprGetLinearCoefs(expr) = @scip_ccall("SCIPexprGetLinearCoefs", Ptr{SCIP_Real}, (Ptr{SCIP_EXPR},), expr)
SCIPexprGetLinearConstant(expr) = @scip_ccall("SCIPexprGetLinearConstant", SCIP_Real, (Ptr{SCIP_EXPR},), expr)
SCIPexprGetQuadElements(expr) = @scip_ccall("SCIPexprGetQuadElements", Ptr{SCIP_QUADELEM}, (Ptr{SCIP_EXPR},), expr)
SCIPexprGetQuadConstant(expr) = @scip_ccall("SCIPexprGetQuadConstant", SCIP_Real, (Ptr{SCIP_EXPR},), expr)
SCIPexprGetQuadLinearCoefs(expr) = @scip_ccall("SCIPexprGetQuadLinearCoefs", Ptr{SCIP_Real}, (Ptr{SCIP_EXPR},), expr)
SCIPexprGetNQuadElements(expr) = @scip_ccall("SCIPexprGetNQuadElements", Int, (Ptr{SCIP_EXPR},), expr)
SCIPexprGetMonomials(expr) = @scip_ccall("SCIPexprGetMonomials", Ptr{Ptr{SCIP_EXPRDATA_MONOMIAL}}, (Ptr{SCIP_EXPR},), expr)
SCIPexprGetNMonomials(expr) = @scip_ccall("SCIPexprGetNMonomials", Int, (Ptr{SCIP_EXPR},), expr)
SCIPexprGetPolynomialConstant(expr) = @scip_ccall("SCIPexprGetPolynomialConstant", SCIP_Real, (Ptr{SCIP_EXPR},), expr)
SCIPexprGetMonomialCoef(monomial) = @scip_ccall("SCIPexprGetMonomialCoef", SCIP_Real, (Ptr{SCIP_EXPRDATA_MONOMIAL},), monomial)
SCIPexprGetMonomialNFactors(monomial) = @scip_ccall("SCIPexprGetMonomialNFactors", Int, (Ptr{SCIP_EXPRDATA_MONOMIAL},), monomial)
SCIPexprGetMonomialExponents(monomial) = @scip_ccall("SCIPexprGetMonomialExponents", Ptr{SCIP_Real}, (Ptr{SCIP_EXPRDATA_MONOMIAL},), monomial)
SCIPexprSortQuadElems(expr) = @scip_ccall("SCIPexprSortQuadElems", Void, (Ptr{SCIP_EXPR},), expr)
SCIPexprChgPolynomialConstant(expr, constant) = @scip_ccall("SCIPexprChgPolynomialConstant", Void, (Ptr{SCIP_EXPR}, SCIP_Real), expr, constant)
SCIPexprSortMonomialFactors(monomial) = @scip_ccall("SCIPexprSortMonomialFactors", Void, (Ptr{SCIP_EXPRDATA_MONOMIAL},), monomial)
SCIPexprAreMonomialsEqual(monomial1, monomial2, eps) = @scip_ccall("SCIPexprAreMonomialsEqual", SCIP_Bool, (Ptr{SCIP_EXPRDATA_MONOMIAL}, Ptr{SCIP_EXPRDATA_MONOMIAL}, SCIP_Real), monomial1, monomial2, eps)
SCIPexprChgMonomialCoef(monomial, newcoef) = @scip_ccall("SCIPexprChgMonomialCoef", Void, (Ptr{SCIP_EXPRDATA_MONOMIAL}, SCIP_Real), monomial, newcoef)
SCIPexprMonomialPower(monomial, exponent) = @scip_ccall("SCIPexprMonomialPower", Void, (Ptr{SCIP_EXPRDATA_MONOMIAL}, Int), monomial, exponent)
SCIPexprMergeMonomialFactors(monomial, eps) = @scip_ccall("SCIPexprMergeMonomialFactors", Void, (Ptr{SCIP_EXPRDATA_MONOMIAL}, SCIP_Real), monomial, eps)
SCIPexprSortMonomials(expr) = @scip_ccall("SCIPexprSortMonomials", Void, (Ptr{SCIP_EXPR},), expr)
SCIPexprHasParam(expr) = @scip_ccall("SCIPexprHasParam", SCIP_Bool, (Ptr{SCIP_EXPR},), expr)
SCIPexprAreEqual(expr1, expr2, eps) = @scip_ccall("SCIPexprAreEqual", SCIP_Bool, (Ptr{SCIP_EXPR}, Ptr{SCIP_EXPR}, SCIP_Real), expr1, expr2, eps)
SCIPexprtreeGetRoot(tree) = @scip_ccall("SCIPexprtreeGetRoot", Ptr{SCIP_EXPR}, (Ptr{SCIP_EXPRTREE},), tree)
SCIPexprtreeGetNVars(tree) = @scip_ccall("SCIPexprtreeGetNVars", Int, (Ptr{SCIP_EXPRTREE},), tree)
SCIPexprtreeGetNParams(tree) = @scip_ccall("SCIPexprtreeGetNParams", Int, (Ptr{SCIP_EXPRTREE},), tree)
SCIPexprtreeGetParamVals(tree) = @scip_ccall("SCIPexprtreeGetParamVals", Ptr{SCIP_Real}, (Ptr{SCIP_EXPRTREE},), tree)
SCIPexprtreeSetParamVal(tree, paramidx, paramval) = @scip_ccall("SCIPexprtreeSetParamVal", Void, (Ptr{SCIP_EXPRTREE}, Int, SCIP_Real), tree, paramidx, paramval)
SCIPexprtreeGetInterpreterData(tree) = @scip_ccall("SCIPexprtreeGetInterpreterData", Ptr{SCIP_EXPRINTDATA}, (Ptr{SCIP_EXPRTREE},), tree)
SCIPexprtreeSetInterpreterData(tree, interpreterdata) = @scip_ccall("SCIPexprtreeSetInterpreterData", Void, (Ptr{SCIP_EXPRTREE}, Ptr{SCIP_EXPRINTDATA}), tree, interpreterdata)
SCIPexprtreeHasParam(tree) = @scip_ccall("SCIPexprtreeHasParam", SCIP_Bool, (Ptr{SCIP_EXPRTREE},), tree)
SCIPquadelemSort(quadelems, nquadelems) = @scip_ccall("SCIPquadelemSort", Void, (Ptr{SCIP_QUADELEM}, Int), quadelems, nquadelems)
SCIPexprgraphCaptureNode(node) = @scip_ccall("SCIPexprgraphCaptureNode", Void, (Ptr{SCIP_EXPRGRAPHNODE},), node)
SCIPexprgraphIsNodeEnabled(node) = @scip_ccall("SCIPexprgraphIsNodeEnabled", SCIP_Bool, (Ptr{SCIP_EXPRGRAPHNODE},), node)
SCIPexprgraphGetNodeNChildren(node) = @scip_ccall("SCIPexprgraphGetNodeNChildren", Int, (Ptr{SCIP_EXPRGRAPHNODE},), node)
SCIPexprgraphGetNodeChildren(node) = @scip_ccall("SCIPexprgraphGetNodeChildren", Ptr{Ptr{SCIP_EXPRGRAPHNODE}}, (Ptr{SCIP_EXPRGRAPHNODE},), node)
SCIPexprgraphGetNodeNParents(node) = @scip_ccall("SCIPexprgraphGetNodeNParents", Int, (Ptr{SCIP_EXPRGRAPHNODE},), node)
SCIPexprgraphGetNodeParents(node) = @scip_ccall("SCIPexprgraphGetNodeParents", Ptr{Ptr{SCIP_EXPRGRAPHNODE}}, (Ptr{SCIP_EXPRGRAPHNODE},), node)
SCIPexprgraphGetNodeDepth(node) = @scip_ccall("SCIPexprgraphGetNodeDepth", Int, (Ptr{SCIP_EXPRGRAPHNODE},), node)
SCIPexprgraphGetNodePosition(node) = @scip_ccall("SCIPexprgraphGetNodePosition", Int, (Ptr{SCIP_EXPRGRAPHNODE},), node)
SCIPexprgraphGetNodeOperator(node) = @scip_ccall("SCIPexprgraphGetNodeOperator", SCIP_EXPROP, (Ptr{SCIP_EXPRGRAPHNODE},), node)
SCIPexprgraphGetNodeOperatorIndex(node) = @scip_ccall("SCIPexprgraphGetNodeOperatorIndex", Int, (Ptr{SCIP_EXPRGRAPHNODE},), node)
SCIPexprgraphGetNodeOperatorReal(node) = @scip_ccall("SCIPexprgraphGetNodeOperatorReal", SCIP_Real, (Ptr{SCIP_EXPRGRAPHNODE},), node)
SCIPexprgraphGetNodeRealPowerExponent(node) = @scip_ccall("SCIPexprgraphGetNodeRealPowerExponent", SCIP_Real, (Ptr{SCIP_EXPRGRAPHNODE},), node)
SCIPexprgraphGetNodeIntPowerExponent(node) = @scip_ccall("SCIPexprgraphGetNodeIntPowerExponent", Int, (Ptr{SCIP_EXPRGRAPHNODE},), node)
SCIPexprgraphGetNodeSignPowerExponent(node) = @scip_ccall("SCIPexprgraphGetNodeSignPowerExponent", SCIP_Real, (Ptr{SCIP_EXPRGRAPHNODE},), node)
SCIPexprgraphGetNodeLinearCoefs(node) = @scip_ccall("SCIPexprgraphGetNodeLinearCoefs", Ptr{SCIP_Real}, (Ptr{SCIP_EXPRGRAPHNODE},), node)
SCIPexprgraphGetNodeLinearConstant(node) = @scip_ccall("SCIPexprgraphGetNodeLinearConstant", SCIP_Real, (Ptr{SCIP_EXPRGRAPHNODE},), node)
SCIPexprgraphGetNodeQuadraticConstant(node) = @scip_ccall("SCIPexprgraphGetNodeQuadraticConstant", SCIP_Real, (Ptr{SCIP_EXPRGRAPHNODE},), node)
SCIPexprgraphGetNodeQuadraticLinearCoefs(node) = @scip_ccall("SCIPexprgraphGetNodeQuadraticLinearCoefs", Ptr{SCIP_Real}, (Ptr{SCIP_EXPRGRAPHNODE},), node)
SCIPexprgraphGetNodeQuadraticQuadElements(node) = @scip_ccall("SCIPexprgraphGetNodeQuadraticQuadElements", Ptr{SCIP_QUADELEM}, (Ptr{SCIP_EXPRGRAPHNODE},), node)
SCIPexprgraphGetNodeQuadraticNQuadElements(node) = @scip_ccall("SCIPexprgraphGetNodeQuadraticNQuadElements", Int, (Ptr{SCIP_EXPRGRAPHNODE},), node)
SCIPexprgraphGetNodePolynomialMonomials(node) = @scip_ccall("SCIPexprgraphGetNodePolynomialMonomials", Ptr{Ptr{SCIP_EXPRDATA_MONOMIAL}}, (Ptr{SCIP_EXPRGRAPHNODE},), node)
SCIPexprgraphGetNodePolynomialNMonomials(node) = @scip_ccall("SCIPexprgraphGetNodePolynomialNMonomials", Int, (Ptr{SCIP_EXPRGRAPHNODE},), node)
SCIPexprgraphGetNodePolynomialConstant(node) = @scip_ccall("SCIPexprgraphGetNodePolynomialConstant", SCIP_Real, (Ptr{SCIP_EXPRGRAPHNODE},), node)
SCIPexprgraphGetNodeBounds(node) = @scip_ccall("SCIPexprgraphGetNodeBounds", SCIP_INTERVAL, (Ptr{SCIP_EXPRGRAPHNODE},), node)
SCIPexprgraphGetNodeVal(node) = @scip_ccall("SCIPexprgraphGetNodeVal", SCIP_Real, (Ptr{SCIP_EXPRGRAPHNODE},), node)
SCIPexprgraphGetNodeCurvature(node) = @scip_ccall("SCIPexprgraphGetNodeCurvature", SCIP_EXPRCURV, (Ptr{SCIP_EXPRGRAPHNODE},), node)
SCIPexprgraphEnableNode(exprgraph, node) = @scip_ccall("SCIPexprgraphEnableNode", Void, (Ptr{SCIP_EXPRGRAPH}, Ptr{SCIP_EXPRGRAPHNODE}), exprgraph, node)
SCIPexprgraphDisableNode(exprgraph, node) = @scip_ccall("SCIPexprgraphDisableNode", Void, (Ptr{SCIP_EXPRGRAPH}, Ptr{SCIP_EXPRGRAPHNODE}), exprgraph, node)
SCIPexprgraphHasNodeSibling(node) = @scip_ccall("SCIPexprgraphHasNodeSibling", SCIP_Bool, (Ptr{SCIP_EXPRGRAPHNODE},), node)
SCIPexprgraphAreAllNodeChildrenVars(node) = @scip_ccall("SCIPexprgraphAreAllNodeChildrenVars", SCIP_Bool, (Ptr{SCIP_EXPRGRAPHNODE},), node)
SCIPexprgraphHasNodeNonlinearAncestor(node) = @scip_ccall("SCIPexprgraphHasNodeNonlinearAncestor", SCIP_Bool, (Ptr{SCIP_EXPRGRAPHNODE},), node)
SCIPexprgraphTightenNodeBounds(exprgraph, node, nodebounds, minstrength, cutoff) = @scip_ccall("SCIPexprgraphTightenNodeBounds", Void, (Ptr{SCIP_EXPRGRAPH}, Ptr{SCIP_EXPRGRAPHNODE}, SCIP_INTERVAL, SCIP_Real, Ptr{SCIP_Bool}), exprgraph, node, nodebounds, minstrength, cutoff)
SCIPexprgraphGetDepth(exprgraph) = @scip_ccall("SCIPexprgraphGetDepth", Int, (Ptr{SCIP_EXPRGRAPH},), exprgraph)
SCIPexprgraphGetNodes(exprgraph) = @scip_ccall("SCIPexprgraphGetNodes", Ptr{Ptr{Ptr{SCIP_EXPRGRAPHNODE}}}, (Ptr{SCIP_EXPRGRAPH},), exprgraph)
SCIPexprgraphGetNVars(exprgraph) = @scip_ccall("SCIPexprgraphGetNVars", Int, (Ptr{SCIP_EXPRGRAPH},), exprgraph)
SCIPexprgraphGetVarNodes(exprgraph) = @scip_ccall("SCIPexprgraphGetVarNodes", Ptr{Ptr{SCIP_EXPRGRAPHNODE}}, (Ptr{SCIP_EXPRGRAPH},), exprgraph)
SCIPexprgraphSetVarNodeValue(varnode, value) = @scip_ccall("SCIPexprgraphSetVarNodeValue", Void, (Ptr{SCIP_EXPRGRAPHNODE}, SCIP_Real), varnode, value)
SCIPexprgraphSetVarsBounds(exprgraph, varbounds) = @scip_ccall("SCIPexprgraphSetVarsBounds", Void, (Ptr{SCIP_EXPRGRAPH}, Ptr{SCIP_INTERVAL}), exprgraph, varbounds)
SCIPexprgraphSetVarNodeBounds(exprgraph, varnode, varbounds) = @scip_ccall("SCIPexprgraphSetVarNodeBounds", Void, (Ptr{SCIP_EXPRGRAPH}, Ptr{SCIP_EXPRGRAPHNODE}, SCIP_INTERVAL), exprgraph, varnode, varbounds)
SCIPexprgraphSetVarNodeLb(exprgraph, varnode, lb) = @scip_ccall("SCIPexprgraphSetVarNodeLb", Void, (Ptr{SCIP_EXPRGRAPH}, Ptr{SCIP_EXPRGRAPHNODE}, SCIP_Real), exprgraph, varnode, lb)
SCIPexprgraphSetVarNodeUb(exprgraph, varnode, ub) = @scip_ccall("SCIPexprgraphSetVarNodeUb", Void, (Ptr{SCIP_EXPRGRAPH}, Ptr{SCIP_EXPRGRAPHNODE}, SCIP_Real), exprgraph, varnode, ub)
SCIPexprgraphGetVarsBounds(exprgraph) = @scip_ccall("SCIPexprgraphGetVarsBounds", Ptr{SCIP_INTERVAL}, (Ptr{SCIP_EXPRGRAPH},), exprgraph)
SCIPexprgraphFindConstNode(exprgraph, constant, constnode) = @scip_ccall("SCIPexprgraphFindConstNode", SCIP_Bool, (Ptr{SCIP_EXPRGRAPH}, SCIP_Real, Ptr{Ptr{SCIP_EXPRGRAPHNODE}}), exprgraph, constant, constnode)
SCIPexprgraphPropagateNodeBounds(exprgraph, infinity, minstrength, cutoff) = @scip_ccall("SCIPexprgraphPropagateNodeBounds", Void, (Ptr{SCIP_EXPRGRAPH}, SCIP_Real, SCIP_Real, Ptr{SCIP_Bool}), exprgraph, infinity, minstrength, cutoff)
SCIPexprgraphGetSumTreesNSummands(node) = @scip_ccall("SCIPexprgraphGetSumTreesNSummands", Int, (Ptr{SCIP_EXPRGRAPHNODE},), node)
SCIPexprtreeGetVars(tree) = @scip_ccall("SCIPexprtreeGetVars", Ptr{Ptr{SCIP_VAR}}, (Ptr{SCIP_EXPRTREE},), tree)
SCIPexprtreeFindVar(tree, var) = @scip_ccall("SCIPexprtreeFindVar", Int, (Ptr{SCIP_EXPRTREE}, Ptr{SCIP_VAR}), tree, var)
SCIPnlrowGetConstant(nlrow) = @scip_ccall("SCIPnlrowGetConstant", SCIP_Real, (Ptr{SCIP_NLROW},), nlrow)
SCIPnlrowGetNLinearVars(nlrow) = @scip_ccall("SCIPnlrowGetNLinearVars", Int, (Ptr{SCIP_NLROW},), nlrow)
SCIPnlrowGetLinearVars(nlrow) = @scip_ccall("SCIPnlrowGetLinearVars", Ptr{Ptr{SCIP_VAR}}, (Ptr{SCIP_NLROW},), nlrow)
SCIPnlrowGetLinearCoefs(nlrow) = @scip_ccall("SCIPnlrowGetLinearCoefs", Ptr{SCIP_Real}, (Ptr{SCIP_NLROW},), nlrow)
SCIPnlrowGetNQuadVars(nlrow) = @scip_ccall("SCIPnlrowGetNQuadVars", Int, (Ptr{SCIP_NLROW},), nlrow)
SCIPnlrowGetQuadVars(nlrow) = @scip_ccall("SCIPnlrowGetQuadVars", Ptr{Ptr{SCIP_VAR}}, (Ptr{SCIP_NLROW},), nlrow)
SCIPnlrowSearchQuadVar(nlrow, var) = @scip_ccall("SCIPnlrowSearchQuadVar", Int, (Ptr{SCIP_NLROW}, Ptr{SCIP_VAR}), nlrow, var)
SCIPnlrowGetNQuadElems(nlrow) = @scip_ccall("SCIPnlrowGetNQuadElems", Int, (Ptr{SCIP_NLROW},), nlrow)
SCIPnlrowGetQuadElems(nlrow) = @scip_ccall("SCIPnlrowGetQuadElems", Ptr{SCIP_QUADELEM}, (Ptr{SCIP_NLROW},), nlrow)
SCIPnlrowGetExprtree(nlrow) = @scip_ccall("SCIPnlrowGetExprtree", Ptr{SCIP_EXPRTREE}, (Ptr{SCIP_NLROW},), nlrow)
SCIPnlrowGetLhs(nlrow) = @scip_ccall("SCIPnlrowGetLhs", SCIP_Real, (Ptr{SCIP_NLROW},), nlrow)
SCIPnlrowGetRhs(nlrow) = @scip_ccall("SCIPnlrowGetRhs", SCIP_Real, (Ptr{SCIP_NLROW},), nlrow)
SCIPnlrowGetNLPPos(nlrow) = @scip_ccall("SCIPnlrowGetNLPPos", Int, (Ptr{SCIP_NLROW},), nlrow)
SCIPnlrowIsInNLP(nlrow) = @scip_ccall("SCIPnlrowIsInNLP", SCIP_Bool, (Ptr{SCIP_NLROW},), nlrow)
SCIPnlrowGetDualsol(nlrow) = @scip_ccall("SCIPnlrowGetDualsol", SCIP_Real, (Ptr{SCIP_NLROW},), nlrow)
SCIPversion() = @scip_ccall("SCIPversion", SCIP_Real, ())
SCIPmajorVersion() = @scip_ccall("SCIPmajorVersion", Int, ())
SCIPminorVersion() = @scip_ccall("SCIPminorVersion", Int, ())
SCIPtechVersion() = @scip_ccall("SCIPtechVersion", Int, ())
SCIPsubversion() = @scip_ccall("SCIPsubversion", Int, ())
SCIPprintError(retcode) = @scip_ccall("SCIPprintError", Void, (SCIP_RETCODE,), retcode)
SCIPstoreSolutionGap(scip) = @scip_ccall("SCIPstoreSolutionGap", Void, (Ptr{SCIP},), scip)
SCIPgetStage(scip) = @scip_ccall("SCIPgetStage", SCIP_STAGE, (Ptr{SCIP},), scip)
SCIPgetStatus(scip) = @scip_ccall("SCIPgetStatus", SCIP_STATUS, (Ptr{SCIP},), scip)
SCIPisTransformed(scip) = @scip_ccall("SCIPisTransformed", SCIP_Bool, (Ptr{SCIP},), scip)
SCIPisExactSolve(scip) = @scip_ccall("SCIPisExactSolve", SCIP_Bool, (Ptr{SCIP},), scip)
SCIPisPresolveFinished(scip) = @scip_ccall("SCIPisPresolveFinished", SCIP_Bool, (Ptr{SCIP},), scip)
SCIPpressedCtrlC(scip) = @scip_ccall("SCIPpressedCtrlC", SCIP_Bool, (Ptr{SCIP},), scip)
SCIPisStopped(scip) = @scip_ccall("SCIPisStopped", SCIP_Bool, (Ptr{SCIP},), scip)
SCIPgetMessagehdlr(scip) = @scip_ccall("SCIPgetMessagehdlr", Ptr{SCIP_MESSAGEHDLR}, (Ptr{SCIP},), scip)
SCIPsetMessagehdlrQuiet(scip, quiet) = @scip_ccall("SCIPsetMessagehdlrQuiet", Void, (Ptr{SCIP}, SCIP_Bool), scip, quiet)
SCIPgetVerbLevel(scip) = @scip_ccall("SCIPgetVerbLevel", SCIP_VERBLEVEL, (Ptr{SCIP},), scip)
SCIPgetSubscipDepth(scip) = @scip_ccall("SCIPgetSubscipDepth", Int, (Ptr{SCIP},), scip)
SCIPgetParams(scip) = @scip_ccall("SCIPgetParams", Ptr{Ptr{SCIP_PARAM}}, (Ptr{SCIP},), scip)
SCIPgetNParams(scip) = @scip_ccall("SCIPgetNParams", Int, (Ptr{SCIP},), scip)
SCIPgetReaders(scip) = @scip_ccall("SCIPgetReaders", Ptr{Ptr{SCIP_READER}}, (Ptr{SCIP},), scip)
SCIPgetNReaders(scip) = @scip_ccall("SCIPgetNReaders", Int, (Ptr{SCIP},), scip)
SCIPgetPricers(scip) = @scip_ccall("SCIPgetPricers", Ptr{Ptr{SCIP_PRICER}}, (Ptr{SCIP},), scip)
SCIPgetNPricers(scip) = @scip_ccall("SCIPgetNPricers", Int, (Ptr{SCIP},), scip)
SCIPgetNActivePricers(scip) = @scip_ccall("SCIPgetNActivePricers", Int, (Ptr{SCIP},), scip)
SCIPgetConshdlrs(scip) = @scip_ccall("SCIPgetConshdlrs", Ptr{Ptr{SCIP_CONSHDLR}}, (Ptr{SCIP},), scip)
SCIPgetNConshdlrs(scip) = @scip_ccall("SCIPgetNConshdlrs", Int, (Ptr{SCIP},), scip)
SCIPgetConflicthdlrs(scip) = @scip_ccall("SCIPgetConflicthdlrs", Ptr{Ptr{SCIP_CONFLICTHDLR}}, (Ptr{SCIP},), scip)
SCIPgetNConflicthdlrs(scip) = @scip_ccall("SCIPgetNConflicthdlrs", Int, (Ptr{SCIP},), scip)
SCIPgetPresols(scip) = @scip_ccall("SCIPgetPresols", Ptr{Ptr{SCIP_PRESOL}}, (Ptr{SCIP},), scip)
SCIPgetNPresols(scip) = @scip_ccall("SCIPgetNPresols", Int, (Ptr{SCIP},), scip)
SCIPgetRelaxs(scip) = @scip_ccall("SCIPgetRelaxs", Ptr{Ptr{SCIP_RELAX}}, (Ptr{SCIP},), scip)
SCIPgetNRelaxs(scip) = @scip_ccall("SCIPgetNRelaxs", Int, (Ptr{SCIP},), scip)
SCIPgetSepas(scip) = @scip_ccall("SCIPgetSepas", Ptr{Ptr{SCIP_SEPA}}, (Ptr{SCIP},), scip)
SCIPgetNSepas(scip) = @scip_ccall("SCIPgetNSepas", Int, (Ptr{SCIP},), scip)
SCIPgetProps(scip) = @scip_ccall("SCIPgetProps", Ptr{Ptr{SCIP_PROP}}, (Ptr{SCIP},), scip)
SCIPgetNProps(scip) = @scip_ccall("SCIPgetNProps", Int, (Ptr{SCIP},), scip)
SCIPgetHeurs(scip) = @scip_ccall("SCIPgetHeurs", Ptr{Ptr{SCIP_HEUR}}, (Ptr{SCIP},), scip)
SCIPgetNHeurs(scip) = @scip_ccall("SCIPgetNHeurs", Int, (Ptr{SCIP},), scip)
SCIPgetEventhdlrs(scip) = @scip_ccall("SCIPgetEventhdlrs", Ptr{Ptr{SCIP_EVENTHDLR}}, (Ptr{SCIP},), scip)
SCIPgetNEventhdlrs(scip) = @scip_ccall("SCIPgetNEventhdlrs", Int, (Ptr{SCIP},), scip)
SCIPgetNodesels(scip) = @scip_ccall("SCIPgetNodesels", Ptr{Ptr{SCIP_NODESEL}}, (Ptr{SCIP},), scip)
SCIPgetNNodesels(scip) = @scip_ccall("SCIPgetNNodesels", Int, (Ptr{SCIP},), scip)
SCIPgetNodesel(scip) = @scip_ccall("SCIPgetNodesel", Ptr{SCIP_NODESEL}, (Ptr{SCIP},), scip)
SCIPgetBranchrules(scip) = @scip_ccall("SCIPgetBranchrules", Ptr{Ptr{SCIP_BRANCHRULE}}, (Ptr{SCIP},), scip)
SCIPgetNBranchrules(scip) = @scip_ccall("SCIPgetNBranchrules", Int, (Ptr{SCIP},), scip)
SCIPgetDisps(scip) = @scip_ccall("SCIPgetDisps", Ptr{Ptr{SCIP_DISP}}, (Ptr{SCIP},), scip)
SCIPgetNDisps(scip) = @scip_ccall("SCIPgetNDisps", Int, (Ptr{SCIP},), scip)
SCIPgetNlpis(scip) = @scip_ccall("SCIPgetNlpis", Ptr{Ptr{SCIP_NLPI}}, (Ptr{SCIP},), scip)
SCIPgetNNlpis(scip) = @scip_ccall("SCIPgetNNlpis", Int, (Ptr{SCIP},), scip)
SCIPgetNExternalCodes(scip) = @scip_ccall("SCIPgetNExternalCodes", Int, (Ptr{SCIP},), scip)
SCIPexistsDialog(scip, dialog) = @scip_ccall("SCIPexistsDialog", SCIP_Bool, (Ptr{SCIP}, Ptr{SCIP_DIALOG}), scip, dialog)
SCIPgetRootDialog(scip) = @scip_ccall("SCIPgetRootDialog", Ptr{SCIP_DIALOG}, (Ptr{SCIP},), scip)
SCIPgetProbData(scip) = @scip_ccall("SCIPgetProbData", Ptr{SCIP_PROBDATA}, (Ptr{SCIP},), scip)
SCIPgetObjsense(scip) = @scip_ccall("SCIPgetObjsense", SCIP_OBJSENSE, (Ptr{SCIP},), scip)
SCIPgetOrigObjoffset(scip) = @scip_ccall("SCIPgetOrigObjoffset", SCIP_Real, (Ptr{SCIP},), scip)
SCIPgetOrigObjscale(scip) = @scip_ccall("SCIPgetOrigObjscale", SCIP_Real, (Ptr{SCIP},), scip)
SCIPgetTransObjoffset(scip) = @scip_ccall("SCIPgetTransObjoffset", SCIP_Real, (Ptr{SCIP},), scip)
SCIPgetTransObjscale(scip) = @scip_ccall("SCIPgetTransObjscale", SCIP_Real, (Ptr{SCIP},), scip)
SCIPgetObjlimit(scip) = @scip_ccall("SCIPgetObjlimit", SCIP_Real, (Ptr{SCIP},), scip)
SCIPisObjIntegral(scip) = @scip_ccall("SCIPisObjIntegral", SCIP_Bool, (Ptr{SCIP},), scip)
SCIPgetObjNorm(scip) = @scip_ccall("SCIPgetObjNorm", SCIP_Real, (Ptr{SCIP},), scip)
SCIPgetVars(scip) = @scip_ccall("SCIPgetVars", Ptr{Ptr{SCIP_VAR}}, (Ptr{SCIP},), scip)
SCIPgetNVars(scip) = @scip_ccall("SCIPgetNVars", Int, (Ptr{SCIP},), scip)
SCIPgetNBinVars(scip) = @scip_ccall("SCIPgetNBinVars", Int, (Ptr{SCIP},), scip)
SCIPgetNIntVars(scip) = @scip_ccall("SCIPgetNIntVars", Int, (Ptr{SCIP},), scip)
SCIPgetNImplVars(scip) = @scip_ccall("SCIPgetNImplVars", Int, (Ptr{SCIP},), scip)
SCIPgetNContVars(scip) = @scip_ccall("SCIPgetNContVars", Int, (Ptr{SCIP},), scip)
SCIPgetNObjVars(scip) = @scip_ccall("SCIPgetNObjVars", Int, (Ptr{SCIP},), scip)
SCIPgetFixedVars(scip) = @scip_ccall("SCIPgetFixedVars", Ptr{Ptr{SCIP_VAR}}, (Ptr{SCIP},), scip)
SCIPgetNFixedVars(scip) = @scip_ccall("SCIPgetNFixedVars", Int, (Ptr{SCIP},), scip)
SCIPgetOrigVars(scip) = @scip_ccall("SCIPgetOrigVars", Ptr{Ptr{SCIP_VAR}}, (Ptr{SCIP},), scip)
SCIPgetNOrigVars(scip) = @scip_ccall("SCIPgetNOrigVars", Int, (Ptr{SCIP},), scip)
SCIPgetNOrigBinVars(scip) = @scip_ccall("SCIPgetNOrigBinVars", Int, (Ptr{SCIP},), scip)
SCIPgetNOrigIntVars(scip) = @scip_ccall("SCIPgetNOrigIntVars", Int, (Ptr{SCIP},), scip)
SCIPgetNOrigImplVars(scip) = @scip_ccall("SCIPgetNOrigImplVars", Int, (Ptr{SCIP},), scip)
SCIPgetNOrigContVars(scip) = @scip_ccall("SCIPgetNOrigContVars", Int, (Ptr{SCIP},), scip)
SCIPgetNTotalVars(scip) = @scip_ccall("SCIPgetNTotalVars", Int, (Ptr{SCIP},), scip)
SCIPallVarsInProb(scip) = @scip_ccall("SCIPallVarsInProb", SCIP_Bool, (Ptr{SCIP},), scip)
SCIPgetNUpgrConss(scip) = @scip_ccall("SCIPgetNUpgrConss", Int, (Ptr{SCIP},), scip)
SCIPgetNConss(scip) = @scip_ccall("SCIPgetNConss", Int, (Ptr{SCIP},), scip)
SCIPgetConss(scip) = @scip_ccall("SCIPgetConss", Ptr{Ptr{SCIP_CONS}}, (Ptr{SCIP},), scip)
SCIPgetNOrigConss(scip) = @scip_ccall("SCIPgetNOrigConss", Int, (Ptr{SCIP},), scip)
SCIPgetOrigConss(scip) = @scip_ccall("SCIPgetOrigConss", Ptr{Ptr{SCIP_CONS}}, (Ptr{SCIP},), scip)
SCIPgetNCheckConss(scip) = @scip_ccall("SCIPgetNCheckConss", Int, (Ptr{SCIP},), scip)
SCIPgetLocalOrigEstimate(scip) = @scip_ccall("SCIPgetLocalOrigEstimate", SCIP_Real, (Ptr{SCIP},), scip)
SCIPgetLocalTransEstimate(scip) = @scip_ccall("SCIPgetLocalTransEstimate", SCIP_Real, (Ptr{SCIP},), scip)
SCIPgetLocalDualbound(scip) = @scip_ccall("SCIPgetLocalDualbound", SCIP_Real, (Ptr{SCIP},), scip)
SCIPgetLocalLowerbound(scip) = @scip_ccall("SCIPgetLocalLowerbound", SCIP_Real, (Ptr{SCIP},), scip)
SCIPgetNodeDualbound(scip, node) = @scip_ccall("SCIPgetNodeDualbound", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_NODE}), scip, node)
SCIPgetNodeLowerbound(scip, node) = @scip_ccall("SCIPgetNodeLowerbound", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_NODE}), scip, node)
SCIPisInRestart(scip) = @scip_ccall("SCIPisInRestart", SCIP_Bool, (Ptr{SCIP},), scip)
SCIPgetVarRedcost(scip, var) = @scip_ccall("SCIPgetVarRedcost", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}), scip, var)
SCIPgetVarImplRedcost(scip, var, varfixing) = @scip_ccall("SCIPgetVarImplRedcost", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Bool), scip, var, varfixing)
SCIPgetVarFarkasCoef(scip, var) = @scip_ccall("SCIPgetVarFarkasCoef", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}), scip, var)
SCIPgetVarSol(scip, var) = @scip_ccall("SCIPgetVarSol", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}), scip, var)
SCIPisRelaxSolValid(scip) = @scip_ccall("SCIPisRelaxSolValid", SCIP_Bool, (Ptr{SCIP},), scip)
SCIPgetRelaxSolVal(scip, var) = @scip_ccall("SCIPgetRelaxSolVal", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}), scip, var)
SCIPgetRelaxSolObj(scip) = @scip_ccall("SCIPgetRelaxSolObj", SCIP_Real, (Ptr{SCIP},), scip)
SCIPgetVarStrongbranchNode(scip, var) = @scip_ccall("SCIPgetVarStrongbranchNode", Int64, (Ptr{SCIP}, Ptr{SCIP_VAR}), scip, var)
SCIPgetVarStrongbranchLPAge(scip, var) = @scip_ccall("SCIPgetVarStrongbranchLPAge", Int64, (Ptr{SCIP}, Ptr{SCIP_VAR}), scip, var)
SCIPgetVarNStrongbranchs(scip, var) = @scip_ccall("SCIPgetVarNStrongbranchs", Int, (Ptr{SCIP}, Ptr{SCIP_VAR}), scip, var)
SCIPadjustedVarLb(scip, var, lb) = @scip_ccall("SCIPadjustedVarLb", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), scip, var, lb)
SCIPadjustedVarUb(scip, var, ub) = @scip_ccall("SCIPadjustedVarUb", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), scip, var, ub)
SCIPcomputeVarLbGlobal(scip, var) = @scip_ccall("SCIPcomputeVarLbGlobal", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}), scip, var)
SCIPcomputeVarUbGlobal(scip, var) = @scip_ccall("SCIPcomputeVarUbGlobal", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}), scip, var)
SCIPcomputeVarLbLocal(scip, var) = @scip_ccall("SCIPcomputeVarLbLocal", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}), scip, var)
SCIPcomputeVarUbLocal(scip, var) = @scip_ccall("SCIPcomputeVarUbLocal", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}), scip, var)
SCIPgetNCliques(scip) = @scip_ccall("SCIPgetNCliques", Int, (Ptr{SCIP},), scip)
SCIPgetCliques(scip) = @scip_ccall("SCIPgetCliques", Ptr{Ptr{SCIP_CLIQUE}}, (Ptr{SCIP},), scip)
SCIPhaveVarsCommonClique(scip, var1, value1, var2, value2, regardimplics) = @scip_ccall("SCIPhaveVarsCommonClique", SCIP_Bool, (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Bool, Ptr{SCIP_VAR}, SCIP_Bool, SCIP_Bool), scip, var1, value1, var2, value2, regardimplics)
SCIPdoNotAggr(scip) = @scip_ccall("SCIPdoNotAggr", SCIP_Bool, (Ptr{SCIP},), scip)
SCIPdoNotMultaggr(scip) = @scip_ccall("SCIPdoNotMultaggr", SCIP_Bool, (Ptr{SCIP},), scip)
SCIPdoNotMultaggrVar(scip, var) = @scip_ccall("SCIPdoNotMultaggrVar", SCIP_Bool, (Ptr{SCIP}, Ptr{SCIP_VAR}), scip, var)
SCIPenableVarHistory(scip) = @scip_ccall("SCIPenableVarHistory", Void, (Ptr{SCIP},), scip)
SCIPdisableVarHistory(scip) = @scip_ccall("SCIPdisableVarHistory", Void, (Ptr{SCIP},), scip)
SCIPgetVarPseudocostVal(scip, var, solvaldelta) = @scip_ccall("SCIPgetVarPseudocostVal", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), scip, var, solvaldelta)
SCIPgetVarPseudocostValCurrentRun(scip, var, solvaldelta) = @scip_ccall("SCIPgetVarPseudocostValCurrentRun", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), scip, var, solvaldelta)
SCIPgetVarPseudocost(scip, var, dir) = @scip_ccall("SCIPgetVarPseudocost", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_BRANCHDIR), scip, var, dir)
SCIPgetVarPseudocostCurrentRun(scip, var, dir) = @scip_ccall("SCIPgetVarPseudocostCurrentRun", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_BRANCHDIR), scip, var, dir)
SCIPgetVarPseudocostCount(scip, var, dir) = @scip_ccall("SCIPgetVarPseudocostCount", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_BRANCHDIR), scip, var, dir)
SCIPgetVarPseudocostCountCurrentRun(scip, var, dir) = @scip_ccall("SCIPgetVarPseudocostCountCurrentRun", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_BRANCHDIR), scip, var, dir)
SCIPgetVarPseudocostScore(scip, var, solval) = @scip_ccall("SCIPgetVarPseudocostScore", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), scip, var, solval)
SCIPgetVarPseudocostScoreCurrentRun(scip, var, solval) = @scip_ccall("SCIPgetVarPseudocostScoreCurrentRun", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), scip, var, solval)
SCIPgetVarVSIDS(scip, var, dir) = @scip_ccall("SCIPgetVarVSIDS", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_BRANCHDIR), scip, var, dir)
SCIPgetVarVSIDSCurrentRun(scip, var, dir) = @scip_ccall("SCIPgetVarVSIDSCurrentRun", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_BRANCHDIR), scip, var, dir)
SCIPgetVarConflictScore(scip, var) = @scip_ccall("SCIPgetVarConflictScore", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}), scip, var)
SCIPgetVarConflictScoreCurrentRun(scip, var) = @scip_ccall("SCIPgetVarConflictScoreCurrentRun", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}), scip, var)
SCIPgetVarConflictlengthScore(scip, var) = @scip_ccall("SCIPgetVarConflictlengthScore", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}), scip, var)
SCIPgetVarConflictlengthScoreCurrentRun(scip, var) = @scip_ccall("SCIPgetVarConflictlengthScoreCurrentRun", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}), scip, var)
SCIPgetVarAvgConflictlength(scip, var, dir) = @scip_ccall("SCIPgetVarAvgConflictlength", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_BRANCHDIR), scip, var, dir)
SCIPgetVarAvgConflictlengthCurrentRun(scip, var, dir) = @scip_ccall("SCIPgetVarAvgConflictlengthCurrentRun", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_BRANCHDIR), scip, var, dir)
SCIPgetVarAvgInferences(scip, var, dir) = @scip_ccall("SCIPgetVarAvgInferences", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_BRANCHDIR), scip, var, dir)
SCIPgetVarAvgInferencesCurrentRun(scip, var, dir) = @scip_ccall("SCIPgetVarAvgInferencesCurrentRun", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_BRANCHDIR), scip, var, dir)
SCIPgetVarAvgInferenceScore(scip, var) = @scip_ccall("SCIPgetVarAvgInferenceScore", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}), scip, var)
SCIPgetVarAvgInferenceScoreCurrentRun(scip, var) = @scip_ccall("SCIPgetVarAvgInferenceScoreCurrentRun", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}), scip, var)
SCIPgetVarAvgCutoffs(scip, var, dir) = @scip_ccall("SCIPgetVarAvgCutoffs", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_BRANCHDIR), scip, var, dir)
SCIPgetVarAvgCutoffsCurrentRun(scip, var, dir) = @scip_ccall("SCIPgetVarAvgCutoffsCurrentRun", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_BRANCHDIR), scip, var, dir)
SCIPgetVarAvgCutoffScore(scip, var) = @scip_ccall("SCIPgetVarAvgCutoffScore", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}), scip, var)
SCIPgetVarAvgCutoffScoreCurrentRun(scip, var) = @scip_ccall("SCIPgetVarAvgCutoffScoreCurrentRun", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}), scip, var)
SCIPgetVarAvgInferenceCutoffScore(scip, var, cutoffweight) = @scip_ccall("SCIPgetVarAvgInferenceCutoffScore", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), scip, var, cutoffweight)
SCIPgetVarAvgInferenceCutoffScoreCurrentRun(scip, var, cutoffweight) = @scip_ccall("SCIPgetVarAvgInferenceCutoffScoreCurrentRun", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), scip, var, cutoffweight)
SCIPisConflictAnalysisApplicable(scip) = @scip_ccall("SCIPisConflictAnalysisApplicable", SCIP_Bool, (Ptr{SCIP},), scip)
SCIPgetConflictVarLb(scip, var) = @scip_ccall("SCIPgetConflictVarLb", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}), scip, var)
SCIPgetConflictVarUb(scip, var) = @scip_ccall("SCIPgetConflictVarUb", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}), scip, var)
SCIPhasCurrentNodeLP(scip) = @scip_ccall("SCIPhasCurrentNodeLP", SCIP_Bool, (Ptr{SCIP},), scip)
SCIPisLPConstructed(scip) = @scip_ccall("SCIPisLPConstructed", SCIP_Bool, (Ptr{SCIP},), scip)
SCIPgetLPSolstat(scip) = @scip_ccall("SCIPgetLPSolstat", SCIP_LPSOLSTAT, (Ptr{SCIP},), scip)
SCIPisLPRelax(scip) = @scip_ccall("SCIPisLPRelax", SCIP_Bool, (Ptr{SCIP},), scip)
SCIPgetLPObjval(scip) = @scip_ccall("SCIPgetLPObjval", SCIP_Real, (Ptr{SCIP},), scip)
SCIPgetLPColumnObjval(scip) = @scip_ccall("SCIPgetLPColumnObjval", SCIP_Real, (Ptr{SCIP},), scip)
SCIPgetLPLooseObjval(scip) = @scip_ccall("SCIPgetLPLooseObjval", SCIP_Real, (Ptr{SCIP},), scip)
SCIPgetGlobalPseudoObjval(scip) = @scip_ccall("SCIPgetGlobalPseudoObjval", SCIP_Real, (Ptr{SCIP},), scip)
SCIPgetPseudoObjval(scip) = @scip_ccall("SCIPgetPseudoObjval", SCIP_Real, (Ptr{SCIP},), scip)
SCIPisRootLPRelax(scip) = @scip_ccall("SCIPisRootLPRelax", SCIP_Bool, (Ptr{SCIP},), scip)
SCIPgetLPRootObjval(scip) = @scip_ccall("SCIPgetLPRootObjval", SCIP_Real, (Ptr{SCIP},), scip)
SCIPgetLPRootColumnObjval(scip) = @scip_ccall("SCIPgetLPRootColumnObjval", SCIP_Real, (Ptr{SCIP},), scip)
SCIPgetLPRootLooseObjval(scip) = @scip_ccall("SCIPgetLPRootLooseObjval", SCIP_Real, (Ptr{SCIP},), scip)
SCIPgetLPCols(scip) = @scip_ccall("SCIPgetLPCols", Ptr{Ptr{SCIP_COL}}, (Ptr{SCIP},), scip)
SCIPgetNLPCols(scip) = @scip_ccall("SCIPgetNLPCols", Int, (Ptr{SCIP},), scip)
SCIPgetLPRows(scip) = @scip_ccall("SCIPgetLPRows", Ptr{Ptr{SCIP_ROW}}, (Ptr{SCIP},), scip)
SCIPgetNLPRows(scip) = @scip_ccall("SCIPgetNLPRows", Int, (Ptr{SCIP},), scip)
SCIPallColsInLP(scip) = @scip_ccall("SCIPallColsInLP", SCIP_Bool, (Ptr{SCIP},), scip)
SCIPisLPSolBasic(scip) = @scip_ccall("SCIPisLPSolBasic", SCIP_Bool, (Ptr{SCIP},), scip)
SCIPgetColRedcost(scip, col) = @scip_ccall("SCIPgetColRedcost", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_COL}), scip, col)
SCIPgetColFarkasCoef(scip, col) = @scip_ccall("SCIPgetColFarkasCoef", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_COL}), scip, col)
SCIPmarkColNotRemovableLocal(scip, col) = @scip_ccall("SCIPmarkColNotRemovableLocal", Void, (Ptr{SCIP}, Ptr{SCIP_COL}), scip, col)
SCIPmarkRowNotRemovableLocal(scip, row) = @scip_ccall("SCIPmarkRowNotRemovableLocal", Void, (Ptr{SCIP}, Ptr{SCIP_ROW}), scip, row)
SCIPgetRowMinCoef(scip, row) = @scip_ccall("SCIPgetRowMinCoef", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_ROW}), scip, row)
SCIPgetRowMaxCoef(scip, row) = @scip_ccall("SCIPgetRowMaxCoef", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_ROW}), scip, row)
SCIPgetRowMinActivity(scip, row) = @scip_ccall("SCIPgetRowMinActivity", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_ROW}), scip, row)
SCIPgetRowMaxActivity(scip, row) = @scip_ccall("SCIPgetRowMaxActivity", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_ROW}), scip, row)
SCIPgetRowLPActivity(scip, row) = @scip_ccall("SCIPgetRowLPActivity", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_ROW}), scip, row)
SCIPgetRowLPFeasibility(scip, row) = @scip_ccall("SCIPgetRowLPFeasibility", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_ROW}), scip, row)
SCIPgetRowPseudoActivity(scip, row) = @scip_ccall("SCIPgetRowPseudoActivity", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_ROW}), scip, row)
SCIPgetRowPseudoFeasibility(scip, row) = @scip_ccall("SCIPgetRowPseudoFeasibility", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_ROW}), scip, row)
SCIPgetRowActivity(scip, row) = @scip_ccall("SCIPgetRowActivity", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_ROW}), scip, row)
SCIPgetRowFeasibility(scip, row) = @scip_ccall("SCIPgetRowFeasibility", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_ROW}), scip, row)
SCIPgetRowSolActivity(scip, row, sol) = @scip_ccall("SCIPgetRowSolActivity", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_ROW}, Ptr{SCIP_SOL}), scip, row, sol)
SCIPgetRowSolFeasibility(scip, row, sol) = @scip_ccall("SCIPgetRowSolFeasibility", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_ROW}, Ptr{SCIP_SOL}), scip, row, sol)
SCIPisNLPEnabled(scip) = @scip_ccall("SCIPisNLPEnabled", SCIP_Bool, (Ptr{SCIP},), scip)
SCIPenableNLP(scip) = @scip_ccall("SCIPenableNLP", Void, (Ptr{SCIP},), scip)
SCIPisNLPConstructed(scip) = @scip_ccall("SCIPisNLPConstructed", SCIP_Bool, (Ptr{SCIP},), scip)
SCIPhasNLPContinuousNonlinearity(scip) = @scip_ccall("SCIPhasNLPContinuousNonlinearity", SCIP_Bool, (Ptr{SCIP},), scip)
SCIPgetNLPVars(scip) = @scip_ccall("SCIPgetNLPVars", Ptr{Ptr{SCIP_VAR}}, (Ptr{SCIP},), scip)
SCIPgetNNLPVars(scip) = @scip_ccall("SCIPgetNNLPVars", Int, (Ptr{SCIP},), scip)
SCIPgetNLPVarsLbDualsol(scip) = @scip_ccall("SCIPgetNLPVarsLbDualsol", Ptr{SCIP_Real}, (Ptr{SCIP},), scip)
SCIPgetNLPVarsUbDualsol(scip) = @scip_ccall("SCIPgetNLPVarsUbDualsol", Ptr{SCIP_Real}, (Ptr{SCIP},), scip)
SCIPgetNLPNlRows(scip) = @scip_ccall("SCIPgetNLPNlRows", Ptr{Ptr{SCIP_NLROW}}, (Ptr{SCIP},), scip)
SCIPgetNNLPNlRows(scip) = @scip_ccall("SCIPgetNNLPNlRows", Int, (Ptr{SCIP},), scip)
SCIPgetNLPSolstat(scip) = @scip_ccall("SCIPgetNLPSolstat", SCIP_NLPSOLSTAT, (Ptr{SCIP},), scip)
SCIPgetNLPTermstat(scip) = @scip_ccall("SCIPgetNLPTermstat", SCIP_NLPTERMSTAT, (Ptr{SCIP},), scip)
SCIPgetNLPObjval(scip) = @scip_ccall("SCIPgetNLPObjval", SCIP_Real, (Ptr{SCIP},), scip)
SCIPhasNLPSolution(scip) = @scip_ccall("SCIPhasNLPSolution", SCIP_Bool, (Ptr{SCIP},), scip)
SCIPgetCutEfficacy(scip, sol, cut) = @scip_ccall("SCIPgetCutEfficacy", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_SOL}, Ptr{SCIP_ROW}), scip, sol, cut)
SCIPisCutEfficacious(scip, sol, cut) = @scip_ccall("SCIPisCutEfficacious", SCIP_Bool, (Ptr{SCIP}, Ptr{SCIP_SOL}, Ptr{SCIP_ROW}), scip, sol, cut)
SCIPisEfficacious(scip, efficacy) = @scip_ccall("SCIPisEfficacious", SCIP_Bool, (Ptr{SCIP}, SCIP_Real), scip, efficacy)
SCIPgetVectorEfficacyNorm(scip, vals, nvals) = @scip_ccall("SCIPgetVectorEfficacyNorm", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_Real}, Int), scip, vals, nvals)
SCIPisCutApplicable(scip, cut) = @scip_ccall("SCIPisCutApplicable", SCIP_Bool, (Ptr{SCIP}, Ptr{SCIP_ROW}), scip, cut)
SCIPgetPoolCuts(scip) = @scip_ccall("SCIPgetPoolCuts", Ptr{Ptr{SCIP_CUT}}, (Ptr{SCIP},), scip)
SCIPgetNPoolCuts(scip) = @scip_ccall("SCIPgetNPoolCuts", Int, (Ptr{SCIP},), scip)
SCIPgetGlobalCutpool(scip) = @scip_ccall("SCIPgetGlobalCutpool", Ptr{SCIP_CUTPOOL}, (Ptr{SCIP},), scip)
SCIPgetDelayedPoolCuts(scip) = @scip_ccall("SCIPgetDelayedPoolCuts", Ptr{Ptr{SCIP_CUT}}, (Ptr{SCIP},), scip)
SCIPgetNDelayedPoolCuts(scip) = @scip_ccall("SCIPgetNDelayedPoolCuts", Int, (Ptr{SCIP},), scip)
SCIPgetDelayedGlobalCutpool(scip) = @scip_ccall("SCIPgetDelayedGlobalCutpool", Ptr{SCIP_CUTPOOL}, (Ptr{SCIP},), scip)
SCIPgetCuts(scip) = @scip_ccall("SCIPgetCuts", Ptr{Ptr{SCIP_ROW}}, (Ptr{SCIP},), scip)
SCIPgetNCuts(scip) = @scip_ccall("SCIPgetNCuts", Int, (Ptr{SCIP},), scip)
SCIPgetRelaxFeastolFactor(scip) = @scip_ccall("SCIPgetRelaxFeastolFactor", SCIP_Real, (Ptr{SCIP},), scip)
SCIPgetVarObjDive(scip, var) = @scip_ccall("SCIPgetVarObjDive", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}), scip, var)
SCIPgetVarLbDive(scip, var) = @scip_ccall("SCIPgetVarLbDive", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}), scip, var)
SCIPgetVarUbDive(scip, var) = @scip_ccall("SCIPgetVarUbDive", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}), scip, var)
SCIPgetLastDivenode(scip) = @scip_ccall("SCIPgetLastDivenode", Int64, (Ptr{SCIP},), scip)
SCIPinDive(scip) = @scip_ccall("SCIPinDive", SCIP_Bool, (Ptr{SCIP},), scip)
SCIPinProbing(scip) = @scip_ccall("SCIPinProbing", SCIP_Bool, (Ptr{SCIP},), scip)
SCIPgetProbingDepth(scip) = @scip_ccall("SCIPgetProbingDepth", Int, (Ptr{SCIP},), scip)
SCIPgetNLPBranchCands(scip) = @scip_ccall("SCIPgetNLPBranchCands", Int, (Ptr{SCIP},), scip)
SCIPgetNPrioLPBranchCands(scip) = @scip_ccall("SCIPgetNPrioLPBranchCands", Int, (Ptr{SCIP},), scip)
SCIPgetNExternBranchCands(scip) = @scip_ccall("SCIPgetNExternBranchCands", Int, (Ptr{SCIP},), scip)
SCIPgetNPrioExternBranchCands(scip) = @scip_ccall("SCIPgetNPrioExternBranchCands", Int, (Ptr{SCIP},), scip)
SCIPgetNPrioExternBranchBins(scip) = @scip_ccall("SCIPgetNPrioExternBranchBins", Int, (Ptr{SCIP},), scip)
SCIPgetNPrioExternBranchInts(scip) = @scip_ccall("SCIPgetNPrioExternBranchInts", Int, (Ptr{SCIP},), scip)
SCIPgetNPrioExternBranchImpls(scip) = @scip_ccall("SCIPgetNPrioExternBranchImpls", Int, (Ptr{SCIP},), scip)
SCIPgetNPrioExternBranchConts(scip) = @scip_ccall("SCIPgetNPrioExternBranchConts", Int, (Ptr{SCIP},), scip)
SCIPclearExternBranchCands(scip) = @scip_ccall("SCIPclearExternBranchCands", Void, (Ptr{SCIP},), scip)
SCIPcontainsExternBranchCand(scip, var) = @scip_ccall("SCIPcontainsExternBranchCand", SCIP_Bool, (Ptr{SCIP}, Ptr{SCIP_VAR}), scip, var)
SCIPgetNPseudoBranchCands(scip) = @scip_ccall("SCIPgetNPseudoBranchCands", Int, (Ptr{SCIP},), scip)
SCIPgetNPrioPseudoBranchCands(scip) = @scip_ccall("SCIPgetNPrioPseudoBranchCands", Int, (Ptr{SCIP},), scip)
SCIPgetNPrioPseudoBranchBins(scip) = @scip_ccall("SCIPgetNPrioPseudoBranchBins", Int, (Ptr{SCIP},), scip)
SCIPgetNPrioPseudoBranchInts(scip) = @scip_ccall("SCIPgetNPrioPseudoBranchInts", Int, (Ptr{SCIP},), scip)
SCIPgetNPrioPseudoBranchImpls(scip) = @scip_ccall("SCIPgetNPrioPseudoBranchImpls", Int, (Ptr{SCIP},), scip)
SCIPgetBranchScore(scip, var, downgain, upgain) = @scip_ccall("SCIPgetBranchScore", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real, SCIP_Real), scip, var, downgain, upgain)
SCIPgetBranchScoreMultiple(scip, var, nchildren, gains) = @scip_ccall("SCIPgetBranchScoreMultiple", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}, Int, Ptr{SCIP_Real}), scip, var, nchildren, gains)
SCIPgetBranchingPoint(scip, var, suggestion) = @scip_ccall("SCIPgetBranchingPoint", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), scip, var, suggestion)
SCIPcalcNodeselPriority(scip, var, branchdir, targetvalue) = @scip_ccall("SCIPcalcNodeselPriority", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_BRANCHDIR, SCIP_Real), scip, var, branchdir, targetvalue)
SCIPcalcChildEstimate(scip, var, targetvalue) = @scip_ccall("SCIPcalcChildEstimate", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), scip, var, targetvalue)
SCIPgetSolVal(scip, sol, var) = @scip_ccall("SCIPgetSolVal", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_SOL}, Ptr{SCIP_VAR}), scip, sol, var)
SCIPgetSolOrigObj(scip, sol) = @scip_ccall("SCIPgetSolOrigObj", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_SOL}), scip, sol)
SCIPgetSolTransObj(scip, sol) = @scip_ccall("SCIPgetSolTransObj", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_SOL}), scip, sol)
SCIPtransformObj(scip, obj) = @scip_ccall("SCIPtransformObj", SCIP_Real, (Ptr{SCIP}, SCIP_Real), scip, obj)
SCIPretransformObj(scip, obj) = @scip_ccall("SCIPretransformObj", SCIP_Real, (Ptr{SCIP}, SCIP_Real), scip, obj)
SCIPgetSolTime(scip, sol) = @scip_ccall("SCIPgetSolTime", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_SOL}), scip, sol)
SCIPgetSolRunnum(scip, sol) = @scip_ccall("SCIPgetSolRunnum", Int, (Ptr{SCIP}, Ptr{SCIP_SOL}), scip, sol)
SCIPgetSolNodenum(scip, sol) = @scip_ccall("SCIPgetSolNodenum", Int64, (Ptr{SCIP}, Ptr{SCIP_SOL}), scip, sol)
SCIPgetSolHeur(scip, sol) = @scip_ccall("SCIPgetSolHeur", Ptr{SCIP_HEUR}, (Ptr{SCIP}, Ptr{SCIP_SOL}), scip, sol)
SCIPareSolsEqual(scip, sol1, sol2) = @scip_ccall("SCIPareSolsEqual", SCIP_Bool, (Ptr{SCIP}, Ptr{SCIP_SOL}, Ptr{SCIP_SOL}), scip, sol1, sol2)
SCIPgetNSols(scip) = @scip_ccall("SCIPgetNSols", Int, (Ptr{SCIP},), scip)
SCIPgetSols(scip) = @scip_ccall("SCIPgetSols", Ptr{Ptr{SCIP_SOL}}, (Ptr{SCIP},), scip)
SCIPgetBestSol(scip) = @scip_ccall("SCIPgetBestSol", Ptr{SCIP_SOL}, (Ptr{SCIP},), scip)
SCIPhasPrimalRay(scip) = @scip_ccall("SCIPhasPrimalRay", SCIP_Bool, (Ptr{SCIP},), scip)
SCIPgetPrimalRayVal(scip, var) = @scip_ccall("SCIPgetPrimalRayVal", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}), scip, var)
SCIPgetCurrentNode(scip) = @scip_ccall("SCIPgetCurrentNode", Ptr{SCIP_NODE}, (Ptr{SCIP},), scip)
SCIPgetRootNode(scip) = @scip_ccall("SCIPgetRootNode", Ptr{SCIP_NODE}, (Ptr{SCIP},), scip)
SCIPinRepropagation(scip) = @scip_ccall("SCIPinRepropagation", SCIP_Bool, (Ptr{SCIP},), scip)
SCIPgetNChildren(scip) = @scip_ccall("SCIPgetNChildren", Int, (Ptr{SCIP},), scip)
SCIPgetNSiblings(scip) = @scip_ccall("SCIPgetNSiblings", Int, (Ptr{SCIP},), scip)
SCIPgetNLeaves(scip) = @scip_ccall("SCIPgetNLeaves", Int, (Ptr{SCIP},), scip)
SCIPgetPrioChild(scip) = @scip_ccall("SCIPgetPrioChild", Ptr{SCIP_NODE}, (Ptr{SCIP},), scip)
SCIPgetPrioSibling(scip) = @scip_ccall("SCIPgetPrioSibling", Ptr{SCIP_NODE}, (Ptr{SCIP},), scip)
SCIPgetBestChild(scip) = @scip_ccall("SCIPgetBestChild", Ptr{SCIP_NODE}, (Ptr{SCIP},), scip)
SCIPgetBestSibling(scip) = @scip_ccall("SCIPgetBestSibling", Ptr{SCIP_NODE}, (Ptr{SCIP},), scip)
SCIPgetBestLeaf(scip) = @scip_ccall("SCIPgetBestLeaf", Ptr{SCIP_NODE}, (Ptr{SCIP},), scip)
SCIPgetBestNode(scip) = @scip_ccall("SCIPgetBestNode", Ptr{SCIP_NODE}, (Ptr{SCIP},), scip)
SCIPgetBestboundNode(scip) = @scip_ccall("SCIPgetBestboundNode", Ptr{SCIP_NODE}, (Ptr{SCIP},), scip)
SCIPgetCutoffdepth(scip) = @scip_ccall("SCIPgetCutoffdepth", Int, (Ptr{SCIP},), scip)
SCIPgetRepropdepth(scip) = @scip_ccall("SCIPgetRepropdepth", Int, (Ptr{SCIP},), scip)
SCIPgetNRuns(scip) = @scip_ccall("SCIPgetNRuns", Int, (Ptr{SCIP},), scip)
SCIPgetNNodes(scip) = @scip_ccall("SCIPgetNNodes", Int64, (Ptr{SCIP},), scip)
SCIPgetNTotalNodes(scip) = @scip_ccall("SCIPgetNTotalNodes", Int64, (Ptr{SCIP},), scip)
SCIPgetNNodesLeft(scip) = @scip_ccall("SCIPgetNNodesLeft", Int, (Ptr{SCIP},), scip)
SCIPgetNLPs(scip) = @scip_ccall("SCIPgetNLPs", Int64, (Ptr{SCIP},), scip)
SCIPgetNLPIterations(scip) = @scip_ccall("SCIPgetNLPIterations", Int64, (Ptr{SCIP},), scip)
SCIPgetNRootLPIterations(scip) = @scip_ccall("SCIPgetNRootLPIterations", Int64, (Ptr{SCIP},), scip)
SCIPgetNRootFirstLPIterations(scip) = @scip_ccall("SCIPgetNRootFirstLPIterations", Int64, (Ptr{SCIP},), scip)
SCIPgetNPrimalLPs(scip) = @scip_ccall("SCIPgetNPrimalLPs", Int64, (Ptr{SCIP},), scip)
SCIPgetNPrimalLPIterations(scip) = @scip_ccall("SCIPgetNPrimalLPIterations", Int64, (Ptr{SCIP},), scip)
SCIPgetNDualLPs(scip) = @scip_ccall("SCIPgetNDualLPs", Int64, (Ptr{SCIP},), scip)
SCIPgetNDualLPIterations(scip) = @scip_ccall("SCIPgetNDualLPIterations", Int64, (Ptr{SCIP},), scip)
SCIPgetNBarrierLPs(scip) = @scip_ccall("SCIPgetNBarrierLPs", Int64, (Ptr{SCIP},), scip)
SCIPgetNBarrierLPIterations(scip) = @scip_ccall("SCIPgetNBarrierLPIterations", Int64, (Ptr{SCIP},), scip)
SCIPgetNResolveLPs(scip) = @scip_ccall("SCIPgetNResolveLPs", Int64, (Ptr{SCIP},), scip)
SCIPgetNResolveLPIterations(scip) = @scip_ccall("SCIPgetNResolveLPIterations", Int64, (Ptr{SCIP},), scip)
SCIPgetNPrimalResolveLPs(scip) = @scip_ccall("SCIPgetNPrimalResolveLPs", Int64, (Ptr{SCIP},), scip)
SCIPgetNPrimalResolveLPIterations(scip) = @scip_ccall("SCIPgetNPrimalResolveLPIterations", Int64, (Ptr{SCIP},), scip)
SCIPgetNDualResolveLPs(scip) = @scip_ccall("SCIPgetNDualResolveLPs", Int64, (Ptr{SCIP},), scip)
SCIPgetNDualResolveLPIterations(scip) = @scip_ccall("SCIPgetNDualResolveLPIterations", Int64, (Ptr{SCIP},), scip)
SCIPgetNNodeLPs(scip) = @scip_ccall("SCIPgetNNodeLPs", Int64, (Ptr{SCIP},), scip)
SCIPgetNNodeLPIterations(scip) = @scip_ccall("SCIPgetNNodeLPIterations", Int64, (Ptr{SCIP},), scip)
SCIPgetNNodeInitLPs(scip) = @scip_ccall("SCIPgetNNodeInitLPs", Int64, (Ptr{SCIP},), scip)
SCIPgetNNodeInitLPIterations(scip) = @scip_ccall("SCIPgetNNodeInitLPIterations", Int64, (Ptr{SCIP},), scip)
SCIPgetNDivingLPs(scip) = @scip_ccall("SCIPgetNDivingLPs", Int64, (Ptr{SCIP},), scip)
SCIPgetNDivingLPIterations(scip) = @scip_ccall("SCIPgetNDivingLPIterations", Int64, (Ptr{SCIP},), scip)
SCIPgetNStrongbranchs(scip) = @scip_ccall("SCIPgetNStrongbranchs", Int64, (Ptr{SCIP},), scip)
SCIPgetNStrongbranchLPIterations(scip) = @scip_ccall("SCIPgetNStrongbranchLPIterations", Int64, (Ptr{SCIP},), scip)
SCIPgetNRootStrongbranchs(scip) = @scip_ccall("SCIPgetNRootStrongbranchs", Int64, (Ptr{SCIP},), scip)
SCIPgetNRootStrongbranchLPIterations(scip) = @scip_ccall("SCIPgetNRootStrongbranchLPIterations", Int64, (Ptr{SCIP},), scip)
SCIPgetNPriceRounds(scip) = @scip_ccall("SCIPgetNPriceRounds", Int, (Ptr{SCIP},), scip)
SCIPgetNPricevars(scip) = @scip_ccall("SCIPgetNPricevars", Int, (Ptr{SCIP},), scip)
SCIPgetNPricevarsFound(scip) = @scip_ccall("SCIPgetNPricevarsFound", Int, (Ptr{SCIP},), scip)
SCIPgetNPricevarsApplied(scip) = @scip_ccall("SCIPgetNPricevarsApplied", Int, (Ptr{SCIP},), scip)
SCIPgetNSepaRounds(scip) = @scip_ccall("SCIPgetNSepaRounds", Int, (Ptr{SCIP},), scip)
SCIPgetNCutsFound(scip) = @scip_ccall("SCIPgetNCutsFound", Int, (Ptr{SCIP},), scip)
SCIPgetNCutsFoundRound(scip) = @scip_ccall("SCIPgetNCutsFoundRound", Int, (Ptr{SCIP},), scip)
SCIPgetNCutsApplied(scip) = @scip_ccall("SCIPgetNCutsApplied", Int, (Ptr{SCIP},), scip)
SCIPgetNConflictConssFound(scip) = @scip_ccall("SCIPgetNConflictConssFound", Int64, (Ptr{SCIP},), scip)
SCIPgetNConflictConssFoundNode(scip) = @scip_ccall("SCIPgetNConflictConssFoundNode", Int, (Ptr{SCIP},), scip)
SCIPgetNConflictConssApplied(scip) = @scip_ccall("SCIPgetNConflictConssApplied", Int64, (Ptr{SCIP},), scip)
SCIPgetDepth(scip) = @scip_ccall("SCIPgetDepth", Int, (Ptr{SCIP},), scip)
SCIPgetFocusDepth(scip) = @scip_ccall("SCIPgetFocusDepth", Int, (Ptr{SCIP},), scip)
SCIPgetMaxDepth(scip) = @scip_ccall("SCIPgetMaxDepth", Int, (Ptr{SCIP},), scip)
SCIPgetMaxTotalDepth(scip) = @scip_ccall("SCIPgetMaxTotalDepth", Int, (Ptr{SCIP},), scip)
SCIPgetNBacktracks(scip) = @scip_ccall("SCIPgetNBacktracks", Int64, (Ptr{SCIP},), scip)
SCIPgetPlungeDepth(scip) = @scip_ccall("SCIPgetPlungeDepth", Int, (Ptr{SCIP},), scip)
SCIPgetNActiveConss(scip) = @scip_ccall("SCIPgetNActiveConss", Int, (Ptr{SCIP},), scip)
SCIPgetNEnabledConss(scip) = @scip_ccall("SCIPgetNEnabledConss", Int, (Ptr{SCIP},), scip)
SCIPgetAvgDualbound(scip) = @scip_ccall("SCIPgetAvgDualbound", SCIP_Real, (Ptr{SCIP},), scip)
SCIPgetAvgLowerbound(scip) = @scip_ccall("SCIPgetAvgLowerbound", SCIP_Real, (Ptr{SCIP},), scip)
SCIPgetDualbound(scip) = @scip_ccall("SCIPgetDualbound", SCIP_Real, (Ptr{SCIP},), scip)
SCIPgetLowerbound(scip) = @scip_ccall("SCIPgetLowerbound", SCIP_Real, (Ptr{SCIP},), scip)
SCIPgetDualboundRoot(scip) = @scip_ccall("SCIPgetDualboundRoot", SCIP_Real, (Ptr{SCIP},), scip)
SCIPgetLowerboundRoot(scip) = @scip_ccall("SCIPgetLowerboundRoot", SCIP_Real, (Ptr{SCIP},), scip)
SCIPgetFirstLPDualboundRoot(scip) = @scip_ccall("SCIPgetFirstLPDualboundRoot", SCIP_Real, (Ptr{SCIP},), scip)
SCIPgetFirstLPLowerboundRoot(scip) = @scip_ccall("SCIPgetFirstLPLowerboundRoot", SCIP_Real, (Ptr{SCIP},), scip)
SCIPgetPrimalbound(scip) = @scip_ccall("SCIPgetPrimalbound", SCIP_Real, (Ptr{SCIP},), scip)
SCIPgetUpperbound(scip) = @scip_ccall("SCIPgetUpperbound", SCIP_Real, (Ptr{SCIP},), scip)
SCIPgetCutoffbound(scip) = @scip_ccall("SCIPgetCutoffbound", SCIP_Real, (Ptr{SCIP},), scip)
SCIPisPrimalboundSol(scip) = @scip_ccall("SCIPisPrimalboundSol", SCIP_Bool, (Ptr{SCIP},), scip)
SCIPgetGap(scip) = @scip_ccall("SCIPgetGap", SCIP_Real, (Ptr{SCIP},), scip)
SCIPgetTransGap(scip) = @scip_ccall("SCIPgetTransGap", SCIP_Real, (Ptr{SCIP},), scip)
SCIPgetNSolsFound(scip) = @scip_ccall("SCIPgetNSolsFound", Int64, (Ptr{SCIP},), scip)
SCIPgetNLimSolsFound(scip) = @scip_ccall("SCIPgetNLimSolsFound", Int64, (Ptr{SCIP},), scip)
SCIPgetNBestSolsFound(scip) = @scip_ccall("SCIPgetNBestSolsFound", Int64, (Ptr{SCIP},), scip)
SCIPgetAvgPseudocost(scip, solvaldelta) = @scip_ccall("SCIPgetAvgPseudocost", SCIP_Real, (Ptr{SCIP}, SCIP_Real), scip, solvaldelta)
SCIPgetAvgPseudocostCurrentRun(scip, solvaldelta) = @scip_ccall("SCIPgetAvgPseudocostCurrentRun", SCIP_Real, (Ptr{SCIP}, SCIP_Real), scip, solvaldelta)
SCIPgetAvgPseudocostCount(scip, dir) = @scip_ccall("SCIPgetAvgPseudocostCount", SCIP_Real, (Ptr{SCIP}, SCIP_BRANCHDIR), scip, dir)
SCIPgetAvgPseudocostCountCurrentRun(scip, dir) = @scip_ccall("SCIPgetAvgPseudocostCountCurrentRun", SCIP_Real, (Ptr{SCIP}, SCIP_BRANCHDIR), scip, dir)
SCIPgetAvgPseudocostScore(scip) = @scip_ccall("SCIPgetAvgPseudocostScore", SCIP_Real, (Ptr{SCIP},), scip)
SCIPgetAvgPseudocostScoreCurrentRun(scip) = @scip_ccall("SCIPgetAvgPseudocostScoreCurrentRun", SCIP_Real, (Ptr{SCIP},), scip)
SCIPgetAvgConflictScore(scip) = @scip_ccall("SCIPgetAvgConflictScore", SCIP_Real, (Ptr{SCIP},), scip)
SCIPgetAvgConflictScoreCurrentRun(scip) = @scip_ccall("SCIPgetAvgConflictScoreCurrentRun", SCIP_Real, (Ptr{SCIP},), scip)
SCIPgetAvgConflictlengthScore(scip) = @scip_ccall("SCIPgetAvgConflictlengthScore", SCIP_Real, (Ptr{SCIP},), scip)
SCIPgetAvgConflictlengthScoreCurrentRun(scip) = @scip_ccall("SCIPgetAvgConflictlengthScoreCurrentRun", SCIP_Real, (Ptr{SCIP},), scip)
SCIPgetAvgInferences(scip, dir) = @scip_ccall("SCIPgetAvgInferences", SCIP_Real, (Ptr{SCIP}, SCIP_BRANCHDIR), scip, dir)
SCIPgetAvgInferencesCurrentRun(scip, dir) = @scip_ccall("SCIPgetAvgInferencesCurrentRun", SCIP_Real, (Ptr{SCIP}, SCIP_BRANCHDIR), scip, dir)
SCIPgetAvgInferenceScore(scip) = @scip_ccall("SCIPgetAvgInferenceScore", SCIP_Real, (Ptr{SCIP},), scip)
SCIPgetAvgInferenceScoreCurrentRun(scip) = @scip_ccall("SCIPgetAvgInferenceScoreCurrentRun", SCIP_Real, (Ptr{SCIP},), scip)
SCIPgetAvgCutoffs(scip, dir) = @scip_ccall("SCIPgetAvgCutoffs", SCIP_Real, (Ptr{SCIP}, SCIP_BRANCHDIR), scip, dir)
SCIPgetAvgCutoffsCurrentRun(scip, dir) = @scip_ccall("SCIPgetAvgCutoffsCurrentRun", SCIP_Real, (Ptr{SCIP}, SCIP_BRANCHDIR), scip, dir)
SCIPgetAvgCutoffScore(scip) = @scip_ccall("SCIPgetAvgCutoffScore", SCIP_Real, (Ptr{SCIP},), scip)
SCIPgetAvgCutoffScoreCurrentRun(scip) = @scip_ccall("SCIPgetAvgCutoffScoreCurrentRun", SCIP_Real, (Ptr{SCIP},), scip)
SCIPgetNImplications(scip) = @scip_ccall("SCIPgetNImplications", Int, (Ptr{SCIP},), scip)
SCIPgetTimeOfDay(scip) = @scip_ccall("SCIPgetTimeOfDay", SCIP_Real, (Ptr{SCIP},), scip)
SCIPgetClockTime(scip, clck) = @scip_ccall("SCIPgetClockTime", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_CLOCK}), scip, clck)
SCIPgetTotalTime(scip) = @scip_ccall("SCIPgetTotalTime", SCIP_Real, (Ptr{SCIP},), scip)
SCIPgetSolvingTime(scip) = @scip_ccall("SCIPgetSolvingTime", SCIP_Real, (Ptr{SCIP},), scip)
SCIPgetReadingTime(scip) = @scip_ccall("SCIPgetReadingTime", SCIP_Real, (Ptr{SCIP},), scip)
SCIPgetPresolvingTime(scip) = @scip_ccall("SCIPgetPresolvingTime", SCIP_Real, (Ptr{SCIP},), scip)
SCIPgetFirstLPTime(scip) = @scip_ccall("SCIPgetFirstLPTime", SCIP_Real, (Ptr{SCIP},), scip)
SCIPepsilon(scip) = @scip_ccall("SCIPepsilon", SCIP_Real, (Ptr{SCIP},), scip)
SCIPsumepsilon(scip) = @scip_ccall("SCIPsumepsilon", SCIP_Real, (Ptr{SCIP},), scip)
SCIPfeastol(scip) = @scip_ccall("SCIPfeastol", SCIP_Real, (Ptr{SCIP},), scip)
SCIPlpfeastol(scip) = @scip_ccall("SCIPlpfeastol", SCIP_Real, (Ptr{SCIP},), scip)
SCIPdualfeastol(scip) = @scip_ccall("SCIPdualfeastol", SCIP_Real, (Ptr{SCIP},), scip)
SCIPbarrierconvtol(scip) = @scip_ccall("SCIPbarrierconvtol", SCIP_Real, (Ptr{SCIP},), scip)
SCIPcutoffbounddelta(scip) = @scip_ccall("SCIPcutoffbounddelta", SCIP_Real, (Ptr{SCIP},), scip)
SCIPmarkLimitChanged(scip) = @scip_ccall("SCIPmarkLimitChanged", Void, (Ptr{SCIP},), scip)
SCIPinfinity(scip) = @scip_ccall("SCIPinfinity", SCIP_Real, (Ptr{SCIP},), scip)
SCIPgetHugeValue(scip) = @scip_ccall("SCIPgetHugeValue", SCIP_Real, (Ptr{SCIP},), scip)
SCIPisEQ(scip, val1, val2) = @scip_ccall("SCIPisEQ", SCIP_Bool, (Ptr{SCIP}, SCIP_Real, SCIP_Real), scip, val1, val2)
SCIPisLT(scip, val1, val2) = @scip_ccall("SCIPisLT", SCIP_Bool, (Ptr{SCIP}, SCIP_Real, SCIP_Real), scip, val1, val2)
SCIPisLE(scip, val1, val2) = @scip_ccall("SCIPisLE", SCIP_Bool, (Ptr{SCIP}, SCIP_Real, SCIP_Real), scip, val1, val2)
SCIPisGT(scip, val1, val2) = @scip_ccall("SCIPisGT", SCIP_Bool, (Ptr{SCIP}, SCIP_Real, SCIP_Real), scip, val1, val2)
SCIPisGE(scip, val1, val2) = @scip_ccall("SCIPisGE", SCIP_Bool, (Ptr{SCIP}, SCIP_Real, SCIP_Real), scip, val1, val2)
SCIPisInfinity(scip, val) = @scip_ccall("SCIPisInfinity", SCIP_Bool, (Ptr{SCIP}, SCIP_Real), scip, val)
SCIPisHugeValue(scip, val) = @scip_ccall("SCIPisHugeValue", SCIP_Bool, (Ptr{SCIP}, SCIP_Real), scip, val)
SCIPisZero(scip, val) = @scip_ccall("SCIPisZero", SCIP_Bool, (Ptr{SCIP}, SCIP_Real), scip, val)
SCIPisPositive(scip, val) = @scip_ccall("SCIPisPositive", SCIP_Bool, (Ptr{SCIP}, SCIP_Real), scip, val)
SCIPisNegative(scip, val) = @scip_ccall("SCIPisNegative", SCIP_Bool, (Ptr{SCIP}, SCIP_Real), scip, val)
SCIPisIntegral(scip, val) = @scip_ccall("SCIPisIntegral", SCIP_Bool, (Ptr{SCIP}, SCIP_Real), scip, val)
SCIPisScalingIntegral(scip, val, scalar) = @scip_ccall("SCIPisScalingIntegral", SCIP_Bool, (Ptr{SCIP}, SCIP_Real, SCIP_Real), scip, val, scalar)
SCIPisFracIntegral(scip, val) = @scip_ccall("SCIPisFracIntegral", SCIP_Bool, (Ptr{SCIP}, SCIP_Real), scip, val)
SCIPfloor(scip, val) = @scip_ccall("SCIPfloor", SCIP_Real, (Ptr{SCIP}, SCIP_Real), scip, val)
SCIPceil(scip, val) = @scip_ccall("SCIPceil", SCIP_Real, (Ptr{SCIP}, SCIP_Real), scip, val)
SCIPround(scip, val) = @scip_ccall("SCIPround", SCIP_Real, (Ptr{SCIP}, SCIP_Real), scip, val)
SCIPfrac(scip, val) = @scip_ccall("SCIPfrac", SCIP_Real, (Ptr{SCIP}, SCIP_Real), scip, val)
SCIPisSumEQ(scip, val1, val2) = @scip_ccall("SCIPisSumEQ", SCIP_Bool, (Ptr{SCIP}, SCIP_Real, SCIP_Real), scip, val1, val2)
SCIPisSumLT(scip, val1, val2) = @scip_ccall("SCIPisSumLT", SCIP_Bool, (Ptr{SCIP}, SCIP_Real, SCIP_Real), scip, val1, val2)
SCIPisSumLE(scip, val1, val2) = @scip_ccall("SCIPisSumLE", SCIP_Bool, (Ptr{SCIP}, SCIP_Real, SCIP_Real), scip, val1, val2)
SCIPisSumGT(scip, val1, val2) = @scip_ccall("SCIPisSumGT", SCIP_Bool, (Ptr{SCIP}, SCIP_Real, SCIP_Real), scip, val1, val2)
SCIPisSumGE(scip, val1, val2) = @scip_ccall("SCIPisSumGE", SCIP_Bool, (Ptr{SCIP}, SCIP_Real, SCIP_Real), scip, val1, val2)
SCIPisSumZero(scip, val) = @scip_ccall("SCIPisSumZero", SCIP_Bool, (Ptr{SCIP}, SCIP_Real), scip, val)
SCIPisSumPositive(scip, val) = @scip_ccall("SCIPisSumPositive", SCIP_Bool, (Ptr{SCIP}, SCIP_Real), scip, val)
SCIPisSumNegative(scip, val) = @scip_ccall("SCIPisSumNegative", SCIP_Bool, (Ptr{SCIP}, SCIP_Real), scip, val)
SCIPisFeasEQ(scip, val1, val2) = @scip_ccall("SCIPisFeasEQ", SCIP_Bool, (Ptr{SCIP}, SCIP_Real, SCIP_Real), scip, val1, val2)
SCIPisFeasLT(scip, val1, val2) = @scip_ccall("SCIPisFeasLT", SCIP_Bool, (Ptr{SCIP}, SCIP_Real, SCIP_Real), scip, val1, val2)
SCIPisFeasLE(scip, val1, val2) = @scip_ccall("SCIPisFeasLE", SCIP_Bool, (Ptr{SCIP}, SCIP_Real, SCIP_Real), scip, val1, val2)
SCIPisFeasGT(scip, val1, val2) = @scip_ccall("SCIPisFeasGT", SCIP_Bool, (Ptr{SCIP}, SCIP_Real, SCIP_Real), scip, val1, val2)
SCIPisFeasGE(scip, val1, val2) = @scip_ccall("SCIPisFeasGE", SCIP_Bool, (Ptr{SCIP}, SCIP_Real, SCIP_Real), scip, val1, val2)
SCIPisFeasZero(scip, val) = @scip_ccall("SCIPisFeasZero", SCIP_Bool, (Ptr{SCIP}, SCIP_Real), scip, val)
SCIPisFeasPositive(scip, val) = @scip_ccall("SCIPisFeasPositive", SCIP_Bool, (Ptr{SCIP}, SCIP_Real), scip, val)
SCIPisFeasNegative(scip, val) = @scip_ccall("SCIPisFeasNegative", SCIP_Bool, (Ptr{SCIP}, SCIP_Real), scip, val)
SCIPisFeasIntegral(scip, val) = @scip_ccall("SCIPisFeasIntegral", SCIP_Bool, (Ptr{SCIP}, SCIP_Real), scip, val)
SCIPisFeasFracIntegral(scip, val) = @scip_ccall("SCIPisFeasFracIntegral", SCIP_Bool, (Ptr{SCIP}, SCIP_Real), scip, val)
SCIPfeasFloor(scip, val) = @scip_ccall("SCIPfeasFloor", SCIP_Real, (Ptr{SCIP}, SCIP_Real), scip, val)
SCIPfeasCeil(scip, val) = @scip_ccall("SCIPfeasCeil", SCIP_Real, (Ptr{SCIP}, SCIP_Real), scip, val)
SCIPfeasRound(scip, val) = @scip_ccall("SCIPfeasRound", SCIP_Real, (Ptr{SCIP}, SCIP_Real), scip, val)
SCIPfeasFrac(scip, val) = @scip_ccall("SCIPfeasFrac", SCIP_Real, (Ptr{SCIP}, SCIP_Real), scip, val)
SCIPisLbBetter(scip, newlb, oldlb, oldub) = @scip_ccall("SCIPisLbBetter", SCIP_Bool, (Ptr{SCIP}, SCIP_Real, SCIP_Real, SCIP_Real), scip, newlb, oldlb, oldub)
SCIPisUbBetter(scip, newub, oldlb, oldub) = @scip_ccall("SCIPisUbBetter", SCIP_Bool, (Ptr{SCIP}, SCIP_Real, SCIP_Real, SCIP_Real), scip, newub, oldlb, oldub)
SCIPisRelEQ(scip, val1, val2) = @scip_ccall("SCIPisRelEQ", SCIP_Bool, (Ptr{SCIP}, SCIP_Real, SCIP_Real), scip, val1, val2)
SCIPisRelLT(scip, val1, val2) = @scip_ccall("SCIPisRelLT", SCIP_Bool, (Ptr{SCIP}, SCIP_Real, SCIP_Real), scip, val1, val2)
SCIPisRelLE(scip, val1, val2) = @scip_ccall("SCIPisRelLE", SCIP_Bool, (Ptr{SCIP}, SCIP_Real, SCIP_Real), scip, val1, val2)
SCIPisRelGT(scip, val1, val2) = @scip_ccall("SCIPisRelGT", SCIP_Bool, (Ptr{SCIP}, SCIP_Real, SCIP_Real), scip, val1, val2)
SCIPisRelGE(scip, val1, val2) = @scip_ccall("SCIPisRelGE", SCIP_Bool, (Ptr{SCIP}, SCIP_Real, SCIP_Real), scip, val1, val2)
SCIPisSumRelEQ(scip, val1, val2) = @scip_ccall("SCIPisSumRelEQ", SCIP_Bool, (Ptr{SCIP}, SCIP_Real, SCIP_Real), scip, val1, val2)
SCIPisSumRelLT(scip, val1, val2) = @scip_ccall("SCIPisSumRelLT", SCIP_Bool, (Ptr{SCIP}, SCIP_Real, SCIP_Real), scip, val1, val2)
SCIPisSumRelLE(scip, val1, val2) = @scip_ccall("SCIPisSumRelLE", SCIP_Bool, (Ptr{SCIP}, SCIP_Real, SCIP_Real), scip, val1, val2)
SCIPisSumRelGT(scip, val1, val2) = @scip_ccall("SCIPisSumRelGT", SCIP_Bool, (Ptr{SCIP}, SCIP_Real, SCIP_Real), scip, val1, val2)
SCIPisSumRelGE(scip, val1, val2) = @scip_ccall("SCIPisSumRelGE", SCIP_Bool, (Ptr{SCIP}, SCIP_Real, SCIP_Real), scip, val1, val2)
SCIPisUpdateUnreliable(scip, newvalue, oldvalue) = @scip_ccall("SCIPisUpdateUnreliable", SCIP_Bool, (Ptr{SCIP}, SCIP_Real, SCIP_Real), scip, newvalue, oldvalue)
SCIPgetMemUsed(scip) = @scip_ccall("SCIPgetMemUsed", Int64, (Ptr{SCIP},), scip)
SCIPgetMemExternEstim(scip) = @scip_ccall("SCIPgetMemExternEstim", Int64, (Ptr{SCIP},), scip)
SCIPcalcMemGrowSize(scip, num) = @scip_ccall("SCIPcalcMemGrowSize", Int, (Ptr{SCIP}, Int), scip, num)
SCIPprintMemoryDiagnostic(scip) = @scip_ccall("SCIPprintMemoryDiagnostic", Void, (Ptr{SCIP},), scip)
SCIPgetRealarrayVal(scip, realarray, idx) = @scip_ccall("SCIPgetRealarrayVal", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_REALARRAY}, Int), scip, realarray, idx)
SCIPgetRealarrayMinIdx(scip, realarray) = @scip_ccall("SCIPgetRealarrayMinIdx", Int, (Ptr{SCIP}, Ptr{SCIP_REALARRAY}), scip, realarray)
SCIPgetRealarrayMaxIdx(scip, realarray) = @scip_ccall("SCIPgetRealarrayMaxIdx", Int, (Ptr{SCIP}, Ptr{SCIP_REALARRAY}), scip, realarray)
SCIPgetIntarrayVal(scip, intarray, idx) = @scip_ccall("SCIPgetIntarrayVal", Int, (Ptr{SCIP}, Ptr{SCIP_INTARRAY}, Int), scip, intarray, idx)
SCIPgetIntarrayMinIdx(scip, intarray) = @scip_ccall("SCIPgetIntarrayMinIdx", Int, (Ptr{SCIP}, Ptr{SCIP_INTARRAY}), scip, intarray)
SCIPgetIntarrayMaxIdx(scip, intarray) = @scip_ccall("SCIPgetIntarrayMaxIdx", Int, (Ptr{SCIP}, Ptr{SCIP_INTARRAY}), scip, intarray)
SCIPgetBoolarrayVal(scip, boolarray, idx) = @scip_ccall("SCIPgetBoolarrayVal", SCIP_Bool, (Ptr{SCIP}, Ptr{SCIP_BOOLARRAY}, Int), scip, boolarray, idx)
SCIPgetBoolarrayMinIdx(scip, boolarray) = @scip_ccall("SCIPgetBoolarrayMinIdx", Int, (Ptr{SCIP}, Ptr{SCIP_BOOLARRAY}), scip, boolarray)
SCIPgetBoolarrayMaxIdx(scip, boolarray) = @scip_ccall("SCIPgetBoolarrayMaxIdx", Int, (Ptr{SCIP}, Ptr{SCIP_BOOLARRAY}), scip, boolarray)
SCIPgetPtrarrayMinIdx(scip, ptrarray) = @scip_ccall("SCIPgetPtrarrayMinIdx", Int, (Ptr{SCIP}, Ptr{SCIP_PTRARRAY}), scip, ptrarray)
SCIPgetPtrarrayMaxIdx(scip, ptrarray) = @scip_ccall("SCIPgetPtrarrayMaxIdx", Int, (Ptr{SCIP}, Ptr{SCIP_PTRARRAY}), scip, ptrarray)

# SCIP function wrappers: unchecked functions
SCIPexprEval(expr, varvals, param, val) = @scip_ccall_check("SCIPexprEval", (Ptr{SCIP_EXPR}, Ptr{SCIP_Real}, Ptr{SCIP_Real}, Ptr{SCIP_Real}), expr, varvals, param, val)
SCIPexprEvalInt(expr, infinity, varvals, param, val) = @scip_ccall_check("SCIPexprEvalInt", (Ptr{SCIP_EXPR}, SCIP_Real, Ptr{SCIP_INTERVAL}, Ptr{SCIP_Real}, Ptr{SCIP_INTERVAL}), expr, infinity, varvals, param, val)
SCIPexprCheckCurvature(expr, infinity, varbounds, param, curv, bounds) = @scip_ccall_check("SCIPexprCheckCurvature", (Ptr{SCIP_EXPR}, SCIP_Real, Ptr{SCIP_INTERVAL}, Ptr{SCIP_Real}, Ptr{SCIP_EXPRCURV}, Ptr{SCIP_INTERVAL}), expr, infinity, varbounds, param, curv, bounds)
SCIPexprtreeFreeInterpreterData(tree) = @scip_ccall_check("SCIPexprtreeFreeInterpreterData", (Ptr{SCIP_EXPRTREE},), tree)
SCIPexprtreeEval(tree, varvals, val) = @scip_ccall_check("SCIPexprtreeEval", (Ptr{SCIP_EXPRTREE}, Ptr{SCIP_Real}, Ptr{SCIP_Real}), tree, varvals, val)
SCIPexprtreeEvalInt(tree, infinity, varvals, val) = @scip_ccall_check("SCIPexprtreeEvalInt", (Ptr{SCIP_EXPRTREE}, SCIP_Real, Ptr{SCIP_INTERVAL}, Ptr{SCIP_INTERVAL}), tree, infinity, varvals, val)
SCIPexprtreeFree(tree) = @scip_ccall_check("SCIPexprtreeFree", (Ptr{Ptr{SCIP_EXPRTREE}},), tree)
SCIPexprtreeSetParams(tree, nparams, paramvals) = @scip_ccall_check("SCIPexprtreeSetParams", (Ptr{SCIP_EXPRTREE}, Int, Ptr{SCIP_Real}), tree, nparams, paramvals)
SCIPexprtreeAddExpr(tree, expr, copyexpr) = @scip_ccall_check("SCIPexprtreeAddExpr", (Ptr{SCIP_EXPRTREE}, Ptr{SCIP_EXPR}, SCIP_Bool), tree, expr, copyexpr)
SCIPexprtreeCheckCurvature(tree, infinity, varbounds, curv, bounds) = @scip_ccall_check("SCIPexprtreeCheckCurvature", (Ptr{SCIP_EXPRTREE}, SCIP_Real, Ptr{SCIP_INTERVAL}, Ptr{SCIP_EXPRCURV}, Ptr{SCIP_INTERVAL}), tree, infinity, varbounds, curv, bounds)
SCIPexprtreeSubstituteVars(tree, substexprs) = @scip_ccall_check("SCIPexprtreeSubstituteVars", (Ptr{SCIP_EXPRTREE}, Ptr{Ptr{SCIP_EXPR}}), tree, substexprs)
SCIPexprgraphMoveNodeParents(exprgraph, srcnode, targetnode) = @scip_ccall_check("SCIPexprgraphMoveNodeParents", (Ptr{SCIP_EXPRGRAPH}, Ptr{Ptr{SCIP_EXPRGRAPHNODE}}, Ptr{SCIP_EXPRGRAPHNODE}), exprgraph, srcnode, targetnode)
SCIPexprgraphReleaseNode(exprgraph, node) = @scip_ccall_check("SCIPexprgraphReleaseNode", (Ptr{SCIP_EXPRGRAPH}, Ptr{Ptr{SCIP_EXPRGRAPHNODE}}), exprgraph, node)
SCIPexprgraphUpdateNodeBoundsCurvature(node, infinity, minstrength, clearreverseprop) = @scip_ccall_check("SCIPexprgraphUpdateNodeBoundsCurvature", (Ptr{SCIP_EXPRGRAPHNODE}, SCIP_Real, SCIP_Real, SCIP_Bool), node, infinity, minstrength, clearreverseprop)
SCIPexprgraphFree(exprgraph) = @scip_ccall_check("SCIPexprgraphFree", (Ptr{Ptr{SCIP_EXPRGRAPH}},), exprgraph)
SCIPexprgraphAddNode(exprgraph, node, mindepth, nchildren, children) = @scip_ccall_check("SCIPexprgraphAddNode", (Ptr{SCIP_EXPRGRAPH}, Ptr{SCIP_EXPRGRAPHNODE}, Int, Int, Ptr{Ptr{SCIP_EXPRGRAPHNODE}}), exprgraph, node, mindepth, nchildren, children)
SCIPexprgraphAddConst(exprgraph, constant, constnode) = @scip_ccall_check("SCIPexprgraphAddConst", (Ptr{SCIP_EXPRGRAPH}, SCIP_Real, Ptr{Ptr{SCIP_EXPRGRAPHNODE}}), exprgraph, constant, constnode)
SCIPexprgraphAddExprtreeSum(exprgraph, nexprtrees, exprtrees, coefs, rootnode, rootnodeisnew) = @scip_ccall_check("SCIPexprgraphAddExprtreeSum", (Ptr{SCIP_EXPRGRAPH}, Int, Ptr{Ptr{SCIP_EXPRTREE}}, Ptr{SCIP_Real}, Ptr{Ptr{SCIP_EXPRGRAPHNODE}}, Ptr{SCIP_Bool}), exprgraph, nexprtrees, exprtrees, coefs, rootnode, rootnodeisnew)
SCIPexprgraphEval(exprgraph, varvals) = @scip_ccall_check("SCIPexprgraphEval", (Ptr{SCIP_EXPRGRAPH}, Ptr{SCIP_Real}), exprgraph, varvals)
SCIPexprgraphPropagateVarBounds(exprgraph, infinity, clearreverseprop, domainerror) = @scip_ccall_check("SCIPexprgraphPropagateVarBounds", (Ptr{SCIP_EXPRGRAPH}, SCIP_Real, SCIP_Bool, Ptr{SCIP_Bool}), exprgraph, infinity, clearreverseprop, domainerror)
SCIPexprgraphCheckCurvature(exprgraph, infinity, clearreverseprop) = @scip_ccall_check("SCIPexprgraphCheckCurvature", (Ptr{SCIP_EXPRGRAPH}, SCIP_Real, SCIP_Bool), exprgraph, infinity, clearreverseprop)
SCIPexprgraphSimplify(exprgraph, messagehdlr, eps, maxexpansionexponent, havechange, domainerror) = @scip_ccall_check("SCIPexprgraphSimplify", (Ptr{SCIP_EXPRGRAPH}, Ptr{SCIP_MESSAGEHDLR}, SCIP_Real, Int, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}), exprgraph, messagehdlr, eps, maxexpansionexponent, havechange, domainerror)
SCIPexprgraphGetTree(exprgraph, rootnode, exprtree) = @scip_ccall_check("SCIPexprgraphGetTree", (Ptr{SCIP_EXPRGRAPH}, Ptr{SCIP_EXPRGRAPHNODE}, Ptr{Ptr{SCIP_EXPRTREE}}), exprgraph, rootnode, exprtree)
SCIPexprtreeSetVars(tree, nvars, vars) = @scip_ccall_check("SCIPexprtreeSetVars", (Ptr{SCIP_EXPRTREE}, Int, Ptr{Ptr{SCIP_VAR}}), tree, nvars, vars)
SCIPexprtreeAddVars(tree, nvars, vars) = @scip_ccall_check("SCIPexprtreeAddVars", (Ptr{SCIP_EXPRTREE}, Int, Ptr{Ptr{SCIP_VAR}}), tree, nvars, vars)
SCIPcreate(scip) = @scip_ccall_check("SCIPcreate", (Ptr{Ptr{SCIP}},), scip)
SCIPfree(scip) = @scip_ccall_check("SCIPfree", (Ptr{Ptr{SCIP}},), scip)
SCIPsetMessagehdlr(scip, messagehdlr) = @scip_ccall_check("SCIPsetMessagehdlr", (Ptr{SCIP}, Ptr{SCIP_MESSAGEHDLR}), scip, messagehdlr)
SCIPcopyPlugins(sourcescip, targetscip, copyreaders, copypricers, copyconshdlrs, copyconflicthdlrs, copypresolvers, copyrelaxators, copyseparators, copypropagators, copyheuristics, copyeventhdlrs, copynodeselectors, copybranchrules, copydisplays, copydialogs, copynlpis, passmessagehdlr, valid) = @scip_ccall_check("SCIPcopyPlugins", (Ptr{SCIP}, Ptr{SCIP}, SCIP_Bool, SCIP_Bool, SCIP_Bool, SCIP_Bool, SCIP_Bool, SCIP_Bool, SCIP_Bool, SCIP_Bool, SCIP_Bool, SCIP_Bool, SCIP_Bool, SCIP_Bool, SCIP_Bool, SCIP_Bool, SCIP_Bool, SCIP_Bool, Ptr{SCIP_Bool}), sourcescip, targetscip, copyreaders, copypricers, copyconshdlrs, copyconflicthdlrs, copypresolvers, copyrelaxators, copyseparators, copypropagators, copyheuristics, copyeventhdlrs, copynodeselectors, copybranchrules, copydisplays, copydialogs, copynlpis, passmessagehdlr, valid)
SCIPgetVarCopy(sourcescip, targetscip, sourcevar, targetvar, varmap, consmap, globalVar, success) = @scip_ccall_check("SCIPgetVarCopy", (Ptr{SCIP}, Ptr{SCIP}, Ptr{SCIP_VAR}, Ptr{Ptr{SCIP_VAR}}, Ptr{SCIP_HASHMAP}, Ptr{SCIP_HASHMAP}, SCIP_Bool, Ptr{SCIP_Bool}), sourcescip, targetscip, sourcevar, targetvar, varmap, consmap, globalVar, success)
SCIPcopyVars(sourcescip, targetscip, varmap, consmap, globalVar) = @scip_ccall_check("SCIPcopyVars", (Ptr{SCIP}, Ptr{SCIP}, Ptr{SCIP_HASHMAP}, Ptr{SCIP_HASHMAP}, SCIP_Bool), sourcescip, targetscip, varmap, consmap, globalVar)
SCIPcopyOrigVars(sourcescip, targetscip, varmap, consmap) = @scip_ccall_check("SCIPcopyOrigVars", (Ptr{SCIP}, Ptr{SCIP}, Ptr{SCIP_HASHMAP}, Ptr{SCIP_HASHMAP}), sourcescip, targetscip, varmap, consmap)
SCIPcopyConss(sourcescip, targetscip, varmap, consmap, globalVar, enablepricing, valid) = @scip_ccall_check("SCIPcopyConss", (Ptr{SCIP}, Ptr{SCIP}, Ptr{SCIP_HASHMAP}, Ptr{SCIP_HASHMAP}, SCIP_Bool, SCIP_Bool, Ptr{SCIP_Bool}), sourcescip, targetscip, varmap, consmap, globalVar, enablepricing, valid)
SCIPcopyOrigConss(sourcescip, targetscip, varmap, consmap, enablepricing, valid) = @scip_ccall_check("SCIPcopyOrigConss", (Ptr{SCIP}, Ptr{SCIP}, Ptr{SCIP_HASHMAP}, Ptr{SCIP_HASHMAP}, SCIP_Bool, Ptr{SCIP_Bool}), sourcescip, targetscip, varmap, consmap, enablepricing, valid)
SCIPcopyParamSettings(sourcescip, targetscip) = @scip_ccall_check("SCIPcopyParamSettings", (Ptr{SCIP}, Ptr{SCIP}), sourcescip, targetscip)
SCIPchgBoolParam(scip, param, value) = @scip_ccall_check("SCIPchgBoolParam", (Ptr{SCIP}, Ptr{SCIP_PARAM}, SCIP_Bool), scip, param, value)
SCIPchgIntParam(scip, param, value) = @scip_ccall_check("SCIPchgIntParam", (Ptr{SCIP}, Ptr{SCIP_PARAM}, Int), scip, param, value)
SCIPchgLongintParam(scip, param, value) = @scip_ccall_check("SCIPchgLongintParam", (Ptr{SCIP}, Ptr{SCIP_PARAM}, Int64), scip, param, value)
SCIPchgRealParam(scip, param, value) = @scip_ccall_check("SCIPchgRealParam", (Ptr{SCIP}, Ptr{SCIP_PARAM}, SCIP_Real), scip, param, value)
SCIPresetParams(scip) = @scip_ccall_check("SCIPresetParams", (Ptr{SCIP},), scip)
SCIPsetEmphasis(scip, paramemphasis, quiet) = @scip_ccall_check("SCIPsetEmphasis", (Ptr{SCIP}, SCIP_PARAMEMPHASIS, SCIP_Bool), scip, paramemphasis, quiet)
SCIPsetSubscipsOff(scip, quiet) = @scip_ccall_check("SCIPsetSubscipsOff", (Ptr{SCIP}, SCIP_Bool), scip, quiet)
SCIPsetHeuristics(scip, paramsetting, quiet) = @scip_ccall_check("SCIPsetHeuristics", (Ptr{SCIP}, SCIP_PARAMSETTING, SCIP_Bool), scip, paramsetting, quiet)
SCIPsetPresolving(scip, paramsetting, quiet) = @scip_ccall_check("SCIPsetPresolving", (Ptr{SCIP}, SCIP_PARAMSETTING, SCIP_Bool), scip, paramsetting, quiet)
SCIPsetSeparating(scip, paramsetting, quiet) = @scip_ccall_check("SCIPsetSeparating", (Ptr{SCIP}, SCIP_PARAMSETTING, SCIP_Bool), scip, paramsetting, quiet)
SCIPsetPricerPriority(scip, pricer, priority) = @scip_ccall_check("SCIPsetPricerPriority", (Ptr{SCIP}, Ptr{SCIP_PRICER}, Int), scip, pricer, priority)
SCIPactivatePricer(scip, pricer) = @scip_ccall_check("SCIPactivatePricer", (Ptr{SCIP}, Ptr{SCIP_PRICER}), scip, pricer)
SCIPdeactivatePricer(scip, pricer) = @scip_ccall_check("SCIPdeactivatePricer", (Ptr{SCIP}, Ptr{SCIP_PRICER}), scip, pricer)
SCIPsetConflicthdlrPriority(scip, conflicthdlr, priority) = @scip_ccall_check("SCIPsetConflicthdlrPriority", (Ptr{SCIP}, Ptr{SCIP_CONFLICTHDLR}, Int), scip, conflicthdlr, priority)
SCIPsetPresolPriority(scip, presol, priority) = @scip_ccall_check("SCIPsetPresolPriority", (Ptr{SCIP}, Ptr{SCIP_PRESOL}, Int), scip, presol, priority)
SCIPsetRelaxPriority(scip, relax, priority) = @scip_ccall_check("SCIPsetRelaxPriority", (Ptr{SCIP}, Ptr{SCIP_RELAX}, Int), scip, relax, priority)
SCIPsetSepaPriority(scip, sepa, priority) = @scip_ccall_check("SCIPsetSepaPriority", (Ptr{SCIP}, Ptr{SCIP_SEPA}, Int), scip, sepa, priority)
SCIPsetPropPriority(scip, prop, priority) = @scip_ccall_check("SCIPsetPropPriority", (Ptr{SCIP}, Ptr{SCIP_PROP}, Int), scip, prop, priority)
SCIPsetPropPresolPriority(scip, prop, presolpriority) = @scip_ccall_check("SCIPsetPropPresolPriority", (Ptr{SCIP}, Ptr{SCIP_PROP}, Int), scip, prop, presolpriority)
SCIPsetHeurPriority(scip, heur, priority) = @scip_ccall_check("SCIPsetHeurPriority", (Ptr{SCIP}, Ptr{SCIP_HEUR}, Int), scip, heur, priority)
SCIPsetNodeselStdPriority(scip, nodesel, priority) = @scip_ccall_check("SCIPsetNodeselStdPriority", (Ptr{SCIP}, Ptr{SCIP_NODESEL}, Int), scip, nodesel, priority)
SCIPsetNodeselMemsavePriority(scip, nodesel, priority) = @scip_ccall_check("SCIPsetNodeselMemsavePriority", (Ptr{SCIP}, Ptr{SCIP_NODESEL}, Int), scip, nodesel, priority)
SCIPsetBranchrulePriority(scip, branchrule, priority) = @scip_ccall_check("SCIPsetBranchrulePriority", (Ptr{SCIP}, Ptr{SCIP_BRANCHRULE}, Int), scip, branchrule, priority)
SCIPsetBranchruleMaxdepth(scip, branchrule, maxdepth) = @scip_ccall_check("SCIPsetBranchruleMaxdepth", (Ptr{SCIP}, Ptr{SCIP_BRANCHRULE}, Int), scip, branchrule, maxdepth)
SCIPsetBranchruleMaxbounddist(scip, branchrule, maxbounddist) = @scip_ccall_check("SCIPsetBranchruleMaxbounddist", (Ptr{SCIP}, Ptr{SCIP_BRANCHRULE}, SCIP_Real), scip, branchrule, maxbounddist)
SCIPautoselectDisps(scip) = @scip_ccall_check("SCIPautoselectDisps", (Ptr{SCIP},), scip)
SCIPincludeNlpi(scip, nlpi) = @scip_ccall_check("SCIPincludeNlpi", (Ptr{SCIP}, Ptr{SCIP_NLPI}), scip, nlpi)
SCIPsetNlpiPriority(scip, nlpi, priority) = @scip_ccall_check("SCIPsetNlpiPriority", (Ptr{SCIP}, Ptr{SCIP_NLPI}, Int), scip, nlpi, priority)
SCIPcaptureDialog(scip, dialog) = @scip_ccall_check("SCIPcaptureDialog", (Ptr{SCIP}, Ptr{SCIP_DIALOG}), scip, dialog)
SCIPreleaseDialog(scip, dialog) = @scip_ccall_check("SCIPreleaseDialog", (Ptr{SCIP}, Ptr{Ptr{SCIP_DIALOG}}), scip, dialog)
SCIPsetRootDialog(scip, dialog) = @scip_ccall_check("SCIPsetRootDialog", (Ptr{SCIP}, Ptr{SCIP_DIALOG}), scip, dialog)
SCIPaddDialogEntry(scip, dialog, subdialog) = @scip_ccall_check("SCIPaddDialogEntry", (Ptr{SCIP}, Ptr{SCIP_DIALOG}, Ptr{SCIP_DIALOG}), scip, dialog, subdialog)
SCIPstartInteraction(scip) = @scip_ccall_check("SCIPstartInteraction", (Ptr{SCIP},), scip)
SCIPfreeProb(scip) = @scip_ccall_check("SCIPfreeProb", (Ptr{SCIP},), scip)
SCIPpermuteProb(scip, randseed, permuteconss, permutebinvars, permuteintvars, permuteimplvars, permutecontvars) = @scip_ccall_check("SCIPpermuteProb", (Ptr{SCIP}, Uint, SCIP_Bool, SCIP_Bool, SCIP_Bool, SCIP_Bool, SCIP_Bool), scip, randseed, permuteconss, permutebinvars, permuteintvars, permuteimplvars, permutecontvars)
SCIPsetProbData(scip, probdata) = @scip_ccall_check("SCIPsetProbData", (Ptr{SCIP}, Ptr{SCIP_PROBDATA}), scip, probdata)
SCIPsetObjsense(scip, objsense) = @scip_ccall_check("SCIPsetObjsense", (Ptr{SCIP}, SCIP_OBJSENSE), scip, objsense)
SCIPaddObjoffset(scip, addval) = @scip_ccall_check("SCIPaddObjoffset", (Ptr{SCIP}, SCIP_Real), scip, addval)
SCIPaddOrigObjoffset(scip, addval) = @scip_ccall_check("SCIPaddOrigObjoffset", (Ptr{SCIP}, SCIP_Real), scip, addval)
SCIPsetObjlimit(scip, objlimit) = @scip_ccall_check("SCIPsetObjlimit", (Ptr{SCIP}, SCIP_Real), scip, objlimit)
SCIPsetObjIntegral(scip) = @scip_ccall_check("SCIPsetObjIntegral", (Ptr{SCIP},), scip)
SCIPaddVar(scip, var) = @scip_ccall_check("SCIPaddVar", (Ptr{SCIP}, Ptr{SCIP_VAR}), scip, var)
SCIPaddPricedVar(scip, var, score) = @scip_ccall_check("SCIPaddPricedVar", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), scip, var, score)
SCIPdelVar(scip, var, deleted) = @scip_ccall_check("SCIPdelVar", (Ptr{SCIP}, Ptr{SCIP_VAR}, Ptr{SCIP_Bool}), scip, var, deleted)
SCIPaddCons(scip, cons) = @scip_ccall_check("SCIPaddCons", (Ptr{SCIP}, Ptr{SCIP_CONS}), scip, cons)
SCIPdelCons(scip, cons) = @scip_ccall_check("SCIPdelCons", (Ptr{SCIP}, Ptr{SCIP_CONS}), scip, cons)
SCIPaddConsNode(scip, node, cons, validnode) = @scip_ccall_check("SCIPaddConsNode", (Ptr{SCIP}, Ptr{SCIP_NODE}, Ptr{SCIP_CONS}, Ptr{SCIP_NODE}), scip, node, cons, validnode)
SCIPaddConsLocal(scip, cons, validnode) = @scip_ccall_check("SCIPaddConsLocal", (Ptr{SCIP}, Ptr{SCIP_CONS}, Ptr{SCIP_NODE}), scip, cons, validnode)
SCIPdelConsNode(scip, node, cons) = @scip_ccall_check("SCIPdelConsNode", (Ptr{SCIP}, Ptr{SCIP_NODE}, Ptr{SCIP_CONS}), scip, node, cons)
SCIPdelConsLocal(scip, cons) = @scip_ccall_check("SCIPdelConsLocal", (Ptr{SCIP}, Ptr{SCIP_CONS}), scip, cons)
SCIPupdateLocalDualbound(scip, newbound) = @scip_ccall_check("SCIPupdateLocalDualbound", (Ptr{SCIP}, SCIP_Real), scip, newbound)
SCIPupdateLocalLowerbound(scip, newbound) = @scip_ccall_check("SCIPupdateLocalLowerbound", (Ptr{SCIP}, SCIP_Real), scip, newbound)
SCIPupdateNodeDualbound(scip, node, newbound) = @scip_ccall_check("SCIPupdateNodeDualbound", (Ptr{SCIP}, Ptr{SCIP_NODE}, SCIP_Real), scip, node, newbound)
SCIPupdateNodeLowerbound(scip, node, newbound) = @scip_ccall_check("SCIPupdateNodeLowerbound", (Ptr{SCIP}, Ptr{SCIP_NODE}, SCIP_Real), scip, node, newbound)
SCIPchgChildPrio(scip, child, priority) = @scip_ccall_check("SCIPchgChildPrio", (Ptr{SCIP}, Ptr{SCIP_NODE}, SCIP_Real), scip, child, priority)
SCIPtransformProb(scip) = @scip_ccall_check("SCIPtransformProb", (Ptr{SCIP},), scip)
SCIPpresolve(scip) = @scip_ccall_check("SCIPpresolve", (Ptr{SCIP},), scip)
SCIPsolve(scip) = @scip_ccall_check("SCIPsolve", (Ptr{SCIP},), scip)
SCIPfreeSolve(scip, restart) = @scip_ccall_check("SCIPfreeSolve", (Ptr{SCIP}, SCIP_Bool), scip, restart)
SCIPfreeTransform(scip) = @scip_ccall_check("SCIPfreeTransform", (Ptr{SCIP},), scip)
SCIPinterruptSolve(scip) = @scip_ccall_check("SCIPinterruptSolve", (Ptr{SCIP},), scip)
SCIPrestartSolve(scip) = @scip_ccall_check("SCIPrestartSolve", (Ptr{SCIP},), scip)
SCIPcaptureVar(scip, var) = @scip_ccall_check("SCIPcaptureVar", (Ptr{SCIP}, Ptr{SCIP_VAR}), scip, var)
SCIPreleaseVar(scip, var) = @scip_ccall_check("SCIPreleaseVar", (Ptr{SCIP}, Ptr{Ptr{SCIP_VAR}}), scip, var)
SCIPtransformVar(scip, var, transvar) = @scip_ccall_check("SCIPtransformVar", (Ptr{SCIP}, Ptr{SCIP_VAR}, Ptr{Ptr{SCIP_VAR}}), scip, var, transvar)
SCIPtransformVars(scip, nvars, vars, transvars) = @scip_ccall_check("SCIPtransformVars", (Ptr{SCIP}, Int, Ptr{Ptr{SCIP_VAR}}, Ptr{Ptr{SCIP_VAR}}), scip, nvars, vars, transvars)
SCIPgetTransformedVar(scip, var, transvar) = @scip_ccall_check("SCIPgetTransformedVar", (Ptr{SCIP}, Ptr{SCIP_VAR}, Ptr{Ptr{SCIP_VAR}}), scip, var, transvar)
SCIPgetTransformedVars(scip, nvars, vars, transvars) = @scip_ccall_check("SCIPgetTransformedVars", (Ptr{SCIP}, Int, Ptr{Ptr{SCIP_VAR}}, Ptr{Ptr{SCIP_VAR}}), scip, nvars, vars, transvars)
SCIPgetNegatedVar(scip, var, negvar) = @scip_ccall_check("SCIPgetNegatedVar", (Ptr{SCIP}, Ptr{SCIP_VAR}, Ptr{Ptr{SCIP_VAR}}), scip, var, negvar)
SCIPgetNegatedVars(scip, nvars, vars, negvars) = @scip_ccall_check("SCIPgetNegatedVars", (Ptr{SCIP}, Int, Ptr{Ptr{SCIP_VAR}}, Ptr{Ptr{SCIP_VAR}}), scip, nvars, vars, negvars)
SCIPgetBinvarRepresentative(scip, var, repvar, negated) = @scip_ccall_check("SCIPgetBinvarRepresentative", (Ptr{SCIP}, Ptr{SCIP_VAR}, Ptr{Ptr{SCIP_VAR}}, Ptr{SCIP_Bool}), scip, var, repvar, negated)
SCIPgetBinvarRepresentatives(scip, nvars, vars, repvars, negated) = @scip_ccall_check("SCIPgetBinvarRepresentatives", (Ptr{SCIP}, Int, Ptr{Ptr{SCIP_VAR}}, Ptr{Ptr{SCIP_VAR}}, Ptr{SCIP_Bool}), scip, nvars, vars, repvars, negated)
SCIPflattenVarAggregationGraph(scip, var) = @scip_ccall_check("SCIPflattenVarAggregationGraph", (Ptr{SCIP}, Ptr{SCIP_VAR}), scip, var)
SCIPgetProbvarSum(scip, var, scalar, constant) = @scip_ccall_check("SCIPgetProbvarSum", (Ptr{SCIP}, Ptr{Ptr{SCIP_VAR}}, Ptr{SCIP_Real}, Ptr{SCIP_Real}), scip, var, scalar, constant)
SCIPgetVarSols(scip, nvars, vars, vals) = @scip_ccall_check("SCIPgetVarSols", (Ptr{SCIP}, Int, Ptr{Ptr{SCIP_VAR}}, Ptr{SCIP_Real}), scip, nvars, vars, vals)
SCIPclearRelaxSolVals(scip) = @scip_ccall_check("SCIPclearRelaxSolVals", (Ptr{SCIP},), scip)
SCIPsetRelaxSolVal(scip, var, val) = @scip_ccall_check("SCIPsetRelaxSolVal", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), scip, var, val)
SCIPsetRelaxSolVals(scip, nvars, vars, vals) = @scip_ccall_check("SCIPsetRelaxSolVals", (Ptr{SCIP}, Int, Ptr{Ptr{SCIP_VAR}}, Ptr{SCIP_Real}), scip, nvars, vars, vals)
SCIPsetRelaxSolValsSol(scip, sol) = @scip_ccall_check("SCIPsetRelaxSolValsSol", (Ptr{SCIP}, Ptr{SCIP_SOL}), scip, sol)
SCIPmarkRelaxSolValid(scip) = @scip_ccall_check("SCIPmarkRelaxSolValid", (Ptr{SCIP},), scip)
SCIPmarkRelaxSolInvalid(scip) = @scip_ccall_check("SCIPmarkRelaxSolInvalid", (Ptr{SCIP},), scip)
SCIPstartStrongbranch(scip, enablepropagation) = @scip_ccall_check("SCIPstartStrongbranch", (Ptr{SCIP}, SCIP_Bool), scip, enablepropagation)
SCIPendStrongbranch(scip) = @scip_ccall_check("SCIPendStrongbranch", (Ptr{SCIP},), scip)
SCIPgetVarStrongbranchFrac(scip, var, itlim, down, up, downvalid, upvalid, downinf, upinf, downconflict, upconflict, lperror) = @scip_ccall_check("SCIPgetVarStrongbranchFrac", (Ptr{SCIP}, Ptr{SCIP_VAR}, Int, Ptr{SCIP_Real}, Ptr{SCIP_Real}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}), scip, var, itlim, down, up, downvalid, upvalid, downinf, upinf, downconflict, upconflict, lperror)
SCIPgetVarStrongbranchWithPropagation(scip, var, solval, lpobjval, itlim, maxproprounds, down, up, downvalid, upvalid, downinf, upinf, downconflict, upconflict, lperror, newlbs, newubs) = @scip_ccall_check("SCIPgetVarStrongbranchWithPropagation", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real, SCIP_Real, Int, Int, Ptr{SCIP_Real}, Ptr{SCIP_Real}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}, Ptr{SCIP_Real}, Ptr{SCIP_Real}), scip, var, solval, lpobjval, itlim, maxproprounds, down, up, downvalid, upvalid, downinf, upinf, downconflict, upconflict, lperror, newlbs, newubs)
SCIPgetVarStrongbranchInt(scip, var, itlim, down, up, downvalid, upvalid, downinf, upinf, downconflict, upconflict, lperror) = @scip_ccall_check("SCIPgetVarStrongbranchInt", (Ptr{SCIP}, Ptr{SCIP_VAR}, Int, Ptr{SCIP_Real}, Ptr{SCIP_Real}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}), scip, var, itlim, down, up, downvalid, upvalid, downinf, upinf, downconflict, upconflict, lperror)
SCIPgetVarsStrongbranchesFrac(scip, vars, nvars, itlim, down, up, downvalid, upvalid, downinf, upinf, downconflict, upconflict, lperror) = @scip_ccall_check("SCIPgetVarsStrongbranchesFrac", (Ptr{SCIP}, Ptr{Ptr{SCIP_VAR}}, Int, Int, Ptr{SCIP_Real}, Ptr{SCIP_Real}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}), scip, vars, nvars, itlim, down, up, downvalid, upvalid, downinf, upinf, downconflict, upconflict, lperror)
SCIPgetVarsStrongbranchesInt(scip, vars, nvars, itlim, down, up, downvalid, upvalid, downinf, upinf, downconflict, upconflict, lperror) = @scip_ccall_check("SCIPgetVarsStrongbranchesInt", (Ptr{SCIP}, Ptr{Ptr{SCIP_VAR}}, Int, Int, Ptr{SCIP_Real}, Ptr{SCIP_Real}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}), scip, vars, nvars, itlim, down, up, downvalid, upvalid, downinf, upinf, downconflict, upconflict, lperror)
SCIPgetVarStrongbranchLast(scip, var, down, up, downvalid, upvalid, solval, lpobjval) = @scip_ccall_check("SCIPgetVarStrongbranchLast", (Ptr{SCIP}, Ptr{SCIP_VAR}, Ptr{SCIP_Real}, Ptr{SCIP_Real}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}, Ptr{SCIP_Real}, Ptr{SCIP_Real}), scip, var, down, up, downvalid, upvalid, solval, lpobjval)
SCIPaddVarLocks(scip, var, nlocksdown, nlocksup) = @scip_ccall_check("SCIPaddVarLocks", (Ptr{SCIP}, Ptr{SCIP_VAR}, Int, Int), scip, var, nlocksdown, nlocksup)
SCIPlockVarCons(scip, var, cons, lockdown, lockup) = @scip_ccall_check("SCIPlockVarCons", (Ptr{SCIP}, Ptr{SCIP_VAR}, Ptr{SCIP_CONS}, SCIP_Bool, SCIP_Bool), scip, var, cons, lockdown, lockup)
SCIPunlockVarCons(scip, var, cons, lockdown, lockup) = @scip_ccall_check("SCIPunlockVarCons", (Ptr{SCIP}, Ptr{SCIP_VAR}, Ptr{SCIP_CONS}, SCIP_Bool, SCIP_Bool), scip, var, cons, lockdown, lockup)
SCIPchgVarObj(scip, var, newobj) = @scip_ccall_check("SCIPchgVarObj", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), scip, var, newobj)
SCIPaddVarObj(scip, var, addobj) = @scip_ccall_check("SCIPaddVarObj", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), scip, var, addobj)
SCIPchgVarLb(scip, var, newbound) = @scip_ccall_check("SCIPchgVarLb", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), scip, var, newbound)
SCIPchgVarUb(scip, var, newbound) = @scip_ccall_check("SCIPchgVarUb", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), scip, var, newbound)
SCIPchgVarLbNode(scip, node, var, newbound) = @scip_ccall_check("SCIPchgVarLbNode", (Ptr{SCIP}, Ptr{SCIP_NODE}, Ptr{SCIP_VAR}, SCIP_Real), scip, node, var, newbound)
SCIPchgVarUbNode(scip, node, var, newbound) = @scip_ccall_check("SCIPchgVarUbNode", (Ptr{SCIP}, Ptr{SCIP_NODE}, Ptr{SCIP_VAR}, SCIP_Real), scip, node, var, newbound)
SCIPchgVarLbGlobal(scip, var, newbound) = @scip_ccall_check("SCIPchgVarLbGlobal", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), scip, var, newbound)
SCIPchgVarUbGlobal(scip, var, newbound) = @scip_ccall_check("SCIPchgVarUbGlobal", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), scip, var, newbound)
SCIPchgVarLbLazy(scip, var, lazylb) = @scip_ccall_check("SCIPchgVarLbLazy", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), scip, var, lazylb)
SCIPchgVarUbLazy(scip, var, lazyub) = @scip_ccall_check("SCIPchgVarUbLazy", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), scip, var, lazyub)
SCIPtightenVarLb(scip, var, newbound, force, infeasible, tightened) = @scip_ccall_check("SCIPtightenVarLb", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real, SCIP_Bool, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}), scip, var, newbound, force, infeasible, tightened)
SCIPtightenVarUb(scip, var, newbound, force, infeasible, tightened) = @scip_ccall_check("SCIPtightenVarUb", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real, SCIP_Bool, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}), scip, var, newbound, force, infeasible, tightened)
SCIPinferVarLbCons(scip, var, newbound, infercons, inferinfo, force, infeasible, tightened) = @scip_ccall_check("SCIPinferVarLbCons", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real, Ptr{SCIP_CONS}, Int, SCIP_Bool, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}), scip, var, newbound, infercons, inferinfo, force, infeasible, tightened)
SCIPinferVarUbCons(scip, var, newbound, infercons, inferinfo, force, infeasible, tightened) = @scip_ccall_check("SCIPinferVarUbCons", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real, Ptr{SCIP_CONS}, Int, SCIP_Bool, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}), scip, var, newbound, infercons, inferinfo, force, infeasible, tightened)
SCIPinferBinvarCons(scip, var, fixedval, infercons, inferinfo, infeasible, tightened) = @scip_ccall_check("SCIPinferBinvarCons", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Bool, Ptr{SCIP_CONS}, Int, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}), scip, var, fixedval, infercons, inferinfo, infeasible, tightened)
SCIPinferVarLbProp(scip, var, newbound, inferprop, inferinfo, force, infeasible, tightened) = @scip_ccall_check("SCIPinferVarLbProp", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real, Ptr{SCIP_PROP}, Int, SCIP_Bool, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}), scip, var, newbound, inferprop, inferinfo, force, infeasible, tightened)
SCIPinferVarUbProp(scip, var, newbound, inferprop, inferinfo, force, infeasible, tightened) = @scip_ccall_check("SCIPinferVarUbProp", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real, Ptr{SCIP_PROP}, Int, SCIP_Bool, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}), scip, var, newbound, inferprop, inferinfo, force, infeasible, tightened)
SCIPinferBinvarProp(scip, var, fixedval, inferprop, inferinfo, infeasible, tightened) = @scip_ccall_check("SCIPinferBinvarProp", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Bool, Ptr{SCIP_PROP}, Int, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}), scip, var, fixedval, inferprop, inferinfo, infeasible, tightened)
SCIPtightenVarLbGlobal(scip, var, newbound, force, infeasible, tightened) = @scip_ccall_check("SCIPtightenVarLbGlobal", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real, SCIP_Bool, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}), scip, var, newbound, force, infeasible, tightened)
SCIPtightenVarUbGlobal(scip, var, newbound, force, infeasible, tightened) = @scip_ccall_check("SCIPtightenVarUbGlobal", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real, SCIP_Bool, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}), scip, var, newbound, force, infeasible, tightened)
SCIPchgVarBranchFactor(scip, var, branchfactor) = @scip_ccall_check("SCIPchgVarBranchFactor", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), scip, var, branchfactor)
SCIPscaleVarBranchFactor(scip, var, scale) = @scip_ccall_check("SCIPscaleVarBranchFactor", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), scip, var, scale)
SCIPaddVarBranchFactor(scip, var, addfactor) = @scip_ccall_check("SCIPaddVarBranchFactor", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), scip, var, addfactor)
SCIPchgVarBranchPriority(scip, var, branchpriority) = @scip_ccall_check("SCIPchgVarBranchPriority", (Ptr{SCIP}, Ptr{SCIP_VAR}, Int), scip, var, branchpriority)
SCIPupdateVarBranchPriority(scip, var, branchpriority) = @scip_ccall_check("SCIPupdateVarBranchPriority", (Ptr{SCIP}, Ptr{SCIP_VAR}, Int), scip, var, branchpriority)
SCIPaddVarBranchPriority(scip, var, addpriority) = @scip_ccall_check("SCIPaddVarBranchPriority", (Ptr{SCIP}, Ptr{SCIP_VAR}, Int), scip, var, addpriority)
SCIPchgVarBranchDirection(scip, var, branchdirection) = @scip_ccall_check("SCIPchgVarBranchDirection", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_BRANCHDIR), scip, var, branchdirection)
SCIPchgVarType(scip, var, vartype, infeasible) = @scip_ccall_check("SCIPchgVarType", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_VARTYPE, Ptr{SCIP_Bool}), scip, var, vartype, infeasible)
SCIPfixVar(scip, var, fixedval, infeasible, fixed) = @scip_ccall_check("SCIPfixVar", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}), scip, var, fixedval, infeasible, fixed)
SCIPaggregateVars(scip, varx, vary, scalarx, scalary, rhs, infeasible, redundant, aggregated) = @scip_ccall_check("SCIPaggregateVars", (Ptr{SCIP}, Ptr{SCIP_VAR}, Ptr{SCIP_VAR}, SCIP_Real, SCIP_Real, SCIP_Real, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}), scip, varx, vary, scalarx, scalary, rhs, infeasible, redundant, aggregated)
SCIPmultiaggregateVar(scip, var, naggvars, aggvars, scalars, constant, infeasible, aggregated) = @scip_ccall_check("SCIPmultiaggregateVar", (Ptr{SCIP}, Ptr{SCIP_VAR}, Int, Ptr{Ptr{SCIP_VAR}}, Ptr{SCIP_Real}, SCIP_Real, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}), scip, var, naggvars, aggvars, scalars, constant, infeasible, aggregated)
SCIPmarkDoNotMultaggrVar(scip, var) = @scip_ccall_check("SCIPmarkDoNotMultaggrVar", (Ptr{SCIP}, Ptr{SCIP_VAR}), scip, var)
SCIPupdateVarPseudocost(scip, var, solvaldelta, objdelta, weight) = @scip_ccall_check("SCIPupdateVarPseudocost", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real, SCIP_Real, SCIP_Real), scip, var, solvaldelta, objdelta, weight)
SCIPinitVarBranchStats(scip, var, downpscost, uppscost, downvsids, upvsids, downconflen, upconflen, downinfer, upinfer, downcutoff, upcutoff) = @scip_ccall_check("SCIPinitVarBranchStats", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real, SCIP_Real, SCIP_Real, SCIP_Real, SCIP_Real, SCIP_Real, SCIP_Real, SCIP_Real, SCIP_Real, SCIP_Real), scip, var, downpscost, uppscost, downvsids, upvsids, downconflen, upconflen, downinfer, upinfer, downcutoff, upcutoff)
SCIPinitConflictAnalysis(scip) = @scip_ccall_check("SCIPinitConflictAnalysis", (Ptr{SCIP},), scip)
SCIPaddConflictLb(scip, var, bdchgidx) = @scip_ccall_check("SCIPaddConflictLb", (Ptr{SCIP}, Ptr{SCIP_VAR}, Ptr{SCIP_BDCHGIDX}), scip, var, bdchgidx)
SCIPaddConflictRelaxedLb(scip, var, bdchgidx, relaxedlb) = @scip_ccall_check("SCIPaddConflictRelaxedLb", (Ptr{SCIP}, Ptr{SCIP_VAR}, Ptr{SCIP_BDCHGIDX}, SCIP_Real), scip, var, bdchgidx, relaxedlb)
SCIPaddConflictUb(scip, var, bdchgidx) = @scip_ccall_check("SCIPaddConflictUb", (Ptr{SCIP}, Ptr{SCIP_VAR}, Ptr{SCIP_BDCHGIDX}), scip, var, bdchgidx)
SCIPaddConflictRelaxedUb(scip, var, bdchgidx, relaxedub) = @scip_ccall_check("SCIPaddConflictRelaxedUb", (Ptr{SCIP}, Ptr{SCIP_VAR}, Ptr{SCIP_BDCHGIDX}, SCIP_Real), scip, var, bdchgidx, relaxedub)
SCIPaddConflictBd(scip, var, boundtype, bdchgidx) = @scip_ccall_check("SCIPaddConflictBd", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_BOUNDTYPE, Ptr{SCIP_BDCHGIDX}), scip, var, boundtype, bdchgidx)
SCIPaddConflictRelaxedBd(scip, var, boundtype, bdchgidx, relaxedbd) = @scip_ccall_check("SCIPaddConflictRelaxedBd", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_BOUNDTYPE, Ptr{SCIP_BDCHGIDX}, SCIP_Real), scip, var, boundtype, bdchgidx, relaxedbd)
SCIPaddConflictBinvar(scip, var) = @scip_ccall_check("SCIPaddConflictBinvar", (Ptr{SCIP}, Ptr{SCIP_VAR}), scip, var)
SCIPisConflictVarUsed(scip, var, boundtype, bdchgidx, used) = @scip_ccall_check("SCIPisConflictVarUsed", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_BOUNDTYPE, Ptr{SCIP_BDCHGIDX}, Ptr{SCIP_Bool}), scip, var, boundtype, bdchgidx, used)
SCIPanalyzeConflict(scip, validdepth, success) = @scip_ccall_check("SCIPanalyzeConflict", (Ptr{SCIP}, Int, Ptr{SCIP_Bool}), scip, validdepth, success)
SCIPanalyzeConflictCons(scip, cons, success) = @scip_ccall_check("SCIPanalyzeConflictCons", (Ptr{SCIP}, Ptr{SCIP_CONS}, Ptr{SCIP_Bool}), scip, cons, success)
SCIPcaptureCons(scip, cons) = @scip_ccall_check("SCIPcaptureCons", (Ptr{SCIP}, Ptr{SCIP_CONS}), scip, cons)
SCIPreleaseCons(scip, cons) = @scip_ccall_check("SCIPreleaseCons", (Ptr{SCIP}, Ptr{Ptr{SCIP_CONS}}), scip, cons)
SCIPsetConsInitial(scip, cons, initial) = @scip_ccall_check("SCIPsetConsInitial", (Ptr{SCIP}, Ptr{SCIP_CONS}, SCIP_Bool), scip, cons, initial)
SCIPsetConsSeparated(scip, cons, separate) = @scip_ccall_check("SCIPsetConsSeparated", (Ptr{SCIP}, Ptr{SCIP_CONS}, SCIP_Bool), scip, cons, separate)
SCIPsetConsEnforced(scip, cons, enforce) = @scip_ccall_check("SCIPsetConsEnforced", (Ptr{SCIP}, Ptr{SCIP_CONS}, SCIP_Bool), scip, cons, enforce)
SCIPsetConsChecked(scip, cons, check) = @scip_ccall_check("SCIPsetConsChecked", (Ptr{SCIP}, Ptr{SCIP_CONS}, SCIP_Bool), scip, cons, check)
SCIPsetConsPropagated(scip, cons, propagate) = @scip_ccall_check("SCIPsetConsPropagated", (Ptr{SCIP}, Ptr{SCIP_CONS}, SCIP_Bool), scip, cons, propagate)
SCIPsetConsLocal(scip, cons, localVar) = @scip_ccall_check("SCIPsetConsLocal", (Ptr{SCIP}, Ptr{SCIP_CONS}, SCIP_Bool), scip, cons, localVar)
SCIPsetConsModifiable(scip, cons, modifiable) = @scip_ccall_check("SCIPsetConsModifiable", (Ptr{SCIP}, Ptr{SCIP_CONS}, SCIP_Bool), scip, cons, modifiable)
SCIPsetConsDynamic(scip, cons, dynamic) = @scip_ccall_check("SCIPsetConsDynamic", (Ptr{SCIP}, Ptr{SCIP_CONS}, SCIP_Bool), scip, cons, dynamic)
SCIPsetConsRemovable(scip, cons, removable) = @scip_ccall_check("SCIPsetConsRemovable", (Ptr{SCIP}, Ptr{SCIP_CONS}, SCIP_Bool), scip, cons, removable)
SCIPsetConsStickingAtNode(scip, cons, stickingatnode) = @scip_ccall_check("SCIPsetConsStickingAtNode", (Ptr{SCIP}, Ptr{SCIP_CONS}, SCIP_Bool), scip, cons, stickingatnode)
SCIPupdateConsFlags(scip, cons0, cons1) = @scip_ccall_check("SCIPupdateConsFlags", (Ptr{SCIP}, Ptr{SCIP_CONS}, Ptr{SCIP_CONS}), scip, cons0, cons1)
SCIPtransformCons(scip, cons, transcons) = @scip_ccall_check("SCIPtransformCons", (Ptr{SCIP}, Ptr{SCIP_CONS}, Ptr{Ptr{SCIP_CONS}}), scip, cons, transcons)
SCIPtransformConss(scip, nconss, conss, transconss) = @scip_ccall_check("SCIPtransformConss", (Ptr{SCIP}, Int, Ptr{Ptr{SCIP_CONS}}, Ptr{Ptr{SCIP_CONS}}), scip, nconss, conss, transconss)
SCIPgetTransformedCons(scip, cons, transcons) = @scip_ccall_check("SCIPgetTransformedCons", (Ptr{SCIP}, Ptr{SCIP_CONS}, Ptr{Ptr{SCIP_CONS}}), scip, cons, transcons)
SCIPgetTransformedConss(scip, nconss, conss, transconss) = @scip_ccall_check("SCIPgetTransformedConss", (Ptr{SCIP}, Int, Ptr{Ptr{SCIP_CONS}}, Ptr{Ptr{SCIP_CONS}}), scip, nconss, conss, transconss)
SCIPaddConsAge(scip, cons, deltaage) = @scip_ccall_check("SCIPaddConsAge", (Ptr{SCIP}, Ptr{SCIP_CONS}, SCIP_Real), scip, cons, deltaage)
SCIPincConsAge(scip, cons) = @scip_ccall_check("SCIPincConsAge", (Ptr{SCIP}, Ptr{SCIP_CONS}), scip, cons)
SCIPresetConsAge(scip, cons) = @scip_ccall_check("SCIPresetConsAge", (Ptr{SCIP}, Ptr{SCIP_CONS}), scip, cons)
SCIPenableCons(scip, cons) = @scip_ccall_check("SCIPenableCons", (Ptr{SCIP}, Ptr{SCIP_CONS}), scip, cons)
SCIPdisableCons(scip, cons) = @scip_ccall_check("SCIPdisableCons", (Ptr{SCIP}, Ptr{SCIP_CONS}), scip, cons)
SCIPenableConsSeparation(scip, cons) = @scip_ccall_check("SCIPenableConsSeparation", (Ptr{SCIP}, Ptr{SCIP_CONS}), scip, cons)
SCIPdisableConsSeparation(scip, cons) = @scip_ccall_check("SCIPdisableConsSeparation", (Ptr{SCIP}, Ptr{SCIP_CONS}), scip, cons)
SCIPenableConsPropagation(scip, cons) = @scip_ccall_check("SCIPenableConsPropagation", (Ptr{SCIP}, Ptr{SCIP_CONS}), scip, cons)
SCIPdisableConsPropagation(scip, cons) = @scip_ccall_check("SCIPdisableConsPropagation", (Ptr{SCIP}, Ptr{SCIP_CONS}), scip, cons)
SCIPmarkConsPropagate(scip, cons) = @scip_ccall_check("SCIPmarkConsPropagate", (Ptr{SCIP}, Ptr{SCIP_CONS}), scip, cons)
SCIPunmarkConsPropagate(scip, cons) = @scip_ccall_check("SCIPunmarkConsPropagate", (Ptr{SCIP}, Ptr{SCIP_CONS}), scip, cons)
SCIPaddConsLocks(scip, cons, nlockspos, nlocksneg) = @scip_ccall_check("SCIPaddConsLocks", (Ptr{SCIP}, Ptr{SCIP_CONS}, Int, Int), scip, cons, nlockspos, nlocksneg)
SCIPcheckCons(scip, cons, sol, checkintegrality, checklprows, printreason, result) = @scip_ccall_check("SCIPcheckCons", (Ptr{SCIP}, Ptr{SCIP_CONS}, Ptr{SCIP_SOL}, SCIP_Bool, SCIP_Bool, SCIP_Bool, Ptr{SCIP_RESULT}), scip, cons, sol, checkintegrality, checklprows, printreason, result)
SCIPenfopsCons(scip, cons, solinfeasible, objinfeasible, result) = @scip_ccall_check("SCIPenfopsCons", (Ptr{SCIP}, Ptr{SCIP_CONS}, SCIP_Bool, SCIP_Bool, Ptr{SCIP_RESULT}), scip, cons, solinfeasible, objinfeasible, result)
SCIPenfolpCons(scip, cons, solinfeasible, result) = @scip_ccall_check("SCIPenfolpCons", (Ptr{SCIP}, Ptr{SCIP_CONS}, SCIP_Bool, Ptr{SCIP_RESULT}), scip, cons, solinfeasible, result)
SCIPinitlpCons(scip, cons) = @scip_ccall_check("SCIPinitlpCons", (Ptr{SCIP}, Ptr{SCIP_CONS}), scip, cons)
SCIPsepalpCons(scip, cons, result) = @scip_ccall_check("SCIPsepalpCons", (Ptr{SCIP}, Ptr{SCIP_CONS}, Ptr{SCIP_RESULT}), scip, cons, result)
SCIPsepasolCons(scip, cons, sol, result) = @scip_ccall_check("SCIPsepasolCons", (Ptr{SCIP}, Ptr{SCIP_CONS}, Ptr{SCIP_SOL}, Ptr{SCIP_RESULT}), scip, cons, sol, result)
SCIPpropCons(scip, cons, proptiming, result) = @scip_ccall_check("SCIPpropCons", (Ptr{SCIP}, Ptr{SCIP_CONS}, SCIP_PROPTIMING, Ptr{SCIP_RESULT}), scip, cons, proptiming, result)
SCIPrespropCons(scip, cons, infervar, inferinfo, boundtype, bdchgidx, relaxedbd, result) = @scip_ccall_check("SCIPrespropCons", (Ptr{SCIP}, Ptr{SCIP_CONS}, Ptr{SCIP_VAR}, Int, SCIP_BOUNDTYPE, Ptr{SCIP_BDCHGIDX}, SCIP_Real, Ptr{SCIP_RESULT}), scip, cons, infervar, inferinfo, boundtype, bdchgidx, relaxedbd, result)
SCIPactiveCons(scip, cons) = @scip_ccall_check("SCIPactiveCons", (Ptr{SCIP}, Ptr{SCIP_CONS}), scip, cons)
SCIPdeactiveCons(scip, cons) = @scip_ccall_check("SCIPdeactiveCons", (Ptr{SCIP}, Ptr{SCIP_CONS}), scip, cons)
SCIPgetConsVars(scip, cons, vars, varssize, success) = @scip_ccall_check("SCIPgetConsVars", (Ptr{SCIP}, Ptr{SCIP_CONS}, Ptr{Ptr{SCIP_VAR}}, Int, Ptr{SCIP_Bool}), scip, cons, vars, varssize, success)
SCIPconstructLP(scip, cutoff) = @scip_ccall_check("SCIPconstructLP", (Ptr{SCIP}, Ptr{SCIP_Bool}), scip, cutoff)
SCIPflushLP(scip) = @scip_ccall_check("SCIPflushLP", (Ptr{SCIP},), scip)
SCIPgetLPBInvRow(scip, r, coef) = @scip_ccall_check("SCIPgetLPBInvRow", (Ptr{SCIP}, Int, Ptr{SCIP_Real}), scip, r, coef)
SCIPgetLPBInvCol(scip, c, coef) = @scip_ccall_check("SCIPgetLPBInvCol", (Ptr{SCIP}, Int, Ptr{SCIP_Real}), scip, c, coef)
SCIPgetLPBInvARow(scip, r, binvrow, coef) = @scip_ccall_check("SCIPgetLPBInvARow", (Ptr{SCIP}, Int, Ptr{SCIP_Real}, Ptr{SCIP_Real}), scip, r, binvrow, coef)
SCIPgetLPBInvACol(scip, c, coef) = @scip_ccall_check("SCIPgetLPBInvACol", (Ptr{SCIP}, Int, Ptr{SCIP_Real}), scip, c, coef)
SCIPsumLPRows(scip, weights, sumcoef, sumlhs, sumrhs) = @scip_ccall_check("SCIPsumLPRows", (Ptr{SCIP}, Ptr{SCIP_Real}, Ptr{SCIP_REALARRAY}, Ptr{SCIP_Real}, Ptr{SCIP_Real}), scip, weights, sumcoef, sumlhs, sumrhs)
SCIPgetLPI(scip, lpi) = @scip_ccall_check("SCIPgetLPI", (Ptr{SCIP}, Ptr{Ptr{SCIP_LPI}}), scip, lpi)
SCIPcomputeLPRelIntPoint(scip, relaxrows, inclobjcutoff, timelimit, iterlimit, point) = @scip_ccall_check("SCIPcomputeLPRelIntPoint", (Ptr{SCIP}, SCIP_Bool, SCIP_Bool, SCIP_Real, Int, Ptr{Ptr{SCIP_SOL}}), scip, relaxrows, inclobjcutoff, timelimit, iterlimit, point)
SCIPcaptureRow(scip, row) = @scip_ccall_check("SCIPcaptureRow", (Ptr{SCIP}, Ptr{SCIP_ROW}), scip, row)
SCIPreleaseRow(scip, row) = @scip_ccall_check("SCIPreleaseRow", (Ptr{SCIP}, Ptr{Ptr{SCIP_ROW}}), scip, row)
SCIPchgRowLhs(scip, row, lhs) = @scip_ccall_check("SCIPchgRowLhs", (Ptr{SCIP}, Ptr{SCIP_ROW}, SCIP_Real), scip, row, lhs)
SCIPchgRowRhs(scip, row, rhs) = @scip_ccall_check("SCIPchgRowRhs", (Ptr{SCIP}, Ptr{SCIP_ROW}, SCIP_Real), scip, row, rhs)
SCIPcacheRowExtensions(scip, row) = @scip_ccall_check("SCIPcacheRowExtensions", (Ptr{SCIP}, Ptr{SCIP_ROW}), scip, row)
SCIPflushRowExtensions(scip, row) = @scip_ccall_check("SCIPflushRowExtensions", (Ptr{SCIP}, Ptr{SCIP_ROW}), scip, row)
SCIPaddVarToRow(scip, row, var, val) = @scip_ccall_check("SCIPaddVarToRow", (Ptr{SCIP}, Ptr{SCIP_ROW}, Ptr{SCIP_VAR}, SCIP_Real), scip, row, var, val)
SCIPaddVarsToRow(scip, row, nvars, vars, vals) = @scip_ccall_check("SCIPaddVarsToRow", (Ptr{SCIP}, Ptr{SCIP_ROW}, Int, Ptr{Ptr{SCIP_VAR}}, Ptr{SCIP_Real}), scip, row, nvars, vars, vals)
SCIPaddVarsToRowSameCoef(scip, row, nvars, vars, val) = @scip_ccall_check("SCIPaddVarsToRowSameCoef", (Ptr{SCIP}, Ptr{SCIP_ROW}, Int, Ptr{Ptr{SCIP_VAR}}, SCIP_Real), scip, row, nvars, vars, val)
SCIPcalcRowIntegralScalar(scip, row, mindelta, maxdelta, maxdnom, maxscale, usecontvars, intscalar, success) = @scip_ccall_check("SCIPcalcRowIntegralScalar", (Ptr{SCIP}, Ptr{SCIP_ROW}, SCIP_Real, SCIP_Real, Int64, SCIP_Real, SCIP_Bool, Ptr{SCIP_Real}, Ptr{SCIP_Bool}), scip, row, mindelta, maxdelta, maxdnom, maxscale, usecontvars, intscalar, success)
SCIPmakeRowIntegral(scip, row, mindelta, maxdelta, maxdnom, maxscale, usecontvars, success) = @scip_ccall_check("SCIPmakeRowIntegral", (Ptr{SCIP}, Ptr{SCIP_ROW}, SCIP_Real, SCIP_Real, Int64, SCIP_Real, SCIP_Bool, Ptr{SCIP_Bool}), scip, row, mindelta, maxdelta, maxdnom, maxscale, usecontvars, success)
SCIPrecalcRowLPActivity(scip, row) = @scip_ccall_check("SCIPrecalcRowLPActivity", (Ptr{SCIP}, Ptr{SCIP_ROW}), scip, row)
SCIPrecalcRowPseudoActivity(scip, row) = @scip_ccall_check("SCIPrecalcRowPseudoActivity", (Ptr{SCIP}, Ptr{SCIP_ROW}), scip, row)
SCIPrecalcRowActivity(scip, row) = @scip_ccall_check("SCIPrecalcRowActivity", (Ptr{SCIP}, Ptr{SCIP_ROW}), scip, row)
SCIPaddNlRow(scip, nlrow) = @scip_ccall_check("SCIPaddNlRow", (Ptr{SCIP}, Ptr{SCIP_NLROW}), scip, nlrow)
SCIPflushNLP(scip) = @scip_ccall_check("SCIPflushNLP", (Ptr{SCIP},), scip)
SCIPsetNLPInitialGuess(scip, initialguess) = @scip_ccall_check("SCIPsetNLPInitialGuess", (Ptr{SCIP}, Ptr{SCIP_Real}), scip, initialguess)
SCIPsetNLPInitialGuessSol(scip, sol) = @scip_ccall_check("SCIPsetNLPInitialGuessSol", (Ptr{SCIP}, Ptr{SCIP_SOL}), scip, sol)
SCIPsolveNLP(scip) = @scip_ccall_check("SCIPsolveNLP", (Ptr{SCIP},), scip)
SCIPgetNLPStatistics(scip, statistics) = @scip_ccall_check("SCIPgetNLPStatistics", (Ptr{SCIP}, Ptr{SCIP_NLPSTATISTICS}), scip, statistics)
SCIPsetNLPIntPar(scip, typeVar, ival) = @scip_ccall_check("SCIPsetNLPIntPar", (Ptr{SCIP}, SCIP_NLPPARAM, Int), scip, typeVar, ival)
SCIPgetNLPRealPar(scip, typeVar, dval) = @scip_ccall_check("SCIPgetNLPRealPar", (Ptr{SCIP}, SCIP_NLPPARAM, Ptr{SCIP_Real}), scip, typeVar, dval)
SCIPsetNLPRealPar(scip, typeVar, dval) = @scip_ccall_check("SCIPsetNLPRealPar", (Ptr{SCIP}, SCIP_NLPPARAM, SCIP_Real), scip, typeVar, dval)
SCIPgetNLPI(scip, nlpi, nlpiproblem) = @scip_ccall_check("SCIPgetNLPI", (Ptr{SCIP}, Ptr{Ptr{SCIP_NLPI}}, Ptr{Ptr{SCIP_NLPIPROBLEM}}), scip, nlpi, nlpiproblem)
SCIPstartDiveNLP(scip) = @scip_ccall_check("SCIPstartDiveNLP", (Ptr{SCIP},), scip)
SCIPendDiveNLP(scip) = @scip_ccall_check("SCIPendDiveNLP", (Ptr{SCIP},), scip)
SCIPchgVarObjDiveNLP(scip, var, coef) = @scip_ccall_check("SCIPchgVarObjDiveNLP", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), scip, var, coef)
SCIPchgVarBoundsDiveNLP(scip, var, lb, ub) = @scip_ccall_check("SCIPchgVarBoundsDiveNLP", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real, SCIP_Real), scip, var, lb, ub)
SCIPchgVarsBoundsDiveNLP(scip, nvars, vars, lbs, ubs) = @scip_ccall_check("SCIPchgVarsBoundsDiveNLP", (Ptr{SCIP}, Int, Ptr{Ptr{SCIP_VAR}}, Ptr{SCIP_Real}, Ptr{SCIP_Real}), scip, nvars, vars, lbs, ubs)
SCIPsolveDiveNLP(scip) = @scip_ccall_check("SCIPsolveDiveNLP", (Ptr{SCIP},), scip)
SCIPcreateNlRowFromRow(scip, nlrow, row) = @scip_ccall_check("SCIPcreateNlRowFromRow", (Ptr{SCIP}, Ptr{Ptr{SCIP_NLROW}}, Ptr{SCIP_ROW}), scip, nlrow, row)
SCIPcaptureNlRow(scip, nlrow) = @scip_ccall_check("SCIPcaptureNlRow", (Ptr{SCIP}, Ptr{SCIP_NLROW}), scip, nlrow)
SCIPreleaseNlRow(scip, nlrow) = @scip_ccall_check("SCIPreleaseNlRow", (Ptr{SCIP}, Ptr{Ptr{SCIP_NLROW}}), scip, nlrow)
SCIPchgNlRowLhs(scip, nlrow, lhs) = @scip_ccall_check("SCIPchgNlRowLhs", (Ptr{SCIP}, Ptr{SCIP_NLROW}, SCIP_Real), scip, nlrow, lhs)
SCIPchgNlRowRhs(scip, nlrow, rhs) = @scip_ccall_check("SCIPchgNlRowRhs", (Ptr{SCIP}, Ptr{SCIP_NLROW}, SCIP_Real), scip, nlrow, rhs)
SCIPchgNlRowConstant(scip, nlrow, constant) = @scip_ccall_check("SCIPchgNlRowConstant", (Ptr{SCIP}, Ptr{SCIP_NLROW}, SCIP_Real), scip, nlrow, constant)
SCIPaddLinearCoefToNlRow(scip, nlrow, var, val) = @scip_ccall_check("SCIPaddLinearCoefToNlRow", (Ptr{SCIP}, Ptr{SCIP_NLROW}, Ptr{SCIP_VAR}, SCIP_Real), scip, nlrow, var, val)
SCIPaddLinearCoefsToNlRow(scip, nlrow, nvars, vars, vals) = @scip_ccall_check("SCIPaddLinearCoefsToNlRow", (Ptr{SCIP}, Ptr{SCIP_NLROW}, Int, Ptr{Ptr{SCIP_VAR}}, Ptr{SCIP_Real}), scip, nlrow, nvars, vars, vals)
SCIPchgNlRowLinearCoef(scip, nlrow, var, coef) = @scip_ccall_check("SCIPchgNlRowLinearCoef", (Ptr{SCIP}, Ptr{SCIP_NLROW}, Ptr{SCIP_VAR}, SCIP_Real), scip, nlrow, var, coef)
SCIPaddQuadVarToNlRow(scip, nlrow, var) = @scip_ccall_check("SCIPaddQuadVarToNlRow", (Ptr{SCIP}, Ptr{SCIP_NLROW}, Ptr{SCIP_VAR}), scip, nlrow, var)
SCIPaddQuadVarsToNlRow(scip, nlrow, nvars, vars) = @scip_ccall_check("SCIPaddQuadVarsToNlRow", (Ptr{SCIP}, Ptr{SCIP_NLROW}, Int, Ptr{Ptr{SCIP_VAR}}), scip, nlrow, nvars, vars)
SCIPaddQuadElementToNlRow(scip, nlrow, quadelem) = @scip_ccall_check("SCIPaddQuadElementToNlRow", (Ptr{SCIP}, Ptr{SCIP_NLROW}, SCIP_QUADELEM), scip, nlrow, quadelem)
SCIPaddQuadElementsToNlRow(scip, nlrow, nquadelems, quadelems) = @scip_ccall_check("SCIPaddQuadElementsToNlRow", (Ptr{SCIP}, Ptr{SCIP_NLROW}, Int, Ptr{SCIP_QUADELEM}), scip, nlrow, nquadelems, quadelems)
SCIPchgNlRowQuadElement(scip, nlrow, quadelement) = @scip_ccall_check("SCIPchgNlRowQuadElement", (Ptr{SCIP}, Ptr{SCIP_NLROW}, SCIP_QUADELEM), scip, nlrow, quadelement)
SCIPsetNlRowExprtree(scip, nlrow, exprtree) = @scip_ccall_check("SCIPsetNlRowExprtree", (Ptr{SCIP}, Ptr{SCIP_NLROW}, Ptr{SCIP_EXPRTREE}), scip, nlrow, exprtree)
SCIPsetNlRowExprtreeParam(scip, nlrow, paramidx, paramval) = @scip_ccall_check("SCIPsetNlRowExprtreeParam", (Ptr{SCIP}, Ptr{SCIP_NLROW}, Int, SCIP_Real), scip, nlrow, paramidx, paramval)
SCIPsetNlRowExprtreeParams(scip, nlrow, paramvals) = @scip_ccall_check("SCIPsetNlRowExprtreeParams", (Ptr{SCIP}, Ptr{SCIP_NLROW}, Ptr{SCIP_Real}), scip, nlrow, paramvals)
SCIPrecalcNlRowNLPActivity(scip, nlrow) = @scip_ccall_check("SCIPrecalcNlRowNLPActivity", (Ptr{SCIP}, Ptr{SCIP_NLROW}), scip, nlrow)
SCIPgetNlRowNLPActivity(scip, nlrow, activity) = @scip_ccall_check("SCIPgetNlRowNLPActivity", (Ptr{SCIP}, Ptr{SCIP_NLROW}, Ptr{SCIP_Real}), scip, nlrow, activity)
SCIPgetNlRowNLPFeasibility(scip, nlrow, feasibility) = @scip_ccall_check("SCIPgetNlRowNLPFeasibility", (Ptr{SCIP}, Ptr{SCIP_NLROW}, Ptr{SCIP_Real}), scip, nlrow, feasibility)
SCIPrecalcNlRowPseudoActivity(scip, nlrow) = @scip_ccall_check("SCIPrecalcNlRowPseudoActivity", (Ptr{SCIP}, Ptr{SCIP_NLROW}), scip, nlrow)
SCIPgetNlRowPseudoActivity(scip, nlrow, pseudoactivity) = @scip_ccall_check("SCIPgetNlRowPseudoActivity", (Ptr{SCIP}, Ptr{SCIP_NLROW}, Ptr{SCIP_Real}), scip, nlrow, pseudoactivity)
SCIPgetNlRowPseudoFeasibility(scip, nlrow, pseudofeasibility) = @scip_ccall_check("SCIPgetNlRowPseudoFeasibility", (Ptr{SCIP}, Ptr{SCIP_NLROW}, Ptr{SCIP_Real}), scip, nlrow, pseudofeasibility)
SCIPrecalcNlRowActivity(scip, nlrow) = @scip_ccall_check("SCIPrecalcNlRowActivity", (Ptr{SCIP}, Ptr{SCIP_NLROW}), scip, nlrow)
SCIPgetNlRowActivity(scip, nlrow, activity) = @scip_ccall_check("SCIPgetNlRowActivity", (Ptr{SCIP}, Ptr{SCIP_NLROW}, Ptr{SCIP_Real}), scip, nlrow, activity)
SCIPgetNlRowFeasibility(scip, nlrow, feasibility) = @scip_ccall_check("SCIPgetNlRowFeasibility", (Ptr{SCIP}, Ptr{SCIP_NLROW}, Ptr{SCIP_Real}), scip, nlrow, feasibility)
SCIPgetNlRowSolActivity(scip, nlrow, sol, activity) = @scip_ccall_check("SCIPgetNlRowSolActivity", (Ptr{SCIP}, Ptr{SCIP_NLROW}, Ptr{SCIP_SOL}, Ptr{SCIP_Real}), scip, nlrow, sol, activity)
SCIPgetNlRowSolFeasibility(scip, nlrow, sol, feasibility) = @scip_ccall_check("SCIPgetNlRowSolFeasibility", (Ptr{SCIP}, Ptr{SCIP_NLROW}, Ptr{SCIP_SOL}, Ptr{SCIP_Real}), scip, nlrow, sol, feasibility)
SCIPgetNlRowActivityBounds(scip, nlrow, minactivity, maxactivity) = @scip_ccall_check("SCIPgetNlRowActivityBounds", (Ptr{SCIP}, Ptr{SCIP_NLROW}, Ptr{SCIP_Real}, Ptr{SCIP_Real}), scip, nlrow, minactivity, maxactivity)
SCIPgetExprtreeTransformedVars(scip, tree) = @scip_ccall_check("SCIPgetExprtreeTransformedVars", (Ptr{SCIP}, Ptr{SCIP_EXPRTREE}), scip, tree)
SCIPevalExprtreeSol(scip, tree, sol, val) = @scip_ccall_check("SCIPevalExprtreeSol", (Ptr{SCIP}, Ptr{SCIP_EXPRTREE}, Ptr{SCIP_SOL}, Ptr{SCIP_Real}), scip, tree, sol, val)
SCIPevalExprtreeGlobalBounds(scip, tree, infinity, val) = @scip_ccall_check("SCIPevalExprtreeGlobalBounds", (Ptr{SCIP}, Ptr{SCIP_EXPRTREE}, SCIP_Real, Ptr{SCIP_INTERVAL}), scip, tree, infinity, val)
SCIPevalExprtreeLocalBounds(scip, tree, infinity, val) = @scip_ccall_check("SCIPevalExprtreeLocalBounds", (Ptr{SCIP}, Ptr{SCIP_EXPRTREE}, SCIP_Real, Ptr{SCIP_INTERVAL}), scip, tree, infinity, val)
SCIPaddCut(scip, sol, cut, forcecut, infeasible) = @scip_ccall_check("SCIPaddCut", (Ptr{SCIP}, Ptr{SCIP_SOL}, Ptr{SCIP_ROW}, SCIP_Bool, Ptr{SCIP_Bool}), scip, sol, cut, forcecut, infeasible)
SCIPaddPoolCut(scip, row) = @scip_ccall_check("SCIPaddPoolCut", (Ptr{SCIP}, Ptr{SCIP_ROW}), scip, row)
SCIPdelPoolCut(scip, row) = @scip_ccall_check("SCIPdelPoolCut", (Ptr{SCIP}, Ptr{SCIP_ROW}), scip, row)
SCIPcreateCutpool(scip, cutpool, agelimit) = @scip_ccall_check("SCIPcreateCutpool", (Ptr{SCIP}, Ptr{Ptr{SCIP_CUTPOOL}}, Int), scip, cutpool, agelimit)
SCIPfreeCutpool(scip, cutpool) = @scip_ccall_check("SCIPfreeCutpool", (Ptr{SCIP}, Ptr{Ptr{SCIP_CUTPOOL}}), scip, cutpool)
SCIPaddRowCutpool(scip, cutpool, row) = @scip_ccall_check("SCIPaddRowCutpool", (Ptr{SCIP}, Ptr{SCIP_CUTPOOL}, Ptr{SCIP_ROW}), scip, cutpool, row)
SCIPaddNewRowCutpool(scip, cutpool, row) = @scip_ccall_check("SCIPaddNewRowCutpool", (Ptr{SCIP}, Ptr{SCIP_CUTPOOL}, Ptr{SCIP_ROW}), scip, cutpool, row)
SCIPdelRowCutpool(scip, cutpool, row) = @scip_ccall_check("SCIPdelRowCutpool", (Ptr{SCIP}, Ptr{SCIP_CUTPOOL}, Ptr{SCIP_ROW}), scip, cutpool, row)
SCIPseparateCutpool(scip, cutpool, result) = @scip_ccall_check("SCIPseparateCutpool", (Ptr{SCIP}, Ptr{SCIP_CUTPOOL}, Ptr{SCIP_RESULT}), scip, cutpool, result)
SCIPseparateSolCutpool(scip, cutpool, sol, result) = @scip_ccall_check("SCIPseparateSolCutpool", (Ptr{SCIP}, Ptr{SCIP_CUTPOOL}, Ptr{SCIP_SOL}, Ptr{SCIP_RESULT}), scip, cutpool, sol, result)
SCIPaddDelayedPoolCut(scip, row) = @scip_ccall_check("SCIPaddDelayedPoolCut", (Ptr{SCIP}, Ptr{SCIP_ROW}), scip, row)
SCIPdelDelayedPoolCut(scip, row) = @scip_ccall_check("SCIPdelDelayedPoolCut", (Ptr{SCIP}, Ptr{SCIP_ROW}), scip, row)
SCIPseparateSol(scip, sol, pretendroot, onlydelayed, delayed, cutoff) = @scip_ccall_check("SCIPseparateSol", (Ptr{SCIP}, Ptr{SCIP_SOL}, SCIP_Bool, SCIP_Bool, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}), scip, sol, pretendroot, onlydelayed, delayed, cutoff)
SCIPclearCuts(scip) = @scip_ccall_check("SCIPclearCuts", (Ptr{SCIP},), scip)
SCIPremoveInefficaciousCuts(scip) = @scip_ccall_check("SCIPremoveInefficaciousCuts", (Ptr{SCIP},), scip)
SCIPstartDive(scip) = @scip_ccall_check("SCIPstartDive", (Ptr{SCIP},), scip)
SCIPendDive(scip) = @scip_ccall_check("SCIPendDive", (Ptr{SCIP},), scip)
SCIPchgCutoffboundDive(scip, newcutoffbound) = @scip_ccall_check("SCIPchgCutoffboundDive", (Ptr{SCIP}, SCIP_Real), scip, newcutoffbound)
SCIPchgVarObjDive(scip, var, newobj) = @scip_ccall_check("SCIPchgVarObjDive", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), scip, var, newobj)
SCIPchgVarLbDive(scip, var, newbound) = @scip_ccall_check("SCIPchgVarLbDive", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), scip, var, newbound)
SCIPchgVarUbDive(scip, var, newbound) = @scip_ccall_check("SCIPchgVarUbDive", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), scip, var, newbound)
SCIPaddRowDive(scip, row) = @scip_ccall_check("SCIPaddRowDive", (Ptr{SCIP}, Ptr{SCIP_ROW}), scip, row)
SCIPchgRowLhsDive(scip, row, newlhs) = @scip_ccall_check("SCIPchgRowLhsDive", (Ptr{SCIP}, Ptr{SCIP_ROW}, SCIP_Real), scip, row, newlhs)
SCIPchgRowRhsDive(scip, row, newrhs) = @scip_ccall_check("SCIPchgRowRhsDive", (Ptr{SCIP}, Ptr{SCIP_ROW}, SCIP_Real), scip, row, newrhs)
SCIPsolveDiveLP(scip, itlim, lperror, cutoff) = @scip_ccall_check("SCIPsolveDiveLP", (Ptr{SCIP}, Int, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}), scip, itlim, lperror, cutoff)
SCIPstartProbing(scip) = @scip_ccall_check("SCIPstartProbing", (Ptr{SCIP},), scip)
SCIPnewProbingNode(scip) = @scip_ccall_check("SCIPnewProbingNode", (Ptr{SCIP},), scip)
SCIPbacktrackProbing(scip, probingdepth) = @scip_ccall_check("SCIPbacktrackProbing", (Ptr{SCIP}, Int), scip, probingdepth)
SCIPendProbing(scip) = @scip_ccall_check("SCIPendProbing", (Ptr{SCIP},), scip)
SCIPchgVarLbProbing(scip, var, newbound) = @scip_ccall_check("SCIPchgVarLbProbing", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), scip, var, newbound)
SCIPchgVarUbProbing(scip, var, newbound) = @scip_ccall_check("SCIPchgVarUbProbing", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), scip, var, newbound)
SCIPfixVarProbing(scip, var, fixedval) = @scip_ccall_check("SCIPfixVarProbing", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), scip, var, fixedval)
SCIPpropagateProbing(scip, maxproprounds, cutoff, ndomredsfound) = @scip_ccall_check("SCIPpropagateProbing", (Ptr{SCIP}, Int, Ptr{SCIP_Bool}, Ptr{Int64}), scip, maxproprounds, cutoff, ndomredsfound)
SCIPpropagateProbingImplications(scip, cutoff) = @scip_ccall_check("SCIPpropagateProbingImplications", (Ptr{SCIP}, Ptr{SCIP_Bool}), scip, cutoff)
SCIPsolveProbingLP(scip, itlim, lperror, cutoff) = @scip_ccall_check("SCIPsolveProbingLP", (Ptr{SCIP}, Int, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}), scip, itlim, lperror, cutoff)
SCIPsolveProbingLPWithPricing(scip, pretendroot, displayinfo, maxpricerounds, lperror, cutoff) = @scip_ccall_check("SCIPsolveProbingLPWithPricing", (Ptr{SCIP}, SCIP_Bool, SCIP_Bool, Int, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}), scip, pretendroot, displayinfo, maxpricerounds, lperror, cutoff)
SCIPaddExternBranchCand(scip, var, score, solval) = @scip_ccall_check("SCIPaddExternBranchCand", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real, SCIP_Real), scip, var, score, solval)
SCIPcreateChild(scip, node, nodeselprio, estimate) = @scip_ccall_check("SCIPcreateChild", (Ptr{SCIP}, Ptr{Ptr{SCIP_NODE}}, SCIP_Real, SCIP_Real), scip, node, nodeselprio, estimate)
SCIPbranchVar(scip, var, downchild, eqchild, upchild) = @scip_ccall_check("SCIPbranchVar", (Ptr{SCIP}, Ptr{SCIP_VAR}, Ptr{Ptr{SCIP_NODE}}, Ptr{Ptr{SCIP_NODE}}, Ptr{Ptr{SCIP_NODE}}), scip, var, downchild, eqchild, upchild)
SCIPbranchVarHole(scip, var, left, right, downchild, upchild) = @scip_ccall_check("SCIPbranchVarHole", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real, SCIP_Real, Ptr{Ptr{SCIP_NODE}}, Ptr{Ptr{SCIP_NODE}}), scip, var, left, right, downchild, upchild)
SCIPbranchVarVal(scip, var, val, downchild, eqchild, upchild) = @scip_ccall_check("SCIPbranchVarVal", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real, Ptr{Ptr{SCIP_NODE}}, Ptr{Ptr{SCIP_NODE}}, Ptr{Ptr{SCIP_NODE}}), scip, var, val, downchild, eqchild, upchild)
SCIPbranchLP(scip, result) = @scip_ccall_check("SCIPbranchLP", (Ptr{SCIP}, Ptr{SCIP_RESULT}), scip, result)
SCIPbranchExtern(scip, result) = @scip_ccall_check("SCIPbranchExtern", (Ptr{SCIP}, Ptr{SCIP_RESULT}), scip, result)
SCIPbranchPseudo(scip, result) = @scip_ccall_check("SCIPbranchPseudo", (Ptr{SCIP}, Ptr{SCIP_RESULT}), scip, result)
SCIPcreateSol(scip, sol, heur) = @scip_ccall_check("SCIPcreateSol", (Ptr{SCIP}, Ptr{Ptr{SCIP_SOL}}, Ptr{SCIP_HEUR}), scip, sol, heur)
SCIPcreateLPSol(scip, sol, heur) = @scip_ccall_check("SCIPcreateLPSol", (Ptr{SCIP}, Ptr{Ptr{SCIP_SOL}}, Ptr{SCIP_HEUR}), scip, sol, heur)
SCIPcreateNLPSol(scip, sol, heur) = @scip_ccall_check("SCIPcreateNLPSol", (Ptr{SCIP}, Ptr{Ptr{SCIP_SOL}}, Ptr{SCIP_HEUR}), scip, sol, heur)
SCIPcreateRelaxSol(scip, sol, heur) = @scip_ccall_check("SCIPcreateRelaxSol", (Ptr{SCIP}, Ptr{Ptr{SCIP_SOL}}, Ptr{SCIP_HEUR}), scip, sol, heur)
SCIPcreatePseudoSol(scip, sol, heur) = @scip_ccall_check("SCIPcreatePseudoSol", (Ptr{SCIP}, Ptr{Ptr{SCIP_SOL}}, Ptr{SCIP_HEUR}), scip, sol, heur)
SCIPcreateCurrentSol(scip, sol, heur) = @scip_ccall_check("SCIPcreateCurrentSol", (Ptr{SCIP}, Ptr{Ptr{SCIP_SOL}}, Ptr{SCIP_HEUR}), scip, sol, heur)
SCIPcreateUnknownSol(scip, sol, heur) = @scip_ccall_check("SCIPcreateUnknownSol", (Ptr{SCIP}, Ptr{Ptr{SCIP_SOL}}, Ptr{SCIP_HEUR}), scip, sol, heur)
SCIPcreateOrigSol(scip, sol, heur) = @scip_ccall_check("SCIPcreateOrigSol", (Ptr{SCIP}, Ptr{Ptr{SCIP_SOL}}, Ptr{SCIP_HEUR}), scip, sol, heur)
SCIPcreateSolCopy(scip, sol, sourcesol) = @scip_ccall_check("SCIPcreateSolCopy", (Ptr{SCIP}, Ptr{Ptr{SCIP_SOL}}, Ptr{SCIP_SOL}), scip, sol, sourcesol)
SCIPcreateFiniteSolCopy(scip, sol, sourcesol, success) = @scip_ccall_check("SCIPcreateFiniteSolCopy", (Ptr{SCIP}, Ptr{Ptr{SCIP_SOL}}, Ptr{SCIP_SOL}, Ptr{SCIP_Bool}), scip, sol, sourcesol, success)
SCIPfreeSol(scip, sol) = @scip_ccall_check("SCIPfreeSol", (Ptr{SCIP}, Ptr{Ptr{SCIP_SOL}}), scip, sol)
SCIPlinkLPSol(scip, sol) = @scip_ccall_check("SCIPlinkLPSol", (Ptr{SCIP}, Ptr{SCIP_SOL}), scip, sol)
SCIPlinkNLPSol(scip, sol) = @scip_ccall_check("SCIPlinkNLPSol", (Ptr{SCIP}, Ptr{SCIP_SOL}), scip, sol)
SCIPlinkRelaxSol(scip, sol) = @scip_ccall_check("SCIPlinkRelaxSol", (Ptr{SCIP}, Ptr{SCIP_SOL}), scip, sol)
SCIPlinkPseudoSol(scip, sol) = @scip_ccall_check("SCIPlinkPseudoSol", (Ptr{SCIP}, Ptr{SCIP_SOL}), scip, sol)
SCIPlinkCurrentSol(scip, sol) = @scip_ccall_check("SCIPlinkCurrentSol", (Ptr{SCIP}, Ptr{SCIP_SOL}), scip, sol)
SCIPclearSol(scip, sol) = @scip_ccall_check("SCIPclearSol", (Ptr{SCIP}, Ptr{SCIP_SOL}), scip, sol)
SCIPunlinkSol(scip, sol) = @scip_ccall_check("SCIPunlinkSol", (Ptr{SCIP}, Ptr{SCIP_SOL}), scip, sol)
SCIPsetSolVal(scip, sol, var, val) = @scip_ccall_check("SCIPsetSolVal", (Ptr{SCIP}, Ptr{SCIP_SOL}, Ptr{SCIP_VAR}, SCIP_Real), scip, sol, var, val)
SCIPsetSolVals(scip, sol, nvars, vars, vals) = @scip_ccall_check("SCIPsetSolVals", (Ptr{SCIP}, Ptr{SCIP_SOL}, Int, Ptr{Ptr{SCIP_VAR}}, Ptr{SCIP_Real}), scip, sol, nvars, vars, vals)
SCIPincSolVal(scip, sol, var, incval) = @scip_ccall_check("SCIPincSolVal", (Ptr{SCIP}, Ptr{SCIP_SOL}, Ptr{SCIP_VAR}, SCIP_Real), scip, sol, var, incval)
SCIPgetSolVals(scip, sol, nvars, vars, vals) = @scip_ccall_check("SCIPgetSolVals", (Ptr{SCIP}, Ptr{SCIP_SOL}, Int, Ptr{Ptr{SCIP_VAR}}, Ptr{SCIP_Real}), scip, sol, nvars, vars, vals)
SCIPadjustImplicitSolVals(scip, sol, uselprows) = @scip_ccall_check("SCIPadjustImplicitSolVals", (Ptr{SCIP}, Ptr{SCIP_SOL}, SCIP_Bool), scip, sol, uselprows)
SCIProundSol(scip, sol, success) = @scip_ccall_check("SCIProundSol", (Ptr{SCIP}, Ptr{SCIP_SOL}, Ptr{SCIP_Bool}), scip, sol, success)
SCIPretransformSol(scip, sol) = @scip_ccall_check("SCIPretransformSol", (Ptr{SCIP}, Ptr{SCIP_SOL}), scip, sol)
SCIPaddSol(scip, sol, stored) = @scip_ccall_check("SCIPaddSol", (Ptr{SCIP}, Ptr{SCIP_SOL}, Ptr{SCIP_Bool}), scip, sol, stored)
SCIPaddSolFree(scip, sol, stored) = @scip_ccall_check("SCIPaddSolFree", (Ptr{SCIP}, Ptr{Ptr{SCIP_SOL}}, Ptr{SCIP_Bool}), scip, sol, stored)
SCIPaddCurrentSol(scip, heur, stored) = @scip_ccall_check("SCIPaddCurrentSol", (Ptr{SCIP}, Ptr{SCIP_HEUR}, Ptr{SCIP_Bool}), scip, heur, stored)
SCIPtrySol(scip, sol, printreason, checkbounds, checkintegrality, checklprows, stored) = @scip_ccall_check("SCIPtrySol", (Ptr{SCIP}, Ptr{SCIP_SOL}, SCIP_Bool, SCIP_Bool, SCIP_Bool, SCIP_Bool, Ptr{SCIP_Bool}), scip, sol, printreason, checkbounds, checkintegrality, checklprows, stored)
SCIPtrySolFree(scip, sol, printreason, checkbounds, checkintegrality, checklprows, stored) = @scip_ccall_check("SCIPtrySolFree", (Ptr{SCIP}, Ptr{Ptr{SCIP_SOL}}, SCIP_Bool, SCIP_Bool, SCIP_Bool, SCIP_Bool, Ptr{SCIP_Bool}), scip, sol, printreason, checkbounds, checkintegrality, checklprows, stored)
SCIPtryCurrentSol(scip, heur, printreason, checkintegrality, checklprows, stored) = @scip_ccall_check("SCIPtryCurrentSol", (Ptr{SCIP}, Ptr{SCIP_HEUR}, SCIP_Bool, SCIP_Bool, SCIP_Bool, Ptr{SCIP_Bool}), scip, heur, printreason, checkintegrality, checklprows, stored)
SCIPcheckSol(scip, sol, printreason, checkbounds, checkintegrality, checklprows, feasible) = @scip_ccall_check("SCIPcheckSol", (Ptr{SCIP}, Ptr{SCIP_SOL}, SCIP_Bool, SCIP_Bool, SCIP_Bool, SCIP_Bool, Ptr{SCIP_Bool}), scip, sol, printreason, checkbounds, checkintegrality, checklprows, feasible)
SCIPcheckSolOrig(scip, sol, feasible, printreason, completely) = @scip_ccall_check("SCIPcheckSolOrig", (Ptr{SCIP}, Ptr{SCIP_SOL}, Ptr{SCIP_Bool}, SCIP_Bool, SCIP_Bool), scip, sol, feasible, printreason, completely)
SCIPdropEvent(scip, eventtype, eventhdlr, eventdata, filterpos) = @scip_ccall_check("SCIPdropEvent", (Ptr{SCIP}, SCIP_EVENTTYPE, Ptr{SCIP_EVENTHDLR}, Ptr{SCIP_EVENTDATA}, Int), scip, eventtype, eventhdlr, eventdata, filterpos)
SCIPdropVarEvent(scip, var, eventtype, eventhdlr, eventdata, filterpos) = @scip_ccall_check("SCIPdropVarEvent", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_EVENTTYPE, Ptr{SCIP_EVENTHDLR}, Ptr{SCIP_EVENTDATA}, Int), scip, var, eventtype, eventhdlr, eventdata, filterpos)
SCIPdropRowEvent(scip, row, eventtype, eventhdlr, eventdata, filterpos) = @scip_ccall_check("SCIPdropRowEvent", (Ptr{SCIP}, Ptr{SCIP_ROW}, SCIP_EVENTTYPE, Ptr{SCIP_EVENTHDLR}, Ptr{SCIP_EVENTDATA}, Int), scip, row, eventtype, eventhdlr, eventdata, filterpos)
SCIPcutoffNode(scip, node) = @scip_ccall_check("SCIPcutoffNode", (Ptr{SCIP}, Ptr{SCIP_NODE}), scip, node)
SCIPrepropagateNode(scip, node) = @scip_ccall_check("SCIPrepropagateNode", (Ptr{SCIP}, Ptr{SCIP_NODE}), scip, node)
SCIPupdateCutoffbound(scip, cutoffbound) = @scip_ccall_check("SCIPupdateCutoffbound", (Ptr{SCIP}, SCIP_Real), scip, cutoffbound)
SCIPcreateClock(scip, clck) = @scip_ccall_check("SCIPcreateClock", (Ptr{SCIP}, Ptr{Ptr{SCIP_CLOCK}}), scip, clck)
SCIPcreateCPUClock(scip, clck) = @scip_ccall_check("SCIPcreateCPUClock", (Ptr{SCIP}, Ptr{Ptr{SCIP_CLOCK}}), scip, clck)
SCIPcreateWallClock(scip, clck) = @scip_ccall_check("SCIPcreateWallClock", (Ptr{SCIP}, Ptr{Ptr{SCIP_CLOCK}}), scip, clck)
SCIPfreeClock(scip, clck) = @scip_ccall_check("SCIPfreeClock", (Ptr{SCIP}, Ptr{Ptr{SCIP_CLOCK}}), scip, clck)
SCIPresetClock(scip, clck) = @scip_ccall_check("SCIPresetClock", (Ptr{SCIP}, Ptr{SCIP_CLOCK}), scip, clck)
SCIPstartClock(scip, clck) = @scip_ccall_check("SCIPstartClock", (Ptr{SCIP}, Ptr{SCIP_CLOCK}), scip, clck)
SCIPstopClock(scip, clck) = @scip_ccall_check("SCIPstopClock", (Ptr{SCIP}, Ptr{SCIP_CLOCK}), scip, clck)
SCIPstartSolvingTime(scip) = @scip_ccall_check("SCIPstartSolvingTime", (Ptr{SCIP},), scip)
SCIPstopSolvingTime(scip) = @scip_ccall_check("SCIPstopSolvingTime", (Ptr{SCIP},), scip)
SCIPsetClockTime(scip, clck, sec) = @scip_ccall_check("SCIPsetClockTime", (Ptr{SCIP}, Ptr{SCIP_CLOCK}, SCIP_Real), scip, clck, sec)
SCIPchgFeastol(scip, feastol) = @scip_ccall_check("SCIPchgFeastol", (Ptr{SCIP}, SCIP_Real), scip, feastol)
SCIPchgLpfeastol(scip, lpfeastol, printnewvalue) = @scip_ccall_check("SCIPchgLpfeastol", (Ptr{SCIP}, SCIP_Real, SCIP_Bool), scip, lpfeastol, printnewvalue)
SCIPchgDualfeastol(scip, dualfeastol) = @scip_ccall_check("SCIPchgDualfeastol", (Ptr{SCIP}, SCIP_Real), scip, dualfeastol)
SCIPchgBarrierconvtol(scip, barrierconvtol) = @scip_ccall_check("SCIPchgBarrierconvtol", (Ptr{SCIP}, SCIP_Real), scip, barrierconvtol)
SCIPcreateRealarray(scip, realarray) = @scip_ccall_check("SCIPcreateRealarray", (Ptr{SCIP}, Ptr{Ptr{SCIP_REALARRAY}}), scip, realarray)
SCIPfreeRealarray(scip, realarray) = @scip_ccall_check("SCIPfreeRealarray", (Ptr{SCIP}, Ptr{Ptr{SCIP_REALARRAY}}), scip, realarray)
SCIPextendRealarray(scip, realarray, minidx, maxidx) = @scip_ccall_check("SCIPextendRealarray", (Ptr{SCIP}, Ptr{SCIP_REALARRAY}, Int, Int), scip, realarray, minidx, maxidx)
SCIPclearRealarray(scip, realarray) = @scip_ccall_check("SCIPclearRealarray", (Ptr{SCIP}, Ptr{SCIP_REALARRAY}), scip, realarray)
SCIPsetRealarrayVal(scip, realarray, idx, val) = @scip_ccall_check("SCIPsetRealarrayVal", (Ptr{SCIP}, Ptr{SCIP_REALARRAY}, Int, SCIP_Real), scip, realarray, idx, val)
SCIPincRealarrayVal(scip, realarray, idx, incval) = @scip_ccall_check("SCIPincRealarrayVal", (Ptr{SCIP}, Ptr{SCIP_REALARRAY}, Int, SCIP_Real), scip, realarray, idx, incval)
SCIPcreateIntarray(scip, intarray) = @scip_ccall_check("SCIPcreateIntarray", (Ptr{SCIP}, Ptr{Ptr{SCIP_INTARRAY}}), scip, intarray)
SCIPfreeIntarray(scip, intarray) = @scip_ccall_check("SCIPfreeIntarray", (Ptr{SCIP}, Ptr{Ptr{SCIP_INTARRAY}}), scip, intarray)
SCIPextendIntarray(scip, intarray, minidx, maxidx) = @scip_ccall_check("SCIPextendIntarray", (Ptr{SCIP}, Ptr{SCIP_INTARRAY}, Int, Int), scip, intarray, minidx, maxidx)
SCIPclearIntarray(scip, intarray) = @scip_ccall_check("SCIPclearIntarray", (Ptr{SCIP}, Ptr{SCIP_INTARRAY}), scip, intarray)
SCIPsetIntarrayVal(scip, intarray, idx, val) = @scip_ccall_check("SCIPsetIntarrayVal", (Ptr{SCIP}, Ptr{SCIP_INTARRAY}, Int, Int), scip, intarray, idx, val)
SCIPincIntarrayVal(scip, intarray, idx, incval) = @scip_ccall_check("SCIPincIntarrayVal", (Ptr{SCIP}, Ptr{SCIP_INTARRAY}, Int, Int), scip, intarray, idx, incval)
SCIPcreateBoolarray(scip, boolarray) = @scip_ccall_check("SCIPcreateBoolarray", (Ptr{SCIP}, Ptr{Ptr{SCIP_BOOLARRAY}}), scip, boolarray)
SCIPfreeBoolarray(scip, boolarray) = @scip_ccall_check("SCIPfreeBoolarray", (Ptr{SCIP}, Ptr{Ptr{SCIP_BOOLARRAY}}), scip, boolarray)
SCIPextendBoolarray(scip, boolarray, minidx, maxidx) = @scip_ccall_check("SCIPextendBoolarray", (Ptr{SCIP}, Ptr{SCIP_BOOLARRAY}, Int, Int), scip, boolarray, minidx, maxidx)
SCIPclearBoolarray(scip, boolarray) = @scip_ccall_check("SCIPclearBoolarray", (Ptr{SCIP}, Ptr{SCIP_BOOLARRAY}), scip, boolarray)
SCIPsetBoolarrayVal(scip, boolarray, idx, val) = @scip_ccall_check("SCIPsetBoolarrayVal", (Ptr{SCIP}, Ptr{SCIP_BOOLARRAY}, Int, SCIP_Bool), scip, boolarray, idx, val)
SCIPcreatePtrarray(scip, ptrarray) = @scip_ccall_check("SCIPcreatePtrarray", (Ptr{SCIP}, Ptr{Ptr{SCIP_PTRARRAY}}), scip, ptrarray)
SCIPfreePtrarray(scip, ptrarray) = @scip_ccall_check("SCIPfreePtrarray", (Ptr{SCIP}, Ptr{Ptr{SCIP_PTRARRAY}}), scip, ptrarray)
SCIPextendPtrarray(scip, ptrarray, minidx, maxidx) = @scip_ccall_check("SCIPextendPtrarray", (Ptr{SCIP}, Ptr{SCIP_PTRARRAY}, Int, Int), scip, ptrarray, minidx, maxidx)
SCIPclearPtrarray(scip, ptrarray) = @scip_ccall_check("SCIPclearPtrarray", (Ptr{SCIP}, Ptr{SCIP_PTRARRAY}), scip, ptrarray)


# TODO: type creations
typealias PtrSCIP Ptr{Void}
type SCIP_t
    ptr_scip::PtrSCIP
end

# TODO: construction/destruction
function SCIPcreate()
    a = Array(Ptr{SCIP}, 1)
    @scip_ccall_check("SCIPcreate", (Ptr{Ptr{SCIP}},), pointer(a))
    s = SCIP_t(a[1])
    finalizer(s, s->@scip_ccall_check("SCIPfree", (Ptr{Ptr{SCIP}},), pointer(a)))
    return s
end

# TODO: pointer methods
pointer(scip::SCIP_t) = scip.ptr_scip

# TODO: types and pointer() calls in arg lists
SCIPgetStage(scip::SCIP_t) = @scip_ccall("SCIPgetStage", SCIP_Stage, (Ptr{SCIP},), pointer(scip))
SCIPgetStatus(scip::SCIP_t) = @scip_ccall("SCIPgetStatus", SCIP_Status, (Ptr{SCIP},), pointer(scip))
SCIPisTransformed(scip::SCIP_t) = @scip_ccall("SCIPisTransformed", SCIP_Bool, (Ptr{SCIP},), pointer(scip))