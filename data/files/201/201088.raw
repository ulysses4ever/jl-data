# TODO: exports
export SCIPcreate, SCIPgetStage, SCIPgetStatus, SCIPisTransformed, SCIPversion
import Base: pointer

# Macro for calling SCIP functions that return misc. types
macro scip_ccall(func, args...)
    return quote
        ccall(($func, "libscipopt"), $(args...))
    end
end

# Macro for calling SCIP functions that have checked return codes
macro scip_ccall_check(func, args...)
    return quote
        ret = ccall(($func, "libscipopt"), Int8, $(args...))
        if ret != SCIP_OKAY
            error(SCIP_RETCODE[ret])
        end
    end
end

# TODO: type creations
type SCIP_t
    array_ptr_scip::Array{Ptr{SCIP}}
end

# TODO: pointer methods
array(scip::SCIP_t) = scip.array_ptr_scip
pointer(scip::SCIP_t) = array(scip)[1]

SCIPcreate(scip::SCIP_t) = @scip_ccall_check("SCIPcreate", (Ptr{Ptr{SCIP}},), array(scip))
SCIPfree(scip::SCIP_t) = @scip_ccall_check("SCIPfree", (Ptr{Ptr{SCIP}},), array(scip))

# TODO: construction/destruction
function SCIPcreate()
    s = SCIP_t(Array(Ptr{SCIP}, 1))
    SCIPcreate(s)
    finalizer(s, s->SCIPfree(s))
    return s
end

SCIPversion() = @scip_ccall("SCIPversion", SCIP_Real, ())
SCIPgetStage(scip::SCIP_t) = @scip_ccall("SCIPgetStage", SCIP_Stage, (Ptr{SCIP},), pointer(scip))
SCIPgetStatus(scip::SCIP_t) = @scip_ccall("SCIPgetStatus", SCIP_Status, (Ptr{SCIP},), pointer(scip))
SCIPisTransformed(scip::SCIP_t) = @scip_ccall("SCIPisTransformed", SCIP_Bool, (Ptr{SCIP},), pointer(scip))


# SCIP function wrappers: unchecked functions
#SCIPexprcurvAdd(curv1::SCIP_EXPRCURV, curv2::SCIP_EXPRCURV) = @scip_ccall("SCIPexprcurvAdd", SCIP_EXPRCURV, (SCIP_EXPRCURV, SCIP_EXPRCURV), curv1, curv2)
#SCIPexprcurvNegate(curvature::SCIP_EXPRCURV) = @scip_ccall("SCIPexprcurvNegate", SCIP_EXPRCURV, (SCIP_EXPRCURV,), curvature)
#SCIPexprcurvMultiply(factor::SCIP_Real, curvature::SCIP_EXPRCURV) = @scip_ccall("SCIPexprcurvMultiply", SCIP_EXPRCURV, (SCIP_Real, SCIP_EXPRCURV), factor, curvature)
#SCIPexprcurvPower(basebounds::SCIP_INTERVAL, basecurv::SCIP_EXPRCURV, exponent::SCIP_Real) = @scip_ccall("SCIPexprcurvPower", SCIP_EXPRCURV, (SCIP_INTERVAL, SCIP_EXPRCURV, SCIP_Real), basebounds, basecurv, exponent)
#SCIPexprcurvGetName(curv::SCIP_EXPRCURV) = @scip_ccall("SCIPexprcurvGetName", String, (SCIP_EXPRCURV,), curv)
#SCIPexpropGetName(op::SCIP_EXPROP) = @scip_ccall("SCIPexpropGetName", String, (SCIP_EXPROP,), op)
#SCIPexpropGetNChildren(op::SCIP_EXPROP) = @scip_ccall("SCIPexpropGetNChildren", Int, (SCIP_EXPROP,), op)
#SCIPexprGetOperator(expr::SCIP_EXPR_t) = @scip_ccall("SCIPexprGetOperator", SCIP_EXPROP, (Ptr{SCIP_EXPR},), pointer(expr))
#SCIPexprGetNChildren(expr::SCIP_EXPR_t) = @scip_ccall("SCIPexprGetNChildren", Int, (Ptr{SCIP_EXPR},), pointer(expr))
#SCIPexprGetChildren(expr::SCIP_EXPR_t) = @scip_ccall("SCIPexprGetChildren", Ptr{Ptr{SCIP_EXPR}}, (Ptr{SCIP_EXPR},), pointer(expr))
#SCIPexprGetOpIndex(expr::SCIP_EXPR_t) = @scip_ccall("SCIPexprGetOpIndex", Int, (Ptr{SCIP_EXPR},), pointer(expr))
#SCIPexprGetOpReal(expr::SCIP_EXPR_t) = @scip_ccall("SCIPexprGetOpReal", SCIP_Real, (Ptr{SCIP_EXPR},), pointer(expr))
#SCIPexprGetRealPowerExponent(expr::SCIP_EXPR_t) = @scip_ccall("SCIPexprGetRealPowerExponent", SCIP_Real, (Ptr{SCIP_EXPR},), pointer(expr))
#SCIPexprGetIntPowerExponent(expr::SCIP_EXPR_t) = @scip_ccall("SCIPexprGetIntPowerExponent", Int, (Ptr{SCIP_EXPR},), pointer(expr))
#SCIPexprGetSignPowerExponent(expr::SCIP_EXPR_t) = @scip_ccall("SCIPexprGetSignPowerExponent", SCIP_Real, (Ptr{SCIP_EXPR},), pointer(expr))
#SCIPexprGetLinearCoefs(expr::SCIP_EXPR_t) = @scip_ccall("SCIPexprGetLinearCoefs", Ptr{SCIP_Real}, (Ptr{SCIP_EXPR},), pointer(expr))
#SCIPexprGetLinearConstant(expr::SCIP_EXPR_t) = @scip_ccall("SCIPexprGetLinearConstant", SCIP_Real, (Ptr{SCIP_EXPR},), pointer(expr))
#SCIPexprGetQuadElements(expr::SCIP_EXPR_t) = @scip_ccall("SCIPexprGetQuadElements", Ptr{SCIP_QUADELEM}, (Ptr{SCIP_EXPR},), pointer(expr))
#SCIPexprGetQuadConstant(expr::SCIP_EXPR_t) = @scip_ccall("SCIPexprGetQuadConstant", SCIP_Real, (Ptr{SCIP_EXPR},), pointer(expr))
#SCIPexprGetQuadLinearCoefs(expr::SCIP_EXPR_t) = @scip_ccall("SCIPexprGetQuadLinearCoefs", Ptr{SCIP_Real}, (Ptr{SCIP_EXPR},), pointer(expr))
#SCIPexprGetNQuadElements(expr::SCIP_EXPR_t) = @scip_ccall("SCIPexprGetNQuadElements", Int, (Ptr{SCIP_EXPR},), pointer(expr))
#SCIPexprGetMonomials(expr::SCIP_EXPR_t) = @scip_ccall("SCIPexprGetMonomials", Ptr{Ptr{SCIP_EXPRDATA_MONOMIAL}}, (Ptr{SCIP_EXPR},), pointer(expr))
#SCIPexprGetNMonomials(expr::SCIP_EXPR_t) = @scip_ccall("SCIPexprGetNMonomials", Int, (Ptr{SCIP_EXPR},), pointer(expr))
#SCIPexprGetPolynomialConstant(expr::SCIP_EXPR_t) = @scip_ccall("SCIPexprGetPolynomialConstant", SCIP_Real, (Ptr{SCIP_EXPR},), pointer(expr))
#SCIPexprGetMonomialCoef(monomial::SCIP_EXPRDATA_MONOMIAL_t) = @scip_ccall("SCIPexprGetMonomialCoef", SCIP_Real, (Ptr{SCIP_EXPRDATA_MONOMIAL},), pointer(monomial))
#SCIPexprGetMonomialNFactors(monomial::SCIP_EXPRDATA_MONOMIAL_t) = @scip_ccall("SCIPexprGetMonomialNFactors", Int, (Ptr{SCIP_EXPRDATA_MONOMIAL},), pointer(monomial))
#SCIPexprGetMonomialExponents(monomial::SCIP_EXPRDATA_MONOMIAL_t) = @scip_ccall("SCIPexprGetMonomialExponents", Ptr{SCIP_Real}, (Ptr{SCIP_EXPRDATA_MONOMIAL},), pointer(monomial))
#SCIPexprSortQuadElems(expr::SCIP_EXPR_t) = @scip_ccall("SCIPexprSortQuadElems", Void, (Ptr{SCIP_EXPR},), pointer(expr))
#SCIPexprChgPolynomialConstant(expr::SCIP_EXPR_t, constant::SCIP_Real) = @scip_ccall("SCIPexprChgPolynomialConstant", Void, (Ptr{SCIP_EXPR}, SCIP_Real), pointer(expr), constant)
#SCIPexprSortMonomialFactors(monomial::SCIP_EXPRDATA_MONOMIAL_t) = @scip_ccall("SCIPexprSortMonomialFactors", Void, (Ptr{SCIP_EXPRDATA_MONOMIAL},), pointer(monomial))
#SCIPexprAreMonomialsEqual(monomial1::SCIP_EXPRDATA_MONOMIAL_t, monomial2::SCIP_EXPRDATA_MONOMIAL_t, eps::SCIP_Real) = @scip_ccall("SCIPexprAreMonomialsEqual", SCIP_Bool, (Ptr{SCIP_EXPRDATA_MONOMIAL}, Ptr{SCIP_EXPRDATA_MONOMIAL}, SCIP_Real), pointer(monomial1), pointer(monomial2), eps)
#SCIPexprChgMonomialCoef(monomial::SCIP_EXPRDATA_MONOMIAL_t, newcoef::SCIP_Real) = @scip_ccall("SCIPexprChgMonomialCoef", Void, (Ptr{SCIP_EXPRDATA_MONOMIAL}, SCIP_Real), pointer(monomial), newcoef)
#SCIPexprMonomialPower(monomial::SCIP_EXPRDATA_MONOMIAL_t, exponent) = @scip_ccall("SCIPexprMonomialPower", Void, (Ptr{SCIP_EXPRDATA_MONOMIAL}, Int), pointer(monomial), exponent)
#SCIPexprMergeMonomialFactors(monomial::SCIP_EXPRDATA_MONOMIAL_t, eps::SCIP_Real) = @scip_ccall("SCIPexprMergeMonomialFactors", Void, (Ptr{SCIP_EXPRDATA_MONOMIAL}, SCIP_Real), pointer(monomial), eps)
#SCIPexprSortMonomials(expr::SCIP_EXPR_t) = @scip_ccall("SCIPexprSortMonomials", Void, (Ptr{SCIP_EXPR},), pointer(expr))
#SCIPexprHasParam(expr::SCIP_EXPR_t) = @scip_ccall("SCIPexprHasParam", SCIP_Bool, (Ptr{SCIP_EXPR},), pointer(expr))
#SCIPexprAreEqual(expr1::SCIP_EXPR_t, expr2::SCIP_EXPR_t, eps::SCIP_Real) = @scip_ccall("SCIPexprAreEqual", SCIP_Bool, (Ptr{SCIP_EXPR}, Ptr{SCIP_EXPR}, SCIP_Real), pointer(expr1), pointer(expr2), eps)
#SCIPexprtreeGetRoot(tree::SCIP_EXPRTREE_t) = @scip_ccall("SCIPexprtreeGetRoot", Ptr{SCIP_EXPR}, (Ptr{SCIP_EXPRTREE},), pointer(tree))
#SCIPexprtreeGetNVars(tree::SCIP_EXPRTREE_t) = @scip_ccall("SCIPexprtreeGetNVars", Int, (Ptr{SCIP_EXPRTREE},), pointer(tree))
#SCIPexprtreeGetNParams(tree::SCIP_EXPRTREE_t) = @scip_ccall("SCIPexprtreeGetNParams", Int, (Ptr{SCIP_EXPRTREE},), pointer(tree))
#SCIPexprtreeGetParamVals(tree::SCIP_EXPRTREE_t) = @scip_ccall("SCIPexprtreeGetParamVals", Ptr{SCIP_Real}, (Ptr{SCIP_EXPRTREE},), pointer(tree))
#SCIPexprtreeSetParamVal(tree::SCIP_EXPRTREE_t, paramidx, paramval::SCIP_Real) = @scip_ccall("SCIPexprtreeSetParamVal", Void, (Ptr{SCIP_EXPRTREE}, Int, SCIP_Real), pointer(tree), paramidx, paramval)
#SCIPexprtreeGetInterpreterData(tree::SCIP_EXPRTREE_t) = @scip_ccall("SCIPexprtreeGetInterpreterData", Ptr{SCIP_EXPRINTDATA}, (Ptr{SCIP_EXPRTREE},), pointer(tree))
#SCIPexprtreeSetInterpreterData(tree::SCIP_EXPRTREE_t, interpreterdata::SCIP_EXPRINTDATA_t) = @scip_ccall("SCIPexprtreeSetInterpreterData", Void, (Ptr{SCIP_EXPRTREE}, Ptr{SCIP_EXPRINTDATA}), pointer(tree), pointer(interpreterdata))
#SCIPexprtreeHasParam(tree::SCIP_EXPRTREE_t) = @scip_ccall("SCIPexprtreeHasParam", SCIP_Bool, (Ptr{SCIP_EXPRTREE},), pointer(tree))
#SCIPquadelemSort(quadelems::SCIP_QUADELEM_t, nquadelems) = @scip_ccall("SCIPquadelemSort", Void, (Ptr{SCIP_QUADELEM}, Int), pointer(quadelems), nquadelems)
#SCIPexprgraphCaptureNode(node::SCIP_EXPRGRAPHNODE_t) = @scip_ccall("SCIPexprgraphCaptureNode", Void, (Ptr{SCIP_EXPRGRAPHNODE},), pointer(node))
#SCIPexprgraphIsNodeEnabled(node::SCIP_EXPRGRAPHNODE_t) = @scip_ccall("SCIPexprgraphIsNodeEnabled", SCIP_Bool, (Ptr{SCIP_EXPRGRAPHNODE},), pointer(node))
#SCIPexprgraphGetNodeNChildren(node::SCIP_EXPRGRAPHNODE_t) = @scip_ccall("SCIPexprgraphGetNodeNChildren", Int, (Ptr{SCIP_EXPRGRAPHNODE},), pointer(node))
#SCIPexprgraphGetNodeChildren(node::SCIP_EXPRGRAPHNODE_t) = @scip_ccall("SCIPexprgraphGetNodeChildren", Ptr{Ptr{SCIP_EXPRGRAPHNODE}}, (Ptr{SCIP_EXPRGRAPHNODE},), pointer(node))
#SCIPexprgraphGetNodeNParents(node::SCIP_EXPRGRAPHNODE_t) = @scip_ccall("SCIPexprgraphGetNodeNParents", Int, (Ptr{SCIP_EXPRGRAPHNODE},), pointer(node))
#SCIPexprgraphGetNodeParents(node::SCIP_EXPRGRAPHNODE_t) = @scip_ccall("SCIPexprgraphGetNodeParents", Ptr{Ptr{SCIP_EXPRGRAPHNODE}}, (Ptr{SCIP_EXPRGRAPHNODE},), pointer(node))
#SCIPexprgraphGetNodeDepth(node::SCIP_EXPRGRAPHNODE_t) = @scip_ccall("SCIPexprgraphGetNodeDepth", Int, (Ptr{SCIP_EXPRGRAPHNODE},), pointer(node))
#SCIPexprgraphGetNodePosition(node::SCIP_EXPRGRAPHNODE_t) = @scip_ccall("SCIPexprgraphGetNodePosition", Int, (Ptr{SCIP_EXPRGRAPHNODE},), pointer(node))
#SCIPexprgraphGetNodeOperator(node::SCIP_EXPRGRAPHNODE_t) = @scip_ccall("SCIPexprgraphGetNodeOperator", SCIP_EXPROP, (Ptr{SCIP_EXPRGRAPHNODE},), pointer(node))
#SCIPexprgraphGetNodeOperatorIndex(node::SCIP_EXPRGRAPHNODE_t) = @scip_ccall("SCIPexprgraphGetNodeOperatorIndex", Int, (Ptr{SCIP_EXPRGRAPHNODE},), pointer(node))
#SCIPexprgraphGetNodeOperatorReal(node::SCIP_EXPRGRAPHNODE_t) = @scip_ccall("SCIPexprgraphGetNodeOperatorReal", SCIP_Real, (Ptr{SCIP_EXPRGRAPHNODE},), pointer(node))
#SCIPexprgraphGetNodeRealPowerExponent(node::SCIP_EXPRGRAPHNODE_t) = @scip_ccall("SCIPexprgraphGetNodeRealPowerExponent", SCIP_Real, (Ptr{SCIP_EXPRGRAPHNODE},), pointer(node))
#SCIPexprgraphGetNodeIntPowerExponent(node::SCIP_EXPRGRAPHNODE_t) = @scip_ccall("SCIPexprgraphGetNodeIntPowerExponent", Int, (Ptr{SCIP_EXPRGRAPHNODE},), pointer(node))
#SCIPexprgraphGetNodeSignPowerExponent(node::SCIP_EXPRGRAPHNODE_t) = @scip_ccall("SCIPexprgraphGetNodeSignPowerExponent", SCIP_Real, (Ptr{SCIP_EXPRGRAPHNODE},), pointer(node))
#SCIPexprgraphGetNodeLinearCoefs(node::SCIP_EXPRGRAPHNODE_t) = @scip_ccall("SCIPexprgraphGetNodeLinearCoefs", Ptr{SCIP_Real}, (Ptr{SCIP_EXPRGRAPHNODE},), pointer(node))
#SCIPexprgraphGetNodeLinearConstant(node::SCIP_EXPRGRAPHNODE_t) = @scip_ccall("SCIPexprgraphGetNodeLinearConstant", SCIP_Real, (Ptr{SCIP_EXPRGRAPHNODE},), pointer(node))
#SCIPexprgraphGetNodeQuadraticConstant(node::SCIP_EXPRGRAPHNODE_t) = @scip_ccall("SCIPexprgraphGetNodeQuadraticConstant", SCIP_Real, (Ptr{SCIP_EXPRGRAPHNODE},), pointer(node))
#SCIPexprgraphGetNodeQuadraticLinearCoefs(node::SCIP_EXPRGRAPHNODE_t) = @scip_ccall("SCIPexprgraphGetNodeQuadraticLinearCoefs", Ptr{SCIP_Real}, (Ptr{SCIP_EXPRGRAPHNODE},), pointer(node))
#SCIPexprgraphGetNodeQuadraticQuadElements(node::SCIP_EXPRGRAPHNODE_t) = @scip_ccall("SCIPexprgraphGetNodeQuadraticQuadElements", Ptr{SCIP_QUADELEM}, (Ptr{SCIP_EXPRGRAPHNODE},), pointer(node))
#SCIPexprgraphGetNodeQuadraticNQuadElements(node::SCIP_EXPRGRAPHNODE_t) = @scip_ccall("SCIPexprgraphGetNodeQuadraticNQuadElements", Int, (Ptr{SCIP_EXPRGRAPHNODE},), pointer(node))
#SCIPexprgraphGetNodePolynomialMonomials(node::SCIP_EXPRGRAPHNODE_t) = @scip_ccall("SCIPexprgraphGetNodePolynomialMonomials", Ptr{Ptr{SCIP_EXPRDATA_MONOMIAL}}, (Ptr{SCIP_EXPRGRAPHNODE},), pointer(node))
#SCIPexprgraphGetNodePolynomialNMonomials(node::SCIP_EXPRGRAPHNODE_t) = @scip_ccall("SCIPexprgraphGetNodePolynomialNMonomials", Int, (Ptr{SCIP_EXPRGRAPHNODE},), pointer(node))
#SCIPexprgraphGetNodePolynomialConstant(node::SCIP_EXPRGRAPHNODE_t) = @scip_ccall("SCIPexprgraphGetNodePolynomialConstant", SCIP_Real, (Ptr{SCIP_EXPRGRAPHNODE},), pointer(node))
#SCIPexprgraphGetNodeBounds(node::SCIP_EXPRGRAPHNODE_t) = @scip_ccall("SCIPexprgraphGetNodeBounds", SCIP_INTERVAL, (Ptr{SCIP_EXPRGRAPHNODE},), pointer(node))
#SCIPexprgraphGetNodeVal(node::SCIP_EXPRGRAPHNODE_t) = @scip_ccall("SCIPexprgraphGetNodeVal", SCIP_Real, (Ptr{SCIP_EXPRGRAPHNODE},), pointer(node))
#SCIPexprgraphGetNodeCurvature(node::SCIP_EXPRGRAPHNODE_t) = @scip_ccall("SCIPexprgraphGetNodeCurvature", SCIP_EXPRCURV, (Ptr{SCIP_EXPRGRAPHNODE},), pointer(node))
#SCIPexprgraphEnableNode(exprgraph::SCIP_EXPRGRAPH_t, node::SCIP_EXPRGRAPHNODE_t) = @scip_ccall("SCIPexprgraphEnableNode", Void, (Ptr{SCIP_EXPRGRAPH}, Ptr{SCIP_EXPRGRAPHNODE}), pointer(exprgraph), pointer(node))
#SCIPexprgraphDisableNode(exprgraph::SCIP_EXPRGRAPH_t, node::SCIP_EXPRGRAPHNODE_t) = @scip_ccall("SCIPexprgraphDisableNode", Void, (Ptr{SCIP_EXPRGRAPH}, Ptr{SCIP_EXPRGRAPHNODE}), pointer(exprgraph), pointer(node))
#SCIPexprgraphHasNodeSibling(node::SCIP_EXPRGRAPHNODE_t) = @scip_ccall("SCIPexprgraphHasNodeSibling", SCIP_Bool, (Ptr{SCIP_EXPRGRAPHNODE},), pointer(node))
#SCIPexprgraphAreAllNodeChildrenVars(node::SCIP_EXPRGRAPHNODE_t) = @scip_ccall("SCIPexprgraphAreAllNodeChildrenVars", SCIP_Bool, (Ptr{SCIP_EXPRGRAPHNODE},), pointer(node))
#SCIPexprgraphHasNodeNonlinearAncestor(node::SCIP_EXPRGRAPHNODE_t) = @scip_ccall("SCIPexprgraphHasNodeNonlinearAncestor", SCIP_Bool, (Ptr{SCIP_EXPRGRAPHNODE},), pointer(node))
#SCIPexprgraphTightenNodeBounds(exprgraph::SCIP_EXPRGRAPH_t, node::SCIP_EXPRGRAPHNODE_t, nodebounds::SCIP_INTERVAL, minstrength::SCIP_Real, cutoff::SCIP_Bool_t) = @scip_ccall("SCIPexprgraphTightenNodeBounds", Void, (Ptr{SCIP_EXPRGRAPH}, Ptr{SCIP_EXPRGRAPHNODE}, SCIP_INTERVAL, SCIP_Real, Ptr{SCIP_Bool}), pointer(exprgraph), pointer(node), nodebounds, minstrength, pointer(cutoff))
#SCIPexprgraphGetDepth(exprgraph::SCIP_EXPRGRAPH_t) = @scip_ccall("SCIPexprgraphGetDepth", Int, (Ptr{SCIP_EXPRGRAPH},), pointer(exprgraph))
#SCIPexprgraphGetNodes(exprgraph::SCIP_EXPRGRAPH_t) = @scip_ccall("SCIPexprgraphGetNodes", Ptr{Ptr{Ptr{SCIP_EXPRGRAPHNODE}}}, (Ptr{SCIP_EXPRGRAPH},), pointer(exprgraph))
#SCIPexprgraphGetNVars(exprgraph::SCIP_EXPRGRAPH_t) = @scip_ccall("SCIPexprgraphGetNVars", Int, (Ptr{SCIP_EXPRGRAPH},), pointer(exprgraph))
#SCIPexprgraphGetVarNodes(exprgraph::SCIP_EXPRGRAPH_t) = @scip_ccall("SCIPexprgraphGetVarNodes", Ptr{Ptr{SCIP_EXPRGRAPHNODE}}, (Ptr{SCIP_EXPRGRAPH},), pointer(exprgraph))
#SCIPexprgraphSetVarNodeValue(varnode::SCIP_EXPRGRAPHNODE_t, value::SCIP_Real) = @scip_ccall("SCIPexprgraphSetVarNodeValue", Void, (Ptr{SCIP_EXPRGRAPHNODE}, SCIP_Real), pointer(varnode), value)
#SCIPexprgraphSetVarsBounds(exprgraph::SCIP_EXPRGRAPH_t, varbounds::SCIP_INTERVAL_t) = @scip_ccall("SCIPexprgraphSetVarsBounds", Void, (Ptr{SCIP_EXPRGRAPH}, Ptr{SCIP_INTERVAL}), pointer(exprgraph), pointer(varbounds))
#SCIPexprgraphSetVarNodeBounds(exprgraph::SCIP_EXPRGRAPH_t, varnode::SCIP_EXPRGRAPHNODE_t, varbounds::SCIP_INTERVAL) = @scip_ccall("SCIPexprgraphSetVarNodeBounds", Void, (Ptr{SCIP_EXPRGRAPH}, Ptr{SCIP_EXPRGRAPHNODE}, SCIP_INTERVAL), pointer(exprgraph), pointer(varnode), varbounds)
#SCIPexprgraphSetVarNodeLb(exprgraph::SCIP_EXPRGRAPH_t, varnode::SCIP_EXPRGRAPHNODE_t, lb::SCIP_Real) = @scip_ccall("SCIPexprgraphSetVarNodeLb", Void, (Ptr{SCIP_EXPRGRAPH}, Ptr{SCIP_EXPRGRAPHNODE}, SCIP_Real), pointer(exprgraph), pointer(varnode), lb)
#SCIPexprgraphSetVarNodeUb(exprgraph::SCIP_EXPRGRAPH_t, varnode::SCIP_EXPRGRAPHNODE_t, ub::SCIP_Real) = @scip_ccall("SCIPexprgraphSetVarNodeUb", Void, (Ptr{SCIP_EXPRGRAPH}, Ptr{SCIP_EXPRGRAPHNODE}, SCIP_Real), pointer(exprgraph), pointer(varnode), ub)
#SCIPexprgraphGetVarsBounds(exprgraph::SCIP_EXPRGRAPH_t) = @scip_ccall("SCIPexprgraphGetVarsBounds", Ptr{SCIP_INTERVAL}, (Ptr{SCIP_EXPRGRAPH},), pointer(exprgraph))
#SCIPexprgraphFindConstNode(exprgraph::SCIP_EXPRGRAPH_t, constant::SCIP_Real, constnode::SCIP_EXPRGRAPHNODE_t) = @scip_ccall("SCIPexprgraphFindConstNode", SCIP_Bool, (Ptr{SCIP_EXPRGRAPH}, SCIP_Real, Ptr{Ptr{SCIP_EXPRGRAPHNODE}}), pointer(exprgraph), constant, array(constnode))
#SCIPexprgraphPropagateNodeBounds(exprgraph::SCIP_EXPRGRAPH_t, infinity::SCIP_Real, minstrength::SCIP_Real, cutoff::SCIP_Bool_t) = @scip_ccall("SCIPexprgraphPropagateNodeBounds", Void, (Ptr{SCIP_EXPRGRAPH}, SCIP_Real, SCIP_Real, Ptr{SCIP_Bool}), pointer(exprgraph), infinity, minstrength, pointer(cutoff))
#SCIPexprgraphGetSumTreesNSummands(node::SCIP_EXPRGRAPHNODE_t) = @scip_ccall("SCIPexprgraphGetSumTreesNSummands", Int, (Ptr{SCIP_EXPRGRAPHNODE},), pointer(node))
#SCIPexprtreeGetVars(tree::SCIP_EXPRTREE_t) = @scip_ccall("SCIPexprtreeGetVars", Ptr{Ptr{SCIP_VAR}}, (Ptr{SCIP_EXPRTREE},), pointer(tree))
#SCIPexprtreeFindVar(tree::SCIP_EXPRTREE_t, var::SCIP_VAR_t) = @scip_ccall("SCIPexprtreeFindVar", Int, (Ptr{SCIP_EXPRTREE}, Ptr{SCIP_VAR}), pointer(tree), pointer(var))
#SCIPnlrowGetConstant(nlrow::SCIP_NLROW_t) = @scip_ccall("SCIPnlrowGetConstant", SCIP_Real, (Ptr{SCIP_NLROW},), pointer(nlrow))
#SCIPnlrowGetNLinearVars(nlrow::SCIP_NLROW_t) = @scip_ccall("SCIPnlrowGetNLinearVars", Int, (Ptr{SCIP_NLROW},), pointer(nlrow))
#SCIPnlrowGetLinearVars(nlrow::SCIP_NLROW_t) = @scip_ccall("SCIPnlrowGetLinearVars", Ptr{Ptr{SCIP_VAR}}, (Ptr{SCIP_NLROW},), pointer(nlrow))
#SCIPnlrowGetLinearCoefs(nlrow::SCIP_NLROW_t) = @scip_ccall("SCIPnlrowGetLinearCoefs", Ptr{SCIP_Real}, (Ptr{SCIP_NLROW},), pointer(nlrow))
#SCIPnlrowGetNQuadVars(nlrow::SCIP_NLROW_t) = @scip_ccall("SCIPnlrowGetNQuadVars", Int, (Ptr{SCIP_NLROW},), pointer(nlrow))
#SCIPnlrowGetQuadVars(nlrow::SCIP_NLROW_t) = @scip_ccall("SCIPnlrowGetQuadVars", Ptr{Ptr{SCIP_VAR}}, (Ptr{SCIP_NLROW},), pointer(nlrow))
#SCIPnlrowSearchQuadVar(nlrow::SCIP_NLROW_t, var::SCIP_VAR_t) = @scip_ccall("SCIPnlrowSearchQuadVar", Int, (Ptr{SCIP_NLROW}, Ptr{SCIP_VAR}), pointer(nlrow), pointer(var))
#SCIPnlrowGetNQuadElems(nlrow::SCIP_NLROW_t) = @scip_ccall("SCIPnlrowGetNQuadElems", Int, (Ptr{SCIP_NLROW},), pointer(nlrow))
#SCIPnlrowGetQuadElems(nlrow::SCIP_NLROW_t) = @scip_ccall("SCIPnlrowGetQuadElems", Ptr{SCIP_QUADELEM}, (Ptr{SCIP_NLROW},), pointer(nlrow))
#SCIPnlrowGetExprtree(nlrow::SCIP_NLROW_t) = @scip_ccall("SCIPnlrowGetExprtree", Ptr{SCIP_EXPRTREE}, (Ptr{SCIP_NLROW},), pointer(nlrow))
#SCIPnlrowGetLhs(nlrow::SCIP_NLROW_t) = @scip_ccall("SCIPnlrowGetLhs", SCIP_Real, (Ptr{SCIP_NLROW},), pointer(nlrow))
#SCIPnlrowGetRhs(nlrow::SCIP_NLROW_t) = @scip_ccall("SCIPnlrowGetRhs", SCIP_Real, (Ptr{SCIP_NLROW},), pointer(nlrow))
#SCIPnlrowGetName(nlrow::SCIP_NLROW_t) = @scip_ccall("SCIPnlrowGetName", String, (Ptr{SCIP_NLROW},), pointer(nlrow))
#SCIPnlrowGetNLPPos(nlrow::SCIP_NLROW_t) = @scip_ccall("SCIPnlrowGetNLPPos", Int, (Ptr{SCIP_NLROW},), pointer(nlrow))
#SCIPnlrowIsInNLP(nlrow::SCIP_NLROW_t) = @scip_ccall("SCIPnlrowIsInNLP", SCIP_Bool, (Ptr{SCIP_NLROW},), pointer(nlrow))
#SCIPnlrowGetDualsol(nlrow::SCIP_NLROW_t) = @scip_ccall("SCIPnlrowGetDualsol", SCIP_Real, (Ptr{SCIP_NLROW},), pointer(nlrow))
#SCIPversion() = @scip_ccall("SCIPversion", SCIP_Real, ())
#SCIPmajorVersion() = @scip_ccall("SCIPmajorVersion", Int, ())
#SCIPminorVersion() = @scip_ccall("SCIPminorVersion", Int, ())
#SCIPtechVersion() = @scip_ccall("SCIPtechVersion", Int, ())
#SCIPsubversion() = @scip_ccall("SCIPsubversion", Int, ())
#SCIPprintError(retcode::SCIP_RETCODE) = @scip_ccall("SCIPprintError", Void, (SCIP_RETCODE,), retcode)
#SCIPstoreSolutionGap(scip::SCIP_t) = @scip_ccall("SCIPstoreSolutionGap", Void, (Ptr{SCIP},), pointer(scip))
#SCIPgetStage(scip::SCIP_t) = @scip_ccall("SCIPgetStage", SCIP_STAGE, (Ptr{SCIP},), pointer(scip))
#SCIPgetStatus(scip::SCIP_t) = @scip_ccall("SCIPgetStatus", SCIP_STATUS, (Ptr{SCIP},), pointer(scip))
#SCIPisTransformed(scip::SCIP_t) = @scip_ccall("SCIPisTransformed", SCIP_Bool, (Ptr{SCIP},), pointer(scip))
#SCIPisExactSolve(scip::SCIP_t) = @scip_ccall("SCIPisExactSolve", SCIP_Bool, (Ptr{SCIP},), pointer(scip))
#SCIPisPresolveFinished(scip::SCIP_t) = @scip_ccall("SCIPisPresolveFinished", SCIP_Bool, (Ptr{SCIP},), pointer(scip))
#SCIPpressedCtrlC(scip::SCIP_t) = @scip_ccall("SCIPpressedCtrlC", SCIP_Bool, (Ptr{SCIP},), pointer(scip))
#SCIPisStopped(scip::SCIP_t) = @scip_ccall("SCIPisStopped", SCIP_Bool, (Ptr{SCIP},), pointer(scip))
#SCIPgetMessagehdlr(scip::SCIP_t) = @scip_ccall("SCIPgetMessagehdlr", Ptr{SCIP_MESSAGEHDLR}, (Ptr{SCIP},), pointer(scip))
#SCIPsetMessagehdlrLogfile(scip::SCIP_t, filename) = @scip_ccall("SCIPsetMessagehdlrLogfile", Void, (Ptr{SCIP}, String), pointer(scip), filename)
#SCIPsetMessagehdlrQuiet(scip::SCIP_t, quiet::SCIP_Bool) = @scip_ccall("SCIPsetMessagehdlrQuiet", Void, (Ptr{SCIP}, SCIP_Bool), pointer(scip), quiet)
#SCIPgetVerbLevel(scip::SCIP_t) = @scip_ccall("SCIPgetVerbLevel", SCIP_VERBLEVEL, (Ptr{SCIP},), pointer(scip))
#SCIPgetSubscipDepth(scip::SCIP_t) = @scip_ccall("SCIPgetSubscipDepth", Int, (Ptr{SCIP},), pointer(scip))
#SCIPisParamFixed(scip::SCIP_t, name) = @scip_ccall("SCIPisParamFixed", SCIP_Bool, (Ptr{SCIP}, String), pointer(scip), name)
#SCIPgetParam(scip::SCIP_t, name) = @scip_ccall("SCIPgetParam", Ptr{SCIP_PARAM}, (Ptr{SCIP}, String), pointer(scip), name)
#SCIPgetParams(scip::SCIP_t) = @scip_ccall("SCIPgetParams", Ptr{Ptr{SCIP_PARAM}}, (Ptr{SCIP},), pointer(scip))
#SCIPgetNParams(scip::SCIP_t) = @scip_ccall("SCIPgetNParams", Int, (Ptr{SCIP},), pointer(scip))
#SCIPfindReader(scip::SCIP_t, name) = @scip_ccall("SCIPfindReader", Ptr{SCIP_READER}, (Ptr{SCIP}, String), pointer(scip), name)
#SCIPgetReaders(scip::SCIP_t) = @scip_ccall("SCIPgetReaders", Ptr{Ptr{SCIP_READER}}, (Ptr{SCIP},), pointer(scip))
#SCIPgetNReaders(scip::SCIP_t) = @scip_ccall("SCIPgetNReaders", Int, (Ptr{SCIP},), pointer(scip))
#SCIPfindPricer(scip::SCIP_t, name) = @scip_ccall("SCIPfindPricer", Ptr{SCIP_PRICER}, (Ptr{SCIP}, String), pointer(scip), name)
#SCIPgetPricers(scip::SCIP_t) = @scip_ccall("SCIPgetPricers", Ptr{Ptr{SCIP_PRICER}}, (Ptr{SCIP},), pointer(scip))
#SCIPgetNPricers(scip::SCIP_t) = @scip_ccall("SCIPgetNPricers", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetNActivePricers(scip::SCIP_t) = @scip_ccall("SCIPgetNActivePricers", Int, (Ptr{SCIP},), pointer(scip))
#SCIPfindConshdlr(scip::SCIP_t, name) = @scip_ccall("SCIPfindConshdlr", Ptr{SCIP_CONSHDLR}, (Ptr{SCIP}, String), pointer(scip), name)
#SCIPgetConshdlrs(scip::SCIP_t) = @scip_ccall("SCIPgetConshdlrs", Ptr{Ptr{SCIP_CONSHDLR}}, (Ptr{SCIP},), pointer(scip))
#SCIPgetNConshdlrs(scip::SCIP_t) = @scip_ccall("SCIPgetNConshdlrs", Int, (Ptr{SCIP},), pointer(scip))
#SCIPfindConflicthdlr(scip::SCIP_t, name) = @scip_ccall("SCIPfindConflicthdlr", Ptr{SCIP_CONFLICTHDLR}, (Ptr{SCIP}, String), pointer(scip), name)
#SCIPgetConflicthdlrs(scip::SCIP_t) = @scip_ccall("SCIPgetConflicthdlrs", Ptr{Ptr{SCIP_CONFLICTHDLR}}, (Ptr{SCIP},), pointer(scip))
#SCIPgetNConflicthdlrs(scip::SCIP_t) = @scip_ccall("SCIPgetNConflicthdlrs", Int, (Ptr{SCIP},), pointer(scip))
#SCIPfindPresol(scip::SCIP_t, name) = @scip_ccall("SCIPfindPresol", Ptr{SCIP_PRESOL}, (Ptr{SCIP}, String), pointer(scip), name)
#SCIPgetPresols(scip::SCIP_t) = @scip_ccall("SCIPgetPresols", Ptr{Ptr{SCIP_PRESOL}}, (Ptr{SCIP},), pointer(scip))
#SCIPgetNPresols(scip::SCIP_t) = @scip_ccall("SCIPgetNPresols", Int, (Ptr{SCIP},), pointer(scip))
#SCIPfindRelax(scip::SCIP_t, name) = @scip_ccall("SCIPfindRelax", Ptr{SCIP_RELAX}, (Ptr{SCIP}, String), pointer(scip), name)
#SCIPgetRelaxs(scip::SCIP_t) = @scip_ccall("SCIPgetRelaxs", Ptr{Ptr{SCIP_RELAX}}, (Ptr{SCIP},), pointer(scip))
#SCIPgetNRelaxs(scip::SCIP_t) = @scip_ccall("SCIPgetNRelaxs", Int, (Ptr{SCIP},), pointer(scip))
#SCIPfindSepa(scip::SCIP_t, name) = @scip_ccall("SCIPfindSepa", Ptr{SCIP_SEPA}, (Ptr{SCIP}, String), pointer(scip), name)
#SCIPgetSepas(scip::SCIP_t) = @scip_ccall("SCIPgetSepas", Ptr{Ptr{SCIP_SEPA}}, (Ptr{SCIP},), pointer(scip))
#SCIPgetNSepas(scip::SCIP_t) = @scip_ccall("SCIPgetNSepas", Int, (Ptr{SCIP},), pointer(scip))
#SCIPfindProp(scip::SCIP_t, name) = @scip_ccall("SCIPfindProp", Ptr{SCIP_PROP}, (Ptr{SCIP}, String), pointer(scip), name)
#SCIPgetProps(scip::SCIP_t) = @scip_ccall("SCIPgetProps", Ptr{Ptr{SCIP_PROP}}, (Ptr{SCIP},), pointer(scip))
#SCIPgetNProps(scip::SCIP_t) = @scip_ccall("SCIPgetNProps", Int, (Ptr{SCIP},), pointer(scip))
#SCIPfindHeur(scip::SCIP_t, name) = @scip_ccall("SCIPfindHeur", Ptr{SCIP_HEUR}, (Ptr{SCIP}, String), pointer(scip), name)
#SCIPgetHeurs(scip::SCIP_t) = @scip_ccall("SCIPgetHeurs", Ptr{Ptr{SCIP_HEUR}}, (Ptr{SCIP},), pointer(scip))
#SCIPgetNHeurs(scip::SCIP_t) = @scip_ccall("SCIPgetNHeurs", Int, (Ptr{SCIP},), pointer(scip))
#SCIPfindEventhdlr(scip::SCIP_t, name) = @scip_ccall("SCIPfindEventhdlr", Ptr{SCIP_EVENTHDLR}, (Ptr{SCIP}, String), pointer(scip), name)
#SCIPgetEventhdlrs(scip::SCIP_t) = @scip_ccall("SCIPgetEventhdlrs", Ptr{Ptr{SCIP_EVENTHDLR}}, (Ptr{SCIP},), pointer(scip))
#SCIPgetNEventhdlrs(scip::SCIP_t) = @scip_ccall("SCIPgetNEventhdlrs", Int, (Ptr{SCIP},), pointer(scip))
#SCIPfindNodesel(scip::SCIP_t, name) = @scip_ccall("SCIPfindNodesel", Ptr{SCIP_NODESEL}, (Ptr{SCIP}, String), pointer(scip), name)
#SCIPgetNodesels(scip::SCIP_t) = @scip_ccall("SCIPgetNodesels", Ptr{Ptr{SCIP_NODESEL}}, (Ptr{SCIP},), pointer(scip))
#SCIPgetNNodesels(scip::SCIP_t) = @scip_ccall("SCIPgetNNodesels", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetNodesel(scip::SCIP_t) = @scip_ccall("SCIPgetNodesel", Ptr{SCIP_NODESEL}, (Ptr{SCIP},), pointer(scip))
#SCIPfindBranchrule(scip::SCIP_t, name) = @scip_ccall("SCIPfindBranchrule", Ptr{SCIP_BRANCHRULE}, (Ptr{SCIP}, String), pointer(scip), name)
#SCIPgetBranchrules(scip::SCIP_t) = @scip_ccall("SCIPgetBranchrules", Ptr{Ptr{SCIP_BRANCHRULE}}, (Ptr{SCIP},), pointer(scip))
#SCIPgetNBranchrules(scip::SCIP_t) = @scip_ccall("SCIPgetNBranchrules", Int, (Ptr{SCIP},), pointer(scip))
#SCIPfindDisp(scip::SCIP_t, name) = @scip_ccall("SCIPfindDisp", Ptr{SCIP_DISP}, (Ptr{SCIP}, String), pointer(scip), name)
#SCIPgetDisps(scip::SCIP_t) = @scip_ccall("SCIPgetDisps", Ptr{Ptr{SCIP_DISP}}, (Ptr{SCIP},), pointer(scip))
#SCIPgetNDisps(scip::SCIP_t) = @scip_ccall("SCIPgetNDisps", Int, (Ptr{SCIP},), pointer(scip))
#SCIPfindNlpi(scip::SCIP_t, name) = @scip_ccall("SCIPfindNlpi", Ptr{SCIP_NLPI}, (Ptr{SCIP}, String), pointer(scip), name)
#SCIPgetNlpis(scip::SCIP_t) = @scip_ccall("SCIPgetNlpis", Ptr{Ptr{SCIP_NLPI}}, (Ptr{SCIP},), pointer(scip))
#SCIPgetNNlpis(scip::SCIP_t) = @scip_ccall("SCIPgetNNlpis", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetNExternalCodes(scip::SCIP_t) = @scip_ccall("SCIPgetNExternalCodes", Int, (Ptr{SCIP},), pointer(scip))
#SCIPexistsDialog(scip::SCIP_t, dialog::SCIP_DIALOG_t) = @scip_ccall("SCIPexistsDialog", SCIP_Bool, (Ptr{SCIP}, Ptr{SCIP_DIALOG}), pointer(scip), pointer(dialog))
#SCIPgetRootDialog(scip::SCIP_t) = @scip_ccall("SCIPgetRootDialog", Ptr{SCIP_DIALOG}, (Ptr{SCIP},), pointer(scip))
#SCIPgetProbData(scip::SCIP_t) = @scip_ccall("SCIPgetProbData", Ptr{SCIP_PROBDATA}, (Ptr{SCIP},), pointer(scip))
#SCIPgetProbName(scip::SCIP_t) = @scip_ccall("SCIPgetProbName", String, (Ptr{SCIP},), pointer(scip))
#SCIPgetObjsense(scip::SCIP_t) = @scip_ccall("SCIPgetObjsense", SCIP_OBJSENSE, (Ptr{SCIP},), pointer(scip))
#SCIPgetOrigObjoffset(scip::SCIP_t) = @scip_ccall("SCIPgetOrigObjoffset", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPgetOrigObjscale(scip::SCIP_t) = @scip_ccall("SCIPgetOrigObjscale", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPgetTransObjoffset(scip::SCIP_t) = @scip_ccall("SCIPgetTransObjoffset", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPgetTransObjscale(scip::SCIP_t) = @scip_ccall("SCIPgetTransObjscale", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPgetObjlimit(scip::SCIP_t) = @scip_ccall("SCIPgetObjlimit", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPisObjIntegral(scip::SCIP_t) = @scip_ccall("SCIPisObjIntegral", SCIP_Bool, (Ptr{SCIP},), pointer(scip))
#SCIPgetObjNorm(scip::SCIP_t) = @scip_ccall("SCIPgetObjNorm", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPgetVars(scip::SCIP_t) = @scip_ccall("SCIPgetVars", Ptr{Ptr{SCIP_VAR}}, (Ptr{SCIP},), pointer(scip))
#SCIPgetNVars(scip::SCIP_t) = @scip_ccall("SCIPgetNVars", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetNBinVars(scip::SCIP_t) = @scip_ccall("SCIPgetNBinVars", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetNIntVars(scip::SCIP_t) = @scip_ccall("SCIPgetNIntVars", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetNImplVars(scip::SCIP_t) = @scip_ccall("SCIPgetNImplVars", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetNContVars(scip::SCIP_t) = @scip_ccall("SCIPgetNContVars", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetNObjVars(scip::SCIP_t) = @scip_ccall("SCIPgetNObjVars", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetFixedVars(scip::SCIP_t) = @scip_ccall("SCIPgetFixedVars", Ptr{Ptr{SCIP_VAR}}, (Ptr{SCIP},), pointer(scip))
#SCIPgetNFixedVars(scip::SCIP_t) = @scip_ccall("SCIPgetNFixedVars", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetOrigVars(scip::SCIP_t) = @scip_ccall("SCIPgetOrigVars", Ptr{Ptr{SCIP_VAR}}, (Ptr{SCIP},), pointer(scip))
#SCIPgetNOrigVars(scip::SCIP_t) = @scip_ccall("SCIPgetNOrigVars", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetNOrigBinVars(scip::SCIP_t) = @scip_ccall("SCIPgetNOrigBinVars", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetNOrigIntVars(scip::SCIP_t) = @scip_ccall("SCIPgetNOrigIntVars", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetNOrigImplVars(scip::SCIP_t) = @scip_ccall("SCIPgetNOrigImplVars", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetNOrigContVars(scip::SCIP_t) = @scip_ccall("SCIPgetNOrigContVars", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetNTotalVars(scip::SCIP_t) = @scip_ccall("SCIPgetNTotalVars", Int, (Ptr{SCIP},), pointer(scip))
#SCIPfindVar(scip::SCIP_t, name) = @scip_ccall("SCIPfindVar", Ptr{SCIP_VAR}, (Ptr{SCIP}, String), pointer(scip), name)
#SCIPallVarsInProb(scip::SCIP_t) = @scip_ccall("SCIPallVarsInProb", SCIP_Bool, (Ptr{SCIP},), pointer(scip))
#SCIPfindOrigCons(scip::SCIP_t, name) = @scip_ccall("SCIPfindOrigCons", Ptr{SCIP_CONS}, (Ptr{SCIP}, String), pointer(scip), name)
#SCIPfindCons(scip::SCIP_t, name) = @scip_ccall("SCIPfindCons", Ptr{SCIP_CONS}, (Ptr{SCIP}, String), pointer(scip), name)
#SCIPgetNUpgrConss(scip::SCIP_t) = @scip_ccall("SCIPgetNUpgrConss", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetNConss(scip::SCIP_t) = @scip_ccall("SCIPgetNConss", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetConss(scip::SCIP_t) = @scip_ccall("SCIPgetConss", Ptr{Ptr{SCIP_CONS}}, (Ptr{SCIP},), pointer(scip))
#SCIPgetNOrigConss(scip::SCIP_t) = @scip_ccall("SCIPgetNOrigConss", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetOrigConss(scip::SCIP_t) = @scip_ccall("SCIPgetOrigConss", Ptr{Ptr{SCIP_CONS}}, (Ptr{SCIP},), pointer(scip))
#SCIPgetNCheckConss(scip::SCIP_t) = @scip_ccall("SCIPgetNCheckConss", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetLocalOrigEstimate(scip::SCIP_t) = @scip_ccall("SCIPgetLocalOrigEstimate", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPgetLocalTransEstimate(scip::SCIP_t) = @scip_ccall("SCIPgetLocalTransEstimate", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPgetLocalDualbound(scip::SCIP_t) = @scip_ccall("SCIPgetLocalDualbound", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPgetLocalLowerbound(scip::SCIP_t) = @scip_ccall("SCIPgetLocalLowerbound", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPgetNodeDualbound(scip::SCIP_t, node::SCIP_NODE_t) = @scip_ccall("SCIPgetNodeDualbound", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_NODE}), pointer(scip), pointer(node))
#SCIPgetNodeLowerbound(scip::SCIP_t, node::SCIP_NODE_t) = @scip_ccall("SCIPgetNodeLowerbound", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_NODE}), pointer(scip), pointer(node))
#SCIPisInRestart(scip::SCIP_t) = @scip_ccall("SCIPisInRestart", SCIP_Bool, (Ptr{SCIP},), pointer(scip))
#SCIPgetVarRedcost(scip::SCIP_t, var::SCIP_VAR_t) = @scip_ccall("SCIPgetVarRedcost", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}), pointer(scip), pointer(var))
#SCIPgetVarImplRedcost(scip::SCIP_t, var::SCIP_VAR_t, varfixing::SCIP_Bool) = @scip_ccall("SCIPgetVarImplRedcost", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Bool), pointer(scip), pointer(var), varfixing)
#SCIPgetVarFarkasCoef(scip::SCIP_t, var::SCIP_VAR_t) = @scip_ccall("SCIPgetVarFarkasCoef", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}), pointer(scip), pointer(var))
#SCIPgetVarSol(scip::SCIP_t, var::SCIP_VAR_t) = @scip_ccall("SCIPgetVarSol", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}), pointer(scip), pointer(var))
#SCIPisRelaxSolValid(scip::SCIP_t) = @scip_ccall("SCIPisRelaxSolValid", SCIP_Bool, (Ptr{SCIP},), pointer(scip))
#SCIPgetRelaxSolVal(scip::SCIP_t, var::SCIP_VAR_t) = @scip_ccall("SCIPgetRelaxSolVal", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}), pointer(scip), pointer(var))
#SCIPgetRelaxSolObj(scip::SCIP_t) = @scip_ccall("SCIPgetRelaxSolObj", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPgetVarStrongbranchNode(scip::SCIP_t, var::SCIP_VAR_t) = @scip_ccall("SCIPgetVarStrongbranchNode", Int64, (Ptr{SCIP}, Ptr{SCIP_VAR}), pointer(scip), pointer(var))
#SCIPgetVarStrongbranchLPAge(scip::SCIP_t, var::SCIP_VAR_t) = @scip_ccall("SCIPgetVarStrongbranchLPAge", Int64, (Ptr{SCIP}, Ptr{SCIP_VAR}), pointer(scip), pointer(var))
#SCIPgetVarNStrongbranchs(scip::SCIP_t, var::SCIP_VAR_t) = @scip_ccall("SCIPgetVarNStrongbranchs", Int, (Ptr{SCIP}, Ptr{SCIP_VAR}), pointer(scip), pointer(var))
#SCIPadjustedVarLb(scip::SCIP_t, var::SCIP_VAR_t, lb::SCIP_Real) = @scip_ccall("SCIPadjustedVarLb", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), pointer(scip), pointer(var), lb)
#SCIPadjustedVarUb(scip::SCIP_t, var::SCIP_VAR_t, ub::SCIP_Real) = @scip_ccall("SCIPadjustedVarUb", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), pointer(scip), pointer(var), ub)
#SCIPcomputeVarLbGlobal(scip::SCIP_t, var::SCIP_VAR_t) = @scip_ccall("SCIPcomputeVarLbGlobal", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}), pointer(scip), pointer(var))
#SCIPcomputeVarUbGlobal(scip::SCIP_t, var::SCIP_VAR_t) = @scip_ccall("SCIPcomputeVarUbGlobal", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}), pointer(scip), pointer(var))
#SCIPcomputeVarLbLocal(scip::SCIP_t, var::SCIP_VAR_t) = @scip_ccall("SCIPcomputeVarLbLocal", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}), pointer(scip), pointer(var))
#SCIPcomputeVarUbLocal(scip::SCIP_t, var::SCIP_VAR_t) = @scip_ccall("SCIPcomputeVarUbLocal", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}), pointer(scip), pointer(var))
#SCIPgetNCliques(scip::SCIP_t) = @scip_ccall("SCIPgetNCliques", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetCliques(scip::SCIP_t) = @scip_ccall("SCIPgetCliques", Ptr{Ptr{SCIP_CLIQUE}}, (Ptr{SCIP},), pointer(scip))
#SCIPhaveVarsCommonClique(scip::SCIP_t, var1::SCIP_VAR_t, value1::SCIP_Bool, var2::SCIP_VAR_t, value2::SCIP_Bool, regardimplics::SCIP_Bool) = @scip_ccall("SCIPhaveVarsCommonClique", SCIP_Bool, (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Bool, Ptr{SCIP_VAR}, SCIP_Bool, SCIP_Bool), pointer(scip), pointer(var1), value1, pointer(var2), value2, regardimplics)
#SCIPdoNotAggr(scip::SCIP_t) = @scip_ccall("SCIPdoNotAggr", SCIP_Bool, (Ptr{SCIP},), pointer(scip))
#SCIPdoNotMultaggr(scip::SCIP_t) = @scip_ccall("SCIPdoNotMultaggr", SCIP_Bool, (Ptr{SCIP},), pointer(scip))
#SCIPdoNotMultaggrVar(scip::SCIP_t, var::SCIP_VAR_t) = @scip_ccall("SCIPdoNotMultaggrVar", SCIP_Bool, (Ptr{SCIP}, Ptr{SCIP_VAR}), pointer(scip), pointer(var))
#SCIPenableVarHistory(scip::SCIP_t) = @scip_ccall("SCIPenableVarHistory", Void, (Ptr{SCIP},), pointer(scip))
#SCIPdisableVarHistory(scip::SCIP_t) = @scip_ccall("SCIPdisableVarHistory", Void, (Ptr{SCIP},), pointer(scip))
#SCIPgetVarPseudocostVal(scip::SCIP_t, var::SCIP_VAR_t, solvaldelta::SCIP_Real) = @scip_ccall("SCIPgetVarPseudocostVal", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), pointer(scip), pointer(var), solvaldelta)
#SCIPgetVarPseudocostValCurrentRun(scip::SCIP_t, var::SCIP_VAR_t, solvaldelta::SCIP_Real) = @scip_ccall("SCIPgetVarPseudocostValCurrentRun", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), pointer(scip), pointer(var), solvaldelta)
#SCIPgetVarPseudocost(scip::SCIP_t, var::SCIP_VAR_t, dir::SCIP_BRANCHDIR) = @scip_ccall("SCIPgetVarPseudocost", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_BRANCHDIR), pointer(scip), pointer(var), dir)
#SCIPgetVarPseudocostCurrentRun(scip::SCIP_t, var::SCIP_VAR_t, dir::SCIP_BRANCHDIR) = @scip_ccall("SCIPgetVarPseudocostCurrentRun", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_BRANCHDIR), pointer(scip), pointer(var), dir)
#SCIPgetVarPseudocostCount(scip::SCIP_t, var::SCIP_VAR_t, dir::SCIP_BRANCHDIR) = @scip_ccall("SCIPgetVarPseudocostCount", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_BRANCHDIR), pointer(scip), pointer(var), dir)
#SCIPgetVarPseudocostCountCurrentRun(scip::SCIP_t, var::SCIP_VAR_t, dir::SCIP_BRANCHDIR) = @scip_ccall("SCIPgetVarPseudocostCountCurrentRun", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_BRANCHDIR), pointer(scip), pointer(var), dir)
#SCIPgetVarPseudocostScore(scip::SCIP_t, var::SCIP_VAR_t, solval::SCIP_Real) = @scip_ccall("SCIPgetVarPseudocostScore", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), pointer(scip), pointer(var), solval)
#SCIPgetVarPseudocostScoreCurrentRun(scip::SCIP_t, var::SCIP_VAR_t, solval::SCIP_Real) = @scip_ccall("SCIPgetVarPseudocostScoreCurrentRun", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), pointer(scip), pointer(var), solval)
#SCIPgetVarVSIDS(scip::SCIP_t, var::SCIP_VAR_t, dir::SCIP_BRANCHDIR) = @scip_ccall("SCIPgetVarVSIDS", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_BRANCHDIR), pointer(scip), pointer(var), dir)
#SCIPgetVarVSIDSCurrentRun(scip::SCIP_t, var::SCIP_VAR_t, dir::SCIP_BRANCHDIR) = @scip_ccall("SCIPgetVarVSIDSCurrentRun", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_BRANCHDIR), pointer(scip), pointer(var), dir)
#SCIPgetVarConflictScore(scip::SCIP_t, var::SCIP_VAR_t) = @scip_ccall("SCIPgetVarConflictScore", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}), pointer(scip), pointer(var))
#SCIPgetVarConflictScoreCurrentRun(scip::SCIP_t, var::SCIP_VAR_t) = @scip_ccall("SCIPgetVarConflictScoreCurrentRun", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}), pointer(scip), pointer(var))
#SCIPgetVarConflictlengthScore(scip::SCIP_t, var::SCIP_VAR_t) = @scip_ccall("SCIPgetVarConflictlengthScore", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}), pointer(scip), pointer(var))
#SCIPgetVarConflictlengthScoreCurrentRun(scip::SCIP_t, var::SCIP_VAR_t) = @scip_ccall("SCIPgetVarConflictlengthScoreCurrentRun", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}), pointer(scip), pointer(var))
#SCIPgetVarAvgConflictlength(scip::SCIP_t, var::SCIP_VAR_t, dir::SCIP_BRANCHDIR) = @scip_ccall("SCIPgetVarAvgConflictlength", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_BRANCHDIR), pointer(scip), pointer(var), dir)
#SCIPgetVarAvgConflictlengthCurrentRun(scip::SCIP_t, var::SCIP_VAR_t, dir::SCIP_BRANCHDIR) = @scip_ccall("SCIPgetVarAvgConflictlengthCurrentRun", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_BRANCHDIR), pointer(scip), pointer(var), dir)
#SCIPgetVarAvgInferences(scip::SCIP_t, var::SCIP_VAR_t, dir::SCIP_BRANCHDIR) = @scip_ccall("SCIPgetVarAvgInferences", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_BRANCHDIR), pointer(scip), pointer(var), dir)
#SCIPgetVarAvgInferencesCurrentRun(scip::SCIP_t, var::SCIP_VAR_t, dir::SCIP_BRANCHDIR) = @scip_ccall("SCIPgetVarAvgInferencesCurrentRun", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_BRANCHDIR), pointer(scip), pointer(var), dir)
#SCIPgetVarAvgInferenceScore(scip::SCIP_t, var::SCIP_VAR_t) = @scip_ccall("SCIPgetVarAvgInferenceScore", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}), pointer(scip), pointer(var))
#SCIPgetVarAvgInferenceScoreCurrentRun(scip::SCIP_t, var::SCIP_VAR_t) = @scip_ccall("SCIPgetVarAvgInferenceScoreCurrentRun", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}), pointer(scip), pointer(var))
#SCIPgetVarAvgCutoffs(scip::SCIP_t, var::SCIP_VAR_t, dir::SCIP_BRANCHDIR) = @scip_ccall("SCIPgetVarAvgCutoffs", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_BRANCHDIR), pointer(scip), pointer(var), dir)
#SCIPgetVarAvgCutoffsCurrentRun(scip::SCIP_t, var::SCIP_VAR_t, dir::SCIP_BRANCHDIR) = @scip_ccall("SCIPgetVarAvgCutoffsCurrentRun", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_BRANCHDIR), pointer(scip), pointer(var), dir)
#SCIPgetVarAvgCutoffScore(scip::SCIP_t, var::SCIP_VAR_t) = @scip_ccall("SCIPgetVarAvgCutoffScore", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}), pointer(scip), pointer(var))
#SCIPgetVarAvgCutoffScoreCurrentRun(scip::SCIP_t, var::SCIP_VAR_t) = @scip_ccall("SCIPgetVarAvgCutoffScoreCurrentRun", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}), pointer(scip), pointer(var))
#SCIPgetVarAvgInferenceCutoffScore(scip::SCIP_t, var::SCIP_VAR_t, cutoffweight::SCIP_Real) = @scip_ccall("SCIPgetVarAvgInferenceCutoffScore", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), pointer(scip), pointer(var), cutoffweight)
#SCIPgetVarAvgInferenceCutoffScoreCurrentRun(scip::SCIP_t, var::SCIP_VAR_t, cutoffweight::SCIP_Real) = @scip_ccall("SCIPgetVarAvgInferenceCutoffScoreCurrentRun", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), pointer(scip), pointer(var), cutoffweight)
#SCIPisConflictAnalysisApplicable(scip::SCIP_t) = @scip_ccall("SCIPisConflictAnalysisApplicable", SCIP_Bool, (Ptr{SCIP},), pointer(scip))
#SCIPgetConflictVarLb(scip::SCIP_t, var::SCIP_VAR_t) = @scip_ccall("SCIPgetConflictVarLb", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}), pointer(scip), pointer(var))
#SCIPgetConflictVarUb(scip::SCIP_t, var::SCIP_VAR_t) = @scip_ccall("SCIPgetConflictVarUb", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}), pointer(scip), pointer(var))
#SCIPhasCurrentNodeLP(scip::SCIP_t) = @scip_ccall("SCIPhasCurrentNodeLP", SCIP_Bool, (Ptr{SCIP},), pointer(scip))
#SCIPisLPConstructed(scip::SCIP_t) = @scip_ccall("SCIPisLPConstructed", SCIP_Bool, (Ptr{SCIP},), pointer(scip))
#SCIPgetLPSolstat(scip::SCIP_t) = @scip_ccall("SCIPgetLPSolstat", SCIP_LPSOLSTAT, (Ptr{SCIP},), pointer(scip))
#SCIPisLPRelax(scip::SCIP_t) = @scip_ccall("SCIPisLPRelax", SCIP_Bool, (Ptr{SCIP},), pointer(scip))
#SCIPgetLPObjval(scip::SCIP_t) = @scip_ccall("SCIPgetLPObjval", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPgetLPColumnObjval(scip::SCIP_t) = @scip_ccall("SCIPgetLPColumnObjval", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPgetLPLooseObjval(scip::SCIP_t) = @scip_ccall("SCIPgetLPLooseObjval", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPgetGlobalPseudoObjval(scip::SCIP_t) = @scip_ccall("SCIPgetGlobalPseudoObjval", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPgetPseudoObjval(scip::SCIP_t) = @scip_ccall("SCIPgetPseudoObjval", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPisRootLPRelax(scip::SCIP_t) = @scip_ccall("SCIPisRootLPRelax", SCIP_Bool, (Ptr{SCIP},), pointer(scip))
#SCIPgetLPRootObjval(scip::SCIP_t) = @scip_ccall("SCIPgetLPRootObjval", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPgetLPRootColumnObjval(scip::SCIP_t) = @scip_ccall("SCIPgetLPRootColumnObjval", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPgetLPRootLooseObjval(scip::SCIP_t) = @scip_ccall("SCIPgetLPRootLooseObjval", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPgetLPCols(scip::SCIP_t) = @scip_ccall("SCIPgetLPCols", Ptr{Ptr{SCIP_COL}}, (Ptr{SCIP},), pointer(scip))
#SCIPgetNLPCols(scip::SCIP_t) = @scip_ccall("SCIPgetNLPCols", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetLPRows(scip::SCIP_t) = @scip_ccall("SCIPgetLPRows", Ptr{Ptr{SCIP_ROW}}, (Ptr{SCIP},), pointer(scip))
#SCIPgetNLPRows(scip::SCIP_t) = @scip_ccall("SCIPgetNLPRows", Int, (Ptr{SCIP},), pointer(scip))
#SCIPallColsInLP(scip::SCIP_t) = @scip_ccall("SCIPallColsInLP", SCIP_Bool, (Ptr{SCIP},), pointer(scip))
#SCIPisLPSolBasic(scip::SCIP_t) = @scip_ccall("SCIPisLPSolBasic", SCIP_Bool, (Ptr{SCIP},), pointer(scip))
#SCIPgetColRedcost(scip::SCIP_t, col::SCIP_COL_t) = @scip_ccall("SCIPgetColRedcost", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_COL}), pointer(scip), pointer(col))
#SCIPgetColFarkasCoef(scip::SCIP_t, col::SCIP_COL_t) = @scip_ccall("SCIPgetColFarkasCoef", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_COL}), pointer(scip), pointer(col))
#SCIPmarkColNotRemovableLocal(scip::SCIP_t, col::SCIP_COL_t) = @scip_ccall("SCIPmarkColNotRemovableLocal", Void, (Ptr{SCIP}, Ptr{SCIP_COL}), pointer(scip), pointer(col))
#SCIPmarkRowNotRemovableLocal(scip::SCIP_t, row::SCIP_ROW_t) = @scip_ccall("SCIPmarkRowNotRemovableLocal", Void, (Ptr{SCIP}, Ptr{SCIP_ROW}), pointer(scip), pointer(row))
#SCIPgetRowMinCoef(scip::SCIP_t, row::SCIP_ROW_t) = @scip_ccall("SCIPgetRowMinCoef", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_ROW}), pointer(scip), pointer(row))
#SCIPgetRowMaxCoef(scip::SCIP_t, row::SCIP_ROW_t) = @scip_ccall("SCIPgetRowMaxCoef", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_ROW}), pointer(scip), pointer(row))
#SCIPgetRowMinActivity(scip::SCIP_t, row::SCIP_ROW_t) = @scip_ccall("SCIPgetRowMinActivity", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_ROW}), pointer(scip), pointer(row))
#SCIPgetRowMaxActivity(scip::SCIP_t, row::SCIP_ROW_t) = @scip_ccall("SCIPgetRowMaxActivity", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_ROW}), pointer(scip), pointer(row))
#SCIPgetRowLPActivity(scip::SCIP_t, row::SCIP_ROW_t) = @scip_ccall("SCIPgetRowLPActivity", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_ROW}), pointer(scip), pointer(row))
#SCIPgetRowLPFeasibility(scip::SCIP_t, row::SCIP_ROW_t) = @scip_ccall("SCIPgetRowLPFeasibility", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_ROW}), pointer(scip), pointer(row))
#SCIPgetRowPseudoActivity(scip::SCIP_t, row::SCIP_ROW_t) = @scip_ccall("SCIPgetRowPseudoActivity", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_ROW}), pointer(scip), pointer(row))
#SCIPgetRowPseudoFeasibility(scip::SCIP_t, row::SCIP_ROW_t) = @scip_ccall("SCIPgetRowPseudoFeasibility", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_ROW}), pointer(scip), pointer(row))
#SCIPgetRowActivity(scip::SCIP_t, row::SCIP_ROW_t) = @scip_ccall("SCIPgetRowActivity", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_ROW}), pointer(scip), pointer(row))
#SCIPgetRowFeasibility(scip::SCIP_t, row::SCIP_ROW_t) = @scip_ccall("SCIPgetRowFeasibility", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_ROW}), pointer(scip), pointer(row))
#SCIPgetRowSolActivity(scip::SCIP_t, row::SCIP_ROW_t, sol::SCIP_SOL_t) = @scip_ccall("SCIPgetRowSolActivity", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_ROW}, Ptr{SCIP_SOL}), pointer(scip), pointer(row), pointer(sol))
#SCIPgetRowSolFeasibility(scip::SCIP_t, row::SCIP_ROW_t, sol::SCIP_SOL_t) = @scip_ccall("SCIPgetRowSolFeasibility", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_ROW}, Ptr{SCIP_SOL}), pointer(scip), pointer(row), pointer(sol))
#SCIPisNLPEnabled(scip::SCIP_t) = @scip_ccall("SCIPisNLPEnabled", SCIP_Bool, (Ptr{SCIP},), pointer(scip))
#SCIPenableNLP(scip::SCIP_t) = @scip_ccall("SCIPenableNLP", Void, (Ptr{SCIP},), pointer(scip))
#SCIPisNLPConstructed(scip::SCIP_t) = @scip_ccall("SCIPisNLPConstructed", SCIP_Bool, (Ptr{SCIP},), pointer(scip))
#SCIPhasNLPContinuousNonlinearity(scip::SCIP_t) = @scip_ccall("SCIPhasNLPContinuousNonlinearity", SCIP_Bool, (Ptr{SCIP},), pointer(scip))
#SCIPgetNLPVars(scip::SCIP_t) = @scip_ccall("SCIPgetNLPVars", Ptr{Ptr{SCIP_VAR}}, (Ptr{SCIP},), pointer(scip))
#SCIPgetNNLPVars(scip::SCIP_t) = @scip_ccall("SCIPgetNNLPVars", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetNLPVarsLbDualsol(scip::SCIP_t) = @scip_ccall("SCIPgetNLPVarsLbDualsol", Ptr{SCIP_Real}, (Ptr{SCIP},), pointer(scip))
#SCIPgetNLPVarsUbDualsol(scip::SCIP_t) = @scip_ccall("SCIPgetNLPVarsUbDualsol", Ptr{SCIP_Real}, (Ptr{SCIP},), pointer(scip))
#SCIPgetNLPNlRows(scip::SCIP_t) = @scip_ccall("SCIPgetNLPNlRows", Ptr{Ptr{SCIP_NLROW}}, (Ptr{SCIP},), pointer(scip))
#SCIPgetNNLPNlRows(scip::SCIP_t) = @scip_ccall("SCIPgetNNLPNlRows", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetNLPSolstat(scip::SCIP_t) = @scip_ccall("SCIPgetNLPSolstat", SCIP_NLPSOLSTAT, (Ptr{SCIP},), pointer(scip))
#SCIPgetNLPTermstat(scip::SCIP_t) = @scip_ccall("SCIPgetNLPTermstat", SCIP_NLPTERMSTAT, (Ptr{SCIP},), pointer(scip))
#SCIPgetNLPObjval(scip::SCIP_t) = @scip_ccall("SCIPgetNLPObjval", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPhasNLPSolution(scip::SCIP_t) = @scip_ccall("SCIPhasNLPSolution", SCIP_Bool, (Ptr{SCIP},), pointer(scip))
#SCIPgetCutEfficacy(scip::SCIP_t, sol::SCIP_SOL_t, cut::SCIP_ROW_t) = @scip_ccall("SCIPgetCutEfficacy", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_SOL}, Ptr{SCIP_ROW}), pointer(scip), pointer(sol), pointer(cut))
#SCIPisCutEfficacious(scip::SCIP_t, sol::SCIP_SOL_t, cut::SCIP_ROW_t) = @scip_ccall("SCIPisCutEfficacious", SCIP_Bool, (Ptr{SCIP}, Ptr{SCIP_SOL}, Ptr{SCIP_ROW}), pointer(scip), pointer(sol), pointer(cut))
#SCIPisEfficacious(scip::SCIP_t, efficacy::SCIP_Real) = @scip_ccall("SCIPisEfficacious", SCIP_Bool, (Ptr{SCIP}, SCIP_Real), pointer(scip), efficacy)
#SCIPgetVectorEfficacyNorm(scip::SCIP_t, vals::SCIP_Real_t, nvals) = @scip_ccall("SCIPgetVectorEfficacyNorm", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_Real}, Int), pointer(scip), pointer(vals), nvals)
#SCIPisCutApplicable(scip::SCIP_t, cut::SCIP_ROW_t) = @scip_ccall("SCIPisCutApplicable", SCIP_Bool, (Ptr{SCIP}, Ptr{SCIP_ROW}), pointer(scip), pointer(cut))
#SCIPgetPoolCuts(scip::SCIP_t) = @scip_ccall("SCIPgetPoolCuts", Ptr{Ptr{SCIP_CUT}}, (Ptr{SCIP},), pointer(scip))
#SCIPgetNPoolCuts(scip::SCIP_t) = @scip_ccall("SCIPgetNPoolCuts", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetGlobalCutpool(scip::SCIP_t) = @scip_ccall("SCIPgetGlobalCutpool", Ptr{SCIP_CUTPOOL}, (Ptr{SCIP},), pointer(scip))
#SCIPgetDelayedPoolCuts(scip::SCIP_t) = @scip_ccall("SCIPgetDelayedPoolCuts", Ptr{Ptr{SCIP_CUT}}, (Ptr{SCIP},), pointer(scip))
#SCIPgetNDelayedPoolCuts(scip::SCIP_t) = @scip_ccall("SCIPgetNDelayedPoolCuts", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetDelayedGlobalCutpool(scip::SCIP_t) = @scip_ccall("SCIPgetDelayedGlobalCutpool", Ptr{SCIP_CUTPOOL}, (Ptr{SCIP},), pointer(scip))
#SCIPgetCuts(scip::SCIP_t) = @scip_ccall("SCIPgetCuts", Ptr{Ptr{SCIP_ROW}}, (Ptr{SCIP},), pointer(scip))
#SCIPgetNCuts(scip::SCIP_t) = @scip_ccall("SCIPgetNCuts", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetRelaxFeastolFactor(scip::SCIP_t) = @scip_ccall("SCIPgetRelaxFeastolFactor", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPgetVarObjDive(scip::SCIP_t, var::SCIP_VAR_t) = @scip_ccall("SCIPgetVarObjDive", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}), pointer(scip), pointer(var))
#SCIPgetVarLbDive(scip::SCIP_t, var::SCIP_VAR_t) = @scip_ccall("SCIPgetVarLbDive", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}), pointer(scip), pointer(var))
#SCIPgetVarUbDive(scip::SCIP_t, var::SCIP_VAR_t) = @scip_ccall("SCIPgetVarUbDive", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}), pointer(scip), pointer(var))
#SCIPgetLastDivenode(scip::SCIP_t) = @scip_ccall("SCIPgetLastDivenode", Int64, (Ptr{SCIP},), pointer(scip))
#SCIPinDive(scip::SCIP_t) = @scip_ccall("SCIPinDive", SCIP_Bool, (Ptr{SCIP},), pointer(scip))
#SCIPinProbing(scip::SCIP_t) = @scip_ccall("SCIPinProbing", SCIP_Bool, (Ptr{SCIP},), pointer(scip))
#SCIPgetProbingDepth(scip::SCIP_t) = @scip_ccall("SCIPgetProbingDepth", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetNLPBranchCands(scip::SCIP_t) = @scip_ccall("SCIPgetNLPBranchCands", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetNPrioLPBranchCands(scip::SCIP_t) = @scip_ccall("SCIPgetNPrioLPBranchCands", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetNExternBranchCands(scip::SCIP_t) = @scip_ccall("SCIPgetNExternBranchCands", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetNPrioExternBranchCands(scip::SCIP_t) = @scip_ccall("SCIPgetNPrioExternBranchCands", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetNPrioExternBranchBins(scip::SCIP_t) = @scip_ccall("SCIPgetNPrioExternBranchBins", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetNPrioExternBranchInts(scip::SCIP_t) = @scip_ccall("SCIPgetNPrioExternBranchInts", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetNPrioExternBranchImpls(scip::SCIP_t) = @scip_ccall("SCIPgetNPrioExternBranchImpls", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetNPrioExternBranchConts(scip::SCIP_t) = @scip_ccall("SCIPgetNPrioExternBranchConts", Int, (Ptr{SCIP},), pointer(scip))
#SCIPclearExternBranchCands(scip::SCIP_t) = @scip_ccall("SCIPclearExternBranchCands", Void, (Ptr{SCIP},), pointer(scip))
#SCIPcontainsExternBranchCand(scip::SCIP_t, var::SCIP_VAR_t) = @scip_ccall("SCIPcontainsExternBranchCand", SCIP_Bool, (Ptr{SCIP}, Ptr{SCIP_VAR}), pointer(scip), pointer(var))
#SCIPgetNPseudoBranchCands(scip::SCIP_t) = @scip_ccall("SCIPgetNPseudoBranchCands", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetNPrioPseudoBranchCands(scip::SCIP_t) = @scip_ccall("SCIPgetNPrioPseudoBranchCands", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetNPrioPseudoBranchBins(scip::SCIP_t) = @scip_ccall("SCIPgetNPrioPseudoBranchBins", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetNPrioPseudoBranchInts(scip::SCIP_t) = @scip_ccall("SCIPgetNPrioPseudoBranchInts", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetNPrioPseudoBranchImpls(scip::SCIP_t) = @scip_ccall("SCIPgetNPrioPseudoBranchImpls", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetBranchScore(scip::SCIP_t, var::SCIP_VAR_t, downgain::SCIP_Real, upgain::SCIP_Real) = @scip_ccall("SCIPgetBranchScore", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real, SCIP_Real), pointer(scip), pointer(var), downgain, upgain)
#SCIPgetBranchScoreMultiple(scip::SCIP_t, var::SCIP_VAR_t, nchildren, gains::SCIP_Real_t) = @scip_ccall("SCIPgetBranchScoreMultiple", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}, Int, Ptr{SCIP_Real}), pointer(scip), pointer(var), nchildren, pointer(gains))
#SCIPgetBranchingPoint(scip::SCIP_t, var::SCIP_VAR_t, suggestion::SCIP_Real) = @scip_ccall("SCIPgetBranchingPoint", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), pointer(scip), pointer(var), suggestion)
#SCIPcalcNodeselPriority(scip::SCIP_t, var::SCIP_VAR_t, branchdir::SCIP_BRANCHDIR, targetvalue::SCIP_Real) = @scip_ccall("SCIPcalcNodeselPriority", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_BRANCHDIR, SCIP_Real), pointer(scip), pointer(var), branchdir, targetvalue)
#SCIPcalcChildEstimate(scip::SCIP_t, var::SCIP_VAR_t, targetvalue::SCIP_Real) = @scip_ccall("SCIPcalcChildEstimate", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), pointer(scip), pointer(var), targetvalue)
#SCIPgetSolVal(scip::SCIP_t, sol::SCIP_SOL_t, var::SCIP_VAR_t) = @scip_ccall("SCIPgetSolVal", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_SOL}, Ptr{SCIP_VAR}), pointer(scip), pointer(sol), pointer(var))
#SCIPgetSolOrigObj(scip::SCIP_t, sol::SCIP_SOL_t) = @scip_ccall("SCIPgetSolOrigObj", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_SOL}), pointer(scip), pointer(sol))
#SCIPgetSolTransObj(scip::SCIP_t, sol::SCIP_SOL_t) = @scip_ccall("SCIPgetSolTransObj", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_SOL}), pointer(scip), pointer(sol))
#SCIPtransformObj(scip::SCIP_t, obj::SCIP_Real) = @scip_ccall("SCIPtransformObj", SCIP_Real, (Ptr{SCIP}, SCIP_Real), pointer(scip), obj)
#SCIPretransformObj(scip::SCIP_t, obj::SCIP_Real) = @scip_ccall("SCIPretransformObj", SCIP_Real, (Ptr{SCIP}, SCIP_Real), pointer(scip), obj)
#SCIPgetSolTime(scip::SCIP_t, sol::SCIP_SOL_t) = @scip_ccall("SCIPgetSolTime", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_SOL}), pointer(scip), pointer(sol))
#SCIPgetSolRunnum(scip::SCIP_t, sol::SCIP_SOL_t) = @scip_ccall("SCIPgetSolRunnum", Int, (Ptr{SCIP}, Ptr{SCIP_SOL}), pointer(scip), pointer(sol))
#SCIPgetSolNodenum(scip::SCIP_t, sol::SCIP_SOL_t) = @scip_ccall("SCIPgetSolNodenum", Int64, (Ptr{SCIP}, Ptr{SCIP_SOL}), pointer(scip), pointer(sol))
#SCIPgetSolHeur(scip::SCIP_t, sol::SCIP_SOL_t) = @scip_ccall("SCIPgetSolHeur", Ptr{SCIP_HEUR}, (Ptr{SCIP}, Ptr{SCIP_SOL}), pointer(scip), pointer(sol))
#SCIPareSolsEqual(scip::SCIP_t, sol1::SCIP_SOL_t, sol2::SCIP_SOL_t) = @scip_ccall("SCIPareSolsEqual", SCIP_Bool, (Ptr{SCIP}, Ptr{SCIP_SOL}, Ptr{SCIP_SOL}), pointer(scip), pointer(sol1), pointer(sol2))
#SCIPgetNSols(scip::SCIP_t) = @scip_ccall("SCIPgetNSols", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetSols(scip::SCIP_t) = @scip_ccall("SCIPgetSols", Ptr{Ptr{SCIP_SOL}}, (Ptr{SCIP},), pointer(scip))
#SCIPgetBestSol(scip::SCIP_t) = @scip_ccall("SCIPgetBestSol", Ptr{SCIP_SOL}, (Ptr{SCIP},), pointer(scip))
#SCIPhasPrimalRay(scip::SCIP_t) = @scip_ccall("SCIPhasPrimalRay", SCIP_Bool, (Ptr{SCIP},), pointer(scip))
#SCIPgetPrimalRayVal(scip::SCIP_t, var::SCIP_VAR_t) = @scip_ccall("SCIPgetPrimalRayVal", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_VAR}), pointer(scip), pointer(var))
#SCIPgetCurrentNode(scip::SCIP_t) = @scip_ccall("SCIPgetCurrentNode", Ptr{SCIP_NODE}, (Ptr{SCIP},), pointer(scip))
#SCIPgetRootNode(scip::SCIP_t) = @scip_ccall("SCIPgetRootNode", Ptr{SCIP_NODE}, (Ptr{SCIP},), pointer(scip))
#SCIPinRepropagation(scip::SCIP_t) = @scip_ccall("SCIPinRepropagation", SCIP_Bool, (Ptr{SCIP},), pointer(scip))
#SCIPgetNChildren(scip::SCIP_t) = @scip_ccall("SCIPgetNChildren", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetNSiblings(scip::SCIP_t) = @scip_ccall("SCIPgetNSiblings", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetNLeaves(scip::SCIP_t) = @scip_ccall("SCIPgetNLeaves", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetPrioChild(scip::SCIP_t) = @scip_ccall("SCIPgetPrioChild", Ptr{SCIP_NODE}, (Ptr{SCIP},), pointer(scip))
#SCIPgetPrioSibling(scip::SCIP_t) = @scip_ccall("SCIPgetPrioSibling", Ptr{SCIP_NODE}, (Ptr{SCIP},), pointer(scip))
#SCIPgetBestChild(scip::SCIP_t) = @scip_ccall("SCIPgetBestChild", Ptr{SCIP_NODE}, (Ptr{SCIP},), pointer(scip))
#SCIPgetBestSibling(scip::SCIP_t) = @scip_ccall("SCIPgetBestSibling", Ptr{SCIP_NODE}, (Ptr{SCIP},), pointer(scip))
#SCIPgetBestLeaf(scip::SCIP_t) = @scip_ccall("SCIPgetBestLeaf", Ptr{SCIP_NODE}, (Ptr{SCIP},), pointer(scip))
#SCIPgetBestNode(scip::SCIP_t) = @scip_ccall("SCIPgetBestNode", Ptr{SCIP_NODE}, (Ptr{SCIP},), pointer(scip))
#SCIPgetBestboundNode(scip::SCIP_t) = @scip_ccall("SCIPgetBestboundNode", Ptr{SCIP_NODE}, (Ptr{SCIP},), pointer(scip))
#SCIPgetCutoffdepth(scip::SCIP_t) = @scip_ccall("SCIPgetCutoffdepth", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetRepropdepth(scip::SCIP_t) = @scip_ccall("SCIPgetRepropdepth", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetNRuns(scip::SCIP_t) = @scip_ccall("SCIPgetNRuns", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetNNodes(scip::SCIP_t) = @scip_ccall("SCIPgetNNodes", Int64, (Ptr{SCIP},), pointer(scip))
#SCIPgetNTotalNodes(scip::SCIP_t) = @scip_ccall("SCIPgetNTotalNodes", Int64, (Ptr{SCIP},), pointer(scip))
#SCIPgetNNodesLeft(scip::SCIP_t) = @scip_ccall("SCIPgetNNodesLeft", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetNLPs(scip::SCIP_t) = @scip_ccall("SCIPgetNLPs", Int64, (Ptr{SCIP},), pointer(scip))
#SCIPgetNLPIterations(scip::SCIP_t) = @scip_ccall("SCIPgetNLPIterations", Int64, (Ptr{SCIP},), pointer(scip))
#SCIPgetNRootLPIterations(scip::SCIP_t) = @scip_ccall("SCIPgetNRootLPIterations", Int64, (Ptr{SCIP},), pointer(scip))
#SCIPgetNRootFirstLPIterations(scip::SCIP_t) = @scip_ccall("SCIPgetNRootFirstLPIterations", Int64, (Ptr{SCIP},), pointer(scip))
#SCIPgetNPrimalLPs(scip::SCIP_t) = @scip_ccall("SCIPgetNPrimalLPs", Int64, (Ptr{SCIP},), pointer(scip))
#SCIPgetNPrimalLPIterations(scip::SCIP_t) = @scip_ccall("SCIPgetNPrimalLPIterations", Int64, (Ptr{SCIP},), pointer(scip))
#SCIPgetNDualLPs(scip::SCIP_t) = @scip_ccall("SCIPgetNDualLPs", Int64, (Ptr{SCIP},), pointer(scip))
#SCIPgetNDualLPIterations(scip::SCIP_t) = @scip_ccall("SCIPgetNDualLPIterations", Int64, (Ptr{SCIP},), pointer(scip))
#SCIPgetNBarrierLPs(scip::SCIP_t) = @scip_ccall("SCIPgetNBarrierLPs", Int64, (Ptr{SCIP},), pointer(scip))
#SCIPgetNBarrierLPIterations(scip::SCIP_t) = @scip_ccall("SCIPgetNBarrierLPIterations", Int64, (Ptr{SCIP},), pointer(scip))
#SCIPgetNResolveLPs(scip::SCIP_t) = @scip_ccall("SCIPgetNResolveLPs", Int64, (Ptr{SCIP},), pointer(scip))
#SCIPgetNResolveLPIterations(scip::SCIP_t) = @scip_ccall("SCIPgetNResolveLPIterations", Int64, (Ptr{SCIP},), pointer(scip))
#SCIPgetNPrimalResolveLPs(scip::SCIP_t) = @scip_ccall("SCIPgetNPrimalResolveLPs", Int64, (Ptr{SCIP},), pointer(scip))
#SCIPgetNPrimalResolveLPIterations(scip::SCIP_t) = @scip_ccall("SCIPgetNPrimalResolveLPIterations", Int64, (Ptr{SCIP},), pointer(scip))
#SCIPgetNDualResolveLPs(scip::SCIP_t) = @scip_ccall("SCIPgetNDualResolveLPs", Int64, (Ptr{SCIP},), pointer(scip))
#SCIPgetNDualResolveLPIterations(scip::SCIP_t) = @scip_ccall("SCIPgetNDualResolveLPIterations", Int64, (Ptr{SCIP},), pointer(scip))
#SCIPgetNNodeLPs(scip::SCIP_t) = @scip_ccall("SCIPgetNNodeLPs", Int64, (Ptr{SCIP},), pointer(scip))
#SCIPgetNNodeLPIterations(scip::SCIP_t) = @scip_ccall("SCIPgetNNodeLPIterations", Int64, (Ptr{SCIP},), pointer(scip))
#SCIPgetNNodeInitLPs(scip::SCIP_t) = @scip_ccall("SCIPgetNNodeInitLPs", Int64, (Ptr{SCIP},), pointer(scip))
#SCIPgetNNodeInitLPIterations(scip::SCIP_t) = @scip_ccall("SCIPgetNNodeInitLPIterations", Int64, (Ptr{SCIP},), pointer(scip))
#SCIPgetNDivingLPs(scip::SCIP_t) = @scip_ccall("SCIPgetNDivingLPs", Int64, (Ptr{SCIP},), pointer(scip))
#SCIPgetNDivingLPIterations(scip::SCIP_t) = @scip_ccall("SCIPgetNDivingLPIterations", Int64, (Ptr{SCIP},), pointer(scip))
#SCIPgetNStrongbranchs(scip::SCIP_t) = @scip_ccall("SCIPgetNStrongbranchs", Int64, (Ptr{SCIP},), pointer(scip))
#SCIPgetNStrongbranchLPIterations(scip::SCIP_t) = @scip_ccall("SCIPgetNStrongbranchLPIterations", Int64, (Ptr{SCIP},), pointer(scip))
#SCIPgetNRootStrongbranchs(scip::SCIP_t) = @scip_ccall("SCIPgetNRootStrongbranchs", Int64, (Ptr{SCIP},), pointer(scip))
#SCIPgetNRootStrongbranchLPIterations(scip::SCIP_t) = @scip_ccall("SCIPgetNRootStrongbranchLPIterations", Int64, (Ptr{SCIP},), pointer(scip))
#SCIPgetNPriceRounds(scip::SCIP_t) = @scip_ccall("SCIPgetNPriceRounds", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetNPricevars(scip::SCIP_t) = @scip_ccall("SCIPgetNPricevars", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetNPricevarsFound(scip::SCIP_t) = @scip_ccall("SCIPgetNPricevarsFound", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetNPricevarsApplied(scip::SCIP_t) = @scip_ccall("SCIPgetNPricevarsApplied", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetNSepaRounds(scip::SCIP_t) = @scip_ccall("SCIPgetNSepaRounds", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetNCutsFound(scip::SCIP_t) = @scip_ccall("SCIPgetNCutsFound", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetNCutsFoundRound(scip::SCIP_t) = @scip_ccall("SCIPgetNCutsFoundRound", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetNCutsApplied(scip::SCIP_t) = @scip_ccall("SCIPgetNCutsApplied", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetNConflictConssFound(scip::SCIP_t) = @scip_ccall("SCIPgetNConflictConssFound", Int64, (Ptr{SCIP},), pointer(scip))
#SCIPgetNConflictConssFoundNode(scip::SCIP_t) = @scip_ccall("SCIPgetNConflictConssFoundNode", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetNConflictConssApplied(scip::SCIP_t) = @scip_ccall("SCIPgetNConflictConssApplied", Int64, (Ptr{SCIP},), pointer(scip))
#SCIPgetDepth(scip::SCIP_t) = @scip_ccall("SCIPgetDepth", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetFocusDepth(scip::SCIP_t) = @scip_ccall("SCIPgetFocusDepth", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetMaxDepth(scip::SCIP_t) = @scip_ccall("SCIPgetMaxDepth", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetMaxTotalDepth(scip::SCIP_t) = @scip_ccall("SCIPgetMaxTotalDepth", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetNBacktracks(scip::SCIP_t) = @scip_ccall("SCIPgetNBacktracks", Int64, (Ptr{SCIP},), pointer(scip))
#SCIPgetPlungeDepth(scip::SCIP_t) = @scip_ccall("SCIPgetPlungeDepth", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetNActiveConss(scip::SCIP_t) = @scip_ccall("SCIPgetNActiveConss", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetNEnabledConss(scip::SCIP_t) = @scip_ccall("SCIPgetNEnabledConss", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetAvgDualbound(scip::SCIP_t) = @scip_ccall("SCIPgetAvgDualbound", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPgetAvgLowerbound(scip::SCIP_t) = @scip_ccall("SCIPgetAvgLowerbound", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPgetDualbound(scip::SCIP_t) = @scip_ccall("SCIPgetDualbound", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPgetLowerbound(scip::SCIP_t) = @scip_ccall("SCIPgetLowerbound", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPgetDualboundRoot(scip::SCIP_t) = @scip_ccall("SCIPgetDualboundRoot", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPgetLowerboundRoot(scip::SCIP_t) = @scip_ccall("SCIPgetLowerboundRoot", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPgetFirstLPDualboundRoot(scip::SCIP_t) = @scip_ccall("SCIPgetFirstLPDualboundRoot", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPgetFirstLPLowerboundRoot(scip::SCIP_t) = @scip_ccall("SCIPgetFirstLPLowerboundRoot", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPgetPrimalbound(scip::SCIP_t) = @scip_ccall("SCIPgetPrimalbound", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPgetUpperbound(scip::SCIP_t) = @scip_ccall("SCIPgetUpperbound", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPgetCutoffbound(scip::SCIP_t) = @scip_ccall("SCIPgetCutoffbound", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPisPrimalboundSol(scip::SCIP_t) = @scip_ccall("SCIPisPrimalboundSol", SCIP_Bool, (Ptr{SCIP},), pointer(scip))
#SCIPgetGap(scip::SCIP_t) = @scip_ccall("SCIPgetGap", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPgetTransGap(scip::SCIP_t) = @scip_ccall("SCIPgetTransGap", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPgetNSolsFound(scip::SCIP_t) = @scip_ccall("SCIPgetNSolsFound", Int64, (Ptr{SCIP},), pointer(scip))
#SCIPgetNLimSolsFound(scip::SCIP_t) = @scip_ccall("SCIPgetNLimSolsFound", Int64, (Ptr{SCIP},), pointer(scip))
#SCIPgetNBestSolsFound(scip::SCIP_t) = @scip_ccall("SCIPgetNBestSolsFound", Int64, (Ptr{SCIP},), pointer(scip))
#SCIPgetAvgPseudocost(scip::SCIP_t, solvaldelta::SCIP_Real) = @scip_ccall("SCIPgetAvgPseudocost", SCIP_Real, (Ptr{SCIP}, SCIP_Real), pointer(scip), solvaldelta)
#SCIPgetAvgPseudocostCurrentRun(scip::SCIP_t, solvaldelta::SCIP_Real) = @scip_ccall("SCIPgetAvgPseudocostCurrentRun", SCIP_Real, (Ptr{SCIP}, SCIP_Real), pointer(scip), solvaldelta)
#SCIPgetAvgPseudocostCount(scip::SCIP_t, dir::SCIP_BRANCHDIR) = @scip_ccall("SCIPgetAvgPseudocostCount", SCIP_Real, (Ptr{SCIP}, SCIP_BRANCHDIR), pointer(scip), dir)
#SCIPgetAvgPseudocostCountCurrentRun(scip::SCIP_t, dir::SCIP_BRANCHDIR) = @scip_ccall("SCIPgetAvgPseudocostCountCurrentRun", SCIP_Real, (Ptr{SCIP}, SCIP_BRANCHDIR), pointer(scip), dir)
#SCIPgetAvgPseudocostScore(scip::SCIP_t) = @scip_ccall("SCIPgetAvgPseudocostScore", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPgetAvgPseudocostScoreCurrentRun(scip::SCIP_t) = @scip_ccall("SCIPgetAvgPseudocostScoreCurrentRun", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPgetAvgConflictScore(scip::SCIP_t) = @scip_ccall("SCIPgetAvgConflictScore", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPgetAvgConflictScoreCurrentRun(scip::SCIP_t) = @scip_ccall("SCIPgetAvgConflictScoreCurrentRun", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPgetAvgConflictlengthScore(scip::SCIP_t) = @scip_ccall("SCIPgetAvgConflictlengthScore", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPgetAvgConflictlengthScoreCurrentRun(scip::SCIP_t) = @scip_ccall("SCIPgetAvgConflictlengthScoreCurrentRun", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPgetAvgInferences(scip::SCIP_t, dir::SCIP_BRANCHDIR) = @scip_ccall("SCIPgetAvgInferences", SCIP_Real, (Ptr{SCIP}, SCIP_BRANCHDIR), pointer(scip), dir)
#SCIPgetAvgInferencesCurrentRun(scip::SCIP_t, dir::SCIP_BRANCHDIR) = @scip_ccall("SCIPgetAvgInferencesCurrentRun", SCIP_Real, (Ptr{SCIP}, SCIP_BRANCHDIR), pointer(scip), dir)
#SCIPgetAvgInferenceScore(scip::SCIP_t) = @scip_ccall("SCIPgetAvgInferenceScore", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPgetAvgInferenceScoreCurrentRun(scip::SCIP_t) = @scip_ccall("SCIPgetAvgInferenceScoreCurrentRun", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPgetAvgCutoffs(scip::SCIP_t, dir::SCIP_BRANCHDIR) = @scip_ccall("SCIPgetAvgCutoffs", SCIP_Real, (Ptr{SCIP}, SCIP_BRANCHDIR), pointer(scip), dir)
#SCIPgetAvgCutoffsCurrentRun(scip::SCIP_t, dir::SCIP_BRANCHDIR) = @scip_ccall("SCIPgetAvgCutoffsCurrentRun", SCIP_Real, (Ptr{SCIP}, SCIP_BRANCHDIR), pointer(scip), dir)
#SCIPgetAvgCutoffScore(scip::SCIP_t) = @scip_ccall("SCIPgetAvgCutoffScore", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPgetAvgCutoffScoreCurrentRun(scip::SCIP_t) = @scip_ccall("SCIPgetAvgCutoffScoreCurrentRun", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPgetNImplications(scip::SCIP_t) = @scip_ccall("SCIPgetNImplications", Int, (Ptr{SCIP},), pointer(scip))
#SCIPgetTimeOfDay(scip::SCIP_t) = @scip_ccall("SCIPgetTimeOfDay", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPgetClockTime(scip::SCIP_t, clck::SCIP_CLOCK_t) = @scip_ccall("SCIPgetClockTime", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_CLOCK}), pointer(scip), pointer(clck))
#SCIPgetTotalTime(scip::SCIP_t) = @scip_ccall("SCIPgetTotalTime", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPgetSolvingTime(scip::SCIP_t) = @scip_ccall("SCIPgetSolvingTime", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPgetReadingTime(scip::SCIP_t) = @scip_ccall("SCIPgetReadingTime", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPgetPresolvingTime(scip::SCIP_t) = @scip_ccall("SCIPgetPresolvingTime", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPgetFirstLPTime(scip::SCIP_t) = @scip_ccall("SCIPgetFirstLPTime", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPepsilon(scip::SCIP_t) = @scip_ccall("SCIPepsilon", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPsumepsilon(scip::SCIP_t) = @scip_ccall("SCIPsumepsilon", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPfeastol(scip::SCIP_t) = @scip_ccall("SCIPfeastol", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPlpfeastol(scip::SCIP_t) = @scip_ccall("SCIPlpfeastol", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPdualfeastol(scip::SCIP_t) = @scip_ccall("SCIPdualfeastol", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPbarrierconvtol(scip::SCIP_t) = @scip_ccall("SCIPbarrierconvtol", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPcutoffbounddelta(scip::SCIP_t) = @scip_ccall("SCIPcutoffbounddelta", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPmarkLimitChanged(scip::SCIP_t) = @scip_ccall("SCIPmarkLimitChanged", Void, (Ptr{SCIP},), pointer(scip))
#SCIPinfinity(scip::SCIP_t) = @scip_ccall("SCIPinfinity", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPgetHugeValue(scip::SCIP_t) = @scip_ccall("SCIPgetHugeValue", SCIP_Real, (Ptr{SCIP},), pointer(scip))
#SCIPisEQ(scip::SCIP_t, val1::SCIP_Real, val2::SCIP_Real) = @scip_ccall("SCIPisEQ", SCIP_Bool, (Ptr{SCIP}, SCIP_Real, SCIP_Real), pointer(scip), val1, val2)
#SCIPisLT(scip::SCIP_t, val1::SCIP_Real, val2::SCIP_Real) = @scip_ccall("SCIPisLT", SCIP_Bool, (Ptr{SCIP}, SCIP_Real, SCIP_Real), pointer(scip), val1, val2)
#SCIPisLE(scip::SCIP_t, val1::SCIP_Real, val2::SCIP_Real) = @scip_ccall("SCIPisLE", SCIP_Bool, (Ptr{SCIP}, SCIP_Real, SCIP_Real), pointer(scip), val1, val2)
#SCIPisGT(scip::SCIP_t, val1::SCIP_Real, val2::SCIP_Real) = @scip_ccall("SCIPisGT", SCIP_Bool, (Ptr{SCIP}, SCIP_Real, SCIP_Real), pointer(scip), val1, val2)
#SCIPisGE(scip::SCIP_t, val1::SCIP_Real, val2::SCIP_Real) = @scip_ccall("SCIPisGE", SCIP_Bool, (Ptr{SCIP}, SCIP_Real, SCIP_Real), pointer(scip), val1, val2)
#SCIPisInfinity(scip::SCIP_t, val::SCIP_Real) = @scip_ccall("SCIPisInfinity", SCIP_Bool, (Ptr{SCIP}, SCIP_Real), pointer(scip), val)
#SCIPisHugeValue(scip::SCIP_t, val::SCIP_Real) = @scip_ccall("SCIPisHugeValue", SCIP_Bool, (Ptr{SCIP}, SCIP_Real), pointer(scip), val)
#SCIPisZero(scip::SCIP_t, val::SCIP_Real) = @scip_ccall("SCIPisZero", SCIP_Bool, (Ptr{SCIP}, SCIP_Real), pointer(scip), val)
#SCIPisPositive(scip::SCIP_t, val::SCIP_Real) = @scip_ccall("SCIPisPositive", SCIP_Bool, (Ptr{SCIP}, SCIP_Real), pointer(scip), val)
#SCIPisNegative(scip::SCIP_t, val::SCIP_Real) = @scip_ccall("SCIPisNegative", SCIP_Bool, (Ptr{SCIP}, SCIP_Real), pointer(scip), val)
#SCIPisIntegral(scip::SCIP_t, val::SCIP_Real) = @scip_ccall("SCIPisIntegral", SCIP_Bool, (Ptr{SCIP}, SCIP_Real), pointer(scip), val)
#SCIPisScalingIntegral(scip::SCIP_t, val::SCIP_Real, scalar::SCIP_Real) = @scip_ccall("SCIPisScalingIntegral", SCIP_Bool, (Ptr{SCIP}, SCIP_Real, SCIP_Real), pointer(scip), val, scalar)
#SCIPisFracIntegral(scip::SCIP_t, val::SCIP_Real) = @scip_ccall("SCIPisFracIntegral", SCIP_Bool, (Ptr{SCIP}, SCIP_Real), pointer(scip), val)
#SCIPfloor(scip::SCIP_t, val::SCIP_Real) = @scip_ccall("SCIPfloor", SCIP_Real, (Ptr{SCIP}, SCIP_Real), pointer(scip), val)
#SCIPceil(scip::SCIP_t, val::SCIP_Real) = @scip_ccall("SCIPceil", SCIP_Real, (Ptr{SCIP}, SCIP_Real), pointer(scip), val)
#SCIPround(scip::SCIP_t, val::SCIP_Real) = @scip_ccall("SCIPround", SCIP_Real, (Ptr{SCIP}, SCIP_Real), pointer(scip), val)
#SCIPfrac(scip::SCIP_t, val::SCIP_Real) = @scip_ccall("SCIPfrac", SCIP_Real, (Ptr{SCIP}, SCIP_Real), pointer(scip), val)
#SCIPisSumEQ(scip::SCIP_t, val1::SCIP_Real, val2::SCIP_Real) = @scip_ccall("SCIPisSumEQ", SCIP_Bool, (Ptr{SCIP}, SCIP_Real, SCIP_Real), pointer(scip), val1, val2)
#SCIPisSumLT(scip::SCIP_t, val1::SCIP_Real, val2::SCIP_Real) = @scip_ccall("SCIPisSumLT", SCIP_Bool, (Ptr{SCIP}, SCIP_Real, SCIP_Real), pointer(scip), val1, val2)
#SCIPisSumLE(scip::SCIP_t, val1::SCIP_Real, val2::SCIP_Real) = @scip_ccall("SCIPisSumLE", SCIP_Bool, (Ptr{SCIP}, SCIP_Real, SCIP_Real), pointer(scip), val1, val2)
#SCIPisSumGT(scip::SCIP_t, val1::SCIP_Real, val2::SCIP_Real) = @scip_ccall("SCIPisSumGT", SCIP_Bool, (Ptr{SCIP}, SCIP_Real, SCIP_Real), pointer(scip), val1, val2)
#SCIPisSumGE(scip::SCIP_t, val1::SCIP_Real, val2::SCIP_Real) = @scip_ccall("SCIPisSumGE", SCIP_Bool, (Ptr{SCIP}, SCIP_Real, SCIP_Real), pointer(scip), val1, val2)
#SCIPisSumZero(scip::SCIP_t, val::SCIP_Real) = @scip_ccall("SCIPisSumZero", SCIP_Bool, (Ptr{SCIP}, SCIP_Real), pointer(scip), val)
#SCIPisSumPositive(scip::SCIP_t, val::SCIP_Real) = @scip_ccall("SCIPisSumPositive", SCIP_Bool, (Ptr{SCIP}, SCIP_Real), pointer(scip), val)
#SCIPisSumNegative(scip::SCIP_t, val::SCIP_Real) = @scip_ccall("SCIPisSumNegative", SCIP_Bool, (Ptr{SCIP}, SCIP_Real), pointer(scip), val)
#SCIPisFeasEQ(scip::SCIP_t, val1::SCIP_Real, val2::SCIP_Real) = @scip_ccall("SCIPisFeasEQ", SCIP_Bool, (Ptr{SCIP}, SCIP_Real, SCIP_Real), pointer(scip), val1, val2)
#SCIPisFeasLT(scip::SCIP_t, val1::SCIP_Real, val2::SCIP_Real) = @scip_ccall("SCIPisFeasLT", SCIP_Bool, (Ptr{SCIP}, SCIP_Real, SCIP_Real), pointer(scip), val1, val2)
#SCIPisFeasLE(scip::SCIP_t, val1::SCIP_Real, val2::SCIP_Real) = @scip_ccall("SCIPisFeasLE", SCIP_Bool, (Ptr{SCIP}, SCIP_Real, SCIP_Real), pointer(scip), val1, val2)
#SCIPisFeasGT(scip::SCIP_t, val1::SCIP_Real, val2::SCIP_Real) = @scip_ccall("SCIPisFeasGT", SCIP_Bool, (Ptr{SCIP}, SCIP_Real, SCIP_Real), pointer(scip), val1, val2)
#SCIPisFeasGE(scip::SCIP_t, val1::SCIP_Real, val2::SCIP_Real) = @scip_ccall("SCIPisFeasGE", SCIP_Bool, (Ptr{SCIP}, SCIP_Real, SCIP_Real), pointer(scip), val1, val2)
#SCIPisFeasZero(scip::SCIP_t, val::SCIP_Real) = @scip_ccall("SCIPisFeasZero", SCIP_Bool, (Ptr{SCIP}, SCIP_Real), pointer(scip), val)
#SCIPisFeasPositive(scip::SCIP_t, val::SCIP_Real) = @scip_ccall("SCIPisFeasPositive", SCIP_Bool, (Ptr{SCIP}, SCIP_Real), pointer(scip), val)
#SCIPisFeasNegative(scip::SCIP_t, val::SCIP_Real) = @scip_ccall("SCIPisFeasNegative", SCIP_Bool, (Ptr{SCIP}, SCIP_Real), pointer(scip), val)
#SCIPisFeasIntegral(scip::SCIP_t, val::SCIP_Real) = @scip_ccall("SCIPisFeasIntegral", SCIP_Bool, (Ptr{SCIP}, SCIP_Real), pointer(scip), val)
#SCIPisFeasFracIntegral(scip::SCIP_t, val::SCIP_Real) = @scip_ccall("SCIPisFeasFracIntegral", SCIP_Bool, (Ptr{SCIP}, SCIP_Real), pointer(scip), val)
#SCIPfeasFloor(scip::SCIP_t, val::SCIP_Real) = @scip_ccall("SCIPfeasFloor", SCIP_Real, (Ptr{SCIP}, SCIP_Real), pointer(scip), val)
#SCIPfeasCeil(scip::SCIP_t, val::SCIP_Real) = @scip_ccall("SCIPfeasCeil", SCIP_Real, (Ptr{SCIP}, SCIP_Real), pointer(scip), val)
#SCIPfeasRound(scip::SCIP_t, val::SCIP_Real) = @scip_ccall("SCIPfeasRound", SCIP_Real, (Ptr{SCIP}, SCIP_Real), pointer(scip), val)
#SCIPfeasFrac(scip::SCIP_t, val::SCIP_Real) = @scip_ccall("SCIPfeasFrac", SCIP_Real, (Ptr{SCIP}, SCIP_Real), pointer(scip), val)
#SCIPisLbBetter(scip::SCIP_t, newlb::SCIP_Real, oldlb::SCIP_Real, oldub::SCIP_Real) = @scip_ccall("SCIPisLbBetter", SCIP_Bool, (Ptr{SCIP}, SCIP_Real, SCIP_Real, SCIP_Real), pointer(scip), newlb, oldlb, oldub)
#SCIPisUbBetter(scip::SCIP_t, newub::SCIP_Real, oldlb::SCIP_Real, oldub::SCIP_Real) = @scip_ccall("SCIPisUbBetter", SCIP_Bool, (Ptr{SCIP}, SCIP_Real, SCIP_Real, SCIP_Real), pointer(scip), newub, oldlb, oldub)
#SCIPisRelEQ(scip::SCIP_t, val1::SCIP_Real, val2::SCIP_Real) = @scip_ccall("SCIPisRelEQ", SCIP_Bool, (Ptr{SCIP}, SCIP_Real, SCIP_Real), pointer(scip), val1, val2)
#SCIPisRelLT(scip::SCIP_t, val1::SCIP_Real, val2::SCIP_Real) = @scip_ccall("SCIPisRelLT", SCIP_Bool, (Ptr{SCIP}, SCIP_Real, SCIP_Real), pointer(scip), val1, val2)
#SCIPisRelLE(scip::SCIP_t, val1::SCIP_Real, val2::SCIP_Real) = @scip_ccall("SCIPisRelLE", SCIP_Bool, (Ptr{SCIP}, SCIP_Real, SCIP_Real), pointer(scip), val1, val2)
#SCIPisRelGT(scip::SCIP_t, val1::SCIP_Real, val2::SCIP_Real) = @scip_ccall("SCIPisRelGT", SCIP_Bool, (Ptr{SCIP}, SCIP_Real, SCIP_Real), pointer(scip), val1, val2)
#SCIPisRelGE(scip::SCIP_t, val1::SCIP_Real, val2::SCIP_Real) = @scip_ccall("SCIPisRelGE", SCIP_Bool, (Ptr{SCIP}, SCIP_Real, SCIP_Real), pointer(scip), val1, val2)
#SCIPisSumRelEQ(scip::SCIP_t, val1::SCIP_Real, val2::SCIP_Real) = @scip_ccall("SCIPisSumRelEQ", SCIP_Bool, (Ptr{SCIP}, SCIP_Real, SCIP_Real), pointer(scip), val1, val2)
#SCIPisSumRelLT(scip::SCIP_t, val1::SCIP_Real, val2::SCIP_Real) = @scip_ccall("SCIPisSumRelLT", SCIP_Bool, (Ptr{SCIP}, SCIP_Real, SCIP_Real), pointer(scip), val1, val2)
#SCIPisSumRelLE(scip::SCIP_t, val1::SCIP_Real, val2::SCIP_Real) = @scip_ccall("SCIPisSumRelLE", SCIP_Bool, (Ptr{SCIP}, SCIP_Real, SCIP_Real), pointer(scip), val1, val2)
#SCIPisSumRelGT(scip::SCIP_t, val1::SCIP_Real, val2::SCIP_Real) = @scip_ccall("SCIPisSumRelGT", SCIP_Bool, (Ptr{SCIP}, SCIP_Real, SCIP_Real), pointer(scip), val1, val2)
#SCIPisSumRelGE(scip::SCIP_t, val1::SCIP_Real, val2::SCIP_Real) = @scip_ccall("SCIPisSumRelGE", SCIP_Bool, (Ptr{SCIP}, SCIP_Real, SCIP_Real), pointer(scip), val1, val2)
#SCIPisUpdateUnreliable(scip::SCIP_t, newvalue::SCIP_Real, oldvalue::SCIP_Real) = @scip_ccall("SCIPisUpdateUnreliable", SCIP_Bool, (Ptr{SCIP}, SCIP_Real, SCIP_Real), pointer(scip), newvalue, oldvalue)
#SCIPgetMemUsed(scip::SCIP_t) = @scip_ccall("SCIPgetMemUsed", Int64, (Ptr{SCIP},), pointer(scip))
#SCIPgetMemExternEstim(scip::SCIP_t) = @scip_ccall("SCIPgetMemExternEstim", Int64, (Ptr{SCIP},), pointer(scip))
#SCIPcalcMemGrowSize(scip::SCIP_t, num) = @scip_ccall("SCIPcalcMemGrowSize", Int, (Ptr{SCIP}, Int), pointer(scip), num)
#SCIPprintMemoryDiagnostic(scip::SCIP_t) = @scip_ccall("SCIPprintMemoryDiagnostic", Void, (Ptr{SCIP},), pointer(scip))
#SCIPgetRealarrayVal(scip::SCIP_t, realarray::SCIP_REALARRAY_t, idx) = @scip_ccall("SCIPgetRealarrayVal", SCIP_Real, (Ptr{SCIP}, Ptr{SCIP_REALARRAY}, Int), pointer(scip), pointer(realarray), idx)
#SCIPgetRealarrayMinIdx(scip::SCIP_t, realarray::SCIP_REALARRAY_t) = @scip_ccall("SCIPgetRealarrayMinIdx", Int, (Ptr{SCIP}, Ptr{SCIP_REALARRAY}), pointer(scip), pointer(realarray))
#SCIPgetRealarrayMaxIdx(scip::SCIP_t, realarray::SCIP_REALARRAY_t) = @scip_ccall("SCIPgetRealarrayMaxIdx", Int, (Ptr{SCIP}, Ptr{SCIP_REALARRAY}), pointer(scip), pointer(realarray))
#SCIPgetIntarrayVal(scip::SCIP_t, intarray::SCIP_INTARRAY_t, idx) = @scip_ccall("SCIPgetIntarrayVal", Int, (Ptr{SCIP}, Ptr{SCIP_INTARRAY}, Int), pointer(scip), pointer(intarray), idx)
#SCIPgetIntarrayMinIdx(scip::SCIP_t, intarray::SCIP_INTARRAY_t) = @scip_ccall("SCIPgetIntarrayMinIdx", Int, (Ptr{SCIP}, Ptr{SCIP_INTARRAY}), pointer(scip), pointer(intarray))
#SCIPgetIntarrayMaxIdx(scip::SCIP_t, intarray::SCIP_INTARRAY_t) = @scip_ccall("SCIPgetIntarrayMaxIdx", Int, (Ptr{SCIP}, Ptr{SCIP_INTARRAY}), pointer(scip), pointer(intarray))
#SCIPgetBoolarrayVal(scip::SCIP_t, boolarray::SCIP_BOOLARRAY_t, idx) = @scip_ccall("SCIPgetBoolarrayVal", SCIP_Bool, (Ptr{SCIP}, Ptr{SCIP_BOOLARRAY}, Int), pointer(scip), pointer(boolarray), idx)
#SCIPgetBoolarrayMinIdx(scip::SCIP_t, boolarray::SCIP_BOOLARRAY_t) = @scip_ccall("SCIPgetBoolarrayMinIdx", Int, (Ptr{SCIP}, Ptr{SCIP_BOOLARRAY}), pointer(scip), pointer(boolarray))
#SCIPgetBoolarrayMaxIdx(scip::SCIP_t, boolarray::SCIP_BOOLARRAY_t) = @scip_ccall("SCIPgetBoolarrayMaxIdx", Int, (Ptr{SCIP}, Ptr{SCIP_BOOLARRAY}), pointer(scip), pointer(boolarray))
#SCIPgetPtrarrayMinIdx(scip::SCIP_t, ptrarray::SCIP_PTRARRAY_t) = @scip_ccall("SCIPgetPtrarrayMinIdx", Int, (Ptr{SCIP}, Ptr{SCIP_PTRARRAY}), pointer(scip), pointer(ptrarray))
#SCIPgetPtrarrayMaxIdx(scip::SCIP_t, ptrarray::SCIP_PTRARRAY_t) = @scip_ccall("SCIPgetPtrarrayMaxIdx", Int, (Ptr{SCIP}, Ptr{SCIP_PTRARRAY}), pointer(scip), pointer(ptrarray))

# SCIP function wrappers: unchecked functions
#SCIPexprEval(expr::SCIP_EXPR_t, varvals::SCIP_Real_t, param::SCIP_Real_t, val::SCIP_Real_t) = @scip_ccall_check("SCIPexprEval", (Ptr{SCIP_EXPR}, Ptr{SCIP_Real}, Ptr{SCIP_Real}, Ptr{SCIP_Real}), pointer(expr), pointer(varvals), pointer(param), pointer(val))
#SCIPexprEvalInt(expr::SCIP_EXPR_t, infinity::SCIP_Real, varvals::SCIP_INTERVAL_t, param::SCIP_Real_t, val::SCIP_INTERVAL_t) = @scip_ccall_check("SCIPexprEvalInt", (Ptr{SCIP_EXPR}, SCIP_Real, Ptr{SCIP_INTERVAL}, Ptr{SCIP_Real}, Ptr{SCIP_INTERVAL}), pointer(expr), infinity, pointer(varvals), pointer(param), pointer(val))
#SCIPexprCheckCurvature(expr::SCIP_EXPR_t, infinity::SCIP_Real, varbounds::SCIP_INTERVAL_t, param::SCIP_Real_t, curv::SCIP_EXPRCURV_t, bounds::SCIP_INTERVAL_t) = @scip_ccall_check("SCIPexprCheckCurvature", (Ptr{SCIP_EXPR}, SCIP_Real, Ptr{SCIP_INTERVAL}, Ptr{SCIP_Real}, Ptr{SCIP_EXPRCURV}, Ptr{SCIP_INTERVAL}), pointer(expr), infinity, pointer(varbounds), pointer(param), pointer(curv), pointer(bounds))
#SCIPexprtreeFreeInterpreterData(tree::SCIP_EXPRTREE_t) = @scip_ccall_check("SCIPexprtreeFreeInterpreterData", (Ptr{SCIP_EXPRTREE},), pointer(tree))
#SCIPexprtreeEval(tree::SCIP_EXPRTREE_t, varvals::SCIP_Real_t, val::SCIP_Real_t) = @scip_ccall_check("SCIPexprtreeEval", (Ptr{SCIP_EXPRTREE}, Ptr{SCIP_Real}, Ptr{SCIP_Real}), pointer(tree), pointer(varvals), pointer(val))
#SCIPexprtreeEvalInt(tree::SCIP_EXPRTREE_t, infinity::SCIP_Real, varvals::SCIP_INTERVAL_t, val::SCIP_INTERVAL_t) = @scip_ccall_check("SCIPexprtreeEvalInt", (Ptr{SCIP_EXPRTREE}, SCIP_Real, Ptr{SCIP_INTERVAL}, Ptr{SCIP_INTERVAL}), pointer(tree), infinity, pointer(varvals), pointer(val))
#SCIPexprtreeFree(tree::SCIP_EXPRTREE_t) = @scip_ccall_check("SCIPexprtreeFree", (Ptr{Ptr{SCIP_EXPRTREE}},), array(tree))
#SCIPexprtreeSetParams(tree::SCIP_EXPRTREE_t, nparams, paramvals::SCIP_Real_t) = @scip_ccall_check("SCIPexprtreeSetParams", (Ptr{SCIP_EXPRTREE}, Int, Ptr{SCIP_Real}), pointer(tree), nparams, pointer(paramvals))
#SCIPexprtreeAddExpr(tree::SCIP_EXPRTREE_t, expr::SCIP_EXPR_t, copyexpr::SCIP_Bool) = @scip_ccall_check("SCIPexprtreeAddExpr", (Ptr{SCIP_EXPRTREE}, Ptr{SCIP_EXPR}, SCIP_Bool), pointer(tree), pointer(expr), copyexpr)
#SCIPexprtreeCheckCurvature(tree::SCIP_EXPRTREE_t, infinity::SCIP_Real, varbounds::SCIP_INTERVAL_t, curv::SCIP_EXPRCURV_t, bounds::SCIP_INTERVAL_t) = @scip_ccall_check("SCIPexprtreeCheckCurvature", (Ptr{SCIP_EXPRTREE}, SCIP_Real, Ptr{SCIP_INTERVAL}, Ptr{SCIP_EXPRCURV}, Ptr{SCIP_INTERVAL}), pointer(tree), infinity, pointer(varbounds), pointer(curv), pointer(bounds))
#SCIPexprtreeSubstituteVars(tree::SCIP_EXPRTREE_t, substexprs::SCIP_EXPR_t) = @scip_ccall_check("SCIPexprtreeSubstituteVars", (Ptr{SCIP_EXPRTREE}, Ptr{Ptr{SCIP_EXPR}}), pointer(tree), array(substexprs))
#SCIPexprgraphMoveNodeParents(exprgraph::SCIP_EXPRGRAPH_t, srcnode::SCIP_EXPRGRAPHNODE_t, targetnode::SCIP_EXPRGRAPHNODE_t) = @scip_ccall_check("SCIPexprgraphMoveNodeParents", (Ptr{SCIP_EXPRGRAPH}, Ptr{Ptr{SCIP_EXPRGRAPHNODE}}, Ptr{SCIP_EXPRGRAPHNODE}), pointer(exprgraph), array(srcnode), pointer(targetnode))
#SCIPexprgraphReleaseNode(exprgraph::SCIP_EXPRGRAPH_t, node::SCIP_EXPRGRAPHNODE_t) = @scip_ccall_check("SCIPexprgraphReleaseNode", (Ptr{SCIP_EXPRGRAPH}, Ptr{Ptr{SCIP_EXPRGRAPHNODE}}), pointer(exprgraph), array(node))
#SCIPexprgraphUpdateNodeBoundsCurvature(node::SCIP_EXPRGRAPHNODE_t, infinity::SCIP_Real, minstrength::SCIP_Real, clearreverseprop::SCIP_Bool) = @scip_ccall_check("SCIPexprgraphUpdateNodeBoundsCurvature", (Ptr{SCIP_EXPRGRAPHNODE}, SCIP_Real, SCIP_Real, SCIP_Bool), pointer(node), infinity, minstrength, clearreverseprop)
#SCIPexprgraphFree(exprgraph::SCIP_EXPRGRAPH_t) = @scip_ccall_check("SCIPexprgraphFree", (Ptr{Ptr{SCIP_EXPRGRAPH}},), array(exprgraph))
#SCIPexprgraphAddNode(exprgraph::SCIP_EXPRGRAPH_t, node::SCIP_EXPRGRAPHNODE_t, mindepth, nchildren, children::SCIP_EXPRGRAPHNODE_t) = @scip_ccall_check("SCIPexprgraphAddNode", (Ptr{SCIP_EXPRGRAPH}, Ptr{SCIP_EXPRGRAPHNODE}, Int, Int, Ptr{Ptr{SCIP_EXPRGRAPHNODE}}), pointer(exprgraph), pointer(node), mindepth, nchildren, array(children))
#SCIPexprgraphAddConst(exprgraph::SCIP_EXPRGRAPH_t, constant::SCIP_Real, constnode::SCIP_EXPRGRAPHNODE_t) = @scip_ccall_check("SCIPexprgraphAddConst", (Ptr{SCIP_EXPRGRAPH}, SCIP_Real, Ptr{Ptr{SCIP_EXPRGRAPHNODE}}), pointer(exprgraph), constant, array(constnode))
#SCIPexprgraphAddExprtreeSum(exprgraph::SCIP_EXPRGRAPH_t, nexprtrees, exprtrees::SCIP_EXPRTREE_t, coefs::SCIP_Real_t, rootnode::SCIP_EXPRGRAPHNODE_t, rootnodeisnew::SCIP_Bool_t) = @scip_ccall_check("SCIPexprgraphAddExprtreeSum", (Ptr{SCIP_EXPRGRAPH}, Int, Ptr{Ptr{SCIP_EXPRTREE}}, Ptr{SCIP_Real}, Ptr{Ptr{SCIP_EXPRGRAPHNODE}}, Ptr{SCIP_Bool}), pointer(exprgraph), nexprtrees, array(exprtrees), pointer(coefs), array(rootnode), pointer(rootnodeisnew))
#SCIPexprgraphEval(exprgraph::SCIP_EXPRGRAPH_t, varvals::SCIP_Real_t) = @scip_ccall_check("SCIPexprgraphEval", (Ptr{SCIP_EXPRGRAPH}, Ptr{SCIP_Real}), pointer(exprgraph), pointer(varvals))
#SCIPexprgraphPropagateVarBounds(exprgraph::SCIP_EXPRGRAPH_t, infinity::SCIP_Real, clearreverseprop::SCIP_Bool, domainerror::SCIP_Bool_t) = @scip_ccall_check("SCIPexprgraphPropagateVarBounds", (Ptr{SCIP_EXPRGRAPH}, SCIP_Real, SCIP_Bool, Ptr{SCIP_Bool}), pointer(exprgraph), infinity, clearreverseprop, pointer(domainerror))
#SCIPexprgraphCheckCurvature(exprgraph::SCIP_EXPRGRAPH_t, infinity::SCIP_Real, clearreverseprop::SCIP_Bool) = @scip_ccall_check("SCIPexprgraphCheckCurvature", (Ptr{SCIP_EXPRGRAPH}, SCIP_Real, SCIP_Bool), pointer(exprgraph), infinity, clearreverseprop)
#SCIPexprgraphSimplify(exprgraph::SCIP_EXPRGRAPH_t, messagehdlr::SCIP_MESSAGEHDLR_t, eps::SCIP_Real, maxexpansionexponent, havechange::SCIP_Bool_t, domainerror::SCIP_Bool_t) = @scip_ccall_check("SCIPexprgraphSimplify", (Ptr{SCIP_EXPRGRAPH}, Ptr{SCIP_MESSAGEHDLR}, SCIP_Real, Int, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}), pointer(exprgraph), pointer(messagehdlr), eps, maxexpansionexponent, pointer(havechange), pointer(domainerror))
#SCIPexprgraphGetTree(exprgraph::SCIP_EXPRGRAPH_t, rootnode::SCIP_EXPRGRAPHNODE_t, exprtree::SCIP_EXPRTREE_t) = @scip_ccall_check("SCIPexprgraphGetTree", (Ptr{SCIP_EXPRGRAPH}, Ptr{SCIP_EXPRGRAPHNODE}, Ptr{Ptr{SCIP_EXPRTREE}}), pointer(exprgraph), pointer(rootnode), array(exprtree))
#SCIPexprtreeSetVars(tree::SCIP_EXPRTREE_t, nvars, vars::SCIP_VAR_t) = @scip_ccall_check("SCIPexprtreeSetVars", (Ptr{SCIP_EXPRTREE}, Int, Ptr{Ptr{SCIP_VAR}}), pointer(tree), nvars, array(vars))
#SCIPexprtreeAddVars(tree::SCIP_EXPRTREE_t, nvars, vars::SCIP_VAR_t) = @scip_ccall_check("SCIPexprtreeAddVars", (Ptr{SCIP_EXPRTREE}, Int, Ptr{Ptr{SCIP_VAR}}), pointer(tree), nvars, array(vars))
#SCIPcreate(scip::SCIP_t) = @scip_ccall_check("SCIPcreate", (Ptr{Ptr{SCIP}},), array(scip))
#SCIPfree(scip::SCIP_t) = @scip_ccall_check("SCIPfree", (Ptr{Ptr{SCIP}},), array(scip))
#SCIPsetMessagehdlr(scip::SCIP_t, messagehdlr::SCIP_MESSAGEHDLR_t) = @scip_ccall_check("SCIPsetMessagehdlr", (Ptr{SCIP}, Ptr{SCIP_MESSAGEHDLR}), pointer(scip), pointer(messagehdlr))
#SCIPcopyPlugins(sourcescip::SCIP_t, targetscip::SCIP_t, copyreaders::SCIP_Bool, copypricers::SCIP_Bool, copyconshdlrs::SCIP_Bool, copyconflicthdlrs::SCIP_Bool, copypresolvers::SCIP_Bool, copyrelaxators::SCIP_Bool, copyseparators::SCIP_Bool, copypropagators::SCIP_Bool, copyheuristics::SCIP_Bool, copyeventhdlrs::SCIP_Bool, copynodeselectors::SCIP_Bool, copybranchrules::SCIP_Bool, copydisplays::SCIP_Bool, copydialogs::SCIP_Bool, copynlpis::SCIP_Bool, passmessagehdlr::SCIP_Bool, valid::SCIP_Bool_t) = @scip_ccall_check("SCIPcopyPlugins", (Ptr{SCIP}, Ptr{SCIP}, SCIP_Bool, SCIP_Bool, SCIP_Bool, SCIP_Bool, SCIP_Bool, SCIP_Bool, SCIP_Bool, SCIP_Bool, SCIP_Bool, SCIP_Bool, SCIP_Bool, SCIP_Bool, SCIP_Bool, SCIP_Bool, SCIP_Bool, SCIP_Bool, Ptr{SCIP_Bool}), pointer(sourcescip), pointer(targetscip), copyreaders, copypricers, copyconshdlrs, copyconflicthdlrs, copypresolvers, copyrelaxators, copyseparators, copypropagators, copyheuristics, copyeventhdlrs, copynodeselectors, copybranchrules, copydisplays, copydialogs, copynlpis, passmessagehdlr, pointer(valid))
#SCIPcopyProb(sourcescip::SCIP_t, targetscip::SCIP_t, varmap::SCIP_HASHMAP_t, consmap::SCIP_HASHMAP_t, globalVar::SCIP_Bool, name) = @scip_ccall_check("SCIPcopyProb", (Ptr{SCIP}, Ptr{SCIP}, Ptr{SCIP_HASHMAP}, Ptr{SCIP_HASHMAP}, SCIP_Bool, String), pointer(sourcescip), pointer(targetscip), pointer(varmap), pointer(consmap), globalVar, name)
#SCIPcopyOrigProb(sourcescip::SCIP_t, targetscip::SCIP_t, varmap::SCIP_HASHMAP_t, consmap::SCIP_HASHMAP_t, name) = @scip_ccall_check("SCIPcopyOrigProb", (Ptr{SCIP}, Ptr{SCIP}, Ptr{SCIP_HASHMAP}, Ptr{SCIP_HASHMAP}, String), pointer(sourcescip), pointer(targetscip), pointer(varmap), pointer(consmap), name)
#SCIPgetVarCopy(sourcescip::SCIP_t, targetscip::SCIP_t, sourcevar::SCIP_VAR_t, targetvar::SCIP_VAR_t, varmap::SCIP_HASHMAP_t, consmap::SCIP_HASHMAP_t, globalVar::SCIP_Bool, success::SCIP_Bool_t) = @scip_ccall_check("SCIPgetVarCopy", (Ptr{SCIP}, Ptr{SCIP}, Ptr{SCIP_VAR}, Ptr{Ptr{SCIP_VAR}}, Ptr{SCIP_HASHMAP}, Ptr{SCIP_HASHMAP}, SCIP_Bool, Ptr{SCIP_Bool}), pointer(sourcescip), pointer(targetscip), pointer(sourcevar), array(targetvar), pointer(varmap), pointer(consmap), globalVar, pointer(success))
#SCIPcopyVars(sourcescip::SCIP_t, targetscip::SCIP_t, varmap::SCIP_HASHMAP_t, consmap::SCIP_HASHMAP_t, globalVar::SCIP_Bool) = @scip_ccall_check("SCIPcopyVars", (Ptr{SCIP}, Ptr{SCIP}, Ptr{SCIP_HASHMAP}, Ptr{SCIP_HASHMAP}, SCIP_Bool), pointer(sourcescip), pointer(targetscip), pointer(varmap), pointer(consmap), globalVar)
#SCIPcopyOrigVars(sourcescip::SCIP_t, targetscip::SCIP_t, varmap::SCIP_HASHMAP_t, consmap::SCIP_HASHMAP_t) = @scip_ccall_check("SCIPcopyOrigVars", (Ptr{SCIP}, Ptr{SCIP}, Ptr{SCIP_HASHMAP}, Ptr{SCIP_HASHMAP}), pointer(sourcescip), pointer(targetscip), pointer(varmap), pointer(consmap))
#SCIPgetConsCopy(sourcescip::SCIP_t, targetscip::SCIP_t, sourcecons::SCIP_CONS_t, targetcons::SCIP_CONS_t, sourceconshdlr::SCIP_CONSHDLR_t, varmap::SCIP_HASHMAP_t, consmap::SCIP_HASHMAP_t, name, initial::SCIP_Bool, separate::SCIP_Bool, enforce::SCIP_Bool, check::SCIP_Bool, propagate::SCIP_Bool, localVar::SCIP_Bool, modifiable::SCIP_Bool, dynamic::SCIP_Bool, removable::SCIP_Bool, stickingatnode::SCIP_Bool, globalVar::SCIP_Bool, success::SCIP_Bool_t) = @scip_ccall_check("SCIPgetConsCopy", (Ptr{SCIP}, Ptr{SCIP}, Ptr{SCIP_CONS}, Ptr{Ptr{SCIP_CONS}}, Ptr{SCIP_CONSHDLR}, Ptr{SCIP_HASHMAP}, Ptr{SCIP_HASHMAP}, String, SCIP_Bool, SCIP_Bool, SCIP_Bool, SCIP_Bool, SCIP_Bool, SCIP_Bool, SCIP_Bool, SCIP_Bool, SCIP_Bool, SCIP_Bool, SCIP_Bool, Ptr{SCIP_Bool}), pointer(sourcescip), pointer(targetscip), pointer(sourcecons), array(targetcons), pointer(sourceconshdlr), pointer(varmap), pointer(consmap), name, initial, separate, enforce, check, propagate, localVar, modifiable, dynamic, removable, stickingatnode, globalVar, pointer(success))
#SCIPcopyConss(sourcescip::SCIP_t, targetscip::SCIP_t, varmap::SCIP_HASHMAP_t, consmap::SCIP_HASHMAP_t, globalVar::SCIP_Bool, enablepricing::SCIP_Bool, valid::SCIP_Bool_t) = @scip_ccall_check("SCIPcopyConss", (Ptr{SCIP}, Ptr{SCIP}, Ptr{SCIP_HASHMAP}, Ptr{SCIP_HASHMAP}, SCIP_Bool, SCIP_Bool, Ptr{SCIP_Bool}), pointer(sourcescip), pointer(targetscip), pointer(varmap), pointer(consmap), globalVar, enablepricing, pointer(valid))
#SCIPcopyOrigConss(sourcescip::SCIP_t, targetscip::SCIP_t, varmap::SCIP_HASHMAP_t, consmap::SCIP_HASHMAP_t, enablepricing::SCIP_Bool, valid::SCIP_Bool_t) = @scip_ccall_check("SCIPcopyOrigConss", (Ptr{SCIP}, Ptr{SCIP}, Ptr{SCIP_HASHMAP}, Ptr{SCIP_HASHMAP}, SCIP_Bool, Ptr{SCIP_Bool}), pointer(sourcescip), pointer(targetscip), pointer(varmap), pointer(consmap), enablepricing, pointer(valid))
#SCIPcopyParamSettings(sourcescip::SCIP_t, targetscip::SCIP_t) = @scip_ccall_check("SCIPcopyParamSettings", (Ptr{SCIP}, Ptr{SCIP}), pointer(sourcescip), pointer(targetscip))
#SCIPcopy(sourcescip::SCIP_t, targetscip::SCIP_t, varmap::SCIP_HASHMAP_t, consmap::SCIP_HASHMAP_t, suffix, globalVar::SCIP_Bool, enablepricing::SCIP_Bool, passmessagehdlr::SCIP_Bool, valid::SCIP_Bool_t) = @scip_ccall_check("SCIPcopy", (Ptr{SCIP}, Ptr{SCIP}, Ptr{SCIP_HASHMAP}, Ptr{SCIP_HASHMAP}, String, SCIP_Bool, SCIP_Bool, SCIP_Bool, Ptr{SCIP_Bool}), pointer(sourcescip), pointer(targetscip), pointer(varmap), pointer(consmap), suffix, globalVar, enablepricing, passmessagehdlr, pointer(valid))
#SCIPcopyOrig(sourcescip::SCIP_t, targetscip::SCIP_t, varmap::SCIP_HASHMAP_t, consmap::SCIP_HASHMAP_t, suffix, enablepricing::SCIP_Bool, passmessagehdlr::SCIP_Bool, valid::SCIP_Bool_t) = @scip_ccall_check("SCIPcopyOrig", (Ptr{SCIP}, Ptr{SCIP}, Ptr{SCIP_HASHMAP}, Ptr{SCIP_HASHMAP}, String, SCIP_Bool, SCIP_Bool, Ptr{SCIP_Bool}), pointer(sourcescip), pointer(targetscip), pointer(varmap), pointer(consmap), suffix, enablepricing, passmessagehdlr, pointer(valid))
#SCIPgetBoolParam(scip::SCIP_t, name, value::SCIP_Bool_t) = @scip_ccall_check("SCIPgetBoolParam", (Ptr{SCIP}, String, Ptr{SCIP_Bool}), pointer(scip), name, pointer(value))
#SCIPgetLongintParam(scip::SCIP_t, name, value::SCIP_Longint_t) = @scip_ccall_check("SCIPgetLongintParam", (Ptr{SCIP}, String, Ptr{Int64}), pointer(scip), name, pointer(value))
#SCIPgetRealParam(scip::SCIP_t, name, value::SCIP_Real_t) = @scip_ccall_check("SCIPgetRealParam", (Ptr{SCIP}, String, Ptr{SCIP_Real}), pointer(scip), name, pointer(value))
#SCIPfixParam(scip::SCIP_t, name) = @scip_ccall_check("SCIPfixParam", (Ptr{SCIP}, String), pointer(scip), name)
#SCIPunfixParam(scip::SCIP_t, name) = @scip_ccall_check("SCIPunfixParam", (Ptr{SCIP}, String), pointer(scip), name)
#SCIPchgBoolParam(scip::SCIP_t, param::SCIP_PARAM_t, value::SCIP_Bool) = @scip_ccall_check("SCIPchgBoolParam", (Ptr{SCIP}, Ptr{SCIP_PARAM}, SCIP_Bool), pointer(scip), pointer(param), value)
#SCIPsetBoolParam(scip::SCIP_t, name, value::SCIP_Bool) = @scip_ccall_check("SCIPsetBoolParam", (Ptr{SCIP}, String, SCIP_Bool), pointer(scip), name, value)
#SCIPchgIntParam(scip::SCIP_t, param::SCIP_PARAM_t, value) = @scip_ccall_check("SCIPchgIntParam", (Ptr{SCIP}, Ptr{SCIP_PARAM}, Int), pointer(scip), pointer(param), value)
#SCIPsetIntParam(scip::SCIP_t, name, value) = @scip_ccall_check("SCIPsetIntParam", (Ptr{SCIP}, String, Int), pointer(scip), name, value)
#SCIPchgLongintParam(scip::SCIP_t, param::SCIP_PARAM_t, value) = @scip_ccall_check("SCIPchgLongintParam", (Ptr{SCIP}, Ptr{SCIP_PARAM}, Int64), pointer(scip), pointer(param), value)
#SCIPsetLongintParam(scip::SCIP_t, name, value) = @scip_ccall_check("SCIPsetLongintParam", (Ptr{SCIP}, String, Int64), pointer(scip), name, value)
#SCIPchgRealParam(scip::SCIP_t, param::SCIP_PARAM_t, value::SCIP_Real) = @scip_ccall_check("SCIPchgRealParam", (Ptr{SCIP}, Ptr{SCIP_PARAM}, SCIP_Real), pointer(scip), pointer(param), value)
#SCIPsetRealParam(scip::SCIP_t, name, value::SCIP_Real) = @scip_ccall_check("SCIPsetRealParam", (Ptr{SCIP}, String, SCIP_Real), pointer(scip), name, value)
#SCIPchgStringParam(scip::SCIP_t, param::SCIP_PARAM_t, value) = @scip_ccall_check("SCIPchgStringParam", (Ptr{SCIP}, Ptr{SCIP_PARAM}, String), pointer(scip), pointer(param), value)
#SCIPsetStringParam(scip::SCIP_t, name, value) = @scip_ccall_check("SCIPsetStringParam", (Ptr{SCIP}, String, String), pointer(scip), name, value)
#SCIPreadParams(scip::SCIP_t, filename) = @scip_ccall_check("SCIPreadParams", (Ptr{SCIP}, String), pointer(scip), filename)
#SCIPwriteParams(scip::SCIP_t, filename, comments::SCIP_Bool, onlychanged::SCIP_Bool) = @scip_ccall_check("SCIPwriteParams", (Ptr{SCIP}, String, SCIP_Bool, SCIP_Bool), pointer(scip), filename, comments, onlychanged)
#SCIPresetParam(scip::SCIP_t, name) = @scip_ccall_check("SCIPresetParam", (Ptr{SCIP}, String), pointer(scip), name)
#SCIPresetParams(scip::SCIP_t) = @scip_ccall_check("SCIPresetParams", (Ptr{SCIP},), pointer(scip))
#SCIPsetEmphasis(scip::SCIP_t, paramemphasis::SCIP_PARAMEMPHASIS, quiet::SCIP_Bool) = @scip_ccall_check("SCIPsetEmphasis", (Ptr{SCIP}, SCIP_PARAMEMPHASIS, SCIP_Bool), pointer(scip), paramemphasis, quiet)
#SCIPsetSubscipsOff(scip::SCIP_t, quiet::SCIP_Bool) = @scip_ccall_check("SCIPsetSubscipsOff", (Ptr{SCIP}, SCIP_Bool), pointer(scip), quiet)
#SCIPsetHeuristics(scip::SCIP_t, paramsetting::SCIP_PARAMSETTING, quiet::SCIP_Bool) = @scip_ccall_check("SCIPsetHeuristics", (Ptr{SCIP}, SCIP_PARAMSETTING, SCIP_Bool), pointer(scip), paramsetting, quiet)
#SCIPsetPresolving(scip::SCIP_t, paramsetting::SCIP_PARAMSETTING, quiet::SCIP_Bool) = @scip_ccall_check("SCIPsetPresolving", (Ptr{SCIP}, SCIP_PARAMSETTING, SCIP_Bool), pointer(scip), paramsetting, quiet)
#SCIPsetSeparating(scip::SCIP_t, paramsetting::SCIP_PARAMSETTING, quiet::SCIP_Bool) = @scip_ccall_check("SCIPsetSeparating", (Ptr{SCIP}, SCIP_PARAMSETTING, SCIP_Bool), pointer(scip), paramsetting, quiet)
#SCIPincludeReaderBasic(scip::SCIP_t, readerptr::SCIP_READER_t, name, desc, extension, readerdata::SCIP_READERDATA_t) = @scip_ccall_check("SCIPincludeReaderBasic", (Ptr{SCIP}, Ptr{Ptr{SCIP_READER}}, String, String, String, Ptr{SCIP_READERDATA}), pointer(scip), array(readerptr), name, desc, extension, pointer(readerdata))
#SCIPsetPricerPriority(scip::SCIP_t, pricer::SCIP_PRICER_t, priority) = @scip_ccall_check("SCIPsetPricerPriority", (Ptr{SCIP}, Ptr{SCIP_PRICER}, Int), pointer(scip), pointer(pricer), priority)
#SCIPactivatePricer(scip::SCIP_t, pricer::SCIP_PRICER_t) = @scip_ccall_check("SCIPactivatePricer", (Ptr{SCIP}, Ptr{SCIP_PRICER}), pointer(scip), pointer(pricer))
#SCIPdeactivatePricer(scip::SCIP_t, pricer::SCIP_PRICER_t) = @scip_ccall_check("SCIPdeactivatePricer", (Ptr{SCIP}, Ptr{SCIP_PRICER}), pointer(scip), pointer(pricer))
#SCIPsetConflicthdlrPriority(scip::SCIP_t, conflicthdlr::SCIP_CONFLICTHDLR_t, priority) = @scip_ccall_check("SCIPsetConflicthdlrPriority", (Ptr{SCIP}, Ptr{SCIP_CONFLICTHDLR}, Int), pointer(scip), pointer(conflicthdlr), priority)
#SCIPsetPresolPriority(scip::SCIP_t, presol::SCIP_PRESOL_t, priority) = @scip_ccall_check("SCIPsetPresolPriority", (Ptr{SCIP}, Ptr{SCIP_PRESOL}, Int), pointer(scip), pointer(presol), priority)
#SCIPsetRelaxPriority(scip::SCIP_t, relax::SCIP_RELAX_t, priority) = @scip_ccall_check("SCIPsetRelaxPriority", (Ptr{SCIP}, Ptr{SCIP_RELAX}, Int), pointer(scip), pointer(relax), priority)
#SCIPsetSepaPriority(scip::SCIP_t, sepa::SCIP_SEPA_t, priority) = @scip_ccall_check("SCIPsetSepaPriority", (Ptr{SCIP}, Ptr{SCIP_SEPA}, Int), pointer(scip), pointer(sepa), priority)
#SCIPsetPropPriority(scip::SCIP_t, prop::SCIP_PROP_t, priority) = @scip_ccall_check("SCIPsetPropPriority", (Ptr{SCIP}, Ptr{SCIP_PROP}, Int), pointer(scip), pointer(prop), priority)
#SCIPsetPropPresolPriority(scip::SCIP_t, prop::SCIP_PROP_t, presolpriority) = @scip_ccall_check("SCIPsetPropPresolPriority", (Ptr{SCIP}, Ptr{SCIP_PROP}, Int), pointer(scip), pointer(prop), presolpriority)
#SCIPsetHeurPriority(scip::SCIP_t, heur::SCIP_HEUR_t, priority) = @scip_ccall_check("SCIPsetHeurPriority", (Ptr{SCIP}, Ptr{SCIP_HEUR}, Int), pointer(scip), pointer(heur), priority)
#SCIPsetNodeselStdPriority(scip::SCIP_t, nodesel::SCIP_NODESEL_t, priority) = @scip_ccall_check("SCIPsetNodeselStdPriority", (Ptr{SCIP}, Ptr{SCIP_NODESEL}, Int), pointer(scip), pointer(nodesel), priority)
#SCIPsetNodeselMemsavePriority(scip::SCIP_t, nodesel::SCIP_NODESEL_t, priority) = @scip_ccall_check("SCIPsetNodeselMemsavePriority", (Ptr{SCIP}, Ptr{SCIP_NODESEL}, Int), pointer(scip), pointer(nodesel), priority)
#SCIPincludeBranchruleBasic(scip::SCIP_t, branchruleptr::SCIP_BRANCHRULE_t, name, desc, priority, maxdepth, maxbounddist::SCIP_Real, branchruledata::SCIP_BRANCHRULEDATA_t) = @scip_ccall_check("SCIPincludeBranchruleBasic", (Ptr{SCIP}, Ptr{Ptr{SCIP_BRANCHRULE}}, String, String, Int, Int, SCIP_Real, Ptr{SCIP_BRANCHRULEDATA}), pointer(scip), array(branchruleptr), name, desc, priority, maxdepth, maxbounddist, pointer(branchruledata))
#SCIPsetBranchrulePriority(scip::SCIP_t, branchrule::SCIP_BRANCHRULE_t, priority) = @scip_ccall_check("SCIPsetBranchrulePriority", (Ptr{SCIP}, Ptr{SCIP_BRANCHRULE}, Int), pointer(scip), pointer(branchrule), priority)
#SCIPsetBranchruleMaxdepth(scip::SCIP_t, branchrule::SCIP_BRANCHRULE_t, maxdepth) = @scip_ccall_check("SCIPsetBranchruleMaxdepth", (Ptr{SCIP}, Ptr{SCIP_BRANCHRULE}, Int), pointer(scip), pointer(branchrule), maxdepth)
#SCIPsetBranchruleMaxbounddist(scip::SCIP_t, branchrule::SCIP_BRANCHRULE_t, maxbounddist::SCIP_Real) = @scip_ccall_check("SCIPsetBranchruleMaxbounddist", (Ptr{SCIP}, Ptr{SCIP_BRANCHRULE}, SCIP_Real), pointer(scip), pointer(branchrule), maxbounddist)
#SCIPautoselectDisps(scip::SCIP_t) = @scip_ccall_check("SCIPautoselectDisps", (Ptr{SCIP},), pointer(scip))
#SCIPincludeNlpi(scip::SCIP_t, nlpi::SCIP_NLPI_t) = @scip_ccall_check("SCIPincludeNlpi", (Ptr{SCIP}, Ptr{SCIP_NLPI}), pointer(scip), pointer(nlpi))
#SCIPsetNlpiPriority(scip::SCIP_t, nlpi::SCIP_NLPI_t, priority) = @scip_ccall_check("SCIPsetNlpiPriority", (Ptr{SCIP}, Ptr{SCIP_NLPI}, Int), pointer(scip), pointer(nlpi), priority)
#SCIPincludeExternalCodeInformation(scip::SCIP_t, name, description) = @scip_ccall_check("SCIPincludeExternalCodeInformation", (Ptr{SCIP}, String, String), pointer(scip), name, description)
#SCIPcaptureDialog(scip::SCIP_t, dialog::SCIP_DIALOG_t) = @scip_ccall_check("SCIPcaptureDialog", (Ptr{SCIP}, Ptr{SCIP_DIALOG}), pointer(scip), pointer(dialog))
#SCIPreleaseDialog(scip::SCIP_t, dialog::SCIP_DIALOG_t) = @scip_ccall_check("SCIPreleaseDialog", (Ptr{SCIP}, Ptr{Ptr{SCIP_DIALOG}}), pointer(scip), array(dialog))
#SCIPsetRootDialog(scip::SCIP_t, dialog::SCIP_DIALOG_t) = @scip_ccall_check("SCIPsetRootDialog", (Ptr{SCIP}, Ptr{SCIP_DIALOG}), pointer(scip), pointer(dialog))
#SCIPaddDialogEntry(scip::SCIP_t, dialog::SCIP_DIALOG_t, subdialog::SCIP_DIALOG_t) = @scip_ccall_check("SCIPaddDialogEntry", (Ptr{SCIP}, Ptr{SCIP_DIALOG}, Ptr{SCIP_DIALOG}), pointer(scip), pointer(dialog), pointer(subdialog))
#SCIPaddDialogInputLine(scip::SCIP_t, inputline) = @scip_ccall_check("SCIPaddDialogInputLine", (Ptr{SCIP}, String), pointer(scip), inputline)
#SCIPaddDialogHistoryLine(scip::SCIP_t, inputline) = @scip_ccall_check("SCIPaddDialogHistoryLine", (Ptr{SCIP}, String), pointer(scip), inputline)
#SCIPstartInteraction(scip::SCIP_t) = @scip_ccall_check("SCIPstartInteraction", (Ptr{SCIP},), pointer(scip))
#SCIPcreateProbBasic(scip::SCIP_t, name) = @scip_ccall_check("SCIPcreateProbBasic", (Ptr{SCIP}, String), pointer(scip), name)
#SCIPreadProb(scip::SCIP_t, filename, extension) = @scip_ccall_check("SCIPreadProb", (Ptr{SCIP}, String, String), pointer(scip), filename, extension)
#SCIPwriteOrigProblem(scip::SCIP_t, filename, extension, genericnames::SCIP_Bool) = @scip_ccall_check("SCIPwriteOrigProblem", (Ptr{SCIP}, String, String, SCIP_Bool), pointer(scip), filename, extension, genericnames)
#SCIPwriteTransProblem(scip::SCIP_t, filename, extension, genericnames::SCIP_Bool) = @scip_ccall_check("SCIPwriteTransProblem", (Ptr{SCIP}, String, String, SCIP_Bool), pointer(scip), filename, extension, genericnames)
#SCIPfreeProb(scip::SCIP_t) = @scip_ccall_check("SCIPfreeProb", (Ptr{SCIP},), pointer(scip))
#SCIPpermuteProb(scip::SCIP_t, randseed, permuteconss::SCIP_Bool, permutebinvars::SCIP_Bool, permuteintvars::SCIP_Bool, permuteimplvars::SCIP_Bool, permutecontvars::SCIP_Bool) = @scip_ccall_check("SCIPpermuteProb", (Ptr{SCIP}, Uint, SCIP_Bool, SCIP_Bool, SCIP_Bool, SCIP_Bool, SCIP_Bool), pointer(scip), randseed, permuteconss, permutebinvars, permuteintvars, permuteimplvars, permutecontvars)
#SCIPsetProbData(scip::SCIP_t, probdata::SCIP_PROBDATA_t) = @scip_ccall_check("SCIPsetProbData", (Ptr{SCIP}, Ptr{SCIP_PROBDATA}), pointer(scip), pointer(probdata))
#SCIPsetProbName(scip::SCIP_t, name) = @scip_ccall_check("SCIPsetProbName", (Ptr{SCIP}, String), pointer(scip), name)
#SCIPsetObjsense(scip::SCIP_t, objsense::SCIP_OBJSENSE) = @scip_ccall_check("SCIPsetObjsense", (Ptr{SCIP}, SCIP_OBJSENSE), pointer(scip), objsense)
#SCIPaddObjoffset(scip::SCIP_t, addval::SCIP_Real) = @scip_ccall_check("SCIPaddObjoffset", (Ptr{SCIP}, SCIP_Real), pointer(scip), addval)
#SCIPaddOrigObjoffset(scip::SCIP_t, addval::SCIP_Real) = @scip_ccall_check("SCIPaddOrigObjoffset", (Ptr{SCIP}, SCIP_Real), pointer(scip), addval)
#SCIPsetObjlimit(scip::SCIP_t, objlimit::SCIP_Real) = @scip_ccall_check("SCIPsetObjlimit", (Ptr{SCIP}, SCIP_Real), pointer(scip), objlimit)
#SCIPsetObjIntegral(scip::SCIP_t) = @scip_ccall_check("SCIPsetObjIntegral", (Ptr{SCIP},), pointer(scip))
#SCIPaddVar(scip::SCIP_t, var::SCIP_VAR_t) = @scip_ccall_check("SCIPaddVar", (Ptr{SCIP}, Ptr{SCIP_VAR}), pointer(scip), pointer(var))
#SCIPaddPricedVar(scip::SCIP_t, var::SCIP_VAR_t, score::SCIP_Real) = @scip_ccall_check("SCIPaddPricedVar", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), pointer(scip), pointer(var), score)
#SCIPdelVar(scip::SCIP_t, var::SCIP_VAR_t, deleted::SCIP_Bool_t) = @scip_ccall_check("SCIPdelVar", (Ptr{SCIP}, Ptr{SCIP_VAR}, Ptr{SCIP_Bool}), pointer(scip), pointer(var), pointer(deleted))
#SCIPaddCons(scip::SCIP_t, cons::SCIP_CONS_t) = @scip_ccall_check("SCIPaddCons", (Ptr{SCIP}, Ptr{SCIP_CONS}), pointer(scip), pointer(cons))
#SCIPdelCons(scip::SCIP_t, cons::SCIP_CONS_t) = @scip_ccall_check("SCIPdelCons", (Ptr{SCIP}, Ptr{SCIP_CONS}), pointer(scip), pointer(cons))
#SCIPaddConsNode(scip::SCIP_t, node::SCIP_NODE_t, cons::SCIP_CONS_t, validnode::SCIP_NODE_t) = @scip_ccall_check("SCIPaddConsNode", (Ptr{SCIP}, Ptr{SCIP_NODE}, Ptr{SCIP_CONS}, Ptr{SCIP_NODE}), pointer(scip), pointer(node), pointer(cons), pointer(validnode))
#SCIPaddConsLocal(scip::SCIP_t, cons::SCIP_CONS_t, validnode::SCIP_NODE_t) = @scip_ccall_check("SCIPaddConsLocal", (Ptr{SCIP}, Ptr{SCIP_CONS}, Ptr{SCIP_NODE}), pointer(scip), pointer(cons), pointer(validnode))
#SCIPdelConsNode(scip::SCIP_t, node::SCIP_NODE_t, cons::SCIP_CONS_t) = @scip_ccall_check("SCIPdelConsNode", (Ptr{SCIP}, Ptr{SCIP_NODE}, Ptr{SCIP_CONS}), pointer(scip), pointer(node), pointer(cons))
#SCIPdelConsLocal(scip::SCIP_t, cons::SCIP_CONS_t) = @scip_ccall_check("SCIPdelConsLocal", (Ptr{SCIP}, Ptr{SCIP_CONS}), pointer(scip), pointer(cons))
#SCIPupdateLocalDualbound(scip::SCIP_t, newbound::SCIP_Real) = @scip_ccall_check("SCIPupdateLocalDualbound", (Ptr{SCIP}, SCIP_Real), pointer(scip), newbound)
#SCIPupdateLocalLowerbound(scip::SCIP_t, newbound::SCIP_Real) = @scip_ccall_check("SCIPupdateLocalLowerbound", (Ptr{SCIP}, SCIP_Real), pointer(scip), newbound)
#SCIPupdateNodeDualbound(scip::SCIP_t, node::SCIP_NODE_t, newbound::SCIP_Real) = @scip_ccall_check("SCIPupdateNodeDualbound", (Ptr{SCIP}, Ptr{SCIP_NODE}, SCIP_Real), pointer(scip), pointer(node), newbound)
#SCIPupdateNodeLowerbound(scip::SCIP_t, node::SCIP_NODE_t, newbound::SCIP_Real) = @scip_ccall_check("SCIPupdateNodeLowerbound", (Ptr{SCIP}, Ptr{SCIP_NODE}, SCIP_Real), pointer(scip), pointer(node), newbound)
#SCIPchgChildPrio(scip::SCIP_t, child::SCIP_NODE_t, priority::SCIP_Real) = @scip_ccall_check("SCIPchgChildPrio", (Ptr{SCIP}, Ptr{SCIP_NODE}, SCIP_Real), pointer(scip), pointer(child), priority)
#SCIPtransformProb(scip::SCIP_t) = @scip_ccall_check("SCIPtransformProb", (Ptr{SCIP},), pointer(scip))
#SCIPpresolve(scip::SCIP_t) = @scip_ccall_check("SCIPpresolve", (Ptr{SCIP},), pointer(scip))
#SCIPsolve(scip::SCIP_t) = @scip_ccall_check("SCIPsolve", (Ptr{SCIP},), pointer(scip))
#SCIPfreeSolve(scip::SCIP_t, restart::SCIP_Bool) = @scip_ccall_check("SCIPfreeSolve", (Ptr{SCIP}, SCIP_Bool), pointer(scip), restart)
#SCIPfreeTransform(scip::SCIP_t) = @scip_ccall_check("SCIPfreeTransform", (Ptr{SCIP},), pointer(scip))
#SCIPinterruptSolve(scip::SCIP_t) = @scip_ccall_check("SCIPinterruptSolve", (Ptr{SCIP},), pointer(scip))
#SCIPrestartSolve(scip::SCIP_t) = @scip_ccall_check("SCIPrestartSolve", (Ptr{SCIP},), pointer(scip))
#SCIPcreateVarBasic(scip::SCIP_t, var::SCIP_VAR_t, name, lb::SCIP_Real, ub::SCIP_Real, obj::SCIP_Real, vartype::SCIP_VARTYPE) = @scip_ccall_check("SCIPcreateVarBasic", (Ptr{SCIP}, Ptr{Ptr{SCIP_VAR}}, String, SCIP_Real, SCIP_Real, SCIP_Real, SCIP_VARTYPE), pointer(scip), array(var), name, lb, ub, obj, vartype)
#SCIPcaptureVar(scip::SCIP_t, var::SCIP_VAR_t) = @scip_ccall_check("SCIPcaptureVar", (Ptr{SCIP}, Ptr{SCIP_VAR}), pointer(scip), pointer(var))
#SCIPreleaseVar(scip::SCIP_t, var::SCIP_VAR_t) = @scip_ccall_check("SCIPreleaseVar", (Ptr{SCIP}, Ptr{Ptr{SCIP_VAR}}), pointer(scip), array(var))
#SCIPchgVarName(scip::SCIP_t, var::SCIP_VAR_t, name) = @scip_ccall_check("SCIPchgVarName", (Ptr{SCIP}, Ptr{SCIP_VAR}, String), pointer(scip), pointer(var), name)
#SCIPtransformVar(scip::SCIP_t, var::SCIP_VAR_t, transvar::SCIP_VAR_t) = @scip_ccall_check("SCIPtransformVar", (Ptr{SCIP}, Ptr{SCIP_VAR}, Ptr{Ptr{SCIP_VAR}}), pointer(scip), pointer(var), array(transvar))
#SCIPtransformVars(scip::SCIP_t, nvars, vars::SCIP_VAR_t, transvars::SCIP_VAR_t) = @scip_ccall_check("SCIPtransformVars", (Ptr{SCIP}, Int, Ptr{Ptr{SCIP_VAR}}, Ptr{Ptr{SCIP_VAR}}), pointer(scip), nvars, array(vars), array(transvars))
#SCIPgetTransformedVar(scip::SCIP_t, var::SCIP_VAR_t, transvar::SCIP_VAR_t) = @scip_ccall_check("SCIPgetTransformedVar", (Ptr{SCIP}, Ptr{SCIP_VAR}, Ptr{Ptr{SCIP_VAR}}), pointer(scip), pointer(var), array(transvar))
#SCIPgetTransformedVars(scip::SCIP_t, nvars, vars::SCIP_VAR_t, transvars::SCIP_VAR_t) = @scip_ccall_check("SCIPgetTransformedVars", (Ptr{SCIP}, Int, Ptr{Ptr{SCIP_VAR}}, Ptr{Ptr{SCIP_VAR}}), pointer(scip), nvars, array(vars), array(transvars))
#SCIPgetNegatedVar(scip::SCIP_t, var::SCIP_VAR_t, negvar::SCIP_VAR_t) = @scip_ccall_check("SCIPgetNegatedVar", (Ptr{SCIP}, Ptr{SCIP_VAR}, Ptr{Ptr{SCIP_VAR}}), pointer(scip), pointer(var), array(negvar))
#SCIPgetNegatedVars(scip::SCIP_t, nvars, vars::SCIP_VAR_t, negvars::SCIP_VAR_t) = @scip_ccall_check("SCIPgetNegatedVars", (Ptr{SCIP}, Int, Ptr{Ptr{SCIP_VAR}}, Ptr{Ptr{SCIP_VAR}}), pointer(scip), nvars, array(vars), array(negvars))
#SCIPgetBinvarRepresentative(scip::SCIP_t, var::SCIP_VAR_t, repvar::SCIP_VAR_t, negated::SCIP_Bool_t) = @scip_ccall_check("SCIPgetBinvarRepresentative", (Ptr{SCIP}, Ptr{SCIP_VAR}, Ptr{Ptr{SCIP_VAR}}, Ptr{SCIP_Bool}), pointer(scip), pointer(var), array(repvar), pointer(negated))
#SCIPgetBinvarRepresentatives(scip::SCIP_t, nvars, vars::SCIP_VAR_t, repvars::SCIP_VAR_t, negated::SCIP_Bool_t) = @scip_ccall_check("SCIPgetBinvarRepresentatives", (Ptr{SCIP}, Int, Ptr{Ptr{SCIP_VAR}}, Ptr{Ptr{SCIP_VAR}}, Ptr{SCIP_Bool}), pointer(scip), nvars, array(vars), array(repvars), pointer(negated))
#SCIPflattenVarAggregationGraph(scip::SCIP_t, var::SCIP_VAR_t) = @scip_ccall_check("SCIPflattenVarAggregationGraph", (Ptr{SCIP}, Ptr{SCIP_VAR}), pointer(scip), pointer(var))
#SCIPgetProbvarSum(scip::SCIP_t, var::SCIP_VAR_t, scalar::SCIP_Real_t, constant::SCIP_Real_t) = @scip_ccall_check("SCIPgetProbvarSum", (Ptr{SCIP}, Ptr{Ptr{SCIP_VAR}}, Ptr{SCIP_Real}, Ptr{SCIP_Real}), pointer(scip), array(var), pointer(scalar), pointer(constant))
#SCIPgetVarSols(scip::SCIP_t, nvars, vars::SCIP_VAR_t, vals::SCIP_Real_t) = @scip_ccall_check("SCIPgetVarSols", (Ptr{SCIP}, Int, Ptr{Ptr{SCIP_VAR}}, Ptr{SCIP_Real}), pointer(scip), nvars, array(vars), pointer(vals))
#SCIPclearRelaxSolVals(scip::SCIP_t) = @scip_ccall_check("SCIPclearRelaxSolVals", (Ptr{SCIP},), pointer(scip))
#SCIPsetRelaxSolVal(scip::SCIP_t, var::SCIP_VAR_t, val::SCIP_Real) = @scip_ccall_check("SCIPsetRelaxSolVal", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), pointer(scip), pointer(var), val)
#SCIPsetRelaxSolVals(scip::SCIP_t, nvars, vars::SCIP_VAR_t, vals::SCIP_Real_t) = @scip_ccall_check("SCIPsetRelaxSolVals", (Ptr{SCIP}, Int, Ptr{Ptr{SCIP_VAR}}, Ptr{SCIP_Real}), pointer(scip), nvars, array(vars), pointer(vals))
#SCIPsetRelaxSolValsSol(scip::SCIP_t, sol::SCIP_SOL_t) = @scip_ccall_check("SCIPsetRelaxSolValsSol", (Ptr{SCIP}, Ptr{SCIP_SOL}), pointer(scip), pointer(sol))
#SCIPmarkRelaxSolValid(scip::SCIP_t) = @scip_ccall_check("SCIPmarkRelaxSolValid", (Ptr{SCIP},), pointer(scip))
#SCIPmarkRelaxSolInvalid(scip::SCIP_t) = @scip_ccall_check("SCIPmarkRelaxSolInvalid", (Ptr{SCIP},), pointer(scip))
#SCIPstartStrongbranch(scip::SCIP_t, enablepropagation::SCIP_Bool) = @scip_ccall_check("SCIPstartStrongbranch", (Ptr{SCIP}, SCIP_Bool), pointer(scip), enablepropagation)
#SCIPendStrongbranch(scip::SCIP_t) = @scip_ccall_check("SCIPendStrongbranch", (Ptr{SCIP},), pointer(scip))
#SCIPgetVarStrongbranchFrac(scip::SCIP_t, var::SCIP_VAR_t, itlim, down::SCIP_Real_t, up::SCIP_Real_t, downvalid::SCIP_Bool_t, upvalid::SCIP_Bool_t, downinf::SCIP_Bool_t, upinf::SCIP_Bool_t, downconflict::SCIP_Bool_t, upconflict::SCIP_Bool_t, lperror::SCIP_Bool_t) = @scip_ccall_check("SCIPgetVarStrongbranchFrac", (Ptr{SCIP}, Ptr{SCIP_VAR}, Int, Ptr{SCIP_Real}, Ptr{SCIP_Real}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}), pointer(scip), pointer(var), itlim, pointer(down), pointer(up), pointer(downvalid), pointer(upvalid), pointer(downinf), pointer(upinf), pointer(downconflict), pointer(upconflict), pointer(lperror))
#SCIPgetVarStrongbranchWithPropagation(scip::SCIP_t, var::SCIP_VAR_t, solval::SCIP_Real, lpobjval::SCIP_Real, itlim, maxproprounds, down::SCIP_Real_t, up::SCIP_Real_t, downvalid::SCIP_Bool_t, upvalid::SCIP_Bool_t, downinf::SCIP_Bool_t, upinf::SCIP_Bool_t, downconflict::SCIP_Bool_t, upconflict::SCIP_Bool_t, lperror::SCIP_Bool_t, newlbs::SCIP_Real_t, newubs::SCIP_Real_t) = @scip_ccall_check("SCIPgetVarStrongbranchWithPropagation", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real, SCIP_Real, Int, Int, Ptr{SCIP_Real}, Ptr{SCIP_Real}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}, Ptr{SCIP_Real}, Ptr{SCIP_Real}), pointer(scip), pointer(var), solval, lpobjval, itlim, maxproprounds, pointer(down), pointer(up), pointer(downvalid), pointer(upvalid), pointer(downinf), pointer(upinf), pointer(downconflict), pointer(upconflict), pointer(lperror), pointer(newlbs), pointer(newubs))
#SCIPgetVarStrongbranchInt(scip::SCIP_t, var::SCIP_VAR_t, itlim, down::SCIP_Real_t, up::SCIP_Real_t, downvalid::SCIP_Bool_t, upvalid::SCIP_Bool_t, downinf::SCIP_Bool_t, upinf::SCIP_Bool_t, downconflict::SCIP_Bool_t, upconflict::SCIP_Bool_t, lperror::SCIP_Bool_t) = @scip_ccall_check("SCIPgetVarStrongbranchInt", (Ptr{SCIP}, Ptr{SCIP_VAR}, Int, Ptr{SCIP_Real}, Ptr{SCIP_Real}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}), pointer(scip), pointer(var), itlim, pointer(down), pointer(up), pointer(downvalid), pointer(upvalid), pointer(downinf), pointer(upinf), pointer(downconflict), pointer(upconflict), pointer(lperror))
#SCIPgetVarsStrongbranchesFrac(scip::SCIP_t, vars::SCIP_VAR_t, nvars, itlim, down::SCIP_Real_t, up::SCIP_Real_t, downvalid::SCIP_Bool_t, upvalid::SCIP_Bool_t, downinf::SCIP_Bool_t, upinf::SCIP_Bool_t, downconflict::SCIP_Bool_t, upconflict::SCIP_Bool_t, lperror::SCIP_Bool_t) = @scip_ccall_check("SCIPgetVarsStrongbranchesFrac", (Ptr{SCIP}, Ptr{Ptr{SCIP_VAR}}, Int, Int, Ptr{SCIP_Real}, Ptr{SCIP_Real}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}), pointer(scip), array(vars), nvars, itlim, pointer(down), pointer(up), pointer(downvalid), pointer(upvalid), pointer(downinf), pointer(upinf), pointer(downconflict), pointer(upconflict), pointer(lperror))
#SCIPgetVarsStrongbranchesInt(scip::SCIP_t, vars::SCIP_VAR_t, nvars, itlim, down::SCIP_Real_t, up::SCIP_Real_t, downvalid::SCIP_Bool_t, upvalid::SCIP_Bool_t, downinf::SCIP_Bool_t, upinf::SCIP_Bool_t, downconflict::SCIP_Bool_t, upconflict::SCIP_Bool_t, lperror::SCIP_Bool_t) = @scip_ccall_check("SCIPgetVarsStrongbranchesInt", (Ptr{SCIP}, Ptr{Ptr{SCIP_VAR}}, Int, Int, Ptr{SCIP_Real}, Ptr{SCIP_Real}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}), pointer(scip), array(vars), nvars, itlim, pointer(down), pointer(up), pointer(downvalid), pointer(upvalid), pointer(downinf), pointer(upinf), pointer(downconflict), pointer(upconflict), pointer(lperror))
#SCIPgetVarStrongbranchLast(scip::SCIP_t, var::SCIP_VAR_t, down::SCIP_Real_t, up::SCIP_Real_t, downvalid::SCIP_Bool_t, upvalid::SCIP_Bool_t, solval::SCIP_Real_t, lpobjval::SCIP_Real_t) = @scip_ccall_check("SCIPgetVarStrongbranchLast", (Ptr{SCIP}, Ptr{SCIP_VAR}, Ptr{SCIP_Real}, Ptr{SCIP_Real}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}, Ptr{SCIP_Real}, Ptr{SCIP_Real}), pointer(scip), pointer(var), pointer(down), pointer(up), pointer(downvalid), pointer(upvalid), pointer(solval), pointer(lpobjval))
#SCIPaddVarLocks(scip::SCIP_t, var::SCIP_VAR_t, nlocksdown, nlocksup) = @scip_ccall_check("SCIPaddVarLocks", (Ptr{SCIP}, Ptr{SCIP_VAR}, Int, Int), pointer(scip), pointer(var), nlocksdown, nlocksup)
#SCIPlockVarCons(scip::SCIP_t, var::SCIP_VAR_t, cons::SCIP_CONS_t, lockdown::SCIP_Bool, lockup::SCIP_Bool) = @scip_ccall_check("SCIPlockVarCons", (Ptr{SCIP}, Ptr{SCIP_VAR}, Ptr{SCIP_CONS}, SCIP_Bool, SCIP_Bool), pointer(scip), pointer(var), pointer(cons), lockdown, lockup)
#SCIPunlockVarCons(scip::SCIP_t, var::SCIP_VAR_t, cons::SCIP_CONS_t, lockdown::SCIP_Bool, lockup::SCIP_Bool) = @scip_ccall_check("SCIPunlockVarCons", (Ptr{SCIP}, Ptr{SCIP_VAR}, Ptr{SCIP_CONS}, SCIP_Bool, SCIP_Bool), pointer(scip), pointer(var), pointer(cons), lockdown, lockup)
#SCIPchgVarObj(scip::SCIP_t, var::SCIP_VAR_t, newobj::SCIP_Real) = @scip_ccall_check("SCIPchgVarObj", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), pointer(scip), pointer(var), newobj)
#SCIPaddVarObj(scip::SCIP_t, var::SCIP_VAR_t, addobj::SCIP_Real) = @scip_ccall_check("SCIPaddVarObj", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), pointer(scip), pointer(var), addobj)
#SCIPchgVarLb(scip::SCIP_t, var::SCIP_VAR_t, newbound::SCIP_Real) = @scip_ccall_check("SCIPchgVarLb", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), pointer(scip), pointer(var), newbound)
#SCIPchgVarUb(scip::SCIP_t, var::SCIP_VAR_t, newbound::SCIP_Real) = @scip_ccall_check("SCIPchgVarUb", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), pointer(scip), pointer(var), newbound)
#SCIPchgVarLbNode(scip::SCIP_t, node::SCIP_NODE_t, var::SCIP_VAR_t, newbound::SCIP_Real) = @scip_ccall_check("SCIPchgVarLbNode", (Ptr{SCIP}, Ptr{SCIP_NODE}, Ptr{SCIP_VAR}, SCIP_Real), pointer(scip), pointer(node), pointer(var), newbound)
#SCIPchgVarUbNode(scip::SCIP_t, node::SCIP_NODE_t, var::SCIP_VAR_t, newbound::SCIP_Real) = @scip_ccall_check("SCIPchgVarUbNode", (Ptr{SCIP}, Ptr{SCIP_NODE}, Ptr{SCIP_VAR}, SCIP_Real), pointer(scip), pointer(node), pointer(var), newbound)
#SCIPchgVarLbGlobal(scip::SCIP_t, var::SCIP_VAR_t, newbound::SCIP_Real) = @scip_ccall_check("SCIPchgVarLbGlobal", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), pointer(scip), pointer(var), newbound)
#SCIPchgVarUbGlobal(scip::SCIP_t, var::SCIP_VAR_t, newbound::SCIP_Real) = @scip_ccall_check("SCIPchgVarUbGlobal", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), pointer(scip), pointer(var), newbound)
#SCIPchgVarLbLazy(scip::SCIP_t, var::SCIP_VAR_t, lazylb::SCIP_Real) = @scip_ccall_check("SCIPchgVarLbLazy", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), pointer(scip), pointer(var), lazylb)
#SCIPchgVarUbLazy(scip::SCIP_t, var::SCIP_VAR_t, lazyub::SCIP_Real) = @scip_ccall_check("SCIPchgVarUbLazy", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), pointer(scip), pointer(var), lazyub)
#SCIPtightenVarLb(scip::SCIP_t, var::SCIP_VAR_t, newbound::SCIP_Real, force::SCIP_Bool, infeasible::SCIP_Bool_t, tightened::SCIP_Bool_t) = @scip_ccall_check("SCIPtightenVarLb", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real, SCIP_Bool, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}), pointer(scip), pointer(var), newbound, force, pointer(infeasible), pointer(tightened))
#SCIPtightenVarUb(scip::SCIP_t, var::SCIP_VAR_t, newbound::SCIP_Real, force::SCIP_Bool, infeasible::SCIP_Bool_t, tightened::SCIP_Bool_t) = @scip_ccall_check("SCIPtightenVarUb", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real, SCIP_Bool, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}), pointer(scip), pointer(var), newbound, force, pointer(infeasible), pointer(tightened))
#SCIPinferVarLbCons(scip::SCIP_t, var::SCIP_VAR_t, newbound::SCIP_Real, infercons::SCIP_CONS_t, inferinfo, force::SCIP_Bool, infeasible::SCIP_Bool_t, tightened::SCIP_Bool_t) = @scip_ccall_check("SCIPinferVarLbCons", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real, Ptr{SCIP_CONS}, Int, SCIP_Bool, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}), pointer(scip), pointer(var), newbound, pointer(infercons), inferinfo, force, pointer(infeasible), pointer(tightened))
#SCIPinferVarUbCons(scip::SCIP_t, var::SCIP_VAR_t, newbound::SCIP_Real, infercons::SCIP_CONS_t, inferinfo, force::SCIP_Bool, infeasible::SCIP_Bool_t, tightened::SCIP_Bool_t) = @scip_ccall_check("SCIPinferVarUbCons", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real, Ptr{SCIP_CONS}, Int, SCIP_Bool, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}), pointer(scip), pointer(var), newbound, pointer(infercons), inferinfo, force, pointer(infeasible), pointer(tightened))
#SCIPinferBinvarCons(scip::SCIP_t, var::SCIP_VAR_t, fixedval::SCIP_Bool, infercons::SCIP_CONS_t, inferinfo, infeasible::SCIP_Bool_t, tightened::SCIP_Bool_t) = @scip_ccall_check("SCIPinferBinvarCons", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Bool, Ptr{SCIP_CONS}, Int, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}), pointer(scip), pointer(var), fixedval, pointer(infercons), inferinfo, pointer(infeasible), pointer(tightened))
#SCIPinferVarLbProp(scip::SCIP_t, var::SCIP_VAR_t, newbound::SCIP_Real, inferprop::SCIP_PROP_t, inferinfo, force::SCIP_Bool, infeasible::SCIP_Bool_t, tightened::SCIP_Bool_t) = @scip_ccall_check("SCIPinferVarLbProp", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real, Ptr{SCIP_PROP}, Int, SCIP_Bool, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}), pointer(scip), pointer(var), newbound, pointer(inferprop), inferinfo, force, pointer(infeasible), pointer(tightened))
#SCIPinferVarUbProp(scip::SCIP_t, var::SCIP_VAR_t, newbound::SCIP_Real, inferprop::SCIP_PROP_t, inferinfo, force::SCIP_Bool, infeasible::SCIP_Bool_t, tightened::SCIP_Bool_t) = @scip_ccall_check("SCIPinferVarUbProp", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real, Ptr{SCIP_PROP}, Int, SCIP_Bool, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}), pointer(scip), pointer(var), newbound, pointer(inferprop), inferinfo, force, pointer(infeasible), pointer(tightened))
#SCIPinferBinvarProp(scip::SCIP_t, var::SCIP_VAR_t, fixedval::SCIP_Bool, inferprop::SCIP_PROP_t, inferinfo, infeasible::SCIP_Bool_t, tightened::SCIP_Bool_t) = @scip_ccall_check("SCIPinferBinvarProp", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Bool, Ptr{SCIP_PROP}, Int, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}), pointer(scip), pointer(var), fixedval, pointer(inferprop), inferinfo, pointer(infeasible), pointer(tightened))
#SCIPtightenVarLbGlobal(scip::SCIP_t, var::SCIP_VAR_t, newbound::SCIP_Real, force::SCIP_Bool, infeasible::SCIP_Bool_t, tightened::SCIP_Bool_t) = @scip_ccall_check("SCIPtightenVarLbGlobal", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real, SCIP_Bool, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}), pointer(scip), pointer(var), newbound, force, pointer(infeasible), pointer(tightened))
#SCIPtightenVarUbGlobal(scip::SCIP_t, var::SCIP_VAR_t, newbound::SCIP_Real, force::SCIP_Bool, infeasible::SCIP_Bool_t, tightened::SCIP_Bool_t) = @scip_ccall_check("SCIPtightenVarUbGlobal", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real, SCIP_Bool, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}), pointer(scip), pointer(var), newbound, force, pointer(infeasible), pointer(tightened))
#SCIPwriteCliqueGraph(scip::SCIP_t, fname, writeimplications::SCIP_Bool, writenodeweights::SCIP_Bool) = @scip_ccall_check("SCIPwriteCliqueGraph", (Ptr{SCIP}, String, SCIP_Bool, SCIP_Bool), pointer(scip), fname, writeimplications, writenodeweights)
#SCIPchgVarBranchFactor(scip::SCIP_t, var::SCIP_VAR_t, branchfactor::SCIP_Real) = @scip_ccall_check("SCIPchgVarBranchFactor", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), pointer(scip), pointer(var), branchfactor)
#SCIPscaleVarBranchFactor(scip::SCIP_t, var::SCIP_VAR_t, scale::SCIP_Real) = @scip_ccall_check("SCIPscaleVarBranchFactor", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), pointer(scip), pointer(var), scale)
#SCIPaddVarBranchFactor(scip::SCIP_t, var::SCIP_VAR_t, addfactor::SCIP_Real) = @scip_ccall_check("SCIPaddVarBranchFactor", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), pointer(scip), pointer(var), addfactor)
#SCIPchgVarBranchPriority(scip::SCIP_t, var::SCIP_VAR_t, branchpriority) = @scip_ccall_check("SCIPchgVarBranchPriority", (Ptr{SCIP}, Ptr{SCIP_VAR}, Int), pointer(scip), pointer(var), branchpriority)
#SCIPupdateVarBranchPriority(scip::SCIP_t, var::SCIP_VAR_t, branchpriority) = @scip_ccall_check("SCIPupdateVarBranchPriority", (Ptr{SCIP}, Ptr{SCIP_VAR}, Int), pointer(scip), pointer(var), branchpriority)
#SCIPaddVarBranchPriority(scip::SCIP_t, var::SCIP_VAR_t, addpriority) = @scip_ccall_check("SCIPaddVarBranchPriority", (Ptr{SCIP}, Ptr{SCIP_VAR}, Int), pointer(scip), pointer(var), addpriority)
#SCIPchgVarBranchDirection(scip::SCIP_t, var::SCIP_VAR_t, branchdirection::SCIP_BRANCHDIR) = @scip_ccall_check("SCIPchgVarBranchDirection", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_BRANCHDIR), pointer(scip), pointer(var), branchdirection)
#SCIPchgVarType(scip::SCIP_t, var::SCIP_VAR_t, vartype::SCIP_VARTYPE, infeasible::SCIP_Bool_t) = @scip_ccall_check("SCIPchgVarType", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_VARTYPE, Ptr{SCIP_Bool}), pointer(scip), pointer(var), vartype, pointer(infeasible))
#SCIPfixVar(scip::SCIP_t, var::SCIP_VAR_t, fixedval::SCIP_Real, infeasible::SCIP_Bool_t, fixed::SCIP_Bool_t) = @scip_ccall_check("SCIPfixVar", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}), pointer(scip), pointer(var), fixedval, pointer(infeasible), pointer(fixed))
#SCIPaggregateVars(scip::SCIP_t, varx::SCIP_VAR_t, vary::SCIP_VAR_t, scalarx::SCIP_Real, scalary::SCIP_Real, rhs::SCIP_Real, infeasible::SCIP_Bool_t, redundant::SCIP_Bool_t, aggregated::SCIP_Bool_t) = @scip_ccall_check("SCIPaggregateVars", (Ptr{SCIP}, Ptr{SCIP_VAR}, Ptr{SCIP_VAR}, SCIP_Real, SCIP_Real, SCIP_Real, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}), pointer(scip), pointer(varx), pointer(vary), scalarx, scalary, rhs, pointer(infeasible), pointer(redundant), pointer(aggregated))
#SCIPmultiaggregateVar(scip::SCIP_t, var::SCIP_VAR_t, naggvars, aggvars::SCIP_VAR_t, scalars::SCIP_Real_t, constant::SCIP_Real, infeasible::SCIP_Bool_t, aggregated::SCIP_Bool_t) = @scip_ccall_check("SCIPmultiaggregateVar", (Ptr{SCIP}, Ptr{SCIP_VAR}, Int, Ptr{Ptr{SCIP_VAR}}, Ptr{SCIP_Real}, SCIP_Real, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}), pointer(scip), pointer(var), naggvars, array(aggvars), pointer(scalars), constant, pointer(infeasible), pointer(aggregated))
#SCIPmarkDoNotMultaggrVar(scip::SCIP_t, var::SCIP_VAR_t) = @scip_ccall_check("SCIPmarkDoNotMultaggrVar", (Ptr{SCIP}, Ptr{SCIP_VAR}), pointer(scip), pointer(var))
#SCIPupdateVarPseudocost(scip::SCIP_t, var::SCIP_VAR_t, solvaldelta::SCIP_Real, objdelta::SCIP_Real, weight::SCIP_Real) = @scip_ccall_check("SCIPupdateVarPseudocost", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real, SCIP_Real, SCIP_Real), pointer(scip), pointer(var), solvaldelta, objdelta, weight)
#SCIPinitVarBranchStats(scip::SCIP_t, var::SCIP_VAR_t, downpscost::SCIP_Real, uppscost::SCIP_Real, downvsids::SCIP_Real, upvsids::SCIP_Real, downconflen::SCIP_Real, upconflen::SCIP_Real, downinfer::SCIP_Real, upinfer::SCIP_Real, downcutoff::SCIP_Real, upcutoff::SCIP_Real) = @scip_ccall_check("SCIPinitVarBranchStats", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real, SCIP_Real, SCIP_Real, SCIP_Real, SCIP_Real, SCIP_Real, SCIP_Real, SCIP_Real, SCIP_Real, SCIP_Real), pointer(scip), pointer(var), downpscost, uppscost, downvsids, upvsids, downconflen, upconflen, downinfer, upinfer, downcutoff, upcutoff)
#SCIPinitConflictAnalysis(scip::SCIP_t) = @scip_ccall_check("SCIPinitConflictAnalysis", (Ptr{SCIP},), pointer(scip))
#SCIPaddConflictLb(scip::SCIP_t, var::SCIP_VAR_t, bdchgidx::SCIP_BDCHGIDX_t) = @scip_ccall_check("SCIPaddConflictLb", (Ptr{SCIP}, Ptr{SCIP_VAR}, Ptr{SCIP_BDCHGIDX}), pointer(scip), pointer(var), pointer(bdchgidx))
#SCIPaddConflictRelaxedLb(scip::SCIP_t, var::SCIP_VAR_t, bdchgidx::SCIP_BDCHGIDX_t, relaxedlb::SCIP_Real) = @scip_ccall_check("SCIPaddConflictRelaxedLb", (Ptr{SCIP}, Ptr{SCIP_VAR}, Ptr{SCIP_BDCHGIDX}, SCIP_Real), pointer(scip), pointer(var), pointer(bdchgidx), relaxedlb)
#SCIPaddConflictUb(scip::SCIP_t, var::SCIP_VAR_t, bdchgidx::SCIP_BDCHGIDX_t) = @scip_ccall_check("SCIPaddConflictUb", (Ptr{SCIP}, Ptr{SCIP_VAR}, Ptr{SCIP_BDCHGIDX}), pointer(scip), pointer(var), pointer(bdchgidx))
#SCIPaddConflictRelaxedUb(scip::SCIP_t, var::SCIP_VAR_t, bdchgidx::SCIP_BDCHGIDX_t, relaxedub::SCIP_Real) = @scip_ccall_check("SCIPaddConflictRelaxedUb", (Ptr{SCIP}, Ptr{SCIP_VAR}, Ptr{SCIP_BDCHGIDX}, SCIP_Real), pointer(scip), pointer(var), pointer(bdchgidx), relaxedub)
#SCIPaddConflictBd(scip::SCIP_t, var::SCIP_VAR_t, boundtype::SCIP_BOUNDTYPE, bdchgidx::SCIP_BDCHGIDX_t) = @scip_ccall_check("SCIPaddConflictBd", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_BOUNDTYPE, Ptr{SCIP_BDCHGIDX}), pointer(scip), pointer(var), boundtype, pointer(bdchgidx))
#SCIPaddConflictRelaxedBd(scip::SCIP_t, var::SCIP_VAR_t, boundtype::SCIP_BOUNDTYPE, bdchgidx::SCIP_BDCHGIDX_t, relaxedbd::SCIP_Real) = @scip_ccall_check("SCIPaddConflictRelaxedBd", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_BOUNDTYPE, Ptr{SCIP_BDCHGIDX}, SCIP_Real), pointer(scip), pointer(var), boundtype, pointer(bdchgidx), relaxedbd)
#SCIPaddConflictBinvar(scip::SCIP_t, var::SCIP_VAR_t) = @scip_ccall_check("SCIPaddConflictBinvar", (Ptr{SCIP}, Ptr{SCIP_VAR}), pointer(scip), pointer(var))
#SCIPisConflictVarUsed(scip::SCIP_t, var::SCIP_VAR_t, boundtype::SCIP_BOUNDTYPE, bdchgidx::SCIP_BDCHGIDX_t, used::SCIP_Bool_t) = @scip_ccall_check("SCIPisConflictVarUsed", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_BOUNDTYPE, Ptr{SCIP_BDCHGIDX}, Ptr{SCIP_Bool}), pointer(scip), pointer(var), boundtype, pointer(bdchgidx), pointer(used))
#SCIPanalyzeConflict(scip::SCIP_t, validdepth, success::SCIP_Bool_t) = @scip_ccall_check("SCIPanalyzeConflict", (Ptr{SCIP}, Int, Ptr{SCIP_Bool}), pointer(scip), validdepth, pointer(success))
#SCIPanalyzeConflictCons(scip::SCIP_t, cons::SCIP_CONS_t, success::SCIP_Bool_t) = @scip_ccall_check("SCIPanalyzeConflictCons", (Ptr{SCIP}, Ptr{SCIP_CONS}, Ptr{SCIP_Bool}), pointer(scip), pointer(cons), pointer(success))
#SCIPcreateCons(scip::SCIP_t, cons::SCIP_CONS_t, name, conshdlr::SCIP_CONSHDLR_t, consdata::SCIP_CONSDATA_t, initial::SCIP_Bool, separate::SCIP_Bool, enforce::SCIP_Bool, check::SCIP_Bool, propagate::SCIP_Bool, localVar::SCIP_Bool, modifiable::SCIP_Bool, dynamic::SCIP_Bool, removable::SCIP_Bool, stickingatnode::SCIP_Bool) = @scip_ccall_check("SCIPcreateCons", (Ptr{SCIP}, Ptr{Ptr{SCIP_CONS}}, String, Ptr{SCIP_CONSHDLR}, Ptr{SCIP_CONSDATA}, SCIP_Bool, SCIP_Bool, SCIP_Bool, SCIP_Bool, SCIP_Bool, SCIP_Bool, SCIP_Bool, SCIP_Bool, SCIP_Bool, SCIP_Bool), pointer(scip), array(cons), name, pointer(conshdlr), pointer(consdata), initial, separate, enforce, check, propagate, localVar, modifiable, dynamic, removable, stickingatnode)
#SCIPparseCons(scip::SCIP_t, cons::SCIP_CONS_t, str, initial::SCIP_Bool, separate::SCIP_Bool, enforce::SCIP_Bool, check::SCIP_Bool, propagate::SCIP_Bool, localVar::SCIP_Bool, modifiable::SCIP_Bool, dynamic::SCIP_Bool, removable::SCIP_Bool, stickingatnode::SCIP_Bool, success::SCIP_Bool_t) = @scip_ccall_check("SCIPparseCons", (Ptr{SCIP}, Ptr{Ptr{SCIP_CONS}}, String, SCIP_Bool, SCIP_Bool, SCIP_Bool, SCIP_Bool, SCIP_Bool, SCIP_Bool, SCIP_Bool, SCIP_Bool, SCIP_Bool, SCIP_Bool, Ptr{SCIP_Bool}), pointer(scip), array(cons), str, initial, separate, enforce, check, propagate, localVar, modifiable, dynamic, removable, stickingatnode, pointer(success))
#SCIPcaptureCons(scip::SCIP_t, cons::SCIP_CONS_t) = @scip_ccall_check("SCIPcaptureCons", (Ptr{SCIP}, Ptr{SCIP_CONS}), pointer(scip), pointer(cons))
#SCIPreleaseCons(scip::SCIP_t, cons::SCIP_CONS_t) = @scip_ccall_check("SCIPreleaseCons", (Ptr{SCIP}, Ptr{Ptr{SCIP_CONS}}), pointer(scip), array(cons))
#SCIPchgConsName(scip::SCIP_t, cons::SCIP_CONS_t, name) = @scip_ccall_check("SCIPchgConsName", (Ptr{SCIP}, Ptr{SCIP_CONS}, String), pointer(scip), pointer(cons), name)
#SCIPsetConsInitial(scip::SCIP_t, cons::SCIP_CONS_t, initial::SCIP_Bool) = @scip_ccall_check("SCIPsetConsInitial", (Ptr{SCIP}, Ptr{SCIP_CONS}, SCIP_Bool), pointer(scip), pointer(cons), initial)
#SCIPsetConsSeparated(scip::SCIP_t, cons::SCIP_CONS_t, separate::SCIP_Bool) = @scip_ccall_check("SCIPsetConsSeparated", (Ptr{SCIP}, Ptr{SCIP_CONS}, SCIP_Bool), pointer(scip), pointer(cons), separate)
#SCIPsetConsEnforced(scip::SCIP_t, cons::SCIP_CONS_t, enforce::SCIP_Bool) = @scip_ccall_check("SCIPsetConsEnforced", (Ptr{SCIP}, Ptr{SCIP_CONS}, SCIP_Bool), pointer(scip), pointer(cons), enforce)
#SCIPsetConsChecked(scip::SCIP_t, cons::SCIP_CONS_t, check::SCIP_Bool) = @scip_ccall_check("SCIPsetConsChecked", (Ptr{SCIP}, Ptr{SCIP_CONS}, SCIP_Bool), pointer(scip), pointer(cons), check)
#SCIPsetConsPropagated(scip::SCIP_t, cons::SCIP_CONS_t, propagate::SCIP_Bool) = @scip_ccall_check("SCIPsetConsPropagated", (Ptr{SCIP}, Ptr{SCIP_CONS}, SCIP_Bool), pointer(scip), pointer(cons), propagate)
#SCIPsetConsLocal(scip::SCIP_t, cons::SCIP_CONS_t, localVar::SCIP_Bool) = @scip_ccall_check("SCIPsetConsLocal", (Ptr{SCIP}, Ptr{SCIP_CONS}, SCIP_Bool), pointer(scip), pointer(cons), localVar)
#SCIPsetConsModifiable(scip::SCIP_t, cons::SCIP_CONS_t, modifiable::SCIP_Bool) = @scip_ccall_check("SCIPsetConsModifiable", (Ptr{SCIP}, Ptr{SCIP_CONS}, SCIP_Bool), pointer(scip), pointer(cons), modifiable)
#SCIPsetConsDynamic(scip::SCIP_t, cons::SCIP_CONS_t, dynamic::SCIP_Bool) = @scip_ccall_check("SCIPsetConsDynamic", (Ptr{SCIP}, Ptr{SCIP_CONS}, SCIP_Bool), pointer(scip), pointer(cons), dynamic)
#SCIPsetConsRemovable(scip::SCIP_t, cons::SCIP_CONS_t, removable::SCIP_Bool) = @scip_ccall_check("SCIPsetConsRemovable", (Ptr{SCIP}, Ptr{SCIP_CONS}, SCIP_Bool), pointer(scip), pointer(cons), removable)
#SCIPsetConsStickingAtNode(scip::SCIP_t, cons::SCIP_CONS_t, stickingatnode::SCIP_Bool) = @scip_ccall_check("SCIPsetConsStickingAtNode", (Ptr{SCIP}, Ptr{SCIP_CONS}, SCIP_Bool), pointer(scip), pointer(cons), stickingatnode)
#SCIPupdateConsFlags(scip::SCIP_t, cons0::SCIP_CONS_t, cons1::SCIP_CONS_t) = @scip_ccall_check("SCIPupdateConsFlags", (Ptr{SCIP}, Ptr{SCIP_CONS}, Ptr{SCIP_CONS}), pointer(scip), pointer(cons0), pointer(cons1))
#SCIPtransformCons(scip::SCIP_t, cons::SCIP_CONS_t, transcons::SCIP_CONS_t) = @scip_ccall_check("SCIPtransformCons", (Ptr{SCIP}, Ptr{SCIP_CONS}, Ptr{Ptr{SCIP_CONS}}), pointer(scip), pointer(cons), array(transcons))
#SCIPtransformConss(scip::SCIP_t, nconss, conss::SCIP_CONS_t, transconss::SCIP_CONS_t) = @scip_ccall_check("SCIPtransformConss", (Ptr{SCIP}, Int, Ptr{Ptr{SCIP_CONS}}, Ptr{Ptr{SCIP_CONS}}), pointer(scip), nconss, array(conss), array(transconss))
#SCIPgetTransformedCons(scip::SCIP_t, cons::SCIP_CONS_t, transcons::SCIP_CONS_t) = @scip_ccall_check("SCIPgetTransformedCons", (Ptr{SCIP}, Ptr{SCIP_CONS}, Ptr{Ptr{SCIP_CONS}}), pointer(scip), pointer(cons), array(transcons))
#SCIPgetTransformedConss(scip::SCIP_t, nconss, conss::SCIP_CONS_t, transconss::SCIP_CONS_t) = @scip_ccall_check("SCIPgetTransformedConss", (Ptr{SCIP}, Int, Ptr{Ptr{SCIP_CONS}}, Ptr{Ptr{SCIP_CONS}}), pointer(scip), nconss, array(conss), array(transconss))
#SCIPaddConsAge(scip::SCIP_t, cons::SCIP_CONS_t, deltaage::SCIP_Real) = @scip_ccall_check("SCIPaddConsAge", (Ptr{SCIP}, Ptr{SCIP_CONS}, SCIP_Real), pointer(scip), pointer(cons), deltaage)
#SCIPincConsAge(scip::SCIP_t, cons::SCIP_CONS_t) = @scip_ccall_check("SCIPincConsAge", (Ptr{SCIP}, Ptr{SCIP_CONS}), pointer(scip), pointer(cons))
#SCIPresetConsAge(scip::SCIP_t, cons::SCIP_CONS_t) = @scip_ccall_check("SCIPresetConsAge", (Ptr{SCIP}, Ptr{SCIP_CONS}), pointer(scip), pointer(cons))
#SCIPenableCons(scip::SCIP_t, cons::SCIP_CONS_t) = @scip_ccall_check("SCIPenableCons", (Ptr{SCIP}, Ptr{SCIP_CONS}), pointer(scip), pointer(cons))
#SCIPdisableCons(scip::SCIP_t, cons::SCIP_CONS_t) = @scip_ccall_check("SCIPdisableCons", (Ptr{SCIP}, Ptr{SCIP_CONS}), pointer(scip), pointer(cons))
#SCIPenableConsSeparation(scip::SCIP_t, cons::SCIP_CONS_t) = @scip_ccall_check("SCIPenableConsSeparation", (Ptr{SCIP}, Ptr{SCIP_CONS}), pointer(scip), pointer(cons))
#SCIPdisableConsSeparation(scip::SCIP_t, cons::SCIP_CONS_t) = @scip_ccall_check("SCIPdisableConsSeparation", (Ptr{SCIP}, Ptr{SCIP_CONS}), pointer(scip), pointer(cons))
#SCIPenableConsPropagation(scip::SCIP_t, cons::SCIP_CONS_t) = @scip_ccall_check("SCIPenableConsPropagation", (Ptr{SCIP}, Ptr{SCIP_CONS}), pointer(scip), pointer(cons))
#SCIPdisableConsPropagation(scip::SCIP_t, cons::SCIP_CONS_t) = @scip_ccall_check("SCIPdisableConsPropagation", (Ptr{SCIP}, Ptr{SCIP_CONS}), pointer(scip), pointer(cons))
#SCIPmarkConsPropagate(scip::SCIP_t, cons::SCIP_CONS_t) = @scip_ccall_check("SCIPmarkConsPropagate", (Ptr{SCIP}, Ptr{SCIP_CONS}), pointer(scip), pointer(cons))
#SCIPunmarkConsPropagate(scip::SCIP_t, cons::SCIP_CONS_t) = @scip_ccall_check("SCIPunmarkConsPropagate", (Ptr{SCIP}, Ptr{SCIP_CONS}), pointer(scip), pointer(cons))
#SCIPaddConsLocks(scip::SCIP_t, cons::SCIP_CONS_t, nlockspos, nlocksneg) = @scip_ccall_check("SCIPaddConsLocks", (Ptr{SCIP}, Ptr{SCIP_CONS}, Int, Int), pointer(scip), pointer(cons), nlockspos, nlocksneg)
#SCIPcheckCons(scip::SCIP_t, cons::SCIP_CONS_t, sol::SCIP_SOL_t, checkintegrality::SCIP_Bool, checklprows::SCIP_Bool, printreason::SCIP_Bool, result::SCIP_RESULT_t) = @scip_ccall_check("SCIPcheckCons", (Ptr{SCIP}, Ptr{SCIP_CONS}, Ptr{SCIP_SOL}, SCIP_Bool, SCIP_Bool, SCIP_Bool, Ptr{SCIP_RESULT}), pointer(scip), pointer(cons), pointer(sol), checkintegrality, checklprows, printreason, pointer(result))
#SCIPenfopsCons(scip::SCIP_t, cons::SCIP_CONS_t, solinfeasible::SCIP_Bool, objinfeasible::SCIP_Bool, result::SCIP_RESULT_t) = @scip_ccall_check("SCIPenfopsCons", (Ptr{SCIP}, Ptr{SCIP_CONS}, SCIP_Bool, SCIP_Bool, Ptr{SCIP_RESULT}), pointer(scip), pointer(cons), solinfeasible, objinfeasible, pointer(result))
#SCIPenfolpCons(scip::SCIP_t, cons::SCIP_CONS_t, solinfeasible::SCIP_Bool, result::SCIP_RESULT_t) = @scip_ccall_check("SCIPenfolpCons", (Ptr{SCIP}, Ptr{SCIP_CONS}, SCIP_Bool, Ptr{SCIP_RESULT}), pointer(scip), pointer(cons), solinfeasible, pointer(result))
#SCIPinitlpCons(scip::SCIP_t, cons::SCIP_CONS_t) = @scip_ccall_check("SCIPinitlpCons", (Ptr{SCIP}, Ptr{SCIP_CONS}), pointer(scip), pointer(cons))
#SCIPsepalpCons(scip::SCIP_t, cons::SCIP_CONS_t, result::SCIP_RESULT_t) = @scip_ccall_check("SCIPsepalpCons", (Ptr{SCIP}, Ptr{SCIP_CONS}, Ptr{SCIP_RESULT}), pointer(scip), pointer(cons), pointer(result))
#SCIPsepasolCons(scip::SCIP_t, cons::SCIP_CONS_t, sol::SCIP_SOL_t, result::SCIP_RESULT_t) = @scip_ccall_check("SCIPsepasolCons", (Ptr{SCIP}, Ptr{SCIP_CONS}, Ptr{SCIP_SOL}, Ptr{SCIP_RESULT}), pointer(scip), pointer(cons), pointer(sol), pointer(result))
#SCIPpropCons(scip::SCIP_t, cons::SCIP_CONS_t, proptiming::SCIP_PROPTIMING, result::SCIP_RESULT_t) = @scip_ccall_check("SCIPpropCons", (Ptr{SCIP}, Ptr{SCIP_CONS}, SCIP_PROPTIMING, Ptr{SCIP_RESULT}), pointer(scip), pointer(cons), proptiming, pointer(result))
#SCIPrespropCons(scip::SCIP_t, cons::SCIP_CONS_t, infervar::SCIP_VAR_t, inferinfo, boundtype::SCIP_BOUNDTYPE, bdchgidx::SCIP_BDCHGIDX_t, relaxedbd::SCIP_Real, result::SCIP_RESULT_t) = @scip_ccall_check("SCIPrespropCons", (Ptr{SCIP}, Ptr{SCIP_CONS}, Ptr{SCIP_VAR}, Int, SCIP_BOUNDTYPE, Ptr{SCIP_BDCHGIDX}, SCIP_Real, Ptr{SCIP_RESULT}), pointer(scip), pointer(cons), pointer(infervar), inferinfo, boundtype, pointer(bdchgidx), relaxedbd, pointer(result))
#SCIPactiveCons(scip::SCIP_t, cons::SCIP_CONS_t) = @scip_ccall_check("SCIPactiveCons", (Ptr{SCIP}, Ptr{SCIP_CONS}), pointer(scip), pointer(cons))
#SCIPdeactiveCons(scip::SCIP_t, cons::SCIP_CONS_t) = @scip_ccall_check("SCIPdeactiveCons", (Ptr{SCIP}, Ptr{SCIP_CONS}), pointer(scip), pointer(cons))
#SCIPgetConsVars(scip::SCIP_t, cons::SCIP_CONS_t, vars::SCIP_VAR_t, varssize, success::SCIP_Bool_t) = @scip_ccall_check("SCIPgetConsVars", (Ptr{SCIP}, Ptr{SCIP_CONS}, Ptr{Ptr{SCIP_VAR}}, Int, Ptr{SCIP_Bool}), pointer(scip), pointer(cons), array(vars), varssize, pointer(success))
#SCIPconstructLP(scip::SCIP_t, cutoff::SCIP_Bool_t) = @scip_ccall_check("SCIPconstructLP", (Ptr{SCIP}, Ptr{SCIP_Bool}), pointer(scip), pointer(cutoff))
#SCIPflushLP(scip::SCIP_t) = @scip_ccall_check("SCIPflushLP", (Ptr{SCIP},), pointer(scip))
#SCIPgetLPBInvRow(scip::SCIP_t, r, coef::SCIP_Real_t) = @scip_ccall_check("SCIPgetLPBInvRow", (Ptr{SCIP}, Int, Ptr{SCIP_Real}), pointer(scip), r, pointer(coef))
#SCIPgetLPBInvCol(scip::SCIP_t, c, coef::SCIP_Real_t) = @scip_ccall_check("SCIPgetLPBInvCol", (Ptr{SCIP}, Int, Ptr{SCIP_Real}), pointer(scip), c, pointer(coef))
#SCIPgetLPBInvARow(scip::SCIP_t, r, binvrow::SCIP_Real_t, coef::SCIP_Real_t) = @scip_ccall_check("SCIPgetLPBInvARow", (Ptr{SCIP}, Int, Ptr{SCIP_Real}, Ptr{SCIP_Real}), pointer(scip), r, pointer(binvrow), pointer(coef))
#SCIPgetLPBInvACol(scip::SCIP_t, c, coef::SCIP_Real_t) = @scip_ccall_check("SCIPgetLPBInvACol", (Ptr{SCIP}, Int, Ptr{SCIP_Real}), pointer(scip), c, pointer(coef))
#SCIPsumLPRows(scip::SCIP_t, weights::SCIP_Real_t, sumcoef::SCIP_REALARRAY_t, sumlhs::SCIP_Real_t, sumrhs::SCIP_Real_t) = @scip_ccall_check("SCIPsumLPRows", (Ptr{SCIP}, Ptr{SCIP_Real}, Ptr{SCIP_REALARRAY}, Ptr{SCIP_Real}, Ptr{SCIP_Real}), pointer(scip), pointer(weights), pointer(sumcoef), pointer(sumlhs), pointer(sumrhs))
#SCIPwriteLP(scip::SCIP_t, filename) = @scip_ccall_check("SCIPwriteLP", (Ptr{SCIP}, String), pointer(scip), filename)
#SCIPwriteMIP(scip::SCIP_t, filename, genericnames::SCIP_Bool, origobj::SCIP_Bool, lazyconss::SCIP_Bool) = @scip_ccall_check("SCIPwriteMIP", (Ptr{SCIP}, String, SCIP_Bool, SCIP_Bool, SCIP_Bool), pointer(scip), filename, genericnames, origobj, lazyconss)
#SCIPgetLPI(scip::SCIP_t, lpi::SCIP_LPI_t) = @scip_ccall_check("SCIPgetLPI", (Ptr{SCIP}, Ptr{Ptr{SCIP_LPI}}), pointer(scip), array(lpi))
#SCIPcomputeLPRelIntPoint(scip::SCIP_t, relaxrows::SCIP_Bool, inclobjcutoff::SCIP_Bool, timelimit::SCIP_Real, iterlimit, point::SCIP_SOL_t) = @scip_ccall_check("SCIPcomputeLPRelIntPoint", (Ptr{SCIP}, SCIP_Bool, SCIP_Bool, SCIP_Real, Int, Ptr{Ptr{SCIP_SOL}}), pointer(scip), relaxrows, inclobjcutoff, timelimit, iterlimit, array(point))
#SCIPcreateRowCons(scip::SCIP_t, row::SCIP_ROW_t, conshdlr::SCIP_CONSHDLR_t, name, len, cols::SCIP_COL_t, vals::SCIP_Real_t, lhs::SCIP_Real, rhs::SCIP_Real, localVar::SCIP_Bool, modifiable::SCIP_Bool, removable::SCIP_Bool) = @scip_ccall_check("SCIPcreateRowCons", (Ptr{SCIP}, Ptr{Ptr{SCIP_ROW}}, Ptr{SCIP_CONSHDLR}, String, Int, Ptr{Ptr{SCIP_COL}}, Ptr{SCIP_Real}, SCIP_Real, SCIP_Real, SCIP_Bool, SCIP_Bool, SCIP_Bool), pointer(scip), array(row), pointer(conshdlr), name, len, array(cols), pointer(vals), lhs, rhs, localVar, modifiable, removable)
#SCIPcreateRowSepa(scip::SCIP_t, row::SCIP_ROW_t, sepa::SCIP_SEPA_t, name, len, cols::SCIP_COL_t, vals::SCIP_Real_t, lhs::SCIP_Real, rhs::SCIP_Real, localVar::SCIP_Bool, modifiable::SCIP_Bool, removable::SCIP_Bool) = @scip_ccall_check("SCIPcreateRowSepa", (Ptr{SCIP}, Ptr{Ptr{SCIP_ROW}}, Ptr{SCIP_SEPA}, String, Int, Ptr{Ptr{SCIP_COL}}, Ptr{SCIP_Real}, SCIP_Real, SCIP_Real, SCIP_Bool, SCIP_Bool, SCIP_Bool), pointer(scip), array(row), pointer(sepa), name, len, array(cols), pointer(vals), lhs, rhs, localVar, modifiable, removable)
#SCIPcreateRowUnspec(scip::SCIP_t, row::SCIP_ROW_t, name, len, cols::SCIP_COL_t, vals::SCIP_Real_t, lhs::SCIP_Real, rhs::SCIP_Real, localVar::SCIP_Bool, modifiable::SCIP_Bool, removable::SCIP_Bool) = @scip_ccall_check("SCIPcreateRowUnspec", (Ptr{SCIP}, Ptr{Ptr{SCIP_ROW}}, String, Int, Ptr{Ptr{SCIP_COL}}, Ptr{SCIP_Real}, SCIP_Real, SCIP_Real, SCIP_Bool, SCIP_Bool, SCIP_Bool), pointer(scip), array(row), name, len, array(cols), pointer(vals), lhs, rhs, localVar, modifiable, removable)
#SCIPcreateRow(scip::SCIP_t, row::SCIP_ROW_t, name, len, cols::SCIP_COL_t, vals::SCIP_Real_t, lhs::SCIP_Real, rhs::SCIP_Real, localVar::SCIP_Bool, modifiable::SCIP_Bool, removable::SCIP_Bool) = @scip_ccall_check("SCIPcreateRow", (Ptr{SCIP}, Ptr{Ptr{SCIP_ROW}}, String, Int, Ptr{Ptr{SCIP_COL}}, Ptr{SCIP_Real}, SCIP_Real, SCIP_Real, SCIP_Bool, SCIP_Bool, SCIP_Bool), pointer(scip), array(row), name, len, array(cols), pointer(vals), lhs, rhs, localVar, modifiable, removable)
#SCIPcreateEmptyRowCons(scip::SCIP_t, row::SCIP_ROW_t, conshdlr::SCIP_CONSHDLR_t, name, lhs::SCIP_Real, rhs::SCIP_Real, localVar::SCIP_Bool, modifiable::SCIP_Bool, removable::SCIP_Bool) = @scip_ccall_check("SCIPcreateEmptyRowCons", (Ptr{SCIP}, Ptr{Ptr{SCIP_ROW}}, Ptr{SCIP_CONSHDLR}, String, SCIP_Real, SCIP_Real, SCIP_Bool, SCIP_Bool, SCIP_Bool), pointer(scip), array(row), pointer(conshdlr), name, lhs, rhs, localVar, modifiable, removable)
#SCIPcreateEmptyRowSepa(scip::SCIP_t, row::SCIP_ROW_t, sepa::SCIP_SEPA_t, name, lhs::SCIP_Real, rhs::SCIP_Real, localVar::SCIP_Bool, modifiable::SCIP_Bool, removable::SCIP_Bool) = @scip_ccall_check("SCIPcreateEmptyRowSepa", (Ptr{SCIP}, Ptr{Ptr{SCIP_ROW}}, Ptr{SCIP_SEPA}, String, SCIP_Real, SCIP_Real, SCIP_Bool, SCIP_Bool, SCIP_Bool), pointer(scip), array(row), pointer(sepa), name, lhs, rhs, localVar, modifiable, removable)
#SCIPcreateEmptyRowUnspec(scip::SCIP_t, row::SCIP_ROW_t, name, lhs::SCIP_Real, rhs::SCIP_Real, localVar::SCIP_Bool, modifiable::SCIP_Bool, removable::SCIP_Bool) = @scip_ccall_check("SCIPcreateEmptyRowUnspec", (Ptr{SCIP}, Ptr{Ptr{SCIP_ROW}}, String, SCIP_Real, SCIP_Real, SCIP_Bool, SCIP_Bool, SCIP_Bool), pointer(scip), array(row), name, lhs, rhs, localVar, modifiable, removable)
#SCIPcreateEmptyRow(scip::SCIP_t, row::SCIP_ROW_t, name, lhs::SCIP_Real, rhs::SCIP_Real, localVar::SCIP_Bool, modifiable::SCIP_Bool, removable::SCIP_Bool) = @scip_ccall_check("SCIPcreateEmptyRow", (Ptr{SCIP}, Ptr{Ptr{SCIP_ROW}}, String, SCIP_Real, SCIP_Real, SCIP_Bool, SCIP_Bool, SCIP_Bool), pointer(scip), array(row), name, lhs, rhs, localVar, modifiable, removable)
#SCIPcaptureRow(scip::SCIP_t, row::SCIP_ROW_t) = @scip_ccall_check("SCIPcaptureRow", (Ptr{SCIP}, Ptr{SCIP_ROW}), pointer(scip), pointer(row))
#SCIPreleaseRow(scip::SCIP_t, row::SCIP_ROW_t) = @scip_ccall_check("SCIPreleaseRow", (Ptr{SCIP}, Ptr{Ptr{SCIP_ROW}}), pointer(scip), array(row))
#SCIPchgRowLhs(scip::SCIP_t, row::SCIP_ROW_t, lhs::SCIP_Real) = @scip_ccall_check("SCIPchgRowLhs", (Ptr{SCIP}, Ptr{SCIP_ROW}, SCIP_Real), pointer(scip), pointer(row), lhs)
#SCIPchgRowRhs(scip::SCIP_t, row::SCIP_ROW_t, rhs::SCIP_Real) = @scip_ccall_check("SCIPchgRowRhs", (Ptr{SCIP}, Ptr{SCIP_ROW}, SCIP_Real), pointer(scip), pointer(row), rhs)
#SCIPcacheRowExtensions(scip::SCIP_t, row::SCIP_ROW_t) = @scip_ccall_check("SCIPcacheRowExtensions", (Ptr{SCIP}, Ptr{SCIP_ROW}), pointer(scip), pointer(row))
#SCIPflushRowExtensions(scip::SCIP_t, row::SCIP_ROW_t) = @scip_ccall_check("SCIPflushRowExtensions", (Ptr{SCIP}, Ptr{SCIP_ROW}), pointer(scip), pointer(row))
#SCIPaddVarToRow(scip::SCIP_t, row::SCIP_ROW_t, var::SCIP_VAR_t, val::SCIP_Real) = @scip_ccall_check("SCIPaddVarToRow", (Ptr{SCIP}, Ptr{SCIP_ROW}, Ptr{SCIP_VAR}, SCIP_Real), pointer(scip), pointer(row), pointer(var), val)
#SCIPaddVarsToRow(scip::SCIP_t, row::SCIP_ROW_t, nvars, vars::SCIP_VAR_t, vals::SCIP_Real_t) = @scip_ccall_check("SCIPaddVarsToRow", (Ptr{SCIP}, Ptr{SCIP_ROW}, Int, Ptr{Ptr{SCIP_VAR}}, Ptr{SCIP_Real}), pointer(scip), pointer(row), nvars, array(vars), pointer(vals))
#SCIPaddVarsToRowSameCoef(scip::SCIP_t, row::SCIP_ROW_t, nvars, vars::SCIP_VAR_t, val::SCIP_Real) = @scip_ccall_check("SCIPaddVarsToRowSameCoef", (Ptr{SCIP}, Ptr{SCIP_ROW}, Int, Ptr{Ptr{SCIP_VAR}}, SCIP_Real), pointer(scip), pointer(row), nvars, array(vars), val)
#SCIPcalcRowIntegralScalar(scip::SCIP_t, row::SCIP_ROW_t, mindelta::SCIP_Real, maxdelta::SCIP_Real, maxdnom, maxscale::SCIP_Real, usecontvars::SCIP_Bool, intscalar::SCIP_Real_t, success::SCIP_Bool_t) = @scip_ccall_check("SCIPcalcRowIntegralScalar", (Ptr{SCIP}, Ptr{SCIP_ROW}, SCIP_Real, SCIP_Real, Int64, SCIP_Real, SCIP_Bool, Ptr{SCIP_Real}, Ptr{SCIP_Bool}), pointer(scip), pointer(row), mindelta, maxdelta, maxdnom, maxscale, usecontvars, pointer(intscalar), pointer(success))
#SCIPmakeRowIntegral(scip::SCIP_t, row::SCIP_ROW_t, mindelta::SCIP_Real, maxdelta::SCIP_Real, maxdnom, maxscale::SCIP_Real, usecontvars::SCIP_Bool, success::SCIP_Bool_t) = @scip_ccall_check("SCIPmakeRowIntegral", (Ptr{SCIP}, Ptr{SCIP_ROW}, SCIP_Real, SCIP_Real, Int64, SCIP_Real, SCIP_Bool, Ptr{SCIP_Bool}), pointer(scip), pointer(row), mindelta, maxdelta, maxdnom, maxscale, usecontvars, pointer(success))
#SCIPrecalcRowLPActivity(scip::SCIP_t, row::SCIP_ROW_t) = @scip_ccall_check("SCIPrecalcRowLPActivity", (Ptr{SCIP}, Ptr{SCIP_ROW}), pointer(scip), pointer(row))
#SCIPrecalcRowPseudoActivity(scip::SCIP_t, row::SCIP_ROW_t) = @scip_ccall_check("SCIPrecalcRowPseudoActivity", (Ptr{SCIP}, Ptr{SCIP_ROW}), pointer(scip), pointer(row))
#SCIPrecalcRowActivity(scip::SCIP_t, row::SCIP_ROW_t) = @scip_ccall_check("SCIPrecalcRowActivity", (Ptr{SCIP}, Ptr{SCIP_ROW}), pointer(scip), pointer(row))
#SCIPaddNlRow(scip::SCIP_t, nlrow::SCIP_NLROW_t) = @scip_ccall_check("SCIPaddNlRow", (Ptr{SCIP}, Ptr{SCIP_NLROW}), pointer(scip), pointer(nlrow))
#SCIPflushNLP(scip::SCIP_t) = @scip_ccall_check("SCIPflushNLP", (Ptr{SCIP},), pointer(scip))
#SCIPsetNLPInitialGuess(scip::SCIP_t, initialguess::SCIP_Real_t) = @scip_ccall_check("SCIPsetNLPInitialGuess", (Ptr{SCIP}, Ptr{SCIP_Real}), pointer(scip), pointer(initialguess))
#SCIPsetNLPInitialGuessSol(scip::SCIP_t, sol::SCIP_SOL_t) = @scip_ccall_check("SCIPsetNLPInitialGuessSol", (Ptr{SCIP}, Ptr{SCIP_SOL}), pointer(scip), pointer(sol))
#SCIPsolveNLP(scip::SCIP_t) = @scip_ccall_check("SCIPsolveNLP", (Ptr{SCIP},), pointer(scip))
#SCIPgetNLPStatistics(scip::SCIP_t, statistics::SCIP_NLPSTATISTICS_t) = @scip_ccall_check("SCIPgetNLPStatistics", (Ptr{SCIP}, Ptr{SCIP_NLPSTATISTICS}), pointer(scip), pointer(statistics))
#SCIPsetNLPIntPar(scip::SCIP_t, typeVar::SCIP_NLPPARAM, ival) = @scip_ccall_check("SCIPsetNLPIntPar", (Ptr{SCIP}, SCIP_NLPPARAM, Int), pointer(scip), typeVar, ival)
#SCIPgetNLPRealPar(scip::SCIP_t, typeVar::SCIP_NLPPARAM, dval::SCIP_Real_t) = @scip_ccall_check("SCIPgetNLPRealPar", (Ptr{SCIP}, SCIP_NLPPARAM, Ptr{SCIP_Real}), pointer(scip), typeVar, pointer(dval))
#SCIPsetNLPRealPar(scip::SCIP_t, typeVar::SCIP_NLPPARAM, dval::SCIP_Real) = @scip_ccall_check("SCIPsetNLPRealPar", (Ptr{SCIP}, SCIP_NLPPARAM, SCIP_Real), pointer(scip), typeVar, dval)
#SCIPsetNLPStringPar(scip::SCIP_t, typeVar::SCIP_NLPPARAM, sval) = @scip_ccall_check("SCIPsetNLPStringPar", (Ptr{SCIP}, SCIP_NLPPARAM, String), pointer(scip), typeVar, sval)
#SCIPwriteNLP(scip::SCIP_t, filename) = @scip_ccall_check("SCIPwriteNLP", (Ptr{SCIP}, String), pointer(scip), filename)
#SCIPgetNLPI(scip::SCIP_t, nlpi::SCIP_NLPI_t, nlpiproblem::SCIP_NLPIPROBLEM_t) = @scip_ccall_check("SCIPgetNLPI", (Ptr{SCIP}, Ptr{Ptr{SCIP_NLPI}}, Ptr{Ptr{SCIP_NLPIPROBLEM}}), pointer(scip), array(nlpi), array(nlpiproblem))
#SCIPstartDiveNLP(scip::SCIP_t) = @scip_ccall_check("SCIPstartDiveNLP", (Ptr{SCIP},), pointer(scip))
#SCIPendDiveNLP(scip::SCIP_t) = @scip_ccall_check("SCIPendDiveNLP", (Ptr{SCIP},), pointer(scip))
#SCIPchgVarObjDiveNLP(scip::SCIP_t, var::SCIP_VAR_t, coef::SCIP_Real) = @scip_ccall_check("SCIPchgVarObjDiveNLP", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), pointer(scip), pointer(var), coef)
#SCIPchgVarBoundsDiveNLP(scip::SCIP_t, var::SCIP_VAR_t, lb::SCIP_Real, ub::SCIP_Real) = @scip_ccall_check("SCIPchgVarBoundsDiveNLP", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real, SCIP_Real), pointer(scip), pointer(var), lb, ub)
#SCIPchgVarsBoundsDiveNLP(scip::SCIP_t, nvars, vars::SCIP_VAR_t, lbs::SCIP_Real_t, ubs::SCIP_Real_t) = @scip_ccall_check("SCIPchgVarsBoundsDiveNLP", (Ptr{SCIP}, Int, Ptr{Ptr{SCIP_VAR}}, Ptr{SCIP_Real}, Ptr{SCIP_Real}), pointer(scip), nvars, array(vars), pointer(lbs), pointer(ubs))
#SCIPsolveDiveNLP(scip::SCIP_t) = @scip_ccall_check("SCIPsolveDiveNLP", (Ptr{SCIP},), pointer(scip))
#SCIPcreateNlRow(scip::SCIP_t, nlrow::SCIP_NLROW_t, name, constant::SCIP_Real, nlinvars, linvars::SCIP_VAR_t, lincoefs::SCIP_Real_t, nquadvars, quadvars::SCIP_VAR_t, nquadelems, quadelems::SCIP_QUADELEM_t, expression::SCIP_EXPRTREE_t, lhs::SCIP_Real, rhs::SCIP_Real) = @scip_ccall_check("SCIPcreateNlRow", (Ptr{SCIP}, Ptr{Ptr{SCIP_NLROW}}, String, SCIP_Real, Int, Ptr{Ptr{SCIP_VAR}}, Ptr{SCIP_Real}, Int, Ptr{Ptr{SCIP_VAR}}, Int, Ptr{SCIP_QUADELEM}, Ptr{SCIP_EXPRTREE}, SCIP_Real, SCIP_Real), pointer(scip), array(nlrow), name, constant, nlinvars, array(linvars), pointer(lincoefs), nquadvars, array(quadvars), nquadelems, pointer(quadelems), pointer(expression), lhs, rhs)
#SCIPcreateEmptyNlRow(scip::SCIP_t, nlrow::SCIP_NLROW_t, name, lhs::SCIP_Real, rhs::SCIP_Real) = @scip_ccall_check("SCIPcreateEmptyNlRow", (Ptr{SCIP}, Ptr{Ptr{SCIP_NLROW}}, String, SCIP_Real, SCIP_Real), pointer(scip), array(nlrow), name, lhs, rhs)
#SCIPcreateNlRowFromRow(scip::SCIP_t, nlrow::SCIP_NLROW_t, row::SCIP_ROW_t) = @scip_ccall_check("SCIPcreateNlRowFromRow", (Ptr{SCIP}, Ptr{Ptr{SCIP_NLROW}}, Ptr{SCIP_ROW}), pointer(scip), array(nlrow), pointer(row))
#SCIPcaptureNlRow(scip::SCIP_t, nlrow::SCIP_NLROW_t) = @scip_ccall_check("SCIPcaptureNlRow", (Ptr{SCIP}, Ptr{SCIP_NLROW}), pointer(scip), pointer(nlrow))
#SCIPreleaseNlRow(scip::SCIP_t, nlrow::SCIP_NLROW_t) = @scip_ccall_check("SCIPreleaseNlRow", (Ptr{SCIP}, Ptr{Ptr{SCIP_NLROW}}), pointer(scip), array(nlrow))
#SCIPchgNlRowLhs(scip::SCIP_t, nlrow::SCIP_NLROW_t, lhs::SCIP_Real) = @scip_ccall_check("SCIPchgNlRowLhs", (Ptr{SCIP}, Ptr{SCIP_NLROW}, SCIP_Real), pointer(scip), pointer(nlrow), lhs)
#SCIPchgNlRowRhs(scip::SCIP_t, nlrow::SCIP_NLROW_t, rhs::SCIP_Real) = @scip_ccall_check("SCIPchgNlRowRhs", (Ptr{SCIP}, Ptr{SCIP_NLROW}, SCIP_Real), pointer(scip), pointer(nlrow), rhs)
#SCIPchgNlRowConstant(scip::SCIP_t, nlrow::SCIP_NLROW_t, constant::SCIP_Real) = @scip_ccall_check("SCIPchgNlRowConstant", (Ptr{SCIP}, Ptr{SCIP_NLROW}, SCIP_Real), pointer(scip), pointer(nlrow), constant)
#SCIPaddLinearCoefToNlRow(scip::SCIP_t, nlrow::SCIP_NLROW_t, var::SCIP_VAR_t, val::SCIP_Real) = @scip_ccall_check("SCIPaddLinearCoefToNlRow", (Ptr{SCIP}, Ptr{SCIP_NLROW}, Ptr{SCIP_VAR}, SCIP_Real), pointer(scip), pointer(nlrow), pointer(var), val)
#SCIPaddLinearCoefsToNlRow(scip::SCIP_t, nlrow::SCIP_NLROW_t, nvars, vars::SCIP_VAR_t, vals::SCIP_Real_t) = @scip_ccall_check("SCIPaddLinearCoefsToNlRow", (Ptr{SCIP}, Ptr{SCIP_NLROW}, Int, Ptr{Ptr{SCIP_VAR}}, Ptr{SCIP_Real}), pointer(scip), pointer(nlrow), nvars, array(vars), pointer(vals))
#SCIPchgNlRowLinearCoef(scip::SCIP_t, nlrow::SCIP_NLROW_t, var::SCIP_VAR_t, coef::SCIP_Real) = @scip_ccall_check("SCIPchgNlRowLinearCoef", (Ptr{SCIP}, Ptr{SCIP_NLROW}, Ptr{SCIP_VAR}, SCIP_Real), pointer(scip), pointer(nlrow), pointer(var), coef)
#SCIPaddQuadVarToNlRow(scip::SCIP_t, nlrow::SCIP_NLROW_t, var::SCIP_VAR_t) = @scip_ccall_check("SCIPaddQuadVarToNlRow", (Ptr{SCIP}, Ptr{SCIP_NLROW}, Ptr{SCIP_VAR}), pointer(scip), pointer(nlrow), pointer(var))
#SCIPaddQuadVarsToNlRow(scip::SCIP_t, nlrow::SCIP_NLROW_t, nvars, vars::SCIP_VAR_t) = @scip_ccall_check("SCIPaddQuadVarsToNlRow", (Ptr{SCIP}, Ptr{SCIP_NLROW}, Int, Ptr{Ptr{SCIP_VAR}}), pointer(scip), pointer(nlrow), nvars, array(vars))
#SCIPaddQuadElementToNlRow(scip::SCIP_t, nlrow::SCIP_NLROW_t, quadelem::SCIP_QUADELEM) = @scip_ccall_check("SCIPaddQuadElementToNlRow", (Ptr{SCIP}, Ptr{SCIP_NLROW}, SCIP_QUADELEM), pointer(scip), pointer(nlrow), quadelem)
#SCIPaddQuadElementsToNlRow(scip::SCIP_t, nlrow::SCIP_NLROW_t, nquadelems, quadelems::SCIP_QUADELEM_t) = @scip_ccall_check("SCIPaddQuadElementsToNlRow", (Ptr{SCIP}, Ptr{SCIP_NLROW}, Int, Ptr{SCIP_QUADELEM}), pointer(scip), pointer(nlrow), nquadelems, pointer(quadelems))
#SCIPchgNlRowQuadElement(scip::SCIP_t, nlrow::SCIP_NLROW_t, quadelement::SCIP_QUADELEM) = @scip_ccall_check("SCIPchgNlRowQuadElement", (Ptr{SCIP}, Ptr{SCIP_NLROW}, SCIP_QUADELEM), pointer(scip), pointer(nlrow), quadelement)
#SCIPsetNlRowExprtree(scip::SCIP_t, nlrow::SCIP_NLROW_t, exprtree::SCIP_EXPRTREE_t) = @scip_ccall_check("SCIPsetNlRowExprtree", (Ptr{SCIP}, Ptr{SCIP_NLROW}, Ptr{SCIP_EXPRTREE}), pointer(scip), pointer(nlrow), pointer(exprtree))
#SCIPsetNlRowExprtreeParam(scip::SCIP_t, nlrow::SCIP_NLROW_t, paramidx, paramval::SCIP_Real) = @scip_ccall_check("SCIPsetNlRowExprtreeParam", (Ptr{SCIP}, Ptr{SCIP_NLROW}, Int, SCIP_Real), pointer(scip), pointer(nlrow), paramidx, paramval)
#SCIPsetNlRowExprtreeParams(scip::SCIP_t, nlrow::SCIP_NLROW_t, paramvals::SCIP_Real_t) = @scip_ccall_check("SCIPsetNlRowExprtreeParams", (Ptr{SCIP}, Ptr{SCIP_NLROW}, Ptr{SCIP_Real}), pointer(scip), pointer(nlrow), pointer(paramvals))
#SCIPrecalcNlRowNLPActivity(scip::SCIP_t, nlrow::SCIP_NLROW_t) = @scip_ccall_check("SCIPrecalcNlRowNLPActivity", (Ptr{SCIP}, Ptr{SCIP_NLROW}), pointer(scip), pointer(nlrow))
#SCIPgetNlRowNLPActivity(scip::SCIP_t, nlrow::SCIP_NLROW_t, activity::SCIP_Real_t) = @scip_ccall_check("SCIPgetNlRowNLPActivity", (Ptr{SCIP}, Ptr{SCIP_NLROW}, Ptr{SCIP_Real}), pointer(scip), pointer(nlrow), pointer(activity))
#SCIPgetNlRowNLPFeasibility(scip::SCIP_t, nlrow::SCIP_NLROW_t, feasibility::SCIP_Real_t) = @scip_ccall_check("SCIPgetNlRowNLPFeasibility", (Ptr{SCIP}, Ptr{SCIP_NLROW}, Ptr{SCIP_Real}), pointer(scip), pointer(nlrow), pointer(feasibility))
#SCIPrecalcNlRowPseudoActivity(scip::SCIP_t, nlrow::SCIP_NLROW_t) = @scip_ccall_check("SCIPrecalcNlRowPseudoActivity", (Ptr{SCIP}, Ptr{SCIP_NLROW}), pointer(scip), pointer(nlrow))
#SCIPgetNlRowPseudoActivity(scip::SCIP_t, nlrow::SCIP_NLROW_t, pseudoactivity::SCIP_Real_t) = @scip_ccall_check("SCIPgetNlRowPseudoActivity", (Ptr{SCIP}, Ptr{SCIP_NLROW}, Ptr{SCIP_Real}), pointer(scip), pointer(nlrow), pointer(pseudoactivity))
#SCIPgetNlRowPseudoFeasibility(scip::SCIP_t, nlrow::SCIP_NLROW_t, pseudofeasibility::SCIP_Real_t) = @scip_ccall_check("SCIPgetNlRowPseudoFeasibility", (Ptr{SCIP}, Ptr{SCIP_NLROW}, Ptr{SCIP_Real}), pointer(scip), pointer(nlrow), pointer(pseudofeasibility))
#SCIPrecalcNlRowActivity(scip::SCIP_t, nlrow::SCIP_NLROW_t) = @scip_ccall_check("SCIPrecalcNlRowActivity", (Ptr{SCIP}, Ptr{SCIP_NLROW}), pointer(scip), pointer(nlrow))
#SCIPgetNlRowActivity(scip::SCIP_t, nlrow::SCIP_NLROW_t, activity::SCIP_Real_t) = @scip_ccall_check("SCIPgetNlRowActivity", (Ptr{SCIP}, Ptr{SCIP_NLROW}, Ptr{SCIP_Real}), pointer(scip), pointer(nlrow), pointer(activity))
#SCIPgetNlRowFeasibility(scip::SCIP_t, nlrow::SCIP_NLROW_t, feasibility::SCIP_Real_t) = @scip_ccall_check("SCIPgetNlRowFeasibility", (Ptr{SCIP}, Ptr{SCIP_NLROW}, Ptr{SCIP_Real}), pointer(scip), pointer(nlrow), pointer(feasibility))
#SCIPgetNlRowSolActivity(scip::SCIP_t, nlrow::SCIP_NLROW_t, sol::SCIP_SOL_t, activity::SCIP_Real_t) = @scip_ccall_check("SCIPgetNlRowSolActivity", (Ptr{SCIP}, Ptr{SCIP_NLROW}, Ptr{SCIP_SOL}, Ptr{SCIP_Real}), pointer(scip), pointer(nlrow), pointer(sol), pointer(activity))
#SCIPgetNlRowSolFeasibility(scip::SCIP_t, nlrow::SCIP_NLROW_t, sol::SCIP_SOL_t, feasibility::SCIP_Real_t) = @scip_ccall_check("SCIPgetNlRowSolFeasibility", (Ptr{SCIP}, Ptr{SCIP_NLROW}, Ptr{SCIP_SOL}, Ptr{SCIP_Real}), pointer(scip), pointer(nlrow), pointer(sol), pointer(feasibility))
#SCIPgetNlRowActivityBounds(scip::SCIP_t, nlrow::SCIP_NLROW_t, minactivity::SCIP_Real_t, maxactivity::SCIP_Real_t) = @scip_ccall_check("SCIPgetNlRowActivityBounds", (Ptr{SCIP}, Ptr{SCIP_NLROW}, Ptr{SCIP_Real}, Ptr{SCIP_Real}), pointer(scip), pointer(nlrow), pointer(minactivity), pointer(maxactivity))
#SCIPgetExprtreeTransformedVars(scip::SCIP_t, tree::SCIP_EXPRTREE_t) = @scip_ccall_check("SCIPgetExprtreeTransformedVars", (Ptr{SCIP}, Ptr{SCIP_EXPRTREE}), pointer(scip), pointer(tree))
#SCIPevalExprtreeSol(scip::SCIP_t, tree::SCIP_EXPRTREE_t, sol::SCIP_SOL_t, val::SCIP_Real_t) = @scip_ccall_check("SCIPevalExprtreeSol", (Ptr{SCIP}, Ptr{SCIP_EXPRTREE}, Ptr{SCIP_SOL}, Ptr{SCIP_Real}), pointer(scip), pointer(tree), pointer(sol), pointer(val))
#SCIPevalExprtreeGlobalBounds(scip::SCIP_t, tree::SCIP_EXPRTREE_t, infinity::SCIP_Real, val::SCIP_INTERVAL_t) = @scip_ccall_check("SCIPevalExprtreeGlobalBounds", (Ptr{SCIP}, Ptr{SCIP_EXPRTREE}, SCIP_Real, Ptr{SCIP_INTERVAL}), pointer(scip), pointer(tree), infinity, pointer(val))
#SCIPevalExprtreeLocalBounds(scip::SCIP_t, tree::SCIP_EXPRTREE_t, infinity::SCIP_Real, val::SCIP_INTERVAL_t) = @scip_ccall_check("SCIPevalExprtreeLocalBounds", (Ptr{SCIP}, Ptr{SCIP_EXPRTREE}, SCIP_Real, Ptr{SCIP_INTERVAL}), pointer(scip), pointer(tree), infinity, pointer(val))
#SCIPaddCut(scip::SCIP_t, sol::SCIP_SOL_t, cut::SCIP_ROW_t, forcecut::SCIP_Bool, infeasible::SCIP_Bool_t) = @scip_ccall_check("SCIPaddCut", (Ptr{SCIP}, Ptr{SCIP_SOL}, Ptr{SCIP_ROW}, SCIP_Bool, Ptr{SCIP_Bool}), pointer(scip), pointer(sol), pointer(cut), forcecut, pointer(infeasible))
#SCIPaddPoolCut(scip::SCIP_t, row::SCIP_ROW_t) = @scip_ccall_check("SCIPaddPoolCut", (Ptr{SCIP}, Ptr{SCIP_ROW}), pointer(scip), pointer(row))
#SCIPdelPoolCut(scip::SCIP_t, row::SCIP_ROW_t) = @scip_ccall_check("SCIPdelPoolCut", (Ptr{SCIP}, Ptr{SCIP_ROW}), pointer(scip), pointer(row))
#SCIPcreateCutpool(scip::SCIP_t, cutpool::SCIP_CUTPOOL_t, agelimit) = @scip_ccall_check("SCIPcreateCutpool", (Ptr{SCIP}, Ptr{Ptr{SCIP_CUTPOOL}}, Int), pointer(scip), array(cutpool), agelimit)
#SCIPfreeCutpool(scip::SCIP_t, cutpool::SCIP_CUTPOOL_t) = @scip_ccall_check("SCIPfreeCutpool", (Ptr{SCIP}, Ptr{Ptr{SCIP_CUTPOOL}}), pointer(scip), array(cutpool))
#SCIPaddRowCutpool(scip::SCIP_t, cutpool::SCIP_CUTPOOL_t, row::SCIP_ROW_t) = @scip_ccall_check("SCIPaddRowCutpool", (Ptr{SCIP}, Ptr{SCIP_CUTPOOL}, Ptr{SCIP_ROW}), pointer(scip), pointer(cutpool), pointer(row))
#SCIPaddNewRowCutpool(scip::SCIP_t, cutpool::SCIP_CUTPOOL_t, row::SCIP_ROW_t) = @scip_ccall_check("SCIPaddNewRowCutpool", (Ptr{SCIP}, Ptr{SCIP_CUTPOOL}, Ptr{SCIP_ROW}), pointer(scip), pointer(cutpool), pointer(row))
#SCIPdelRowCutpool(scip::SCIP_t, cutpool::SCIP_CUTPOOL_t, row::SCIP_ROW_t) = @scip_ccall_check("SCIPdelRowCutpool", (Ptr{SCIP}, Ptr{SCIP_CUTPOOL}, Ptr{SCIP_ROW}), pointer(scip), pointer(cutpool), pointer(row))
#SCIPseparateCutpool(scip::SCIP_t, cutpool::SCIP_CUTPOOL_t, result::SCIP_RESULT_t) = @scip_ccall_check("SCIPseparateCutpool", (Ptr{SCIP}, Ptr{SCIP_CUTPOOL}, Ptr{SCIP_RESULT}), pointer(scip), pointer(cutpool), pointer(result))
#SCIPseparateSolCutpool(scip::SCIP_t, cutpool::SCIP_CUTPOOL_t, sol::SCIP_SOL_t, result::SCIP_RESULT_t) = @scip_ccall_check("SCIPseparateSolCutpool", (Ptr{SCIP}, Ptr{SCIP_CUTPOOL}, Ptr{SCIP_SOL}, Ptr{SCIP_RESULT}), pointer(scip), pointer(cutpool), pointer(sol), pointer(result))
#SCIPaddDelayedPoolCut(scip::SCIP_t, row::SCIP_ROW_t) = @scip_ccall_check("SCIPaddDelayedPoolCut", (Ptr{SCIP}, Ptr{SCIP_ROW}), pointer(scip), pointer(row))
#SCIPdelDelayedPoolCut(scip::SCIP_t, row::SCIP_ROW_t) = @scip_ccall_check("SCIPdelDelayedPoolCut", (Ptr{SCIP}, Ptr{SCIP_ROW}), pointer(scip), pointer(row))
#SCIPseparateSol(scip::SCIP_t, sol::SCIP_SOL_t, pretendroot::SCIP_Bool, onlydelayed::SCIP_Bool, delayed::SCIP_Bool_t, cutoff::SCIP_Bool_t) = @scip_ccall_check("SCIPseparateSol", (Ptr{SCIP}, Ptr{SCIP_SOL}, SCIP_Bool, SCIP_Bool, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}), pointer(scip), pointer(sol), pretendroot, onlydelayed, pointer(delayed), pointer(cutoff))
#SCIPclearCuts(scip::SCIP_t) = @scip_ccall_check("SCIPclearCuts", (Ptr{SCIP},), pointer(scip))
#SCIPremoveInefficaciousCuts(scip::SCIP_t) = @scip_ccall_check("SCIPremoveInefficaciousCuts", (Ptr{SCIP},), pointer(scip))
#SCIPstartDive(scip::SCIP_t) = @scip_ccall_check("SCIPstartDive", (Ptr{SCIP},), pointer(scip))
#SCIPendDive(scip::SCIP_t) = @scip_ccall_check("SCIPendDive", (Ptr{SCIP},), pointer(scip))
#SCIPchgCutoffboundDive(scip::SCIP_t, newcutoffbound::SCIP_Real) = @scip_ccall_check("SCIPchgCutoffboundDive", (Ptr{SCIP}, SCIP_Real), pointer(scip), newcutoffbound)
#SCIPchgVarObjDive(scip::SCIP_t, var::SCIP_VAR_t, newobj::SCIP_Real) = @scip_ccall_check("SCIPchgVarObjDive", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), pointer(scip), pointer(var), newobj)
#SCIPchgVarLbDive(scip::SCIP_t, var::SCIP_VAR_t, newbound::SCIP_Real) = @scip_ccall_check("SCIPchgVarLbDive", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), pointer(scip), pointer(var), newbound)
#SCIPchgVarUbDive(scip::SCIP_t, var::SCIP_VAR_t, newbound::SCIP_Real) = @scip_ccall_check("SCIPchgVarUbDive", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), pointer(scip), pointer(var), newbound)
#SCIPaddRowDive(scip::SCIP_t, row::SCIP_ROW_t) = @scip_ccall_check("SCIPaddRowDive", (Ptr{SCIP}, Ptr{SCIP_ROW}), pointer(scip), pointer(row))
#SCIPchgRowLhsDive(scip::SCIP_t, row::SCIP_ROW_t, newlhs::SCIP_Real) = @scip_ccall_check("SCIPchgRowLhsDive", (Ptr{SCIP}, Ptr{SCIP_ROW}, SCIP_Real), pointer(scip), pointer(row), newlhs)
#SCIPchgRowRhsDive(scip::SCIP_t, row::SCIP_ROW_t, newrhs::SCIP_Real) = @scip_ccall_check("SCIPchgRowRhsDive", (Ptr{SCIP}, Ptr{SCIP_ROW}, SCIP_Real), pointer(scip), pointer(row), newrhs)
#SCIPsolveDiveLP(scip::SCIP_t, itlim, lperror::SCIP_Bool_t, cutoff::SCIP_Bool_t) = @scip_ccall_check("SCIPsolveDiveLP", (Ptr{SCIP}, Int, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}), pointer(scip), itlim, pointer(lperror), pointer(cutoff))
#SCIPstartProbing(scip::SCIP_t) = @scip_ccall_check("SCIPstartProbing", (Ptr{SCIP},), pointer(scip))
#SCIPnewProbingNode(scip::SCIP_t) = @scip_ccall_check("SCIPnewProbingNode", (Ptr{SCIP},), pointer(scip))
#SCIPbacktrackProbing(scip::SCIP_t, probingdepth) = @scip_ccall_check("SCIPbacktrackProbing", (Ptr{SCIP}, Int), pointer(scip), probingdepth)
#SCIPendProbing(scip::SCIP_t) = @scip_ccall_check("SCIPendProbing", (Ptr{SCIP},), pointer(scip))
#SCIPchgVarLbProbing(scip::SCIP_t, var::SCIP_VAR_t, newbound::SCIP_Real) = @scip_ccall_check("SCIPchgVarLbProbing", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), pointer(scip), pointer(var), newbound)
#SCIPchgVarUbProbing(scip::SCIP_t, var::SCIP_VAR_t, newbound::SCIP_Real) = @scip_ccall_check("SCIPchgVarUbProbing", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), pointer(scip), pointer(var), newbound)
#SCIPfixVarProbing(scip::SCIP_t, var::SCIP_VAR_t, fixedval::SCIP_Real) = @scip_ccall_check("SCIPfixVarProbing", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real), pointer(scip), pointer(var), fixedval)
#SCIPpropagateProbing(scip::SCIP_t, maxproprounds, cutoff::SCIP_Bool_t, ndomredsfound::SCIP_Longint_t) = @scip_ccall_check("SCIPpropagateProbing", (Ptr{SCIP}, Int, Ptr{SCIP_Bool}, Ptr{Int64}), pointer(scip), maxproprounds, pointer(cutoff), pointer(ndomredsfound))
#SCIPpropagateProbingImplications(scip::SCIP_t, cutoff::SCIP_Bool_t) = @scip_ccall_check("SCIPpropagateProbingImplications", (Ptr{SCIP}, Ptr{SCIP_Bool}), pointer(scip), pointer(cutoff))
#SCIPsolveProbingLP(scip::SCIP_t, itlim, lperror::SCIP_Bool_t, cutoff::SCIP_Bool_t) = @scip_ccall_check("SCIPsolveProbingLP", (Ptr{SCIP}, Int, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}), pointer(scip), itlim, pointer(lperror), pointer(cutoff))
#SCIPsolveProbingLPWithPricing(scip::SCIP_t, pretendroot::SCIP_Bool, displayinfo::SCIP_Bool, maxpricerounds, lperror::SCIP_Bool_t, cutoff::SCIP_Bool_t) = @scip_ccall_check("SCIPsolveProbingLPWithPricing", (Ptr{SCIP}, SCIP_Bool, SCIP_Bool, Int, Ptr{SCIP_Bool}, Ptr{SCIP_Bool}), pointer(scip), pretendroot, displayinfo, maxpricerounds, pointer(lperror), pointer(cutoff))
#SCIPaddExternBranchCand(scip::SCIP_t, var::SCIP_VAR_t, score::SCIP_Real, solval::SCIP_Real) = @scip_ccall_check("SCIPaddExternBranchCand", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real, SCIP_Real), pointer(scip), pointer(var), score, solval)
#SCIPcreateChild(scip::SCIP_t, node::SCIP_NODE_t, nodeselprio::SCIP_Real, estimate::SCIP_Real) = @scip_ccall_check("SCIPcreateChild", (Ptr{SCIP}, Ptr{Ptr{SCIP_NODE}}, SCIP_Real, SCIP_Real), pointer(scip), array(node), nodeselprio, estimate)
#SCIPbranchVar(scip::SCIP_t, var::SCIP_VAR_t, downchild::SCIP_NODE_t, eqchild::SCIP_NODE_t, upchild::SCIP_NODE_t) = @scip_ccall_check("SCIPbranchVar", (Ptr{SCIP}, Ptr{SCIP_VAR}, Ptr{Ptr{SCIP_NODE}}, Ptr{Ptr{SCIP_NODE}}, Ptr{Ptr{SCIP_NODE}}), pointer(scip), pointer(var), array(downchild), array(eqchild), array(upchild))
#SCIPbranchVarHole(scip::SCIP_t, var::SCIP_VAR_t, left::SCIP_Real, right::SCIP_Real, downchild::SCIP_NODE_t, upchild::SCIP_NODE_t) = @scip_ccall_check("SCIPbranchVarHole", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real, SCIP_Real, Ptr{Ptr{SCIP_NODE}}, Ptr{Ptr{SCIP_NODE}}), pointer(scip), pointer(var), left, right, array(downchild), array(upchild))
#SCIPbranchVarVal(scip::SCIP_t, var::SCIP_VAR_t, val::SCIP_Real, downchild::SCIP_NODE_t, eqchild::SCIP_NODE_t, upchild::SCIP_NODE_t) = @scip_ccall_check("SCIPbranchVarVal", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_Real, Ptr{Ptr{SCIP_NODE}}, Ptr{Ptr{SCIP_NODE}}, Ptr{Ptr{SCIP_NODE}}), pointer(scip), pointer(var), val, array(downchild), array(eqchild), array(upchild))
#SCIPbranchLP(scip::SCIP_t, result::SCIP_RESULT_t) = @scip_ccall_check("SCIPbranchLP", (Ptr{SCIP}, Ptr{SCIP_RESULT}), pointer(scip), pointer(result))
#SCIPbranchExtern(scip::SCIP_t, result::SCIP_RESULT_t) = @scip_ccall_check("SCIPbranchExtern", (Ptr{SCIP}, Ptr{SCIP_RESULT}), pointer(scip), pointer(result))
#SCIPbranchPseudo(scip::SCIP_t, result::SCIP_RESULT_t) = @scip_ccall_check("SCIPbranchPseudo", (Ptr{SCIP}, Ptr{SCIP_RESULT}), pointer(scip), pointer(result))
#SCIPcreateSol(scip::SCIP_t, sol::SCIP_SOL_t, heur::SCIP_HEUR_t) = @scip_ccall_check("SCIPcreateSol", (Ptr{SCIP}, Ptr{Ptr{SCIP_SOL}}, Ptr{SCIP_HEUR}), pointer(scip), array(sol), pointer(heur))
#SCIPcreateLPSol(scip::SCIP_t, sol::SCIP_SOL_t, heur::SCIP_HEUR_t) = @scip_ccall_check("SCIPcreateLPSol", (Ptr{SCIP}, Ptr{Ptr{SCIP_SOL}}, Ptr{SCIP_HEUR}), pointer(scip), array(sol), pointer(heur))
#SCIPcreateNLPSol(scip::SCIP_t, sol::SCIP_SOL_t, heur::SCIP_HEUR_t) = @scip_ccall_check("SCIPcreateNLPSol", (Ptr{SCIP}, Ptr{Ptr{SCIP_SOL}}, Ptr{SCIP_HEUR}), pointer(scip), array(sol), pointer(heur))
#SCIPcreateRelaxSol(scip::SCIP_t, sol::SCIP_SOL_t, heur::SCIP_HEUR_t) = @scip_ccall_check("SCIPcreateRelaxSol", (Ptr{SCIP}, Ptr{Ptr{SCIP_SOL}}, Ptr{SCIP_HEUR}), pointer(scip), array(sol), pointer(heur))
#SCIPcreatePseudoSol(scip::SCIP_t, sol::SCIP_SOL_t, heur::SCIP_HEUR_t) = @scip_ccall_check("SCIPcreatePseudoSol", (Ptr{SCIP}, Ptr{Ptr{SCIP_SOL}}, Ptr{SCIP_HEUR}), pointer(scip), array(sol), pointer(heur))
#SCIPcreateCurrentSol(scip::SCIP_t, sol::SCIP_SOL_t, heur::SCIP_HEUR_t) = @scip_ccall_check("SCIPcreateCurrentSol", (Ptr{SCIP}, Ptr{Ptr{SCIP_SOL}}, Ptr{SCIP_HEUR}), pointer(scip), array(sol), pointer(heur))
#SCIPcreateUnknownSol(scip::SCIP_t, sol::SCIP_SOL_t, heur::SCIP_HEUR_t) = @scip_ccall_check("SCIPcreateUnknownSol", (Ptr{SCIP}, Ptr{Ptr{SCIP_SOL}}, Ptr{SCIP_HEUR}), pointer(scip), array(sol), pointer(heur))
#SCIPcreateOrigSol(scip::SCIP_t, sol::SCIP_SOL_t, heur::SCIP_HEUR_t) = @scip_ccall_check("SCIPcreateOrigSol", (Ptr{SCIP}, Ptr{Ptr{SCIP_SOL}}, Ptr{SCIP_HEUR}), pointer(scip), array(sol), pointer(heur))
#SCIPcreateSolCopy(scip::SCIP_t, sol::SCIP_SOL_t, sourcesol::SCIP_SOL_t) = @scip_ccall_check("SCIPcreateSolCopy", (Ptr{SCIP}, Ptr{Ptr{SCIP_SOL}}, Ptr{SCIP_SOL}), pointer(scip), array(sol), pointer(sourcesol))
#SCIPcreateFiniteSolCopy(scip::SCIP_t, sol::SCIP_SOL_t, sourcesol::SCIP_SOL_t, success::SCIP_Bool_t) = @scip_ccall_check("SCIPcreateFiniteSolCopy", (Ptr{SCIP}, Ptr{Ptr{SCIP_SOL}}, Ptr{SCIP_SOL}, Ptr{SCIP_Bool}), pointer(scip), array(sol), pointer(sourcesol), pointer(success))
#SCIPfreeSol(scip::SCIP_t, sol::SCIP_SOL_t) = @scip_ccall_check("SCIPfreeSol", (Ptr{SCIP}, Ptr{Ptr{SCIP_SOL}}), pointer(scip), array(sol))
#SCIPlinkLPSol(scip::SCIP_t, sol::SCIP_SOL_t) = @scip_ccall_check("SCIPlinkLPSol", (Ptr{SCIP}, Ptr{SCIP_SOL}), pointer(scip), pointer(sol))
#SCIPlinkNLPSol(scip::SCIP_t, sol::SCIP_SOL_t) = @scip_ccall_check("SCIPlinkNLPSol", (Ptr{SCIP}, Ptr{SCIP_SOL}), pointer(scip), pointer(sol))
#SCIPlinkRelaxSol(scip::SCIP_t, sol::SCIP_SOL_t) = @scip_ccall_check("SCIPlinkRelaxSol", (Ptr{SCIP}, Ptr{SCIP_SOL}), pointer(scip), pointer(sol))
#SCIPlinkPseudoSol(scip::SCIP_t, sol::SCIP_SOL_t) = @scip_ccall_check("SCIPlinkPseudoSol", (Ptr{SCIP}, Ptr{SCIP_SOL}), pointer(scip), pointer(sol))
#SCIPlinkCurrentSol(scip::SCIP_t, sol::SCIP_SOL_t) = @scip_ccall_check("SCIPlinkCurrentSol", (Ptr{SCIP}, Ptr{SCIP_SOL}), pointer(scip), pointer(sol))
#SCIPclearSol(scip::SCIP_t, sol::SCIP_SOL_t) = @scip_ccall_check("SCIPclearSol", (Ptr{SCIP}, Ptr{SCIP_SOL}), pointer(scip), pointer(sol))
#SCIPunlinkSol(scip::SCIP_t, sol::SCIP_SOL_t) = @scip_ccall_check("SCIPunlinkSol", (Ptr{SCIP}, Ptr{SCIP_SOL}), pointer(scip), pointer(sol))
#SCIPsetSolVal(scip::SCIP_t, sol::SCIP_SOL_t, var::SCIP_VAR_t, val::SCIP_Real) = @scip_ccall_check("SCIPsetSolVal", (Ptr{SCIP}, Ptr{SCIP_SOL}, Ptr{SCIP_VAR}, SCIP_Real), pointer(scip), pointer(sol), pointer(var), val)
#SCIPsetSolVals(scip::SCIP_t, sol::SCIP_SOL_t, nvars, vars::SCIP_VAR_t, vals::SCIP_Real_t) = @scip_ccall_check("SCIPsetSolVals", (Ptr{SCIP}, Ptr{SCIP_SOL}, Int, Ptr{Ptr{SCIP_VAR}}, Ptr{SCIP_Real}), pointer(scip), pointer(sol), nvars, array(vars), pointer(vals))
#SCIPincSolVal(scip::SCIP_t, sol::SCIP_SOL_t, var::SCIP_VAR_t, incval::SCIP_Real) = @scip_ccall_check("SCIPincSolVal", (Ptr{SCIP}, Ptr{SCIP_SOL}, Ptr{SCIP_VAR}, SCIP_Real), pointer(scip), pointer(sol), pointer(var), incval)
#SCIPgetSolVals(scip::SCIP_t, sol::SCIP_SOL_t, nvars, vars::SCIP_VAR_t, vals::SCIP_Real_t) = @scip_ccall_check("SCIPgetSolVals", (Ptr{SCIP}, Ptr{SCIP_SOL}, Int, Ptr{Ptr{SCIP_VAR}}, Ptr{SCIP_Real}), pointer(scip), pointer(sol), nvars, array(vars), pointer(vals))
#SCIPadjustImplicitSolVals(scip::SCIP_t, sol::SCIP_SOL_t, uselprows::SCIP_Bool) = @scip_ccall_check("SCIPadjustImplicitSolVals", (Ptr{SCIP}, Ptr{SCIP_SOL}, SCIP_Bool), pointer(scip), pointer(sol), uselprows)
#SCIProundSol(scip::SCIP_t, sol::SCIP_SOL_t, success::SCIP_Bool_t) = @scip_ccall_check("SCIProundSol", (Ptr{SCIP}, Ptr{SCIP_SOL}, Ptr{SCIP_Bool}), pointer(scip), pointer(sol), pointer(success))
#SCIPretransformSol(scip::SCIP_t, sol::SCIP_SOL_t) = @scip_ccall_check("SCIPretransformSol", (Ptr{SCIP}, Ptr{SCIP_SOL}), pointer(scip), pointer(sol))
#SCIPreadSol(scip::SCIP_t, filename) = @scip_ccall_check("SCIPreadSol", (Ptr{SCIP}, String), pointer(scip), filename)
#SCIPaddSol(scip::SCIP_t, sol::SCIP_SOL_t, stored::SCIP_Bool_t) = @scip_ccall_check("SCIPaddSol", (Ptr{SCIP}, Ptr{SCIP_SOL}, Ptr{SCIP_Bool}), pointer(scip), pointer(sol), pointer(stored))
#SCIPaddSolFree(scip::SCIP_t, sol::SCIP_SOL_t, stored::SCIP_Bool_t) = @scip_ccall_check("SCIPaddSolFree", (Ptr{SCIP}, Ptr{Ptr{SCIP_SOL}}, Ptr{SCIP_Bool}), pointer(scip), array(sol), pointer(stored))
#SCIPaddCurrentSol(scip::SCIP_t, heur::SCIP_HEUR_t, stored::SCIP_Bool_t) = @scip_ccall_check("SCIPaddCurrentSol", (Ptr{SCIP}, Ptr{SCIP_HEUR}, Ptr{SCIP_Bool}), pointer(scip), pointer(heur), pointer(stored))
#SCIPtrySol(scip::SCIP_t, sol::SCIP_SOL_t, printreason::SCIP_Bool, checkbounds::SCIP_Bool, checkintegrality::SCIP_Bool, checklprows::SCIP_Bool, stored::SCIP_Bool_t) = @scip_ccall_check("SCIPtrySol", (Ptr{SCIP}, Ptr{SCIP_SOL}, SCIP_Bool, SCIP_Bool, SCIP_Bool, SCIP_Bool, Ptr{SCIP_Bool}), pointer(scip), pointer(sol), printreason, checkbounds, checkintegrality, checklprows, pointer(stored))
#SCIPtrySolFree(scip::SCIP_t, sol::SCIP_SOL_t, printreason::SCIP_Bool, checkbounds::SCIP_Bool, checkintegrality::SCIP_Bool, checklprows::SCIP_Bool, stored::SCIP_Bool_t) = @scip_ccall_check("SCIPtrySolFree", (Ptr{SCIP}, Ptr{Ptr{SCIP_SOL}}, SCIP_Bool, SCIP_Bool, SCIP_Bool, SCIP_Bool, Ptr{SCIP_Bool}), pointer(scip), array(sol), printreason, checkbounds, checkintegrality, checklprows, pointer(stored))
#SCIPtryCurrentSol(scip::SCIP_t, heur::SCIP_HEUR_t, printreason::SCIP_Bool, checkintegrality::SCIP_Bool, checklprows::SCIP_Bool, stored::SCIP_Bool_t) = @scip_ccall_check("SCIPtryCurrentSol", (Ptr{SCIP}, Ptr{SCIP_HEUR}, SCIP_Bool, SCIP_Bool, SCIP_Bool, Ptr{SCIP_Bool}), pointer(scip), pointer(heur), printreason, checkintegrality, checklprows, pointer(stored))
#SCIPcheckSol(scip::SCIP_t, sol::SCIP_SOL_t, printreason::SCIP_Bool, checkbounds::SCIP_Bool, checkintegrality::SCIP_Bool, checklprows::SCIP_Bool, feasible::SCIP_Bool_t) = @scip_ccall_check("SCIPcheckSol", (Ptr{SCIP}, Ptr{SCIP_SOL}, SCIP_Bool, SCIP_Bool, SCIP_Bool, SCIP_Bool, Ptr{SCIP_Bool}), pointer(scip), pointer(sol), printreason, checkbounds, checkintegrality, checklprows, pointer(feasible))
#SCIPcheckSolOrig(scip::SCIP_t, sol::SCIP_SOL_t, feasible::SCIP_Bool_t, printreason::SCIP_Bool, completely::SCIP_Bool) = @scip_ccall_check("SCIPcheckSolOrig", (Ptr{SCIP}, Ptr{SCIP_SOL}, Ptr{SCIP_Bool}, SCIP_Bool, SCIP_Bool), pointer(scip), pointer(sol), pointer(feasible), printreason, completely)
#SCIPdropEvent(scip::SCIP_t, eventtype::SCIP_EVENTTYPE, eventhdlr::SCIP_EVENTHDLR_t, eventdata::SCIP_EVENTDATA_t, filterpos) = @scip_ccall_check("SCIPdropEvent", (Ptr{SCIP}, SCIP_EVENTTYPE, Ptr{SCIP_EVENTHDLR}, Ptr{SCIP_EVENTDATA}, Int), pointer(scip), eventtype, pointer(eventhdlr), pointer(eventdata), filterpos)
#SCIPdropVarEvent(scip::SCIP_t, var::SCIP_VAR_t, eventtype::SCIP_EVENTTYPE, eventhdlr::SCIP_EVENTHDLR_t, eventdata::SCIP_EVENTDATA_t, filterpos) = @scip_ccall_check("SCIPdropVarEvent", (Ptr{SCIP}, Ptr{SCIP_VAR}, SCIP_EVENTTYPE, Ptr{SCIP_EVENTHDLR}, Ptr{SCIP_EVENTDATA}, Int), pointer(scip), pointer(var), eventtype, pointer(eventhdlr), pointer(eventdata), filterpos)
#SCIPdropRowEvent(scip::SCIP_t, row::SCIP_ROW_t, eventtype::SCIP_EVENTTYPE, eventhdlr::SCIP_EVENTHDLR_t, eventdata::SCIP_EVENTDATA_t, filterpos) = @scip_ccall_check("SCIPdropRowEvent", (Ptr{SCIP}, Ptr{SCIP_ROW}, SCIP_EVENTTYPE, Ptr{SCIP_EVENTHDLR}, Ptr{SCIP_EVENTDATA}, Int), pointer(scip), pointer(row), eventtype, pointer(eventhdlr), pointer(eventdata), filterpos)
#SCIPcutoffNode(scip::SCIP_t, node::SCIP_NODE_t) = @scip_ccall_check("SCIPcutoffNode", (Ptr{SCIP}, Ptr{SCIP_NODE}), pointer(scip), pointer(node))
#SCIPrepropagateNode(scip::SCIP_t, node::SCIP_NODE_t) = @scip_ccall_check("SCIPrepropagateNode", (Ptr{SCIP}, Ptr{SCIP_NODE}), pointer(scip), pointer(node))
#SCIPupdateCutoffbound(scip::SCIP_t, cutoffbound::SCIP_Real) = @scip_ccall_check("SCIPupdateCutoffbound", (Ptr{SCIP}, SCIP_Real), pointer(scip), cutoffbound)
#SCIPwriteImplicationConflictGraph(scip::SCIP_t, filename) = @scip_ccall_check("SCIPwriteImplicationConflictGraph", (Ptr{SCIP}, String), pointer(scip), filename)
#SCIPcreateClock(scip::SCIP_t, clck::SCIP_CLOCK_t) = @scip_ccall_check("SCIPcreateClock", (Ptr{SCIP}, Ptr{Ptr{SCIP_CLOCK}}), pointer(scip), array(clck))
#SCIPcreateCPUClock(scip::SCIP_t, clck::SCIP_CLOCK_t) = @scip_ccall_check("SCIPcreateCPUClock", (Ptr{SCIP}, Ptr{Ptr{SCIP_CLOCK}}), pointer(scip), array(clck))
#SCIPcreateWallClock(scip::SCIP_t, clck::SCIP_CLOCK_t) = @scip_ccall_check("SCIPcreateWallClock", (Ptr{SCIP}, Ptr{Ptr{SCIP_CLOCK}}), pointer(scip), array(clck))
#SCIPfreeClock(scip::SCIP_t, clck::SCIP_CLOCK_t) = @scip_ccall_check("SCIPfreeClock", (Ptr{SCIP}, Ptr{Ptr{SCIP_CLOCK}}), pointer(scip), array(clck))
#SCIPresetClock(scip::SCIP_t, clck::SCIP_CLOCK_t) = @scip_ccall_check("SCIPresetClock", (Ptr{SCIP}, Ptr{SCIP_CLOCK}), pointer(scip), pointer(clck))
#SCIPstartClock(scip::SCIP_t, clck::SCIP_CLOCK_t) = @scip_ccall_check("SCIPstartClock", (Ptr{SCIP}, Ptr{SCIP_CLOCK}), pointer(scip), pointer(clck))
#SCIPstopClock(scip::SCIP_t, clck::SCIP_CLOCK_t) = @scip_ccall_check("SCIPstopClock", (Ptr{SCIP}, Ptr{SCIP_CLOCK}), pointer(scip), pointer(clck))
#SCIPstartSolvingTime(scip::SCIP_t) = @scip_ccall_check("SCIPstartSolvingTime", (Ptr{SCIP},), pointer(scip))
#SCIPstopSolvingTime(scip::SCIP_t) = @scip_ccall_check("SCIPstopSolvingTime", (Ptr{SCIP},), pointer(scip))
#SCIPsetClockTime(scip::SCIP_t, clck::SCIP_CLOCK_t, sec::SCIP_Real) = @scip_ccall_check("SCIPsetClockTime", (Ptr{SCIP}, Ptr{SCIP_CLOCK}, SCIP_Real), pointer(scip), pointer(clck), sec)
#SCIPchgFeastol(scip::SCIP_t, feastol::SCIP_Real) = @scip_ccall_check("SCIPchgFeastol", (Ptr{SCIP}, SCIP_Real), pointer(scip), feastol)
#SCIPchgLpfeastol(scip::SCIP_t, lpfeastol::SCIP_Real, printnewvalue::SCIP_Bool) = @scip_ccall_check("SCIPchgLpfeastol", (Ptr{SCIP}, SCIP_Real, SCIP_Bool), pointer(scip), lpfeastol, printnewvalue)
#SCIPchgDualfeastol(scip::SCIP_t, dualfeastol::SCIP_Real) = @scip_ccall_check("SCIPchgDualfeastol", (Ptr{SCIP}, SCIP_Real), pointer(scip), dualfeastol)
#SCIPchgBarrierconvtol(scip::SCIP_t, barrierconvtol::SCIP_Real) = @scip_ccall_check("SCIPchgBarrierconvtol", (Ptr{SCIP}, SCIP_Real), pointer(scip), barrierconvtol)
#SCIPcreateRealarray(scip::SCIP_t, realarray::SCIP_REALARRAY_t) = @scip_ccall_check("SCIPcreateRealarray", (Ptr{SCIP}, Ptr{Ptr{SCIP_REALARRAY}}), pointer(scip), array(realarray))
#SCIPfreeRealarray(scip::SCIP_t, realarray::SCIP_REALARRAY_t) = @scip_ccall_check("SCIPfreeRealarray", (Ptr{SCIP}, Ptr{Ptr{SCIP_REALARRAY}}), pointer(scip), array(realarray))
#SCIPextendRealarray(scip::SCIP_t, realarray::SCIP_REALARRAY_t, minidx, maxidx) = @scip_ccall_check("SCIPextendRealarray", (Ptr{SCIP}, Ptr{SCIP_REALARRAY}, Int, Int), pointer(scip), pointer(realarray), minidx, maxidx)
#SCIPclearRealarray(scip::SCIP_t, realarray::SCIP_REALARRAY_t) = @scip_ccall_check("SCIPclearRealarray", (Ptr{SCIP}, Ptr{SCIP_REALARRAY}), pointer(scip), pointer(realarray))
#SCIPsetRealarrayVal(scip::SCIP_t, realarray::SCIP_REALARRAY_t, idx, val::SCIP_Real) = @scip_ccall_check("SCIPsetRealarrayVal", (Ptr{SCIP}, Ptr{SCIP_REALARRAY}, Int, SCIP_Real), pointer(scip), pointer(realarray), idx, val)
#SCIPincRealarrayVal(scip::SCIP_t, realarray::SCIP_REALARRAY_t, idx, incval::SCIP_Real) = @scip_ccall_check("SCIPincRealarrayVal", (Ptr{SCIP}, Ptr{SCIP_REALARRAY}, Int, SCIP_Real), pointer(scip), pointer(realarray), idx, incval)
#SCIPcreateIntarray(scip::SCIP_t, intarray::SCIP_INTARRAY_t) = @scip_ccall_check("SCIPcreateIntarray", (Ptr{SCIP}, Ptr{Ptr{SCIP_INTARRAY}}), pointer(scip), array(intarray))
#SCIPfreeIntarray(scip::SCIP_t, intarray::SCIP_INTARRAY_t) = @scip_ccall_check("SCIPfreeIntarray", (Ptr{SCIP}, Ptr{Ptr{SCIP_INTARRAY}}), pointer(scip), array(intarray))
#SCIPextendIntarray(scip::SCIP_t, intarray::SCIP_INTARRAY_t, minidx, maxidx) = @scip_ccall_check("SCIPextendIntarray", (Ptr{SCIP}, Ptr{SCIP_INTARRAY}, Int, Int), pointer(scip), pointer(intarray), minidx, maxidx)
#SCIPclearIntarray(scip::SCIP_t, intarray::SCIP_INTARRAY_t) = @scip_ccall_check("SCIPclearIntarray", (Ptr{SCIP}, Ptr{SCIP_INTARRAY}), pointer(scip), pointer(intarray))
#SCIPsetIntarrayVal(scip::SCIP_t, intarray::SCIP_INTARRAY_t, idx, val) = @scip_ccall_check("SCIPsetIntarrayVal", (Ptr{SCIP}, Ptr{SCIP_INTARRAY}, Int, Int), pointer(scip), pointer(intarray), idx, val)
#SCIPincIntarrayVal(scip::SCIP_t, intarray::SCIP_INTARRAY_t, idx, incval) = @scip_ccall_check("SCIPincIntarrayVal", (Ptr{SCIP}, Ptr{SCIP_INTARRAY}, Int, Int), pointer(scip), pointer(intarray), idx, incval)
#SCIPcreateBoolarray(scip::SCIP_t, boolarray::SCIP_BOOLARRAY_t) = @scip_ccall_check("SCIPcreateBoolarray", (Ptr{SCIP}, Ptr{Ptr{SCIP_BOOLARRAY}}), pointer(scip), array(boolarray))
#SCIPfreeBoolarray(scip::SCIP_t, boolarray::SCIP_BOOLARRAY_t) = @scip_ccall_check("SCIPfreeBoolarray", (Ptr{SCIP}, Ptr{Ptr{SCIP_BOOLARRAY}}), pointer(scip), array(boolarray))
#SCIPextendBoolarray(scip::SCIP_t, boolarray::SCIP_BOOLARRAY_t, minidx, maxidx) = @scip_ccall_check("SCIPextendBoolarray", (Ptr{SCIP}, Ptr{SCIP_BOOLARRAY}, Int, Int), pointer(scip), pointer(boolarray), minidx, maxidx)
#SCIPclearBoolarray(scip::SCIP_t, boolarray::SCIP_BOOLARRAY_t) = @scip_ccall_check("SCIPclearBoolarray", (Ptr{SCIP}, Ptr{SCIP_BOOLARRAY}), pointer(scip), pointer(boolarray))
#SCIPsetBoolarrayVal(scip::SCIP_t, boolarray::SCIP_BOOLARRAY_t, idx, val::SCIP_Bool) = @scip_ccall_check("SCIPsetBoolarrayVal", (Ptr{SCIP}, Ptr{SCIP_BOOLARRAY}, Int, SCIP_Bool), pointer(scip), pointer(boolarray), idx, val)
#SCIPcreatePtrarray(scip::SCIP_t, ptrarray::SCIP_PTRARRAY_t) = @scip_ccall_check("SCIPcreatePtrarray", (Ptr{SCIP}, Ptr{Ptr{SCIP_PTRARRAY}}), pointer(scip), array(ptrarray))
#SCIPfreePtrarray(scip::SCIP_t, ptrarray::SCIP_PTRARRAY_t) = @scip_ccall_check("SCIPfreePtrarray", (Ptr{SCIP}, Ptr{Ptr{SCIP_PTRARRAY}}), pointer(scip), array(ptrarray))
#SCIPextendPtrarray(scip::SCIP_t, ptrarray::SCIP_PTRARRAY_t, minidx, maxidx) = @scip_ccall_check("SCIPextendPtrarray", (Ptr{SCIP}, Ptr{SCIP_PTRARRAY}, Int, Int), pointer(scip), pointer(ptrarray), minidx, maxidx)
#SCIPclearPtrarray(scip::SCIP_t, ptrarray::SCIP_PTRARRAY_t) = @scip_ccall_check("SCIPclearPtrarray", (Ptr{SCIP}, Ptr{SCIP_PTRARRAY}), pointer(scip), pointer(ptrarray))
