# Macro for calling SCIP functions that return misc. types
macro scip_ccall(func, args...)
    f = "SCIP$(func)"
    return quote
        ccall(($f, "libscipopt"), $(args...))
    end
end

# Macro for calling SCIP functions that have checked return codes
macro scip_ccall_check(func, args...)
    f = "SCIP$(func)"
    return quote
        ret = ccall(($f, "libscipopt"), Int8, $(args...))
        if ret != SCIP_OKAY
            error(SCIP_RETCODE[ret])
        end
    end
end

# SCIP function wrappers: unchecked functions
exprcurvAdd(curv1, curv2) = @scip_ccall("exprcurvAdd", SCIP_EXPRCURV, (SCIP_EXPRCURV, SCIP_EXPRCURV), curv1, curv2)
exprcurvNegate(curvature) = @scip_ccall("exprcurvNegate", SCIP_EXPRCURV, (SCIP_EXPRCURV,), curvature)
exprcurvMultiply(factor, curvature) = @scip_ccall("exprcurvMultiply", SCIP_EXPRCURV, (SCIP_Real, SCIP_EXPRCURV), factor, curvature)
exprcurvPower(basebounds, basecurv, exponent) = @scip_ccall("exprcurvPower", SCIP_EXPRCURV, (SCIP_INTERVAL, SCIP_EXPRCURV, SCIP_Real), basebounds, basecurv, exponent)
exprcurvMonomial(nfactors, exponents, factoridxs, factorcurv, factorbounds) = @scip_ccall("exprcurvMonomial", SCIP_EXPRCURV, (int, SCIP_Real *, int *, SCIP_EXPRCURV *, SCIP_INTERVAL *), nfactors, exponents, factoridxs, factorcurv, factorbounds)
exprcurvGetName(curv) = @scip_ccall("exprcurvGetName", const char *, (SCIP_EXPRCURV,), curv)
expropGetName(op) = @scip_ccall("expropGetName", const char *, (SCIP_EXPROP,), op)
expropGetNChildren(op) = @scip_ccall("expropGetNChildren", int, (SCIP_EXPROP,), op)
exprGetOperator(expr) = @scip_ccall("exprGetOperator", SCIP_EXPROP, (SCIP_EXPR *,), expr)
exprGetNChildren(expr) = @scip_ccall("exprGetNChildren", int, (SCIP_EXPR *,), expr)
exprGetChildren(expr) = @scip_ccall("exprGetChildren", SCIP_EXPR **, (SCIP_EXPR *,), expr)
exprGetOpIndex(expr) = @scip_ccall("exprGetOpIndex", int, (SCIP_EXPR *,), expr)
exprGetOpReal(expr) = @scip_ccall("exprGetOpReal", SCIP_Real, (SCIP_EXPR *,), expr)
exprGetOpData(expr) = @scip_ccall("exprGetOpData", void *, (SCIP_EXPR *,), expr)
exprGetRealPowerExponent(expr) = @scip_ccall("exprGetRealPowerExponent", SCIP_Real, (SCIP_EXPR *,), expr)
exprGetIntPowerExponent(expr) = @scip_ccall("exprGetIntPowerExponent", int, (SCIP_EXPR *,), expr)
exprGetSignPowerExponent(expr) = @scip_ccall("exprGetSignPowerExponent", SCIP_Real, (SCIP_EXPR *,), expr)
exprGetLinearCoefs(expr) = @scip_ccall("exprGetLinearCoefs", SCIP_Real *, (SCIP_EXPR *,), expr)
exprGetLinearConstant(expr) = @scip_ccall("exprGetLinearConstant", SCIP_Real, (SCIP_EXPR *,), expr)
exprGetQuadElements(expr) = @scip_ccall("exprGetQuadElements", SCIP_QUADELEM *, (SCIP_EXPR *,), expr)
exprGetQuadConstant(expr) = @scip_ccall("exprGetQuadConstant", SCIP_Real, (SCIP_EXPR *,), expr)
exprGetQuadLinearCoefs(expr) = @scip_ccall("exprGetQuadLinearCoefs", SCIP_Real *, (SCIP_EXPR *,), expr)
exprGetNQuadElements(expr) = @scip_ccall("exprGetNQuadElements", int, (SCIP_EXPR *,), expr)
exprGetMonomials(expr) = @scip_ccall("exprGetMonomials", SCIP_EXPRDATA_MONOMIAL **, (SCIP_EXPR *,), expr)
exprGetNMonomials(expr) = @scip_ccall("exprGetNMonomials", int, (SCIP_EXPR *,), expr)
exprGetPolynomialConstant(expr) = @scip_ccall("exprGetPolynomialConstant", SCIP_Real, (SCIP_EXPR *,), expr)
exprGetMonomialCoef(monomial) = @scip_ccall("exprGetMonomialCoef", SCIP_Real, (SCIP_EXPRDATA_MONOMIAL *,), monomial)
exprGetMonomialNFactors(monomial) = @scip_ccall("exprGetMonomialNFactors", int, (SCIP_EXPRDATA_MONOMIAL *,), monomial)
exprGetMonomialChildIndices(monomial) = @scip_ccall("exprGetMonomialChildIndices", int *, (SCIP_EXPRDATA_MONOMIAL *,), monomial)
exprGetMonomialExponents(monomial) = @scip_ccall("exprGetMonomialExponents", SCIP_Real *, (SCIP_EXPRDATA_MONOMIAL *,), monomial)
exprFreeDeep(blkmem, expr) = @scip_ccall("exprFreeDeep", void, (BMS_BLKMEM *, SCIP_EXPR **), blkmem, expr)
exprFreeShallow(blkmem, expr) = @scip_ccall("exprFreeShallow", void, (BMS_BLKMEM *, SCIP_EXPR **), blkmem, expr)
exprSortQuadElems(expr) = @scip_ccall("exprSortQuadElems", void, (SCIP_EXPR *,), expr)
exprChgPolynomialConstant(expr, constant) = @scip_ccall("exprChgPolynomialConstant", void, (SCIP_EXPR *, SCIP_Real), expr, constant)
exprMultiplyPolynomialByConstant(blkmem, expr, factor) = @scip_ccall("exprMultiplyPolynomialByConstant", void, (BMS_BLKMEM *, SCIP_EXPR *, SCIP_Real), blkmem, expr, factor)
exprMergeMonomials(blkmem, expr, eps, mergefactors) = @scip_ccall("exprMergeMonomials", void, (BMS_BLKMEM *, SCIP_EXPR *, SCIP_Real, SCIP_Bool), blkmem, expr, eps, mergefactors)
exprFreeMonomial(blkmem, monomial) = @scip_ccall("exprFreeMonomial", void, (BMS_BLKMEM *, SCIP_EXPRDATA_MONOMIAL **), blkmem, monomial)
exprSortMonomialFactors(monomial) = @scip_ccall("exprSortMonomialFactors", void, (SCIP_EXPRDATA_MONOMIAL *,), monomial)
exprFindMonomialFactor(monomial, childidx, pos) = @scip_ccall("exprFindMonomialFactor", SCIP_Bool, (SCIP_EXPRDATA_MONOMIAL *, int, int *), monomial, childidx, pos)
exprAreMonomialsEqual(monomial1, monomial2, eps) = @scip_ccall("exprAreMonomialsEqual", SCIP_Bool, (SCIP_EXPRDATA_MONOMIAL *, SCIP_EXPRDATA_MONOMIAL *, SCIP_Real), monomial1, monomial2, eps)
exprChgMonomialCoef(monomial, newcoef) = @scip_ccall("exprChgMonomialCoef", void, (SCIP_EXPRDATA_MONOMIAL *, SCIP_Real), monomial, newcoef)
exprMonomialPower(monomial, exponent) = @scip_ccall("exprMonomialPower", void, (SCIP_EXPRDATA_MONOMIAL *, int), monomial, exponent)
exprMergeMonomialFactors(monomial, eps) = @scip_ccall("exprMergeMonomialFactors", void, (SCIP_EXPRDATA_MONOMIAL *, SCIP_Real), monomial, eps)
exprSortMonomials(expr) = @scip_ccall("exprSortMonomials", void, (SCIP_EXPR *,), expr)
exprHasParam(expr) = @scip_ccall("exprHasParam", SCIP_Bool, (SCIP_EXPR *,), expr)
exprGetVarsUsage(expr, varsusage) = @scip_ccall("exprGetVarsUsage", void, (SCIP_EXPR *, int *), expr, varsusage)
exprAreEqual(expr1, expr2, eps) = @scip_ccall("exprAreEqual", SCIP_Bool, (SCIP_EXPR *, SCIP_EXPR *, SCIP_Real), expr1, expr2, eps)
exprReindexVars(expr, newindices) = @scip_ccall("exprReindexVars", void, (SCIP_EXPR *, int *), expr, newindices)
exprReindexParams(expr, newindices) = @scip_ccall("exprReindexParams", void, (SCIP_EXPR *, int *), expr, newindices)
exprPrint(expr, messagehdlr, file, varnames, paramnames, paramvals) = @scip_ccall("exprPrint", void, (SCIP_EXPR *, SCIP_MESSAGEHDLR *, FILE *, const char **, const char **, SCIP_Real *), expr, messagehdlr, file, varnames, paramnames, paramvals)
exprtreeGetRoot(tree) = @scip_ccall("exprtreeGetRoot", SCIP_EXPR *, (SCIP_EXPRTREE *,), tree)
exprtreeGetNVars(tree) = @scip_ccall("exprtreeGetNVars", int, (SCIP_EXPRTREE *,), tree)
exprtreeGetNParams(tree) = @scip_ccall("exprtreeGetNParams", int, (SCIP_EXPRTREE *,), tree)
exprtreeGetParamVals(tree) = @scip_ccall("exprtreeGetParamVals", SCIP_Real *, (SCIP_EXPRTREE *,), tree)
exprtreeSetParamVal(tree, paramidx, paramval) = @scip_ccall("exprtreeSetParamVal", void, (SCIP_EXPRTREE *, int, SCIP_Real), tree, paramidx, paramval)
exprtreeGetInterpreterData(tree) = @scip_ccall("exprtreeGetInterpreterData", SCIP_EXPRINTDATA *, (SCIP_EXPRTREE *,), tree)
exprtreeSetInterpreterData(tree, interpreterdata) = @scip_ccall("exprtreeSetInterpreterData", void, (SCIP_EXPRTREE *, SCIP_EXPRINTDATA *), tree, interpreterdata)
exprtreeHasParam(tree) = @scip_ccall("exprtreeHasParam", SCIP_Bool, (SCIP_EXPRTREE *,), tree)
exprtreePrint(tree, messagehdlr, file, varnames, paramnames) = @scip_ccall("exprtreePrint", void, (SCIP_EXPRTREE *, SCIP_MESSAGEHDLR *, FILE *, const char **, const char **), tree, messagehdlr, file, varnames, paramnames)
exprtreeGetVarsUsage(tree, varsusage) = @scip_ccall("exprtreeGetVarsUsage", void, (SCIP_EXPRTREE *, int *), tree, varsusage)
quadelemSort(quadelems, nquadelems) = @scip_ccall("quadelemSort", void, (SCIP_QUADELEM *, int), quadelems, nquadelems)
quadelemSortedFind(quadelems, idx1, idx2, nquadelems, pos) = @scip_ccall("quadelemSortedFind", SCIP_Bool, (SCIP_QUADELEM *, int, int, int, int *), quadelems, idx1, idx2, nquadelems, pos)
quadelemSqueeze(quadelems, nquadelems, nquadelemsnew) = @scip_ccall("quadelemSqueeze", void, (SCIP_QUADELEM *, int, int *), quadelems, nquadelems, nquadelemsnew)
exprgraphCaptureNode(node) = @scip_ccall("exprgraphCaptureNode", void, (SCIP_EXPRGRAPHNODE *,), node)
exprgraphIsNodeEnabled(node) = @scip_ccall("exprgraphIsNodeEnabled", SCIP_Bool, (SCIP_EXPRGRAPHNODE *,), node)
exprgraphGetNodeNChildren(node) = @scip_ccall("exprgraphGetNodeNChildren", int, (SCIP_EXPRGRAPHNODE *,), node)
exprgraphGetNodeChildren(node) = @scip_ccall("exprgraphGetNodeChildren", SCIP_EXPRGRAPHNODE **, (SCIP_EXPRGRAPHNODE *,), node)
exprgraphGetNodeNParents(node) = @scip_ccall("exprgraphGetNodeNParents", int, (SCIP_EXPRGRAPHNODE *,), node)
exprgraphGetNodeParents(node) = @scip_ccall("exprgraphGetNodeParents", SCIP_EXPRGRAPHNODE **, (SCIP_EXPRGRAPHNODE *,), node)
exprgraphGetNodeDepth(node) = @scip_ccall("exprgraphGetNodeDepth", int, (SCIP_EXPRGRAPHNODE *,), node)
exprgraphGetNodePosition(node) = @scip_ccall("exprgraphGetNodePosition", int, (SCIP_EXPRGRAPHNODE *,), node)
exprgraphGetNodeOperator(node) = @scip_ccall("exprgraphGetNodeOperator", SCIP_EXPROP, (SCIP_EXPRGRAPHNODE *,), node)
exprgraphGetNodeOperatorIndex(node) = @scip_ccall("exprgraphGetNodeOperatorIndex", int, (SCIP_EXPRGRAPHNODE *,), node)
exprgraphGetNodeOperatorReal(node) = @scip_ccall("exprgraphGetNodeOperatorReal", SCIP_Real, (SCIP_EXPRGRAPHNODE *,), node)
exprgraphGetNodeVar(exprgraph, node) = @scip_ccall("exprgraphGetNodeVar", void *, (SCIP_EXPRGRAPH *, SCIP_EXPRGRAPHNODE *), exprgraph, node)
exprgraphGetNodeRealPowerExponent(node) = @scip_ccall("exprgraphGetNodeRealPowerExponent", SCIP_Real, (SCIP_EXPRGRAPHNODE *,), node)
exprgraphGetNodeIntPowerExponent(node) = @scip_ccall("exprgraphGetNodeIntPowerExponent", int, (SCIP_EXPRGRAPHNODE *,), node)
exprgraphGetNodeSignPowerExponent(node) = @scip_ccall("exprgraphGetNodeSignPowerExponent", SCIP_Real, (SCIP_EXPRGRAPHNODE *,), node)
exprgraphGetNodeLinearCoefs(node) = @scip_ccall("exprgraphGetNodeLinearCoefs", SCIP_Real *, (SCIP_EXPRGRAPHNODE *,), node)
exprgraphGetNodeLinearConstant(node) = @scip_ccall("exprgraphGetNodeLinearConstant", SCIP_Real, (SCIP_EXPRGRAPHNODE *,), node)
exprgraphGetNodeQuadraticConstant(node) = @scip_ccall("exprgraphGetNodeQuadraticConstant", SCIP_Real, (SCIP_EXPRGRAPHNODE *,), node)
exprgraphGetNodeQuadraticLinearCoefs(node) = @scip_ccall("exprgraphGetNodeQuadraticLinearCoefs", SCIP_Real *, (SCIP_EXPRGRAPHNODE *,), node)
exprgraphGetNodeQuadraticQuadElements(node) = @scip_ccall("exprgraphGetNodeQuadraticQuadElements", SCIP_QUADELEM *, (SCIP_EXPRGRAPHNODE *,), node)
exprgraphGetNodeQuadraticNQuadElements(node) = @scip_ccall("exprgraphGetNodeQuadraticNQuadElements", int, (SCIP_EXPRGRAPHNODE *,), node)
exprgraphGetNodePolynomialMonomials(node) = @scip_ccall("exprgraphGetNodePolynomialMonomials", SCIP_EXPRDATA_MONOMIAL **, (SCIP_EXPRGRAPHNODE *,), node)
exprgraphGetNodePolynomialNMonomials(node) = @scip_ccall("exprgraphGetNodePolynomialNMonomials", int, (SCIP_EXPRGRAPHNODE *,), node)
exprgraphGetNodePolynomialConstant(node) = @scip_ccall("exprgraphGetNodePolynomialConstant", SCIP_Real, (SCIP_EXPRGRAPHNODE *,), node)
exprgraphGetNodeBounds(node) = @scip_ccall("exprgraphGetNodeBounds", SCIP_INTERVAL, (SCIP_EXPRGRAPHNODE *,), node)
exprgraphGetNodeVal(node) = @scip_ccall("exprgraphGetNodeVal", SCIP_Real, (SCIP_EXPRGRAPHNODE *,), node)
exprgraphGetNodeCurvature(node) = @scip_ccall("exprgraphGetNodeCurvature", SCIP_EXPRCURV, (SCIP_EXPRGRAPHNODE *,), node)
exprgraphFreeNode(blkmem, node) = @scip_ccall("exprgraphFreeNode", void, (BMS_BLKMEM *, SCIP_EXPRGRAPHNODE **), blkmem, node)
exprgraphEnableNode(exprgraph, node) = @scip_ccall("exprgraphEnableNode", void, (SCIP_EXPRGRAPH *, SCIP_EXPRGRAPHNODE *), exprgraph, node)
exprgraphDisableNode(exprgraph, node) = @scip_ccall("exprgraphDisableNode", void, (SCIP_EXPRGRAPH *, SCIP_EXPRGRAPHNODE *), exprgraph, node)
exprgraphHasNodeSibling(node) = @scip_ccall("exprgraphHasNodeSibling", SCIP_Bool, (SCIP_EXPRGRAPHNODE *,), node)
exprgraphAreAllNodeChildrenVars(node) = @scip_ccall("exprgraphAreAllNodeChildrenVars", SCIP_Bool, (SCIP_EXPRGRAPHNODE *,), node)
exprgraphHasNodeNonlinearAncestor(node) = @scip_ccall("exprgraphHasNodeNonlinearAncestor", SCIP_Bool, (SCIP_EXPRGRAPHNODE *,), node)
exprgraphPrintNode(node, messagehdlr, file) = @scip_ccall("exprgraphPrintNode", void, (SCIP_EXPRGRAPHNODE *, SCIP_MESSAGEHDLR *, FILE *), node, messagehdlr, file)
exprgraphTightenNodeBounds(exprgraph, node, nodebounds, minstrength, cutoff) = @scip_ccall("exprgraphTightenNodeBounds", void, (SCIP_EXPRGRAPH *, SCIP_EXPRGRAPHNODE *, SCIP_INTERVAL, SCIP_Real, SCIP_Bool *), exprgraph, node, nodebounds, minstrength, cutoff)
exprgraphGetDepth(exprgraph) = @scip_ccall("exprgraphGetDepth", int, (SCIP_EXPRGRAPH *,), exprgraph)
exprgraphGetNNodes(exprgraph) = @scip_ccall("exprgraphGetNNodes", int *, (SCIP_EXPRGRAPH *,), exprgraph)
exprgraphGetNodes(exprgraph) = @scip_ccall("exprgraphGetNodes", SCIP_EXPRGRAPHNODE ***, (SCIP_EXPRGRAPH *,), exprgraph)
exprgraphGetNVars(exprgraph) = @scip_ccall("exprgraphGetNVars", int, (SCIP_EXPRGRAPH *,), exprgraph)
exprgraphGetVars(exprgraph) = @scip_ccall("exprgraphGetVars", void **, (SCIP_EXPRGRAPH *,), exprgraph)
exprgraphGetVarNodes(exprgraph) = @scip_ccall("exprgraphGetVarNodes", SCIP_EXPRGRAPHNODE **, (SCIP_EXPRGRAPH *,), exprgraph)
exprgraphSetVarNodeValue(varnode, value) = @scip_ccall("exprgraphSetVarNodeValue", void, (SCIP_EXPRGRAPHNODE *, SCIP_Real), varnode, value)
exprgraphSetVarsBounds(exprgraph, varbounds) = @scip_ccall("exprgraphSetVarsBounds", void, (SCIP_EXPRGRAPH *, SCIP_INTERVAL *), exprgraph, varbounds)
exprgraphSetVarBounds(exprgraph, var, varbounds) = @scip_ccall("exprgraphSetVarBounds", void, (SCIP_EXPRGRAPH *, void *, SCIP_INTERVAL), exprgraph, var, varbounds)
exprgraphSetVarNodeBounds(exprgraph, varnode, varbounds) = @scip_ccall("exprgraphSetVarNodeBounds", void, (SCIP_EXPRGRAPH *, SCIP_EXPRGRAPHNODE *, SCIP_INTERVAL), exprgraph, varnode, varbounds)
exprgraphSetVarNodeLb(exprgraph, varnode, lb) = @scip_ccall("exprgraphSetVarNodeLb", void, (SCIP_EXPRGRAPH *, SCIP_EXPRGRAPHNODE *, SCIP_Real), exprgraph, varnode, lb)
exprgraphSetVarNodeUb(exprgraph, varnode, ub) = @scip_ccall("exprgraphSetVarNodeUb", void, (SCIP_EXPRGRAPH *, SCIP_EXPRGRAPHNODE *, SCIP_Real), exprgraph, varnode, ub)
exprgraphGetVarsBounds(exprgraph) = @scip_ccall("exprgraphGetVarsBounds", SCIP_INTERVAL *, (SCIP_EXPRGRAPH *,), exprgraph)
exprgraphFindVarNode(exprgraph, var, varnode) = @scip_ccall("exprgraphFindVarNode", SCIP_Bool, (SCIP_EXPRGRAPH *, void *, SCIP_EXPRGRAPHNODE **), exprgraph, var, varnode)
exprgraphFindConstNode(exprgraph, constant, constnode) = @scip_ccall("exprgraphFindConstNode", SCIP_Bool, (SCIP_EXPRGRAPH *, SCIP_Real, SCIP_EXPRGRAPHNODE **), exprgraph, constant, constnode)
exprgraphPropagateNodeBounds(exprgraph, infinity, minstrength, cutoff) = @scip_ccall("exprgraphPropagateNodeBounds", void, (SCIP_EXPRGRAPH *, SCIP_Real, SCIP_Real, SCIP_Bool *), exprgraph, infinity, minstrength, cutoff)
exprgraphGetSubtreeVarsUsage(exprgraph, node, varsusage) = @scip_ccall("exprgraphGetSubtreeVarsUsage", void, (SCIP_EXPRGRAPH *, SCIP_EXPRGRAPHNODE *, int *), exprgraph, node, varsusage)
exprgraphGetSumTreesNSummands(node) = @scip_ccall("exprgraphGetSumTreesNSummands", int, (SCIP_EXPRGRAPHNODE *,), node)
exprtreeGetVars(tree) = @scip_ccall("exprtreeGetVars", SCIP_VAR **, (SCIP_EXPRTREE *,), tree)
exprtreeFindVar(tree, var) = @scip_ccall("exprtreeFindVar", int, (SCIP_EXPRTREE *, SCIP_VAR *), tree, var)
nlrowGetConstant(nlrow) = @scip_ccall("nlrowGetConstant", SCIP_Real, (SCIP_NLROW *,), nlrow)
nlrowGetNLinearVars(nlrow) = @scip_ccall("nlrowGetNLinearVars", int, (SCIP_NLROW *,), nlrow)
nlrowGetLinearVars(nlrow) = @scip_ccall("nlrowGetLinearVars", SCIP_VAR **, (SCIP_NLROW *,), nlrow)
nlrowGetLinearCoefs(nlrow) = @scip_ccall("nlrowGetLinearCoefs", SCIP_Real *, (SCIP_NLROW *,), nlrow)
nlrowGetNQuadVars(nlrow) = @scip_ccall("nlrowGetNQuadVars", int, (SCIP_NLROW *,), nlrow)
nlrowGetQuadVars(nlrow) = @scip_ccall("nlrowGetQuadVars", SCIP_VAR **, (SCIP_NLROW *,), nlrow)
nlrowSearchQuadVar(nlrow, var) = @scip_ccall("nlrowSearchQuadVar", int, (SCIP_NLROW *, SCIP_VAR *), nlrow, var)
nlrowGetNQuadElems(nlrow) = @scip_ccall("nlrowGetNQuadElems", int, (SCIP_NLROW *,), nlrow)
nlrowGetQuadElems(nlrow) = @scip_ccall("nlrowGetQuadElems", SCIP_QUADELEM *, (SCIP_NLROW *,), nlrow)
nlrowGetQuadData(nlrow, nquadvars, quadvars, nquadelems, quadelems) = @scip_ccall("nlrowGetQuadData", void, (SCIP_NLROW *, int *, SCIP_VAR ***, int *, SCIP_QUADELEM **), nlrow, nquadvars, quadvars, nquadelems, quadelems)
nlrowGetExprtree(nlrow) = @scip_ccall("nlrowGetExprtree", SCIP_EXPRTREE *, (SCIP_NLROW *,), nlrow)
nlrowGetLhs(nlrow) = @scip_ccall("nlrowGetLhs", SCIP_Real, (SCIP_NLROW *,), nlrow)
nlrowGetRhs(nlrow) = @scip_ccall("nlrowGetRhs", SCIP_Real, (SCIP_NLROW *,), nlrow)
nlrowGetName(nlrow) = @scip_ccall("nlrowGetName", const char *, (SCIP_NLROW *,), nlrow)
nlrowGetNLPPos(nlrow) = @scip_ccall("nlrowGetNLPPos", int, (SCIP_NLROW *,), nlrow)
nlrowIsInNLP(nlrow) = @scip_ccall("nlrowIsInNLP", SCIP_Bool, (SCIP_NLROW *,), nlrow)
nlrowGetDualsol(nlrow) = @scip_ccall("nlrowGetDualsol", SCIP_Real, (SCIP_NLROW *,), nlrow)
version() = @scip_ccall("version", SCIP_Real, ([]))
majorVersion() = @scip_ccall("majorVersion", int, ([]))
minorVersion() = @scip_ccall("minorVersion", int, ([]))
techVersion() = @scip_ccall("techVersion", int, ([]))
subversion() = @scip_ccall("subversion", int, ([]))
printVersion(scip, file) = @scip_ccall("printVersion", void, (SCIP *, FILE *), scip, file)
printError(retcode) = @scip_ccall("printError", void, (SCIP_RETCODE,), retcode)
storeSolutionGap(scip) = @scip_ccall("storeSolutionGap", void, (SCIP *,), scip)
getStage(scip) = @scip_ccall("getStage", SCIP_STAGE, (SCIP *,), scip)
getStatus(scip) = @scip_ccall("getStatus", SCIP_STATUS, (SCIP *,), scip)
isTransformed(scip) = @scip_ccall("isTransformed", SCIP_Bool, (SCIP *,), scip)
isExactSolve(scip) = @scip_ccall("isExactSolve", SCIP_Bool, (SCIP *,), scip)
isPresolveFinished(scip) = @scip_ccall("isPresolveFinished", SCIP_Bool, (SCIP *,), scip)
pressedCtrlC(scip) = @scip_ccall("pressedCtrlC", SCIP_Bool, (SCIP *,), scip)
isStopped(scip) = @scip_ccall("isStopped", SCIP_Bool, (SCIP *,), scip)
getMessagehdlr(scip) = @scip_ccall("getMessagehdlr", SCIP_MESSAGEHDLR *, (SCIP *,), scip)
setMessagehdlrLogfile(scip, filename) = @scip_ccall("setMessagehdlrLogfile", void, (SCIP *, const char *), scip, filename)
setMessagehdlrQuiet(scip, quiet) = @scip_ccall("setMessagehdlrQuiet", void, (SCIP *, SCIP_Bool), scip, quiet)
warningMessage(scip, formatstr) = @scip_ccall("warningMessage", void, (SCIP *, const char *, ...), scip, formatstr)
dialogMessage(scip, file, formatstr) = @scip_ccall("dialogMessage", void, (SCIP *, FILE *, const char *, ...), scip, file, formatstr)
infoMessage(scip, file, formatstr) = @scip_ccall("infoMessage", void, (SCIP *, FILE *, const char *, ...), scip, file, formatstr)
verbMessage(scip, msgverblevel, file, formatstr) = @scip_ccall("verbMessage", void, (SCIP *, SCIP_VERBLEVEL, FILE *, const char *, ...), scip, msgverblevel, file, formatstr)
getVerbLevel(scip) = @scip_ccall("getVerbLevel", SCIP_VERBLEVEL, (SCIP *,), scip)
getSubscipDepth(scip) = @scip_ccall("getSubscipDepth", int, (SCIP *,), scip)
isParamFixed(scip, name) = @scip_ccall("isParamFixed", SCIP_Bool, (SCIP *, const char *), scip, name)
getParam(scip, name) = @scip_ccall("getParam", SCIP_PARAM *, (SCIP *, const char *), scip, name)
getParams(scip) = @scip_ccall("getParams", SCIP_PARAM **, (SCIP *,), scip)
getNParams(scip) = @scip_ccall("getNParams", int, (SCIP *,), scip)
findReader(scip, name) = @scip_ccall("findReader", SCIP_READER *, (SCIP *, const char *), scip, name)
getReaders(scip) = @scip_ccall("getReaders", SCIP_READER **, (SCIP *,), scip)
getNReaders(scip) = @scip_ccall("getNReaders", int, (SCIP *,), scip)
findPricer(scip, name) = @scip_ccall("findPricer", SCIP_PRICER *, (SCIP *, const char *), scip, name)
getPricers(scip) = @scip_ccall("getPricers", SCIP_PRICER **, (SCIP *,), scip)
getNPricers(scip) = @scip_ccall("getNPricers", int, (SCIP *,), scip)
getNActivePricers(scip) = @scip_ccall("getNActivePricers", int, (SCIP *,), scip)
findConshdlr(scip, name) = @scip_ccall("findConshdlr", SCIP_CONSHDLR *, (SCIP *, const char *), scip, name)
getConshdlrs(scip) = @scip_ccall("getConshdlrs", SCIP_CONSHDLR **, (SCIP *,), scip)
getNConshdlrs(scip) = @scip_ccall("getNConshdlrs", int, (SCIP *,), scip)
findConflicthdlr(scip, name) = @scip_ccall("findConflicthdlr", SCIP_CONFLICTHDLR *, (SCIP *, const char *), scip, name)
getConflicthdlrs(scip) = @scip_ccall("getConflicthdlrs", SCIP_CONFLICTHDLR **, (SCIP *,), scip)
getNConflicthdlrs(scip) = @scip_ccall("getNConflicthdlrs", int, (SCIP *,), scip)
findPresol(scip, name) = @scip_ccall("findPresol", SCIP_PRESOL *, (SCIP *, const char *), scip, name)
getPresols(scip) = @scip_ccall("getPresols", SCIP_PRESOL **, (SCIP *,), scip)
getNPresols(scip) = @scip_ccall("getNPresols", int, (SCIP *,), scip)
findRelax(scip, name) = @scip_ccall("findRelax", SCIP_RELAX *, (SCIP *, const char *), scip, name)
getRelaxs(scip) = @scip_ccall("getRelaxs", SCIP_RELAX **, (SCIP *,), scip)
getNRelaxs(scip) = @scip_ccall("getNRelaxs", int, (SCIP *,), scip)
findSepa(scip, name) = @scip_ccall("findSepa", SCIP_SEPA *, (SCIP *, const char *), scip, name)
getSepas(scip) = @scip_ccall("getSepas", SCIP_SEPA **, (SCIP *,), scip)
getNSepas(scip) = @scip_ccall("getNSepas", int, (SCIP *,), scip)
findProp(scip, name) = @scip_ccall("findProp", SCIP_PROP *, (SCIP *, const char *), scip, name)
getProps(scip) = @scip_ccall("getProps", SCIP_PROP **, (SCIP *,), scip)
getNProps(scip) = @scip_ccall("getNProps", int, (SCIP *,), scip)
findHeur(scip, name) = @scip_ccall("findHeur", SCIP_HEUR *, (SCIP *, const char *), scip, name)
getHeurs(scip) = @scip_ccall("getHeurs", SCIP_HEUR **, (SCIP *,), scip)
getNHeurs(scip) = @scip_ccall("getNHeurs", int, (SCIP *,), scip)
findEventhdlr(scip, name) = @scip_ccall("findEventhdlr", SCIP_EVENTHDLR *, (SCIP *, const char *), scip, name)
getEventhdlrs(scip) = @scip_ccall("getEventhdlrs", SCIP_EVENTHDLR **, (SCIP *,), scip)
getNEventhdlrs(scip) = @scip_ccall("getNEventhdlrs", int, (SCIP *,), scip)
findNodesel(scip, name) = @scip_ccall("findNodesel", SCIP_NODESEL *, (SCIP *, const char *), scip, name)
getNodesels(scip) = @scip_ccall("getNodesels", SCIP_NODESEL **, (SCIP *,), scip)
getNNodesels(scip) = @scip_ccall("getNNodesels", int, (SCIP *,), scip)
getNodesel(scip) = @scip_ccall("getNodesel", SCIP_NODESEL *, (SCIP *,), scip)
findBranchrule(scip, name) = @scip_ccall("findBranchrule", SCIP_BRANCHRULE *, (SCIP *, const char *), scip, name)
getBranchrules(scip) = @scip_ccall("getBranchrules", SCIP_BRANCHRULE **, (SCIP *,), scip)
getNBranchrules(scip) = @scip_ccall("getNBranchrules", int, (SCIP *,), scip)
findDisp(scip, name) = @scip_ccall("findDisp", SCIP_DISP *, (SCIP *, const char *), scip, name)
getDisps(scip) = @scip_ccall("getDisps", SCIP_DISP **, (SCIP *,), scip)
getNDisps(scip) = @scip_ccall("getNDisps", int, (SCIP *,), scip)
findNlpi(scip, name) = @scip_ccall("findNlpi", SCIP_NLPI *, (SCIP *, const char *), scip, name)
getNlpis(scip) = @scip_ccall("getNlpis", SCIP_NLPI **, (SCIP *,), scip)
getNNlpis(scip) = @scip_ccall("getNNlpis", int, (SCIP *,), scip)
getExternalCodeNames(scip) = @scip_ccall("getExternalCodeNames", char **, (SCIP *,), scip)
getExternalCodeDescriptions(scip) = @scip_ccall("getExternalCodeDescriptions", char **, (SCIP *,), scip)
getNExternalCodes(scip) = @scip_ccall("getNExternalCodes", int, (SCIP *,), scip)
printExternalCodes(scip, file) = @scip_ccall("printExternalCodes", void, (SCIP *, FILE *), scip, file)
existsDialog(scip, dialog) = @scip_ccall("existsDialog", SCIP_Bool, (SCIP *, SCIP_DIALOG *), scip, dialog)
getRootDialog(scip) = @scip_ccall("getRootDialog", SCIP_DIALOG *, (SCIP *,), scip)
getProbData(scip) = @scip_ccall("getProbData", SCIP_PROBDATA *, (SCIP *,), scip)
getProbName(scip) = @scip_ccall("getProbName", const char *, (SCIP *,), scip)
getObjsense(scip) = @scip_ccall("getObjsense", SCIP_OBJSENSE, (SCIP *,), scip)
getOrigObjoffset(scip) = @scip_ccall("getOrigObjoffset", SCIP_Real, (SCIP *,), scip)
getOrigObjscale(scip) = @scip_ccall("getOrigObjscale", SCIP_Real, (SCIP *,), scip)
getTransObjoffset(scip) = @scip_ccall("getTransObjoffset", SCIP_Real, (SCIP *,), scip)
getTransObjscale(scip) = @scip_ccall("getTransObjscale", SCIP_Real, (SCIP *,), scip)
getObjlimit(scip) = @scip_ccall("getObjlimit", SCIP_Real, (SCIP *,), scip)
isObjIntegral(scip) = @scip_ccall("isObjIntegral", SCIP_Bool, (SCIP *,), scip)
getObjNorm(scip) = @scip_ccall("getObjNorm", SCIP_Real, (SCIP *,), scip)
getVars(scip) = @scip_ccall("getVars", SCIP_VAR **, (SCIP *,), scip)
getNVars(scip) = @scip_ccall("getNVars", int, (SCIP *,), scip)
getNBinVars(scip) = @scip_ccall("getNBinVars", int, (SCIP *,), scip)
getNIntVars(scip) = @scip_ccall("getNIntVars", int, (SCIP *,), scip)
getNImplVars(scip) = @scip_ccall("getNImplVars", int, (SCIP *,), scip)
getNContVars(scip) = @scip_ccall("getNContVars", int, (SCIP *,), scip)
getNObjVars(scip) = @scip_ccall("getNObjVars", int, (SCIP *,), scip)
getFixedVars(scip) = @scip_ccall("getFixedVars", SCIP_VAR **, (SCIP *,), scip)
getNFixedVars(scip) = @scip_ccall("getNFixedVars", int, (SCIP *,), scip)
getOrigVars(scip) = @scip_ccall("getOrigVars", SCIP_VAR **, (SCIP *,), scip)
getNOrigVars(scip) = @scip_ccall("getNOrigVars", int, (SCIP *,), scip)
getNOrigBinVars(scip) = @scip_ccall("getNOrigBinVars", int, (SCIP *,), scip)
getNOrigIntVars(scip) = @scip_ccall("getNOrigIntVars", int, (SCIP *,), scip)
getNOrigImplVars(scip) = @scip_ccall("getNOrigImplVars", int, (SCIP *,), scip)
getNOrigContVars(scip) = @scip_ccall("getNOrigContVars", int, (SCIP *,), scip)
getNTotalVars(scip) = @scip_ccall("getNTotalVars", int, (SCIP *,), scip)
findVar(scip, name) = @scip_ccall("findVar", SCIP_VAR *, (SCIP *, const char *), scip, name)
allVarsInProb(scip) = @scip_ccall("allVarsInProb", SCIP_Bool, (SCIP *,), scip)
findOrigCons(scip, name) = @scip_ccall("findOrigCons", SCIP_CONS *, (SCIP *, const char *), scip, name)
findCons(scip, name) = @scip_ccall("findCons", SCIP_CONS *, (SCIP *, const char *), scip, name)
getNUpgrConss(scip) = @scip_ccall("getNUpgrConss", int, (SCIP *,), scip)
getNConss(scip) = @scip_ccall("getNConss", int, (SCIP *,), scip)
getConss(scip) = @scip_ccall("getConss", SCIP_CONS **, (SCIP *,), scip)
getNOrigConss(scip) = @scip_ccall("getNOrigConss", int, (SCIP *,), scip)
getOrigConss(scip) = @scip_ccall("getOrigConss", SCIP_CONS **, (SCIP *,), scip)
getNCheckConss(scip) = @scip_ccall("getNCheckConss", int, (SCIP *,), scip)
getLocalOrigEstimate(scip) = @scip_ccall("getLocalOrigEstimate", SCIP_Real, (SCIP *,), scip)
getLocalTransEstimate(scip) = @scip_ccall("getLocalTransEstimate", SCIP_Real, (SCIP *,), scip)
getLocalDualbound(scip) = @scip_ccall("getLocalDualbound", SCIP_Real, (SCIP *,), scip)
getLocalLowerbound(scip) = @scip_ccall("getLocalLowerbound", SCIP_Real, (SCIP *,), scip)
getNodeDualbound(scip, node) = @scip_ccall("getNodeDualbound", SCIP_Real, (SCIP *, SCIP_NODE *), scip, node)
getNodeLowerbound(scip, node) = @scip_ccall("getNodeLowerbound", SCIP_Real, (SCIP *, SCIP_NODE *), scip, node)
isInRestart(scip) = @scip_ccall("isInRestart", SCIP_Bool, (SCIP *,), scip)
freeParseVarsPolynomialData(scip, monomialvars, monomialexps, monomialcoefs, monomialnvars, nmonomials) = @scip_ccall("freeParseVarsPolynomialData", void, (SCIP *, SCIP_VAR ****, SCIP_Real ***, SCIP_Real **, int **, int), scip, monomialvars, monomialexps, monomialcoefs, monomialnvars, nmonomials)
getVarRedcost(scip, var) = @scip_ccall("getVarRedcost", SCIP_Real, (SCIP *, SCIP_VAR *), scip, var)
getVarImplRedcost(scip, var, varfixing) = @scip_ccall("getVarImplRedcost", SCIP_Real, (SCIP *, SCIP_VAR *, SCIP_Bool), scip, var, varfixing)
getVarFarkasCoef(scip, var) = @scip_ccall("getVarFarkasCoef", SCIP_Real, (SCIP *, SCIP_VAR *), scip, var)
getVarSol(scip, var) = @scip_ccall("getVarSol", SCIP_Real, (SCIP *, SCIP_VAR *), scip, var)
isRelaxSolValid(scip) = @scip_ccall("isRelaxSolValid", SCIP_Bool, (SCIP *,), scip)
getRelaxSolVal(scip, var) = @scip_ccall("getRelaxSolVal", SCIP_Real, (SCIP *, SCIP_VAR *), scip, var)
getRelaxSolObj(scip) = @scip_ccall("getRelaxSolObj", SCIP_Real, (SCIP *,), scip)
getVarStrongbranchNode(scip, var) = @scip_ccall("getVarStrongbranchNode", SCIP_Longint, (SCIP *, SCIP_VAR *), scip, var)
getVarStrongbranchLPAge(scip, var) = @scip_ccall("getVarStrongbranchLPAge", SCIP_Longint, (SCIP *, SCIP_VAR *), scip, var)
getVarNStrongbranchs(scip, var) = @scip_ccall("getVarNStrongbranchs", int, (SCIP *, SCIP_VAR *), scip, var)
adjustedVarLb(scip, var, lb) = @scip_ccall("adjustedVarLb", SCIP_Real, (SCIP *, SCIP_VAR *, SCIP_Real), scip, var, lb)
adjustedVarUb(scip, var, ub) = @scip_ccall("adjustedVarUb", SCIP_Real, (SCIP *, SCIP_VAR *, SCIP_Real), scip, var, ub)
computeVarLbGlobal(scip, var) = @scip_ccall("computeVarLbGlobal", SCIP_Real, (SCIP *, SCIP_VAR *), scip, var)
computeVarUbGlobal(scip, var) = @scip_ccall("computeVarUbGlobal", SCIP_Real, (SCIP *, SCIP_VAR *), scip, var)
computeVarLbLocal(scip, var) = @scip_ccall("computeVarLbLocal", SCIP_Real, (SCIP *, SCIP_VAR *), scip, var)
computeVarUbLocal(scip, var) = @scip_ccall("computeVarUbLocal", SCIP_Real, (SCIP *, SCIP_VAR *), scip, var)
getNCliques(scip) = @scip_ccall("getNCliques", int, (SCIP *,), scip)
getCliques(scip) = @scip_ccall("getCliques", SCIP_CLIQUE **, (SCIP *,), scip)
haveVarsCommonClique(scip, var1, value1, var2, value2, regardimplics) = @scip_ccall("haveVarsCommonClique", SCIP_Bool, (SCIP *, SCIP_VAR *, SCIP_Bool, SCIP_VAR *, SCIP_Bool, SCIP_Bool), scip, var1, value1, var2, value2, regardimplics)
doNotAggr(scip) = @scip_ccall("doNotAggr", SCIP_Bool, (SCIP *,), scip)
doNotMultaggr(scip) = @scip_ccall("doNotMultaggr", SCIP_Bool, (SCIP *,), scip)
doNotMultaggrVar(scip, var) = @scip_ccall("doNotMultaggrVar", SCIP_Bool, (SCIP *, SCIP_VAR *), scip, var)
enableVarHistory(scip) = @scip_ccall("enableVarHistory", void, (SCIP *,), scip)
disableVarHistory(scip) = @scip_ccall("disableVarHistory", void, (SCIP *,), scip)
getVarPseudocostVal(scip, var, solvaldelta) = @scip_ccall("getVarPseudocostVal", SCIP_Real, (SCIP *, SCIP_VAR *, SCIP_Real), scip, var, solvaldelta)
getVarPseudocostValCurrentRun(scip, var, solvaldelta) = @scip_ccall("getVarPseudocostValCurrentRun", SCIP_Real, (SCIP *, SCIP_VAR *, SCIP_Real), scip, var, solvaldelta)
getVarPseudocost(scip, var, dir) = @scip_ccall("getVarPseudocost", SCIP_Real, (SCIP *, SCIP_VAR *, SCIP_BRANCHDIR), scip, var, dir)
getVarPseudocostCurrentRun(scip, var, dir) = @scip_ccall("getVarPseudocostCurrentRun", SCIP_Real, (SCIP *, SCIP_VAR *, SCIP_BRANCHDIR), scip, var, dir)
getVarPseudocostCount(scip, var, dir) = @scip_ccall("getVarPseudocostCount", SCIP_Real, (SCIP *, SCIP_VAR *, SCIP_BRANCHDIR), scip, var, dir)
getVarPseudocostCountCurrentRun(scip, var, dir) = @scip_ccall("getVarPseudocostCountCurrentRun", SCIP_Real, (SCIP *, SCIP_VAR *, SCIP_BRANCHDIR), scip, var, dir)
getVarPseudocostScore(scip, var, solval) = @scip_ccall("getVarPseudocostScore", SCIP_Real, (SCIP *, SCIP_VAR *, SCIP_Real), scip, var, solval)
getVarPseudocostScoreCurrentRun(scip, var, solval) = @scip_ccall("getVarPseudocostScoreCurrentRun", SCIP_Real, (SCIP *, SCIP_VAR *, SCIP_Real), scip, var, solval)
getVarVSIDS(scip, var, dir) = @scip_ccall("getVarVSIDS", SCIP_Real, (SCIP *, SCIP_VAR *, SCIP_BRANCHDIR), scip, var, dir)
getVarVSIDSCurrentRun(scip, var, dir) = @scip_ccall("getVarVSIDSCurrentRun", SCIP_Real, (SCIP *, SCIP_VAR *, SCIP_BRANCHDIR), scip, var, dir)
getVarConflictScore(scip, var) = @scip_ccall("getVarConflictScore", SCIP_Real, (SCIP *, SCIP_VAR *), scip, var)
getVarConflictScoreCurrentRun(scip, var) = @scip_ccall("getVarConflictScoreCurrentRun", SCIP_Real, (SCIP *, SCIP_VAR *), scip, var)
getVarConflictlengthScore(scip, var) = @scip_ccall("getVarConflictlengthScore", SCIP_Real, (SCIP *, SCIP_VAR *), scip, var)
getVarConflictlengthScoreCurrentRun(scip, var) = @scip_ccall("getVarConflictlengthScoreCurrentRun", SCIP_Real, (SCIP *, SCIP_VAR *), scip, var)
getVarAvgConflictlength(scip, var, dir) = @scip_ccall("getVarAvgConflictlength", SCIP_Real, (SCIP *, SCIP_VAR *, SCIP_BRANCHDIR), scip, var, dir)
getVarAvgConflictlengthCurrentRun(scip, var, dir) = @scip_ccall("getVarAvgConflictlengthCurrentRun", SCIP_Real, (SCIP *, SCIP_VAR *, SCIP_BRANCHDIR), scip, var, dir)
getVarAvgInferences(scip, var, dir) = @scip_ccall("getVarAvgInferences", SCIP_Real, (SCIP *, SCIP_VAR *, SCIP_BRANCHDIR), scip, var, dir)
getVarAvgInferencesCurrentRun(scip, var, dir) = @scip_ccall("getVarAvgInferencesCurrentRun", SCIP_Real, (SCIP *, SCIP_VAR *, SCIP_BRANCHDIR), scip, var, dir)
getVarAvgInferenceScore(scip, var) = @scip_ccall("getVarAvgInferenceScore", SCIP_Real, (SCIP *, SCIP_VAR *), scip, var)
getVarAvgInferenceScoreCurrentRun(scip, var) = @scip_ccall("getVarAvgInferenceScoreCurrentRun", SCIP_Real, (SCIP *, SCIP_VAR *), scip, var)
getVarAvgCutoffs(scip, var, dir) = @scip_ccall("getVarAvgCutoffs", SCIP_Real, (SCIP *, SCIP_VAR *, SCIP_BRANCHDIR), scip, var, dir)
getVarAvgCutoffsCurrentRun(scip, var, dir) = @scip_ccall("getVarAvgCutoffsCurrentRun", SCIP_Real, (SCIP *, SCIP_VAR *, SCIP_BRANCHDIR), scip, var, dir)
getVarAvgCutoffScore(scip, var) = @scip_ccall("getVarAvgCutoffScore", SCIP_Real, (SCIP *, SCIP_VAR *), scip, var)
getVarAvgCutoffScoreCurrentRun(scip, var) = @scip_ccall("getVarAvgCutoffScoreCurrentRun", SCIP_Real, (SCIP *, SCIP_VAR *), scip, var)
getVarAvgInferenceCutoffScore(scip, var, cutoffweight) = @scip_ccall("getVarAvgInferenceCutoffScore", SCIP_Real, (SCIP *, SCIP_VAR *, SCIP_Real), scip, var, cutoffweight)
getVarAvgInferenceCutoffScoreCurrentRun(scip, var, cutoffweight) = @scip_ccall("getVarAvgInferenceCutoffScoreCurrentRun", SCIP_Real, (SCIP *, SCIP_VAR *, SCIP_Real), scip, var, cutoffweight)
isConflictAnalysisApplicable(scip) = @scip_ccall("isConflictAnalysisApplicable", SCIP_Bool, (SCIP *,), scip)
getConflictVarLb(scip, var) = @scip_ccall("getConflictVarLb", SCIP_Real, (SCIP *, SCIP_VAR *), scip, var)
getConflictVarUb(scip, var) = @scip_ccall("getConflictVarUb", SCIP_Real, (SCIP *, SCIP_VAR *), scip, var)
hasCurrentNodeLP(scip) = @scip_ccall("hasCurrentNodeLP", SCIP_Bool, (SCIP *,), scip)
isLPConstructed(scip) = @scip_ccall("isLPConstructed", SCIP_Bool, (SCIP *,), scip)
getLPSolstat(scip) = @scip_ccall("getLPSolstat", SCIP_LPSOLSTAT, (SCIP *,), scip)
isLPRelax(scip) = @scip_ccall("isLPRelax", SCIP_Bool, (SCIP *,), scip)
getLPObjval(scip) = @scip_ccall("getLPObjval", SCIP_Real, (SCIP *,), scip)
getLPColumnObjval(scip) = @scip_ccall("getLPColumnObjval", SCIP_Real, (SCIP *,), scip)
getLPLooseObjval(scip) = @scip_ccall("getLPLooseObjval", SCIP_Real, (SCIP *,), scip)
getGlobalPseudoObjval(scip) = @scip_ccall("getGlobalPseudoObjval", SCIP_Real, (SCIP *,), scip)
getPseudoObjval(scip) = @scip_ccall("getPseudoObjval", SCIP_Real, (SCIP *,), scip)
isRootLPRelax(scip) = @scip_ccall("isRootLPRelax", SCIP_Bool, (SCIP *,), scip)
getLPRootObjval(scip) = @scip_ccall("getLPRootObjval", SCIP_Real, (SCIP *,), scip)
getLPRootColumnObjval(scip) = @scip_ccall("getLPRootColumnObjval", SCIP_Real, (SCIP *,), scip)
getLPRootLooseObjval(scip) = @scip_ccall("getLPRootLooseObjval", SCIP_Real, (SCIP *,), scip)
getLPCols(scip) = @scip_ccall("getLPCols", SCIP_COL **, (SCIP *,), scip)
getNLPCols(scip) = @scip_ccall("getNLPCols", int, (SCIP *,), scip)
getLPRows(scip) = @scip_ccall("getLPRows", SCIP_ROW **, (SCIP *,), scip)
getNLPRows(scip) = @scip_ccall("getNLPRows", int, (SCIP *,), scip)
allColsInLP(scip) = @scip_ccall("allColsInLP", SCIP_Bool, (SCIP *,), scip)
isLPSolBasic(scip) = @scip_ccall("isLPSolBasic", SCIP_Bool, (SCIP *,), scip)
getColRedcost(scip, col) = @scip_ccall("getColRedcost", SCIP_Real, (SCIP *, SCIP_COL *), scip, col)
getColFarkasCoef(scip, col) = @scip_ccall("getColFarkasCoef", SCIP_Real, (SCIP *, SCIP_COL *), scip, col)
markColNotRemovableLocal(scip, col) = @scip_ccall("markColNotRemovableLocal", void, (SCIP *, SCIP_COL *), scip, col)
markRowNotRemovableLocal(scip, row) = @scip_ccall("markRowNotRemovableLocal", void, (SCIP *, SCIP_ROW *), scip, row)
getRowMinCoef(scip, row) = @scip_ccall("getRowMinCoef", SCIP_Real, (SCIP *, SCIP_ROW *), scip, row)
getRowMaxCoef(scip, row) = @scip_ccall("getRowMaxCoef", SCIP_Real, (SCIP *, SCIP_ROW *), scip, row)
getRowMinActivity(scip, row) = @scip_ccall("getRowMinActivity", SCIP_Real, (SCIP *, SCIP_ROW *), scip, row)
getRowMaxActivity(scip, row) = @scip_ccall("getRowMaxActivity", SCIP_Real, (SCIP *, SCIP_ROW *), scip, row)
getRowLPActivity(scip, row) = @scip_ccall("getRowLPActivity", SCIP_Real, (SCIP *, SCIP_ROW *), scip, row)
getRowLPFeasibility(scip, row) = @scip_ccall("getRowLPFeasibility", SCIP_Real, (SCIP *, SCIP_ROW *), scip, row)
getRowPseudoActivity(scip, row) = @scip_ccall("getRowPseudoActivity", SCIP_Real, (SCIP *, SCIP_ROW *), scip, row)
getRowPseudoFeasibility(scip, row) = @scip_ccall("getRowPseudoFeasibility", SCIP_Real, (SCIP *, SCIP_ROW *), scip, row)
getRowActivity(scip, row) = @scip_ccall("getRowActivity", SCIP_Real, (SCIP *, SCIP_ROW *), scip, row)
getRowFeasibility(scip, row) = @scip_ccall("getRowFeasibility", SCIP_Real, (SCIP *, SCIP_ROW *), scip, row)
getRowSolActivity(scip, row, sol) = @scip_ccall("getRowSolActivity", SCIP_Real, (SCIP *, SCIP_ROW *, SCIP_SOL *), scip, row, sol)
getRowSolFeasibility(scip, row, sol) = @scip_ccall("getRowSolFeasibility", SCIP_Real, (SCIP *, SCIP_ROW *, SCIP_SOL *), scip, row, sol)
isNLPEnabled(scip) = @scip_ccall("isNLPEnabled", SCIP_Bool, (SCIP *,), scip)
enableNLP(scip) = @scip_ccall("enableNLP", void, (SCIP *,), scip)
isNLPConstructed(scip) = @scip_ccall("isNLPConstructed", SCIP_Bool, (SCIP *,), scip)
hasNLPContinuousNonlinearity(scip) = @scip_ccall("hasNLPContinuousNonlinearity", SCIP_Bool, (SCIP *,), scip)
getNLPVars(scip) = @scip_ccall("getNLPVars", SCIP_VAR **, (SCIP *,), scip)
getNNLPVars(scip) = @scip_ccall("getNNLPVars", int, (SCIP *,), scip)
getNLPVarsLbDualsol(scip) = @scip_ccall("getNLPVarsLbDualsol", SCIP_Real *, (SCIP *,), scip)
getNLPVarsUbDualsol(scip) = @scip_ccall("getNLPVarsUbDualsol", SCIP_Real *, (SCIP *,), scip)
getNLPNlRows(scip) = @scip_ccall("getNLPNlRows", SCIP_NLROW **, (SCIP *,), scip)
getNNLPNlRows(scip) = @scip_ccall("getNNLPNlRows", int, (SCIP *,), scip)
getNLPSolstat(scip) = @scip_ccall("getNLPSolstat", SCIP_NLPSOLSTAT, (SCIP *,), scip)
getNLPTermstat(scip) = @scip_ccall("getNLPTermstat", SCIP_NLPTERMSTAT, (SCIP *,), scip)
getNLPObjval(scip) = @scip_ccall("getNLPObjval", SCIP_Real, (SCIP *,), scip)
hasNLPSolution(scip) = @scip_ccall("hasNLPSolution", SCIP_Bool, (SCIP *,), scip)
getCutEfficacy(scip, sol, cut) = @scip_ccall("getCutEfficacy", SCIP_Real, (SCIP *, SCIP_SOL *, SCIP_ROW *), scip, sol, cut)
isCutEfficacious(scip, sol, cut) = @scip_ccall("isCutEfficacious", SCIP_Bool, (SCIP *, SCIP_SOL *, SCIP_ROW *), scip, sol, cut)
isEfficacious(scip, efficacy) = @scip_ccall("isEfficacious", SCIP_Bool, (SCIP *, SCIP_Real), scip, efficacy)
getVectorEfficacyNorm(scip, vals, nvals) = @scip_ccall("getVectorEfficacyNorm", SCIP_Real, (SCIP *, SCIP_Real *, int), scip, vals, nvals)
isCutApplicable(scip, cut) = @scip_ccall("isCutApplicable", SCIP_Bool, (SCIP *, SCIP_ROW *), scip, cut)
getPoolCuts(scip) = @scip_ccall("getPoolCuts", SCIP_CUT **, (SCIP *,), scip)
getNPoolCuts(scip) = @scip_ccall("getNPoolCuts", int, (SCIP *,), scip)
getGlobalCutpool(scip) = @scip_ccall("getGlobalCutpool", SCIP_CUTPOOL *, (SCIP *,), scip)
getDelayedPoolCuts(scip) = @scip_ccall("getDelayedPoolCuts", SCIP_CUT **, (SCIP *,), scip)
getNDelayedPoolCuts(scip) = @scip_ccall("getNDelayedPoolCuts", int, (SCIP *,), scip)
getDelayedGlobalCutpool(scip) = @scip_ccall("getDelayedGlobalCutpool", SCIP_CUTPOOL *, (SCIP *,), scip)
getCuts(scip) = @scip_ccall("getCuts", SCIP_ROW **, (SCIP *,), scip)
getNCuts(scip) = @scip_ccall("getNCuts", int, (SCIP *,), scip)
getRelaxFeastolFactor(scip) = @scip_ccall("getRelaxFeastolFactor", SCIP_Real, (SCIP *,), scip)
getVarObjDive(scip, var) = @scip_ccall("getVarObjDive", SCIP_Real, (SCIP *, SCIP_VAR *), scip, var)
getVarLbDive(scip, var) = @scip_ccall("getVarLbDive", SCIP_Real, (SCIP *, SCIP_VAR *), scip, var)
getVarUbDive(scip, var) = @scip_ccall("getVarUbDive", SCIP_Real, (SCIP *, SCIP_VAR *), scip, var)
getLastDivenode(scip) = @scip_ccall("getLastDivenode", SCIP_Longint, (SCIP *,), scip)
inDive(scip) = @scip_ccall("inDive", SCIP_Bool, (SCIP *,), scip)
inProbing(scip) = @scip_ccall("inProbing", SCIP_Bool, (SCIP *,), scip)
getProbingDepth(scip) = @scip_ccall("getProbingDepth", int, (SCIP *,), scip)
getNLPBranchCands(scip) = @scip_ccall("getNLPBranchCands", int, (SCIP *,), scip)
getNPrioLPBranchCands(scip) = @scip_ccall("getNPrioLPBranchCands", int, (SCIP *,), scip)
getNExternBranchCands(scip) = @scip_ccall("getNExternBranchCands", int, (SCIP *,), scip)
getNPrioExternBranchCands(scip) = @scip_ccall("getNPrioExternBranchCands", int, (SCIP *,), scip)
getNPrioExternBranchBins(scip) = @scip_ccall("getNPrioExternBranchBins", int, (SCIP *,), scip)
getNPrioExternBranchInts(scip) = @scip_ccall("getNPrioExternBranchInts", int, (SCIP *,), scip)
getNPrioExternBranchImpls(scip) = @scip_ccall("getNPrioExternBranchImpls", int, (SCIP *,), scip)
getNPrioExternBranchConts(scip) = @scip_ccall("getNPrioExternBranchConts", int, (SCIP *,), scip)
clearExternBranchCands(scip) = @scip_ccall("clearExternBranchCands", void, (SCIP *,), scip)
containsExternBranchCand(scip, var) = @scip_ccall("containsExternBranchCand", SCIP_Bool, (SCIP *, SCIP_VAR *), scip, var)
getNPseudoBranchCands(scip) = @scip_ccall("getNPseudoBranchCands", int, (SCIP *,), scip)
getNPrioPseudoBranchCands(scip) = @scip_ccall("getNPrioPseudoBranchCands", int, (SCIP *,), scip)
getNPrioPseudoBranchBins(scip) = @scip_ccall("getNPrioPseudoBranchBins", int, (SCIP *,), scip)
getNPrioPseudoBranchInts(scip) = @scip_ccall("getNPrioPseudoBranchInts", int, (SCIP *,), scip)
getNPrioPseudoBranchImpls(scip) = @scip_ccall("getNPrioPseudoBranchImpls", int, (SCIP *,), scip)
getBranchScore(scip, var, downgain, upgain) = @scip_ccall("getBranchScore", SCIP_Real, (SCIP *, SCIP_VAR *, SCIP_Real, SCIP_Real), scip, var, downgain, upgain)
getBranchScoreMultiple(scip, var, nchildren, gains) = @scip_ccall("getBranchScoreMultiple", SCIP_Real, (SCIP *, SCIP_VAR *, int, SCIP_Real *), scip, var, nchildren, gains)
getBranchingPoint(scip, var, suggestion) = @scip_ccall("getBranchingPoint", SCIP_Real, (SCIP *, SCIP_VAR *, SCIP_Real), scip, var, suggestion)
calcNodeselPriority(scip, var, branchdir, targetvalue) = @scip_ccall("calcNodeselPriority", SCIP_Real, (SCIP *, SCIP_VAR *, SCIP_BRANCHDIR, SCIP_Real), scip, var, branchdir, targetvalue)
calcChildEstimate(scip, var, targetvalue) = @scip_ccall("calcChildEstimate", SCIP_Real, (SCIP *, SCIP_VAR *, SCIP_Real), scip, var, targetvalue)
getSolVal(scip, sol, var) = @scip_ccall("getSolVal", SCIP_Real, (SCIP *, SCIP_SOL *, SCIP_VAR *), scip, sol, var)
getSolOrigObj(scip, sol) = @scip_ccall("getSolOrigObj", SCIP_Real, (SCIP *, SCIP_SOL *), scip, sol)
getSolTransObj(scip, sol) = @scip_ccall("getSolTransObj", SCIP_Real, (SCIP *, SCIP_SOL *), scip, sol)
transformObj(scip, obj) = @scip_ccall("transformObj", SCIP_Real, (SCIP *, SCIP_Real), scip, obj)
retransformObj(scip, obj) = @scip_ccall("retransformObj", SCIP_Real, (SCIP *, SCIP_Real), scip, obj)
getSolTime(scip, sol) = @scip_ccall("getSolTime", SCIP_Real, (SCIP *, SCIP_SOL *), scip, sol)
getSolRunnum(scip, sol) = @scip_ccall("getSolRunnum", int, (SCIP *, SCIP_SOL *), scip, sol)
getSolNodenum(scip, sol) = @scip_ccall("getSolNodenum", SCIP_Longint, (SCIP *, SCIP_SOL *), scip, sol)
getSolHeur(scip, sol) = @scip_ccall("getSolHeur", SCIP_HEUR *, (SCIP *, SCIP_SOL *), scip, sol)
areSolsEqual(scip, sol1, sol2) = @scip_ccall("areSolsEqual", SCIP_Bool, (SCIP *, SCIP_SOL *, SCIP_SOL *), scip, sol1, sol2)
getNSols(scip) = @scip_ccall("getNSols", int, (SCIP *,), scip)
getSols(scip) = @scip_ccall("getSols", SCIP_SOL **, (SCIP *,), scip)
getBestSol(scip) = @scip_ccall("getBestSol", SCIP_SOL *, (SCIP *,), scip)
hasPrimalRay(scip) = @scip_ccall("hasPrimalRay", SCIP_Bool, (SCIP *,), scip)
getPrimalRayVal(scip, var) = @scip_ccall("getPrimalRayVal", SCIP_Real, (SCIP *, SCIP_VAR *), scip, var)
getCurrentNode(scip) = @scip_ccall("getCurrentNode", SCIP_NODE *, (SCIP *,), scip)
getRootNode(scip) = @scip_ccall("getRootNode", SCIP_NODE *, (SCIP *,), scip)
inRepropagation(scip) = @scip_ccall("inRepropagation", SCIP_Bool, (SCIP *,), scip)
getNChildren(scip) = @scip_ccall("getNChildren", int, (SCIP *,), scip)
getNSiblings(scip) = @scip_ccall("getNSiblings", int, (SCIP *,), scip)
getNLeaves(scip) = @scip_ccall("getNLeaves", int, (SCIP *,), scip)
getPrioChild(scip) = @scip_ccall("getPrioChild", SCIP_NODE *, (SCIP *,), scip)
getPrioSibling(scip) = @scip_ccall("getPrioSibling", SCIP_NODE *, (SCIP *,), scip)
getBestChild(scip) = @scip_ccall("getBestChild", SCIP_NODE *, (SCIP *,), scip)
getBestSibling(scip) = @scip_ccall("getBestSibling", SCIP_NODE *, (SCIP *,), scip)
getBestLeaf(scip) = @scip_ccall("getBestLeaf", SCIP_NODE *, (SCIP *,), scip)
getBestNode(scip) = @scip_ccall("getBestNode", SCIP_NODE *, (SCIP *,), scip)
getBestboundNode(scip) = @scip_ccall("getBestboundNode", SCIP_NODE *, (SCIP *,), scip)
getCutoffdepth(scip) = @scip_ccall("getCutoffdepth", int, (SCIP *,), scip)
getRepropdepth(scip) = @scip_ccall("getRepropdepth", int, (SCIP *,), scip)
getNRuns(scip) = @scip_ccall("getNRuns", int, (SCIP *,), scip)
getNNodes(scip) = @scip_ccall("getNNodes", SCIP_Longint, (SCIP *,), scip)
getNTotalNodes(scip) = @scip_ccall("getNTotalNodes", SCIP_Longint, (SCIP *,), scip)
getNNodesLeft(scip) = @scip_ccall("getNNodesLeft", int, (SCIP *,), scip)
getNLPs(scip) = @scip_ccall("getNLPs", SCIP_Longint, (SCIP *,), scip)
getNLPIterations(scip) = @scip_ccall("getNLPIterations", SCIP_Longint, (SCIP *,), scip)
getNRootLPIterations(scip) = @scip_ccall("getNRootLPIterations", SCIP_Longint, (SCIP *,), scip)
getNRootFirstLPIterations(scip) = @scip_ccall("getNRootFirstLPIterations", SCIP_Longint, (SCIP *,), scip)
getNPrimalLPs(scip) = @scip_ccall("getNPrimalLPs", SCIP_Longint, (SCIP *,), scip)
getNPrimalLPIterations(scip) = @scip_ccall("getNPrimalLPIterations", SCIP_Longint, (SCIP *,), scip)
getNDualLPs(scip) = @scip_ccall("getNDualLPs", SCIP_Longint, (SCIP *,), scip)
getNDualLPIterations(scip) = @scip_ccall("getNDualLPIterations", SCIP_Longint, (SCIP *,), scip)
getNBarrierLPs(scip) = @scip_ccall("getNBarrierLPs", SCIP_Longint, (SCIP *,), scip)
getNBarrierLPIterations(scip) = @scip_ccall("getNBarrierLPIterations", SCIP_Longint, (SCIP *,), scip)
getNResolveLPs(scip) = @scip_ccall("getNResolveLPs", SCIP_Longint, (SCIP *,), scip)
getNResolveLPIterations(scip) = @scip_ccall("getNResolveLPIterations", SCIP_Longint, (SCIP *,), scip)
getNPrimalResolveLPs(scip) = @scip_ccall("getNPrimalResolveLPs", SCIP_Longint, (SCIP *,), scip)
getNPrimalResolveLPIterations(scip) = @scip_ccall("getNPrimalResolveLPIterations", SCIP_Longint, (SCIP *,), scip)
getNDualResolveLPs(scip) = @scip_ccall("getNDualResolveLPs", SCIP_Longint, (SCIP *,), scip)
getNDualResolveLPIterations(scip) = @scip_ccall("getNDualResolveLPIterations", SCIP_Longint, (SCIP *,), scip)
getNNodeLPs(scip) = @scip_ccall("getNNodeLPs", SCIP_Longint, (SCIP *,), scip)
getNNodeLPIterations(scip) = @scip_ccall("getNNodeLPIterations", SCIP_Longint, (SCIP *,), scip)
getNNodeInitLPs(scip) = @scip_ccall("getNNodeInitLPs", SCIP_Longint, (SCIP *,), scip)
getNNodeInitLPIterations(scip) = @scip_ccall("getNNodeInitLPIterations", SCIP_Longint, (SCIP *,), scip)
getNDivingLPs(scip) = @scip_ccall("getNDivingLPs", SCIP_Longint, (SCIP *,), scip)
getNDivingLPIterations(scip) = @scip_ccall("getNDivingLPIterations", SCIP_Longint, (SCIP *,), scip)
getNStrongbranchs(scip) = @scip_ccall("getNStrongbranchs", SCIP_Longint, (SCIP *,), scip)
getNStrongbranchLPIterations(scip) = @scip_ccall("getNStrongbranchLPIterations", SCIP_Longint, (SCIP *,), scip)
getNRootStrongbranchs(scip) = @scip_ccall("getNRootStrongbranchs", SCIP_Longint, (SCIP *,), scip)
getNRootStrongbranchLPIterations(scip) = @scip_ccall("getNRootStrongbranchLPIterations", SCIP_Longint, (SCIP *,), scip)
getNPriceRounds(scip) = @scip_ccall("getNPriceRounds", int, (SCIP *,), scip)
getNPricevars(scip) = @scip_ccall("getNPricevars", int, (SCIP *,), scip)
getNPricevarsFound(scip) = @scip_ccall("getNPricevarsFound", int, (SCIP *,), scip)
getNPricevarsApplied(scip) = @scip_ccall("getNPricevarsApplied", int, (SCIP *,), scip)
getNSepaRounds(scip) = @scip_ccall("getNSepaRounds", int, (SCIP *,), scip)
getNCutsFound(scip) = @scip_ccall("getNCutsFound", int, (SCIP *,), scip)
getNCutsFoundRound(scip) = @scip_ccall("getNCutsFoundRound", int, (SCIP *,), scip)
getNCutsApplied(scip) = @scip_ccall("getNCutsApplied", int, (SCIP *,), scip)
getNConflictConssFound(scip) = @scip_ccall("getNConflictConssFound", SCIP_Longint, (SCIP *,), scip)
getNConflictConssFoundNode(scip) = @scip_ccall("getNConflictConssFoundNode", int, (SCIP *,), scip)
getNConflictConssApplied(scip) = @scip_ccall("getNConflictConssApplied", SCIP_Longint, (SCIP *,), scip)
getDepth(scip) = @scip_ccall("getDepth", int, (SCIP *,), scip)
getFocusDepth(scip) = @scip_ccall("getFocusDepth", int, (SCIP *,), scip)
getMaxDepth(scip) = @scip_ccall("getMaxDepth", int, (SCIP *,), scip)
getMaxTotalDepth(scip) = @scip_ccall("getMaxTotalDepth", int, (SCIP *,), scip)
getNBacktracks(scip) = @scip_ccall("getNBacktracks", SCIP_Longint, (SCIP *,), scip)
getPlungeDepth(scip) = @scip_ccall("getPlungeDepth", int, (SCIP *,), scip)
getNActiveConss(scip) = @scip_ccall("getNActiveConss", int, (SCIP *,), scip)
getNEnabledConss(scip) = @scip_ccall("getNEnabledConss", int, (SCIP *,), scip)
getAvgDualbound(scip) = @scip_ccall("getAvgDualbound", SCIP_Real, (SCIP *,), scip)
getAvgLowerbound(scip) = @scip_ccall("getAvgLowerbound", SCIP_Real, (SCIP *,), scip)
getDualbound(scip) = @scip_ccall("getDualbound", SCIP_Real, (SCIP *,), scip)
getLowerbound(scip) = @scip_ccall("getLowerbound", SCIP_Real, (SCIP *,), scip)
getDualboundRoot(scip) = @scip_ccall("getDualboundRoot", SCIP_Real, (SCIP *,), scip)
getLowerboundRoot(scip) = @scip_ccall("getLowerboundRoot", SCIP_Real, (SCIP *,), scip)
getFirstLPDualboundRoot(scip) = @scip_ccall("getFirstLPDualboundRoot", SCIP_Real, (SCIP *,), scip)
getFirstLPLowerboundRoot(scip) = @scip_ccall("getFirstLPLowerboundRoot", SCIP_Real, (SCIP *,), scip)
getPrimalbound(scip) = @scip_ccall("getPrimalbound", SCIP_Real, (SCIP *,), scip)
getUpperbound(scip) = @scip_ccall("getUpperbound", SCIP_Real, (SCIP *,), scip)
getCutoffbound(scip) = @scip_ccall("getCutoffbound", SCIP_Real, (SCIP *,), scip)
isPrimalboundSol(scip) = @scip_ccall("isPrimalboundSol", SCIP_Bool, (SCIP *,), scip)
getGap(scip) = @scip_ccall("getGap", SCIP_Real, (SCIP *,), scip)
getTransGap(scip) = @scip_ccall("getTransGap", SCIP_Real, (SCIP *,), scip)
getNSolsFound(scip) = @scip_ccall("getNSolsFound", SCIP_Longint, (SCIP *,), scip)
getNLimSolsFound(scip) = @scip_ccall("getNLimSolsFound", SCIP_Longint, (SCIP *,), scip)
getNBestSolsFound(scip) = @scip_ccall("getNBestSolsFound", SCIP_Longint, (SCIP *,), scip)
getAvgPseudocost(scip, solvaldelta) = @scip_ccall("getAvgPseudocost", SCIP_Real, (SCIP *, SCIP_Real), scip, solvaldelta)
getAvgPseudocostCurrentRun(scip, solvaldelta) = @scip_ccall("getAvgPseudocostCurrentRun", SCIP_Real, (SCIP *, SCIP_Real), scip, solvaldelta)
getAvgPseudocostCount(scip, dir) = @scip_ccall("getAvgPseudocostCount", SCIP_Real, (SCIP *, SCIP_BRANCHDIR), scip, dir)
getAvgPseudocostCountCurrentRun(scip, dir) = @scip_ccall("getAvgPseudocostCountCurrentRun", SCIP_Real, (SCIP *, SCIP_BRANCHDIR), scip, dir)
getAvgPseudocostScore(scip) = @scip_ccall("getAvgPseudocostScore", SCIP_Real, (SCIP *,), scip)
getAvgPseudocostScoreCurrentRun(scip) = @scip_ccall("getAvgPseudocostScoreCurrentRun", SCIP_Real, (SCIP *,), scip)
getAvgConflictScore(scip) = @scip_ccall("getAvgConflictScore", SCIP_Real, (SCIP *,), scip)
getAvgConflictScoreCurrentRun(scip) = @scip_ccall("getAvgConflictScoreCurrentRun", SCIP_Real, (SCIP *,), scip)
getAvgConflictlengthScore(scip) = @scip_ccall("getAvgConflictlengthScore", SCIP_Real, (SCIP *,), scip)
getAvgConflictlengthScoreCurrentRun(scip) = @scip_ccall("getAvgConflictlengthScoreCurrentRun", SCIP_Real, (SCIP *,), scip)
getAvgInferences(scip, dir) = @scip_ccall("getAvgInferences", SCIP_Real, (SCIP *, SCIP_BRANCHDIR), scip, dir)
getAvgInferencesCurrentRun(scip, dir) = @scip_ccall("getAvgInferencesCurrentRun", SCIP_Real, (SCIP *, SCIP_BRANCHDIR), scip, dir)
getAvgInferenceScore(scip) = @scip_ccall("getAvgInferenceScore", SCIP_Real, (SCIP *,), scip)
getAvgInferenceScoreCurrentRun(scip) = @scip_ccall("getAvgInferenceScoreCurrentRun", SCIP_Real, (SCIP *,), scip)
getAvgCutoffs(scip, dir) = @scip_ccall("getAvgCutoffs", SCIP_Real, (SCIP *, SCIP_BRANCHDIR), scip, dir)
getAvgCutoffsCurrentRun(scip, dir) = @scip_ccall("getAvgCutoffsCurrentRun", SCIP_Real, (SCIP *, SCIP_BRANCHDIR), scip, dir)
getAvgCutoffScore(scip) = @scip_ccall("getAvgCutoffScore", SCIP_Real, (SCIP *,), scip)
getAvgCutoffScoreCurrentRun(scip) = @scip_ccall("getAvgCutoffScoreCurrentRun", SCIP_Real, (SCIP *,), scip)
getNImplications(scip) = @scip_ccall("getNImplications", int, (SCIP *,), scip)
getTimeOfDay(scip) = @scip_ccall("getTimeOfDay", SCIP_Real, (SCIP *,), scip)
getClockTime(scip, clck) = @scip_ccall("getClockTime", SCIP_Real, (SCIP *, SCIP_CLOCK *), scip, clck)
getTotalTime(scip) = @scip_ccall("getTotalTime", SCIP_Real, (SCIP *,), scip)
getSolvingTime(scip) = @scip_ccall("getSolvingTime", SCIP_Real, (SCIP *,), scip)
getReadingTime(scip) = @scip_ccall("getReadingTime", SCIP_Real, (SCIP *,), scip)
getPresolvingTime(scip) = @scip_ccall("getPresolvingTime", SCIP_Real, (SCIP *,), scip)
getFirstLPTime(scip) = @scip_ccall("getFirstLPTime", SCIP_Real, (SCIP *,), scip)
epsilon(scip) = @scip_ccall("epsilon", SCIP_Real, (SCIP *,), scip)
sumepsilon(scip) = @scip_ccall("sumepsilon", SCIP_Real, (SCIP *,), scip)
feastol(scip) = @scip_ccall("feastol", SCIP_Real, (SCIP *,), scip)
lpfeastol(scip) = @scip_ccall("lpfeastol", SCIP_Real, (SCIP *,), scip)
dualfeastol(scip) = @scip_ccall("dualfeastol", SCIP_Real, (SCIP *,), scip)
barrierconvtol(scip) = @scip_ccall("barrierconvtol", SCIP_Real, (SCIP *,), scip)
cutoffbounddelta(scip) = @scip_ccall("cutoffbounddelta", SCIP_Real, (SCIP *,), scip)
markLimitChanged(scip) = @scip_ccall("markLimitChanged", void, (SCIP *,), scip)
infinity(scip) = @scip_ccall("infinity", SCIP_Real, (SCIP *,), scip)
getHugeValue(scip) = @scip_ccall("getHugeValue", SCIP_Real, (SCIP *,), scip)
isEQ(scip, val1, val2) = @scip_ccall("isEQ", SCIP_Bool, (SCIP *, SCIP_Real, SCIP_Real), scip, val1, val2)
isLT(scip, val1, val2) = @scip_ccall("isLT", SCIP_Bool, (SCIP *, SCIP_Real, SCIP_Real), scip, val1, val2)
isLE(scip, val1, val2) = @scip_ccall("isLE", SCIP_Bool, (SCIP *, SCIP_Real, SCIP_Real), scip, val1, val2)
isGT(scip, val1, val2) = @scip_ccall("isGT", SCIP_Bool, (SCIP *, SCIP_Real, SCIP_Real), scip, val1, val2)
isGE(scip, val1, val2) = @scip_ccall("isGE", SCIP_Bool, (SCIP *, SCIP_Real, SCIP_Real), scip, val1, val2)
isInfinity(scip, val) = @scip_ccall("isInfinity", SCIP_Bool, (SCIP *, SCIP_Real), scip, val)
isHugeValue(scip, val) = @scip_ccall("isHugeValue", SCIP_Bool, (SCIP *, SCIP_Real), scip, val)
isZero(scip, val) = @scip_ccall("isZero", SCIP_Bool, (SCIP *, SCIP_Real), scip, val)
isPositive(scip, val) = @scip_ccall("isPositive", SCIP_Bool, (SCIP *, SCIP_Real), scip, val)
isNegative(scip, val) = @scip_ccall("isNegative", SCIP_Bool, (SCIP *, SCIP_Real), scip, val)
isIntegral(scip, val) = @scip_ccall("isIntegral", SCIP_Bool, (SCIP *, SCIP_Real), scip, val)
isScalingIntegral(scip, val, scalar) = @scip_ccall("isScalingIntegral", SCIP_Bool, (SCIP *, SCIP_Real, SCIP_Real), scip, val, scalar)
isFracIntegral(scip, val) = @scip_ccall("isFracIntegral", SCIP_Bool, (SCIP *, SCIP_Real), scip, val)
floor(scip, val) = @scip_ccall("floor", SCIP_Real, (SCIP *, SCIP_Real), scip, val)
ceil(scip, val) = @scip_ccall("ceil", SCIP_Real, (SCIP *, SCIP_Real), scip, val)
round(scip, val) = @scip_ccall("round", SCIP_Real, (SCIP *, SCIP_Real), scip, val)
frac(scip, val) = @scip_ccall("frac", SCIP_Real, (SCIP *, SCIP_Real), scip, val)
isSumEQ(scip, val1, val2) = @scip_ccall("isSumEQ", SCIP_Bool, (SCIP *, SCIP_Real, SCIP_Real), scip, val1, val2)
isSumLT(scip, val1, val2) = @scip_ccall("isSumLT", SCIP_Bool, (SCIP *, SCIP_Real, SCIP_Real), scip, val1, val2)
isSumLE(scip, val1, val2) = @scip_ccall("isSumLE", SCIP_Bool, (SCIP *, SCIP_Real, SCIP_Real), scip, val1, val2)
isSumGT(scip, val1, val2) = @scip_ccall("isSumGT", SCIP_Bool, (SCIP *, SCIP_Real, SCIP_Real), scip, val1, val2)
isSumGE(scip, val1, val2) = @scip_ccall("isSumGE", SCIP_Bool, (SCIP *, SCIP_Real, SCIP_Real), scip, val1, val2)
isSumZero(scip, val) = @scip_ccall("isSumZero", SCIP_Bool, (SCIP *, SCIP_Real), scip, val)
isSumPositive(scip, val) = @scip_ccall("isSumPositive", SCIP_Bool, (SCIP *, SCIP_Real), scip, val)
isSumNegative(scip, val) = @scip_ccall("isSumNegative", SCIP_Bool, (SCIP *, SCIP_Real), scip, val)
isFeasEQ(scip, val1, val2) = @scip_ccall("isFeasEQ", SCIP_Bool, (SCIP *, SCIP_Real, SCIP_Real), scip, val1, val2)
isFeasLT(scip, val1, val2) = @scip_ccall("isFeasLT", SCIP_Bool, (SCIP *, SCIP_Real, SCIP_Real), scip, val1, val2)
isFeasLE(scip, val1, val2) = @scip_ccall("isFeasLE", SCIP_Bool, (SCIP *, SCIP_Real, SCIP_Real), scip, val1, val2)
isFeasGT(scip, val1, val2) = @scip_ccall("isFeasGT", SCIP_Bool, (SCIP *, SCIP_Real, SCIP_Real), scip, val1, val2)
isFeasGE(scip, val1, val2) = @scip_ccall("isFeasGE", SCIP_Bool, (SCIP *, SCIP_Real, SCIP_Real), scip, val1, val2)
isFeasZero(scip, val) = @scip_ccall("isFeasZero", SCIP_Bool, (SCIP *, SCIP_Real), scip, val)
isFeasPositive(scip, val) = @scip_ccall("isFeasPositive", SCIP_Bool, (SCIP *, SCIP_Real), scip, val)
isFeasNegative(scip, val) = @scip_ccall("isFeasNegative", SCIP_Bool, (SCIP *, SCIP_Real), scip, val)
isFeasIntegral(scip, val) = @scip_ccall("isFeasIntegral", SCIP_Bool, (SCIP *, SCIP_Real), scip, val)
isFeasFracIntegral(scip, val) = @scip_ccall("isFeasFracIntegral", SCIP_Bool, (SCIP *, SCIP_Real), scip, val)
feasFloor(scip, val) = @scip_ccall("feasFloor", SCIP_Real, (SCIP *, SCIP_Real), scip, val)
feasCeil(scip, val) = @scip_ccall("feasCeil", SCIP_Real, (SCIP *, SCIP_Real), scip, val)
feasRound(scip, val) = @scip_ccall("feasRound", SCIP_Real, (SCIP *, SCIP_Real), scip, val)
feasFrac(scip, val) = @scip_ccall("feasFrac", SCIP_Real, (SCIP *, SCIP_Real), scip, val)
isLbBetter(scip, newlb, oldlb, oldub) = @scip_ccall("isLbBetter", SCIP_Bool, (SCIP *, SCIP_Real, SCIP_Real, SCIP_Real), scip, newlb, oldlb, oldub)
isUbBetter(scip, newub, oldlb, oldub) = @scip_ccall("isUbBetter", SCIP_Bool, (SCIP *, SCIP_Real, SCIP_Real, SCIP_Real), scip, newub, oldlb, oldub)
isRelEQ(scip, val1, val2) = @scip_ccall("isRelEQ", SCIP_Bool, (SCIP *, SCIP_Real, SCIP_Real), scip, val1, val2)
isRelLT(scip, val1, val2) = @scip_ccall("isRelLT", SCIP_Bool, (SCIP *, SCIP_Real, SCIP_Real), scip, val1, val2)
isRelLE(scip, val1, val2) = @scip_ccall("isRelLE", SCIP_Bool, (SCIP *, SCIP_Real, SCIP_Real), scip, val1, val2)
isRelGT(scip, val1, val2) = @scip_ccall("isRelGT", SCIP_Bool, (SCIP *, SCIP_Real, SCIP_Real), scip, val1, val2)
isRelGE(scip, val1, val2) = @scip_ccall("isRelGE", SCIP_Bool, (SCIP *, SCIP_Real, SCIP_Real), scip, val1, val2)
isSumRelEQ(scip, val1, val2) = @scip_ccall("isSumRelEQ", SCIP_Bool, (SCIP *, SCIP_Real, SCIP_Real), scip, val1, val2)
isSumRelLT(scip, val1, val2) = @scip_ccall("isSumRelLT", SCIP_Bool, (SCIP *, SCIP_Real, SCIP_Real), scip, val1, val2)
isSumRelLE(scip, val1, val2) = @scip_ccall("isSumRelLE", SCIP_Bool, (SCIP *, SCIP_Real, SCIP_Real), scip, val1, val2)
isSumRelGT(scip, val1, val2) = @scip_ccall("isSumRelGT", SCIP_Bool, (SCIP *, SCIP_Real, SCIP_Real), scip, val1, val2)
isSumRelGE(scip, val1, val2) = @scip_ccall("isSumRelGE", SCIP_Bool, (SCIP *, SCIP_Real, SCIP_Real), scip, val1, val2)
isUpdateUnreliable(scip, newvalue, oldvalue) = @scip_ccall("isUpdateUnreliable", SCIP_Bool, (SCIP *, SCIP_Real, SCIP_Real), scip, newvalue, oldvalue)
printReal(scip, file, val, width, precision) = @scip_ccall("printReal", void, (SCIP *, FILE *, SCIP_Real, int, int), scip, file, val, width, precision)
blkmem(scip) = @scip_ccall("blkmem", BMS_BLKMEM *, (SCIP *,), scip)
getMemUsed(scip) = @scip_ccall("getMemUsed", SCIP_Longint, (SCIP *,), scip)
getMemExternEstim(scip) = @scip_ccall("getMemExternEstim", SCIP_Longint, (SCIP *,), scip)
calcMemGrowSize(scip, num) = @scip_ccall("calcMemGrowSize", int, (SCIP *, int), scip, num)
freeBufferSize(scip, ptr, dummysize) = @scip_ccall("freeBufferSize", void, (SCIP *, void **, int), scip, ptr, dummysize)
printMemoryDiagnostic(scip) = @scip_ccall("printMemoryDiagnostic", void, (SCIP *,), scip)
getRealarrayVal(scip, realarray, idx) = @scip_ccall("getRealarrayVal", SCIP_Real, (SCIP *, SCIP_REALARRAY *, int), scip, realarray, idx)
getRealarrayMinIdx(scip, realarray) = @scip_ccall("getRealarrayMinIdx", int, (SCIP *, SCIP_REALARRAY *), scip, realarray)
getRealarrayMaxIdx(scip, realarray) = @scip_ccall("getRealarrayMaxIdx", int, (SCIP *, SCIP_REALARRAY *), scip, realarray)
getIntarrayVal(scip, intarray, idx) = @scip_ccall("getIntarrayVal", int, (SCIP *, SCIP_INTARRAY *, int), scip, intarray, idx)
getIntarrayMinIdx(scip, intarray) = @scip_ccall("getIntarrayMinIdx", int, (SCIP *, SCIP_INTARRAY *), scip, intarray)
getIntarrayMaxIdx(scip, intarray) = @scip_ccall("getIntarrayMaxIdx", int, (SCIP *, SCIP_INTARRAY *), scip, intarray)
getBoolarrayVal(scip, boolarray, idx) = @scip_ccall("getBoolarrayVal", SCIP_Bool, (SCIP *, SCIP_BOOLARRAY *, int), scip, boolarray, idx)
getBoolarrayMinIdx(scip, boolarray) = @scip_ccall("getBoolarrayMinIdx", int, (SCIP *, SCIP_BOOLARRAY *), scip, boolarray)
getBoolarrayMaxIdx(scip, boolarray) = @scip_ccall("getBoolarrayMaxIdx", int, (SCIP *, SCIP_BOOLARRAY *), scip, boolarray)
getPtrarrayVal(scip, ptrarray, idx) = @scip_ccall("getPtrarrayVal", void *, (SCIP *, SCIP_PTRARRAY *, int), scip, ptrarray, idx)
getPtrarrayMinIdx(scip, ptrarray) = @scip_ccall("getPtrarrayMinIdx", int, (SCIP *, SCIP_PTRARRAY *), scip, ptrarray)
getPtrarrayMaxIdx(scip, ptrarray) = @scip_ccall("getPtrarrayMaxIdx", int, (SCIP *, SCIP_PTRARRAY *), scip, ptrarray)
