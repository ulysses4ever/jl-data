
##########################################
# Approximate pattern matching 
#
require("/Users/conrad/courses/BioinformaticsOne/src/kmer.jl")
require("/Users/conrad/courses/BioinformaticsOne/src/seq.jl")


genome = "CTCTCCAGAGTAACTGTCGTTGGCCACAGCTAGCTCCTCGTAGGCCCAGTGTTTTCGGTTCGAATCCATCCGTTTACAGAATATTCGATAGGCATACCGCCATACCGACGTTTTACAAAAAGAGCCGGTCACCTCTGTTTTTCTGCGGAGACCCTTTCCGCAGTTTTTGGAGACTGAGGGGGACGCCAGCGTAGGATAATTCTATTACAAAAAGCACTTTTACTTCACATGTCCTCAGGCAAATGGGCAAAGTGTTGAACAAAGCCCTGAGGGAGGGGAGATCAAGAAACGGCCACACATCCCATTTGTGTGCACAAATTTTGTCCGATGTATGCCAGCAGCAAGCTAGAGCCCGGACCGACTTGGCATCGCTCGTCTTGCGATTTACCCCTCATTTATAAGTCCTAAAACATAAGGAAAACTGCTAATGACCTTTCTGCAGACTAACGCGCAAAATCCGTAACGATACCATATGTTGCGCCCGACGCGACCGGCAGCATTAAGTAGGACCCATTTGCCATAAAACTATGCGTCATTATAGAATAAAATGGCCCCCAACAATCAATCTAAGGGTTCTGCACTTAGGGTGGGATAGTAGACAACTAGTTACCCAGTGGAATCCGTTTGCAGTTCGACATACGGTCTGGACGACGTAGGAGGGGTTGTCGATAGCTGAGTGAAGTGAGTATAACCACCTAGTCACAATTCCCCTGCGCGAAAGGGGTTTGGTAGGTACACGGACACGTCATGAGTTTTCGATACAGATCTGTATTTGCATCAGAAACAAGTCATTAGACTATTGATAGCTGGCTCACAATAGTTCGAGTGGGGCAACTGGTAAAAGGGGCGTGTACCGGAGTGCTGCGCCTAGTGCGATAATCACGTCGTACCGACAAACACTCGCGGCTGAGGACGGCGACAGGACTTTCAGCACTGAATGCCTATTCCCACAGCAGGACTGTATACTCAGTTTCCGGTGTGTGCACACGTATGTAAATCAATCGGTCGTGGTGATGGGTAGGTTTTGGTCGTTGTCGGCGTGTCACAGAGGATAAGATATCAGCCGCCCCCGAACATCGTGGAAATGTGTTATTATGCCGAGGGTACAAAACCCAGCGGGATTTAAAACGAGAGGCCCGAACTCGTCCTCGTTTAAAACTACCAAAGTAGTTACCCTGATTGAGACGATTTGCGTAGGGTTGCTATACGAGTTGCCGTCGGTTTCCATACAAGACTGACTATACTCCTATCGTTTGGCACAGACGGAGGCCGACCTATCGATAAATAAACACTCCTCCCTGTCATACATCTCACGCTCTGTACCGACCATGGGATCGCTGTAGCCTCCGAGCCGGAAATGCATGTACACCATGCTGGATATTCAGTGAAGTATTCATTATTCAGTGTACGATTTAAGTCATATTCAGTGCACACTGGGATGTGCAAAGGGATATTCAGTGGGTATTCAGTGGTACGTATTCAGTGGGGTATTCAGTGTGCTTTGTATTCAGTGTCTCCGAAGGTTATTTATTCAGTGGGGATGTCAACCCGGCGTATTCAGTGGTTAATTTTCGGGCGGGTATTCAGTGAGGGATTTGGTAATCAATGATATTCAGTGATAGTGGTATGATATTCAGTGGGAAGCTATTCAGTGACAGTATATCCTCAAAACCAATCTCCGAGTATATTCAGTGGGATTGTCGTGCGTTTATTCAGTGGTAAAGATGCCAAGTTCTCTATATTCAGTGATTCAGTGCTCGAATCTACCCTAGTCTCTCCTAGGCAATATTCAGTGCAGTGTTAACATATTCAGTGAGTATTCAGTGTATTCAGTGTGTTATTCAGTGGCACATCTTAGCTATTCAGTGGATTAACCCTAAGATCAAACGACTGAAAGCTCCGATGAGTATTCAGTGATTATTCAGTGTGATATTTATTCAGTGTCAGTGGCGATATTCAGTGGCTACAGCCTCAAAAGTGGAGAGCACGTTTACAAGGAAATTCGACTTGCCTCTACGATGATTAACTGTAGTTGATTATACTACTGTGTGGGGGAGTCAGATTTGCTGACGACGCCCACCAAAACCATGACGGCACACCGAATGATCGGCTATTAGTTTCGCAACGCGGCGACGGAGTACTCATACTTATAAAGTCTATCAGAGAAACCGTACGATCAAGCTCCTTGTGTCTTACTTTGGGGCAACCAGTCCAAGGCACGTGTAGAAGCACCTGGTGGTAGCGAGGTCGCAGTGTTGCAATCGGATCTCAGAGATGTGTCGCTCGTCCGATCCGGGTCAACTGCACGCTCGGCGCCGCAAGACAGGAAGGGAAGGAAAACCTATGGCTCTGGTTATCCGCAGGGAGAGTCGGTTTCGGTACCGCGTGTCACATGCCTGTCTTTGGAAACGGCACGGGTGCATCAACCCTATTTTTTTCCGTCTCAGGGCATGCCAGGGGCCTAACACAACTCCCGAACTCTGCATCTGAACCGTTCCTCTAGTTGCTTTACGCATGATGTTCCTGCTCGACTTACTATACTAGATCATGCTGTGTCTTGCTACCAAAAGGCACTAGCTGTACTCTTACTGCTCGATCCCGTCGTAGTCTTTGATGAGGCTTGTCAAGCGGACGATCCGCCTCCATAACAACCGGTACGGCCATGGACACCATAATGCCCTTTCAAGTTATCTCCGCAGTCGGGAAAGCCCCACCGGTGAGAGGGACTGTGGGAAGGCTATTTGCACGTCCGCAGTCGGCAAAATTCGCATCTGTTTGGATTGAGCGTCTGACAGGATTATCCCTGAGCCTGCCGAATGGCGTCGCCTCGCGCATAAACGATTGAACTAGCCTCATGTCGGTGTATGTGAGGATCGATAGACGTTGAATGCGTTGTTTCATCTAACAGGGGTCGGATGGGAGTATGGCAGACAGAAAGCTTAGCTACCTCCGTACGCGCGTCGAGACGATTACATGGAATGTGCAATACGGGTAGTGTGGGAGCCGAAGCGTGACTCCGAGTCTAATTCGGCCTGAGTATAATGCGATGTCACTTAAATTGAAAACACTCTCAGAACTCGCCGGTGAACCTACAAAATGTAAGTGGAGTCCCTTGAAGTAGTACTAAGGAGTCGTTGGACCTCCGCTCGTGACTGCCAATCCACATCGATTATAGAACACTTCCACAGAGTCCAACGTAACTCTCAGCAGTAACAAGAACACCCTAGTAAACGGACGTGATAACCAAATTCCTCCACAAAGATCGCAATGTGGCAGTGCTGAATCTCAAGAAGACAACCCAGTGAAAGGCGGAGTCCAAAACCCCCCAGGCAGAGTGCCTCCATGTTGAAAATAACCCCCCACATTGAAACCCCCCAAAGCATGGTTAGAACCCCCCAAACAACCCCCCACTACCATTTGTACCAACGCGAGTAGACACTACACATGGTAACCCCCCATTAGTCAAACCCCCCATAAAACCCCCCATTCGTTAACGGAACCCCCCACAACCCCCCAAAGTTGGCAACACCCAGTAAGGCTTTATAAGAACCCCCCACAACCCCCAACCCCCCAAAACCCCCCACGGCTCCCTAAGGGGTGGGGTCGCTGCAACCCCCCACCCAAGATAGTAACCCCCCACGGGCAAGCGGAACATTATACAACCCCCCACCGTAGCGAGTACAACCCCCCAGACTAACCCCCCAGTTGATCCTCCCAACACAGCTATCTGGAAAACCCCCCATTCAATGAAAACCCCCCATTGTCTGCCAACGACGTAACCCCCCAGGTTACTTGCCAACCCCCCACCATCTGGTGTCTAAATTTAATGCCATGGCGTGTTGATTAAGAGCGTGACAACCCCCCAACCCCCCACCCCAAACCCCCCAAATTCAGGAAACCCCCCAGGTTGGCAATTAATTGTACGATAATCGATCTTAGAGCTAAAGCTAAGGAAGGACGCCAACTAGCTAAGGACTAAGGAAAGGATGACTTACGGTAATCGCCTTCAGACAGCTAAGGATTGGCAATGCAGCTAAGGACGTATATCGGCAGAAGAAGCTAGCTAAGGATAAGCTAAGGATACAGAGCTCGATCTTCAGATGATTGACACTAGCTTATCAGCTAAAGCTAAGGAGTTTCTCGGGTTCGAGGAAGCTAAGGACTAAGGAAATTACGTTACGAGCTAAGGAATAAGCAAGGAAGCTAAGGAAGAGAGAGCTAAGGAAGGAGGGAATGGAATTACGGAATTACGCGAAAGACTGGAGGAATTACGGGAATTACGGGAATTACGAGCTAAGGATAAGGAGGAAGGAGAGTAGAGGAATTACGTGAGCAGCTAAGGAAGGAGATAGCTAAGGAACAGGTAAGGAGAGTAGAGGGAAAAGCTAAGGAGGAATTAAGCTAAGGAGAATTAAGCTAAGGAAATTACGGAGTAGTGAAGGAGAGTTTCTATCGGGAGCTAAGGAGTGAGATGAAGGAGAGCTAAGGAGCTAAGGAGAGCTAAGGAAGTAGGCCTCAAGTTGCCCCGTCGCACTGGGAATTACGTTACGTACGGAGTAAGGAGAGTACTGTCGGAATTACGAGGAGAGTCGAGCGGAGGAATTACGGGAATTACGAGAATATGGAATTACGCTATATGACGAGTATAGGAAGGAGCTATATGACTATATGACTATATGACAATTACGAGCTA"
kmer = "GGAATT"
dmax = 2

dict = buildmerdict(genome,length(kmer));
# kkeys = collect(keys(dict))
# filter!(x-> (dist(x,kmer)<=dmax), kkeys)
kkeys = keys(dict);
dkeys = collect(filter(x-> (dist(x,kmer)<=dmax), kkeys))
indices = sort(reduce(vcat,map(x->locate(x,genome,-1),dkeys)))  # map-reduce, called the hard way.





