#extract_spectrograms.jl
#This script takes audio recordings and dumps the corresponding spectrograms
#into trainpath, defined in the config file.
#author: Timothy Evans
#date: 30/07/15

push!(LOAD_PATH, pwd())
importall signalprocessing, config
using Images, DataFrames

# Define all relative paths from config.jl. Changes should only be made
# to config.jl
if path_rel
  projdir = pwd()[1:end-3]; #remove src directory
  specpath = string(projdir,specdir)
  labelledpath = string(projdir,labelleddir)
  trainpath = string(projdir,traindir)
  modelpath = string(projdir,modeldir)
else
  specpath = specdir
  labelledpath = labelleddir
  trainpath = traindir
  modelpath = modeldir
end


print("Loading images and extracting feature vectors ... \n")

for spec in  readdir(labelledpath)

  #load the images and construct the feature vector for this image pair.
  imgmask = imread(string(labelledpath,spec)); # labelled masks are png images to avoid loss
  img = imread(string(trainpath,spec[1:end-3],"jpg")); # the corresponding img will be jpg for space reasons
  recorderdata = readtable(string(trainpath,"recorderdata.csv"));
  print("Current file: $spec\n")
  if (colorspace(imgmask) == "BGRA")
#    print(spec)
    (pixels,freq,boxmu,boxvar,label) = imgfeature(img, imgmask,spec,recorderdata)
  else
    cs = colorspace(img)
    #if this error is thrown consider adding elseif conditions for other
    # potential colorspaces
    error("Currently extract_features.jl only considers images with colorspace
    BRGA: received image of type $cs.")
  end

  if isdefined(:featuredata)
    featuredata=vcat(featuredata,hcat(pixels,freq,boxmu,boxvar))
    labeldata=vcat(labeldata,label)
  else
    global featuredata = hcat(pixels,freq,boxmu,boxvar);
    global labeldata = label;
  end
end

print("Subsampling data and writing to $(string(modelpath,datafile)) ... \n")

# subsample data as required
featuredata,labeldata = subsampledata(featuredata,labeldata,subsampleratio)
labeldata = convertclasses(labeldata) # make zeros and ones all zeros and twos into ones

#feature normalise the data
(X,mu,sigma) = featurenormalise(featuredata);

writecsv(string(modelpath,datafile),hcat(X,labeldata))
writecsv(string(modelpath,"musigma.csv"),vcat(mu,sigma))
