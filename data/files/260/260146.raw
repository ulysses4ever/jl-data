function scenario_risk_branch(input::ScenarioRiskInput)
  assets, gmfs, tax_vf_map = input.assets, input.gmfs, input.tax_vf_map
  asset_losses, portfolio_losses = scenario_risk_portfolio(assets, gmfs, tax_vf_map)
  branch_output = scenario_risk_postprocess(asset_losses, portfolio_losses)
  return branch_output
end

function scenario_risk_tree(inputs::Dict{ASCIIString, ScenarioRiskInput})
  tree_outputs = [branch_ref => scenario_risk_branch(branch_input)
                  for (branch_ref, branch_input) in inputs]
  return tree_outputs
end

function scenario_damage_branch(input::ScenarioDamageInput)
  assets, gmfs, tax_ff_map = input.assets, input.gmfs, input.tax_ff_map
  states = tax_ff_map[assets[1].tax].states
  states = ["no_damage", states]
  asset_damages, taxonomy_damages, portfolio_damages = scenario_damage_portfolio(assets, gmfs, tax_ff_map)
  branch_output = scenario_damage_postprocess(states, asset_damages, taxonomy_damages, portfolio_damages)
  return branch_output
end

function scenario_damage_tree(inputs::Dict{ASCIIString, ScenarioDamageInput})
  tree_outputs = [branch_ref => scenario_damage_branch(branch_input)
                  for (branch_ref, branch_input) in inputs]
  return tree_outputs
end
