function scenario_risk_postprocess(asset_losses::Dict{ASCIIString, Vector{Float64}},
                                   portfolio_losses::Vector{Float64})
  asset_loss_moments = Dict{ASCIIString, LossMoments}()

  for (ref, losses) in asset_losses
    asset_loss_moments[ref] = LossMoments(mean(losses), std(losses))
  end
  portfolio_loss_moments = LossMoments(mean(portfolio_losses), std(portfolio_losses))

  ###
  fa = open("tmp_assets.out", "w")
  for (ref, losses) in asset_losses
    writedlm(fa, losses)
  end
  close(fa)
  ###

  output = ScenarioRiskOutput(asset_loss_moments, portfolio_loss_moments)
  return output
end

function scenario_damage_postprocess(states::Vector{ASCIIString},
                                     asset_damages,
                                     taxonomy_damages,
                                     portfolio_damages)
  asset_dmg_moments = Dict{ASCIIString, DamageMoments}()
  taxonomy_dmg_moments = Dict{ASCIIString, DamageMoments}()

  for (ref, damages) in asset_damages
    asset_dmg_moments[ref] = DamageMoments(states, vec(mean(damages, 1)), vec(std(damages, 1)))
  end

  for (ref, damages) in taxonomy_damages
    taxonomy_dmg_moments[ref] = DamageMoments(states, vec(mean(damages, 1)), vec(std(damages, 1)))
  end
  portfolio_dmg_moments = DamageMoments(states, vec(mean(portfolio_damages, 1)), vec(std(portfolio_damages, 1)))

  output = ScenarioDamageOutput(states, asset_dmg_moments, taxonomy_dmg_moments, portfolio_dmg_moments)
  return output
end

function classical_risk_postprocess(asset_loss_curves::Dict{ASCIIString, LossCurve})
  avg_asset_losses = Dict{ASCIIString, Float64}()
  for (ref, lc) in asset_loss_curves
    avg_asset_losses[ref] = dot(pairwise_mean(lc.poes)[2:end-1], diff(lc.lrs))
  end
  output = ClassicalRiskOutput(asset_loss_curves, avg_asset_losses)
  return output
end

function event_based_risk_postprocess(asset_losses::Dict{ASCIIString, Vector{Float64}},
                                      portfolio_losses::Vector{Float64},
                                      risk_investigation_time::Int,
                                      num_sims::Int,
                                      loss_curve_res::Int)

  avg_asset_losses = Dict{ASCIIString, Float64}()
  asset_loss_curves = Dict{ASCIIString, LossCurve}()
  println(sum(asset_losses["a1"]))
  for (ref, losses) in asset_losses
    losses = sort(losses, rev=true)
    lrs = linspace(0, losses[1], loss_curve_res)
    roes = [sum(losses .> lr)/num_sims for lr in lrs]
    poes = [1 - exp(-float(roes * risk_investigation_time))]
    alc = LossCurve(1, lrs, poes)
    asset_loss_curves[ref] = alc
  end

  for (ref, lc) in asset_loss_curves
    avg_asset_losses[ref] = dot(pairwise_mean(lc.poes)[2:end-1], diff(lc.lrs))
  end

  losses = sort(portfolio_losses, rev=true)
  lrs = linspace(0, losses[1], loss_curve_res)
  roes = [sum(losses .> lr)/num_sims for lr in lrs]
  poes = [1 - exp(-float(roes * risk_investigation_time))]
  portfolio_loss_curve = LossCurve(1, lrs, poes)

  plc = portfolio_loss_curve
  avg_portfolio_loss = dot(pairwise_mean(plc.poes)[2:end-1], diff(plc.lrs))
  output = EventBasedRiskOutput(asset_losses, portfolio_losses,
                                asset_loss_curves, portfolio_loss_curve,
                                avg_asset_losses, avg_portfolio_loss)
  return output
end
