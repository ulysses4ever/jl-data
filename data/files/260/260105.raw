function scenario_risk_preprocess(job_file)
  inputs = Dict{ASCIIString, ScenarioRiskInput}()
  f = jldopen(job_file, "r")
  num_gmfs = read(f, "number_of_ground_motion_fields")
  hazard_model = f["hazard"]
  vulnerability_model = f["vulnerability"]
  exposure_model = f["exposure"]
  tax_vf_model = f["tax_vf_map"]

  asset_refs = names(exposure_model)
  assets = Set{Asset}()
  for a_ref in asset_refs
    a_loc = read(exposure_model[a_ref]["a_loc"])
    a_tax = read(exposure_model[a_ref]["a_tax"])
    a_num = read(exposure_model[a_ref]["a_num"])
    a_occ = read(exposure_model[a_ref]["a_occ"])
    a_val = read(exposure_model[a_ref]["a_val"])
    a_ded = read(exposure_model[a_ref]["a_ded"])
    a_lim = read(exposure_model[a_ref]["a_lim"])
    if isnan(a_ded)
      asset = Asset(a_ref, a_loc, a_tax, a_num, a_occ, a_val)
    else
      asset = Asset(a_ref, a_loc, a_tax, a_num, a_occ, a_val, a_ded, a_lim)
    end
    push!(assets, asset)
  end

  vf_ids = names(vulnerability_model)
  vulnerabilities = Dict{ASCIIString, VulnerabilityFunction}()
  for vf_id in vf_ids
    vf_type = read(vulnerability_model[vf_id]["vf_type"])
    vf_imls = read(vulnerability_model[vf_id]["vf_imls"])
    if vf_type == "PM"
      vf_lrs = read(vulnerability_model[vf_id]["vf_lrs"])
      vf_probs = read(vulnerability_model[vf_id]["vf_probs"])
      vulnerabilities[vf_id] = DiscreteVulnerabilityFunction(vf_type, vf_imls, vf_lrs, vf_probs)
    else
      vf_mean_lrs = read(vulnerability_model[vf_id]["vf_mean_lrs"])
      vf_cov_lrs = read(vulnerability_model[vf_id]["vf_cov_lrs"])
      vulnerabilities[vf_id] = ContinuousVulnerabilityFunction(vf_type, vf_imls, vf_mean_lrs, vf_cov_lrs)
    end
  end

  taxonomies = names(tax_vf_model)
  tax_vf_map = Dict{ASCIIString, Set{VulnerabilityFunction}}()
  for tax in taxonomies
    tax_vf_map[tax] = Set{VulnerabilityFunction}()
    for vf_id in read(tax_vf_model[tax])
      push!(tax_vf_map[tax], vulnerabilities[vf_id])
    end
  end

  branches = names(hazard_model)
  for branch in branches
    gm_means = read(hazard_model[branch]["gm_means"])
    gm_stds = read(hazard_model[branch]["gm_stds"])
    gmfs = sample_gmfs(gm_means, gm_stds, num_gmfs)
    inputs[branch] = ScenarioRiskInput(assets, gmfs, tax_vf_map)
  end

  close(f)
  return inputs
end

function scenario_damage_preprocess(job_file)
  inputs = Dict{ASCIIString, ScenarioDamageInput}()
  f = jldopen(job_file, "r")
  num_gmfs = read(f, "number_of_ground_motion_fields")
  hazard_model = f["hazard"]
  fragility_model = f["fragility"]
  exposure_model = f["exposure"]
  tax_ff_model = f["tax_ff_map"]

  asset_refs = names(exposure_model)
  assets = Set{Asset}()
  for a_ref in asset_refs
    a_loc = read(exposure_model[a_ref]["a_loc"])
    a_tax = read(exposure_model[a_ref]["a_tax"])
    a_num = read(exposure_model[a_ref]["a_num"])
    a_occ = read(exposure_model[a_ref]["a_occ"])
    a_val = read(exposure_model[a_ref]["a_val"])
    a_ded = read(exposure_model[a_ref]["a_ded"])
    a_lim = read(exposure_model[a_ref]["a_lim"])
    if isnan(a_ded)
      asset = Asset(a_ref, a_loc, a_tax, a_num, a_occ, a_val)
    else
      asset = Asset(a_ref, a_loc, a_tax, a_num, a_occ, a_val, a_ded, a_lim)
    end
    push!(assets, asset)
  end

  ff_ids = names(fragility_model)
  fragilities = Dict{ASCIIString, FragilityFunction}()
  for ff_id in ff_ids
    ff_states = read(fragility_model[ff_id]["ff_states"])
    ff_type = read(fragility_model[ff_id]["ff_type"])
    if ff_type == "discrete"
      ff_imls = read(fragility_model[ff_id]["ff_imls"])
      ff_poes = read(fragility_model[ff_id]["ff_poes"])
      fragilities[ff_id] = DiscreteFragilityFunction(ff_states, ff_imls, ff_poes)
    else
      ff_mean_imls = read(fragility_model[ff_id]["ff_mean_imls"])
      ff_std_imls = read(fragility_model[ff_id]["ff_std_imls"])
      fragilities[ff_id] = ContinuousFragilityFunction(ff_states, ff_mean_imls, ff_std_imls)
    end
  end

  taxonomies = names(tax_ff_model)
  tax_ff_map = Dict{ASCIIString, Set{FragilityFunction}}()
  for tax in taxonomies
    tax_ff_map[tax] = Set{FragilityFunction}()
    for ff_id in read(tax_ff_model[tax])
      push!(tax_ff_map[tax], fragilities[ff_id])
    end
  end

  branches = names(hazard_model)
  for branch in branches
    gm_means = read(hazard_model[branch]["gm_means"])
    gm_stds = read(hazard_model[branch]["gm_stds"])
    gmfs = sample_gmfs(gm_means, gm_stds, num_gmfs)
    inputs[branch] = ScenarioDamageInput(assets, gmfs, tax_ff_map)
  end

  close(f)
  return inputs
end

function event_based_risk_preprocess(job_file)
  inputs = Dict{ASCIIString, EventBasedRiskInput}()
  insured_losses = false
  include(job_file)
  inputs = [branch::ASCIIString => EventBasedRiskInput(assets, gmfs[branch], tax_vf_map,
                                          risk_investigation_time,
                                          num_sims, loss_curve_res,
                                          insured_losses)
            for branch in branches]
  return inputs
end

function classical_risk_preprocess(job_file)
  inputs = Dict{ASCIIString, ClassicalRiskInput}()
  include(job_file)
  inputs = [branch::ASCIIString => ClassicalRiskInput(assets, hcs[branch], tax_vf_map,
                                         risk_investigation_time, num_steps)
            for branch in branches]
  return inputs
end
