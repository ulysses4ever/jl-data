function finegrain_list(list, n, min_x)
  if min_x < list[1]
    list = [min_x list]
  end
  new_list = list[1]
  for i=1:length(list)-1
    new_list = [new_list transpose(linspace(list[i], list[i+1], n+1)[2:end])]
  end
  return new_list
end

function interpolate_matrix(vec_x, mat_y, new_vec_x)
  new_mat_y = []
  for i = 1:size(mat_y, 1)
    vec_y = mat_y[i,:]
    new_vec_y = interpolate_vector(vec_x, vec_y, new_vec_x)
    new_mat_y = (i == 1 ? new_vec_y : [new_mat_y, new_vec_y])
  end
  return new_mat_y
end

function interpolate_vector(vec_x, vec_y, new_vec_x)
  new_vec_y = []
  x1 = x2 = y1 = y2 = ind = 0
  for i = 1:length(new_vec_x)
    ind = sum(vec_x .< new_vec_x[i])
    if ind == 0
      x1 = new_vec_x[1]; x2 = vec_x[1]
      y1 = 0; y2 = vec_y[1]
    else
      x1 = vec_x[ind]; x2 = vec_x[ind+1]
      y1 = vec_y[ind]; y2 = vec_y[ind+1]
    end
    if x1 == x2
      new_vec_y = [new_vec_y, y2]
    else
      new_vec_y = [new_vec_y, y1 + (y2 - y1) / (x2 - x1) * (new_vec_x[i] - x1)]
    end
  end
  return transpose(new_vec_y)
end

function pairwise_mean(list)
  list = [list[1] list list[end]]
  return [(i+j)/2 for (i,j) in zip(list[1:end-1], list[2:end])]
end

function strip_matrix(vec_x, mat_y, min_x)
  new_mat_y = []
  for i = 1:size(mat_y, 1)
    vec_y = mat_y[i,:]
    new_vec_y = strip_vector(vec_x, vec_y, min_x)
    new_mat_y = (i == 1 ? new_vec_y : [new_mat_y, new_vec_y])
  end
  return new_mat_y
end

function strip_vector(vec_x, vec_y, min_x)
  new_vec_y = vec_y
  ind = findfirst(x -> x >= min_x, vec_x) - 1
  new_vec_y[1:ind] = 0
  return new_vec_y
end
