fragility_imls = [0.2 0.4 0.6 0.8 1.0 1.2 1.4]
fragility_poes = [0.771 0.950 0.989 0.997 0.999 1.000 1.000;
                  0.500 0.861 0.957 0.985 0.994 0.997 0.999;
                  0.231 0.636 0.837 0.924 0.962 0.981 0.989;
                  0.097 0.414 0.661 0.806 0.887 0.933 0.959]

hazard_imls = []
hazard_poes = []
computed_hazard_poes = [3.915291296E-02 2.493494969E-02 1.142889260E-02 5.379326221E-03 2.629974334E-03 1.327670083E-03 6.878886107E-04 3.635574346E-04]

no_damage_limit = 0.05
steps_per_interval = 4

hazard_investigation_time = 1.0
risk_investigation_time = 1.0

function finegrain_list(list, n, min_x)
  if min_x < list[1]
    list = [min_x list]
  end
  new_list = list[1]
  for i=1:length(list)-1
    new_list = [new_list transpose(linspace(list[i], list[i+1], n+1)[2:end])]
  end
  return new_list
end

function interpolate_matrix(vec_x, mat_y, new_vec_x)
  new_mat_y = []
  for i = 1:size(mat_y, 1)
    vec_y = mat_y[i,:]
    new_vec_y = interpolate_vector(vec_x, vec_y, new_vec_x)
    new_mat_y = (i == 1 ? new_vec_y : [new_mat_y, new_vec_y])
  end
  return new_mat_y
end

function interpolate_vector(vec_x, vec_y, new_vec_x)
  new_vec_y = []
  x1 = x2 = y1 = y2 = ind = 0
  for i = 1:length(new_vec_x)
    ind = sum(vec_x .< new_vec_x[i])
    if ind == 0 && new_vec_x[1] â‰  vec_x[1]
      x1 = new_vec_x[1]; x2 = vec_x[1]
      y1 = 0; y2 = vec_y[1]
    else
      x1 = vec_x[ind]; x2 = vec_x[ind+1]
      y1 = vec_y[ind]; y2 = vec_y[ind+1]
    end
    new_vec_y = [new_vec_y, y1 + (y2 - y1) / (x2 - x1) * (new_vec_x[i] - x1)]
  end
  return transpose(new_vec_y)
end

function pairwise_mean(list)
  list = [list[1] list list[end]]
  return [(i+j)/2 for (i,j) in zip(list[1:end-1], list[2:end])]
end

function strip_matrix(vec_x, mat_y, min_x)
  new_mat_y = []
  for i = 1:size(mat_y, 1)
    vec_y = mat_y[i,:]
    new_vec_y = strip_vector(vec_x, vec_y, min_x)
    new_mat_y = (i == 1 ? new_vec_y : [new_mat_y, new_vec_y])
  end
  return new_mat_y
end

function strip_vector(vec_x, vec_y, min_x)
  new_vec_y = vec_y
  ind = findfirst(x -> x >= min_x, vec_x) - 1
  new_vec_y[1:ind] = 0
  return new_vec_y
end

function classical_damage(hazard_poes, fragility_poes,
                          hazard_investigation_time,
                          risk_investigation_time)
  hazard_afoes = -log(1.0 - hazard_poes)./hazard_investigation_time
  hazard_afoos = -transpose(diff(pairwise_mean(hazard_afoes)))
  damage_afoes = transpose(sum(hazard_afoos.*fragility_poes, 2))
  damage_poes = 1.0 - exp(-damage_afoes.*risk_investigation_time)
  damage_poos = -diff([1.0 damage_poes 0.0], 2)
  return damage_poos
end



interpolated_imls = finegrain_list(fragility_imls,
                                   steps_per_interval,
                                   no_damage_limit)
interpolated_fragility_poes = interpolate_matrix(fragility_imls,
                                                 fragility_poes,
                                                 interpolated_imls)
stripped_fragility_poes = strip_matrix(interpolated_imls,
                                       interpolated_fragility_poes,
                                       no_damage_limit)
computed_hazard_imls = finegrain_list(fragility_imls, 1,
                                      no_damage_limit)
interpolated_hazard_poes = interpolate_matrix(computed_hazard_imls,
                                              computed_hazard_poes,
                                              interpolated_imls)
damage_poos = classical_damage(interpolated_hazard_poes,
                               stripped_fragility_poes,
                               hazard_investigation_time,
                               risk_investigation_time)
