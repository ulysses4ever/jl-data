function scenario_risk_postprocess(asset_losses::Dict{ASCIIString, Vector{Float64}},
                                   portfolio_losses::Vector{Float64})
  asset_loss_moments = Dict{ASCIIString, LossMoments}()

  for (ref, losses) in asset_losses
    asset_loss_moments[ref] = LossMoments(mean(losses), std(losses))
  end
  portfolio_loss_moments = LossMoments(mean(portfolio_losses), std(portfolio_losses))

  return ScenarioRiskOutput(asset_loss_moments, portfolio_loss_moments)
end


function scenario_damage_postprocess(states::Vector{ASCIIString},
                                     asset_damages,
                                     taxonomy_damages,
                                     portfolio_damages)
  asset_dmg_moments = Dict{ASCIIString, DamageMoments}()
  taxonomy_dmg_moments = Dict{ASCIIString, DamageMoments}()

  for (ref, damages) in asset_damages
    asset_dmg_moments[ref] = DamageMoments(states, vec(mean(damages, 1)), vec(std(damages, 1)))
  end

  for (ref, damages) in taxonomy_damages
    taxonomy_dmg_moments[ref] = DamageMoments(states, vec(mean(damages, 1)), vec(std(damages, 1)))
  end
  portfolio_dmg_moments = DamageMoments(states, vec(mean(portfolio_damages, 1)), vec(std(portfolio_damages, 1)))

  return ScenarioDamageOutput(states, asset_dmg_moments, taxonomy_dmg_moments, portfolio_dmg_moments)
end


function classical_risk_postprocess(asset_loss_curves::Dict{ASCIIString, LossCurve})
  avg_asset_losses = Dict{ASCIIString, Float64}()

  for (ref, lc) in asset_loss_curves
    avg_asset_losses[ref] = dot(pairwise_mean(lc.poes)[2:end-1], diff(lc.lrs))
  end

  return ClassicalRiskOutput(asset_loss_curves, avg_asset_losses)
end


function event_based_risk_postprocess(asset_elts::Dict{ASCIIString, Vector{Float64}},
                                      portfolio_elt::Vector{Float64},
                                      time_h::Float64,
                                      time_r::Float64,
                                      num_ses::Int,
                                      loss_curve_res::Int)

  avg_asset_losses = Dict{ASCIIString, Float64}()
  asset_loss_curves = Dict{ASCIIString, LossCurve}()
  for (ref, asset_elt) in asset_elts
    asset_loss_curve = build_loss_curve_from_elt(asset_elt, time_h, time_r,
                                                 num_ses, loss_curve_res)
    asset_loss_curves[ref] = asset_loss_curve
    avg_asset_losses[ref] = calc_avg_loss_from_loss_curve(asset_loss_curve)
  end

  portfolio_loss_curve = build_loss_curve_from_elt(portfolio_elt, time_h, time_r,
                                                   num_ses, loss_curve_res)
  avg_portfolio_loss = calc_avg_loss_from_loss_curve(portfolio_loss_curve)

  return EventBasedRiskOutput(asset_elts, portfolio_elt,
                              asset_loss_curves, portfolio_loss_curve,
                              avg_asset_losses, avg_portfolio_loss)
end


function build_loss_curve_from_elt(elt::Vector{Float64},
                                   time_h::Float64,
                                   time_r::Float64,
                                   num_ses::Int,
                                   loss_curve_res::Int)
  losses = sort(elt, rev=true)
  lrs = linspace(0.0, losses[1], loss_curve_res)
  afoes = [sum(losses .> lr)/(time_h * num_ses) for lr in lrs]
  poes = [1 - exp(-float(afoes * time_r))]
  return LossCurve(time_r, lrs, poes)
end

function calc_avg_loss_from_loss_curve(loss_curve::LossCurve)
  return dot(pairwise_mean(loss_curve.poes)[2:end-1], diff(loss_curve.lrs))
end
