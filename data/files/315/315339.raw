include("jb2048.jl")
include("dag2048.jl")
# julia set working module

# parameters for a 3x3 grid
jb2048.setgamma(jb2048.gamma[2:4,2:4])
jb2048.setcareful([4,6,9,9])
# parameters for a 3x4 grid
jb2048.setgamma(jb2048.gamma[1:3,:])
jb2048.setcareful([4,6,8,12,12])
initgoal,restricted=6,5
g=jb2048.initgame()
xplay!(g,display=true,upgoal=true,verbose=true)

# restore parameters for a 4x4 grid
jb2048.setgamma()
jb2048.setcareful()
initgoal,restricted=5,5
g=jb2048.initgame()
xplay!(g,display=true,upgoal=true,verbose=true,minfrozen=7)

λ,μ=length(maxdag),length(meandag)
log(λ)/log(8)

i=0
i-=1; h=g.hist[i];plot(h...)
i+=1; h=g.hist[i];plot(h...)
b=h[1];node=MaxNode(b)
jb2048.back!(g,i)
play!(g,display=true,upgoal=true,verbose=true)
jb2048.play!(g,moves=1,display=true)
b=h[1]
b=g.board
t=target(b,upgoal=true)
plot(b)
node=MaxNode(b)
play!(g,moves=1,display=true)

0.94^4*0.43

b=[ 10 9 4 2; 8 6 1 3; 0 0 2 1];plot(b)

@time r=xrepartition(50,verbose=10:14,upgoal=true,minfrozen=7)
@time r=xrepartition(1000)

empty!(maxdag);empty!(meandag)
gc()

b=[ 12 10 7 1; 11 8 6 1; 5 4 0 0; 2 2 1 1]
g=Game(b)
