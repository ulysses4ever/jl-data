function generate_reads(;N=100,W=21,L=100,Cprob=[0.3, 0.7],pmax=1.0)
	# Generate synthetic data of overlapping reads
    # -----------------------------
    # N = number of reads
    # W = methylation sites per read
    # L = number of methylation-eligible sites
    # Cprob = array listing the proportions of cell types
    # alpha/beta = parameters for beta distribution (prior)
    A = fill(NaN,(N,L))
    c = zeros(Int,N)
    nC = length(Cprob) # number of cell types
    cumC = cumsum(Cprob) - Cprob[1]

    P = pmax*rand((nC,L)) # methylation probabilities
    
    if floor(W/2) == W/2
    	W += 1 # make sure W is odd
    end

    for i = 1:N
    	m = rand(1:L) # middle point of read
    	c[i] = find((i/N) .> cumC)[end] # current cluster
    	s1 = maximum([1,m-floor(W/2)])
    	s2 = minimum([L,m+floor(W/2)])

    	for w = s1:s2
    		if rand(Bernoulli(P[c[i],w])) == 1
    			A[i,w] = 1.0
    		else
    			A[i,w] = -1.0
    		end
    	end
    end

    A,c = sort_reads(A,c)
    obs = find_observations(A)
    return A,P,c,obs
end

function find_observations(A)
    # Return list of indices of non-Nan elements in A
    # -----------------------------
    # A = N x L matrix of reads (with missing entries)
    # returns 
    m,n = size(A)
    obs = (Int64,Int64)[]
    for i = 1:m
        for j = 1:n
            if ~isnan(A[i,j])
                push!(obs,(i,j))
            end
        end
    end
    return obs
end

function sort_reads(A,c::Vector{Int})
    # Sort rows of A based on cluster assignment c
    # -----------------------------
    # A = N x L matrix of reads (with missing entries)
    # c = Vector holding cluster assignments for each row of A
    nc = int(maximum(c)) # number of clusters
    N,W = size(A)
    ind = sortperm(c)
    #A = A[ind,:]
    #c = c[ind]

    # sort by position
    ind = Int64[]
    n = 1
    for ic = 1:nc
        J = Int64[] # array holding first non-NaN element of each row
        while n <= N && c[n] == ic
            push!(J,find(!isnan(A[n,:]))[1])
            n += 1
        end
        ind = vcat(ind,sortperm(J,rev=true)+length(ind))
    end

    return A[ind,:],c[ind]
end

# Compare estimates X and Y, to ground truth ()
function eval_synthetic_results(X_in,Y_in,c,P;make_plots=false)
    # get dimensions
    X,Y = deepcopy(X_in),deepcopy(Y_in)
    m,k = size(X)
    n = size(Y,2)

    # Normalize rows of X to have unit length
    for i = 1:m
        if sum(X[i,:]) > eps()
            X[i,:] /= sum(X[i,:])
        else
            X[i,:] = 0.5*ones(k)
        end
    end

    # Construct "true" X matrix
    X_real = zeros(size(X))
    for i = 1:m
        X_real[i,c[i]] = 1
    end

    # compare X to X_real across all permutations of columns
    Xdist = Inf
    for perm in permutations(1:k)
        # Compute distance for this permutation of X_real
        xd = 0
        for i = 1:m
            xd += sum(abs(X_real[i,perm] - X[i,:]))
        end
        # Save the smallest distance across permutations
        if xd < Xdist
            Xdist = xd
        end
    end

    # Scale Xdist so that it can be interpretated as the proportion of misclassified reads
    Xdist /= m*2

    # compare Y to P
    Y = (1+Y)/2  # scale Y to probabilities
    Yresid = vec(Y - P)
    Ydist = sum(abs(Yresid))

    if make_plots
        figure()
        imshow(X',cmap=ColorMap("Greys"),interpolation="none")
        xlabel("Inferred Cluster Assignments")
        yticks([])
        
        figure()
        imshow(X_real',cmap=ColorMap("Greys"),interpolation="none")
        xlabel("True Cluster Assignments")
        yticks([])

        # Compare true and inferred methylation probabilities
        figure(), imshow(Y,cmap=ColorMap("Greys"),interpolation="none")
        xlabel("Reconstructed methylation profiles"), yticks([])
        figure()
        imshow(P,cmap=ColorMap("Greys"),interpolation="none")
        xlabel("True methylation profiles"), yticks([])

        figure(figsize=(8,3)),PyPlot.hist(Yresid,50)
        xlabel("Residuals (for methylation profiles)",fontweight="bold")
        show()
    end

    return Xdist,Ydist
end
