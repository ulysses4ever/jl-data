import Base:+
import Base:*

using PyPlot

ion()

type Vec4f
  e1::Float32
  e2::Float32
  e3::Float32
  e4::Float32
end

type Mat4f
  v1::Vec4f
  v2::Vec4f
  v3::Vec4f
  v4::Vec4f
end

function +(v1::Vec4f,v2::Vec4f)
  return Vec4f(v1.e1+v2.e1,v1.e2+v2.e2,v1.e3+v2.e3,v1.e4+v2.e4)
end

function *(a::Float32,v::Vec4f)
  return Vec4f(a*v.e1,a*v.e2,a*v.e3,a*v.e4)
end

function *(M::Mat4f,v::Vec4f)
  return Vec4f(v.e1*M.v1+v.e2*M.v2+v.e3*M.v3+v.e4*M.v4)
end

type Object
  vertices::Vector{Vec4f}
  # Type constructor which allows to use Object(vec1,vec2,...)
  Object(x::Vector{Vec4f}) = new(x)
  Object(x...) = new(collect(Vec4f,x))
end

function render(Object; figAxis=[-1,1,-1,1])
  show()
  x = [v.e1 for v in Object.vertices]
  y = [v.e2 for v in Object.vertices]
  clf()
  axis(figAxis)
  plot(x,y)
  draw()
end

#v1 = Vec4f(0,0,0,1)
#v2 = Vec4f(1,0,0,1)
#v3 = Vec4f(0,1,0,1)
#triangle = Object(v1,v2,v3,v1)
#render(triangle)

v1 = Vec4f(-1,-1,0,1)
v2 = Vec4f(1,-1,0,1)
v3 = Vec4f(-1,1,0,1)
v4 = Vec4f(0,2,0,1)
v5 = Vec4f(1,1,0,1)
v6 = Vec4f(-1,-1,0,1)
v7 = Vec4f(-1,1,0,1)
v8 = Vec4f(1,1,0,1)
v9 = Vec4f(1,-1,0,1)
houseOfSantaClaus = Object(v1,v2,v3,v4,v5,v6,v7,v8,v9)
#render(houseOfSantaClaus, figAxis=[-2,2,-2,2])

type Transformation
  M::Mat4f
  Transformation(M::Mat4f) = new(M)
  Transformation(v1,v2,v3,v4) = new(Mat4f(v1,v2,v3,v4))
end

function *(T::Transformation,v::Vec4f)
  return T.M*v
end

function *(T::Transformation,O::Object)
  return Object(map(x->T.M*x,O.vertices))
end

function translation(x,y,z)
  return Transformation(Vec4f(1,0,0,0),Vec4f(0,1,0,0),Vec4f(0,0,1,0),Vec4f(x,y,z,1))
end

function rotx(phi)
  return Transformation(Vec4f(1,0,0,0),Vec4f(0,cos(phi),sin(phi),0),Vec4f(0,-sin(phi),cos(phi),0),Vec4f(0,0,0,1))
end

function roty(phi)
  return Transformation(Vec4f(cos(phi),0,-sin(phi),0),Vec4f(0,1,0,0),Vec4f(+sin(phi),0,cos(phi),0),Vec4f(0,0,0,1))
end

function rotz(phi)
  return Transformation(Vec4f(cos(phi),+sin(phi),0,0),Vec4f(-sin(phi),cos(phi),0,0),Vec4f(0,0,1,0),Vec4f(0,0,0,1))
end

function scaling(sx,sy,sz)
  return Transformation(Vec4f(sx,0,0,0),Vec4f(0,sy,0,0),Vec4f(0,0,sz,0),Vec4f(0,0,0,1))
end

#println(translation(2,2,2))

#T = translation(1,0,0)
#TranslatedHouseOfSantaClaus = T*houseOfSantaClaus
#render(TranslatedHouseOfSantaClaus, figAxis=[-2,2,-2,2])

#T = rotx(pi/4)
#RotatedHouseOfSantaClaus = T*houseOfSantaClaus
#render(RotatedHouseOfSantaClaus, figAxis=[-2,2,-2,2])

#T = scaling(1.25,0.75,1)
#ScaledHouseOfSantaClaus = T*houseOfSantaClaus
#render(ScaledHouseOfSantaClaus, figAxis=[-2,2,-2,2])

#tranHouseOfSantaClaus = houseOfSantaClaus
#j = 180
#for i = 1:j
##println(i)
#t = i/j
#T = translation(cos(2*pi*t),sin(2*pi*t),0)
#render(T*tranHouseOfSantaClaus, figAxis=[-2,2,-2,2])
#sleep(0.001)
#end

#function *(v1::Vec4f,v2::Vec4f)
#return v1.e1*v2.e1+v1.e2*v2.e2+v1.e3*v2.e3+v1.e4*v2.e4
#end

function *(M1::Mat4f,M2::Mat4f)
  return Mat4f(M1*M2.v1,M1*M2.v2,M1*M2.v3,M1*M2.v4)
end

function *(T1::Transformation,T2::Transformation)
  return Transformation(T1.M*T2.M)
end

function rotateObject(O::Object)
  for i = 0:60
    T = rotz(2*pi*i/60)
    render(T*O,figAxis=[-4,4,-4,4])
    sleep(0.001)
  end
end

function rotateAndZoomObject(O::Object)
  for i = 0:60
    T1 = rotz(2*pi*i/60)
    T2 = scaling(i/30,i/30,i/30)
    T = T1*T2
    render(T*O,figAxis=[-4,4,-4,4])
    sleep(0.001)
  end
end

function rotateObject2(O::Object)
  for i = 1:60
    T = rotz(2*pi*i/60)
    T = translation(-1,-1,0) * T
    render(T*O,figAxis=[-4,4,-4,4])
    T = translation(1,1,0) * T
    sleep(0.001)
  end
end

#rotateObject(houseOfSantaClaus)
#rotateAndZoomObject(houseOfSantaClaus)
#rotateAndZoomObject(houseOfSantaClaus)

function eulermatrix(α,β,δ)
  cosh = cos(α); sinh = sin(α);
  cosp = cos(β); sinp = sin(β);
  cosr = cos(δ); sinr = sin(δ);
  v1 = Vec4f(cosr*cosh-sinr*sinp*sinh,sinr*cosh+cosr*sinp*sinh,-cosp*sinh,0.0f0)
  v2 = Vec4f(-sinr*cosp,cosr*cosp,sinp,0.0f0)
  v3 = Vec4f(cosr*sinh+sinr*sinp*cosh,sinr*sinh-cosr*sinp*cosh,cosp*cosh,0.0f0)
  v4 = Vec4f(0,0,0,1.0f0)
  return Transformation(v1,v2,v3,v4)
end

pangle = pi/4
render(eulermatrix(pangle,pangle,pangle)*houseOfSantaClaus)
sleep(3)
render(rotz(pangle)*rotx(pangle)*roty(pangle)*houseOfSantaClaus)
sleep(3)
