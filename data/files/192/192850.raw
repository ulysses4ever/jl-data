module Include

export @inc

macro inc(ex...)
	as = '>'
	mod = ex[1]
	lit = Symbol[]
	fig = (Symbol,Symbol)[]
	for i in 2:length(ex)
		sym = ex[i]
		if search(string(sym), as) > 0
			sym = split(string(sym), as)
			syml = symbol(strip(sym[1]))
			symf = symbol(strip(sym[2]))
			append!(fig, [(syml, symf)])
		else
			append!(lit, [sym])
		end
	end

	args = Any[:toplevel]
	# if search(string(mod), as) > 0
	# 	mod = split(string(mod), as)
	# 	modl = symbol(strip(mod[1]))
	# 	modf = symbol(strip(mod[2]))
	# 	modg = gensym()
	# 	impt = Expr(:import, modl)
	# 	temp = esc(quote
	# 		module $modg
	# 			$impt
	# 		end
	# 		const $modf = $modg.$modl
	# 	end)
	# 	append!(args, [temp])
	# 	mod = modf
	# end

	append!(args, [Expr(:import, mod)])
	if length(lit) > 0
		for sym in lit
			append!(args, [Expr(:import, mod, sym)])
		end
	end

	for (syml,symf) in fig
		temp = quote
			const $symf = $mod.$syml
		end
		append!(args, [temp])
	end

	expr = apply(Expr, args)
	esc(expr)
end

end