# =============================================================================
# 01_dataframe_samp.jl - DataFrames sample by Julia
# Copyright(C). masaru.nakagawa 2017. All rights reserved.
# =============================================================================
using DataFrames
using RDatasets


cd(expanduser("/home/masaruna/Dropbox/julia/06_DataFrames/"))
anscombe = dataset("datasets", "anscombe")
## -----------------------------
## 1. General information
## -----------------------------
typeof(anscombe)
# DataFrames.DataFrame

names(anscombe)
# 8-element Array{Symbol,1}:
#  :X1
#  :X2
#  :X3
#  :X4
#  :Y1
#  :Y2
#  :Y3
#  :Y4

size(anscombe)
# (11,8)

head(anscombe, 5)
# 6×8 DataFrames.DataFrame
# │ Row │ X1 │ X2 │ X3 │ X4 │ Y1   │ Y2   │ Y3    │ Y4   │
# ├─────┼────┼────┼────┼────┼──────┼──────┼───────┼──────┤
# │ 1   │ 10 │ 10 │ 10 │ 8  │ 8.04 │ 9.14 │ 7.46  │ 6.58 │
# │ 2   │ 8  │ 8  │ 8  │ 8  │ 6.95 │ 8.14 │ 6.77  │ 5.76 │
# │ 3   │ 13 │ 13 │ 13 │ 8  │ 7.58 │ 8.74 │ 12.74 │ 7.71 │
# │ 4   │ 9  │ 9  │ 9  │ 8  │ 8.81 │ 8.77 │ 7.11  │ 8.84 │
# │ 5   │ 11 │ 11 │ 11 │ 8  │ 8.33 │ 9.26 │ 7.81  │ 8.47 │
# │ 6   │ 14 │ 14 │ 14 │ 8  │ 9.96 │ 8.1  │ 8.84  │ 7.04 │

showcols(anscombe)
# 11×8 DataFrames.DataFrame
# │ Col # │ Name │ Eltype  │ Missing │
# ├───────┼──────┼─────────┼─────────┤
# │ 1     │ X1   │ Int64   │ 0       │
# │ 2     │ X2   │ Int64   │ 0       │
# │ 3     │ X3   │ Int64   │ 0       │
# │ 4     │ X4   │ Int64   │ 0       │
# │ 5     │ Y1   │ Float64 │ 0       │
# │ 6     │ Y2   │ Float64 │ 0       │
# │ 7     │ Y3   │ Float64 │ 0       │
# │ 8     │ Y4   │ Float64 │ 0       │

## -----------------------------
## 2. slicing DataFrames
## -----------------------------
anscombe[:X1]
anscombe[1]
# 11-element DataArrays.DataArray{Int64,1}:
#  10
#   8
#  13
#   9
#  11
#  14
#   6
#   4
#  12
#   7
#   5


anscombe[4:6, [:X2, :X4]]
# │ Row │ X2 │ X4 │
# ├─────┼────┼────┤
# │ 1   │ 9  │ 8  │
# │ 2   │ 11 │ 8  │
# │ 3   │ 14 │ 8  │

anscombe[[4, 5, 6], [:X2, :X4]]

anscombe[[4, 6, 8], :]
# 3×8 DataFrames.DataFrame
# │ Row │ X1 │ X2 │ X3 │ X4 │ Y1   │ Y2   │ Y3   │ Y4   │
# ├─────┼────┼────┼────┼────┼──────┼──────┼──────┼──────┤
# │ 1   │ 9  │ 9  │ 9  │ 8  │ 8.81 │ 8.77 │ 7.11 │ 8.84 │
# │ 2   │ 14 │ 14 │ 14 │ 8  │ 9.96 │ 8.1  │ 8.84 │ 7.04 │
# │ 3   │ 4  │ 4  │ 4  │ 19 │ 4.26 │ 3.1  │ 5.39 │ 12.5 │

anscombe[:, [:X1, :Y1]]
# 11×2 DataFrames.DataFrame
# │ Row │ X1 │ Y1    │
# ├─────┼────┼───────┤
# │ 1   │ 10 │ 8.04  │
# │ 2   │ 8  │ 6.95  │
# │ 3   │ 13 │ 7.58  │
# │ 4   │ 9  │ 8.81  │
# │ 5   │ 11 │ 8.33  │
# │ 6   │ 14 │ 9.96  │
# │ 7   │ 6  │ 7.24  │
# │ 8   │ 4  │ 4.26  │
# │ 9   │ 12 │ 10.84 │
# │ 10  │ 7  │ 4.82  │
# │ 11  │ 5  │ 5.68  │


## selecting rows with conditions
anscombe[anscombe[:Y1] .> 8.0, :]
# 5×8 DataFrames.DataFrame
# │ Row │ X1 │ X2 │ X3 │ X4 │ Y1    │ Y2   │ Y3   │ Y4   │
# ├─────┼────┼────┼────┼────┼───────┼──────┼──────┼──────┤
# │ 1   │ 10 │ 10 │ 10 │ 8  │ 8.04  │ 9.14 │ 7.46 │ 6.58 │
# │ 2   │ 9  │ 9  │ 9  │ 8  │ 8.81  │ 8.77 │ 7.11 │ 8.84 │
# │ 3   │ 11 │ 11 │ 11 │ 8  │ 8.33  │ 9.26 │ 7.81 │ 8.47 │
# │ 4   │ 14 │ 14 │ 14 │ 8  │ 9.96  │ 8.1  │ 8.84 │ 7.04 │
# │ 5   │ 12 │ 12 │ 12 │ 8  │ 10.84 │ 9.13 │ 8.15 │ 5.56 │


anscombe[anscombe[:Y1] .> anscombe[:Y2], :]
# 6×8 DataFrames.DataFrame
# │ Row │ X1 │ X2 │ X3 │ X4 │ Y1    │ Y2   │ Y3   │ Y4   │
# ├─────┼────┼────┼────┼────┼───────┼──────┼──────┼──────┤
# │ 1   │ 9  │ 9  │ 9  │ 8  │ 8.81  │ 8.77 │ 7.11 │ 8.84 │
# │ 2   │ 14 │ 14 │ 14 │ 8  │ 9.96  │ 8.1  │ 8.84 │ 7.04 │
# │ 3   │ 6  │ 6  │ 6  │ 8  │ 7.24  │ 6.13 │ 6.08 │ 5.25 │
# │ 4   │ 4  │ 4  │ 4  │ 19 │ 4.26  │ 3.1  │ 5.39 │ 12.5 │
# │ 5   │ 12 │ 12 │ 12 │ 8  │ 10.84 │ 9.13 │ 8.15 │ 5.56 │
# │ 6   │ 5  │ 5  │ 5  │ 8  │ 5.68  │ 4.74 │ 5.73 │ 6.89 │

anscombe[(anscombe[:Y1] .> 5.0) & (anscombe[:Y2] .< 7.0), :]
# 2×8 DataFrames.DataFrame
# │ Row │ X1 │ X2 │ X3 │ X4 │ Y1   │ Y2   │ Y3   │ Y4   │
# ├─────┼────┼────┼────┼────┼──────┼──────┼──────┼──────┤
# │ 1   │ 6  │ 6  │ 6  │ 8  │ 7.24 │ 6.13 │ 6.08 │ 5.25 │
# │ 2   │ 5  │ 5  │ 5  │ 8  │ 5.68 │ 4.74 │ 5.73 │ 6.89 │


## -----------------------------
## 3. applying functions to columns and rows
## -----------------------------
mean(anscombe[:X2])
# 9.0

colwise(mean, anscombe)
# 8-element Array{Any,1}:
#  [9.0]
#  [9.0]
#  [9.0]
#  [9.0]
#  [7.500909090909093]
#  [7.500909090909091]
#  [7.500000000000001]
#  [7.50090909090909]

colwise(mean, anscombe[[:X1, :X2, :Y3, :Y4]])
# 4-element Array{Any,1}:
#  [9.0]
#  [9.0]
#  [7.500000000000001]
#  [7.50090909090909]

for col in eachcol(anscombe)
    println(col)
end
# (:X1,[10,8,13,9,11,14,6,4,12,7,5])
# (:X2,[10,8,13,9,11,14,6,4,12,7,5])
# (:X3,[10,8,13,9,11,14,6,4,12,7,5])
# (:X4,[8,8,8,8,8,8,8,19,8,8,8])
# (:Y1,[8.04,6.95,7.58,8.81,8.33,9.96,7.24,4.26,10.84,4.82,5.68])
# (:Y2,[9.14,8.14,8.74,8.77,9.26,8.1,6.13,3.1,9.13,7.26,4.74])
# (:Y3,[7.46,6.77,12.74,7.11,7.81,8.84,6.08,5.39,8.15,6.42,5.73])
# (:Y4,[6.58,5.76,7.71,8.84,8.47,7.04,5.25,12.5,5.56,7.91,6.89])

for col in eachcol(anscombe)
    println(typeof(col))
end
# Tuple{Symbol,DataArrays.DataArray{Int64,1}}
# Tuple{Symbol,DataArrays.DataArray{Int64,1}}
# Tuple{Symbol,DataArrays.DataArray{Int64,1}}
# Tuple{Symbol,DataArrays.DataArray{Int64,1}}
# Tuple{Symbol,DataArrays.DataArray{Float64,1}}
# Tuple{Symbol,DataArrays.DataArray{Float64,1}}
# Tuple{Symbol,DataArrays.DataArray{Float64,1}}
# Tuple{Symbol,DataArrays.DataArray{Float64,1}}


for col in eachcol(anscombe)
    println(mean(col[2]))
end
# 9.0
# 9.0
# 9.0
# 9.0
# 7.500909090909093
# 7.500909090909091
# 7.500000000000001
# 7.50090909090909


for r in eachrow(anscombe)
    println(r)
end

# DataFrameRow (row 1)
# X1  10
# X2  10
# X3  10
# X4  8
# Y1  8.04
# Y2  9.14
# Y3  7.46
# Y4  6.58

# DataFrameRow (row 2)
# X1  8
# X2  8
# X3  8
# X4  8
# Y1  6.95
# Y2  8.14
# Y3  6.77
# Y4  5.76

# DataFrameRow (row 3)
# X1  13
# X2  13
# X3  13
# X4  8
# Y1  7.58
# Y2  8.74
# Y3  12.74
# Y4  7.71

# DataFrameRow (row 4)
# X1  9
# X2  9
# X3  9
# X4  8
# Y1  8.81
# Y2  8.77
# Y3  7.11
# Y4  8.84

# DataFrameRow (row 5)
# X1  11
# X2  11
# X3  11
# X4  8
# Y1  8.33
# Y2  9.26
# Y3  7.81
# Y4  8.47

# DataFrameRow (row 6)
# X1  14
# X2  14
# X3  14
# X4  8
# Y1  9.96
# Y2  8.1
# Y3  8.84
# Y4  7.04

# DataFrameRow (row 7)
# X1  6
# X2  6
# X3  6
# X4  8
# Y1  7.24
# Y2  6.13
# Y3  6.08
# Y4  5.25

# DataFrameRow (row 8)
# X1  4
# X2  4
# X3  4
# X4  19
# Y1  4.26
# Y2  3.1
# Y3  5.39
# Y4  12.5

# DataFrameRow (row 9)
# X1  12
# X2  12
# X3  12
# X4  8
# Y1  10.84
# Y2  9.13
# Y3  8.15
# Y4  5.56

# DataFrameRow (row 10)
# X1  7
# X2  7
# X3  7
# X4  8
# Y1  4.82
# Y2  7.26
# Y3  6.42
# Y4  7.91

# DataFrameRow (row 11)
# X1  5
# X2  5
# X3  5
# X4  8
# Y1  5.68
# Y2  4.74
# Y3  5.73
# Y4  6.89

for r in eachrow(anscombe)
    println(typeof(r))
end
# DataFrames.DataFrameRow{DataFrames.DataFrame}
# DataFrames.DataFrameRow{DataFrames.DataFrame}
# DataFrames.DataFrameRow{DataFrames.DataFrame}
# DataFrames.DataFrameRow{DataFrames.DataFrame}
# DataFrames.DataFrameRow{DataFrames.DataFrame}
# DataFrames.DataFrameRow{DataFrames.DataFrame}
# DataFrames.DataFrameRow{DataFrames.DataFrame}
# DataFrames.DataFrameRow{DataFrames.DataFrame}
# DataFrames.DataFrameRow{DataFrames.DataFrame}
# DataFrames.DataFrameRow{DataFrames.DataFrame}
# DataFrames.DataFrameRow{DataFrames.DataFrame}

for row in eachrow(anscombe)
    println(mean(convert(Array, row)))
end

# 8.6525
# 7.4525
# 10.47125
# 8.56625
# 9.358749999999999
# 10.492500000000001
# 6.3375
# 7.03125
# 9.71
# 6.92625
# 5.755000000000001

describe(anscombe)
# X1
# Min      4.0
# 1st Qu.  6.5
# Median   9.0
# Mean     9.0
# 3rd Qu.  11.5
# Max      14.0
# NAs      0
# NA%      0.0%

# X2
# Min      4.0
# 1st Qu.  6.5
# Median   9.0
# Mean     9.0
# 3rd Qu.  11.5
# Max      14.0
# NAs      0
# NA%      0.0%

# X3
# Min      4.0
# 1st Qu.  6.5
# Median   9.0
# Mean     9.0
# 3rd Qu.  11.5
# Max      14.0
# NAs      0
# NA%      0.0%

# X4
# Min      8.0
# 1st Qu.  8.0
# Median   8.0
# Mean     9.0
# 3rd Qu.  8.0
# Max      19.0
# NAs      0
# NA%      0.0%

# Y1
# Min      4.26
# 1st Qu.  6.3149999999999995
# Median   7.58
# Mean     7.500909090909093
# 3rd Qu.  8.57
# Max      10.84
# NAs      0
# NA%      0.0%

# Y2
# Min      3.1
# 1st Qu.  6.695
# Median   8.14
# Mean     7.500909090909091
# 3rd Qu.  8.95
# Max      9.26
# NAs      0
# NA%      0.0%

# Y3
# Min      5.39
# 1st Qu.  6.25
# Median   7.11
# Mean     7.500000000000001
# 3rd Qu.  7.98
# Max      12.74
# NAs      0
# NA%      0.0%

# Y4
# Min      5.25
# 1st Qu.  6.17
# Median   7.04
# Mean     7.50090909090909
# 3rd Qu.  8.190000000000001
# Max      12.5
# NAs      0
# NA%      0.0%

## -----------------------------
## 4. working with dataframe
## -----------------------------
ptable = DataFrame(Number = @data([1, 2, 6, 8, 26]),
                   Name  = @data(["Hydrogen", "Helium", "Carbon", "Oxygen", "Iron"]),
                   AtomicWeight = @data([1.0079, 4.0026, 12.0107, 15.9994, 55.845]),
                   Symbol = @data(["H", "He", "C", "O", "Fe"]),
                   Discovered = @data([1776, 1895, 0, 1774, NA])
                   )
# 5×5 DataFrames.DataFrame
# │ Row │ Number │ Name       │ AtomicWeight │ Symbol │ Discovered │
# ├─────┼────────┼────────────┼──────────────┼────────┼────────────┤
# │ 1   │ 1      │ "Hydrogen" │ 1.0079       │ "H"    │ 1776       │
# │ 2   │ 2      │ "Helium"   │ 4.0026       │ "He"   │ 1895       │
# │ 3   │ 6      │ "Carbon"   │ 12.0107      │ "C"    │ 0          │
# │ 4   │ 8      │ "Oxygen"   │ 15.9994      │ "O"    │ 1774       │
# │ 5   │ 26     │ "Iron"     │ 55.845       │ "Fe"   │ NA         │

showcols(ptable)
# 5×5 DataFrames.DataFrame
# │ Col # │ Name         │ Eltype      │ Missing │
# ├───────┼──────────────┼─────────────┼─────────┤
# │ 1     │ Number       │ Int64       │ 0       │
# │ 2     │ Name         │ ASCIIString │ 0       │
# │ 3     │ AtomicWeight │ Float64     │ 0       │
# │ 4     │ Symbol       │ ASCIIString │ 0       │
# │ 5     │ Discovered   │ Int64       │ 1       │

mean(ptable[:AtomicWeight])
# 17.77312

mean(ptable[:Discovered])
# NA

nrows, ncols = size(ptable)
# for row in 1:nrows
#     for col = 1:ncols
#         if isna(ptable[row, col])
#             println("$(names(ptable)[col]) value for $(ptable[row, :Name]) is NA")
#         end
#     end
# end

for row in 1:nrows
    if isna(ptable[row, :Discovered])
        println("skipping NA value")
    else
        println("the value is $(ptable[row, :Discovered])")
    end
end

## locating index on a  specific condition
find(isna(ptable[:,:Discovered]))
# 5

ptable[find(isna(ptable[:,:Discovered])), :]
# 1×5 DataFrames.DataFrame
# │ Row │ Number │ Name   │ AtomicWeight │ Symbol │ Discovered │
# ├─────┼────────┼────────┼──────────────┼────────┼────────────┤
# │ 1   │ 26     │ "Iron" │ 55.845       │ "Fe"   │ NA         │

maximum(ptable[complete_cases(ptable), :][:Discovered])
# 1895

maximum(dropna(ptable[:Discovered]))
# 1895


## -----------------------------
## 5. modifying DataFrame
## -----------------------------
ptable[:MP] = @data([-259, -272, 3500, -218, 1535])
ptable[:BP] = @data([-253, -269, 4827, -183, 2750])

ptable[:Liquid] = map((x, y) -> y - x, ptable[:MP], ptable[:BP])
# 5×8 DataFrames.DataFrame
# │ Row │ Number │ Name       │ AtomicWeight │ Symbol │ Discovered │ MP   │ BP   │
# ├─────┼────────┼────────────┼──────────────┼────────┼────────────┼──────┼──────┤
# │ 1   │ 1      │ "Hydrogen" │ 1.0079       │ "H"    │ 1776       │ -259 │ -253 │
# │ 2   │ 2      │ "Helium"   │ 4.0026       │ "He"   │ 1895       │ -272 │ -269 │
# │ 3   │ 6      │ "Carbon"   │ 12.0107      │ "C"    │ 0          │ 3500 │ 4827 │
# │ 4   │ 8      │ "Oxygen"   │ 15.9994      │ "O"    │ 1774       │ -218 │ -183 │
# │ 5   │ 26     │ "Iron"     │ 55.845       │ "Fe"   │ NA         │ 1535 │ 2750 │

# │ Row │ Liquid │
# ├─────┼────────┤
# │ 1   │ 6      │
# │ 2   │ 3      │
# │ 3   │ 1327   │
# │ 4   │ 35     │
# │ 5   │ 1215   │

ptable[:Temp] = 1:size(ptable, 1)
ptable[:Temp] = map((x,y) -> y * x, ptable[:Liquid], ptable[:AtomicWeight])
# 5×9 DataFrames.DataFrame
# │ Row │ Number │ Name       │ AtomicWeight │ Symbol │ Discovered │ MP   │ BP   │ Liquid │ Temp    │
# ├─────┼────────┼────────────┼──────────────┼────────┼────────────┼──────┼──────┼────────┼─────────┤
# │ 1   │ 1      │ "Hydrogen" │ 1.0079       │ "H"    │ 1776       │ -259 │ -253 │ 6      │ 6.0474  │
# │ 2   │ 2      │ "Helium"   │ 4.0026       │ "He"   │ 1895       │ -272 │ -269 │ 3      │ 12.0078 │
# │ 3   │ 6      │ "Carbon"   │ 12.0107      │ "C"    │ 0          │ 3500 │ 4827 │ 1327   │ 15938.2 │
# │ 4   │ 8      │ "Oxygen"   │ 15.9994      │ "O"    │ 1774       │ -218 │ -183 │ 35     │ 559.979 │
# │ 5   │ 26     │ "Iron"     │ 55.845       │ "Fe"   │ NA         │ 1535 │ 2750 │ 1215   │ 67851.7 │

ptable[:MP_in_F] = map(deg -> 32 + (deg * 1.8), ptable[:MP])
rename!(ptable, :Temp, :Junk)
rename!(ptable, [:MP, :BP], [:Melt, :Boil])
delete!(ptable, :Junk)

# 5×9 DataFrames.DataFrame
# │ Row │ Number │ Name       │ AtomicWeight │ Symbol │ Discovered │ Melt │ Boil │ Liquid │ MP_in_F │
# ├─────┼────────┼────────────┼──────────────┼────────┼────────────┼──────┼──────┼────────┼─────────┤
# │ 1   │ 1      │ "Hydrogen" │ 1.0079       │ "H"    │ 1776       │ -259 │ -253 │ 6      │ -434.2  │
# │ 2   │ 2      │ "Helium"   │ 4.0026       │ "He"   │ 1895       │ -272 │ -269 │ 3      │ -457.6  │
# │ 3   │ 6      │ "Carbon"   │ 12.0107      │ "C"    │ 0          │ 3500 │ 4827 │ 1327   │ 6332.0  │
# │ 4   │ 8      │ "Oxygen"   │ 15.9994      │ "O"    │ 1774       │ -218 │ -183 │ 35     │ -360.4  │
# │ 5   │ 26     │ "Iron"     │ 55.845       │ "Fe"   │ NA         │ 1535 │ 2750 │ 1215   │ 2795.0  │

## -----------------------------
## 6. adding and deleting rows
## -----------------------------

push!(ptable, @data([6, "Copper", 63.546, "Cu", NA, 1083, 2567, NA, NA]))
# 6×9 DataFrames.DataFrame
# │ Row │ Number │ Name       │ AtomicWeight │ Symbol │ Discovered │ Melt │ Boil │ Liquid │ MP_in_F │
# ├─────┼────────┼────────────┼──────────────┼────────┼────────────┼──────┼──────┼────────┼─────────┤
# │ 1   │ 1      │ "Hydrogen" │ 1.0079       │ "H"    │ 1776       │ -259 │ -253 │ 6      │ -434.2  │
# │ 2   │ 2      │ "Helium"   │ 4.0026       │ "He"   │ 1895       │ -272 │ -269 │ 3      │ -457.6  │
# │ 3   │ 6      │ "Carbon"   │ 12.0107      │ "C"    │ 0          │ 3500 │ 4827 │ 1327   │ 6332.0  │
# │ 4   │ 8      │ "Oxygen"   │ 15.9994      │ "O"    │ 1774       │ -218 │ -183 │ 35     │ -360.4  │
# │ 5   │ 26     │ "Iron"     │ 55.845       │ "Fe"   │ NA         │ 1535 │ 2750 │ 1215   │ 2795.0  │
# │ 6   │ 6      │ "Copper"   │ 63.546       │ "Cu"   │ NA         │ 1083 │ 2567 │ NA     │ NA      │

ptable[[ismatch(r"Copper", elementname) for elementname in ptable[:Name]], :][:Liquid] = 2567 - 1083

##

temp = deepcopy(ptable)
deleterows!(temp, 3:5)

deleterows!(ptable, 7)

##
ptable[[(typeof(element) == NAtype) for element in ptable[:, :Liquid]], :]

## -----------------------------
## 7. subsetting and grouping
## -----------------------------
ptable[:Room] = @data([:Gas, :Gas, :Solid, :Solid, :Solid, :Solid])

groupby(ptable, [:Room])
# DataFrames.GroupedDataFrame  2 groups with keys: [:Room]
# First Group:
# 2×10 DataFrames.SubDataFrame{Array{Int64,1}}
# │ Row │ Number │ Name       │ AtomicWeight │ Symbol │ Discovered │ Melt │ Boil │ Liquid │ MP_in_F │ Room │
# ├─────┼────────┼────────────┼──────────────┼────────┼────────────┼──────┼──────┼────────┼─────────┼──────┤
# │ 1   │ 1      │ "Hydrogen" │ 1.0079       │ "H"    │ 1776       │ -259 │ -253 │ 6      │ -434.2  │ Gas  │
# │ 2   │ 2      │ "Helium"   │ 4.0026       │ "He"   │ 1895       │ -272 │ -269 │ 3      │ -457.6  │ Gas  │
# ⋮
# Last Group:
# 4×10 DataFrames.SubDataFrame{Array{Int64,1}}
# │ Row │ Number │ Name     │ AtomicWeight │ Symbol │ Discovered │ Melt │ Boil │ Liquid │ MP_in_F │ Room  │
# ├─────┼────────┼──────────┼──────────────┼────────┼────────────┼──────┼──────┼────────┼─────────┼───────┤
# │ 1   │ 6      │ "Carbon" │ 12.0107      │ "C"    │ 0          │ 3500 │ 4827 │ 1327   │ 6332.0  │ Solid │
# │ 2   │ 8      │ "Oxygen" │ 15.9994      │ "O"    │ 1774       │ -218 │ -183 │ 35     │ -360.4  │ Solid │
# │ 3   │ 26     │ "Iron"   │ 55.845       │ "Fe"   │ NA         │ 1535 │ 2750 │ 1215   │ 2795.0  │ Solid │
# │ 4   │ 6      │ "Copper" │ 63.546       │ "Cu"   │ NA         │ 1083 │ 2567 │ NA     │ NA      │ Solid │

by(ptable, [:Room], df -> mean(df[:Melt]))
# 2×2 DataFrames.DataFrame
# │ Row │ Room  │ x1     │
# ├─────┼───────┼────────┤
# │ 1   │ Gas   │ -265.5 │
# │ 2   │ Solid │ 1475.0 │
by(ptable, :Room, size)
by(ptable, :Room) do df
    DataFrame(m = mean(df[:Melt]), b = mean(df[:Boil]))
end
# 2×3 DataFrames.DataFrame
# │ Row │ Room  │ m      │ b       │
# ├─────┼───────┼────────┼─────────┤
# │ 1   │ Gas   │ -265.5 │ -261.0  │
# │ 2   │ Solid │ 1475.0 │ 2490.25 │

##++++++++++++++++++++++++++++++++++++++++++++++++++
iris = dataset("datasets", "iris")

by(iris, :Species, size)
by(iris, :Species, df -> mean(df[:PetalLength]))
by(iris, :Species, df -> DataFrame(N = size(df, 1)))

by(iris, :Species) do df
    DataFrame(m = mean(df[:PetalLength]), s² = var(df[:PetalLength]))
end
# 3×3 DataFrames.DataFrame
# │ Row │ Species      │ m     │ s²        │
# ├─────┼──────────────┼───────┼───────────┤
# │ 1   │ "setosa"     │ 1.462 │ 0.0301592 │
# │ 2   │ "versicolor" │ 4.26  │ 0.220816  │
# │ 3   │ "virginica"  │ 5.552 │ 0.304588  │

aggregate(iris, :Species, [mean, sum])

##++++++++++++++++++++++++++++++++++++++++++++++++++

## -----------------------------
## x. joining DataFrames
## -----------------------------

names = DataFrame(ID = [1, 2],
                  Name = ["John Doe", "Jane Doe"])

jobs = DataFrame(ID = [1, 2],
                 Job = ["Lawyer", "Doctor"])

a = DataFrame(ID = [1, 2], Name = ["A", "B"])
b = DataFrame(ID = [1, 3], Job = ["Doctor", "Lawyer"])
join(a, b, on = :ID, kind = :inner)
join(a, b, on = :ID, kind = :left)
join(a, b, on = :ID, kind = :right)
join(a, b, on = :ID, kind = :outer)
join(a, b, on = :ID, kind = :semi)
join(a, b, on = :ID, kind = :anti)
join(a, b, kind = :cross)
