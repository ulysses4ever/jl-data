# =============================================================================
# samp02.jl - sample 02
# data frame operation
# Copyright(C). masaru.nakagawa 2017. All rights reserved.
# =============================================================================
using DataFrames
using StatsBase
using Distributions
using ScikitLearn
using DecisionTree
using Regression
using GLM
using Clustering
# using PyPlot
using Gadfly

using RDatasets


diam = dataset("ggplot2", "diamonds")

diam |> showcols

df = diam[1:100, 5:10]


# http://stackoverflow.com/questions/37668312/transpose-of-julia-dataframe

df[:id] = 1:size(df, 1)


df_new = unstack(df1, :variable, :id, :value)


res = Array{Float64}

for r in eachrow(df_new[2:101])
    tmp = convert(Array, r) / sum(convert(Array, r))
    println(vec(tmp))
    res = vcat(res, tmp)
end

aa = [vcat(convert(Array, r) / sum(convert(Array, r))) for r in eachrow(df_new[2:101])]


# convert(Array{Float64, 2}, p)
# 
# You might have used a 2d row vector where a 1d column vector was required.
# Note the difference between 1d column vector [1,2,3] and 2d row vector [1 2 3].
# You can convert to a column vector with the vec() function.
# This may have arisen from a call to the constructor Array{Float64,1}(...),
# since type constructors fall back to convert methods.
