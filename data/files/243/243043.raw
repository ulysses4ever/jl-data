###
#  Perform binary Ideal Adsorbed Solution Theory
#  Author: CoryMSimon@gmail.om
###


using Optim
using Gadfly
using DataFrames
using Roots
using Grid
include("trapz.jl")  # for trapezoid rule
include("isotherms.jl")  # include isotherm models

###
#   Perform IAST
###
function IAST(p::Array{Float64}, 
              isotherm1::Union(LangmuirIsotherm, QuadraticIsotherm, InterpolatorIsotherm), 
              isotherm2::Union(LangmuirIsotherm,QuadraticIsotherm, InterpolatorIsotherm); 
              verboseflag::Bool=false)
    """
    Perform IAST for a mixture at partial fugacties p[1] and p[2].

    returns array of component loadings
    """
    @assert length(p) == 2  # only supports single mixture at a time.

    # solve for mole fractions in adsorbed phase s.t. spreading pressures are equal
    f(x1) = isotherm1.Π(p[1] / x1) - isotherm2.Π(p[2] / (1 - x1))  # want to be zero
    x1 = fzero(f, [0.00001,0.9999])
 #     x1 = fzero(f, 0.5)
    if (x1 <= 0.00001) | (x1 >= 0.9999)
        error(@sprintf("x1 = %f, too close to pure component in material\n", x1))
    end

    # mole fraction in adsorbed phase
    x = [x1, 1 - x1] 

    p0 = p ./ x

    # solve for the total gas adsorbed
    q_total = 1.0 / (x[1] / isotherm1.loading(p0[1]) + x[2] / isotherm2.loading(p0[2]))
    
    # get loading of each component by multiplying by mole fractions
    q = x * q_total
    if (verboseflag == true) 
        # print off loadings according to IAST and corresponding pure component loadings
        for i = 1:2
            @printf("IAST loading of component %d at p_%d = %f: %f\n", i, i, p[i], q[i])
            @printf("\tx_%d = %f\n", i, x[i])
            if i == 1
                @printf("\tSpreading pressure = %f\n", isotherm1.Π(p0[i]))
                @printf("\tPure component loading at p_%s = %f: %f\n", i, p[i], 
                                        isotherm1.loading(p[i]))
            end
            if i == 2
                @printf("\tSpreading pressure = %f\n", isotherm2.Π(p0[i]))
                @printf("\tPure component loading at p_%s = %f: %f\n", i, p[i], 
                                        isotherm2.loading(p[i]))
            end
        end
    end

    return q  # loadings [component 1, component 2]. same units as in data
end

function plot_pure_component_isotherms_and_fits(
                                 isotherm1::Union(LangmuirIsotherm, QuadraticIsotherm, InterpolatorIsotherm),
                                 isotherm2::Union(LangmuirIsotherm, QuadraticIsotherm, InterpolatorIsotherm);
                                 component_names=["Component 1", "Component 2"],
                                 plot_title::String="Pure component isotherms",
                                 pressure_units::String="",
                                 loading_units::String="")
    """
    Plot both pure component isotherms and their fits (log scale)
    """
    # plot prediction over range P
    min_P = min(minimum(isotherm1.data[isotherm1.pressure_key]), 
                minimum(isotherm2.data[isotherm2.pressure_key]))
    max_P = max(maximum(isotherm1.data[isotherm1.pressure_key]), 
                maximum(isotherm2.data[isotherm2.pressure_key]))
    P  = logspace(log(min_P), log(max_P))
    
    # get predicted loadings
    predictedloading1 = isotherm1.loading(P)
    predictedloading2 = isotherm2.loading(P)
    
    fit = plot(
        layer(x=P, y=predictedloading1, Geom.line, Theme(default_color=color("red"))),  
        layer(x=isotherm1.data[isotherm1.pressure_key], y=isotherm1.data[isotherm1.loading_key], Geom.point, Theme(default_color=color("red"))), 
        layer(x=P, y=predictedloading2, Geom.line, Theme(default_color=color("blue"))),  
        layer(x=isotherm2.data[isotherm2.pressure_key], y=isotherm2.data[isotherm2.loading_key], Geom.point, Theme(default_color=color("blue"))), 
        Scale.x_log10,
        Guide.xlabel(@sprintf("Pressure (%s)", pressure_units)),
        Guide.ylabel(@sprintf("Loading (%s)", loading_units)),
        Guide.title(plot_title),
        Guide.manual_color_key("Component", 
            component_names,
            ["red", "blue"])
    )
    draw(PNG(6inch, 3inch), fit) 
end

function plot_selectivity_vs_molfraction(P_total::Float64,
                                 isotherm1::Union(LangmuirIsotherm, QuadraticIsotherm, InterpolatorIsotherm),
                                 isotherm2::Union(LangmuirIsotherm, QuadraticIsotherm, InterpolatorIsotherm);
                                 y1_range::Array{Float64}=[0.01,0.99],
                                 component_names=["Component 1", "Component 2"],
                                 pressure_units::String="")
    """
    Plot selectivity against mole fraction of first component at total pressure P_total using IAST
    """
    y1 = linspace(y1_range[1], y1_range[2], 20)  # mole fraction component 1 in gas phase
    selectivity = zeros(length(y1))
    for i = 1:length(y1)
        # compute IAST loading at this condition
        q = IAST(P_total * [y1[i], 1 - y1[i]], isotherm1, isotherm2)
        selectivity[i] = (q[1] / q[2]) / (y1[i] / (1 - y1[i]))
    end

    # plot selectivity against mole fraction in gas phase
    fit = plot(x=y1, y=selectivity, Geom.point, Geom.line,
                Guide.xlabel(@sprintf("Mole fraction %s", component_names[1])),
                Guide.ylabel(@sprintf("Selectivity %s/%s", component_names[1], component_names[2])),
                Guide.title(@sprintf("Total pressure %f %s", P_total, pressure_units))
          )
    draw(PNG(6inch, 3inch), fit)
end

function plot_component_loadings_vs_total_pressure(total_pressures::Array{Float64},
                                 isotherm1::Union(LangmuirIsotherm, QuadraticIsotherm, InterpolatorIsotherm),
                                 isotherm2::Union(LangmuirIsotherm, QuadraticIsotherm, InterpolatorIsotherm),
                                 y::Array{Float64};
                                 component_names=["Component 1", "Component 2"],
                                 pressure_units::String="",
                                 loading_units::String="")
    """
    Plot component loadings vs. total pressure for a fixed mole fraction in the gas phase (y)
    """
    np = length(total_pressures)
    q = zeros(2, np)
    for i = 1:np
        q[:, i] = IAST(total_pressures[i] * y, isotherm1, isotherm2)
    end
    
    # plot 
    fit = plot(
                layer(x=total_pressures, y=q[1,:], Geom.line, Geom.point, Theme(default_color=color("red"))),  
                layer(x=total_pressures, y=q[2,:], Geom.line, Geom.point, Theme(default_color=color("blue"))),  
                Guide.xlabel(@sprintf("Total pressure (%s)", pressure_units)),
                Guide.ylabel(@sprintf("Component loading (%s)", loading_units)),
                Guide.title(@sprintf("y_%s = %f, y_%s = %f", component_names[1], y[1], component_names[2], y[2])),
                Guide.manual_color_key("Component", 
                    component_names,
                    ["red", "blue"])
          )
    draw(PNG(6inch, 3inch), fit)
end
