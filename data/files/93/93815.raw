# Players properties structure
type Player{N,UF}
  name::String 
  nodes::Array{N,1} 
  utilityfunctions::Array{UF,1}
end

# Nodes properties structure
type Node{M}
  name::String
  timeposistion::Int
  moves::Array{M,1}
end

# Moves properties structure
type Move{R,V}
  name::String
  length::Int
  childnodeindex::Nullable{Int}
  childnodeplayerindex::Nullable{Int}
  payoffset::Dict{R,V}
end

# Environment variables
allplayers = Player{Node,Int}[]																# All the players in a specified game.
playerexaminesplayers = Dict{Player, Dict{Player, Bool}}() 		# The boolean value of whether or not a player recognizes each player in the game.
playerexaminesnodes = Dict{Player, Dict{Node, Bool}}() 				# The boolean value of whether or not a player recognizes each node in the game.
playerexaminesmoves = Dict{Player, Dict{Move, Bool}}() 				# The boolean value of whether or not a player recognizes each move in the game.

# add a player 
function addplayer(name::Nullable{String})
	newplayerindex = length(allplayers) + 1
	push!(allplayers, Player{Node,Int}(get(name,string("Player",newplayerindex)),Node{Move{Int,Int}}[],Int[]))
	newplayer = allplayers[newplayerindex]
	playerexaminesplayers[newplayer] = Dict(newplayer=>1)
	for player in allplayers
		for node in player.nodes
			for move in node.moves
				try
					playerexaminesmoves[newplayer][move] = 1 
				catch 
					playerexaminesmoves[newplayer] = Dict(move=>1)
				end
			end
			try 
				playerexaminesnodes[newplayer][node] = 1
			catch
				playerexaminesnodes[newplayer] = Dict(node=>1)
			end
		end
		playerexaminesplayers[player][newplayer] = 1 
		playerexaminesplayers[newplayer][player] = 1
	end
end

# add root node for a specified player based on its index
function addrootnode(nodeplayerindex::Int)
	name::String = "PX:N1"
	if length(allplayers[nodeplayerindex].nodes) == 0
		name = string("P",nodeplayerindex,":N1")
		push!(allplayers[nodeplayerindex].nodes, Node{Move}(name,0,Move{Int,Int}[]))
		newnode = allplayers[nodeplayerindex].nodes[1]
		for player in allplayers
			try 
				playerexaminesnodes[player][newnode] = 1 
			catch
				playerexaminesnodes[player] = Dict(newnode=>1)
			end
		end
	else
		newnodeindex = length(allplayers[nodeplayerindex].nodes) + 1 
		name = string("P",nodeplayerindex,":N",newnodeindex)
		push!(allplayers[nodeplayerindex].nodes, Node{Move}(name,0,Move{Int,Int}[]))
		newnode = allplayers[nodeplayerindex].nodes[newnodeindex]
		for player in allplayers
			playerexaminesnodes[player][newnode] = 1	
		end
	end
end

function addnodetomove(nodeplayerindex::Int, moveplayerindex::Int, movenodeindex::Int, moveindex::Int)
	name::String = "PX:N1"
	if length(allplayers[nodeplayerindex].nodes) == 0
		name = string("P",nodeplayerindex,":N1")
		push!(allplayers[nodeplayerindex].nodes, Node{Move}(name,0,Move{Int,Int}[]))
		newnode = allplayers[nodeplayerindex].nodes[1]
		for player in allplayers
			try 
				playerexaminesnodes[player][newnode]= 1 
			catch
				playerexaminesnodes[player] = Dict(newnode=>1)
			end
		end
		allplayers[moveplayerindex].nodes[movenodeindex].moves[moveindex].childnode = newnode
	else
		newnodeindex = length(allplayers[nodeplayerindex].nodes) + 1 
		name = string("P",nodeplayerindex,":N",newnodeindex)
		push!(allplayers[nodeplayerindex].nodes, Node{Move}(name,0,Move{Int,Int}[]))
		newnode = allplayers[nodeplayerindex].nodes[newnodeindex]
		for player in allplayers
			playerexaminesnodes[player][newnode] = 1	
		end
		allplayers[moveplayerindex].nodes[movenodeindex].moves[moveindex].childnode = newnode
	end
end

# add a move to a node
function addmove(moveplayerindex::Int,movenodeindex::Int)
	name::String = "PX:NX:M1"
	if length(allplayers[moveplayerindex].nodes[movenodeindex].moves) == 0
		name = string("P",moveplayerindex,":N",movenodeindex,":M1")
		push!(allplayers[moveplayerindex].nodes[movenodeindex].moves, Move{Int,Int}(name,nothing,nothing,Dict()))
		newmove = allplayers[moveplayerindex].nodes[movenodeindex].moves[1]
		for player in allplayers
			try 
				playerexaminesmoves[player][newmove] = 1
			catch 
				playerexaminesmoves[player] = Dict(newmove=>1)
			end
		end
	else 
		newmoveindex = length(allplayers[moveplayerindex].nodes[movenodeindex].moves) + 1
		name = string("P",moveplayerindex,":N",movenodeindex,":M",newmoveindex)
		push!(allplayers[moveplayerindex].nodes[movenodeindex].moves, Move{Int,Int}(name,nothing,nothing,Dict()))
		newmove = allplayers[moveplayerindex].nodes[movenodeindex].moves[newmoveindex]
		for player in allplayers
			playerexaminesmoves[player][newmove] = 1
		end
	end
end

#delete a player based on its index
function deleteplayer(playerindex::Int)
	deletedplayer = allplayers[playerindex]
	for player in allplayers
		for node in deletedplayer.nodes
			for move in node.moves
				delete!(playerexaminesmoves[player], move)
			end
			delete!(playerexaminesnodes[player], node)
		end
		delete!(playerexaminesplayers[player], deletedplayer)
	end
	delete!(playerexaminesplayers, deletedplayer)
	delete!(playerexaminesnodes, deletedplayer)
	delete!(playerexaminesmoves, deletedplayer)
	splice!(allplayers,playerindex)
end

function deletenode(nodeplayerindex::Int, nodeindex::Int)
	deletednode = allplayers[nodeplayerindex].nodes[nodeindex]
	for player in allplayers
		for move in deletednode.moves
			deletemove(move)
		end
		delete!(playerexaminesnodes[player], deletednode)
	end
	splice!(allplayers[nodeplayerindex].nodes, nodeindex)
end

function deletemove(moveplayerindex::Int, movenodeindex::Int, moveindex::Int)
	deletedmove = allplayers[moveplayerindex].nodes[movenodeindex].moves[moveindex]
	for player in allplayers
		delete!(playerexaminesmoves[player] ,deletedmove)
	end
	splice!(allplayers[moveplayerindex].nodes[movenodeindex].moves,moveindex)
end

function deletenode(deletednode::Node)
	for player in allplayers
		for move in deletednode.moves
			deletemove(move)
		end
		delete!(playerexaminesnodes[player], deletednode)
	end
end

function deletemove(deletedmove::Move)
	for player in allplayers
		if deletedmove.childnode != nothing
			deletenode(deletedmove.childnode)
		end
		delete!(playerexaminesmoves[player], deletedmove)
	end
end

function showplayers()
	for player in allplayers
		println(player.name)
	end
end

function shownodes()
	for player in allplayers
		for node in player.nodes
			println(node.name)
		end
	end
end

function showmoves()
	for player in allplayers
		for node in player.nodes
			for move in node.moves
				println(move.name)
			end
		end
	end
end

addplayer()
addplayer()
addrootnode(1)
addmove(1,1)
addmove(1,1)
