# Players properties structure
type Player{N,UF}
  id::Int
  nid::Int
  index::Int
  name::String
  nodes::Array{N,1}
  examines::Dict{Int,Bool}
  utilityfunctions::Array{UF,1}
end

# Nodes properties structure
type Node{P,M}
  id::Int
  mid::Int
  index::Int
  name::String
  parentplayerindex::Int
  parentmoveindex::Nullable{Int}
  timeposistion::Int
  examinedby::Dict{P,Bool}
  moves::Array{M,1}
end

# Moves properties structure
type Move{P,N,R,V}
  id::Int
  index::Int
  name::String
  length::Int
  parentnodeindex::Int
  parentplayerindex::Int
  examinedby::Dict{P,Bool}
  payoffset::Dict{R,V}
end

allplayers = Player{Node, Int}[]
pid = 1


# add a player 
function addplayer()
	if length(allplayers) == 0 
		push!(allplayers, Player{Node, Int}(1, "Player 1", Node{Player, Move}[], Dict{Int, Bool}(), Int[]))
	else
		x = length(allplayers) + 1
		name::String = string("Player ",x)
		push!(allplayers, Player{Node, Int}(x, name, Node{Player, Move}[], Dict{Int, Bool}(), Int[]))
	end
end

# add a player with specified name
function addplayer(name::String)
	if length(allplayers) == 0 
		push!(allplayers, Player{Node, Int}(1, name, Node{Player, Move}[], Dict{Int, Bool}(), Int[]))
	else
		x = length(allplayers) + 1
		push!(allplayers, Player{Node, Int}(x, name, Node{Player, Move}[], Dict{Int, Bool}(), Int[]))
	end
end

# add root node for a specified player index
function addnode(pindex::Int)
	name::String = ""
	if length(allplayers[pindex].nodes) == 0
		name = string("P",pindex,":N1")
		push!(allplayers[pindex].nodes, Node{Player,Move}(1, name, pindex, nothing, 0, Dict{Player, Bool}(), Move{Player, Node, Int, Int}[]))
	else
		x = length(allplayers[pindex].nodes) + 1 
		name = string("P",pindex,":N",x)
		push!(allplayers[pindex].nodes, Node{Player,Move}(x, name, pindex, nothing, 0, Dict{Player, Bool}(), Move{Player, Node, Int, Int}[]))
	end
end

# add root node for a specified player index with a given name
function addnode(pindex::Int, name::String)
	if length(allplayers[pindex].nodes) == 0
		push!(allplayers[pindex].nodes, Node{Player,Move{Player, Node, Int, Int}}(1, name, pindex, nothing, 0, Dict{Player, Bool}(), Move{Player, Node, Int, Int}[]))
	else
		x = length(allplayers[pindex].nodes) + 1 
		push!(allplayers[pindex].nodes, Node{Player,Move{Player, Node, Int, Int}}(x, name, pindex, nothing, 0, Dict{Player, Bool}(), Move{Player, Node, Int, Int}[]))
	end
end

function delete(pindex::Int)
	splice!(allplayers,pindex)
	x::Int = 1 
	for p in allplayers
		p.index = x
		if p.index >= pindex 
			for n in p.nodes
				for m in n.moves
					m.parentplayerindex = x
				end
				n.parentplayerindex = x
			end
		end
		x=x+1
	end
end

addplayer()
addplayer()
addplayer()
addplayer()
addplayer()
addnode(3)
addnode(3)
addnode(3)
addnode(2)
addnode(2)
addnode(2)
addnode(2)
delete(2)
