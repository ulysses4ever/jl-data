module RAD

using Calculus
import Base.Meta.isexpr

include("compiletimetypes.jl")
include("flatten.jl")          #not yet written: unpack Exprs into lists of simple expressions
include("encode.jl")            #mark up AST and return dict of active symbols
include("grad.jl")              #all reverse sweep except d_assign_call(*) functions
include("gradient_rules.jl")    #d_assign_call(*)
include("decode.jl")            #generate "function evaluation" code, saving values of overwritten vars appropriately
include("cleanup.jl")           #anything we want to do to the generated gradient code goes here

export WRT, Seed, @autodiff, autodiffExpr, fungrad, SymDict
       #flatten, encode!, decode!, grad,
       #sym, dsym, SymDict,
       #ASymbol, ARef, ATrans


##### run-time types
immutable WRT{T}
    val::T
end

immutable Seed{T}
    dval::T
end

### main function and macro calls
function fungrad(wrtList::Array, f::Expr)
    #fungrad: return Expr for method of f which returns
    #function value and derivatives w/r/t symbols in WRTlist
    s = SymDict()
    for arg in wrtList; activate!(s,arg); end
    f_flat = flatten(f)
    f_encoded=encode!(f_flat,s)
    fg = gradient(f_encoded,s)[1]
    fg_clean = cleanup(fg)
    fg_clean
end


function autodiffExpr(wrts::Expr, f::Expr)
    @assert wrts.head == :tuple
    @assert all(x->isa(x,Symbol),wrts.args)
    b_out = Expr(:block)
    push!(b_out.args,f)
    for nn=1:length(wrts.args)
        for wrtList in combinations(wrts.args,nn)
            push!(b_out.args,fungrad(wrtList,f))
        end
    end
    b_out
end

macro autodiff(wrts::Expr,f::Expr)
    esc(autodiffExpr(wrts,f))
end

end # module
