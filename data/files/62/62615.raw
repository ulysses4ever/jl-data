# This file autogenerated through https://github.com/timholy/SnoopCompile.jl.  Precompile every day!
function _precompile_()
    ccall(:jl_generating_output, Cint, ()) == 1 || return nothing
    precompile(Nettle.DecryptionAlgorithm, (ASCIIString, Array{UInt8, 1},))
    precompile(Nettle.HMACAlgorithm, (ASCIIString, Array{UInt8, 1},))
    precompile(Nettle.call, (Type{Nettle.NettleCipherType}, Nettle.NettleCipher,))
    precompile(Nettle.EncryptionAlgorithm, (ASCIIString, Array{UInt8, 1},))
    precompile(Nettle.call, (Type{Nettle.NettleHashType}, Nettle.NettleHash, Ptr{Void},))
    precompile(Nettle.HMACAlgorithm, (ASCIIString, ASCIIString,))
    precompile(Nettle.HashAlgorithm, (ASCIIString,))
    precompile(Nettle.decrypt!, (Nettle.NettleDecryptionState, Array{UInt8, 1}, Array{UInt8, 1},))
    precompile(Nettle.call, (Type{Nettle.NettleHashType}, ASCIIString, UInt32, UInt32, UInt32, Ptr{Void}, Ptr{Void}, Ptr{Void}, Ptr{Void},))
    precompile(Nettle.encrypt!, (Nettle.NettleEncryptionState, Array{UInt8, 1}, Array{UInt8, 1},))
    precompile(Nettle.get_cipher_types, ())
    precompile(Nettle.digest!, (Nettle.NettleHMACState,))
    precompile(Nettle.get_hash_types, ())
    precompile(Nettle.digest!, (Nettle.NettleHashState,))
    precompile(Nettle.call, (Type{Nettle.NettleCipherType}, ASCIIString, UInt32, UInt32, UInt32, Ptr{Void}, Ptr{Void}, Ptr{Void}, Ptr{Void},))
    precompile(Nettle.get_libnettle_version, ())
    precompile(Nettle.update!, (Nettle.NettleHashState, ASCIIString,))
    precompile(Nettle.update!, (Nettle.NettleHMACState, Array{UInt8, 1},))
    precompile(Nettle.update!, (Nettle.NettleHMACState, ASCIIString,))
    precompile(Nettle.decrypt, (ASCIIString, Array{UInt8, 1}, Array{UInt8, 1},))
    precompile(Nettle.encrypt, (ASCIIString, Array{UInt8, 1}, Array{UInt8, 1},))
    precompile(Nettle.hmac, (ASCIIString, Array{UInt8, 1}, ASCIIString,))
    precompile(Nettle.hexdigest!, (Nettle.NettleHashState,))
    precompile(Nettle.hmac, (ASCIIString, Array{UInt8, 1}, Array{UInt8, 1},))
    precompile(Nettle.hmac, (ASCIIString, ASCIIString, ASCIIString,))
    precompile(Nettle.hash!, (ASCIIString, ASCIIString,))
    precompile(Nettle.call, (Type{Nettle.NettleHashType}, ASCIIString, UInt32, UInt32, UInt32, Ptr{Void}, Ptr{Void}, Ptr{Void}, Ptr{Void},))
    precompile(Nettle.__init__, ())
end
