function _precompile_()
    ccall(:jl_generating_output, Cint, ()) == 1 || return nothing
    precompile(PimpMyREPL.Passes.SyntaxHighlighter.SyntaxHighlighterSettings, (PimpMyREPL.Passes.SyntaxHighlighter.SyntaxHighlighterSettings, Array{PimpMyREPL.ANSICodes.ANSIToken, 1}, Array{Tokenize.Tokens.Token, 1}, Int64,))
    precompile(PimpMyREPL.ANSICodes.maybe_print, (Base.AbstractIOBuffer{Array{UInt8, 1}}, Bool, PimpMyREPL.ANSICodes.ANSIValue, Bool, Bool,))
    precompile(PimpMyREPL.test_passes, (Base.AbstractIOBuffer{Array{UInt8, 1}}, PimpMyREPL.PassHandler, String, Int64, Bool,))
    precompile(PimpMyREPL.add_pass!, (PimpMyREPL.PassHandler, String, PimpMyREPL.Passes.SyntaxHighlighter.SyntaxHighlighterSettings, Bool,))
    precompile(PimpMyREPL._find_pass, (PimpMyREPL.PassHandler, String,))
    precompile(PimpMyREPL.add_pass!, (PimpMyREPL.PassHandler, String, PimpMyREPL.Passes.BracketHighlighter.BracketHighlighterSettings, Bool,))
    precompile(PimpMyREPL.Passes.BracketHighlighter.bracket_match, (Array{Tokenize.Tokens.Token, 1}, Int64,))
    precompile(PimpMyREPL.ANSICodes.update!, (PimpMyREPL.ANSICodes.ANSIToken, PimpMyREPL.ANSICodes.ANSIToken,))
    precompile(PimpMyREPL.ANSICodes.Type, (Type{PimpMyREPL.ANSICodes.ANSIValue}, Int64,))
    precompile(PimpMyREPL.untokenize_with_ANSI, (Base.AbstractIOBuffer{Array{UInt8, 1}}, Array{PimpMyREPL.ANSICodes.ANSIToken, 1}, Array{Tokenize.Tokens.Token, 1},))
    precompile(PimpMyREPL.ANSICodes.Type, (Type{PimpMyREPL.ANSICodes.ANSIValue}, Symbol, Symbol,))
    precompile(PimpMyREPL.test_pass, (Base.AbstractIOBuffer{Array{UInt8, 1}}, Function, String,))
    precompile(PimpMyREPL.ANSICodes.Type, (Type{PimpMyREPL.ANSICodes.ANSIValue}, Int64,))
    precompile(PimpMyREPL.apply_passes!, (PimpMyREPL.PassHandler, Array{Tokenize.Tokens.Token, 1}, Int64, Bool,))
    precompile(PimpMyREPL.add_pass!, (PimpMyREPL.PassHandler, String, Function, Bool,))
    precompile(PimpMyREPL.test_pass, (Base.AbstractIOBuffer{Array{UInt8, 1}}, PimpMyREPL.Passes.BracketHighlighter.BracketHighlighterSettings, String, Int64, Bool,))
    precompile(PimpMyREPL.test_pass, (Base.AbstractIOBuffer{Array{UInt8, 1}}, PimpMyREPL.Passes.SyntaxHighlighter.SyntaxHighlighterSettings, String, Int64, Bool,))
    precompile(PimpMyREPL.ANSICodes._print, (Base.AbstractIOBuffer{Array{UInt8, 1}}, PimpMyREPL.ANSICodes.ANSIToken, Bool,))
    precompile(PimpMyREPL._check_pass_name, (PimpMyREPL.PassHandler, String, Bool,))
    precompile(PimpMyREPL.Passes.BracketHighlighter.BracketHighlighterSettings, (PimpMyREPL.Passes.BracketHighlighter.BracketHighlighterSettings, Array{PimpMyREPL.ANSICodes.ANSIToken, 1}, Array{Tokenize.Tokens.Token, 1}, Int64,))
    precompile(PimpMyREPL.test_pass, (Base.AbstractIOBuffer{Array{UInt8, 1}}, Function, String, Int64, Bool,))
    precompile(PimpMyREPL.test_passes, (Base.AbstractIOBuffer{Array{UInt8, 1}}, PimpMyREPL.PassHandler, String, Int64,))
    precompile(PimpMyREPL.test_pass, (Base.AbstractIOBuffer{Array{UInt8, 1}}, PimpMyREPL.Passes.SyntaxHighlighter.SyntaxHighlighterSettings, String,))
    precompile(PimpMyREPL.test_pass, (Base.AbstractIOBuffer{Array{UInt8, 1}}, PimpMyREPL.Passes.BracketHighlighter.BracketHighlighterSettings, String, Int64,))
    precompile(PimpMyREPL.Prompt.rewrite_with_ANSI, (Base.LineEdit.PrefixSearchState, Bool))
    precompile(PimpMyREPL.Prompt.rewrite_with_ANSI, (Base.LineEdit.MIState, Bool))
    precompile(PimpMyREPL.Prompt.rewrite_with_ANSI, (Base.LineEdit.PromptState, Bool))
    end
