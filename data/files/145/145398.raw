export frank_matrix_eval

function frank_matrix(dim::Integer)
  mat = ones(Float64,dim,dim)
  for i in 1:(dim-1)
    for j in 1:i
      mat[i,j] = dim-i+1
    end
    for j in (i+1):(dim-1)
      mat[i,j] = dim-j+1
    end
  end
  return mat
end

function multiple_frank(vec::Vector)
  dim = length(vec)
  ret = zeros(Float64, dim)
  for i in 1:dim
    for j in 1:i
      ret[i] += (dim-i+1)*vec[j]
    end
    for j in (i+1):dim
      ret[i] += (dim-j+1)*vec[j]
    end
  end
  return ret
end

function frank_matrix_eigval(dim::Integer, nth_highest::Integer)
  1/(2(1-cos(pi * (2nth_highest-1) / (2dim+1))))
end

function test_multiple_frank(dim::Integer)
  mat = frank_matrix(dim)
  vec = rand(dim)
  ret1 = mat*vec
  ret2 = multiple_frank(vec)
  for i in 1:dim
    Test.@test_approx_eq_eps ret1[i] ret2[i] 1.0e-10
  end
end

function test_frank_matrix_eigval(dim::Integer)
  fmat = frank_matrix(dim)
  evals = sort(eigvals(fmat), rev=true)
  for k in 1:dim
    Test.@test_approx_eq_eps evals[k] frank_matrix_eigval(dim,k) 1.0e-10
  end
end
