#################################################################
#
#    Main file of MCMC.jl module
#
#################################################################

module MCMC

using DataFrames

import Base.*, Base.show
export show, *
export MCMCTask, MCMCChain, MCMCLikModel, MCMCSampler, MCMCTuner, MCMCRunner

# Abstract types
abstract Model
abstract MCMCModel <: Model

abstract MCMCSampler
abstract MCMCTuner

abstract MCMCRunner

###########  Models  ##########
include("modellers/mcmcmodels.jl")		
include("modellers/likmodel.jl")

###########  Autodiff  ##########
include("autodiff/parsing.jl")     #  include model expression parsing function
include("autodiff/diff.jl")        #  include derivatives definitions
include("autodiff/distributions.jl")    #  include distributions definitions

### MCMCTask type, generated by combining a MCMCModel, a MCMCSampler and a MCMCRunner
type MCMCTask
  task::Task
  model::MCMCModel
  sampler::MCMCSampler
  runner::MCMCRunner
end
reset(t::MCMCTask, x) = t.task.storage[:reset](x)

#############  samplers  ########################
include("samplers/samplers.jl")  # Common definitions for samplers
include("samplers/RWM.jl")    # Random-walk Metropolis sampler
include("samplers/RAM.jl")    # Robust adaptive Metropolis sampler
include("samplers/MALA.jl")   # Metropolis adjusted Langevin algorithm sampler
include("samplers/HMC.jl")    # Hamiltonian Monte-Carlo sampler
include("samplers/HMCDA.jl")    # Adaptive Hamiltonian Monte-Carlo sampler with dual averaging
include("samplers/NUTS.jl")   # No U-Turn Hamiltonian Monte-Carlo sampler
include("samplers/SMMALA.jl") # Simplified manifold Metropolis adjusted Langevin algorithm sampler
# include("samplers/MMALA.jl")  # Manifold Metropolis adjusted Langevin algorithm sampler (deprecated)
include("samplers/PMALA.jl")  # Position-dependent Metropolis adjusted Langevin algorithm sampler
include("samplers/RMHMC.jl")  # Riemannian manifold Hamiltonian Monte Carlo sampler

### MCMCChain, the result of running a MCMCTask
type MCMCChain
  range::Range{Int}
  samples::DataFrame
  gradients::DataFrame
  diagnostics::DataFrame
  task::Union(MCMCTask, Array{MCMCTask})
  runTime::Float64
   
  function MCMCChain(	r::Range{Int}, s::DataFrame, g::DataFrame, d::DataFrame, 
  						t::Union(MCMCTask, Array{MCMCTask}), rt::Float64)
    if !isempty(g); assert(size(s) == size(g), "samples and gradients must have the same number of rows and columns"); end
    if !isempty(d); assert(nrow(s) == nrow(d), "samples and diagnostics must have the same number of rows"); end
    new(r, s, g, d, t, rt)
  end
end

MCMCChain(r::Range{Int}, s::DataFrame, d::DataFrame, t::Union(MCMCTask, Array{MCMCTask}), rt::Float64) = 
	MCMCChain(r, s, DataFrame(), d, t, rt)
MCMCChain(r::Range{Int}, s::DataFrame, t::Union(MCMCTask, Array{MCMCTask}), rt::Float64) = 
	MCMCChain(r, s, DataFrame(), DataFrame(), t, rt)
MCMCChain(r::Range{Int}, s::DataFrame, d::DataFrame, t::Union(MCMCTask, Array{MCMCTask})) = 
	MCMCChain(r, s, DataFrame(), d, t, NaN)
MCMCChain(r::Range{Int}, s::DataFrame, t::Union(MCMCTask, Array{MCMCTask})) = 
	MCMCChain(r, s, DataFrame(), DataFrame(), t, NaN)

function show(io::IO, res::MCMCChain)
  println("$(ncol(res.samples)) parameters, $(nrow(res.samples)) samples (per parameter), $(round(res.runTime, 1)) sec.")
end

#  Definition of * as a shortcut operator for (model, sampler, runner) combination
*{M<:MCMCModel, S<:MCMCSampler, R<:MCMCRunner}(m::M, s::S, r::R) = spinTask(m, s, r)
*{M<:MCMCModel, S<:MCMCSampler, R<:MCMCRunner}(m::Array{M}, s::S, r::R) = map((me) -> spinTask(me, s, r), m)
*{M<:MCMCModel, S<:MCMCSampler, R<:MCMCRunner}(m::M, s::Array{S}, r::R) = map((se) -> spinTask(m, se, r), s)

#############  runners    ########################
include("runners/runners.jl")
include("runners/SerialMC.jl") # Ordinary serial MCMC runner
include("runners/SerialTempMC.jl") # Serial Tempering Monte-Carlo runner
include("runners/SeqMC.jl") # Sequential Monte-Carlo runner

#############  MCMC output analysis and diagnostics    ########################
include("stats/acf.jl") # Autocorrelation functions (temporarily placed here)
include("stats/var.jl") # MCMC variance estimators
include("stats/ess.jl") # Effective sample size and integrated autocorrelation time functions
include("stats/summary.jl") # Summary statistics for MCMCChain
include("stats/zv.jl")  # ZV-MCMC estimators
end
