#################################################################
#
#    Main file of MCMC.jl module
#
#################################################################

module MCMC

import Base.*, Base.show
export show, *

###########  Models and autodiff  ##########
# import Base.sum
# sum(x::Real) = x  # meant to avoid the annoying behaviour of sum(Inf) 

include("modellers/models.jl")      #  include model types definitions		
include("modellers/parsing.jl")     #  include model expression parsing function
include("modellers/diff.jl")        #  include derivatives definitions
include("modellers/distribs.jl")    #  include distributions definitions


### MCMCTask type, generated by combining a MCMCModel(s) with MCMCSampler(s)
type MCMCTask
	task::Task
	model::MCMCModel
end

#############  samplers  ########################
abstract MCMCSampler

reset(t::MCMCTask, x) = t.task.storage[:reset](x)

include("samplers/RWM.jl")
include("samplers/MALA.jl")
include("samplers/HMC.jl")

#  Definition of * as a shortcut operator for model and sampler combination 
*{M<:MCMCModel, S<:MCMCSampler}(m::M,        s::S)        = spinTask(m, s)
*{M<:MCMCModel, S<:MCMCSampler}(m::Array{M}, s::S)        = map((me) -> spinTask(me, s), m)
*{M<:MCMCModel, S<:MCMCSampler}(m::M,        s::Array{S}) = map((se) -> spinTask(m, se), s)


### MCMCChain, the result of running a MCMCTask
type MCMCChain
	samples::Dict
	task::MCMCTask
	runTime::Float64
end

function show(io::IO, res::MCMCChain)
	local samples = 0
	for v in keys(res.samples)
		print("$v$(size(res.samples[v])[1:end-1]) ")
		samples = size(res.samples[v])[end]
	end 
	print("by $samples samples, ")
	println("$(round(res.runTime,1)) sec.")
end


#############  runners    ########################

include("runners/run.jl")







end