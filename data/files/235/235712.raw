using JFinEALE
using JFinEALE.DeformationLinearAlgorithmModule
using JFinEALE.MeshExportModule

E=1.0;
nu=1.0/3;
width =48.0; height = 44.0; thickness  = 1.0;
free_height  = 16.0;
Mid_edge  = [48.0, 52.0];# Location of tracked  deflection
magn=1./free_height;# Magnitude of applied load
convutip=23.97;
n=100;#*int(round(sqrt(170.)/2.)); # number of elements per side
tolerance=minimum([width,height])/n/1000.;#Geometrical tolerance

fens,fes =T3block(width,height, n, n)
setotherdimension!(fes,1.0)

# Reshape into a trapezoidal panel
for i=1:count(fens)
    fens.xyz[i,2]=fens.xyz[i,2]+(fens.xyz[i,1]/width)*(height -fens.xyz[i,2]/height*(height-free_height));
end

# Clamped edge of the membrane
l1 =fenodeselect(fens; box=[0.,0.,-Inf, Inf], inflate = tolerance)
essential1=dmake(node_list=l1,component=1:2,displacement=0.0)

# Traction on the opposite edge
boundaryfes =  meshboundary(fes);
Toplist  =feselect(fens,boundaryfes, box= [width, width, -Inf, Inf ], inflate=  tolerance);
el1femm =  FEMMBase(subset(boundaryfes,Toplist), GaussRule(order=2,dim=1))
flux1=dmake(femm=el1femm,traction_vector=[0.0,+magn])

# Make the region
p=PropertyDeformationLinearIso(E,nu)
region1=dmake(fes=fes, property=p, integration_rule=TriRule(npts=1))

# Make model data
modeldata= dmake(modelreduction=DeformationModelReduction2DStress,
                 fens= fens,region=[region1],
                 boundary_conditions=dmake(traction=[flux1],essential=[essential1]));

# Call the solver
modeldata=JFinEALE.DeformationLinearAlgorithmModule.linearstatics(modeldata)
geom=modeldata["geom"]
u=modeldata["u"]

# Extract the solution
nl=fenodeselect (fens, box=[Mid_edge[1],Mid_edge[1],Mid_edge[2],Mid_edge[2]],inflate=tolerance);
theutip=u.values[nl,:]
println("displacement =$(theutip[2]) as compared to converged $convutip") 

# Write out mesh with displacements
dadd!(modeldata,postprocessing=dmake(file=  "cookstress"))
modeldata=JFinEALE.DeformationLinearAlgorithmModule.exportdeformation(modeldata)

# Write out mesh with stresses
dadd!(modeldata,postprocessing=dmake(file=  "cookstress", output=:Cauchy, component=:xy))
modeldata=JFinEALE.DeformationLinearAlgorithmModule.exportstress(modeldata)

true
