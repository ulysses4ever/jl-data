include("config.jl")

module Fixed_Genotype
using Config

type Type_Genotype
    num_nodes::Int32
    used_connections::Array{Int32, 1}
    connections::Array{Int32, 1}
    activations::Array{Int32, 1}
    weights::Array{Int32, 1}
    thresholds::Array{Int32, 1}
    fitness::Float32
    marked_for_removal::Bool
end

function make_random_genotype(config_vals::Config.Type_Config_Values)
    num_nodes = config_vals.initial_num_nodes
    used_connections::Array{Int32, 1} = zeros(Int32, config_vals.max_num_nodes)
    connections::Array{Int32, 1} = zeros(Int32, config_vals.max_num_nodes * config_vals.max_num_connections)
    weights::Array{Int32, 1} = zeros(Int32, config_vals.max_num_nodes * config_vals.max_num_connections)
    for i = 1:num_nodes
        connections_to_use = rand(config_vals.initial_min_num_connections:config_vals.initial_max_num_connections)
        used_connections[i] = connections_to_use
        start_index = (i - 1) * config_vals.max_num_connections
        for j = 1:connections_to_use
            weight_value = 0
            while weight_value == 0
                weight_value = rand(config_vals.min_weight:config_vals.max_weight)
            end
            weights[start_index + j] = weight_value
            connection_value = 0
            found_connection_value = false
            while !found_connection_value
                connection_value = rand(1:num_nodes)
                found_connection_value = true
                for k = 1:(j - 1)
                    if connection_value == connections[start_index + k]
                        found_connection_value = false
                    end
                end
            end
            connections[start_index + j] = connection_value
        end
    end
    activations::Array{Int32, 1} = zeros(Int32, config_vals.max_num_nodes * (config_vals.num_simulation_iterations + 1))
    rand!(sub(activations, 1:num_nodes), 0:1)
    thresholds::Array{Int32, 1} = zeros(Int32, config_vals.max_num_nodes)
    rand!(sub(thresholds, 1:num_nodes), config_vals.min_threshold:config_vals.max_threshold)
    return Type_Genotype(num_nodes, used_connections, connections, activations, weights, thresholds,  0.0, false)
end

function simulate(genotype::Type_Genotype, config_vals::Config.Type_Config_Values)
    Libdl.dlopen("/home/david/TehzCodes/GRNEvolution/libboolnet")
    ccall((:run_network_fixed, "/home/david/TehzCodes/GRNEvolution/libboolnet"), Void,
          (Int32, Int32, Int32, Int32, Ptr{Int32}, Ptr{Int32}, Ptr{Int32}, Ptr{Int32}),
          config_vals.num_simulation_iterations, genotype.num_nodes,
          config_vals.max_num_nodes, config_vals.max_num_connections,
          genotype.activations,
          genotype.connections, genotype.weights, genotype.thresholds)
    
    # if !isequal(genotype.activations[(genotype.num_nodes * (config_vals.num_simulation_iterations - 1) + 1):(genotype.num_nodes * config_vals.num_simulation_iterations)], genotype.activations[(genotype.num_nodes * config_vals.num_simulation_iterations + 1):(genotype.num_nodes * (config_vals.num_simulation_iterations + 1))])

    #     genotype.marked_for_removal = true

    #end
    return 0
end

function move_node(genotype::Type_Genotype, config_vals::Config.Type_Config_Values, from_index::Int32, to_index::Int32)
    from_range_start = ((from_index - 1) * config_vals.max_num_connections) + 1
    from_range_end = ((from_index - 1) * config_vals.max_num_connections) + genotype.used_connections[from_index]
    for i = from_range_start:from_range_end
        genotype.connections[i + ((to_index - from_index) * config_vals.max_num_connections)] = genotype.connections[i]
        genotype.connections[i] = 0
        genotype.weights[i + ((to_index - from_index) * config_vals.max_num_connections)] = genotype.weights[i]
        genotype.weights[i] = 0
    end
    genotype.used_connections[to_index] = genotype.used_connections[from_index]
    genotype.used_connections[from_index] = 0
    genotype.activations[to_index] = genotype.activations[from_index]
    genotype.activations[from_index] = 0
    genotype.thresholds[to_index] = genotype.thresholds[from_index]
    genotype.thresholds[from_index] = 0

    for i = 1:genotype.num_nodes
        for j = 1:genotype.used_connections[i]
            if genotype.connections[(i - 1) * config_vals.max_num_connections + j] == from_index
                genotype.connections[(i - 1) * config_vals.max_num_connections + j] = to_index
            end
        end
    end

    return 0
end

function delete_node(genotype::Type_Genotype, config_vals::Config.Type_Config_Values, index::Int32)
    for i = 1:genotype.num_nodes
        for j = 1:genotype.used_connections[i]
            if genotype.connections[(i - 1) * config_vals.max_num_connections + j] == index
                delete_connection(genotype, config_vals, convert(Int32, i), convert(Int32, j))
            end
        end
    end
    genotype.num_nodes -= 1
    range_start = ((index - 1) * config_vals.max_num_connections) + 1
    range_end = ((index - 1) * config_vals.max_num_connections) + genotype.used_connections[index]
    for i = range_start:range_end
        genotype.connections[i] = 0
        genotype.weights[i] = 0
    end
    genotype.used_connections[index] = 0
    genotype.activations[index] = 0
    genotype.thresholds[index] = 0
    move_node(genotype, config_vals, genotype.num_nodes + convert(Int32, 1), index)
    return 0
end

function duplicate_node(genotype::Type_Genotype, config_vals::Config.Type_Config_Values, index::Int32)
    genotype.num_nodes += 1
    for i = 1:genotype.num_nodes
        for j = 1:genotype.used_connections[i]
            if genotype.connections[(i - 1) * config_vals.max_num_connections + j] == index
                add_connection(genotype, config_vals, convert(Int32, i), genotype.num_nodes)
            end
        end
    end
    genotype.used_connections[genotype.num_nodes] = genotype.used_connections[index]
    genotype.activations[genotype.num_nodes] = genotype.activations[index]
    genotype.thresholds[genotype.num_nodes] = genotype.thresholds[index]
    from_start = (index - 1) * config_vals.max_num_connections
    to_start = (genotype.num_nodes - 1) * config_vals.max_num_connections
    for i = 1:genotype.used_connections[index]
        genotype.connections[to_start + i] = genotype.connections[from_start + i]
        genotype.weights[to_start + i] = genotype.weights[from_start + i]
    end
    return 0
end

function add_connection(genotype::Type_Genotype, config_vals::Config.Type_Config_Values, node::Int32, connection_value::Int32)
    if genotype.used_connections[node] < config_vals.max_num_connections
        node_index = (node - 1) * config_vals.max_num_connections
        insert_index = (node - 1) * config_vals.max_num_connections + 1 + genotype.used_connections[node]
        weight_value = 0
        while weight_value == 0
            weight_value = rand(config_vals.min_weight:config_vals.max_weight)
        end
        genotype.weights[insert_index] = weight_value
        if connection_value == 0
            found_connection_value = false
            while !found_connection_value
                connection_value = rand(1:genotype.num_nodes)
                found_connection_value = true
                for k = 1:genotype.used_connections[node]
                    if connection_value == genotype.connections[node_index + k]
                        found_connection_value = false
                    end
                end
            end
        end
        genotype.connections[insert_index] = connection_value
    end
    genotype.used_connections[node] += 1

    return 0
end

function delete_connection(genotype::Type_Genotype, config_vals::Config.Type_Config_Values, node::Int32, conn_num::Int32)
    if genotype.used_connections[node] > config_vals.min_num_connections
        delete_index = (node - 1) * config_vals.max_num_connections + conn_num
        nodes_last_index = (node - 1) * config_vals.max_num_connections + genotype.used_connections[node]
        if conn_num < genotype.used_connections[node]
            genotype.connections[delete_index] = genotype.connections[nodes_last_index]
            genotype.weights[delete_index] = genotype.weights[nodes_last_index]
        end
        genotype.connections[nodes_last_index] = 0
        genotype.weights[nodes_last_index] = 0
        genotype.used_connections[node] -= 1
    end
    return 0
end

function mutate_connection(genotype::Type_Genotype, config_vals::Config.Type_Config_Values, node::Int32, conn_num::Int32)
    nodes_first_index = (node - 1) * config_vals.max_num_connections
    connection_value = 0
    found_connection_value = false
    while !found_connection_value
        connection_value = rand(1:genotype.num_nodes)
        found_connection_value = true
        for j = 1:genotype.used_connections[node]
            if connection_value == genotype.connections[nodes_first_index + j]
                found_connection_value = false
            end
        end
    end
    genotype.connections[nodes_first_index + conn_num] = connection_value
    return 0
end

function mutate_weight(genotype::Type_Genotype, config_vals::Config.Type_Config_Values, node::Int32, weight_num::Int32)
    index = (node - 1) * config_vals.max_num_connections + weight_num
    new_weight = 0
    while true
        new_weight = rand(config_vals.min_weight:config_vals.max_weight)
        if new_weight != genotype.weights[index]
            break
        end
    end
    genotype.weights[index] = new_weight
    return 0
end

end
