include("config.jl")
include("preallocation.jl")
include("genotype.jl")
include("population.jl")


import Preallocation
import Genotype
import Config
import Population


function walk()

    NUM_GENOTYPES = 2000000
    NUM_MUTANTS = 50000

    config_vals::Config.Type_Config_Values = Config.Type_Config_Values()
    population = Population.make_population(config_vals)
    genotype = Genotype.make_random_genotype(config_vals)
    dummy_genotype = Genotype.make_random_genotype(config_vals)
    best_genotype = Genotype.make_random_genotype(config_vals)

    target_number = 2

    for i = 1:NUM_GENOTYPES

        
        #best_genotype.fitness = 0
        if i % 4 == 0
            temp = target_number
            while temp == target_number
                temp = rand(2:2:8)
            end
            target_number = temp
            best_genotype.evaluated = false
            Genotype.evaluate(best_genotype, config_vals, target_number, population.preallocation)
        end

        for j = 1:NUM_MUTANTS
            Genotype.copy_into(dummy_genotype, genotype)
            Genotype.mutate_at_global_rate(dummy_genotype, config_vals)
            dummy_genotype.evaluated = false
            Genotype.evaluate(dummy_genotype, config_vals, target_number, population.preallocation)
            if dummy_genotype.fitness >= best_genotype.fitness
                Genotype.copy_into(best_genotype, dummy_genotype)
            end
        end
        println(target_number, " ", i % 10, " ", best_genotype.fitness)
        if best_genotype.fitness == 16
            f1_frequencies = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
            f2_frequencies = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
            
            for i = 1:10000
                Genotype.copy_into(dummy_genotype, best_genotype)
                Genotype.mutate_at_global_rate(dummy_genotype, config_vals)
                Genotype.evaluate(dummy_genotype, config_vals, 1, population.preallocation)
                f1 = dummy_genotype.fitness
                dummy_genotype.evaluated = false
                Genotype.evaluate(dummy_genotype, config_vals, 2, population.preallocation)
                f2 = dummy_genotype.fitness
                if f1 >= 13.0
                    f1_frequencies[round(Int, f1 - 12)] += 1
                end
                if f2 >= 13.0
                    f2_frequencies[round(Int, f2 - 12)] += 1
                end
            end
            println()
            println(f1_frequencies)
            println(f2_frequencies)
            println()
        end
        Genotype.copy_into(genotype, best_genotype)
    end
end

walk()
