include("config.jl")
include("genotype.jl")
include("population.jl")

import Genotype
import Config
import Population

function evolve()
    population = Population.make_population()
    j = 2
    for i = 1:Config.num_generations
        Population.evaluate(population)
        if i % Config.print_interval == 0
            Population.print_stats(population)
        end
        Population.breed_and_exterminate(population)
        if i % Config.generations_per_target_switch == 0
            println("\n target switch ", j, "\n")
            if j == 1
                j = 2
            else
                j = 1
            end
            Population.switch_target(population)
        end
    end
    best = population.genotypes[1]
    max_fitness = 0
    for genotype in population.genotypes
        if genotype.fitness > max_fitness
            max_fitness = genotype.fitness
            best = genotype
        end
    end
    println("connections")
    for i = 1:best.num_nodes
        println(best.connections[(best.connection_indeces[i] + 1):best.connection_indeces[i + 1]])
    end
    if Config.use_truth_table
        println("truth table")
        for i = 1:best.num_nodes
            println(best.truth_table[(best.truth_table_indeces[i] + 1):best.truth_table_indeces[i + 1]])
        end
    else
        println("thresholds")
        println(best.thresholds)
        println("weights")
        for i = 1:best.num_nodes
            println(best.weights[(best.connection_indeces[i] + 1):best.connection_indeces[i + 1]])
        end
    end
    println("activations")
    for i = 1:Config.num_simulation_iterations
        println(best.activations[((i - 1) * best.num_nodes + 1):(i * best.num_nodes)])
    end
end

function test_functionality()
    println("\n INITIALISE \n")
    foo = Genotype.make_random_genotype()
    println("connections")
    for i = 1:foo.num_nodes
        println(foo.connections[(foo.connection_indeces[i] + 1):foo.connection_indeces[i + 1]])
    end
    println("truth table")
    for i = 1:foo.num_nodes
        println(foo.truth_table[(foo.truth_table_indeces[i] + 1):foo.truth_table_indeces[i + 1]])
    end

    println("\n DELETE NODE \n")
    Genotype.delete_node(foo)
    println("connections")
    for i = 1:foo.num_nodes
        println(foo.connections[(foo.connection_indeces[i] + 1):foo.connection_indeces[i + 1]])
    end
    println("truth table")
    for i = 1:foo.num_nodes
        println(foo.truth_table[(foo.truth_table_indeces[i] + 1):foo.truth_table_indeces[i + 1]])
    end
    println("\n DUPLICATE NODE \n")
    Genotype.duplicate_node(foo)
    println("connections")
    for i = 1:foo.num_nodes
        println(foo.connections[(foo.connection_indeces[i] + 1):foo.connection_indeces[i + 1]])
    end
    println("truth table")
    for i = 1:foo.num_nodes
        println(foo.truth_table[(foo.truth_table_indeces[i] + 1):foo.truth_table_indeces[i + 1]])
    end

    println("activations")
    for i = 1:Config.num_simulation_iterations
        println(foo.activations[((i - 1) * foo.num_nodes + 1):(i * foo.num_nodes)])
    end

    println("\n MUTATE \n")
    for i in 1:100
        #println()
        Genotype.mutate(foo)
        #Genotype.add_connection(foo)
        # println
        # println("\n connections")
        # for i = 1:foo.num_nodes
        #     println(foo.connections[(foo.connection_indeces[i] + 1):foo.connection_indeces[i + 1]])
        # end
        # println("truth table")
        # for i = 1:foo.num_nodes
        #     println(foo.truth_table[(foo.truth_table_indeces[i] + 1):foo.truth_table_indeces[i + 1]])
        # end
        # println("indeces")
        # println(foo.connection_indeces)
        # println(foo.truth_table_indeces)
    end
    println()
    println("connections")
    for i = 1:foo.num_nodes
        println(foo.connections[(foo.connection_indeces[i] + 1):foo.connection_indeces[i + 1]])
    end
    println("truth table")
    for i = 1:foo.num_nodes
        println(foo.truth_table[(foo.truth_table_indeces[i] + 1):foo.truth_table_indeces[i + 1]])
    end

    println("\n SIMULATE \n")
    Genotype.simulate(foo)
    println("activations")
    for i = 1:Config.num_simulation_iterations
        println(foo.activations[((i - 1) * foo.num_nodes + 1):(i * foo.num_nodes)])
    end
end

@time evolve()

#test_functionality()
    
