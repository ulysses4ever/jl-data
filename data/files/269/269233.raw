include("config.jl")
include("preallocation.jl")
include("genotype.jl")
include("population.jl")


import Preallocation
import Genotype
import Config
import Population


function walk()

    NUM_FIRST_SEARCH = 20000000
    NUM_SECOND_SEARCH = 200
    NUM_THIRD_SEARCH = 20000
    NUM_FOURTH_SEARCH = 20000
    NUM_NEIGHBOUR_SEARCH = 200000

    NUM_HIGHER_TO_TRY = 3

    SEARCH_DEPTH = 200
    NUM_MUTANTS = 2000000

    config_vals::Config.Type_Config_Values = Config.Type_Config_Values()

    #num_differences = rand(1:1)
    num_differences = 3
    target = zeros(Int32, 2, 8)
    for i = 1:8
        target[1, i] = rand(Int32(0):Int32(1))
        target[2, i] = target[1, i]
    end
    for i = 1:num_differences
        done = false
        while !done
            index = rand(1:8)
            if target[2, index] == target[1, index]
                target[1, index] = 1 - target[1, index]
                done = true
            end
        end
    end
    config_vals.logic_network_outputs = target
    println(num_differences)
    println(target)

    population = Population.make_population(config_vals)
    dummy_genotype = Genotype.make_random_genotype(config_vals)
    dummy_genotype2 = Genotype.make_random_genotype(config_vals)
    dummy_genotype3 = Genotype.make_random_genotype(config_vals)
    dummy_genotype4 = Genotype.make_random_genotype(config_vals)
    dummy_genotype5 = Genotype.make_random_genotype(config_vals)
    dummy_genotype6 = Genotype.make_random_genotype(config_vals)
    best_genotype = Genotype.make_random_genotype(config_vals)
    previous_best_genotype = Genotype.make_random_genotype(config_vals)
    found = false

    for i = 1:NUM_FIRST_SEARCH
        Genotype.randomize_genotype(dummy_genotype, config_vals)
        #println(dummy_genotype.connections)
        #dummy_genotype.evaluated = false
        Genotype.evaluate(dummy_genotype, config_vals, 1, 1, population.preallocation)
        if dummy_genotype.fitness >= 8.0
            println("fourth")
            for n = 1:NUM_NEIGHBOUR_SEARCH
                Genotype.copy_into(dummy_genotype2, dummy_genotype)
                Genotype.point_mutate(dummy_genotype2, config_vals)
                dummy_genotype2.evaluated = false
                Genotype.evaluate(dummy_genotype2, config_vals, 2, 1, population.preallocation)
                if dummy_genotype2.fitness >= 8.0
                    println("hoorah")
                    println(n)
                    found = true
                    break
                end
            end
            if found
                break
            end
        end
    end # for i = 1:NUM_FIRST_SEARCH

    Genotype.copy_into(dummy_genotype2, dummy_genotype)
    target_number = 1
    for k = 1:SEARCH_DEPTH
        if target_number == 2
            target_number = 1
        else
            target_number = 2
        end
        Genotype.copy_into(dummy_genotype, dummy_genotype2)
        l = 0
        for l = 1:NUM_MUTANTS
            Genotype.copy_into(dummy_genotype2, dummy_genotype)
            Genotype.point_mutate(dummy_genotype2, config_vals)
            Genotype.evaluate(dummy_genotype2, config_vals, target_number, 1, population.preallocation)
            if dummy_genotype2.fitness == 8.0
                break
            end
        end
        if l == NUM_MUTANTS
            println("failed mutants")
            break
        else
            println(l)
        end
    end

end

walk()
