N = 10
K = 2
Q = 3
A = 4

SAMPLE_SIZE = 1000

function convert_to_int(vals::Array{Int, 1})
    return_int = 0
    for i = 1:length(vals)
        return_int += vals[i] * (A^(i-1))
    end
    return return_int
end

function evaluate(W::Array{Int, 2}, neighbours::Array{Int, 2}, w::Array{Int, 1})
    return_int = 0
    for i = 1:length(w)
        index = w[i]
        for j = 1:K
            index += w[neighbours[i, j]] * (A^j)
        end
        println(index)
        return_int += W[i, index]
    end
    return return_int
end

function sample(N, K, Q, A, SAMPLE_SIZE, neighbours, W, w)
    robustness = 0
    println(w)
end

neighbours = zeros(Int, N, K)
for i = 1:N
    for j = 1:K
        found = false
        new_neighbour = 0
        while !found
            found = true
            new_neighbour = rand(Int(1):Int(N))
            for k = 1:K
                if (new_neighbour == neighbours[i, k]) | (new_neighbour == i)
                    found = false
                end 
            end
        end
        neighbours[i, j] = new_neighbour
    end
end
W = rand(0:(Q - 1), N, A^(K + 1))

sample(N, K, Q, A, SAMPLE_SIZE, neighbours, W, rand(0:(Q - 1), N))



