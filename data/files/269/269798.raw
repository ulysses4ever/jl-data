function initialize_network(connections::Array{Int32, 1}, truth_table::Array{Int32, 1}, activations::Array{Int32, 1})
  #num_nodes::Int32 = 2000
  num_nodes::Int32 = 10
  num_connections::Int32 = 2
  num_iterations::Int32 = 20
  rand!(1:num_nodes, connections)
  rand!(0:1, truth_table)
  rand!(0:1, activations)
  dlopen("/home/david/TehzCodes/JuliaFun/libboolnet")
  ccall((:run_network, "/home/david/TehzCodes/JuliaFun/libboolnet"), Int32, (Int32, Int32, Ptr{Int32}, Ptr{Int32}, Ptr{Int32}),
        num_iterations, num_nodes, activations, connections, truth_table)
end

function test_net()
  num_nodes = 2000
  num_connections = 2
  connections = zeros(Int32, num_nodes * num_connections)
  truth_table = zeros(Int32, num_nodes * 4)
  activations = zeros(Int32, num_nodes)
  #for i in 1:100
  for i in 1:1
    initialize_network(connections, truth_table, activations)
    println("i $i")
  end
end
@time test_net()

# function run_network(connections::Array{Int64, 2}, truth_table::Array{Int64, 2}, activations::Array{Int64, 1})
#   num_nodes::Int64 = 2000
#   num_iterations::Int64 = 20
#   for i in 1:num_iterations
#     for j in 1:num_nodes
#       activations[j] = truth_table[j, activations[connections[j, 1]] * 2 + activations[connections[j, 2]]+ 1]
#     end
#   end
#   a::Int64 = 0
# end


