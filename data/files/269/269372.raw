include("config.jl")
include("genotype.jl")

module Population
using Config
using Genotype

type Type_Population
    genotypes::Array{Genotype.Type_Genotype, 1}
    target_expression::Array{Float32, 1}
    to_copy_over::Array{Int32, 1}
    fitness_vals_1::Dict{Int64, Float64}
    fitness_vals_2::Dict{Int64, Float64}
    target_number::Int32

    layer_1_weights::Array{Float32, 1}
    layer_2_weights::Array{Float32, 1}
    inputs::Array{Float32, 1}
    hidden_activations::Array{Float32, 1}
    outputs::Array{Float32, 1}
    walls::Array{Float32, 1}
    fitness_ref::Array{Float32, 1}

    mutation_tracker::Array{Int32, 1}

    max_fitness::Int32
    average_fitness::Float32
    first_max_eight::Int32
    first_average_three::Int32
    first_average_six::Int32
    first_average_seven::Int32
end

function make_population(config_vals::Config.Type_Config_Values)
    genotypes::Array{Genotype.Type_Genotype, 1} = Genotype.Type_Genotype[]
    to_copy_over::Array{Int32, 1} = zeros(Int32, config_vals.births_and_deaths_per_generation)
    for i = 1:config_vals.population_size
        push!(genotypes, Genotype.make_random_genotype(config_vals))
    end

    target_expression::Array{Int32, 1} = []
    if config_vals.use_sim
        target_expression = config_vals.sim_expression_1
    else
        target_expression = config_vals.expression_1
    end
    
    layer_1_weights = zeros(Float32, config_vals.num_input_nn_nodes * config_vals.num_hidden_nn_nodes)
    layer_2_weights = zeros(Float32, config_vals.num_output_nn_nodes * config_vals.num_hidden_nn_nodes)
    inputs = zeros(Float32, config_vals.num_input_nn_nodes)
    hidden_activations = zeros(Float32, config_vals.num_hidden_nn_nodes)
    outputs = zeros(Float32, config_vals.num_output_nn_nodes)
    walls = [convert(Float32, 0), convert(Float32, 1), convert(Float32, 0), 
             convert(Float32, 1), convert(Float32, 0), convert(Float32, 0),
             convert(Float32, 0), convert(Float32, 1), convert(Float32, 200),
             convert(Float32, 1), convert(Float32, 0), convert(Float32, 400),]
    fitness_ref = [convert(Float32, 1)]

    mutation_tracker = zeros(Float32, config_vals.max_num_nodes + 1)

    return Type_Population(genotypes, target_expression, to_copy_over, Dict{Int64, Float64}(), 
                           Dict{Int64, Float64}(), convert(Int32, 1), layer_1_weights, layer_2_weights, inputs, hidden_activations, 
                           outputs, walls, fitness_ref, mutation_tracker, convert(Int32, 0), convert(Float32, 0.0), convert(Int32, 0), 
                           convert(Int32, 0), convert(Int32, 0), convert(Int32, 0))
end

function switch_target(population::Type_Population, config_vals::Config.Type_Config_Values, repetition::Int64, generation::Int64)
    if population.target_number == 1
        population.target_number = 2
    else
        population.target_number = 1
    end
    for genotype in population.genotypes
        genotype.fitness = -1.0
    end
    if config_vals.use_randomised_targets
        population.target_expression = rand(0:1, config_vals.target_length)
    else
        if population.target_expression == config_vals.expression_1
            population.target_expression = config_vals.expression_2
        elseif population.target_expression == config_vals.expression_2
            population.target_expression = config_vals.expression_1
        elseif population.target_expression == config_vals.sim_expression_1
            population.target_expression = config_vals.sim_expression_2
        else
            population.target_expression = config_vals.sim_expression_1
        end
    end
    evaluate(population, config_vals, repetition, generation)
    
    if config_vals.generation_printing
        println("\n target switch to ", population.target_number, "    ", population.first_max_eight, " ", 
                population.first_average_three, " ", population.first_average_six, " ", population.first_average_seven, "\n")
    end

    population.first_max_eight = 0
    population.first_average_three = 0
    population.first_average_six = 0
    population.first_average_seven = 0

    return 0
end


function evaluate(population::Type_Population, config_vals::Config.Type_Config_Values, repetition::Int64, generation::Int64)
    
    for genotype in population.genotypes
        if population.target_number == 1
            Genotype.evaluate(genotype, config_vals, population.target_expression, population.walls, population.layer_1_weights,
                                    population.layer_2_weights, population.inputs, population.hidden_activations, population.outputs, 
                                    population.fitness_ref, population.target_number, population.fitness_vals_1, population.mutation_tracker)
        else
            Genotype.evaluate(genotype, config_vals, population.target_expression, population.walls, population.layer_1_weights,
                                    population.layer_2_weights, population.inputs, population.hidden_activations, population.outputs, 
                                    population.fitness_ref, population.target_number, population.fitness_vals_2, population.mutation_tracker)
        end
    end

    sum = 0
    population.max_fitness = 0
    population.average_fitness = 0
    for k = 1:length(population.genotypes)
        sum += population.genotypes[k].fitness
        if population.genotypes[k].fitness > population.max_fitness
            population.max_fitness = population.genotypes[k].fitness
        end
    end
    population.average_fitness = sum / config_vals.population_size
    generations_after_switch = generation % config_vals.generations_per_target_switch
    if (population.max_fitness == 8) & (population.first_max_eight == 0)
        population.first_max_eight = generations_after_switch
    end
    if (population.average_fitness >= 3.0) & (population.first_average_three == 0)
        population.first_average_three = generations_after_switch
    end
    if (population.average_fitness >= 6.0) & (population.first_average_six == 0)
        population.first_average_six = generations_after_switch
    end
    if (population.average_fitness >= 7.0) & (population.first_average_seven == 0)
        population.first_average_seven = generations_after_switch
    end

    return 0
end

function print_stats(population::Type_Population, config_vals::Config.Type_Config_Values, repetition::Int64, generation::Int64) 
    if config_vals.experiment_printing
        print(repetition, " ", generation, " ", population.max_fitness, " ", population.average_fitness, " ")
        mutation_sum::Int128 = 0
        for i = 1:length(population.mutation_tracker)
            mutation_sum += population.mutation_tracker[i]
        end
        for i = 1:length(population.mutation_tracker)
            print(population.mutation_tracker[i] / mutation_sum, " ")
        end
        println()
    end
    return 0
end

function breed_and_exterminate(population::Type_Population, config_vals::Config.Type_Config_Values)

    if(length(population.genotypes) > config_vals.births_and_deaths_per_generation)
        for i = 1:config_vals.births_and_deaths_per_generation
            index_to_delete = 1
            lowest_fitness::Float32 = 100000000000
            for j = 1:config_vals.extermination_tournament_size
                new_index = rand(1:length(population.genotypes))
                if population.genotypes[new_index].fitness < lowest_fitness
                    index_to_delete = new_index
                    lowest_fitness = population.genotypes[new_index].fitness
                end
            end
            population.to_copy_over[i] = index_to_delete
        end
    else
        println("skipsdfsdfsdfsd")
    end
    for i = 1:config_vals.births_and_deaths_per_generation
        index_to_breed = 1
        highest_fitness::Float32 = -1
        for j = 1:config_vals.breeding_tournament_size
            new_index = rand(1:length(population.genotypes))
            if population.genotypes[new_index].fitness > highest_fitness
                index_to_breed = new_index
                highest_fitness = population.genotypes[new_index].fitness
            end
        end
        Genotype.copy_into(population.genotypes[population.to_copy_over[i]], population.genotypes[index_to_breed])
        if config_vals.use_global_mutation_rate
            Genotype.mutate_at_global_rate(population.genotypes[population.to_copy_over[i]], config_vals)
        else
            Genotype.mutate(population.genotypes[population.to_copy_over[i]], config_vals)
        end
        population.genotypes[population.to_copy_over[i]].fitness = -1.0
    end
        return 0
end

end
