#function initialize_network(connections::Array{Int32, 2}, connections_pointer::Array{Ptr{Int32},1}, truth_table::Array{Int32, 1}, activations::Array{Int32, 1})
function initialize_network(used_connections::Array{Int32, 1}, connections::Array{Int32, 1},
                            connections_pointer::Array{Ptr{Int32},1}, truth_table::Array{Int32, 1}, activations::Array{Int32, 1})
  max_num_connections::Int32 = 14
  num_nodes::Int32 = 2000
  num_iterations::Int32 = 2000
  rand!(1:num_nodes, connections)
  rand!(0:max_num_connections, used_connections)

  rand!(0:1, truth_table)
  rand!(0:1, activations[1:num_nodes])
  #ccall((:run_network, "/home/david/TehzCodes/GRNEvolution/libboolnet"), Void, (Int32, Int32, Ptr{Int32}, Ptr{Ptr{Int32}}, Ptr{Int32}),
   #     num_iterations, num_nodes, activations, connections_pointer, truth_table)
  ccall((:run_network_flat, "/home/david/TehzCodes/GRNEvolution/libboolnet"), Void, (Int32, Int32, Int32, Ptr{Int32}, Ptr{Int32}, Ptr{Int32}, Ptr{Int32}),
        num_iterations, num_nodes, max_num_connections, used_connections, activations, connections, truth_table)
  #ccall((:run_network_flat_arrays, "/home/david/TehzCodes/GRNEvolution/libboolnet"), Void, (Int32, Int32, Int32, Array{Int32, 1},
   #                                                                                         Array{Int32, 1}, Array{Int32, 1}, Array{Int32, 1}),
    #    num_iterations, num_nodes, max_num_connections, used_connections, activations, connections, truth_table)
end

function test_net_flat()
  num_nodes = 2000
  max_num_connections = 14
  num_iterations::Int32 = 2000
  used_connections::Array{Int32} = rand(0:max_num_connections, num_nodes)
  connection_indeces::Array{Int32} = zeros(Int32, num_nodes + 1)
  truth_table_indeces::Array{Int32} = zeros(Int32, num_nodes + 1)
  for i = 2:(num_nodes + 1)
    connection_indeces[i] = connection_indeces[i - 1] + used_connections[i - 1]
    truth_table_indeces[i] = truth_table_indeces[i - 1] + 2^used_connections[i - 1]
  end
  connections::Array{Int32} = rand(1:num_nodes, convert(Int64, connection_indeces[num_nodes + 1]))
  truth_table::Array{Int32} = rand(0:1, convert(Int64, truth_table_indeces[num_nodes + 1]))
  activations::Array{Int32} = zeros(Int32, num_nodes * (num_iterations + 1))
  rand!(0:1, activations[1:num_nodes])
  dlopen("/home/david/TehzCodes/GRNEvolution/libboolnet")
  for i = 1:10
    ccall((:run_network_flat, "/home/david/TehzCodes/GRNEvolution/libboolnet"), Void,
          (Int32, Int32, Ptr{Int32}, Ptr{Int32}, Ptr{Int32}, Ptr{Int32}, Ptr{Int32}),
          num_iterations, num_nodes, connection_indeces, truth_table_indeces, activations, connections, truth_table)
  end
end

function test_net()
  num_nodes = 2000
  max_num_connections = 14
  num_iterations::Int32 = 2000
  used_connections::Array{Int32} = rand(convert(Int32, 0):convert(Int32, max_num_connections), num_nodes)
  connections::Array{Ptr{Int32}} = Array(Ptr{Int32}, num_nodes)
  truth_table::Array{Ptr{Int32}} = Array(Ptr{Int32}, num_nodes)
  for i = 1:num_nodes
    connections[i] = pointer(rand(convert(Int32, 1):convert(Int32, num_nodes), convert(Int64, used_connections[i])))
    truth_table[i] = pointer(rand(convert(Int32, 0):convert(Int32, 1), convert(Int64, 2^used_connections[i])), 1)
  end
  activations::Array{Ptr{Int32}} = Array(Ptr{Int32}, num_iterations + 1)
  activations[1] = pointer(rand(convert(Int32, 0):convert(Int32, 1), convert(Int64, num_nodes)))
  for i = 2:(num_iterations + 1)
    activations[i] = pointer(zeros(Int32, convert(Int64, num_nodes)), 1)
  end
  dlopen("/home/david/TehzCodes/GRNEvolution/libboolnet")
  for i = 1:10
    ccall((:run_network, "/home/david/TehzCodes/GRNEvolution/libboolnet"), Void,
          (Int32, Int32, Ptr{Int32}, Ptr{Ptr{Int32}}, Ptr{Ptr{Int32}}, Ptr{Ptr{Int32}}),
          num_iterations, num_nodes, used_connections, activations, connections, truth_table)
  end
end
@time test_net()
Profile.print()
methods(pointer)

