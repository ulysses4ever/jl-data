include("config.jl")
include("fixed_genotype.jl")

import Fixed_Genotype
import Config

function test()

    num_samples = 100000000
    num_samples_around = 1000

    config_vals::Config.Type_Config_Values = Config.Type_Config_Values()

    test_genotype::Fixed_Genotype.Type_Genotype = Fixed_Genotype.make_random_genotype(config_vals)
    neighbour_genotype::Fixed_Genotype.Type_Genotype = Fixed_Genotype.make_random_genotype(config_vals)
    neighbour_neighbour_genotype::Fixed_Genotype.Type_Genotype = Fixed_Genotype.make_random_genotype(config_vals)

    dummy::Array{Float64, 1} = []
    j = 1
    neighbour_frequencies::Array{Int64, 1} = zeros(Int64, 1000)
    neighbour_neighbour_frequencies::Array{Int64, 2} = zeros(Int64, (1000, 1000))

    for i = 1:num_samples
        
        if i % 50000 == 0
            println("iteration ", i)
            for i = 1:50
                println(i - 1, " ", neighbour_frequencies[i], " ", neighbour_neighbour_frequencies[i, 1:50], " ", 
                        sum(neighbour_neighbour_frequencies[i, 51:end]), " ", sum(neighbour_neighbour_frequencies[i, :]) 
                        , " ", sum(neighbour_neighbour_frequencies[i, (i + 1):end]))
            end
        end

        Fixed_Genotype.evaluate(test_genotype, config_vals.expression_2, config_vals, dummy)

        if test_genotype.fitness == length(config_vals.expression_2)
            neighbours = 1
            temp::Array{Int64, 1} = zeros(Int64, 1000)
            for i = 1:num_samples_around
                neighbour_neighbours = 1
                Fixed_Genotype.copy_into(neighbour_genotype, test_genotype)
                Fixed_Genotype.point_mutate(neighbour_genotype, config_vals)
                Fixed_Genotype.evaluate(neighbour_genotype, config_vals.expression_1, config_vals, dummy)
                if neighbour_genotype.fitness == length(config_vals.expression_2)
                    neighbours += 1
                    for i = 1:num_samples_around
                        Fixed_Genotype.copy_into(neighbour_neighbour_genotype, neighbour_genotype)
                        Fixed_Genotype.point_mutate(neighbour_neighbour_genotype, config_vals)
                        Fixed_Genotype.evaluate(neighbour_neighbour_genotype, config_vals.expression_2, config_vals, dummy)
                        if neighbour_neighbour_genotype.fitness == length(config_vals.expression_2)
                            neighbour_neighbours += 1
                        end
                    end
                    temp[neighbour_neighbours] += 1
                end
            end
            for i = 1:length(temp)
                neighbour_neighbour_frequencies[neighbours, i] += temp[i]                
            end
            neighbour_frequencies[neighbours] += 1
        end
        Fixed_Genotype.randomize_genotype(config_vals, test_genotype)
    end
end

test()
