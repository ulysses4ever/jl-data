#=
@author titus 
=#
using   Base.Test
include("../sset.jl")
exports = isdefined(:exports)?
    exports : Dict{ASCIIString,Function}()

exports["test_2d_sort"] = function test_list()
  function cmp(a, b) 
    dx = a[1] - b[1]
    dy = a[2] - b[2]
    (dx == 0) && return dy
    return dx
  end

  ss = SSet([(1,2),(3,4),(-1,3)], cmp)
  expects = [(-5, -1), (-1, 3), (1, -1), (1, 2), (3, 4)]

  @test isequal(first(ss), (-1, 3));
  @test isequal(last(ss),  (3, 4));
  @test isequal(size(ss),  3);

  push!(ss, (3,4))
  push!(ss, (1,-1))
  push!(ss, (3,4))
  push!(ss, (-5,-1))

  @test isequal(first(ss), (-5, -1));
  @test isequal(last(ss),  (3, 4));
  @test isequal(ss.items, expects);
end

exports["test_1d_sort"] = function test_list()
  A = [0,1,2,3,2,4,5,5,6,7,9,8,9,0]
  expects = sort([i for i in Set(A)])
  ss = SSet(A)
  @test isequal(first(ss), 0);
  @test isequal(last(ss),  9);
  @test isequal(size(ss),  10);
  @test isequal(constains(ss,9),  true);
  @test isequal(constains(ss,10), false);
  @test isequal(ss.items, expects);
end


