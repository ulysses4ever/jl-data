#
# MGS: Massive Graph Sampler
# Copyright (C) 2014  Jimmy Dubuisson <jimmy.dubuisson@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#

using DataStructures

# binary search for a sorted array (ascending order)
function index_sorted(a,k)
	low = 1
	high = length(a)
	while true
		pos = div(high-low+1,2)+low
		pivot = a[pos]
		k == pivot && return pos 
		high == low && return 0
		k > pivot ? low = pos+1 : high = pos-1
	end
end

##### custom implementation of QuickSort
function swap{T<:Integer}(a::Array{T,1},i::T,j::T)
	t = a[i]
	a[i] = a[j]
	a[j] = t
end

function partition{T<:Integer}(a::Array{T,1},r::Array{T,1},l::T,h::T)
	pvalue = a[h]
	sindex = l
	for j in l:(h-1)
		if a[j] < pvalue 
			(sindex != j && a[sindex] != a[j]) && begin swap(a,sindex,j); swap(r,sindex,j) end
			sindex += 1
		end
	end
	(sindex != h && a[sindex] != a[h]) && begin swap(a,sindex,h); swap(r,sindex,h) end
	return sindex
end

function quicksort_iterative{T<:Integer}(a::Array{T,1},l::T,h::T)
	s = Stack((T,T))
	push!(s,(l,h))
	r = [convert(T,1):convert(T,length(a))]
	while !isempty(s)
		l,h = pop!(s)
		p = partition(a,r,l,h)
		if (p-1) > l
			push!(s,(l,(p-1)))
		end
		if (p+1) < h
			push!(s,((p+1),h))
		end
	end
	return r
end
#####

##### custom implementation of MergeSort
function bottom_up_sort{T<:Integer}(A::Array{T,1})
	n = convert(T,length(A))
	B = zeros(T,n)
	R = [convert(T,1):n]
	S = zeros(T,n)
	width = 1
	while width < n
		i = 0
		while i < n
			bottom_up_merge(A,convert(T,i),convert(T,min(i+width,n)),convert(T,min(i+2*width,n)),B,R,S)
			i += 2*width
		end
		A = copy(B)
		R = copy(S)
		width = 2*width
	end
	return R
end

function bottom_up_merge{T<:Integer}(A::Array{T,1},iLeft::T,iRight::T,iEnd::T,B::Array{T,1},R::Array{T,1},S::Array{T,1})
	i0 = iLeft
	i1 = iRight
	for j in (iLeft+1):iEnd
		if i0 < iRight && (i1 >= iEnd || A[i0+1] <= A[i1+1])
			B[j] = A[i0+1]
			S[j] = R[i0+1]
			i0 += 1
		else
			B[j] = A[i1+1]
			S[j] = R[i1+1]
			i1 += 1
		end
	end
end
#####

# total variation distance between 2 distributions
function TV(p,q)
	s = 0.
	for i in 1:length(p)
		s += abs(p[i]-q[i])	
	end
	return s/2
end

# Pearson correlation between two vectors
function pearson(X,Y)
	mx = mean(X)
	my = mean(Y)
	n = 0.
	dx = 0.
	dy = 0.
	for i in 1:length(X)
		n += (X[i]-mx)*(Y[i]-my)
		dx += (X[i]-mx)^2
		dy += (Y[i]-my)^2
	end
	return n/sqrt(dx*dy)
end

# normalize vector
function normalize(d)
	return d/norm(d)
end

# make vector stochastic
function stochastic(d)
	return d/sum(d)
end
