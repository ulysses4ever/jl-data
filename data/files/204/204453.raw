#
# MGS: Massive Graph Sampler
# Copyright (C) 2014  Jimmy Dubuisson <jimmy.dubuisson@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#

using Graphs

# Random Walk
# @return the list of visited nodes
function RW{T<:Unsigned}(g::GenericAdjacencyList{T,Array{T,1},Array{Array{T,1},1}}, n_steps::Uint64, starting_v::T=convert(T,1))
	visited_nodes =  T[]
	v = starting_v
	for i in 1:n_steps
		nei = out_neighbors(v,g)
		nv = nei[rand(1:length(nei))]
		push!(visited_nodes,v)
		v = nv
	end
	return visited_nodes
end

# Random Walk
# @return an array vid position -> # visits
function RW_aggregated{T<:Unsigned}(g::GenericAdjacencyList{T,Array{T,1},Array{Array{T,1},1}}, n_steps::Uint64, starting_v::T=convert(T,1))
	vv =  zeros(Uint32,length(vertices(g)))
	v = starting_v
	vv[v] = 1
	for i in 1:n_steps
		nei = out_neighbors(v,g)
		nv = nei[rand(1:length(nei))]
		vv[nv] += 1
		v = nv
	end
	return vv
end

# get the next neighbor to visit
function get_ARW_next_pos{T<:Unsigned}(nei::Array{T,1},rd::Array{Float64,1})
	# get the stochastic vector of repulsion values of children
	rd_nei = stochastic(rd[nei])
	# generate the attractive stochastic vector
	ad_nei = stochastic(1-rd_nei)
	s = 0.
	t = [s=s+i for i in ad_nei]
	cad_nei = [0.]
	append!(cad_nei,t)
	r = rand()
	for i in 1:(length(cad_nei)-1)
		low = cad_nei[i]
		high = cad_nei[i+1]
		if low <= r && r <= high
			return i
		end
	end
	return -1
end

# Avoiding Random Walk
#
# rd: stochastic repulsive vector
# @return an array vid position -> # visits
function ARW{T<:Unsigned}(g::GenericAdjacencyList{T,Array{T,1},Array{Array{T,1},1}}, n_steps::Uint64, rd::Array{Float64,1}, starting_v::T=convert(T,1))
	visited_nodes =  T[]
	v = starting_v
	push!(visited_nodes,v)
	for i in 1:n_steps
		nei = out_neighbors(v,g)
		if length(nei) > 1
			pos = get_ARW_next_pos(nei,rd)
			pv = nei[pos]
			push!(visited_nodes,pv)
			v = pv
		else
			pv = nei[1]
			push!(visited_nodes,pv)
			v = pv
		end
	end
	return visited_nodes
end

# Avoiding Random Walk
#
# rd: stochastic repulsive vector
# @return an array vid position -> # visits
function ARW_aggregated{T<:Unsigned}(g::GenericAdjacencyList{T,Array{T,1},Array{Array{T,1},1}}, n_steps::Uint64, rd::Array{Float64,1}, starting_v::T=convert(T,1))
	vv =  zeros(Uint32,length(vertices(g)))
	v = starting_v
	vv[v] = 1
	for i in 1:n_steps
		nei = out_neighbors(v,g)
		if length(nei) > 1
			pos = get_ARW_next_pos(nei,rd)
			pv = nei[pos]
			vv[pv] += 1
			v = pv
		else
			pv = nei[1]
			vv[pv] += 1
			v = pv
		end
	end
	return vv
end

# Metropolis-Hasting Random Walk
#
# rd: stochastic repulsive vector
# @return an array vid position -> # visits
function MHRW{T<:Unsigned}(g::GenericAdjacencyList{T,Array{T,1},Array{Array{T,1},1}}, n_steps::Uint64, in_degrees::Array{T,1}, out_degrees::Array{T,1},starting_v::T=convert(T,1))
	visited_nodes =  T[]
	v = starting_v
	push!(visited_nodes,v)
	rejected = 0
	for i in 1:n_steps
		nei = out_neighbors(v,g)
		if length(nei) > 1
			# choose a child uniformly at random
			rpos = rand(1:length(nei))
			pv = nei[rpos]
			# get the probability to move 
			in_v = out_degrees[v]
			in_pv = out_degrees[pv]
			mp = minimum([1.,in_v/in_pv])
			if rand() <= mp
				push!(visited_nodes,pv)
				v = pv
			else
				rejected += 1
			end
		else
			pv = nei[1]
			push!(visited_nodes,pv)
			v = pv
		end
	end
	return visited_nodes, rejected
end

