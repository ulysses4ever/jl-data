#
# MGS: Massive Graph Sampler
# Copyright (C) 2014  Jimmy Dubuisson <jimmy.dubuisson@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#

using Graphs, DataStructures


# get the ordered dictionary vid -> startpos
function load_graph_index_v1(filename)
	f = open(filename, "r")
	ipos = OrderedDict{Uint32,Uint32}()
	while !eof(f1)
		id = read(f,Uint8,4)
		pos = read(f,Uint8,4)
		# Julia is 1-based -> +1
		ipos[reinterpret(Uint32,reverse(id))[1]] = reinterpret(Uint32,reverse(pos))[1] + 1
	end
	close(f)
	return ipos
end

# get the set of positions
function load_graph_index_v2(filename)
	f = open(filename, "r")
	ipos = Uint32[]
	while !eof(f)
		pos = read(f,Uint8,4)
		push!(ipos, reinterpret(Uint32,reverse(pos))[1])
	end
	close(f)
	return ipos
end

# write index file
function write_graph_index_v2(ipos, filename)
	f = open(filename, "w")
	for p in ipos
		bytes = reinterpret(Uint8, [p])
		write(f, reverse(bytes))
	end
	close(f)
end

# get the array of children
function load_graph_data(filename)
	f = open(filename, "r")
	children = Uint32[]
	while !eof(f)
		child = read(f,Uint8,4)
		push!(children,reinterpret(Uint32,reverse(child))[1])
	end
	close(f)
	return children
end

# write the array of children
function write_graph_data(children, filename)
	f = open(filename, "w")
	for c in children
		bytes = reinterpret(Uint8, [c])
		write(f, reverse(bytes))
	end
	close(f)
end

# generate graph (adjacency list)
function get_adjacency_list_v1(ipos,children)
	g = adjlist(Uint32, is_directed=true)
	# ipos is an ordered dictionary
	ks = collect(keys(ipos))
	# vertex set
	vs = sort(union(children,ks))

	# add vertices
	for i in 1:length(vs)
        	add_vertex!(g,uint32(i))
	end

	# instantiate dictionary
	oni = Dict{Uint32,Uint32}()

	counter = uint32(1)
	for v in vs
		oni[v] = counter
		counter += uint32(1)
	end

	# add edges
	for i in 1:length(ks)
		source = oni[ks[i]]
		# if we reached the last parent vertex
		if i == length(ks)
			pos1 = ipos[ks[i]]
			pos2 = length(children)
		else
			pos1 = ipos[ks[i]]
			pos2 = ipos[ks[i+1]]-1
		end
		for p in pos1:pos2
			target = oni[children[p]]
			add_edge!(g,source,target)
		end
	end
	return g,oni
end

##########

#ipos = load_graph_index_v1(ARGS[1])
#children = load_graph_data(ARGS[2])
#
#g,oni = get_adjacency_list_v1(ipos,children)
#
#println(length(vertices(g)))
#println(num_edges(g))
#
#open("graph.jld", "w") do file
#	serialize(file, g)
#end

###

ipos = Uint32[]
push!(ipos, 123456789)

write_graph_index_v2(ipos,"test.index")
ipos2 = load_graph_index_v2("test.index")

println(ipos2[1])
