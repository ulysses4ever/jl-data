#
# MGS: Massive Graph Sampler
# Copyright (C) 2014  Jimmy Dubuisson <jimmy.dubuisson@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#

using Graphs

# Random Walk
# @return the list of visited nodes
function RW{T<:Unsigned}(g::GenericAdjacencyList{T,Array{T,1},Array{Array{T,1},1}}, n_steps::Uint64, starting_v::T=convert(T,1))
	visited_nodes =  T[]
	v = starting_v
	for i in 1:n_steps
		nei = out_neighbors(v,g)
		nv = nei[rand(1:length(nei))]
		push!(visited_nodes,v)
		v = nv
	end
	return visited_nodes
end

# Random Walk
# @return an array vid position -> # visits
function RW_aggregated{T<:Unsigned}(g::GenericAdjacencyList{T,Array{T,1},Array{Array{T,1},1}}, n_steps::Uint64, starting_v::T=convert(T,1))
	vv =  zeros(Uint32,length(vertices(g)))
	v = starting_v
	vv[v] = 1
	for i in 1:n_steps
		nei = out_neighbors(v,g)
		nv = nei[rand(1:length(nei))]
		vv[nv] += 1
		v = nv
	end
	return vv
end

# Uniform sampling
function US{T<:Unsigned}(g::GenericAdjacencyList{T,Array{T,1},Array{Array{T,1},1}}, n_steps::Uint64)
	visited_nodes =  T[]
	n = length(vertices(g))
	for i in 1:n_steps
		pv = convert(T,rand(1:n))
		push!(visited_nodes,pv)
	end
	return visited_nodes
end

# get the flying index
function get_flying_index(a::Array{Float64,1})
	r = rand()
	sum = 0
	pos = 1
	for i in a
		p_sum = sum
		sum += i
		if p_sum <= r && r <= sum
			return pos
		end
		pos += 1
	end
	return -1
end

# Avoiding Random Walk
#
# rd: stochastic repulsive vector
# @return an array vid position -> # visits
function ARW{T<:Unsigned}(g::GenericAdjacencyList{T,Array{T,1},Array{Array{T,1},1}}, n_steps::Uint64, rd::Array{Float64,1}, starting_v::T=convert(T,1))
	visited_nodes =  T[]
	v = starting_v
	push!(visited_nodes,v)
	rejected = 0
	for i in 1:n_steps
		nei = out_neighbors(v,g)
		if length(nei) > 1
			rpos = rand(1:length(nei))
			pv = nei[rpos]
			score = rd[v]/rd[pv]
			if rand() <= score
				push!(visited_nodes,pv)
				v = pv
			else
				rejected += 1
			end
		else
			pv = nei[1]
			push!(visited_nodes,pv)
			v = pv
		end
	end
	return visited_nodes, rejected
end

# Avoiding Random Walk (flying mode)
#
# rd: stochastic repulsive vector
# @return an array vid position -> # visits
function ARW_flying{T<:Unsigned}(g::GenericAdjacencyList{T,Array{T,1},Array{Array{T,1},1}}, n_steps::Uint64, rd::Array{Float64,1}, starting_v::T=convert(T,1))
	visited_nodes =  T[]
	v = starting_v
	push!(visited_nodes,v)
	for i in 1:n_steps
		nei = out_neighbors(v,g)
		if length(nei) > 1
			# compute scores of neighbors
			scores = stochastic([rd[v]/rd[i] for i in nei])
			pos = get_flying_index(scores)
			pv = nei[pos]
		else
			pv = nei[1]
		end
		push!(visited_nodes,pv)
		v = pv
	end
	return visited_nodes
end

# Metropolis-Hasting Random Walk
#
# rd: stochastic repulsive vector
# @return an array vid position -> # visits
function MHRW{T<:Unsigned}(g::GenericAdjacencyList{T,Array{T,1},Array{Array{T,1},1}}, n_steps::Uint64, in_degrees::Array{T,1}, out_degrees::Array{T,1},starting_v::T=convert(T,1))
	visited_nodes =  T[]
	v = starting_v
	push!(visited_nodes,v)
	rejected = 0
	for i in 1:n_steps
		nei = out_neighbors(v,g)
		if length(nei) > 1
			# choose a child uniformly at random
			rpos = rand(1:length(nei))
			pv = nei[rpos]
			# get the probability to move 
			v_stat = out_degrees[v]
			pv_stat = out_degrees[pv]
			mp = minimum([1.,v_stat/pv_stat])
			if rand() <= mp
				push!(visited_nodes,pv)
				v = pv
			else
				rejected += 1
			end
		else
			pv = nei[1]
			push!(visited_nodes,pv)
			v = pv
		end
	end
	return visited_nodes, rejected
end

# Metropolis-Hasting Random Walk (flying mode)
#
# rd: stochastic repulsive vector
# @return an array vid position -> # visits
function MHRW_flying{T<:Unsigned}(g::GenericAdjacencyList{T,Array{T,1},Array{Array{T,1},1}}, n_steps::Uint64, in_degrees::Array{T,1}, out_degrees::Array{T,1},starting_v::T=convert(T,1))
	visited_nodes =  T[]
	v = starting_v
	push!(visited_nodes,v)
	for i in 1:n_steps
		nei = out_neighbors(v,g)
		if length(nei) > 1
			# compute scores of neighbors
			in_v = in_degrees[v]
			out_v = out_degrees[v]
			#scores = stochastic([(in_v+out_v)/(in_degrees[i]+out_degrees[i]) for i in nei])
			scores = stochastic([sqrt(in_v*out_v)/sqrt(in_degrees[i]*out_degrees[i]) for i in nei])
			#scores = stochastic([out_v/out_degrees[i] for i in nei])
			pos = get_flying_index(scores)
			pv = nei[pos]
		else
			pv = nei[1]
		end
		push!(visited_nodes,pv)
		v = pv
	end
	return visited_nodes
end

# RW in flying mode guided by the colink (C1C) or clustering (C2C) coefficient
#
# Twitter dataset: nchains: 100, burning_time: 100, nsteps: 5000
function CC_MHRW_flying{T<:Unsigned}(g::GenericAdjacencyList{T,Array{T,1},Array{Array{T,1},1}}, n_steps::Uint64, ccs::Array{Float64,1}, starting_v::T=convert(T,1))
	visited_nodes =  T[]
	v = starting_v
	push!(visited_nodes,v)
	visited_distr = Dict{T,T}()
	visited_distr[v] = 1
	for i in 1:n_steps
		nei = out_neighbors(v,g)
		if length(nei) > 1
			# compute scores of neighbors
			scores = Float64[]
			for i in nei
				if ccs[i] != 0
					score = ccs[v]/ccs[i]
					#score = minimum([1.,score])
					push!(scores,score)
				else
					# why 1?
					push!(scores,0)
				end
			end
			if maximum(scores) > 0
				scores = stochastic(scores)
			# all entries are equal to 0
			else
				scores = float64(ones(length(nei)))/length(nei)
			end
			pos = get_flying_index(scores)
			pv = nei[pos]
		else
			pv = nei[1]
		end
		push!(visited_nodes,pv)
		if haskey(visited_distr,pv)
			visited_distr[pv] += 1
		else
			visited_distr[pv] = 1
		end
		v = pv
	end
	return visited_nodes,visited_distr
end

# explore a ball centered around starting vertex with a modified random walk
function get_CC_MHRW_flying_ball{T<:Unsigned}(g::GenericAdjacencyList{T,Array{T,1},Array{Array{T,1},1}}, n_vertices::T, ccs::Array{Float64,1}, starting_v::T=convert(T,1),jumping_constant::Float64=0.)
	visited_nodes =  Set{T}()
	v = starting_v
	push!(visited_nodes,v)
	while length(visited_nodes) < n_vertices
		nei = out_neighbors(v,g)
		if rand() < jumping_constant || v == starting_v
			if length(nei) > 1
				# compute scores of neighbors
				scores = Float64[]
				for i in nei
					if ccs[i] != 0
						score = ccs[v]/ccs[i]
						#score = minimum([1.,score])
						push!(scores,score)
					else
						# why 1?
						push!(scores,0)
					end
				end
				if maximum(scores) > 0
					scores = stochastic(scores)
				# all entries are equal to 0
				else
					scores = float64(ones(length(nei)))/length(nei)
				end
				pos = get_flying_index(scores)
				pv = nei[pos]
			else
				pv = nei[1]
			end
		else
			pv = starting_v
		end
		push!(visited_nodes,pv)
		v = pv
	end
	return collect(visited_nodes)
end

# explore a ball centered around starting vertex with a modified random walk
function get_MHRW_flying_ball{T<:Unsigned}(g::GenericAdjacencyList{T,Array{T,1},Array{Array{T,1},1}}, n_vertices::T, in_degrees::Array{T,1}, out_degrees::Array{T,1}, starting_v::T=convert(T,1), jumping_constant::Float64=0.)
	visited_nodes =  Set{T}()
	v = starting_v
	push!(visited_nodes,v)
	while length(visited_nodes) < n_vertices
		nei = out_neighbors(v,g)
		if rand() < jumping_constant || v == starting_v
			if length(nei) > 1
				# compute scores of neighbors
				in_v = in_degrees[v]
				out_v = out_degrees[v]
				#scores = stochastic([(in_v+out_v)/(in_degrees[i]+out_degrees[i]) for i in nei])
				#scores = stochastic([sqrt(in_v*out_v)/sqrt(in_degrees[i]*out_degrees[i]) for i in nei])
				scores = stochastic([out_v/out_degrees[i] for i in nei])
				pos = get_flying_index(scores)
				pv = nei[pos]
			else
				pv = nei[1]
			end
		else
			pv = starting_v
		end
		push!(visited_nodes,pv)
		v = pv
	end
	return collect(visited_nodes)
end
