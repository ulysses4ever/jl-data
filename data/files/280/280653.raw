module Spike

import GLFW
using ModernGL

include("constants.jl")

GLFW.Init()

######
# Windowing
######

export WindowInstance, update, clear, close, open, terminate

type WindowInstance
	title::String
	size::Array{Int64,1}
	position::Array{Int64,1}
	bgcolor::Array{Float64,1}
	windowObject
	# framerate::Int - coming soon

	function WindowInstance(title::String, size::Array{Int64,1}, position::Array{Int64,1}, bgcolor::Array{Float64,1})
		# Create window
		windowObject = GLFW.CreateWindow(size[X], size[Y],title)
		
		# Set window position
		GLFW.SetWindowPos(windowObject, position[X], position[Y])

		# Set clear color
		glClearColor(bgcolor[R], bgcolor[G], bgcolor[B], bgcolor[A])
		glClear(GL_COLOR_BUFFER_BIT)

		# Return new WindowInstance
		new(title::String, size::Array{Int64,1}, position::Array{Int64,1}, bgcolor::Array{Float64,1}, windowObject)
	end
end

function update(window::WindowInstance)
	# Swap front and back buffers
	GLFW.SwapBuffers(window.windowObject)
	
	# Poll for and process events
	GLFW.PollEvents()
end

function clear(window::WindowInstance)
	# Clear buffer
	glClear(GL_COLOR_BUFFER_BIT)
end

function close(window::WindowInstance)
	# Close window
	GLFW.SetWindowShouldClose(window.windowObject, 1)
end

function open(window::WindowInstance)
	# Check to see if window is closed
	!GLFW.WindowShouldClose(window.windowObject)
end

function terminate()
	# Terminate OpenGL
	GLFW.Terminate()
end


# ######
# # Inputs
# ######

export Mouse, Keyboard 

type Mouse
	position::Array{Float64,1}
	normposition::Array{Float64,1}
	buttonspressed::Int32
	action::Int32
	mods::Int32
	entered::Int32
	scroll::Array{Float64,1}
	window::WindowInstance

	function Mouse(window::WindowInstance)
		position = (0.0,0.0)
		normposition = (0.0, 0.0)
		buttonspressed = 0
		action = 0 
		mods = 0 
		entered = 0
		scroll = (0.0, 0.0)

		self = new(position::Array{Float64,1}, normposition::Array{Float64,1}, buttonspressed::Int32, action::Int32, 
			mods::Int32, entered::Int32, scroll::Array{Float64,1}, window::WindowInstance)
		
		GLFW.SetCursorPosCallback(window.windowObject, (xPos,yPos) -> (self.position = (xPos, yPos); nothing)) 
		GLFW.SetMouseButtonCallback(window.windowObject, (button, action, mods) -> (self.buttonspressed = button; self.action = action; self.mods = mods; nothing))
		GLFW.SetCursorEnterCallback(window.windowObject, (entered) -> (self.entered = entered; nothing))
		GLFW.SetScrollCallback(window.windowObject, (xoffset, yoffset) -> (self.scroll = (xoffset, yoffset); nothing))

		return self
	end
end

type Keyboard
	unicodeinput
	buttonspressed
	buttondown
	buttonreleased
	window::WindowInstance
	
	function Keyboard(window::WindowInstance)
		unicodeinput = 0 #window.windowObject.inputs[:unicodeinput]
		buttonspressed = 0 #window.windowObject.inputs[:buttonspressed]
		buttondown = 0 #window.windowObject.inputs[:buttondown]
		buttonreleased = 0 #window.windowObject.inputs[:buttonreleased]

		new(unicodeinput, buttonspressed, buttondown, buttonreleased, window::WindowInstance)
	end
end

function update(keyboard::Keyboard)
	GLFW.SetKeyCallback(keyboard.window.windowObject, (key, scancode, action, mods) -> begin
		if '!' <= key && key <= '~'
			key = convert(Char, key)
			key = string("'", key, "'")
		end
		keyboard.buttonspressed = key 
	end)
end

end # module

