module Spike

import GLFW
using ModernGL

# old way of having draw.something()
# include("draw.jl")
# include("input.jl")
# include("window.jl")

# using .draw
# using .input
# using .window

# add all exports here
#export hello, domath, draw, input, window

# export hello, domath

# #all functions go below
# hello(who::String) = "Hello, $who"
# domath(x::Number) = (x + 5)


# Initialize OpenGL library
GLFW.Init()

# Hints for OS X to use proper version of OpenGL
@osx_only begin
    GLFW.WindowHint(GLFW.CONTEXT_VERSION_MAJOR, 3)
    GLFW.WindowHint(GLFW.CONTEXT_VERSION_MINOR, 2)
    GLFW.WindowHint(GLFW.OPENGL_PROFILE, GLFW.OPENGL_CORE_PROFILE)
    GLFW.WindowHint(GLFW.OPENGL_FORWARD_COMPAT, GL_TRUE)
end


export WindowInstance, update

type WindowInstance
	width::Int
	height::Int
	#framerate::Int
	title::String
	#background_color::Array{Float64,1}
	#xposition::Int
	#yposition::Int
	windowObject

	#function WindowInstance(width::Int, height::Int, framerate::Int, title::String, background_color::Array{Float64,1}, xposition::Int, yposition::Int)
	function WindowInstance(width::Int, height::Int, title::String)
		windowObject = GLFW.CreateWindow(width, height, title)
		
		GLFW.MakeContextCurrent(windowObject)
		new(width::Int, height::Int, title::String, windowObject)

	end
end

function update(window::WindowInstance)
	# Swap front and back buffers
	GLFW.SwapBuffers(window.windowObject)

	# Poll for and process events
	GLFW.PollEvents()

end

end # module

