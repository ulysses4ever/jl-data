import Base: +, -, *, /, Ac_mul_B, A_mul_Bc, conj, abs, abs2, norm, inv, real, isreal, ==, exp, log, cos, sin

real(q::Quaternion) = q.a
isreal(q::Quaternion) = q.b==0 && q.c==0 && q.d==0

==(q1::Quaternion,q2::Quaternion) = q1.a==q2.a && q1.b==q2.b && q1.c==q2.c && q1.d==q2.d
==(q::Quaternion,x::Real) = isreal(q) && q.a==x
==(x::Real,q::Quaternion) = ==(q,x)

+(q1::Quaternion,q2::Quaternion) = Quaternion(q1.a+q2.a,q1.b+q2.b,q1.c+q2.c,q1.d+q2.d)
-(q1::Quaternion,q2::Quaternion) = Quaternion(q1.a-q2.a,q1.b-q2.b,q1.c-q2.c,q1.d-q2.d)

*(q1::Quaternion,q2::Quaternion) = Quaternion(q1.a*q2.a-q1.b*q2.b-q1.c*q2.c-q1.d*q2.d,
											  q1.a*q2.b+q1.b*q2.a+q1.c*q2.d-q1.d*q2.c,
											  q1.a*q2.c-q1.b*q2.d+q1.c*q2.a+q1.d*q2.b,
											  q1.a*q2.d+q1.b*q2.c-q1.c*q2.b+q1.d*q2.a)
Ac_mul_B(q1::Quaternion,q2::Quaternion) = Quaternion(q1.a*q2.a+q1.b*q2.b+q1.c*q2.c+q1.d*q2.d,
											  		 q1.a*q2.b-q1.b*q2.a-q1.c*q2.d+q1.d*q2.c,
											    	 q1.a*q2.c+q1.b*q2.d-q1.c*q2.a-q1.d*q2.b,
											  		 q1.a*q2.d-q1.b*q2.c+q1.c*q2.b-q1.d*q2.a)
A_mul_Bc(q1::Quaternion,q2::Quaternion) = Quaternion(q1.a*q2.a+q1.b*q2.b+q1.c*q2.c+q1.d*q2.d,
											  		-q1.a*q2.b+q1.b*q2.a-q1.c*q2.d+q1.d*q2.c,
											  		-q1.a*q2.c+q1.b*q2.d+q1.c*q2.a-q1.d*q2.b,
											  		-q1.a*q2.d-q1.b*q2.c+q1.c*q2.b+q1.d*q2.a)
# Speed up complex arithmeric
Ac_mul_B(z1::Complex,z2::Complex) = Complex(real(z1)*real(z2)+imag(z1)*imag(z2),
											real(z1)*imag(z2)-imag(z1)*real(z2))
A_mul_Bc(z1::Complex,z2::Complex) = Complex(real(z1)*real(z2)+imag(z1)*imag(z2),
											imag(z1)*real(z2)-real(z1)*imag(z2))


/(q1::Quaternion,q2::Quaternion) = q1*inv(q2)

*(q::Quaternion,b::Bool) = ifelse(b,q,zero(q))
*(b::Bool,q::Quaternion) = ifelse(b,q,zero(q))
*(q::Quaternion,x::Real) = Quaternion(q.a*x,q.b*x,q.c*x,q.d*x)
*(x::Real,q::Quaternion) = Quaternion(x*q.a,x*q.b,x*q.c,x*q.d)
/(q::Quaternion,x::Real) = Quaternion(q.a/x,q.b/x,q.c/x,q.d/x)
/(x::Real,q::Quaternion) = x*inv(q)

-(q::Quaternion) = Quaternion(-q.a,-q.b,-q.c,-q.d)

conj(q::Quaternion) = Quaternion(q.a,-q.b,-q.c,-q.d)
abs2(q::Quaternion) = q.a*q.a+q.b*q.b+q.c*q.c+q.d*q.d
abs(q::Quaternion) = sqrt(abs2(q)) # Not safe
norm(q::Quaternion) = abs(q)
inv(q::Quaternion) = conj(q)/abs2(q)

exp(q::Quaternion) = (v = Quaternion(zero(q.a),q.b,q.c,q.d); absv = abs(v); exp(q.a)*(cos(absv) + v/absv*sin(absv)))
log(q::Quaternion) = (v = Quaternion(zero(q.a),q.b,q.c,q.d); absq = abs(q); log(absq) + v/abs(v)*acos(q.a/absq))
cos(q::Quaternion) = (v = Quaternion(zero(q.a),q.b,q.c,q.d); absv = abs(v); 0.5*(exp(absv*q) + exp(-absv*q)))
sin(q::Quaternion) = (v = Quaternion(zero(q.a),q.b,q.c,q.d); absv = abs(v); 0.5*(exp(absv*q) - exp(-absv*q)))
