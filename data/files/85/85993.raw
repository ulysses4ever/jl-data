using XGBoost

### simple example
# load file from text file, also binary buffer generated by xgboost

dtrain = DMatrix("../data/agaricus.txt.train")
dtest = DMatrix("../data/agaricus.txt.test")

# specify parameters via dict
param = ["max_depth"=>2, "eta"=>1, "silent"=>0, "objective"=>"binary:logistic"]
# param = [("max_depth", 2), ("eta", 1), ("silent", 0), ("objective", "binary:logistic")]

# specify validations set to watch performance
watchlist  = [(dtest,"eval"), (dtrain,"train")]
num_round = 2

bst = xgboost(dtrain, num_round, param=param, watchlist=watchlist)

# this is prediction
preds = predict(bst, dtest)
labels = get_info(dtest, "label")

print ("error=" , sum((preds .> 0.5)!=labels) /float(size(labels)[1]), "\n")

# save model
save(bst, "0001.model")
# dump model
dump_model(bst, "dump.raw.txt")
# dump model with feature map
dump_model(bst, "dump.nice.txt", fmap="../data/featmap.txt")

# save dmatrix into binary buffer
save(dtest, "dtest.buffer")
save(bst, "xgb.model")

# load model and data in
bst2 = Booster("xgb.model")
dtest2 = DMatrix("dtest.buffer")
preds2 = predict(bst2, dtest2)
# assert they are the same
@assert sum(preds2 - preds) == 0

# build dmatrix from dense matrix
#### Error result, guess problem from data representation

function svm2dense(fname::ASCIIString, shape)
    dmx = zeros(Float32, shape)
    label = Float32[]
    fi = open(fname, "r")
    cnt = 1
    for line in eachline(fi)
            line = split(line, " ")
            push!(label, float(line[1]))
            line = line[2:end]
            for itm in line
                        itm = split(itm, ":")
                        dmx[cnt, int(itm[1]) + 1] = float(int(itm[2]))
                    end
            cnt += 1
        end
    close(fi)
    return (dmx, label)
end

train = svm2dense("../data/agaricus.txt.train", (6513, 126))
test = svm2dense("../data/agaricus.txt.test", (1611, 126))

dtrain = DMatrix(train[1], label=train[2]) ### Wrong!

watchlist  = [(dtest, "eval"), (dtrain, "train")]
bst = xgboost(dtrain, num_round, param=param, watchlist=watchlist)


dtrain = DMatrix(sparse(train[1]), label=train[2]) ### Correct
watchlist  = [(dtest,"eval"), (dtrain,"train")]
bst = xgboost(dtrain, num_round, param=param, watchlist=watchlist)

