using Optim
export distxy!

# Grab the 2n coordinates as a single vector
function vector_out(X::SimpleGraphDrawing)
    vv = vlist(X.G)
    n = length(vv)

    x = zeros(2*n)
    for k=1:n
        v = X.xy[vv[k]]
        x[2*k-1] = v[1]
        x[2*k]   = v[2]
    end

    return x
end

# Inverse of vector_out
function vector_in!(X::SimpleGraphDrawing, x::Vector)
    vv = vlist(X.G)
    n = length(vv)

    for k=1:n
        v = vv[k]
        X.xy[v] = x[2*k-1 : 2*k]
    end

    return
end

function distxy!(X::SimpleGraphDrawing;
                 verbose::Bool=true, nits::Integer=0)
    D = dist_matrix(X.G)
    x0 = vector_out(X)

    function score(x::Vector)
        nn = length(x)
        n = NV(X.G)
        s = 0.

        for u=1:(n-1)
            pu = x[2*u-1 : 2*u]
            for v = (u+1):n
                pv = x[2*v-1 : 2*v]
                duv = D[u,v]
                term = (duv - norm(pu-pv))^2 / duv^(1.5)
                s += term
            end
        end
        return s
    end
    if verbose
        println("initial score = ", score(x0))
    end

    if nits > 0
        res = optimize(score,x0,iterations=nits)
    else
        res = optimize(score,x0)
    end


    x1 = res.minimum
    vector_in!(X,x1)
    
    if verbose
        println("final score = ", score(x1))
        println(res.f_calls, " function evaluations")
    end

    return
end
