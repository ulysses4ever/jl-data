push!(LOAD_PATH, ".")
using JuliAMP

function gen_instance(n, rho, alpha, delta)
    k, m = round(Int, ceil(rho * n)), round(Int, ceil(alpha * n))

    x = zeros(n)
    supp = randperm(n)[1:k]
    x[supp] = randn(k)
    F = randn(m, n) / sqrt(n)
    w = sqrt(delta) * randn(m)
    y = F * x + w

    return y, F, x
end

function solve(solver, y, F, opts)
    tic()
    x_hat, mses, _ = solver(y, F, opts)
    rt = toq()
    return rt
end

# Parameters
n = 1024
rho = 0.44
alpha = 0.72
delta = 1e-8

opts = Dict()
opts["prior_prmts"] = [rho, 0.0, 1.0]
opts["t_max"] = 250
opts["disp"] = 0

output = open("julia_runtimes.dat", "w")
for run = 1:1000
    print("Run #$run: ")

    # Generate instance
    y, F, x = gen_instance(n, rho, alpha, delta)

    # Run algorithm(s)
    rt_amp = solve(JuliAMP.iterate_amp, y, F, opts)
    rt_swamp = solve(JuliAMP.iterate_swamp, y, F, opts)

    println("AMP: $(rt_amp)s, SwAMP: $(rt_swamp)s")
    println(output, "$rt_amp\t$rt_swamp")
end
