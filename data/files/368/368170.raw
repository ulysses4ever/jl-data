export v, isInsideTriangle, I, sortData, majorityVote

# Spatial sign function of a vector y
# y = y/||y|| if y != 0, 0 else
function v{T<:Number}(y::AbstractArray{T,1})
    if length(y[y .== 0.0]) == length(y)
        return y
    else
        return y./norm(y)
    end
end

#Helper function for 2-dimensional simplicial depth
#Checks if x in R^d is inside the triangle formed with help of the 3 points d1, d2 and d3 in R^d
#The barycentric coordinate system is used for this test
function isInsideTriangle{T<:Number}(z::AbstractArray{T,1},d1::AbstractArray{T,1},d2::AbstractArray{T,1},d3::AbstractArray{T,1})
    x1 = d1[1]
    y1 = d1[2]
    x2 = d2[1]
    y2 = d2[2]
    x3 = d3[1]
    y3 = d3[2]
    x = z[1]
    y = z[2]
    
    denom = ((y2 - y3)*(x1 - x3) + (x3 - x2)*(y1 - y3))
    a = ((y2 - y3)*(x - x3) + (x3 - x2)*(y - y3)) / denom;
    b = ((y3 - y1)*(x - x3) + (x1 - x3)*(y - y3)) / denom;
    c = 1 - a - b;
 
    return 0 <= a && a <= 1 && 0 <= b && b <= 1 && 0 <= c && c <= 1
end

#indicator function
function I(A::Bool)
    if A == true
        return 1
    else
        return 0
    end
end

#This sorts data after n class labels and stores them in an array of matrices
function sortData{T<:Number}(data::AbstractArray{T,2},classlabels::AbstractVector)
    
    uniqueLabels = sort(unique(classlabels))
    sortedData = cell(length(uniqueLabels))
    
    for i in 1:length(sortedData)
        sortedData[i] = Array{T,2}(zeros(0,length(data[1,:])))
    end
    
    for i in 1:length(data[:,1])
        for j in 1:length(uniqueLabels)
            if classlabels[i] == uniqueLabels[j]
                sortedData[j] = vcat(sortedData[j],data[i,:])
            end
        end
    end
    
    return sortedData
end




function majorityVote(result::AbstractArray{Any,2})
    maj_res = cell(length(result[:,1]))
    for i in 1:length(result[:,1])
        dict_tmp = Dict{Any,Int}()
        for j in result[i,:]
            dict_tmp[j] = get(dict_tmp,j,0)+1
        end
        maj_res[i] = collect(keys(dict_tmp))[indmax(collect(values(dict_tmp)))]
    end
    return maj_res
end