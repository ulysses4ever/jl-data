push!(LOAD_PATH, ".")
using JuliAMP

# Parameters
n = 1024
rho = 1./16
alpha = 3.0
delta = 1e-8

# Generate instance
k, m = round(Int, ceil(rho * n)), round(Int, ceil(alpha * n))

x = zeros(n)
supp = randperm(n)[1:k]
x[supp] = randn(k)
#F = randn(m, n) / sqrt(n)
F = (0. / n) + randn(m, n) / sqrt(n)
w = sqrt(delta) * randn(m)
y = sign(F * x + w)

opts = Dict()
opts["x"] = x
opts["prior_prmts"] = [rho, 0.0, 1.0]
opts["channel_prmts"] = [delta]
opts["t_max"] = 30
opts["disp"] = 1
opts["parallel"] = true     # This is for rBP only

# Run algorithm
#x_hat, mses, elapsed = JuliAMP.iterate_swamp(y, F, opts)
x_hat, mses, elapsed = JuliAMP.iterate_rbp(y, F, opts)
x_hat, mses, elapsed = JuliAMP.iterate_amp(y, F, opts)

println("elapsed time: $elapsed seconds")

# Process results
using PyPlot

@printf("final MSE (dB): %.2f\n", 10 * log10(sum((x / norm(x) - x_hat / norm(x_hat)).^2)))
plot(10 * log10(mses))
xlabel("iteration"); ylabel("MSE (dB)")
show()
savefig("mse.png")
