"""
    Approximate message-passing (AMP) for CS-like problems. See Donoho,
        Maleki and Montanari (2009), Rangan (2010), and Krzakala et al.
        (2011).
"""
function iterate_amp(y, F, opts)
    # Parameters
    x = get(opts, "x", nothing)
    prior_prmts = get(opts, "prior_prmts", nothing)
    t_max = get(opts, "t_max", 100)
    disp = get(opts, "disp", 1)

    if prior_prmts == nothing
        error()
    end

    # Init vars, arrays and other structures
    m, n = size(F)
    sqrF = F.^2

    a, c = zeros(n), ones(n)
    w, v = zeros(m), ones(m)
    d = 1.

    mses = zeros(t_max)

    # Run algorithm
    tic()
    for t = 1:t_max
        w = (y - F * a) + (sqrF * c) .* (w ./ v)
        v = d + sqrF * c
        #s = 1 ./ (sqrF' * (1 ./ v))
        #r = a + s .* (F' * (w ./ v))
        A = sqrF' * (1 ./ v)
        B = a .* A + F' * (w ./ v)

        a_old = a
        #a, c = prior_gb(r, s, prior_prmts)
        a, c = prior_gbc(A, B, prior_prmts)

        d *= sum((w ./ v).^2) / sum(1 ./ v)

        if x != nothing; mses[t] = norm(x - a)^2 / norm(x)^2; end
        if disp == 1
            @printf("t = %d; delta = %.4e, MSE = %.4e, RSS = %.4e\n", 
                t, d, mses[t], norm(y - F * a)^2 / m)
        end
    end
    elapsed = toq()

    return a, mses, elapsed
end
