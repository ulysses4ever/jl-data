const NUCLEIC_IUPAC	= alphabet(nt"ACTGBDHKMNRSVWXY-.",false)

const AMINO_IUPAC	= alphabet(aa"ABCDEFGHIJKLMNOPQRSTUVWXYZ*-.",false)

const AMINO_20_UPPERCASE= alphabet(aa"ACDEFGHIKLMNPQRSTVWY",true)

const DNA_COMPLEMENT = zeros(Nucleotide,256)
      DNA_COMPLEMENT['.'] = '.'
      DNA_COMPLEMENT['-'] = '-'
      DNA_COMPLEMENT['A'] = 'T'
      DNA_COMPLEMENT['B'] = 'V'
      DNA_COMPLEMENT['C'] = 'G'
      DNA_COMPLEMENT['D'] = 'H'
      DNA_COMPLEMENT['G'] = 'C'
      DNA_COMPLEMENT['H'] = 'D'
      DNA_COMPLEMENT['K'] = 'M'
      DNA_COMPLEMENT['M'] = 'K'
      DNA_COMPLEMENT['T'] = 'A'
      DNA_COMPLEMENT['V'] = 'B'
      DNA_COMPLEMENT['S'] = 'S'
      DNA_COMPLEMENT['W'] = 'W'
      DNA_COMPLEMENT['R'] = 'Y'
      DNA_COMPLEMENT['Y'] = 'R'
      DNA_COMPLEMENT['N'] = 'N'
      DNA_COMPLEMENT['X'] = 'X'
      DNA_COMPLEMENT['a'] = 't'
      DNA_COMPLEMENT['b'] = 'v'
      DNA_COMPLEMENT['c'] = 'g'
      DNA_COMPLEMENT['d'] = 'h'
      DNA_COMPLEMENT['g'] = 'c'
      DNA_COMPLEMENT['h'] = 'd'
      DNA_COMPLEMENT['k'] = 'm'
      DNA_COMPLEMENT['m'] = 'k'
      DNA_COMPLEMENT['t'] = 'a'
      DNA_COMPLEMENT['v'] = 'b'
      DNA_COMPLEMENT['s'] = 's'
      DNA_COMPLEMENT['w'] = 'w'
      DNA_COMPLEMENT['r'] = 'y'
      DNA_COMPLEMENT['y'] = 'r'
      DNA_COMPLEMENT['x'] = 'x'
      DNA_COMPLEMENT['n'] = 'n'

const RNA_COMPLEMENT = zeros(Nucleotide,256)
      RNA_COMPLEMENT['.'] = '.'
      RNA_COMPLEMENT['-'] = '-'
      RNA_COMPLEMENT['A'] = 'U'
      RNA_COMPLEMENT['B'] = 'V'
      RNA_COMPLEMENT['C'] = 'G'
      RNA_COMPLEMENT['D'] = 'H'
      RNA_COMPLEMENT['G'] = 'C'
      RNA_COMPLEMENT['H'] = 'D'
      RNA_COMPLEMENT['K'] = 'M'
      RNA_COMPLEMENT['M'] = 'K'
      RNA_COMPLEMENT['U'] = 'A'
      RNA_COMPLEMENT['V'] = 'B'
      RNA_COMPLEMENT['S'] = 'S'
      RNA_COMPLEMENT['W'] = 'W'
      RNA_COMPLEMENT['R'] = 'Y'
      RNA_COMPLEMENT['Y'] = 'R'
      RNA_COMPLEMENT['N'] = 'N'
      RNA_COMPLEMENT['X'] = 'X'
      RNA_COMPLEMENT['a'] = 'u'
      RNA_COMPLEMENT['b'] = 'v'
      RNA_COMPLEMENT['c'] = 'g'
      RNA_COMPLEMENT['d'] = 'h'
      RNA_COMPLEMENT['g'] = 'c'
      RNA_COMPLEMENT['h'] = 'd'
      RNA_COMPLEMENT['k'] = 'm'
      RNA_COMPLEMENT['m'] = 'k'
      RNA_COMPLEMENT['u'] = 'a'
      RNA_COMPLEMENT['v'] = 'b'
      RNA_COMPLEMENT['s'] = 's'
      RNA_COMPLEMENT['w'] = 'w'
      RNA_COMPLEMENT['r'] = 'y'
      RNA_COMPLEMENT['y'] = 'r'
      RNA_COMPLEMENT['x'] = 'x'
      RNA_COMPLEMENT['n'] = 'n'

const AMINO_3LETTERS_TO_1 = (ASCIIString=>AminoAcid)[
		  "ALA"	=>	aminoacid('A'),
		  "ASX"	=>	aminoacid('B'),
		  "CYS"	=>	aminoacid('C'),
 		  "ASP"	=>  aminoacid('D'),
		  "GLU"	=>	aminoacid('E'),
		  "PHE"	=>	aminoacid('F'),
		  "GLY"	=>	aminoacid('G'),
		  "HYS"	=>	aminoacid('H'),
		  "ILE"	=>	aminoacid('I'),
		  "XLE"	=>	aminoacid('J'),
		  "LYS"	=>	aminoacid('K'),
		  "LEU"	=>	aminoacid('L'),
		  "MET"	=>	aminoacid('M'),
		  "ASN"	=>	aminoacid('N'),
		  "PYL"	=>	aminoacid('O'),
		  "PRO"	=>	aminoacid('P'),
		  "GLN"	=>	aminoacid('Q'),
		  "ARG"	=>	aminoacid('R'),
		  "SER"	=>	aminoacid('S'),
		  "THR"	=>	aminoacid('T'),
		  "SEC"	=>	aminoacid('U'),
		  "VAL"	=>	aminoacid('V'),
		  "TPR"	=>	aminoacid('W'),
		  "XXX"	=>	aminoacid('X'),
		  "TYR"	=>	aminoacid('Y'),
		  "GLX"	=>	aminoacid('Z') ]

const AMINO_1LETTER_TO_3 = (AminoAcid=>ASCIIString)[
		  aminoacid('A')	=>	"ALA",
		  aminoacid('B')	=>	"ASX",
		  aminoacid('C')	=>	"CYS",
		  aminoacid('D')	=>	"ASP",
		  aminoacid('E')	=>	"GLU",
		  aminoacid('F')	=>	"PHE",
		  aminoacid('G')	=>	"GLY",
		  aminoacid('H')	=>	"HYS",
		  aminoacid('I')	=>	"ILE",
		  aminoacid('J')	=>	"XLE",
		  aminoacid('K')	=>	"LYS",
		  aminoacid('L')	=>	"LEU",
		  aminoacid('M')	=>	"MET",
		  aminoacid('N')	=>	"ASN",
		  aminoacid('O')	=>	"PYL",
		  aminoacid('P')	=>	"PRO",
		  aminoacid('Q')	=>	"GLN",
		  aminoacid('R')	=>	"ARG",
		  aminoacid('S')	=>	"SER",
		  aminoacid('T')	=>	"THR",
		  aminoacid('U')	=>	"SEC",
		  aminoacid('V')	=>	"VAL",
		  aminoacid('W')	=>	"TPR",
		  aminoacid('X')	=>	"XXX",
		  aminoacid('Y')	=>	"TYR",
		  aminoacid('Z')	=>	"GLX" ]

const NUCLEIC_IUPAC_AMBIGUOUS_DICT = (Nucleotide=>Array{Nucleotide,1})[
			nucleotide('.')	=>	nt".-",
			nucleotide('-')	=>	nt".-",
			nucleotide('A')	=>	nt"A",
			nucleotide('C')	=>	nt"C",
			nucleotide('G')	=>	nt"G",
			nucleotide('T')	=>	nt"TU",
			nucleotide('U')	=>	nt"TU",
			nucleotide('R')	=>	nt"GA",
			nucleotide('Y')	=>	nt"TCU",
			nucleotide('M')	=>	nt"AC",
			nucleotide('K')	=>	nt"GTU",
			nucleotide('S')	=>	nt"GC",
			nucleotide('W')	=>	nt"ATU",
			nucleotide('H')	=>	nt"ACTU",
			nucleotide('B')	=>	nt"GCTU",
			nucleotide('V')	=>	nt"ACG",
			nucleotide('D')	=>	nt"AGTU",
			nucleotide('N')	=>	nt"ACTUG"]

const AMINO_IUPAC_EXTENDED_DICT = (AminoAcid=>Array{AminoAcid,1})[
		  aminoacid('-')	=>	aminoacid(['-'; '.']),
		  aminoacid('.')	=>	aminoacid(['-'; '.']),
		  aminoacid('*')	=>	aminoacid(['*']),
		  aminoacid('A')	=>	aminoacid(['A']),
		  aminoacid('B')	=>	aminoacid(['N'; 'D']),
		  aminoacid('C')	=>	aminoacid(['C']),
		  aminoacid('D')	=>	aminoacid(['D']),
		  aminoacid('E')	=>	aminoacid(['E']),
		  aminoacid('F')	=>	aminoacid(['F']),
		  aminoacid('G')	=>	aminoacid(['G']),
		  aminoacid('H')	=>	aminoacid(['H']),
		  aminoacid('I')	=>	aminoacid(['I']),
		  aminoacid('J')	=>	aminoacid(['I'; 'L']),
		  aminoacid('K')	=>	aminoacid(['K']),
		  aminoacid('L')	=>	aminoacid(['L']),
		  aminoacid('M')	=>	aminoacid(['M']),
		  aminoacid('N')	=>	aminoacid(['N']),
		  aminoacid('O')	=>	aminoacid(['O']),
		  aminoacid('P')	=>	aminoacid(['P']),
		  aminoacid('Q')	=>	aminoacid(['Q']),
		  aminoacid('R')	=>	aminoacid(['R']),
		  aminoacid('S')	=>	aminoacid(['S']),
		  aminoacid('T')	=>	aminoacid(['T']),
		  aminoacid('U')	=>	aminoacid(['U']),
		  aminoacid('V')	=>	aminoacid(['V']),
		  aminoacid('W')	=>	aminoacid(['W']),
		  aminoacid('X')	=>	aminoacid(['A'; 'C'; 'D'; 'E'; 'F'; 'G'; 'H'; 'I'; 'K';'L'; 'M'; 'N'; 'P'; 'Q'; 'R'; 'S'; 'T'; 'V'; 'W'; 'Y']),
		  aminoacid('Y')	=>	aminoacid(['Y']),
		  aminoacid('Z')	=>	aminoacid(['Q'; 'E'])]


## For Use in Regex ##
const _AMBIGUOUS_NUCLEIC_IUPAC = (Nucleotide=>Array{Uint8,1})[
			nucleotide('T')	=>	uint8(['T';'U']),
			nucleotide('U')	=>	uint8(['T';'U']),
			nucleotide('R')	=>	uint8(['R';'G';'A']),
			nucleotide('Y')	=>	uint8(['Y';'T';'C';'U']),
			nucleotide('M')	=>	uint8(['M';'A';'C']),
			nucleotide('K')	=>	uint8(['K';'G';'T';'U']),
			nucleotide('S')	=>	uint8(['S';'G';'C']),
			nucleotide('W')	=>	uint8(['W';'A';'T';'U']),
			nucleotide('H')	=>	uint8(['W';'M';'Y';'H';'A';'C';'T';'U']),
			nucleotide('B')	=>	uint8(['S';'K';'B';'G';'C';'T';'U']),
			nucleotide('V')	=>	uint8(['S';'M';'R';'V';'A';'C';'G']),
			nucleotide('D')	=>	uint8(['W';'K';'R';'D';'A';'G';'T';'U']),
			nucleotide('N')	=>	uint8(['X';'W';'S';'K';'M';'Y';'R';'N';'A';'C';'T';'U';'G']),
			nucleotide('X')	=>	uint8(['X';'W';'S';'K';'M';'Y';'R';'N';'A';'C';'T';'U';'G'])]

## For Use in Regex ##
const _AMBIGUOUS_AMINO_IUPAC = (AminoAcid=>Array{Uint8,1})[
		  aminoacid('B')	=>	uint8(['B'; 'N'; 'D']),
		  aminoacid('X')	=>	uint8(['X'; 'B'; 'Z'; 'A'; 'C'; 'D'; 'E'; 'F'; 'G'; 'H'; 'I'; 'K';'L'; 'M'; 'N'; 'P'; 'Q'; 'R'; 'S'; 'T'; 'V'; 'W'; 'Y'; 'J' ]),
		  aminoacid('Z')	=>	uint8(['Z'; 'Q'; 'E']),
		  aminoacid('J')	=>	uint8(['J'; 'L'; 'I'])]
