export random_walk, random_walk_rating

"""
`random_walk(A)`

returns the rating over time of each active node on an evolving graph by 
random walks. 
"""
function random_walk(A::SparseMatrixCSC{Float64}; 
                     a::Float64 = 0.65, b::Float64=0.85, iter::Int = 20)
    n = A.n
    d1 = A*ones(eltype(A), n)
    d2 = A'*ones(eltype(A), n)
    e1 = spzeros(eltype(A), n)
    e2 = spzeros(eltype(A), n)
    v = ones(eltype(A), n)/n

    @inbounds for (d, e) in ((d1,e1), (d2, e2))
        for i = 1:n
            if d[i] == zero(eltype(A))
                d[i] = convert(eltype(A), 1/n)
                e[i] = one(eltype(A))/n
            else
                d[i] = one(eltype(A))/d[i]
            end
        end
    end

    P1 = Diagonal(d1)*A + e1*sparsevec(ones(eltype(A), n))' 
    P2 = Diagonal(d2)*A' + e2*sparsevec(ones(eltype(A), n))'
    #display(full(P1))
    #display(full(P2))
    H = a*P1 + (1-a)*P2
    K = b*H + (1- b)*ones(eltype(A), n)*ones(eltype(A), n)'/n
    KT = K'
    #display(K*ones(n))
    for i = 1:iter
        v = KT*v
    end
    v, KT
end
random_walk(g::IntMatrixList; a=0.65, b=0.85) = random_walk(float(spmatrix(g)), a=a, b=b)
random_walk(g::EvolvingGraph; a=0.65, b=0.85) = random_walk(int_matrix_list(g), a=a, b=b)

"""
`random_walk_rating(g; a=0.65, b=0.85, issorted=true, verbose=true)`

Return the rating vector and the stochastic matrix.
"""
function random_walk_rating(g::EvolvingGraph; 
                            a::Float64 = 0.65, b::Float64 = 0.85,
                            issorted::Bool = true, verbose::Bool = true)
    ns = nodes(g)
    ts = timestamps(g)
    nn = num_nodes(g)
    v, KT = random_walk(g, a=a, b= b)
    if verbose
        for (i, t) in enumerate(ts)
            z = zip(ns, v[1+nn*(i-1):nn*i])
            if issorted
                display(sort(collect(z), by = x -> x[2]))
            else
                display(collect(z))
            end
        end
    end
    v, KT
end
