module Romeo

include("Request.jl")
include("Response.jl")

export HttpServer,
       run

# exported

type HttpServer
    handle::Function
    port::Integer
    socket::Base.UVServer

    HttpServer(port::Integer, handle::Function) = new(handle, port, Base.TcpServer())
end

function run(server::HttpServer)
    bind(server.socket, Base.IPv4(uint32(0)), uint16(server.port))
    listen(server.socket)

    while true
        socket = accept(server.socket)
        @async process(server, socket)
    end
end

# NOT exported

function process(server::HttpServer, socket::TcpSocket)
    local request, response

    request = Request(socket)
    response = Response(socket)

    server.handle(request, response)

    close(response.socket)
end

end # module Romeo
