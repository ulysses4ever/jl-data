include("dictchannel.jl")

type Nodes
    availabeWorker::Array{Bool, 1} ;  #True if the worker is not busy
    cond_take::Condition  ; 
    Nodes(numberWorker::Int64) = new(fill(true,numberWorker),Condition()) ;
end

type State
    states::Dict{ASCIIString,DictChannel}
    State() = new(Dict{ASCIIString,DictChannel}())
end



type TaskDependancy
    dependency::Array{(ASCIIString,Int64),1} ;
    TaskDependancy() = new(Array((ASCIIString,Int64),1))
end


type Task_algo
    taskName::ASCIIString
    taskdependancy::TaskDependancy ;
    iterationNumber::Int64  ; 
    timeToCompute::Float64 ; 
    nodeToExecute::Nodes ; 
    Task_algo(_taskName::ASCIIString,_taskdependancy::TaskDependancy,_iterationNumber::Int64,_timeToCompute::Float64,node::Nodes) = new(_taskName,_taskdependancy,_iterationNumber,_timeToCompute,node) ; 
end

function +(task_algo::Task_algo,k::Int64)
    temp = Task_algo(task_algo.taskName,task_algo.taskdependancy,task_algo.iterationNumber+k,task_algo.timeToCompute,task_algo.nodeToExecute) ; 
end


function isReady(task_algo::Task_algo,etat::State)
    #wait until the task is executable 
    iterationNumber = task_algo.iterationNumber; 
    taskdependancy = task_algo.taskdependancy.dependency
    for dependency  in  taskdependancy
        wait(etat.states[dependency[1]],iterationNumber+dependency[2]) 
    end
end





function getOneProc(node::Nodes)
    #1er cas il y a un processeur de disponible :
    if(any(node.availabeWorker))

        indexProc = findmax(node.availabeWorker)[2]
        node.availabeWorker[indexProc] = false ; 
        return(indexProc) ; 
    else 
        #on attend qu'un processeur soit dispononible 
        wait(node.cond_take) ; 
        indexProc = findmax(node.availabeWorker)[2]
        node.availabeWorker[indexProc] = false ; 
        return(indexProc) ; 
    end
end