include("FESetModule.jl")
include("FENodeSetModule.jl")
include("MeshExportModule.jl")
include("FEMMBaseModule.jl")
include("IntegRuleModule.jl")
include("FEMMHeatDiffusionModule.jl")
include("MeshModificationModule.jl")
include("MeshQuadrilateralModule.jl")

            
using FESetModule
using FENodeSetModule
using MeshQuadrilateralModule


fens,fes =MeshQuadrilateralModule.Q4block(10.0, 20.0, 20, 23)



using MeshExportModule

X=zeros(size(fens.xyz,1),3)
X[:,1:2]=fens.xyz
S=cos(1/3*X[:,1])+sin(1/2*X[:,2]).^2+X[:,2]/100
X[:,3]=S
MeshExportModule.vtkexportmesh ("a.vtk", fes.conn, X, MeshExportModule.Q4; scalars=S, scalars_name ="scalars_name")



using MeshModificationModule
            
bfes  =MeshModificationModule.meshboundary(fes)
FESetModule.count (bfes)
MeshExportModule.vtkexportmesh ("b.vtk", bfes.conn, X, MeshExportModule.L2)



fens,fes =MeshQuadrilateralModule.Q4elliphole(2.0, 5.0, 8.0, 9.0, 20, 13, 9)

 
using MeshExportModule

X=zeros(size(fens.xyz,1),3)
X[:,1:2]=fens.xyz
S=cos(1/3*X[:,1])+sin(1/2*X[:,2]).^2+X[:,2]/100
X[:,3]=S
MeshExportModule.vtkexportmesh ("a2.vtk", fes.conn, X, MeshExportModule.Q4; scalars=S, scalars_name ="scalars_name")



using MeshModificationModule
bfes  =MeshModificationModule.meshboundary(fes)
FESetModule.count (bfes)
MeshExportModule.vtkexportmesh ("b2.vtk", bfes.conn, X, MeshExportModule.L2)



