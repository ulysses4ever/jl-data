module ForceIntensityModule

using JFFoundationModule: JFInt, JFFlt, JFFltVec, JFIntVec, JFFltMat, JFIntMat

type ForceIntensity
  #   % Distributed force (force intensity) class.
  #     %
  #     % The force intensity class. The physical units are
  #     % force per unit volume, where volume depends on to which manifold
  #     % the force is applied:
  #     % force/length^3 (when applied to a 3-D solid),
  #     % force/length^2 (when applied to a surface),
  #     % force/length^1 (when applied along a curve),
  #     % or force/length^0 (when applied at a point).
  #    % Magnitude of the distributed force.
  #         % Either a constant vector or a function handle.
  getforce::Function #function to return the force intensity magnitude
end


function  ForceIntensity (magn=[0.0])
    #             magn=vector of magnitudes, dimension must correspond to the
    #             %            dimension of the displacement/geometry fields; magn may be an array
    #             %            of doubles (representing a constant, or uniform, force intensity)
    #             % or a function handle/in-line function with signature
    #             %                     function val=f(xyz)
    #             %            or
    #             %                     function val=f(xyz,J)
    #             %            where
    #             %                     xyz = location, at which the force intensity
    #             %                           is to be evaluated.
    #             %                     J = Jacobian matrix at the location above.
    #             %                        The Jacobian matrix could be useful for instance
    #             %                         for the calculation of the normal to the surface.

    self= ForceIntensity ((x,z)->  1.0) # the function will get reset, don't worry
    setforce!(self,magn)
    return self
end

function setforce!(self::ForceIntensity,magn::Union(JFFltMat, JFFlt, Function))
    # Set the magnitude of the force intensity.  Either as a vector of numbers, or as a function.
    if typeof (magn)==JFFlt     # Allow the force intensity to be set as a scalar if there is only a single component
        magn= zeros(JFFlt,1,1)+magn;
    end
    if typeof (magn)==Function
        g(xyz::JFFltMat,J::JFFltMat)=magn(xyz,J)::JFFltMat;
    elseif typeof(magn[1])  <: JFFlt
        g(xyz::JFFltMat,J::JFFltMat)=magn::JFFltMat;
    else
        error("Cannot handle class of magn: " * typeof(magn))
    end
     self.getforce= g;
    return self
end

function getforce!(self::ForceIntensity,f::JFFltMat,xyz::JFFltMat,J::JFFltMat)
    copy!(f,self.getforce(xyz,J));
end

end
