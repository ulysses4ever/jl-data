require("JFinEALE.jl")
using FESetModule
using FENodeSetModule
using MeshQuadrilateralModule
using MeshSelectionModule
using NodalFieldModule
using IntegRuleModule
using PropertyHeatDiffusionModule
using MaterialHeatDiffusionModule
using FEMMHeatDiffusionModule
using ForceIntensityModule



t0 = time()

kappa=0.2*[1.0 0; 0 1.0]; # conductivity matrix
magn = -0.06;# heat flux along the boundary
rin= 1.0;#internal radius
rex= 2.0;#external radius
nr=20; nc=80;
Angle=2*pi;
thickness= 1.0;
tolerance=min(rin/nr, rin/nc/2/pi)/10000;


fens,fes = MeshQuadrilateralModule.Q4annulus(rin,rex,nr,nc,Angle)
FESetModule.setotherdimension!(fes,thickness)
fens,fes = MeshModificationModule.mergenodes(fens, fes, tolerance);
edge_fes = MeshModificationModule.meshboundary (fes);
FESetModule.setotherdimension!(edge_fes,thickness)

geom = NodalFieldModule.NodalField(name ="geom",data =fens.xyz)
Temp = NodalFieldModule.NodalField(name ="Temp",data =zeros(size(fens.xyz,1),1))


l1 =MeshSelectionModule.fenodeselect(fens; box=[0.0 0.0 -rex -rex], inflate = tolerance)
NodalFieldModule.setebc!(Temp,l1,trues(length(l1)),ones(length(l1)),0.0)
NodalFieldModule.applyebc!(Temp)

NodalFieldModule.numberdofs!(Temp)


p=PropertyHeatDiffusionModule.PropertyHeatDiffusion(thermal_conductivity=kappa,specific_heat=0.0)
m=MaterialHeatDiffusionModule.MaterialHeatDiffusion (property = p)
integration_rule = IntegRuleModule.IntegRuleModule.GaussRule (order=2,dim=2)
femm = FEMMHeatDiffusionModule.FEMMHeatDiffusion(fes=fes, material=m, integration_rule=integration_rule)

@time K=FEMMHeatDiffusionModule.conductivity(femm, nothing, geom, Temp)

l1=MeshSelectionModule.feselect(fens,edge_fes,box=[-1.1*rex -0.9*rex -0.5*rex 0.5*rex]);
integration_rule = IntegRuleModule.IntegRuleModule.GaussRule (order=2,dim=1)
FESetModule.subset(edge_fes,l1)
el1femm = FEMMHeatDiffusionModule.FEMMHeatDiffusion(fes=FESetModule.subset(edge_fes,l1), material=m, integration_rule=integration_rule)
fi = ForceIntensityModule.ForceIntensity(magn);
@time F1=-1.0*FEMMHeatDiffusionModule.distribloads(el1femm, nothing, geom, Temp, fi, 2);

l1=MeshSelectionModule.feselect(fens,edge_fes,box=[0.9*rex 1.1*rex -0.5*rex 0.5*rex]);
integration_rule = IntegRuleModule.IntegRuleModule.GaussRule (order=2,dim=1)
el1femm = FEMMHeatDiffusionModule.FEMMHeatDiffusion(fes=FESetModule.subset(edge_fes,l1), material=m, integration_rule=integration_rule)
fi = ForceIntensityModule.ForceIntensity(-magn);
@time F2=-1.0*FEMMHeatDiffusionModule.distribloads(el1femm, nothing, geom, Temp, fi, 2);

@time F3=FEMMHeatDiffusionModule.nzebcloadsconductivity(femm, nothing, geom, Temp);

# show(K)

@time K=cholfact((K+K')/2)
@time U=  K\(F1+F2+F3)
@time NodalFieldModule.scattersysvec!(Temp,U[:])

println("Total time elapsed = ",time() - t0,"s")

using MeshExportModule

File =  "annulus.vtk"
MeshExportModule.vtkexportmesh (File, fes.conn, [geom.values Temp.values], MeshExportModule.Q4; scalars=Temp.values, scalars_name ="Temperature")

show((minimum(Temp.values),maximum(Temp.values)))
true
