using FESetModule
using FENodeSetModule
using MeshQuadrilateralModule
using MeshSelectionModule
using NodalFieldModule
using IntegRuleModule
using PropertyHeatDiffusionModule
using MaterialHeatDiffusionModule
using FEMMHeatDiffusionModule
using ForceIntensityModule

println("""
Heat conduction example described by Amuthan A. Ramabathiran
http://www.codeproject.com/Articles/579983/Finite-Element-programming-in-Julia:
Unit square, with known temperature distribution along the boundary, 
and uniform heat generation rate inside.  Mesh of regular four-node QUADRILATERALS,
in a grid of 1000 x 1000 edges (1M quads, 1M degrees of freedom). 
"""
)
t0 = time()

A= 1.0
thermal_conductivity= eye(2,2); # conductivity matrix
magn = -6.0; #heat source
tempf(x)=(1.0 + x[:,1].^2 + 2*x[:,2].^2);
N=1000;

println("Mesh generation")
@time fens,fes =MeshQuadrilateralModule.Q4block(A, A, N, N)



geom = NodalFieldModule.NodalField(name ="geom",data =fens.xyz)
Temp = NodalFieldModule.NodalField(name ="Temp",data =zeros(size(fens.xyz,1),1))


println("Searching nodes  for BC")
@time l1 =MeshSelectionModule.fenodeselect(fens; box=[0. 0. 0. A], inflate = 1.0/N/100.0)
@time l2 =MeshSelectionModule.fenodeselect(fens; box=[A A 0. A], inflate = 1.0/N/100.0)
@time l3 =MeshSelectionModule.fenodeselect(fens; box=[0. A 0. 0.], inflate = 1.0/N/100.0)
@time l4 =MeshSelectionModule.fenodeselect(fens; box=[0. A A A], inflate = 1.0/N/100.0)
List=[l1, l2, l3, l4];
NodalFieldModule.setebc!(Temp,List,trues(length(List)),ones(length( List)),tempf(geom.values[List,:])[:])
NodalFieldModule.applyebc!(Temp)

NodalFieldModule.numberdofs!(Temp)

t1 = time()

integration_rule = IntegRuleModule.IntegRuleModule.GaussRule (order=2,dim=2)

p=PropertyHeatDiffusionModule.PropertyHeatDiffusion(thermal_conductivity=thermal_conductivity,specific_heat=0.0)

m=MaterialHeatDiffusionModule.MaterialHeatDiffusion (property = p)

femm = FEMMHeatDiffusionModule.FEMMHeatDiffusion(fes=fes, material=m, integration_rule=integration_rule, Rm=Rm1)

println("Conductivity")
@time K=FEMMHeatDiffusionModule.conductivity(femm, nothing, geom, Temp)
#Profile.print()

println("Nonzero EBC")
@time F2=FEMMHeatDiffusionModule.nzebcloadsconductivity(femm, nothing, geom, Temp);
println("Internal heat generation")
fi = ForceIntensityModule.ForceIntensity(magn);
@time F1=FEMMHeatDiffusionModule.distribloads(femm, nothing, geom, Temp, fi, 3);


println("Factorization")
@time K=cholfact((K+K')/2)
println("Solution of the factorized system")
@time U=  K\(F1+F2)
NodalFieldModule.scattersysvec!(Temp,U[:])


println("Total time elapsed = $(time() - t0) [s]")
println("Solution time elapsed = $(time() - t1) [s]")

# using MeshExportModule

# File =  "a.vtk"
# MeshExportModule.vtkexportmesh (File, fes.conn, [geom.values Temp.values], MeshExportModule.Q4; scalars=Temp.values, scalars_name ="Temperature")

Error= 0.0
for k=1:size(fens.xyz,1)
    Error=Error+abs(Temp.values[k,1]-tempf(fens.xyz[k,:]))
end
println("Error =$Error")


true
