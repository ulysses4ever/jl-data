# generates a lcov.info file in the format generated by `geninfo`. This format
# can be parsed by a variety of useful utilities to display coverage info

export LCOV
"""
Coverage.LCOV Module

This module provides functionality to generate LCOV info format files from
Julia coverage data. It exports the `writefile` function.
"""
module LCOV

using Coverage

export writefile

"""
    writefile(outfile::AbstractString, fcs)

Write the given coverage data to a file in LCOV info format. The data can either
be a `FileCoverage` instance or a vector of `FileCoverage` instances.
"""
function writefile(outfile::AbstractString, fcs)
    open(outfile, "w") do f
        write(f, fcs)
    end
end

"""
    write(io::IO, fcs)

Write the given coverage data to an `IO` stream in LCOV info format. The data
can either be a `FileCoverage` instance or a vector of `FileCoverage` instances.
"""
function write end

function write(io::IO, fcs::Vector{FileCoverage})
    for fc in fcs
        write(io, fc)
    end
end

function write(io::IO, fc::FileCoverage)
    instrumented = 0
    covered = 0
    println(io, "SF:$(fc.filename)")
    for (line, cov) in enumerate(fc.coverage)
        (lineinst, linecov) = writeline(io, line, cov)
        instrumented += lineinst
        covered += linecov > 0 ? 1 : 0
    end
    println(io, "LH:$covered")
    println(io, "LF:$instrumented")
    println(io, "end_of_record")
end

# document the writeline function instead of individual methods
"""
    writeline(io::IO, line::Int, count)

Write LCOV data for a single line to the given `IO` stream. Returns a 2-tuple
of the number of lines instrumented (0 or 1) and the count for how many times
the line was executed during testing.
"""
function writeline end

function writeline(io::IO, line::Int, count::Int)
    println(io, "DA:$line,$count")
    (1, count)
end
function writeline(io::IO, line::Int, count::Void)
    # skipped line, nothing to do here
    (0, 0)
end

end
