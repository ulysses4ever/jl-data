A = rand(3,4)
AIP.checksame_inds(A, A)
@test_throws DimensionMismatch AIP.checksame_inds(A, A')
@test isa(@inferred(AIP.storageorder(A)), AIP.FirstToLast)
R = reshape(A, (2,3,2))
@test isa(@inferred(AIP.storageorder(R)), AIP.FirstToLast)
S = sub(A, 1:3, 1:4)
R = reshape(S, (2,3,2))
@test isa(@inferred(AIP.storageorder(R)), AIP.FirstToLast)
B = PermutedDimsArray(A, [2,1])
@test isa(@inferred(AIP.storageorder(B)), AIP.OtherOrder{(2,1)})
R = reshape(B, (2,2,3))
@test isa(@inferred(AIP.storageorder(R)), AIP.NoOrder)

@test @inferred(AIP.contiguous_index((:, :))) == AIP.Contiguous()
@test @inferred(AIP.contiguous_index((:, 3))) == AIP.Contiguous()
@test @inferred(AIP.contiguous_index((3, :))) == AIP.NonContiguous()
@test @inferred(AIP.contiguous_index((3, 3))) == AIP.Contiguous()
@test @inferred(AIP.contiguous_index((:, :, 3))  ) == AIP.Contiguous()
@test @inferred(AIP.contiguous_index((:, :, 1:2))) == AIP.Contiguous()
@test @inferred(AIP.contiguous_index((:, 3, :))  ) == AIP.NonContiguous()
@test @inferred(AIP.contiguous_index((:, 3, 1:2))) == AIP.NonContiguous()

@test isless(CartesianIndex((1,1)), CartesianIndex((2,1)))
@test isless(CartesianIndex((1,1)), CartesianIndex((1,2)))
@test isless(CartesianIndex((2,1)), CartesianIndex((1,2)))
@test !isless(CartesianIndex((1,2)), CartesianIndex((2,1)))
