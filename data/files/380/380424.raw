###
### CompLing.jl
###
module CompLing

# counter type:
# a dict of keys (strings, usually) to their counts,
# with a default value of 0. Also caches the total.
export Counter, counter

# ngrams, uni/bi/tri-grams
export ngrams, unigrams, bigrams, trigrams

# simple tokenizer
export tokenize_ws

# easily parse tagged tokens (like "the/DT")
export token_tag, token_word, token_wordtag

# Porter Stemmer
export stem 

# stopwords
export stopwords

# context free grammars
export ContextFreeProduction,
       is_binary, is_unary,
       ContextFreeGrammar,
       load_cfg, productions, nonterminals, terminals,
       convert_to_chomsky_normal_form, is_chomsky_normal_form,
       collapse_unit_productions, convert_mixed_production

# syntax trees
export TreeNode, ParseTree
## export extract_trees, token_pattern, verify_tree_string


include("util/counter.jl")
include("util/ngrams.jl")
include("stem/porter.jl")
include("preprocess/stopwords.jl")
include("preprocess/tokenize.jl")
include("trees/grammar.jl")
include("trees/tree.jl")

end # module
