# *****************************************************************************
# Written by Ritchie Lee, ritchie.lee@sv.cmu.edu
# *****************************************************************************
# Copyright Ã£ 2015, United States Government, as represented by the
# Administrator of the National Aeronautics and Space Administration. All
# rights reserved.  The Reinforcement Learning Encounter Simulator (RLES)
# platform is licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License. You
# may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0. Unless required by applicable
# law or agreed to in writing, software distributed under the License is
# distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied. See the License for the specific language
# governing permissions and limitations under the License.
# _____________________________________________________________________________
# Reinforcement Learning Encounter Simulator (RLES) includes the following
# third party software. The SISLES.jl package is licensed under the MIT Expat
# License: Copyright (c) 2014: Youngjun Kim.
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED
# "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
# NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
# PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# *****************************************************************************

"""
Example usage:
"""
module LogSystems

export HeaderMap, LogSystem, get_observer, register_log!, send_to!, send_custom_to!

import Compat.ASCIIString

using RLESUtils, Observers, Loggers

typealias NameMap Dict{ASCIIString,Vector{ASCIIString}}
typealias TypeMap Dict{ASCIIString,Vector{DataType}}
typealias FuncMap Dict{ASCIIString,Vector{Function}}

type HeaderMap
    names::NameMap
    types::TypeMap
end
HeaderMap() = HeaderMap(NameMap(), TypeMap())

type LogSystem
    map::HeaderMap
    observer::Observer
    f::FuncMap
end
LogSystem() = LogSystem(HeaderMap(), Observer(), FuncMap())

get_observer(logsys::LogSystem) = logsys.observer

"""
Register a log with the system to make it available for users
"""
function register_log!{S<:AbstractString}(hdr_map::HeaderMap, label::AbstractString,
    hdr_names::Vector{S}, hdr_types::Vector{DataType})
    hdr_map.names[label] = hdr_names
    hdr_map.types[label] = hdr_types
end
"""
Register a log with the system to make it available for users
"""
function register_log!{S<:AbstractString}(logsys::LogSystem, label::AbstractString, 
    hdr_names::Vector{S}, hdr_types::Vector{DataType})  
    register_log!(logsys.map, label, hdr_names, hdr_types) 
end

"""
List a number of logs to listen to, and send them to IO using canned format
"""
function send_to!{S<:AbstractString}(io::IO, logsys::LogSystem, log_names::Vector{S}) 
    for log in log_names
        add_observer(logsys.observer, log, x->begin
            s = join(["$name=$val" for (name,val) in zip(logsys.map.names[log],x)], ",")
            println(io, "$log: [$s]")
        end)
    end
end
"""
Send a log to IO with custom text generated by user f(x)
"""
function send_to!(io::IO, logsys::LogSystem, log_name::AbstractString, f::Function) 
    add_observer(logsys.observer, log_name, x->println(io, f(x)))
end
"""
Send log directly to a TaggedDFLogger
"""
function send_to!{S<:AbstractString}(logger::TaggedDFLogger, logsys::LogSystem, log_names::Vector{S})
    for log_name in log_names
        add_folder!(logger, log_name, logsys.map.types[log_name], logsys.map.names[log_name])
        add_observer(logsys.observer, log_name, push!_f(logger, log_name))
    end
end
"""
Listen to a a registered log, but apply a transform to it before saving it to 
a logger
"""
function send_custom_to!{S<:AbstractString}(logger::TaggedDFLogger, logsys::LogSystem, 
    log_name::AbstractString, new_log_name::AbstractString, hdr_names::Vector{S}, 
    hdr_types::Vector{DataType}, f::Function)

    add_folder!(logger, new_log_name, hdr_types, hdr_names)
    add_observer(logsys.observer, log_name, x->push!(logger, new_log_name, f(x)::Vector))
end

end #module
