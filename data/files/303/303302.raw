# Julia wrapper for header: ../../deps/RealDouble/petsc-3.6.0/include/petsc.h
# Automatically generated using Clang.jl wrap_c, version 0.0.0


function PetscIsInfOrNanReal(arg0::Type{Float32},arg1::Float32)
    err = ccall((:PetscIsInfOrNanReal,petscRealSingle),PetscErrorCode,(Float32,),arg1)
    return err
end

function PetscIsNormalReal(arg0::Type{Float32},arg1::Float32)
    err = ccall((:PetscIsNormalReal,petscRealSingle),PetscBool,(Float32,),arg1)
    return err
end

function PetscSetHelpVersionFunctions(arg0::Type{Float32},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscSetHelpVersionFunctions,petscRealSingle),PetscErrorCode,(Ptr{Void},Ptr{Void}),arg1,arg2)
    return err
end

function PetscCommDuplicate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{MPI_Comm},StridedArray{MPI_Comm},Ptr{MPI_Comm},Ref{MPI_Comm}},arg3::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:PetscCommDuplicate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{comm_type},Ptr{Cint}),arg1,arg2,arg3)
    return err
end

function PetscCommDestroy(arg0::Type{Float32},arg1::Union{Ptr{MPI_Comm},StridedArray{MPI_Comm},Ptr{MPI_Comm},Ref{MPI_Comm}})
    err = ccall((:PetscCommDestroy,petscRealSingle),PetscErrorCode,(Ptr{comm_type},),arg1)
    return err
end

function PetscMallocSet(arg0::Type{Float32},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscMallocSet,petscRealSingle),PetscErrorCode,(Ptr{Void},Ptr{Void}),arg1,arg2)
    return err
end

function PetscMallocClear(arg0::Type{Float32})
    err = ccall((:PetscMallocClear,petscRealSingle),PetscErrorCode,())
    return err
end

#= skipping function with undefined symbols:
 function PetscMallocDump(arg0::Type{Float32},arg1::Union{Ptr{FILE},StridedArray{FILE},Ptr{FILE},Ref{FILE}})
    ccall((:PetscMallocDump,petscRealSingle),PetscErrorCode,(Ptr{FILE},),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscMallocDumpLog(arg0::Type{Float32},arg1::Union{Ptr{FILE},StridedArray{FILE},Ptr{FILE},Ref{FILE}})
    ccall((:PetscMallocDumpLog,petscRealSingle),PetscErrorCode,(Ptr{FILE},),arg1)
end
=#
function PetscMallocGetCurrentUsage(arg0::Type{Float32},arg1::Union{Ptr{PetscLogDouble},StridedArray{PetscLogDouble},Ptr{PetscLogDouble},Ref{PetscLogDouble}})
    err = ccall((:PetscMallocGetCurrentUsage,petscRealSingle),PetscErrorCode,(Ptr{PetscLogDouble},),arg1)
    return err
end

function PetscMallocGetMaximumUsage(arg0::Type{Float32},arg1::Union{Ptr{PetscLogDouble},StridedArray{PetscLogDouble},Ptr{PetscLogDouble},Ref{PetscLogDouble}})
    err = ccall((:PetscMallocGetMaximumUsage,petscRealSingle),PetscErrorCode,(Ptr{PetscLogDouble},),arg1)
    return err
end

function PetscMallocDebug(arg0::Type{Float32},arg1::PetscBool)
    err = ccall((:PetscMallocDebug,petscRealSingle),PetscErrorCode,(PetscBool,),arg1)
    return err
end

function PetscMallocGetDebug(arg0::Type{Float32},arg1::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscMallocGetDebug,petscRealSingle),PetscErrorCode,(Ptr{PetscBool},),arg1)
    return err
end

function PetscMallocValidate(arg0::Type{Float32},arg1::Integer,arg2::Union{ByteString,Symbol},arg3::Union{ByteString,Symbol})
    err = ccall((:PetscMallocValidate,petscRealSingle),PetscErrorCode,(Cint,Cstring,Cstring),arg1,arg2,arg3)
    return err
end

function PetscMallocSetDumpLog(arg0::Type{Float32})
    err = ccall((:PetscMallocSetDumpLog,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscMallocSetDumpLogThreshold(arg0::Type{Float32},arg1::PetscLogDouble)
    err = ccall((:PetscMallocSetDumpLogThreshold,petscRealSingle),PetscErrorCode,(PetscLogDouble,),arg1)
    return err
end

function PetscMallocGetDumpLog(arg0::Type{Float32},arg1::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscMallocGetDumpLog,petscRealSingle),PetscErrorCode,(Ptr{PetscBool},),arg1)
    return err
end

#= skipping function with undefined symbols:
 function PetscDataTypeToMPIDataType(arg0::Type{Float32},arg1::PetscDataType,arg2::Union{Ptr{MPI_Datatype},StridedArray{MPI_Datatype},Ptr{MPI_Datatype},Ref{MPI_Datatype}})
    ccall((:PetscDataTypeToMPIDataType,petscRealSingle),PetscErrorCode,(PetscDataType,Ptr{MPI_Datatype}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscMPIDataTypeToPetscDataType(arg0::Type{Float32},arg1::MPI_Datatype,arg2::Union{Ptr{PetscDataType},StridedArray{PetscDataType},Ptr{PetscDataType},Ref{PetscDataType}})
    ccall((:PetscMPIDataTypeToPetscDataType,petscRealSingle),PetscErrorCode,(MPI_Datatype,Ptr{PetscDataType}),arg1,arg2)
end
=#
function PetscDataTypeGetSize(arg0::Type{Float32},arg1::PetscDataType,arg2::Union{Ptr{Csize_t},StridedArray{Csize_t},Ptr{Csize_t},Ref{Csize_t}})
    err = ccall((:PetscDataTypeGetSize,petscRealSingle),PetscErrorCode,(PetscDataType,Ptr{Csize_t}),arg1,arg2)
    return err
end

function PetscDataTypeFromString(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{Ptr{PetscDataType},StridedArray{PetscDataType},Ptr{PetscDataType},Ref{PetscDataType}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscDataTypeFromString,petscRealSingle),PetscErrorCode,(Cstring,Ptr{PetscDataType},Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function PetscBitMemcpy(arg0::Type{Float32},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg2::Integer,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Integer,arg5::Integer,arg6::PetscDataType)
    err = ccall((:PetscBitMemcpy,petscRealSingle),PetscErrorCode,(Ptr{Void},Int64,Ptr{Void},Int64,Int64,PetscDataType),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscMemmove(arg0::Type{Float32},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Csize_t)
    err = ccall((:PetscMemmove,petscRealSingle),PetscErrorCode,(Ptr{Void},Ptr{Void},Csize_t),arg1,arg2,arg3)
    return err
end

function PetscMemcmp(arg0::Type{Float32},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Csize_t,arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscMemcmp,petscRealSingle),PetscErrorCode,(Ptr{Void},Ptr{Void},Csize_t,Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function PetscStrlen(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{Ptr{Csize_t},StridedArray{Csize_t},Ptr{Csize_t},Ref{Csize_t}})
    err = ccall((:PetscStrlen,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Csize_t}),arg1,arg2)
    return err
end

function PetscStrToArray(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::UInt8,arg3::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}},arg4::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}})
    err = ccall((:PetscStrToArray,petscRealSingle),PetscErrorCode,(Cstring,UInt8,Ptr{Cint},Ptr{Ptr{Ptr{UInt8}}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscStrToArrayDestroy(arg0::Type{Float32},arg1::Integer,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscStrToArrayDestroy,petscRealSingle),PetscErrorCode,(Cint,Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PetscStrcmp(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{ByteString,Symbol},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscStrcmp,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function PetscStrgrt(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{ByteString,Symbol},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscStrgrt,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function PetscStrcasecmp(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{ByteString,Symbol},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscStrcasecmp,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function PetscStrncmp(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{ByteString,Symbol},arg3::Csize_t,arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscStrncmp,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Csize_t,Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function PetscStrcpy(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{ByteString,Symbol})
    err = ccall((:PetscStrcpy,petscRealSingle),PetscErrorCode,(Cstring,Cstring),arg1,arg2)
    return err
end

function PetscStrcat(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{ByteString,Symbol})
    err = ccall((:PetscStrcat,petscRealSingle),PetscErrorCode,(Cstring,Cstring),arg1,arg2)
    return err
end

function PetscStrncat(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{ByteString,Symbol},arg3::Csize_t)
    err = ccall((:PetscStrncat,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Csize_t),arg1,arg2,arg3)
    return err
end

function PetscStrncpy(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{ByteString,Symbol},arg3::Csize_t)
    err = ccall((:PetscStrncpy,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Csize_t),arg1,arg2,arg3)
    return err
end

function PetscStrchr(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::UInt8,arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscStrchr,petscRealSingle),PetscErrorCode,(Cstring,UInt8,Ptr{Ptr{UInt8}}),arg1,arg2,arg3)
    return err
end

function PetscStrtolower(arg0::Type{Float32},arg1::Union{ByteString,Symbol})
    err = ccall((:PetscStrtolower,petscRealSingle),PetscErrorCode,(Cstring,),arg1)
    return err
end

function PetscStrtoupper(arg0::Type{Float32},arg1::Union{ByteString,Symbol})
    err = ccall((:PetscStrtoupper,petscRealSingle),PetscErrorCode,(Cstring,),arg1)
    return err
end

function PetscStrrchr(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::UInt8,arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscStrrchr,petscRealSingle),PetscErrorCode,(Cstring,UInt8,Ptr{Ptr{UInt8}}),arg1,arg2,arg3)
    return err
end

function PetscStrstr(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{ByteString,Symbol},arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscStrstr,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Ptr{Ptr{UInt8}}),arg1,arg2,arg3)
    return err
end

function PetscStrrstr(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{ByteString,Symbol},arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscStrrstr,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Ptr{Ptr{UInt8}}),arg1,arg2,arg3)
    return err
end

function PetscStrendswith(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{ByteString,Symbol},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscStrendswith,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function PetscStrbeginswith(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{ByteString,Symbol},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscStrbeginswith,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function PetscStrendswithwhich(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscStrendswithwhich,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Ptr{UInt8}},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PetscStrallocpy(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscStrallocpy,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PetscStrArrayallocpy(arg0::Type{Float32},arg1::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg2::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}})
    err = ccall((:PetscStrArrayallocpy,petscRealSingle),PetscErrorCode,(Ptr{Ptr{UInt8}},Ptr{Ptr{Ptr{UInt8}}}),arg1,arg2)
    return err
end

function PetscStrArrayDestroy(arg0::Type{Float32},arg1::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}})
    err = ccall((:PetscStrArrayDestroy,petscRealSingle),PetscErrorCode,(Ptr{Ptr{Ptr{UInt8}}},),arg1)
    return err
end

function PetscStrNArrayallocpy(arg0::Type{Float32},arg1::Integer,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg3::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}})
    err = ccall((:PetscStrNArrayallocpy,petscRealSingle),PetscErrorCode,(Int64,Ptr{Ptr{UInt8}},Ptr{Ptr{Ptr{UInt8}}}),arg1,arg2,arg3)
    return err
end

function PetscStrNArrayDestroy(arg0::Type{Float32},arg1::Integer,arg2::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}})
    err = ccall((:PetscStrNArrayDestroy,petscRealSingle),PetscErrorCode,(Int64,Ptr{Ptr{Ptr{UInt8}}}),arg1,arg2)
    return err
end

function PetscStrreplace(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Symbol},arg3::Union{ByteString,Symbol},arg4::Csize_t)
    err = ccall((:PetscStrreplace,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Cstring,Csize_t),arg1,arg2,arg3,arg4)
    return err
end

function PetscStrcmpNoError(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{ByteString,Symbol},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscStrcmpNoError,petscRealSingle),Void,(Cstring,Cstring,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

#= skipping function with undefined symbols:
 function PetscTokenCreate(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::UInt8,arg3::Union{Ptr{PetscToken},StridedArray{PetscToken},Ptr{PetscToken},Ref{PetscToken}})
    ccall((:PetscTokenCreate,petscRealSingle),PetscErrorCode,(Cstring,UInt8,Ptr{PetscToken}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscTokenFind(arg0::Type{Float32},arg1::PetscToken,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    ccall((:PetscTokenFind,petscRealSingle),PetscErrorCode,(PetscToken,Ptr{Ptr{UInt8}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscTokenDestroy(arg0::Type{Float32},arg1::Union{Ptr{PetscToken},StridedArray{PetscToken},Ptr{PetscToken},Ref{PetscToken}})
    ccall((:PetscTokenDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscToken},),arg1)
end
=#
function PetscEListFind(arg0::Type{Float32},arg1::Integer,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg3::Union{ByteString,Symbol},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscEListFind,petscRealSingle),PetscErrorCode,(Int64,Ptr{Ptr{UInt8}},Cstring,Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscEnumFind(arg0::Type{Float32},arg1::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg2::Union{ByteString,Symbol},arg3::Union{Ptr{PetscEnum},StridedArray{PetscEnum},Ptr{PetscEnum},Ref{PetscEnum}},arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscEnumFind,petscRealSingle),PetscErrorCode,(Ptr{Ptr{UInt8}},Cstring,Ptr{PetscEnum},Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function PetscMaxSum(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscMaxSum,petscRealSingle),PetscErrorCode,(comm_type,Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

#= skipping function with undefined symbols:
 function MPIULong_Send(arg0::Type{Float32},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg2::Integer,arg3::MPI_Datatype,arg4::PetscMPIInt,arg5::PetscMPIInt,arg6::MPI_Comm)
    ccall((:MPIULong_Send,petscRealSingle),PetscErrorCode,(Ptr{Void},Int64,MPI_Datatype,PetscMPIInt,PetscMPIInt,comm_type),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
#= skipping function with undefined symbols:
 function MPIULong_Recv(arg0::Type{Float32},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg2::Integer,arg3::MPI_Datatype,arg4::PetscMPIInt,arg5::PetscMPIInt,arg6::MPI_Comm)
    ccall((:MPIULong_Recv,petscRealSingle),PetscErrorCode,(Ptr{Void},Int64,MPI_Datatype,PetscMPIInt,PetscMPIInt,comm_type),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
function PetscErrorPrintfInitialize(arg0::Type{Float32})
    err = ccall((:PetscErrorPrintfInitialize,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscErrorMessage(arg0::Type{Float32},arg1::Integer,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscErrorMessage,petscRealSingle),PetscErrorCode,(Cint,Ptr{Ptr{UInt8}},Ptr{Ptr{UInt8}}),arg1,arg2,arg3)
    return err
end

function PetscTraceBackErrorHandler(arg0::Type{Float32},arg1::MPI_Comm,arg2::Integer,arg3::Union{ByteString,Symbol},arg4::Union{ByteString,Symbol},arg5::PetscErrorCode,arg6::PetscErrorType,arg7::Union{ByteString,Symbol},arg8::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscTraceBackErrorHandler,petscRealSingle),PetscErrorCode,(comm_type,Cint,Cstring,Cstring,PetscErrorCode,PetscErrorType,Cstring,Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function PetscIgnoreErrorHandler(arg0::Type{Float32},arg1::MPI_Comm,arg2::Integer,arg3::Union{ByteString,Symbol},arg4::Union{ByteString,Symbol},arg5::PetscErrorCode,arg6::PetscErrorType,arg7::Union{ByteString,Symbol},arg8::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscIgnoreErrorHandler,petscRealSingle),PetscErrorCode,(comm_type,Cint,Cstring,Cstring,PetscErrorCode,PetscErrorType,Cstring,Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function PetscEmacsClientErrorHandler(arg0::Type{Float32},arg1::MPI_Comm,arg2::Integer,arg3::Union{ByteString,Symbol},arg4::Union{ByteString,Symbol},arg5::PetscErrorCode,arg6::PetscErrorType,arg7::Union{ByteString,Symbol},arg8::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscEmacsClientErrorHandler,petscRealSingle),PetscErrorCode,(comm_type,Cint,Cstring,Cstring,PetscErrorCode,PetscErrorType,Cstring,Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function PetscMPIAbortErrorHandler(arg0::Type{Float32},arg1::MPI_Comm,arg2::Integer,arg3::Union{ByteString,Symbol},arg4::Union{ByteString,Symbol},arg5::PetscErrorCode,arg6::PetscErrorType,arg7::Union{ByteString,Symbol},arg8::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscMPIAbortErrorHandler,petscRealSingle),PetscErrorCode,(comm_type,Cint,Cstring,Cstring,PetscErrorCode,PetscErrorType,Cstring,Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function PetscAbortErrorHandler(arg0::Type{Float32},arg1::MPI_Comm,arg2::Integer,arg3::Union{ByteString,Symbol},arg4::Union{ByteString,Symbol},arg5::PetscErrorCode,arg6::PetscErrorType,arg7::Union{ByteString,Symbol},arg8::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscAbortErrorHandler,petscRealSingle),PetscErrorCode,(comm_type,Cint,Cstring,Cstring,PetscErrorCode,PetscErrorType,Cstring,Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function PetscAttachDebuggerErrorHandler(arg0::Type{Float32},arg1::MPI_Comm,arg2::Integer,arg3::Union{ByteString,Symbol},arg4::Union{ByteString,Symbol},arg5::PetscErrorCode,arg6::PetscErrorType,arg7::Union{ByteString,Symbol},arg8::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscAttachDebuggerErrorHandler,petscRealSingle),PetscErrorCode,(comm_type,Cint,Cstring,Cstring,PetscErrorCode,PetscErrorType,Cstring,Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function PetscReturnErrorHandler(arg0::Type{Float32},arg1::MPI_Comm,arg2::Integer,arg3::Union{ByteString,Symbol},arg4::Union{ByteString,Symbol},arg5::PetscErrorCode,arg6::PetscErrorType,arg7::Union{ByteString,Symbol},arg8::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscReturnErrorHandler,petscRealSingle),PetscErrorCode,(comm_type,Cint,Cstring,Cstring,PetscErrorCode,PetscErrorType,Cstring,Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function PetscPushErrorHandler(arg0::Type{Float32},handler::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscPushErrorHandler,petscRealSingle),PetscErrorCode,(Ptr{Void},Ptr{Void}),handler,arg1)
    return err
end

function PetscPopErrorHandler(arg0::Type{Float32})
    err = ccall((:PetscPopErrorHandler,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscSignalHandlerDefault(arg0::Type{Float32},arg1::Integer,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscSignalHandlerDefault,petscRealSingle),PetscErrorCode,(Cint,Ptr{Void}),arg1,arg2)
    return err
end

function PetscPushSignalHandler(arg0::Type{Float32},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscPushSignalHandler,petscRealSingle),PetscErrorCode,(Ptr{Void},Ptr{Void}),arg1,arg2)
    return err
end

function PetscPopSignalHandler(arg0::Type{Float32})
    err = ccall((:PetscPopSignalHandler,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscCheckPointerSetIntensity(arg0::Type{Float32},arg1::Integer)
    err = ccall((:PetscCheckPointerSetIntensity,petscRealSingle),PetscErrorCode,(Int64,),arg1)
    return err
end

function PetscSetFPTrap(arg0::Type{Float32},arg1::PetscFPTrap)
    err = ccall((:PetscSetFPTrap,petscRealSingle),PetscErrorCode,(PetscFPTrap,),arg1)
    return err
end

function PetscFPTrapPush(arg0::Type{Float32},arg1::PetscFPTrap)
    err = ccall((:PetscFPTrapPush,petscRealSingle),PetscErrorCode,(PetscFPTrap,),arg1)
    return err
end

function PetscFPTrapPop(arg0::Type{Float32})
    err = ccall((:PetscFPTrapPop,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscStackCopy(arg0::Type{Float32},arg1::Union{Ptr{PetscStack},StridedArray{PetscStack},Ptr{PetscStack},Ref{PetscStack}},arg2::Union{Ptr{PetscStack},StridedArray{PetscStack},Ptr{PetscStack},Ref{PetscStack}})
    err = ccall((:PetscStackCopy,petscRealSingle),PetscErrorCode,(Ptr{PetscStack},Ptr{PetscStack}),arg1,arg2)
    return err
end

#= skipping function with undefined symbols:
 function PetscStackPrint(arg0::Type{Float32},arg1::Union{Ptr{PetscStack},StridedArray{PetscStack},Ptr{PetscStack},Ref{PetscStack}},arg2::Union{Ptr{FILE},StridedArray{FILE},Ptr{FILE},Ref{FILE}})
    ccall((:PetscStackPrint,petscRealSingle),PetscErrorCode,(Ptr{PetscStack},Ptr{FILE}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscStackView(arg0::Type{Float32},arg1::Union{Ptr{FILE},StridedArray{FILE},Ptr{FILE},Ref{FILE}})
    ccall((:PetscStackView,petscRealSingle),PetscErrorCode,(Ptr{FILE},),arg1)
end
=#
function PetscStackDestroy(arg0::Type{Float32})
    err = ccall((:PetscStackDestroy,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscClassIdRegister(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{Ptr{PetscClassId},StridedArray{PetscClassId},Ptr{PetscClassId},Ref{PetscClassId}})
    err = ccall((:PetscClassIdRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{PetscClassId}),arg1,arg2)
    return err
end

function PetscMemoryGetCurrentUsage(arg0::Type{Float32},arg1::Union{Ptr{PetscLogDouble},StridedArray{PetscLogDouble},Ptr{PetscLogDouble},Ref{PetscLogDouble}})
    err = ccall((:PetscMemoryGetCurrentUsage,petscRealSingle),PetscErrorCode,(Ptr{PetscLogDouble},),arg1)
    return err
end

function PetscMemoryGetMaximumUsage(arg0::Type{Float32},arg1::Union{Ptr{PetscLogDouble},StridedArray{PetscLogDouble},Ptr{PetscLogDouble},Ref{PetscLogDouble}})
    err = ccall((:PetscMemoryGetMaximumUsage,petscRealSingle),PetscErrorCode,(Ptr{PetscLogDouble},),arg1)
    return err
end

function PetscMemorySetGetMaximumUsage(arg0::Type{Float32})
    err = ccall((:PetscMemorySetGetMaximumUsage,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscMemoryTrace(arg0::Type{Float32},arg1::Union{ByteString,Symbol})
    err = ccall((:PetscMemoryTrace,petscRealSingle),PetscErrorCode,(Cstring,),arg1)
    return err
end

function PetscInfoAllow(arg0::Type{Float32},arg1::PetscBool,arg2::Union{ByteString,Symbol})
    err = ccall((:PetscInfoAllow,petscRealSingle),PetscErrorCode,(PetscBool,Cstring),arg1,arg2)
    return err
end

function PetscSleep(arg0::Type{Float32},arg1::Float32)
    err = ccall((:PetscSleep,petscRealSingle),PetscErrorCode,(Float32,),arg1)
    return err
end

function PetscInitialize(arg0::Type{Float32},arg1::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}},arg2::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}},arg3::Union{ByteString,Symbol},arg4::Union{ByteString,Symbol})
    err = ccall((:PetscInitialize,petscRealSingle),PetscErrorCode,(Ptr{Cint},Ptr{Ptr{Ptr{UInt8}}},Cstring,Cstring),arg1,arg2,arg3,arg4)
    return err
end

function PetscInitializeNoPointers(arg0::Type{Float32},arg1::Integer,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg3::Union{ByteString,Symbol},arg4::Union{ByteString,Symbol})
    err = ccall((:PetscInitializeNoPointers,petscRealSingle),PetscErrorCode,(Cint,Ptr{Ptr{UInt8}},Cstring,Cstring),arg1,arg2,arg3,arg4)
    return err
end

function PetscInitializeNoArguments(arg0::Type{Float32})
    err = ccall((:PetscInitializeNoArguments,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscInitialized(arg0::Type{Float32},arg1::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscInitialized,petscRealSingle),PetscErrorCode,(Ptr{PetscBool},),arg1)
    return err
end

function PetscFinalized(arg0::Type{Float32},arg1::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscFinalized,petscRealSingle),PetscErrorCode,(Ptr{PetscBool},),arg1)
    return err
end

function PetscFinalize(arg0::Type{Float32})
    err = ccall((:PetscFinalize,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscInitializeFortran(arg0::Type{Float32})
    err = ccall((:PetscInitializeFortran,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscGetArgs(arg0::Type{Float32},arg1::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}},arg2::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}})
    err = ccall((:PetscGetArgs,petscRealSingle),PetscErrorCode,(Ptr{Cint},Ptr{Ptr{Ptr{UInt8}}}),arg1,arg2)
    return err
end

function PetscGetArguments(arg0::Type{Float32},arg1::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}})
    err = ccall((:PetscGetArguments,petscRealSingle),PetscErrorCode,(Ptr{Ptr{Ptr{UInt8}}},),arg1)
    return err
end

function PetscFreeArguments(arg0::Type{Float32},arg1::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscFreeArguments,petscRealSingle),PetscErrorCode,(Ptr{Ptr{UInt8}},),arg1)
    return err
end

function PetscEnd(arg0::Type{Float32})
    err = ccall((:PetscEnd,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscSysInitializePackage(arg0::Type{Float32})
    err = ccall((:PetscSysInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscPythonInitialize(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{ByteString,Symbol})
    err = ccall((:PetscPythonInitialize,petscRealSingle),PetscErrorCode,(Cstring,Cstring),arg1,arg2)
    return err
end

function PetscPythonFinalize(arg0::Type{Float32})
    err = ccall((:PetscPythonFinalize,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscPythonPrintError(arg0::Type{Float32})
    err = ccall((:PetscPythonPrintError,petscRealSingle),PetscErrorCode,())
    return err
end

#= skipping function with undefined symbols:
 function PetscPythonMonitorSet(arg0::Type{Float32},arg1::PetscObject,arg2::Union{ByteString,Symbol})
    ccall((:PetscPythonMonitorSet,petscRealSingle),PetscErrorCode,(PetscObject,Cstring),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscObjectDestroy(arg0::Type{Float32},arg1::Union{Ptr{PetscObject},StridedArray{PetscObject},Ptr{PetscObject},Ref{PetscObject}})
    ccall((:PetscObjectDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscObject},),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscObjectGetComm(arg0::Type{Float32},arg1::PetscObject,arg2::Union{Ptr{MPI_Comm},StridedArray{MPI_Comm},Ptr{MPI_Comm},Ref{MPI_Comm}})
    ccall((:PetscObjectGetComm,petscRealSingle),PetscErrorCode,(PetscObject,Ptr{comm_type}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscObjectGetClassId(arg0::Type{Float32},arg1::PetscObject,arg2::Union{Ptr{PetscClassId},StridedArray{PetscClassId},Ptr{PetscClassId},Ref{PetscClassId}})
    ccall((:PetscObjectGetClassId,petscRealSingle),PetscErrorCode,(PetscObject,Ptr{PetscClassId}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscObjectGetClassName(arg0::Type{Float32},arg1::PetscObject,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    ccall((:PetscObjectGetClassName,petscRealSingle),PetscErrorCode,(PetscObject,Ptr{Ptr{UInt8}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscObjectSetType(arg0::Type{Float32},arg1::PetscObject,arg2::Union{ByteString,Symbol})
    ccall((:PetscObjectSetType,petscRealSingle),PetscErrorCode,(PetscObject,Cstring),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscObjectSetPrecision(arg0::Type{Float32},arg1::PetscObject,arg2::PetscPrecision)
    ccall((:PetscObjectSetPrecision,petscRealSingle),PetscErrorCode,(PetscObject,PetscPrecision),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscObjectGetType(arg0::Type{Float32},arg1::PetscObject,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    ccall((:PetscObjectGetType,petscRealSingle),PetscErrorCode,(PetscObject,Ptr{Ptr{UInt8}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscObjectSetName(arg0::Type{Float32},arg1::PetscObject,arg2::Union{ByteString,Symbol})
    ccall((:PetscObjectSetName,petscRealSingle),PetscErrorCode,(PetscObject,Cstring),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscObjectGetName(arg0::Type{Float32},arg1::PetscObject,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    ccall((:PetscObjectGetName,petscRealSingle),PetscErrorCode,(PetscObject,Ptr{Ptr{UInt8}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscObjectSetTabLevel(arg0::Type{Float32},arg1::PetscObject,arg2::Integer)
    ccall((:PetscObjectSetTabLevel,petscRealSingle),PetscErrorCode,(PetscObject,Int64),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscObjectGetTabLevel(arg0::Type{Float32},arg1::PetscObject,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:PetscObjectGetTabLevel,petscRealSingle),PetscErrorCode,(PetscObject,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscObjectIncrementTabLevel(arg0::Type{Float32},arg1::PetscObject,arg2::PetscObject,arg3::Integer)
    ccall((:PetscObjectIncrementTabLevel,petscRealSingle),PetscErrorCode,(PetscObject,PetscObject,Int64),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscObjectReference(arg0::Type{Float32},arg1::PetscObject)
    ccall((:PetscObjectReference,petscRealSingle),PetscErrorCode,(PetscObject,),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscObjectGetReference(arg0::Type{Float32},arg1::PetscObject,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:PetscObjectGetReference,petscRealSingle),PetscErrorCode,(PetscObject,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscObjectDereference(arg0::Type{Float32},arg1::PetscObject)
    ccall((:PetscObjectDereference,petscRealSingle),PetscErrorCode,(PetscObject,),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscObjectGetNewTag(arg0::Type{Float32},arg1::PetscObject,arg2::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}})
    ccall((:PetscObjectGetNewTag,petscRealSingle),PetscErrorCode,(PetscObject,Ptr{PetscMPIInt}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscObjectCompose(arg0::Type{Float32},arg1::PetscObject,arg2::Union{ByteString,Symbol},arg3::PetscObject)
    ccall((:PetscObjectCompose,petscRealSingle),PetscErrorCode,(PetscObject,Cstring,PetscObject),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscObjectRemoveReference(arg0::Type{Float32},arg1::PetscObject,arg2::Union{ByteString,Symbol})
    ccall((:PetscObjectRemoveReference,petscRealSingle),PetscErrorCode,(PetscObject,Cstring),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscObjectQuery(arg0::Type{Float32},arg1::PetscObject,arg2::Union{ByteString,Symbol},arg3::Union{Ptr{PetscObject},StridedArray{PetscObject},Ptr{PetscObject},Ref{PetscObject}})
    ccall((:PetscObjectQuery,petscRealSingle),PetscErrorCode,(PetscObject,Cstring,Ptr{PetscObject}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscObjectComposeFunction_Private(arg0::Type{Float32},arg1::PetscObject,arg2::Union{ByteString,Symbol},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:PetscObjectComposeFunction_Private,petscRealSingle),PetscErrorCode,(PetscObject,Cstring,Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscObjectSetFromOptions(arg0::Type{Float32},arg1::PetscObject)
    ccall((:PetscObjectSetFromOptions,petscRealSingle),PetscErrorCode,(PetscObject,),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscObjectSetUp(arg0::Type{Float32},arg1::PetscObject)
    ccall((:PetscObjectSetUp,petscRealSingle),PetscErrorCode,(PetscObject,),arg1)
end
=#
function PetscCommGetNewTag(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}})
    err = ccall((:PetscCommGetNewTag,petscRealSingle),PetscErrorCode,(comm_type,Ptr{PetscMPIInt}),arg1,arg2)
    return err
end

#= skipping function with undefined symbols:
 function PetscObjectAddOptionsHandler(arg0::Type{Float32},arg1::PetscObject,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:PetscObjectAddOptionsHandler,petscRealSingle),PetscErrorCode,(PetscObject,Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function PetscObjectProcessOptionsHandlers(arg0::Type{Float32},arg1::PetscObject)
    ccall((:PetscObjectProcessOptionsHandlers,petscRealSingle),PetscErrorCode,(PetscObject,),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscObjectDestroyOptionsHandlers(arg0::Type{Float32},arg1::PetscObject)
    ccall((:PetscObjectDestroyOptionsHandlers,petscRealSingle),PetscErrorCode,(PetscObject,),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscObjectsListGetGlobalNumbering(arg0::Type{Float32},arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{PetscObject},StridedArray{PetscObject},Ptr{PetscObject},Ref{PetscObject}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:PetscObjectsListGetGlobalNumbering,petscRealSingle),PetscErrorCode,(comm_type,Int64,Ptr{PetscObject},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
end
=#
function PetscOptionsHasName(arg0::Type{Float32},arg1::Union{Cstring,ByteString,Symbol},arg2::Union{ByteString,Symbol},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsHasName,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function PetscOptionsGetInt(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{ByteString,Symbol},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetInt,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function PetscOptionsGetBool(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{ByteString,Symbol},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetBool,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Ptr{PetscBool},Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function PetscOptionsGetReal(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{ByteString,Symbol},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetReal,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Ptr{Float32},Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function PetscOptionsGetScalar(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{ByteString,Symbol},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetScalar,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Ptr{Float32},Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function PetscOptionsGetIntArray(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{ByteString,Symbol},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetIntArray,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Ptr{Int64},Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscOptionsGetRealArray(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{ByteString,Symbol},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetRealArray,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Ptr{Float32},Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscOptionsGetScalarArray(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{ByteString,Symbol},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetScalarArray,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Ptr{Float32},Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscOptionsGetBoolArray(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{ByteString,Symbol},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetBoolArray,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Ptr{PetscBool},Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscOptionsGetString(arg0::Type{Float32},arg1::Union{Cstring,ByteString,Symbol},arg2::Union{ByteString,Symbol},arg3::Union{ByteString,Symbol,Ptr{UInt8}},arg4::Csize_t,arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetString,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Cstring,Csize_t,Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscOptionsGetStringArray(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{ByteString,Symbol},arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetStringArray,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Ptr{Ptr{UInt8}},Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscOptionsGetEList(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{ByteString,Symbol},arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetEList,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Ptr{Ptr{UInt8}},Int64,Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscOptionsGetEnum(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{ByteString,Symbol},arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg4::Union{Ptr{PetscEnum},StridedArray{PetscEnum},Ptr{PetscEnum},Ref{PetscEnum}},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetEnum,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Ptr{Ptr{UInt8}},Ptr{PetscEnum},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscOptionsGetEnumArray(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{ByteString,Symbol},arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg4::Union{Ptr{PetscEnum},StridedArray{PetscEnum},Ptr{PetscEnum},Ref{PetscEnum}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetEnumArray,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Ptr{Ptr{UInt8}},Ptr{PetscEnum},Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscOptionsValidKey(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsValidKey,petscRealSingle),PetscErrorCode,(Cstring,Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscOptionsSetAlias(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{ByteString,Symbol})
    err = ccall((:PetscOptionsSetAlias,petscRealSingle),PetscErrorCode,(Cstring,Cstring),arg1,arg2)
    return err
end

function PetscOptionsSetValue(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{ByteString,Symbol})
    err = ccall((:PetscOptionsSetValue,petscRealSingle),PetscErrorCode,(Cstring,Cstring),arg1,arg2)
    return err
end

function PetscOptionsClearValue(arg0::Type{Float32},arg1::Union{ByteString,Symbol})
    err = ccall((:PetscOptionsClearValue,petscRealSingle),PetscErrorCode,(Cstring,),arg1)
    return err
end

function PetscOptionsAllUsed(arg0::Type{Float32},arg1::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscOptionsAllUsed,petscRealSingle),PetscErrorCode,(Ptr{Int64},),arg1)
    return err
end

function PetscOptionsUsed(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsUsed,petscRealSingle),PetscErrorCode,(Cstring,Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscOptionsLeft(arg0::Type{Float32})
    err = ccall((:PetscOptionsLeft,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscOptionsView(arg1::PetscViewer{Float32})
    err = ccall((:PetscOptionsView,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},),arg1)
    return err
end

function PetscOptionsCreate(arg0::Type{Float32})
    err = ccall((:PetscOptionsCreate,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscOptionsInsert(arg0::Type{Float32},arg1::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}},arg2::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}},arg3::Union{ByteString,Symbol})
    err = ccall((:PetscOptionsInsert,petscRealSingle),PetscErrorCode,(Ptr{Cint},Ptr{Ptr{Ptr{UInt8}}},Cstring),arg1,arg2,arg3)
    return err
end

function PetscOptionsInsertFile(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Symbol},arg3::PetscBool)
    err = ccall((:PetscOptionsInsertFile,petscRealSingle),PetscErrorCode,(comm_type,Cstring,PetscBool),arg1,arg2,arg3)
    return err
end

function PetscOptionsInsertString(arg0::Type{Float32},arg1::Union{ByteString,Symbol})
    err = ccall((:PetscOptionsInsertString,petscRealSingle),PetscErrorCode,(Cstring,),arg1)
    return err
end

function PetscOptionsDestroy(arg0::Type{Float32})
    err = ccall((:PetscOptionsDestroy,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscOptionsClear(arg0::Type{Float32})
    err = ccall((:PetscOptionsClear,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscOptionsPrefixPush(arg0::Type{Float32},arg1::Union{ByteString,Symbol})
    err = ccall((:PetscOptionsPrefixPush,petscRealSingle),PetscErrorCode,(Cstring,),arg1)
    return err
end

function PetscOptionsPrefixPop(arg0::Type{Float32})
    err = ccall((:PetscOptionsPrefixPop,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscOptionsReject(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{ByteString,Symbol})
    err = ccall((:PetscOptionsReject,petscRealSingle),PetscErrorCode,(Cstring,Cstring),arg1,arg2)
    return err
end

function PetscOptionsGetAll(arg0::Type{Float32},arg1::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscOptionsGetAll,petscRealSingle),PetscErrorCode,(Ptr{Ptr{UInt8}},),arg1)
    return err
end

function PetscOptionsGetenv(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Symbol},arg3::Union{ByteString,Symbol},arg4::Csize_t,arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetenv,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Cstring,Csize_t,Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscOptionsStringToInt(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscOptionsStringToInt,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Int64}),arg1,arg2)
    return err
end

function PetscOptionsStringToReal(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:PetscOptionsStringToReal,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Float32}),arg1,arg2)
    return err
end

function PetscOptionsStringToBool(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsStringToBool,petscRealSingle),PetscErrorCode,(Cstring,Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscOptionsMonitorSet(arg0::Type{Float32},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscOptionsMonitorSet,petscRealSingle),PetscErrorCode,(Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function PetscOptionsMonitorCancel(arg0::Type{Float32})
    err = ccall((:PetscOptionsMonitorCancel,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscOptionsMonitorDefault(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{ByteString,Symbol},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscOptionsMonitorDefault,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Ptr{Void}),arg1,arg2,arg3)
    return err
end

#= skipping function with undefined symbols:
 function PetscOptionsBegin_Private(arg0::Type{Float32},arg1::Union{Ptr{PetscOptions},StridedArray{PetscOptions},Ptr{PetscOptions},Ref{PetscOptions}},arg2::MPI_Comm,arg3::Union{ByteString,Symbol},arg4::Union{ByteString,Symbol},arg5::Union{ByteString,Symbol})
    ccall((:PetscOptionsBegin_Private,petscRealSingle),PetscErrorCode,(Ptr{PetscOptions},comm_type,Cstring,Cstring,Cstring),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function PetscObjectOptionsBegin_Private(arg0::Type{Float32},arg1::Union{Ptr{PetscOptions},StridedArray{PetscOptions},Ptr{PetscOptions},Ref{PetscOptions}},arg2::PetscObject)
    ccall((:PetscObjectOptionsBegin_Private,petscRealSingle),PetscErrorCode,(Ptr{PetscOptions},PetscObject),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscOptionsEnd_Private(arg0::Type{Float32},arg1::Union{Ptr{PetscOptions},StridedArray{PetscOptions},Ptr{PetscOptions},Ref{PetscOptions}})
    ccall((:PetscOptionsEnd_Private,petscRealSingle),PetscErrorCode,(Ptr{PetscOptions},),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscOptionsHead(arg0::Type{Float32},arg1::Union{Ptr{PetscOptions},StridedArray{PetscOptions},Ptr{PetscOptions},Ref{PetscOptions}},arg2::Union{ByteString,Symbol})
    ccall((:PetscOptionsHead,petscRealSingle),PetscErrorCode,(Ptr{PetscOptions},Cstring),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscOptionsEnum_Private(arg0::Type{Float32},arg1::Union{Ptr{PetscOptions},StridedArray{PetscOptions},Ptr{PetscOptions},Ref{PetscOptions}},arg2::Union{ByteString,Symbol},arg3::Union{ByteString,Symbol},arg4::Union{ByteString,Symbol},arg5::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg6::PetscEnum,arg7::Union{Ptr{PetscEnum},StridedArray{PetscEnum},Ptr{PetscEnum},Ref{PetscEnum}},arg8::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:PetscOptionsEnum_Private,petscRealSingle),PetscErrorCode,(Ptr{PetscOptions},Cstring,Cstring,Cstring,Ptr{Ptr{UInt8}},PetscEnum,Ptr{PetscEnum},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
end
=#
#= skipping function with undefined symbols:
 function PetscOptionsInt_Private(arg0::Type{Float32},arg1::Union{Ptr{PetscOptions},StridedArray{PetscOptions},Ptr{PetscOptions},Ref{PetscOptions}},arg2::Union{ByteString,Symbol},arg3::Union{ByteString,Symbol},arg4::Union{ByteString,Symbol},arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:PetscOptionsInt_Private,petscRealSingle),PetscErrorCode,(Ptr{PetscOptions},Cstring,Cstring,Cstring,Int64,Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
#= skipping function with undefined symbols:
 function PetscOptionsReal_Private(arg0::Type{Float32},arg1::Union{Ptr{PetscOptions},StridedArray{PetscOptions},Ptr{PetscOptions},Ref{PetscOptions}},arg2::Union{ByteString,Symbol},arg3::Union{ByteString,Symbol},arg4::Union{ByteString,Symbol},arg5::Float32,arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:PetscOptionsReal_Private,petscRealSingle),PetscErrorCode,(Ptr{PetscOptions},Cstring,Cstring,Cstring,Float32,Ptr{Float32},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
#= skipping function with undefined symbols:
 function PetscOptionsScalar_Private(arg0::Type{Float32},arg1::Union{Ptr{PetscOptions},StridedArray{PetscOptions},Ptr{PetscOptions},Ref{PetscOptions}},arg2::Union{ByteString,Symbol},arg3::Union{ByteString,Symbol},arg4::Union{ByteString,Symbol},arg5::Float32,arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:PetscOptionsScalar_Private,petscRealSingle),PetscErrorCode,(Ptr{PetscOptions},Cstring,Cstring,Cstring,Float32,Ptr{Float32},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
#= skipping function with undefined symbols:
 function PetscOptionsName_Private(arg0::Type{Float32},arg1::Union{Ptr{PetscOptions},StridedArray{PetscOptions},Ptr{PetscOptions},Ref{PetscOptions}},arg2::Union{ByteString,Symbol},arg3::Union{ByteString,Symbol},arg4::Union{ByteString,Symbol},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:PetscOptionsName_Private,petscRealSingle),PetscErrorCode,(Ptr{PetscOptions},Cstring,Cstring,Cstring,Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function PetscOptionsString_Private(arg0::Type{Float32},arg1::Union{Ptr{PetscOptions},StridedArray{PetscOptions},Ptr{PetscOptions},Ref{PetscOptions}},arg2::Union{ByteString,Symbol},arg3::Union{ByteString,Symbol},arg4::Union{ByteString,Symbol},arg5::Union{ByteString,Symbol},arg6::Union{ByteString,Symbol},arg7::Csize_t,arg8::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:PetscOptionsString_Private,petscRealSingle),PetscErrorCode,(Ptr{PetscOptions},Cstring,Cstring,Cstring,Cstring,Cstring,Csize_t,Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
end
=#
#= skipping function with undefined symbols:
 function PetscOptionsBool_Private(arg0::Type{Float32},arg1::Union{Ptr{PetscOptions},StridedArray{PetscOptions},Ptr{PetscOptions},Ref{PetscOptions}},arg2::Union{ByteString,Symbol},arg3::Union{ByteString,Symbol},arg4::Union{ByteString,Symbol},arg5::PetscBool,arg6::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg7::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:PetscOptionsBool_Private,petscRealSingle),PetscErrorCode,(Ptr{PetscOptions},Cstring,Cstring,Cstring,PetscBool,Ptr{PetscBool},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
#= skipping function with undefined symbols:
 function PetscOptionsBoolGroupBegin_Private(arg0::Type{Float32},arg1::Union{Ptr{PetscOptions},StridedArray{PetscOptions},Ptr{PetscOptions},Ref{PetscOptions}},arg2::Union{ByteString,Symbol},arg3::Union{ByteString,Symbol},arg4::Union{ByteString,Symbol},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:PetscOptionsBoolGroupBegin_Private,petscRealSingle),PetscErrorCode,(Ptr{PetscOptions},Cstring,Cstring,Cstring,Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function PetscOptionsBoolGroup_Private(arg0::Type{Float32},arg1::Union{Ptr{PetscOptions},StridedArray{PetscOptions},Ptr{PetscOptions},Ref{PetscOptions}},arg2::Union{ByteString,Symbol},arg3::Union{ByteString,Symbol},arg4::Union{ByteString,Symbol},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:PetscOptionsBoolGroup_Private,petscRealSingle),PetscErrorCode,(Ptr{PetscOptions},Cstring,Cstring,Cstring,Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function PetscOptionsBoolGroupEnd_Private(arg0::Type{Float32},arg1::Union{Ptr{PetscOptions},StridedArray{PetscOptions},Ptr{PetscOptions},Ref{PetscOptions}},arg2::Union{ByteString,Symbol},arg3::Union{ByteString,Symbol},arg4::Union{ByteString,Symbol},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:PetscOptionsBoolGroupEnd_Private,petscRealSingle),PetscErrorCode,(Ptr{PetscOptions},Cstring,Cstring,Cstring,Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function PetscOptionsFList_Private(arg0::Type{Float32},arg1::Union{Ptr{PetscOptions},StridedArray{PetscOptions},Ptr{PetscOptions},Ref{PetscOptions}},arg2::Union{ByteString,Symbol},arg3::Union{ByteString,Symbol},arg4::Union{ByteString,Symbol},arg5::PetscFunctionList,arg6::Union{ByteString,Symbol},arg7::Union{ByteString,Symbol},arg8::Csize_t,arg9::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:PetscOptionsFList_Private,petscRealSingle),PetscErrorCode,(Ptr{PetscOptions},Cstring,Cstring,Cstring,PetscFunctionList,Cstring,Cstring,Csize_t,Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
end
=#
#= skipping function with undefined symbols:
 function PetscOptionsEList_Private(arg0::Type{Float32},arg1::Union{Ptr{PetscOptions},StridedArray{PetscOptions},Ptr{PetscOptions},Ref{PetscOptions}},arg2::Union{ByteString,Symbol},arg3::Union{ByteString,Symbol},arg4::Union{ByteString,Symbol},arg5::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg6::Integer,arg7::Union{ByteString,Symbol},arg8::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg9::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:PetscOptionsEList_Private,petscRealSingle),PetscErrorCode,(Ptr{PetscOptions},Cstring,Cstring,Cstring,Ptr{Ptr{UInt8}},Int64,Cstring,Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
end
=#
#= skipping function with undefined symbols:
 function PetscOptionsRealArray_Private(arg0::Type{Float32},arg1::Union{Ptr{PetscOptions},StridedArray{PetscOptions},Ptr{PetscOptions},Ref{PetscOptions}},arg2::Union{ByteString,Symbol},arg3::Union{ByteString,Symbol},arg4::Union{ByteString,Symbol},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:PetscOptionsRealArray_Private,petscRealSingle),PetscErrorCode,(Ptr{PetscOptions},Cstring,Cstring,Cstring,Ptr{Float32},Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
#= skipping function with undefined symbols:
 function PetscOptionsScalarArray_Private(arg0::Type{Float32},arg1::Union{Ptr{PetscOptions},StridedArray{PetscOptions},Ptr{PetscOptions},Ref{PetscOptions}},arg2::Union{ByteString,Symbol},arg3::Union{ByteString,Symbol},arg4::Union{ByteString,Symbol},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:PetscOptionsScalarArray_Private,petscRealSingle),PetscErrorCode,(Ptr{PetscOptions},Cstring,Cstring,Cstring,Ptr{Float32},Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
#= skipping function with undefined symbols:
 function PetscOptionsIntArray_Private(arg0::Type{Float32},arg1::Union{Ptr{PetscOptions},StridedArray{PetscOptions},Ptr{PetscOptions},Ref{PetscOptions}},arg2::Union{ByteString,Symbol},arg3::Union{ByteString,Symbol},arg4::Union{ByteString,Symbol},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:PetscOptionsIntArray_Private,petscRealSingle),PetscErrorCode,(Ptr{PetscOptions},Cstring,Cstring,Cstring,Ptr{Int64},Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
#= skipping function with undefined symbols:
 function PetscOptionsStringArray_Private(arg0::Type{Float32},arg1::Union{Ptr{PetscOptions},StridedArray{PetscOptions},Ptr{PetscOptions},Ref{PetscOptions}},arg2::Union{ByteString,Symbol},arg3::Union{ByteString,Symbol},arg4::Union{ByteString,Symbol},arg5::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:PetscOptionsStringArray_Private,petscRealSingle),PetscErrorCode,(Ptr{PetscOptions},Cstring,Cstring,Cstring,Ptr{Ptr{UInt8}},Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
#= skipping function with undefined symbols:
 function PetscOptionsBoolArray_Private(arg0::Type{Float32},arg1::Union{Ptr{PetscOptions},StridedArray{PetscOptions},Ptr{PetscOptions},Ref{PetscOptions}},arg2::Union{ByteString,Symbol},arg3::Union{ByteString,Symbol},arg4::Union{ByteString,Symbol},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:PetscOptionsBoolArray_Private,petscRealSingle),PetscErrorCode,(Ptr{PetscOptions},Cstring,Cstring,Cstring,Ptr{PetscBool},Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
#= skipping function with undefined symbols:
 function PetscOptionsEnumArray_Private(arg0::Type{Float32},arg1::Union{Ptr{PetscOptions},StridedArray{PetscOptions},Ptr{PetscOptions},Ref{PetscOptions}},arg2::Union{ByteString,Symbol},arg3::Union{ByteString,Symbol},arg4::Union{ByteString,Symbol},arg5::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg6::Union{Ptr{PetscEnum},StridedArray{PetscEnum},Ptr{PetscEnum},Ref{PetscEnum}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:PetscOptionsEnumArray_Private,petscRealSingle),PetscErrorCode,(Ptr{PetscOptions},Cstring,Cstring,Cstring,Ptr{Ptr{UInt8}},Ptr{PetscEnum},Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
end
=#
function PetscOptionsSetFromOptions(arg0::Type{Float32})
    err = ccall((:PetscOptionsSetFromOptions,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscOptionsSAWsDestroy(arg0::Type{Float32})
    err = ccall((:PetscOptionsSAWsDestroy,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscMemoryShowUsage(arg1::PetscViewer{Float32},arg2::Union{ByteString,Symbol})
    err = ccall((:PetscMemoryShowUsage,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Cstring),arg1,arg2)
    return err
end

#= skipping function with undefined symbols:
 function PetscObjectPrintClassNamePrefixType(arg1::PetscObject,arg2::PetscViewer{Float32})
    ccall((:PetscObjectPrintClassNamePrefixType,petscRealSingle),PetscErrorCode,(PetscObject,PetscViewer{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscObjectView(arg1::PetscObject,arg2::PetscViewer{Float32})
    ccall((:PetscObjectView,petscRealSingle),PetscErrorCode,(PetscObject,PetscViewer{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscObjectQueryFunction_Private(arg0::Type{Float32},arg1::PetscObject,arg2::Union{ByteString,Symbol},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    ccall((:PetscObjectQueryFunction_Private,petscRealSingle),PetscErrorCode,(PetscObject,Cstring,Ptr{Ptr{Void}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscObjectSetOptionsPrefix(arg0::Type{Float32},arg1::PetscObject,arg2::Union{ByteString,Symbol})
    ccall((:PetscObjectSetOptionsPrefix,petscRealSingle),PetscErrorCode,(PetscObject,Cstring),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscObjectAppendOptionsPrefix(arg0::Type{Float32},arg1::PetscObject,arg2::Union{ByteString,Symbol})
    ccall((:PetscObjectAppendOptionsPrefix,petscRealSingle),PetscErrorCode,(PetscObject,Cstring),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscObjectPrependOptionsPrefix(arg0::Type{Float32},arg1::PetscObject,arg2::Union{ByteString,Symbol})
    ccall((:PetscObjectPrependOptionsPrefix,petscRealSingle),PetscErrorCode,(PetscObject,Cstring),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscObjectGetOptionsPrefix(arg0::Type{Float32},arg1::PetscObject,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    ccall((:PetscObjectGetOptionsPrefix,petscRealSingle),PetscErrorCode,(PetscObject,Ptr{Ptr{UInt8}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscObjectChangeTypeName(arg0::Type{Float32},arg1::PetscObject,arg2::Union{ByteString,Symbol})
    ccall((:PetscObjectChangeTypeName,petscRealSingle),PetscErrorCode,(PetscObject,Cstring),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscObjectRegisterDestroy(arg0::Type{Float32},arg1::PetscObject)
    ccall((:PetscObjectRegisterDestroy,petscRealSingle),PetscErrorCode,(PetscObject,),arg1)
end
=#
function PetscObjectRegisterDestroyAll(arg0::Type{Float32})
    err = ccall((:PetscObjectRegisterDestroyAll,petscRealSingle),PetscErrorCode,())
    return err
end

#= skipping function with undefined symbols:
 function PetscObjectViewFromOptions(arg0::Type{Float32},arg1::PetscObject,arg2::PetscObject,arg3::Union{ByteString,Symbol})
    ccall((:PetscObjectViewFromOptions,petscRealSingle),PetscErrorCode,(PetscObject,PetscObject,Cstring),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscObjectName(arg0::Type{Float32},arg1::PetscObject)
    ccall((:PetscObjectName,petscRealSingle),PetscErrorCode,(PetscObject,),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscObjectTypeCompare(arg0::Type{Float32},arg1::PetscObject,arg2::Union{ByteString,Symbol},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:PetscObjectTypeCompare,petscRealSingle),PetscErrorCode,(PetscObject,Cstring,Ptr{PetscBool}),arg1,arg2,arg3)
end
=#
function PetscRegisterFinalize(arg0::Type{Float32},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscRegisterFinalize,petscRealSingle),PetscErrorCode,(Ptr{Void},),arg1)
    return err
end

function PetscRegisterFinalizeAll(arg0::Type{Float32})
    err = ccall((:PetscRegisterFinalizeAll,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscDLOpen(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::PetscDLMode,arg3::Union{Ptr{PetscDLHandle},StridedArray{PetscDLHandle},Ptr{PetscDLHandle},Ref{PetscDLHandle}})
    err = ccall((:PetscDLOpen,petscRealSingle),PetscErrorCode,(Cstring,PetscDLMode,Ptr{PetscDLHandle}),arg1,arg2,arg3)
    return err
end

function PetscDLClose(arg0::Type{Float32},arg1::Union{Ptr{PetscDLHandle},StridedArray{PetscDLHandle},Ptr{PetscDLHandle},Ref{PetscDLHandle}})
    err = ccall((:PetscDLClose,petscRealSingle),PetscErrorCode,(Ptr{PetscDLHandle},),arg1)
    return err
end

function PetscDLSym(arg0::Type{Float32},arg1::PetscDLHandle,arg2::Union{ByteString,Symbol},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:PetscDLSym,petscRealSingle),PetscErrorCode,(PetscDLHandle,Cstring,Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

#= skipping function with undefined symbols:
 function PetscObjectsDump(arg0::Type{Float32},arg1::Union{Ptr{FILE},StridedArray{FILE},Ptr{FILE},Ref{FILE}},arg2::PetscBool)
    ccall((:PetscObjectsDump,petscRealSingle),PetscErrorCode,(Ptr{FILE},PetscBool),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscObjectListDestroy(arg0::Type{Float32},arg1::Union{Ptr{PetscObjectList},StridedArray{PetscObjectList},Ptr{PetscObjectList},Ref{PetscObjectList}})
    ccall((:PetscObjectListDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscObjectList},),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscObjectListFind(arg0::Type{Float32},arg1::PetscObjectList,arg2::Union{ByteString,Symbol},arg3::Union{Ptr{PetscObject},StridedArray{PetscObject},Ptr{PetscObject},Ref{PetscObject}})
    ccall((:PetscObjectListFind,petscRealSingle),PetscErrorCode,(PetscObjectList,Cstring,Ptr{PetscObject}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscObjectListReverseFind(arg0::Type{Float32},arg1::PetscObjectList,arg2::PetscObject,arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:PetscObjectListReverseFind,petscRealSingle),PetscErrorCode,(PetscObjectList,PetscObject,Ptr{Ptr{UInt8}},Ptr{PetscBool}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function PetscObjectListAdd(arg0::Type{Float32},arg1::Union{Ptr{PetscObjectList},StridedArray{PetscObjectList},Ptr{PetscObjectList},Ref{PetscObjectList}},arg2::Union{ByteString,Symbol},arg3::PetscObject)
    ccall((:PetscObjectListAdd,petscRealSingle),PetscErrorCode,(Ptr{PetscObjectList},Cstring,PetscObject),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscObjectListRemoveReference(arg0::Type{Float32},arg1::Union{Ptr{PetscObjectList},StridedArray{PetscObjectList},Ptr{PetscObjectList},Ref{PetscObjectList}},arg2::Union{ByteString,Symbol})
    ccall((:PetscObjectListRemoveReference,petscRealSingle),PetscErrorCode,(Ptr{PetscObjectList},Cstring),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscObjectListDuplicate(arg0::Type{Float32},arg1::PetscObjectList,arg2::Union{Ptr{PetscObjectList},StridedArray{PetscObjectList},Ptr{PetscObjectList},Ref{PetscObjectList}})
    ccall((:PetscObjectListDuplicate,petscRealSingle),PetscErrorCode,(PetscObjectList,Ptr{PetscObjectList}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscFunctionListAdd_Private(arg0::Type{Float32},arg1::Union{Ptr{PetscFunctionList},StridedArray{PetscFunctionList},Ptr{PetscFunctionList},Ref{PetscFunctionList}},arg2::Union{ByteString,Symbol},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:PetscFunctionListAdd_Private,petscRealSingle),PetscErrorCode,(Ptr{PetscFunctionList},Cstring,Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscFunctionListDestroy(arg0::Type{Float32},arg1::Union{Ptr{PetscFunctionList},StridedArray{PetscFunctionList},Ptr{PetscFunctionList},Ref{PetscFunctionList}})
    ccall((:PetscFunctionListDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscFunctionList},),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscFunctionListFind_Private(arg0::Type{Float32},arg1::PetscFunctionList,arg2::Union{ByteString,Symbol},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    ccall((:PetscFunctionListFind_Private,petscRealSingle),PetscErrorCode,(PetscFunctionList,Cstring,Ptr{Ptr{Void}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscFunctionListPrintTypes(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{FILE},StridedArray{FILE},Ptr{FILE},Ref{FILE}},arg3::Union{ByteString,Symbol},arg4::Union{ByteString,Symbol},arg5::Union{ByteString,Symbol},arg6::Union{ByteString,Symbol},arg7::PetscFunctionList,arg8::Union{ByteString,Symbol})
    ccall((:PetscFunctionListPrintTypes,petscRealSingle),PetscErrorCode,(comm_type,Ptr{FILE},Cstring,Cstring,Cstring,Cstring,PetscFunctionList,Cstring),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
end
=#
#= skipping function with undefined symbols:
 function PetscFunctionListDuplicate(arg0::Type{Float32},arg1::PetscFunctionList,arg2::Union{Ptr{PetscFunctionList},StridedArray{PetscFunctionList},Ptr{PetscFunctionList},Ref{PetscFunctionList}})
    ccall((:PetscFunctionListDuplicate,petscRealSingle),PetscErrorCode,(PetscFunctionList,Ptr{PetscFunctionList}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscFunctionListView(arg1::PetscFunctionList,arg2::PetscViewer{Float32})
    ccall((:PetscFunctionListView,petscRealSingle),PetscErrorCode,(PetscFunctionList,PetscViewer{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscFunctionListGet(arg0::Type{Float32},arg1::PetscFunctionList,arg2::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}},arg3::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    ccall((:PetscFunctionListGet,petscRealSingle),PetscErrorCode,(PetscFunctionList,Ptr{Ptr{Ptr{UInt8}}},Ptr{Cint}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscDLLibraryAppend(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{PetscDLLibrary},StridedArray{PetscDLLibrary},Ptr{PetscDLLibrary},Ref{PetscDLLibrary}},arg3::Union{ByteString,Symbol})
    ccall((:PetscDLLibraryAppend,petscRealSingle),PetscErrorCode,(comm_type,Ptr{PetscDLLibrary},Cstring),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscDLLibraryPrepend(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{PetscDLLibrary},StridedArray{PetscDLLibrary},Ptr{PetscDLLibrary},Ref{PetscDLLibrary}},arg3::Union{ByteString,Symbol})
    ccall((:PetscDLLibraryPrepend,petscRealSingle),PetscErrorCode,(comm_type,Ptr{PetscDLLibrary},Cstring),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscDLLibrarySym(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{PetscDLLibrary},StridedArray{PetscDLLibrary},Ptr{PetscDLLibrary},Ref{PetscDLLibrary}},arg3::Union{ByteString,Symbol},arg4::Union{ByteString,Symbol},arg5::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    ccall((:PetscDLLibrarySym,petscRealSingle),PetscErrorCode,(comm_type,Ptr{PetscDLLibrary},Cstring,Cstring,Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function PetscDLLibraryPrintPath(arg0::Type{Float32},arg1::PetscDLLibrary)
    ccall((:PetscDLLibraryPrintPath,petscRealSingle),PetscErrorCode,(PetscDLLibrary,),arg1)
end
=#
function PetscDLLibraryRetrieve(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Symbol},arg3::Union{ByteString,Symbol},arg4::Csize_t,arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscDLLibraryRetrieve,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Cstring,Csize_t,Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
    return err
end

#= skipping function with undefined symbols:
 function PetscDLLibraryOpen(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Symbol},arg3::Union{Ptr{PetscDLLibrary},StridedArray{PetscDLLibrary},Ptr{PetscDLLibrary},Ref{PetscDLLibrary}})
    ccall((:PetscDLLibraryOpen,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Ptr{PetscDLLibrary}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscDLLibraryClose(arg0::Type{Float32},arg1::PetscDLLibrary)
    ccall((:PetscDLLibraryClose,petscRealSingle),PetscErrorCode,(PetscDLLibrary,),arg1)
end
=#
function PetscSplitOwnership(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSplitOwnership,petscRealSingle),PetscErrorCode,(comm_type,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PetscSplitOwnershipBlock(arg0::Type{Float32},arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSplitOwnershipBlock,petscRealSingle),PetscErrorCode,(comm_type,Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function PetscSequentialPhaseBegin(arg0::Type{Float32},arg1::MPI_Comm,arg2::PetscMPIInt)
    err = ccall((:PetscSequentialPhaseBegin,petscRealSingle),PetscErrorCode,(comm_type,PetscMPIInt),arg1,arg2)
    return err
end

function PetscSequentialPhaseEnd(arg0::Type{Float32},arg1::MPI_Comm,arg2::PetscMPIInt)
    err = ccall((:PetscSequentialPhaseEnd,petscRealSingle),PetscErrorCode,(comm_type,PetscMPIInt),arg1,arg2)
    return err
end

#= skipping function with undefined symbols:
 function PetscBarrier(arg0::Type{Float32},arg1::PetscObject)
    ccall((:PetscBarrier,petscRealSingle),PetscErrorCode,(PetscObject,),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscMPIDump(arg0::Type{Float32},arg1::Union{Ptr{FILE},StridedArray{FILE},Ptr{FILE},Ref{FILE}})
    ccall((:PetscMPIDump,petscRealSingle),PetscErrorCode,(Ptr{FILE},),arg1)
end
=#
function PetscInfoDeactivateClass(arg0::Type{Float32},arg1::PetscClassId)
    err = ccall((:PetscInfoDeactivateClass,petscRealSingle),PetscErrorCode,(PetscClassId,),arg1)
    return err
end

function PetscInfoActivateClass(arg0::Type{Float32},arg1::PetscClassId)
    err = ccall((:PetscInfoActivateClass,petscRealSingle),PetscErrorCode,(PetscClassId,),arg1)
    return err
end

#= skipping function with undefined symbols:
 function PetscLogGetStageLog(arg0::Type{Float32},arg1::Union{Ptr{PetscStageLog},StridedArray{PetscStageLog},Ptr{PetscStageLog},Ref{PetscStageLog}})
    ccall((:PetscLogGetStageLog,petscRealSingle),PetscErrorCode,(Ptr{PetscStageLog},),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscStageLogGetCurrent(arg0::Type{Float32},arg1::PetscStageLog,arg2::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    ccall((:PetscStageLogGetCurrent,petscRealSingle),PetscErrorCode,(PetscStageLog,Ptr{Cint}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscStageLogGetEventPerfLog(arg0::Type{Float32},arg1::PetscStageLog,arg2::Integer,arg3::Union{Ptr{PetscEventPerfLog},StridedArray{PetscEventPerfLog},Ptr{PetscEventPerfLog},Ref{PetscEventPerfLog}})
    ccall((:PetscStageLogGetEventPerfLog,petscRealSingle),PetscErrorCode,(PetscStageLog,Cint,Ptr{PetscEventPerfLog}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscLogObjectParent(arg0::Type{Float32},arg1::PetscObject,arg2::PetscObject)
    ccall((:PetscLogObjectParent,petscRealSingle),PetscErrorCode,(PetscObject,PetscObject),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscLogObjectMemory(arg0::Type{Float32},arg1::PetscObject,arg2::PetscLogDouble)
    ccall((:PetscLogObjectMemory,petscRealSingle),PetscErrorCode,(PetscObject,PetscLogDouble),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscIntStackCreate(arg0::Type{Float32},arg1::Union{Ptr{PetscIntStack},StridedArray{PetscIntStack},Ptr{PetscIntStack},Ref{PetscIntStack}})
    ccall((:PetscIntStackCreate,petscRealSingle),PetscErrorCode,(Ptr{PetscIntStack},),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscIntStackDestroy(arg0::Type{Float32},arg1::PetscIntStack)
    ccall((:PetscIntStackDestroy,petscRealSingle),PetscErrorCode,(PetscIntStack,),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscIntStackPush(arg0::Type{Float32},arg1::PetscIntStack,arg2::Integer)
    ccall((:PetscIntStackPush,petscRealSingle),PetscErrorCode,(PetscIntStack,Cint),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscIntStackPop(arg0::Type{Float32},arg1::PetscIntStack,arg2::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    ccall((:PetscIntStackPop,petscRealSingle),PetscErrorCode,(PetscIntStack,Ptr{Cint}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscIntStackTop(arg0::Type{Float32},arg1::PetscIntStack,arg2::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    ccall((:PetscIntStackTop,petscRealSingle),PetscErrorCode,(PetscIntStack,Ptr{Cint}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscIntStackEmpty(arg0::Type{Float32},arg1::PetscIntStack,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:PetscIntStackEmpty,petscRealSingle),PetscErrorCode,(PetscIntStack,Ptr{PetscBool}),arg1,arg2)
end
=#
function PetscFixFilename(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{ByteString,Symbol})
    err = ccall((:PetscFixFilename,petscRealSingle),PetscErrorCode,(Cstring,Cstring),arg1,arg2)
    return err
end

#= skipping function with undefined symbols:
 function PetscFOpen(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Symbol},arg3::Union{ByteString,Symbol},arg4::Union{Ptr{Ptr{FILE}},StridedArray{Ptr{FILE}},Ptr{Ptr{FILE}},Ref{Ptr{FILE}}})
    ccall((:PetscFOpen,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Cstring,Ptr{Ptr{FILE}}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function PetscFClose(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{FILE},StridedArray{FILE},Ptr{FILE},Ref{FILE}})
    ccall((:PetscFClose,petscRealSingle),PetscErrorCode,(comm_type,Ptr{FILE}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscVSNPrintf(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Csize_t,arg3::Union{ByteString,Symbol},arg4::Union{Ptr{Csize_t},StridedArray{Csize_t},Ptr{Csize_t},Ref{Csize_t}},arg5::Union{Ptr{__va_list_tag},StridedArray{__va_list_tag},Ptr{__va_list_tag},Ref{__va_list_tag}})
    ccall((:PetscVSNPrintf,petscRealSingle),PetscErrorCode,(Cstring,Csize_t,Cstring,Ptr{Csize_t},Ptr{__va_list_tag}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function PetscVFPrintfDefault(arg0::Type{Float32},arg1::Union{Ptr{FILE},StridedArray{FILE},Ptr{FILE},Ref{FILE}},arg2::Union{ByteString,Symbol},arg3::Union{Ptr{__va_list_tag},StridedArray{__va_list_tag},Ptr{__va_list_tag},Ref{__va_list_tag}})
    ccall((:PetscVFPrintfDefault,petscRealSingle),PetscErrorCode,(Ptr{FILE},Cstring,Ptr{__va_list_tag}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscSynchronizedFlush(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{FILE},StridedArray{FILE},Ptr{FILE},Ref{FILE}})
    ccall((:PetscSynchronizedFlush,petscRealSingle),PetscErrorCode,(comm_type,Ptr{FILE}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscSynchronizedFGets(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{FILE},StridedArray{FILE},Ptr{FILE},Ref{FILE}},arg3::Csize_t,arg4::Union{ByteString,Symbol})
    ccall((:PetscSynchronizedFGets,petscRealSingle),PetscErrorCode,(comm_type,Ptr{FILE},Csize_t,Cstring),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function PetscStartMatlab(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Symbol},arg3::Union{ByteString,Symbol},arg4::Union{Ptr{Ptr{FILE}},StridedArray{Ptr{FILE}},Ptr{Ptr{FILE}},Ref{Ptr{FILE}}})
    ccall((:PetscStartMatlab,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Cstring,Ptr{Ptr{FILE}}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function PetscStartJava(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Symbol},arg3::Union{ByteString,Symbol},arg4::Union{Ptr{Ptr{FILE}},StridedArray{Ptr{FILE}},Ptr{Ptr{FILE}},Ref{Ptr{FILE}}})
    ccall((:PetscStartJava,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Cstring,Ptr{Ptr{FILE}}),arg1,arg2,arg3,arg4)
end
=#
function PetscGetPetscDir(arg0::Type{Float32},arg1::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscGetPetscDir,petscRealSingle),PetscErrorCode,(Ptr{Ptr{UInt8}},),arg1)
    return err
end

function PetscPopUpSelect(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Symbol},arg3::Union{ByteString,Symbol},arg4::Integer,arg5::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg6::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:PetscPopUpSelect,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Cstring,Cint,Ptr{Ptr{UInt8}},Ptr{Cint}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

#= skipping function with undefined symbols:
 function PetscContainerGetPointer(arg0::Type{Float32},arg1::PetscContainer,arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    ccall((:PetscContainerGetPointer,petscRealSingle),PetscErrorCode,(PetscContainer,Ptr{Ptr{Void}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscContainerSetPointer(arg0::Type{Float32},arg1::PetscContainer,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:PetscContainerSetPointer,petscRealSingle),PetscErrorCode,(PetscContainer,Ptr{Void}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscContainerDestroy(arg0::Type{Float32},arg1::Union{Ptr{PetscContainer},StridedArray{PetscContainer},Ptr{PetscContainer},Ref{PetscContainer}})
    ccall((:PetscContainerDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscContainer},),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscContainerCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{PetscContainer},StridedArray{PetscContainer},Ptr{PetscContainer},Ref{PetscContainer}})
    ccall((:PetscContainerCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{PetscContainer}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscContainerSetUserDestroy(arg0::Type{Float32},arg1::PetscContainer,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:PetscContainerSetUserDestroy,petscRealSingle),PetscErrorCode,(PetscContainer,Ptr{Void}),arg1,arg2)
end
=#
function PetscIntView(arg1::Integer,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::PetscViewer{Float32})
    err = ccall((:PetscIntView,petscRealSingle),PetscErrorCode,(Int64,Ptr{Int64},PetscViewer{Float32}),arg1,arg2,arg3)
    return err
end

function PetscRealView(arg1::Integer,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::PetscViewer{Float32})
    err = ccall((:PetscRealView,petscRealSingle),PetscErrorCode,(Int64,Ptr{Float32},PetscViewer{Float32}),arg1,arg2,arg3)
    return err
end

function PetscScalarView(arg1::Integer,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::PetscViewer{Float32})
    err = ccall((:PetscScalarView,petscRealSingle),PetscErrorCode,(Int64,Ptr{Float32},PetscViewer{Float32}),arg1,arg2,arg3)
    return err
end

function PetscGetHostName(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Csize_t)
    err = ccall((:PetscGetHostName,petscRealSingle),PetscErrorCode,(Cstring,Csize_t),arg1,arg2)
    return err
end

function PetscGetUserName(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Csize_t)
    err = ccall((:PetscGetUserName,petscRealSingle),PetscErrorCode,(Cstring,Csize_t),arg1,arg2)
    return err
end

function PetscGetProgramName(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Csize_t)
    err = ccall((:PetscGetProgramName,petscRealSingle),PetscErrorCode,(Cstring,Csize_t),arg1,arg2)
    return err
end

function PetscSetProgramName(arg0::Type{Float32},arg1::Union{ByteString,Symbol})
    err = ccall((:PetscSetProgramName,petscRealSingle),PetscErrorCode,(Cstring,),arg1)
    return err
end

function PetscGetDate(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Csize_t)
    err = ccall((:PetscGetDate,petscRealSingle),PetscErrorCode,(Cstring,Csize_t),arg1,arg2)
    return err
end

function PetscGetVersion(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Csize_t)
    err = ccall((:PetscGetVersion,petscRealSingle),PetscErrorCode,(Cstring,Csize_t),arg1,arg2)
    return err
end

function PetscSortInt(arg0::Type{Float32},arg1::Integer,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSortInt,petscRealSingle),PetscErrorCode,(Int64,Ptr{Int64}),arg1,arg2)
    return err
end

function PetscSortRemoveDupsInt(arg0::Type{Float32},arg1::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSortRemoveDupsInt,petscRealSingle),PetscErrorCode,(Ptr{Int64},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscFindInt(arg0::Type{Float32},arg1::Integer,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscFindInt,petscRealSingle),PetscErrorCode,(Int64,Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function PetscSortIntWithPermutation(arg0::Type{Float32},arg1::Integer,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSortIntWithPermutation,petscRealSingle),PetscErrorCode,(Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PetscSortStrWithPermutation(arg0::Type{Float32},arg1::Integer,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSortStrWithPermutation,petscRealSingle),PetscErrorCode,(Int64,Ptr{Ptr{UInt8}},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PetscSortIntWithArray(arg0::Type{Float32},arg1::Integer,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSortIntWithArray,petscRealSingle),PetscErrorCode,(Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PetscSortIntWithArrayPair(arg0::Type{Float32},arg1::Integer,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSortIntWithArrayPair,petscRealSingle),PetscErrorCode,(Int64,Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function PetscSortMPIInt(arg0::Type{Float32},arg1::Integer,arg2::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}})
    err = ccall((:PetscSortMPIInt,petscRealSingle),PetscErrorCode,(Int64,Ptr{PetscMPIInt}),arg1,arg2)
    return err
end

function PetscSortRemoveDupsMPIInt(arg0::Type{Float32},arg1::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg2::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}})
    err = ccall((:PetscSortRemoveDupsMPIInt,petscRealSingle),PetscErrorCode,(Ptr{Int64},Ptr{PetscMPIInt}),arg1,arg2)
    return err
end

function PetscSortMPIIntWithArray(arg0::Type{Float32},arg1::PetscMPIInt,arg2::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}},arg3::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}})
    err = ccall((:PetscSortMPIIntWithArray,petscRealSingle),PetscErrorCode,(PetscMPIInt,Ptr{PetscMPIInt},Ptr{PetscMPIInt}),arg1,arg2,arg3)
    return err
end

function PetscSortIntWithScalarArray(arg0::Type{Float32},arg1::Integer,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:PetscSortIntWithScalarArray,petscRealSingle),PetscErrorCode,(Int64,Ptr{Int64},Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function PetscSortIntWithDataArray(arg0::Type{Float32},arg1::Integer,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Csize_t,arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscSortIntWithDataArray,petscRealSingle),PetscErrorCode,(Int64,Ptr{Int64},Ptr{Void},Csize_t,Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscSortReal(arg0::Type{Float32},arg1::Integer,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:PetscSortReal,petscRealSingle),PetscErrorCode,(Int64,Ptr{Float32}),arg1,arg2)
    return err
end

function PetscSortRealWithPermutation(arg0::Type{Float32},arg1::Integer,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSortRealWithPermutation,petscRealSingle),PetscErrorCode,(Int64,Ptr{Float32},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PetscSortRemoveDupsReal(arg0::Type{Float32},arg1::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:PetscSortRemoveDupsReal,petscRealSingle),PetscErrorCode,(Ptr{Int64},Ptr{Float32}),arg1,arg2)
    return err
end

function PetscSortSplit(arg0::Type{Float32},arg1::Integer,arg2::Integer,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSortSplit,petscRealSingle),PetscErrorCode,(Int64,Int64,Ptr{Float32},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function PetscSortSplitReal(arg0::Type{Float32},arg1::Integer,arg2::Integer,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscSortSplitReal,petscRealSingle),PetscErrorCode,(Int64,Int64,Ptr{Float32},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function PetscProcessTree(arg0::Type{Float32},arg1::Integer,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg6::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg7::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg8::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:PetscProcessTree,petscRealSingle),PetscErrorCode,(Int64,Ptr{PetscBool},Ptr{Int64},Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function PetscMergeIntArrayPair(arg0::Type{Float32},arg1::Integer,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg9::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:PetscMergeIntArrayPair,petscRealSingle),PetscErrorCode,(Int64,Ptr{Int64},Ptr{Int64},Int64,Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
    return err
end

function PetscMergeIntArray(arg0::Type{Float32},arg1::Integer,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:PetscMergeIntArray,petscRealSingle),PetscErrorCode,(Int64,Ptr{Int64},Int64,Ptr{Int64},Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscSetDisplay(arg0::Type{Float32})
    err = ccall((:PetscSetDisplay,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscGetDisplay(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Csize_t)
    err = ccall((:PetscGetDisplay,petscRealSingle),PetscErrorCode,(Cstring,Csize_t),arg1,arg2)
    return err
end

function PetscRandomInitializePackage(arg0::Type{Float32})
    err = ccall((:PetscRandomInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscRandomRegister(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscRandomRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

#= skipping function with undefined symbols:
 function PetscRandomSetType(arg0::Type{Float32},arg1::PetscRandom,arg2::PetscRandomType)
    ccall((:PetscRandomSetType,petscRealSingle),PetscErrorCode,(PetscRandom,Cstring),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscRandomSetFromOptions(arg0::Type{Float32},arg1::PetscRandom)
    ccall((:PetscRandomSetFromOptions,petscRealSingle),PetscErrorCode,(PetscRandom,),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscRandomGetType(arg0::Type{Float32},arg1::PetscRandom,arg2::Union{Ptr{PetscRandomType},StridedArray{PetscRandomType},Ptr{PetscRandomType},Ref{PetscRandomType}})
    ccall((:PetscRandomGetType,petscRealSingle),PetscErrorCode,(PetscRandom,Ptr{Ptr{UInt8}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscRandomCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{PetscRandom},StridedArray{PetscRandom},Ptr{PetscRandom},Ref{PetscRandom}})
    ccall((:PetscRandomCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{PetscRandom}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscRandomGetValue(arg0::Type{Float32},arg1::PetscRandom,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:PetscRandomGetValue,petscRealSingle),PetscErrorCode,(PetscRandom,Ptr{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscRandomGetValueReal(arg0::Type{Float32},arg1::PetscRandom,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:PetscRandomGetValueReal,petscRealSingle),PetscErrorCode,(PetscRandom,Ptr{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscRandomGetInterval(arg0::Type{Float32},arg1::PetscRandom,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:PetscRandomGetInterval,petscRealSingle),PetscErrorCode,(PetscRandom,Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscRandomSetInterval(arg0::Type{Float32},arg1::PetscRandom,arg2::Float32,arg3::Float32)
    ccall((:PetscRandomSetInterval,petscRealSingle),PetscErrorCode,(PetscRandom,Float32,Float32),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscRandomSetSeed(arg0::Type{Float32},arg1::PetscRandom,arg2::Culong)
    ccall((:PetscRandomSetSeed,petscRealSingle),PetscErrorCode,(PetscRandom,Culong),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscRandomGetSeed(arg0::Type{Float32},arg1::PetscRandom,arg2::Union{Ptr{Culong},StridedArray{Culong},Ptr{Culong},Ref{Culong}})
    ccall((:PetscRandomGetSeed,petscRealSingle),PetscErrorCode,(PetscRandom,Ptr{Culong}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscRandomSeed(arg0::Type{Float32},arg1::PetscRandom)
    ccall((:PetscRandomSeed,petscRealSingle),PetscErrorCode,(PetscRandom,),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscRandomDestroy(arg0::Type{Float32},arg1::Union{Ptr{PetscRandom},StridedArray{PetscRandom},Ptr{PetscRandom},Ref{PetscRandom}})
    ccall((:PetscRandomDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscRandom},),arg1)
end
=#
function PetscGetFullPath(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{ByteString,Symbol},arg3::Csize_t)
    err = ccall((:PetscGetFullPath,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Csize_t),arg1,arg2,arg3)
    return err
end

function PetscGetRelativePath(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{ByteString,Symbol},arg3::Csize_t)
    err = ccall((:PetscGetRelativePath,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Csize_t),arg1,arg2,arg3)
    return err
end

function PetscGetWorkingDirectory(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Csize_t)
    err = ccall((:PetscGetWorkingDirectory,petscRealSingle),PetscErrorCode,(Cstring,Csize_t),arg1,arg2)
    return err
end

function PetscGetRealPath(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{ByteString,Symbol})
    err = ccall((:PetscGetRealPath,petscRealSingle),PetscErrorCode,(Cstring,Cstring),arg1,arg2)
    return err
end

function PetscGetHomeDirectory(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Csize_t)
    err = ccall((:PetscGetHomeDirectory,petscRealSingle),PetscErrorCode,(Cstring,Csize_t),arg1,arg2)
    return err
end

function PetscTestFile(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::UInt8,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscTestFile,petscRealSingle),PetscErrorCode,(Cstring,UInt8,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function PetscTestDirectory(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::UInt8,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscTestDirectory,petscRealSingle),PetscErrorCode,(Cstring,UInt8,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function PetscBinaryRead(arg0::Type{Float32},arg1::Integer,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Integer,arg4::PetscDataType)
    err = ccall((:PetscBinaryRead,petscRealSingle),PetscErrorCode,(Cint,Ptr{Void},Int64,PetscDataType),arg1,arg2,arg3,arg4)
    return err
end

function PetscBinarySynchronizedRead(arg0::Type{Float32},arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Integer,arg5::PetscDataType)
    err = ccall((:PetscBinarySynchronizedRead,petscRealSingle),PetscErrorCode,(comm_type,Cint,Ptr{Void},Int64,PetscDataType),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscBinarySynchronizedWrite(arg0::Type{Float32},arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Integer,arg5::PetscDataType,arg6::PetscBool)
    err = ccall((:PetscBinarySynchronizedWrite,petscRealSingle),PetscErrorCode,(comm_type,Cint,Ptr{Void},Int64,PetscDataType,PetscBool),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscBinaryWrite(arg0::Type{Float32},arg1::Integer,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Integer,arg4::PetscDataType,arg5::PetscBool)
    err = ccall((:PetscBinaryWrite,petscRealSingle),PetscErrorCode,(Cint,Ptr{Void},Int64,PetscDataType,PetscBool),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscBinaryOpen(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::PetscFileMode,arg3::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:PetscBinaryOpen,petscRealSingle),PetscErrorCode,(Cstring,PetscFileMode,Ptr{Cint}),arg1,arg2,arg3)
    return err
end

function PetscBinaryClose(arg0::Type{Float32},arg1::Integer)
    err = ccall((:PetscBinaryClose,petscRealSingle),PetscErrorCode,(Cint,),arg1)
    return err
end

function PetscSharedTmp(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscSharedTmp,petscRealSingle),PetscErrorCode,(comm_type,Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscSharedWorkingDirectory(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscSharedWorkingDirectory,petscRealSingle),PetscErrorCode,(comm_type,Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscGetTmp(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Symbol},arg3::Csize_t)
    err = ccall((:PetscGetTmp,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Csize_t),arg1,arg2,arg3)
    return err
end

function PetscFileRetrieve(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Symbol},arg3::Union{ByteString,Symbol},arg4::Csize_t,arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscFileRetrieve,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Cstring,Csize_t,Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscLs(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Symbol},arg3::Union{ByteString,Symbol},arg4::Csize_t,arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscLs,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Cstring,Csize_t,Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscOpenSocket(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Integer,arg3::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:PetscOpenSocket,petscRealSingle),PetscErrorCode,(Cstring,Cint,Ptr{Cint}),arg1,arg2,arg3)
    return err
end

function PetscBinarySeek(arg0::Type{Float32},arg1::Integer,off_t::Integer,arg2::PetscBinarySeekType,arg3::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:PetscBinarySeek,petscRealSingle),PetscErrorCode,(Cint,Cint,PetscBinarySeekType,Ptr{Cint}),arg1,off_t,arg2,arg3)
    return err
end

function PetscBinarySynchronizedSeek(arg0::Type{Float32},arg1::MPI_Comm,arg2::Integer,off_t::Integer,arg3::PetscBinarySeekType,arg4::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:PetscBinarySynchronizedSeek,petscRealSingle),PetscErrorCode,(comm_type,Cint,Cint,PetscBinarySeekType,Ptr{Cint}),arg1,arg2,off_t,arg3,arg4)
    return err
end

function PetscByteSwap(arg0::Type{Float32},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg2::PetscDataType,arg3::Integer)
    err = ccall((:PetscByteSwap,petscRealSingle),PetscErrorCode,(Ptr{Void},PetscDataType,Int64),arg1,arg2,arg3)
    return err
end

function PetscSetDebugTerminal(arg0::Type{Float32},arg1::Union{ByteString,Symbol})
    err = ccall((:PetscSetDebugTerminal,petscRealSingle),PetscErrorCode,(Cstring,),arg1)
    return err
end

function PetscSetDebugger(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::PetscBool)
    err = ccall((:PetscSetDebugger,petscRealSingle),PetscErrorCode,(Cstring,PetscBool),arg1,arg2)
    return err
end

function PetscSetDefaultDebugger(arg0::Type{Float32})
    err = ccall((:PetscSetDefaultDebugger,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscSetDebuggerFromString(arg0::Type{Float32},arg1::Union{ByteString,Symbol})
    err = ccall((:PetscSetDebuggerFromString,petscRealSingle),PetscErrorCode,(Cstring,),arg1)
    return err
end

function PetscAttachDebugger(arg0::Type{Float32})
    err = ccall((:PetscAttachDebugger,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscStopForDebugger(arg0::Type{Float32})
    err = ccall((:PetscStopForDebugger,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscGatherNumberOfMessages(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}},arg3::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}},arg4::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}})
    err = ccall((:PetscGatherNumberOfMessages,petscRealSingle),PetscErrorCode,(comm_type,Ptr{PetscMPIInt},Ptr{PetscMPIInt},Ptr{PetscMPIInt}),arg1,arg2,arg3,arg4)
    return err
end

function PetscGatherMessageLengths(arg0::Type{Float32},arg1::MPI_Comm,arg2::PetscMPIInt,arg3::PetscMPIInt,arg4::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}},arg5::Union{Ptr{Ptr{PetscMPIInt}},StridedArray{Ptr{PetscMPIInt}},Ptr{Ptr{PetscMPIInt}},Ref{Ptr{PetscMPIInt}}},arg6::Union{Ptr{Ptr{PetscMPIInt}},StridedArray{Ptr{PetscMPIInt}},Ptr{Ptr{PetscMPIInt}},Ref{Ptr{PetscMPIInt}}})
    err = ccall((:PetscGatherMessageLengths,petscRealSingle),PetscErrorCode,(comm_type,PetscMPIInt,PetscMPIInt,Ptr{PetscMPIInt},Ptr{Ptr{PetscMPIInt}},Ptr{Ptr{PetscMPIInt}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscGatherMessageLengths2(arg0::Type{Float32},arg1::MPI_Comm,arg2::PetscMPIInt,arg3::PetscMPIInt,arg4::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}},arg5::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}},arg6::Union{Ptr{Ptr{PetscMPIInt}},StridedArray{Ptr{PetscMPIInt}},Ptr{Ptr{PetscMPIInt}},Ref{Ptr{PetscMPIInt}}},arg7::Union{Ptr{Ptr{PetscMPIInt}},StridedArray{Ptr{PetscMPIInt}},Ptr{Ptr{PetscMPIInt}},Ref{Ptr{PetscMPIInt}}},arg8::Union{Ptr{Ptr{PetscMPIInt}},StridedArray{Ptr{PetscMPIInt}},Ptr{Ptr{PetscMPIInt}},Ref{Ptr{PetscMPIInt}}})
    err = ccall((:PetscGatherMessageLengths2,petscRealSingle),PetscErrorCode,(comm_type,PetscMPIInt,PetscMPIInt,Ptr{PetscMPIInt},Ptr{PetscMPIInt},Ptr{Ptr{PetscMPIInt}},Ptr{Ptr{PetscMPIInt}},Ptr{Ptr{PetscMPIInt}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

#= skipping function with undefined symbols:
 function PetscPostIrecvInt(arg0::Type{Float32},arg1::MPI_Comm,arg2::PetscMPIInt,arg3::PetscMPIInt,arg4::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}},arg5::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}},arg6::Union{Ptr{Ptr{Ptr{Int64}}},StridedArray{Ptr{Ptr{Int64}}},Ptr{Ptr{Ptr{Int64}}},Ref{Ptr{Ptr{Int64}}}},arg7::Union{Ptr{Ptr{MPI_Request}},StridedArray{Ptr{MPI_Request}},Ptr{Ptr{MPI_Request}},Ref{Ptr{MPI_Request}}})
    ccall((:PetscPostIrecvInt,petscRealSingle),PetscErrorCode,(comm_type,PetscMPIInt,PetscMPIInt,Ptr{PetscMPIInt},Ptr{PetscMPIInt},Ptr{Ptr{Ptr{Int64}}},Ptr{Ptr{MPI_Request}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
#= skipping function with undefined symbols:
 function PetscPostIrecvScalar(arg0::Type{Float32},arg1::MPI_Comm,arg2::PetscMPIInt,arg3::PetscMPIInt,arg4::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}},arg5::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}},arg6::Union{Ptr{Ptr{Ptr{Float32}}},StridedArray{Ptr{Ptr{Float32}}},Ptr{Ptr{Ptr{Float32}}},Ref{Ptr{Ptr{Float32}}}},arg7::Union{Ptr{Ptr{MPI_Request}},StridedArray{Ptr{MPI_Request}},Ptr{Ptr{MPI_Request}},Ref{Ptr{MPI_Request}}})
    ccall((:PetscPostIrecvScalar,petscRealSingle),PetscErrorCode,(comm_type,PetscMPIInt,PetscMPIInt,Ptr{PetscMPIInt},Ptr{PetscMPIInt},Ptr{Ptr{Ptr{Float32}}},Ptr{Ptr{MPI_Request}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
#= skipping function with undefined symbols:
 function PetscCommBuildTwoSided(arg0::Type{Float32},arg1::MPI_Comm,arg2::PetscMPIInt,arg3::MPI_Datatype,arg4::Integer,arg5::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Ptr{PetscMPIInt}},StridedArray{Ptr{PetscMPIInt}},Ptr{Ptr{PetscMPIInt}},Ref{Ptr{PetscMPIInt}}},arg9::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:PetscCommBuildTwoSided,petscRealSingle),PetscErrorCode,(comm_type,PetscMPIInt,MPI_Datatype,Int64,Ptr{PetscMPIInt},Ptr{Void},Ptr{Int64},Ptr{Ptr{PetscMPIInt}},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
end
=#
function PetscCommBuildTwoSidedSetType(arg0::Type{Float32},arg1::MPI_Comm,arg2::PetscBuildTwoSidedType)
    err = ccall((:PetscCommBuildTwoSidedSetType,petscRealSingle),PetscErrorCode,(comm_type,PetscBuildTwoSidedType),arg1,arg2)
    return err
end

function PetscCommBuildTwoSidedGetType(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{PetscBuildTwoSidedType},StridedArray{PetscBuildTwoSidedType},Ptr{PetscBuildTwoSidedType},Ref{PetscBuildTwoSidedType}})
    err = ccall((:PetscCommBuildTwoSidedGetType,petscRealSingle),PetscErrorCode,(comm_type,Ptr{PetscBuildTwoSidedType}),arg1,arg2)
    return err
end

function PetscSSEIsEnabled(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscSSEIsEnabled,petscRealSingle),PetscErrorCode,(comm_type,Ptr{PetscBool},Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

#= skipping function with undefined symbols:
 function PetscObjectComm(arg0::Type{Float32},arg1::PetscObject)
    ccall((:PetscObjectComm,petscRealSingle),MPI_Comm,(PetscObject,),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscSubcommDestroy(arg0::Type{Float32},arg1::Union{Ptr{PetscSubcomm},StridedArray{PetscSubcomm},Ptr{PetscSubcomm},Ref{PetscSubcomm}})
    ccall((:PetscSubcommDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscSubcomm},),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscSubcommSetNumber(arg0::Type{Float32},arg1::PetscSubcomm,arg2::Integer)
    ccall((:PetscSubcommSetNumber,petscRealSingle),PetscErrorCode,(PetscSubcomm,Int64),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscSubcommSetType(arg0::Type{Float32},arg1::PetscSubcomm,arg2::PetscSubcommType)
    ccall((:PetscSubcommSetType,petscRealSingle),PetscErrorCode,(PetscSubcomm,PetscSubcommType),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscSubcommSetTypeGeneral(arg0::Type{Float32},arg1::PetscSubcomm,arg2::PetscMPIInt,arg3::PetscMPIInt)
    ccall((:PetscSubcommSetTypeGeneral,petscRealSingle),PetscErrorCode,(PetscSubcomm,PetscMPIInt,PetscMPIInt),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscSubcommView(arg1::PetscSubcomm,arg2::PetscViewer{Float32})
    ccall((:PetscSubcommView,petscRealSingle),PetscErrorCode,(PetscSubcomm,PetscViewer{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscSubcommSetFromOptions(arg0::Type{Float32},arg1::PetscSubcomm)
    ccall((:PetscSubcommSetFromOptions,petscRealSingle),PetscErrorCode,(PetscSubcomm,),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscSegBufferCreate(arg0::Type{Float32},arg1::Csize_t,arg2::Csize_t,arg3::Union{Ptr{PetscSegBuffer},StridedArray{PetscSegBuffer},Ptr{PetscSegBuffer},Ref{PetscSegBuffer}})
    ccall((:PetscSegBufferCreate,petscRealSingle),PetscErrorCode,(Csize_t,Csize_t,Ptr{PetscSegBuffer}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscSegBufferDestroy(arg0::Type{Float32},arg1::Union{Ptr{PetscSegBuffer},StridedArray{PetscSegBuffer},Ptr{PetscSegBuffer},Ref{PetscSegBuffer}})
    ccall((:PetscSegBufferDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscSegBuffer},),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscSegBufferGet(arg0::Type{Float32},arg1::PetscSegBuffer,arg2::Csize_t,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:PetscSegBufferGet,petscRealSingle),PetscErrorCode,(PetscSegBuffer,Csize_t,Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscSegBufferExtractAlloc(arg0::Type{Float32},arg1::PetscSegBuffer,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:PetscSegBufferExtractAlloc,petscRealSingle),PetscErrorCode,(PetscSegBuffer,Ptr{Void}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscSegBufferExtractTo(arg0::Type{Float32},arg1::PetscSegBuffer,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:PetscSegBufferExtractTo,petscRealSingle),PetscErrorCode,(PetscSegBuffer,Ptr{Void}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscSegBufferExtractInPlace(arg0::Type{Float32},arg1::PetscSegBuffer,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:PetscSegBufferExtractInPlace,petscRealSingle),PetscErrorCode,(PetscSegBuffer,Ptr{Void}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscSegBufferGetSize(arg0::Type{Float32},arg1::PetscSegBuffer,arg2::Union{Ptr{Csize_t},StridedArray{Csize_t},Ptr{Csize_t},Ref{Csize_t}})
    ccall((:PetscSegBufferGetSize,petscRealSingle),PetscErrorCode,(PetscSegBuffer,Ptr{Csize_t}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscSegBufferUnuse(arg0::Type{Float32},arg1::PetscSegBuffer,arg2::Csize_t)
    ccall((:PetscSegBufferUnuse,petscRealSingle),PetscErrorCode,(PetscSegBuffer,Csize_t),arg1,arg2)
end
=#
function PetscGoogleDriveAuthorize(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Symbol},arg3::Union{ByteString,Symbol},arg4::Csize_t)
    err = ccall((:PetscGoogleDriveAuthorize,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Cstring,Csize_t),arg1,arg2,arg3,arg4)
    return err
end

function PetscGoogleDriveRefresh(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Symbol},arg3::Union{ByteString,Symbol},arg4::Csize_t)
    err = ccall((:PetscGoogleDriveRefresh,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Cstring,Csize_t),arg1,arg2,arg3,arg4)
    return err
end

function PetscGoogleDriveUpload(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Symbol},arg3::Union{ByteString,Symbol})
    err = ccall((:PetscGoogleDriveUpload,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Cstring),arg1,arg2,arg3)
    return err
end

function PetscBoxAuthorize(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Symbol},arg3::Union{ByteString,Symbol},arg4::Csize_t)
    err = ccall((:PetscBoxAuthorize,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Cstring,Csize_t),arg1,arg2,arg3,arg4)
    return err
end

function PetscBoxRefresh(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Symbol},arg3::Union{ByteString,Symbol},arg4::Union{ByteString,Symbol},arg5::Csize_t)
    err = ccall((:PetscBoxRefresh,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Cstring,Cstring,Csize_t),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscTextBelt(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Symbol},arg3::Union{ByteString,Symbol},arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscTextBelt,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Cstring,Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function PetscPullJSONValue(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{ByteString,Symbol},arg3::Union{ByteString,Symbol},arg4::Csize_t,arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscPullJSONValue,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Cstring,Csize_t,Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscPushJSONValue(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{ByteString,Symbol},arg3::Union{ByteString,Symbol},arg4::Csize_t)
    err = ccall((:PetscPushJSONValue,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Cstring,Csize_t),arg1,arg2,arg3,arg4)
    return err
end

#= skipping function with undefined symbols:
 function PetscBagCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Csize_t,arg3::Union{Ptr{PetscBag},StridedArray{PetscBag},Ptr{PetscBag},Ref{PetscBag}})
    ccall((:PetscBagCreate,petscRealSingle),PetscErrorCode,(comm_type,Csize_t,Ptr{PetscBag}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscBagDestroy(arg0::Type{Float32},arg1::Union{Ptr{PetscBag},StridedArray{PetscBag},Ptr{PetscBag},Ref{PetscBag}})
    ccall((:PetscBagDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscBag},),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscBagGetData(arg0::Type{Float32},arg1::PetscBag,arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    ccall((:PetscBagGetData,petscRealSingle),PetscErrorCode,(PetscBag,Ptr{Ptr{Void}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscBagRegisterReal(arg0::Type{Float32},arg1::PetscBag,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Float32,arg4::Union{ByteString,Symbol},arg5::Union{ByteString,Symbol})
    ccall((:PetscBagRegisterReal,petscRealSingle),PetscErrorCode,(PetscBag,Ptr{Void},Float32,Cstring,Cstring),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function PetscBagRegisterRealArray(arg0::Type{Float32},arg1::PetscBag,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Integer,arg4::Union{ByteString,Symbol},arg5::Union{ByteString,Symbol})
    ccall((:PetscBagRegisterRealArray,petscRealSingle),PetscErrorCode,(PetscBag,Ptr{Void},Int64,Cstring,Cstring),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function PetscBagRegisterString(arg0::Type{Float32},arg1::PetscBag,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Integer,arg4::Union{ByteString,Symbol},arg5::Union{ByteString,Symbol},arg6::Union{ByteString,Symbol})
    ccall((:PetscBagRegisterString,petscRealSingle),PetscErrorCode,(PetscBag,Ptr{Void},Int64,Cstring,Cstring,Cstring),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
#= skipping function with undefined symbols:
 function PetscBagRegisterScalar(arg0::Type{Float32},arg1::PetscBag,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Float32,arg4::Union{ByteString,Symbol},arg5::Union{ByteString,Symbol})
    ccall((:PetscBagRegisterScalar,petscRealSingle),PetscErrorCode,(PetscBag,Ptr{Void},Float32,Cstring,Cstring),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function PetscBagRegisterInt(arg0::Type{Float32},arg1::PetscBag,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Integer,arg4::Union{ByteString,Symbol},arg5::Union{ByteString,Symbol})
    ccall((:PetscBagRegisterInt,petscRealSingle),PetscErrorCode,(PetscBag,Ptr{Void},Int64,Cstring,Cstring),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function PetscBagRegister64bitInt(arg0::Type{Float32},arg1::PetscBag,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Petsc64bitInt,arg4::Union{ByteString,Symbol},arg5::Union{ByteString,Symbol})
    ccall((:PetscBagRegister64bitInt,petscRealSingle),PetscErrorCode,(PetscBag,Ptr{Void},Petsc64bitInt,Cstring,Cstring),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function PetscBagRegisterIntArray(arg0::Type{Float32},arg1::PetscBag,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Integer,arg4::Union{ByteString,Symbol},arg5::Union{ByteString,Symbol})
    ccall((:PetscBagRegisterIntArray,petscRealSingle),PetscErrorCode,(PetscBag,Ptr{Void},Int64,Cstring,Cstring),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function PetscBagRegisterEnum(arg0::Type{Float32},arg1::PetscBag,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg4::PetscEnum,arg5::Union{ByteString,Symbol},arg6::Union{ByteString,Symbol})
    ccall((:PetscBagRegisterEnum,petscRealSingle),PetscErrorCode,(PetscBag,Ptr{Void},Ptr{Ptr{UInt8}},PetscEnum,Cstring,Cstring),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
#= skipping function with undefined symbols:
 function PetscBagRegisterBool(arg0::Type{Float32},arg1::PetscBag,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::PetscBool,arg4::Union{ByteString,Symbol},arg5::Union{ByteString,Symbol})
    ccall((:PetscBagRegisterBool,petscRealSingle),PetscErrorCode,(PetscBag,Ptr{Void},PetscBool,Cstring,Cstring),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function PetscBagRegisterBoolArray(arg0::Type{Float32},arg1::PetscBag,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Integer,arg4::Union{ByteString,Symbol},arg5::Union{ByteString,Symbol})
    ccall((:PetscBagRegisterBoolArray,petscRealSingle),PetscErrorCode,(PetscBag,Ptr{Void},Int64,Cstring,Cstring),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function PetscBagGetNames(arg0::Type{Float32},arg1::PetscBag,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    ccall((:PetscBagGetNames,petscRealSingle),PetscErrorCode,(PetscBag,Ptr{Ptr{UInt8}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscBagSetFromOptions(arg0::Type{Float32},arg1::PetscBag)
    ccall((:PetscBagSetFromOptions,petscRealSingle),PetscErrorCode,(PetscBag,),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscBagGetName(arg0::Type{Float32},arg1::PetscBag,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    ccall((:PetscBagGetName,petscRealSingle),PetscErrorCode,(PetscBag,Ptr{Ptr{UInt8}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscBagSetName(arg0::Type{Float32},arg1::PetscBag,arg2::Union{ByteString,Symbol},arg3::Union{ByteString,Symbol})
    ccall((:PetscBagSetName,petscRealSingle),PetscErrorCode,(PetscBag,Cstring,Cstring),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscBagSetOptionsPrefix(arg0::Type{Float32},arg1::PetscBag,arg2::Union{ByteString,Symbol})
    ccall((:PetscBagSetOptionsPrefix,petscRealSingle),PetscErrorCode,(PetscBag,Cstring),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscBagView(arg1::PetscBag,arg2::PetscViewer{Float32})
    ccall((:PetscBagView,petscRealSingle),PetscErrorCode,(PetscBag,PetscViewer{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscBagLoad(arg1::PetscViewer{Float32},arg2::PetscBag)
    ccall((:PetscBagLoad,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},PetscBag),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscBagSetViewer(arg0::Type{Float32},arg1::PetscBag,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:PetscBagSetViewer,petscRealSingle),PetscErrorCode,(PetscBag,Ptr{Void}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscBagSetLoader(arg0::Type{Float32},arg1::PetscBag,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:PetscBagSetLoader,petscRealSingle),PetscErrorCode,(PetscBag,Ptr{Void}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscBagSetDestroy(arg0::Type{Float32},arg1::PetscBag,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:PetscBagSetDestroy,petscRealSingle),PetscErrorCode,(PetscBag,Ptr{Void}),arg1,arg2)
end
=#
function PetscGetCPUTime(arg0::Type{Float32},arg1::Union{Ptr{PetscLogDouble},StridedArray{PetscLogDouble},Ptr{PetscLogDouble},Ref{PetscLogDouble}})
    err = ccall((:PetscGetCPUTime,petscRealSingle),PetscErrorCode,(Ptr{PetscLogDouble},),arg1)
    return err
end

function PetscViewerInitializePackage(arg0::Type{Float32})
    err = ccall((:PetscViewerInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscViewerRegister(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscViewerRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function PetscViewerCreate(arg1::MPI_Comm,arg2::Union{Ptr{PetscViewer{Float32}},StridedArray{PetscViewer{Float32}},Ptr{PetscViewer{Float32}},Ref{PetscViewer{Float32}}})
    err = ccall((:PetscViewerCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{PetscViewer{Float32}}),arg1,arg2)
    return err
end

function PetscViewerSetFromOptions(arg1::PetscViewer{Float32})
    err = ccall((:PetscViewerSetFromOptions,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},),arg1)
    return err
end

#= skipping function with undefined symbols:
 function PetscViewerASCIIOpenWithFILE(arg1::MPI_Comm,arg2::Union{Ptr{FILE},StridedArray{FILE},Ptr{FILE},Ref{FILE}},arg3::Union{Ptr{PetscViewer{Float32}},StridedArray{PetscViewer{Float32}},Ptr{PetscViewer{Float32}},Ref{PetscViewer{Float32}}})
    ccall((:PetscViewerASCIIOpenWithFILE,petscRealSingle),PetscErrorCode,(comm_type,Ptr{FILE},Ptr{PetscViewer{Float32}}),arg1,arg2,arg3)
end
=#
function PetscViewerASCIIOpen(arg1::MPI_Comm,arg2::Union{ByteString,Symbol},arg3::Union{Ptr{PetscViewer{Float32}},StridedArray{PetscViewer{Float32}},Ptr{PetscViewer{Float32}},Ref{PetscViewer{Float32}}})
    err = ccall((:PetscViewerASCIIOpen,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Ptr{PetscViewer{Float32}}),arg1,arg2,arg3)
    return err
end

#= skipping function with undefined symbols:
 function PetscViewerASCIISetFILE(arg1::PetscViewer{Float32},arg2::Union{Ptr{FILE},StridedArray{FILE},Ptr{FILE},Ref{FILE}})
    ccall((:PetscViewerASCIISetFILE,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{FILE}),arg1,arg2)
end
=#
function PetscViewerBinaryOpen(arg1::MPI_Comm,arg2::Union{ByteString,Symbol},arg3::PetscFileMode,arg4::Union{Ptr{PetscViewer{Float32}},StridedArray{PetscViewer{Float32}},Ptr{PetscViewer{Float32}},Ref{PetscViewer{Float32}}})
    err = ccall((:PetscViewerBinaryOpen,petscRealSingle),PetscErrorCode,(comm_type,Cstring,PetscFileMode,Ptr{PetscViewer{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscViewerBinaryGetFlowControl(arg1::PetscViewer{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscViewerBinaryGetFlowControl,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscViewerBinarySetFlowControl(arg1::PetscViewer{Float32},arg2::Integer)
    err = ccall((:PetscViewerBinarySetFlowControl,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Int64),arg1,arg2)
    return err
end

function PetscViewerBinarySetUseMPIIO(arg1::PetscViewer{Float32},arg2::PetscBool)
    err = ccall((:PetscViewerBinarySetUseMPIIO,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},PetscBool),arg1,arg2)
    return err
end

function PetscViewerBinaryGetUseMPIIO(arg1::PetscViewer{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscViewerBinaryGetUseMPIIO,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscViewerSocketOpen(arg1::MPI_Comm,arg2::Union{ByteString,Symbol},arg3::Integer,arg4::Union{Ptr{PetscViewer{Float32}},StridedArray{PetscViewer{Float32}},Ptr{PetscViewer{Float32}},Ref{PetscViewer{Float32}}})
    err = ccall((:PetscViewerSocketOpen,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Cint,Ptr{PetscViewer{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscViewerStringOpen(arg1::MPI_Comm,arg2::Union{ByteString,Symbol},arg3::Csize_t,arg4::Union{Ptr{PetscViewer{Float32}},StridedArray{PetscViewer{Float32}},Ptr{PetscViewer{Float32}},Ref{PetscViewer{Float32}}})
    err = ccall((:PetscViewerStringOpen,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Csize_t,Ptr{PetscViewer{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscViewerDrawOpen(arg1::MPI_Comm,arg2::Union{ByteString,Symbol},arg3::Union{ByteString,Symbol},arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Union{Ptr{PetscViewer{Float32}},StridedArray{PetscViewer{Float32}},Ptr{PetscViewer{Float32}},Ref{PetscViewer{Float32}}})
    err = ccall((:PetscViewerDrawOpen,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Cstring,Cint,Cint,Cint,Cint,Ptr{PetscViewer{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function PetscViewerDrawSetDrawType(arg1::PetscViewer{Float32},arg2::PetscDrawType)
    err = ccall((:PetscViewerDrawSetDrawType,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Cstring),arg1,arg2)
    return err
end

function PetscViewerMathematicaOpen(arg1::MPI_Comm,arg2::Integer,arg3::Union{ByteString,Symbol},arg4::Union{ByteString,Symbol},arg5::Union{Ptr{PetscViewer{Float32}},StridedArray{PetscViewer{Float32}},Ptr{PetscViewer{Float32}},Ref{PetscViewer{Float32}}})
    err = ccall((:PetscViewerMathematicaOpen,petscRealSingle),PetscErrorCode,(comm_type,Cint,Cstring,Cstring,Ptr{PetscViewer{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscViewerSiloOpen(arg1::MPI_Comm,arg2::Union{ByteString,Symbol},arg3::Union{Ptr{PetscViewer{Float32}},StridedArray{PetscViewer{Float32}},Ptr{PetscViewer{Float32}},Ref{PetscViewer{Float32}}})
    err = ccall((:PetscViewerSiloOpen,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Ptr{PetscViewer{Float32}}),arg1,arg2,arg3)
    return err
end

function PetscViewerMatlabOpen(arg1::MPI_Comm,arg2::Union{ByteString,Symbol},arg3::PetscFileMode,arg4::Union{Ptr{PetscViewer{Float32}},StridedArray{PetscViewer{Float32}},Ptr{PetscViewer{Float32}},Ref{PetscViewer{Float32}}})
    err = ccall((:PetscViewerMatlabOpen,petscRealSingle),PetscErrorCode,(comm_type,Cstring,PetscFileMode,Ptr{PetscViewer{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscViewerGetType(arg1::PetscViewer{Float32},arg2::Union{Ptr{PetscViewerType},StridedArray{PetscViewerType},Ptr{PetscViewerType},Ref{PetscViewerType}})
    (arg2_,tmp) = symbol_get_before(arg2)
    err = ccall((:PetscViewerGetType,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{Ptr{UInt8}}),arg1,arg2_)
    symbol_get_after(arg2_,arg2)
    return err
end

function PetscViewerSetType(arg1::PetscViewer{Float32},arg2::PetscViewerType)
    err = ccall((:PetscViewerSetType,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Cstring),arg1,arg2)
    return err
end

function PetscViewerDestroy(arg1::Union{Ptr{PetscViewer{Float32}},StridedArray{PetscViewer{Float32}},Ptr{PetscViewer{Float32}},Ref{PetscViewer{Float32}}})
    err = ccall((:PetscViewerDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscViewer{Float32}},),arg1)
    return err
end

function PetscViewerGetSingleton(arg1::PetscViewer{Float32},arg2::Union{Ptr{PetscViewer{Float32}},StridedArray{PetscViewer{Float32}},Ptr{PetscViewer{Float32}},Ref{PetscViewer{Float32}}})
    err = ccall((:PetscViewerGetSingleton,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{PetscViewer{Float32}}),arg1,arg2)
    return err
end

function PetscViewerRestoreSingleton(arg1::PetscViewer{Float32},arg2::Union{Ptr{PetscViewer{Float32}},StridedArray{PetscViewer{Float32}},Ptr{PetscViewer{Float32}},Ref{PetscViewer{Float32}}})
    err = ccall((:PetscViewerRestoreSingleton,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{PetscViewer{Float32}}),arg1,arg2)
    return err
end

function PetscViewerGetSubcomm(arg1::PetscViewer{Float32},arg2::MPI_Comm,arg3::Union{Ptr{PetscViewer{Float32}},StridedArray{PetscViewer{Float32}},Ptr{PetscViewer{Float32}},Ref{PetscViewer{Float32}}})
    err = ccall((:PetscViewerGetSubcomm,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},comm_type,Ptr{PetscViewer{Float32}}),arg1,arg2,arg3)
    return err
end

function PetscViewerRestoreSubcomm(arg1::PetscViewer{Float32},arg2::MPI_Comm,arg3::Union{Ptr{PetscViewer{Float32}},StridedArray{PetscViewer{Float32}},Ptr{PetscViewer{Float32}},Ref{PetscViewer{Float32}}})
    err = ccall((:PetscViewerRestoreSubcomm,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},comm_type,Ptr{PetscViewer{Float32}}),arg1,arg2,arg3)
    return err
end

function PetscViewerSetUp(arg1::PetscViewer{Float32})
    err = ccall((:PetscViewerSetUp,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},),arg1)
    return err
end

function PetscViewerView(arg1::PetscViewer{Float32},arg2::PetscViewer{Float32})
    err = ccall((:PetscViewerView,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},PetscViewer{Float32}),arg1,arg2)
    return err
end

function PetscViewerAppendOptionsPrefix(arg1::PetscViewer{Float32},arg2::Union{ByteString,Symbol})
    err = ccall((:PetscViewerAppendOptionsPrefix,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Cstring),arg1,arg2)
    return err
end

function PetscViewerGetOptionsPrefix(arg1::PetscViewer{Float32},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscViewerGetOptionsPrefix,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PetscViewerSetFormat(arg1::PetscViewer{Float32},arg2::PetscViewerFormat)
    err = ccall((:PetscViewerSetFormat,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},PetscViewerFormat),arg1,arg2)
    return err
end

function PetscViewerPushFormat(arg1::PetscViewer{Float32},arg2::PetscViewerFormat)
    err = ccall((:PetscViewerPushFormat,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},PetscViewerFormat),arg1,arg2)
    return err
end

function PetscViewerPopFormat(arg1::PetscViewer{Float32})
    err = ccall((:PetscViewerPopFormat,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},),arg1)
    return err
end

function PetscViewerGetFormat(arg1::PetscViewer{Float32},arg2::Union{Ptr{PetscViewerFormat},StridedArray{PetscViewerFormat},Ptr{PetscViewerFormat},Ref{PetscViewerFormat}})
    err = ccall((:PetscViewerGetFormat,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{PetscViewerFormat}),arg1,arg2)
    return err
end

function PetscViewerFlush(arg1::PetscViewer{Float32})
    err = ccall((:PetscViewerFlush,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},),arg1)
    return err
end

function PetscOptionsGetViewer(arg1::MPI_Comm,arg2::Union{ByteString,Symbol},arg3::Union{ByteString,Symbol},arg4::Union{Ptr{PetscViewer{Float32}},StridedArray{PetscViewer{Float32}},Ptr{PetscViewer{Float32}},Ref{PetscViewer{Float32}}},arg5::Union{Ptr{PetscViewerFormat},StridedArray{PetscViewerFormat},Ptr{PetscViewerFormat},Ref{PetscViewerFormat}},arg6::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetViewer,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Cstring,Ptr{PetscViewer{Float32}},Ptr{PetscViewerFormat},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

#= skipping function with undefined symbols:
 function PetscOptionsViewer_Private(arg1::Union{Ptr{PetscOptions},StridedArray{PetscOptions},Ptr{PetscOptions},Ref{PetscOptions}},arg2::Union{ByteString,Symbol},arg3::Union{ByteString,Symbol},arg4::Union{ByteString,Symbol},arg5::Union{Ptr{PetscViewer{Float32}},StridedArray{PetscViewer{Float32}},Ptr{PetscViewer{Float32}},Ref{PetscViewer{Float32}}},arg6::Union{Ptr{PetscViewerFormat},StridedArray{PetscViewerFormat},Ptr{PetscViewerFormat},Ref{PetscViewerFormat}},arg7::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:PetscOptionsViewer_Private,petscRealSingle),PetscErrorCode,(Ptr{PetscOptions},Cstring,Cstring,Cstring,Ptr{PetscViewer{Float32}},Ptr{PetscViewerFormat},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
#= skipping function with undefined symbols:
 function PetscViewerASCIIGetPointer(arg1::PetscViewer{Float32},arg2::Union{Ptr{Ptr{FILE}},StridedArray{Ptr{FILE}},Ptr{Ptr{FILE}},Ref{Ptr{FILE}}})
    ccall((:PetscViewerASCIIGetPointer,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{Ptr{FILE}}),arg1,arg2)
end
=#
function PetscViewerFileGetMode(arg1::PetscViewer{Float32},arg2::Union{Ptr{PetscFileMode},StridedArray{PetscFileMode},Ptr{PetscFileMode},Ref{PetscFileMode}})
    err = ccall((:PetscViewerFileGetMode,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{PetscFileMode}),arg1,arg2)
    return err
end

function PetscViewerFileSetMode(arg1::PetscViewer{Float32},arg2::PetscFileMode)
    err = ccall((:PetscViewerFileSetMode,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},PetscFileMode),arg1,arg2)
    return err
end

function PetscViewerRead(arg1::PetscViewer{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::PetscDataType)
    err = ccall((:PetscViewerRead,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{Void},Int64,Ptr{Int64},PetscDataType),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscViewerASCIISynchronizedAllow(arg1::PetscViewer{Float32},arg2::PetscBool)
    err = ccall((:PetscViewerASCIISynchronizedAllow,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},PetscBool),arg1,arg2)
    return err
end

function PetscViewerASCIIPushTab(arg1::PetscViewer{Float32})
    err = ccall((:PetscViewerASCIIPushTab,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},),arg1)
    return err
end

function PetscViewerASCIIPopTab(arg1::PetscViewer{Float32})
    err = ccall((:PetscViewerASCIIPopTab,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},),arg1)
    return err
end

function PetscViewerASCIIUseTabs(arg1::PetscViewer{Float32},arg2::PetscBool)
    err = ccall((:PetscViewerASCIIUseTabs,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},PetscBool),arg1,arg2)
    return err
end

function PetscViewerASCIISetTab(arg1::PetscViewer{Float32},arg2::Integer)
    err = ccall((:PetscViewerASCIISetTab,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Int64),arg1,arg2)
    return err
end

function PetscViewerASCIIGetTab(arg1::PetscViewer{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscViewerASCIIGetTab,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscViewerASCIIAddTab(arg1::PetscViewer{Float32},arg2::Integer)
    err = ccall((:PetscViewerASCIIAddTab,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Int64),arg1,arg2)
    return err
end

function PetscViewerASCIISubtractTab(arg1::PetscViewer{Float32},arg2::Integer)
    err = ccall((:PetscViewerASCIISubtractTab,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Int64),arg1,arg2)
    return err
end

function PetscViewerASCIIRead(arg1::PetscViewer{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::PetscDataType)
    err = ccall((:PetscViewerASCIIRead,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{Void},Int64,Ptr{Int64},PetscDataType),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscViewerBinaryGetDescriptor(arg1::PetscViewer{Float32},arg2::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:PetscViewerBinaryGetDescriptor,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{Cint}),arg1,arg2)
    return err
end

#= skipping function with undefined symbols:
 function PetscViewerBinaryGetInfoPointer(arg1::PetscViewer{Float32},arg2::Union{Ptr{Ptr{FILE}},StridedArray{Ptr{FILE}},Ptr{Ptr{FILE}},Ref{Ptr{FILE}}})
    ccall((:PetscViewerBinaryGetInfoPointer,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{Ptr{FILE}}),arg1,arg2)
end
=#
function PetscViewerBinaryRead(arg1::PetscViewer{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::PetscDataType)
    err = ccall((:PetscViewerBinaryRead,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{Void},Int64,Ptr{Int64},PetscDataType),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscViewerBinaryWrite(arg1::PetscViewer{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Integer,arg4::PetscDataType,arg5::PetscBool)
    err = ccall((:PetscViewerBinaryWrite,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{Void},Int64,PetscDataType,PetscBool),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscViewerStringSetString(arg1::PetscViewer{Float32},arg2::Union{ByteString,Symbol},arg3::Integer)
    err = ccall((:PetscViewerStringSetString,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Cstring,Int64),arg1,arg2,arg3)
    return err
end

function PetscViewerDrawClear(arg1::PetscViewer{Float32})
    err = ccall((:PetscViewerDrawClear,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},),arg1)
    return err
end

function PetscViewerDrawSetHold(arg1::PetscViewer{Float32},arg2::PetscBool)
    err = ccall((:PetscViewerDrawSetHold,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},PetscBool),arg1,arg2)
    return err
end

function PetscViewerDrawGetHold(arg1::PetscViewer{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscViewerDrawGetHold,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscViewerDrawSetPause(arg1::PetscViewer{Float32},arg2::Float32)
    err = ccall((:PetscViewerDrawSetPause,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Float32),arg1,arg2)
    return err
end

function PetscViewerDrawGetPause(arg1::PetscViewer{Float32},arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:PetscViewerDrawGetPause,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{Float32}),arg1,arg2)
    return err
end

function PetscViewerDrawSetInfo(arg1::PetscViewer{Float32},arg2::Union{ByteString,Symbol},arg3::Union{ByteString,Symbol},arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer)
    err = ccall((:PetscViewerDrawSetInfo,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Cstring,Cstring,Cint,Cint,Cint,Cint),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function PetscViewerDrawResize(arg1::PetscViewer{Float32},arg2::Integer,arg3::Integer)
    err = ccall((:PetscViewerDrawResize,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Cint,Cint),arg1,arg2,arg3)
    return err
end

function PetscViewerDrawSetBounds(arg1::PetscViewer{Float32},arg2::Integer,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:PetscViewerDrawSetBounds,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Int64,Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function PetscViewerDrawGetBounds(arg1::PetscViewer{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:PetscViewerDrawGetBounds,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{Int64},Ptr{Ptr{Float32}}),arg1,arg2,arg3)
    return err
end

function PetscViewerSocketSetConnection(arg1::PetscViewer{Float32},arg2::Union{ByteString,Symbol},arg3::Integer)
    err = ccall((:PetscViewerSocketSetConnection,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Cstring,Cint),arg1,arg2,arg3)
    return err
end

function PetscViewerBinarySkipInfo(arg1::PetscViewer{Float32})
    err = ccall((:PetscViewerBinarySkipInfo,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},),arg1)
    return err
end

function PetscViewerBinarySetSkipInfo(arg1::PetscViewer{Float32},arg2::PetscBool)
    err = ccall((:PetscViewerBinarySetSkipInfo,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},PetscBool),arg1,arg2)
    return err
end

function PetscViewerBinaryGetSkipInfo(arg1::PetscViewer{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscViewerBinaryGetSkipInfo,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscViewerBinarySetSkipOptions(arg1::PetscViewer{Float32},arg2::PetscBool)
    err = ccall((:PetscViewerBinarySetSkipOptions,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},PetscBool),arg1,arg2)
    return err
end

function PetscViewerBinaryGetSkipOptions(arg1::PetscViewer{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscViewerBinaryGetSkipOptions,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscViewerBinarySetSkipHeader(arg1::PetscViewer{Float32},arg2::PetscBool)
    err = ccall((:PetscViewerBinarySetSkipHeader,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},PetscBool),arg1,arg2)
    return err
end

function PetscViewerBinaryGetSkipHeader(arg1::PetscViewer{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscViewerBinaryGetSkipHeader,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscViewerBinaryReadStringArray(arg1::PetscViewer{Float32},arg2::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}})
    err = ccall((:PetscViewerBinaryReadStringArray,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{Ptr{Ptr{UInt8}}}),arg1,arg2)
    return err
end

function PetscViewerBinaryWriteStringArray(arg1::PetscViewer{Float32},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscViewerBinaryWriteStringArray,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PetscViewerFileSetName(arg1::PetscViewer{Float32},arg2::Union{ByteString,Symbol})
    err = ccall((:PetscViewerFileSetName,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Cstring),arg1,arg2)
    return err
end

function PetscViewerFileGetName(arg1::PetscViewer{Float32},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscViewerFileGetName,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

#= skipping function with undefined symbols:
 function PetscViewerVUGetPointer(arg1::PetscViewer{Float32},arg2::Union{Ptr{Ptr{FILE}},StridedArray{Ptr{FILE}},Ptr{Ptr{FILE}},Ref{Ptr{FILE}}})
    ccall((:PetscViewerVUGetPointer,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{Ptr{FILE}}),arg1,arg2)
end
=#
function PetscViewerVUSetVecSeen(arg1::PetscViewer{Float32},arg2::PetscBool)
    err = ccall((:PetscViewerVUSetVecSeen,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},PetscBool),arg1,arg2)
    return err
end

function PetscViewerVUGetVecSeen(arg1::PetscViewer{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscViewerVUGetVecSeen,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PetscViewerVUFlushDeferred(arg1::PetscViewer{Float32})
    err = ccall((:PetscViewerVUFlushDeferred,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},),arg1)
    return err
end

function PetscViewerMathematicaInitializePackage(arg0::Type{Float32})
    err = ccall((:PetscViewerMathematicaInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscViewerMathematicaFinalizePackage(arg0::Type{Float32})
    err = ccall((:PetscViewerMathematicaFinalizePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscViewerMathematicaGetName(arg1::PetscViewer{Float32},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscViewerMathematicaGetName,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PetscViewerMathematicaSetName(arg1::PetscViewer{Float32},arg2::Union{ByteString,Symbol})
    err = ccall((:PetscViewerMathematicaSetName,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Cstring),arg1,arg2)
    return err
end

function PetscViewerMathematicaClearName(arg1::PetscViewer{Float32})
    err = ccall((:PetscViewerMathematicaClearName,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},),arg1)
    return err
end

function PetscViewerMathematicaSkipPackets(arg1::PetscViewer{Float32},arg2::Integer)
    err = ccall((:PetscViewerMathematicaSkipPackets,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Cint),arg1,arg2)
    return err
end

function PetscViewerSiloGetName(arg1::PetscViewer{Float32},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscViewerSiloGetName,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PetscViewerSiloSetName(arg1::PetscViewer{Float32},arg2::Union{ByteString,Symbol})
    err = ccall((:PetscViewerSiloSetName,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Cstring),arg1,arg2)
    return err
end

function PetscViewerSiloClearName(arg1::PetscViewer{Float32})
    err = ccall((:PetscViewerSiloClearName,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},),arg1)
    return err
end

function PetscViewerSiloGetMeshName(arg1::PetscViewer{Float32},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PetscViewerSiloGetMeshName,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PetscViewerSiloSetMeshName(arg1::PetscViewer{Float32},arg2::Union{ByteString,Symbol})
    err = ccall((:PetscViewerSiloSetMeshName,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Cstring),arg1,arg2)
    return err
end

function PetscViewerSiloClearMeshName(arg1::PetscViewer{Float32})
    err = ccall((:PetscViewerSiloClearMeshName,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},),arg1)
    return err
end

function PetscViewerNetcdfOpen(arg1::MPI_Comm,arg2::Union{ByteString,Symbol},arg3::PetscFileMode,arg4::Union{Ptr{PetscViewer{Float32}},StridedArray{PetscViewer{Float32}},Ptr{PetscViewer{Float32}},Ref{PetscViewer{Float32}}})
    err = ccall((:PetscViewerNetcdfOpen,petscRealSingle),PetscErrorCode,(comm_type,Cstring,PetscFileMode,Ptr{PetscViewer{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function PetscViewerNetcdfGetID(arg1::PetscViewer{Float32},arg2::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:PetscViewerNetcdfGetID,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Ptr{Cint}),arg1,arg2)
    return err
end

#= skipping function with undefined symbols:
 function PetscViewerVTKAddField(arg1::PetscViewer{Float32},arg2::PetscObject,PetscViewerVTKWriteFunction::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::PetscViewerVTKFieldType,arg4::PetscObject)
    ccall((:PetscViewerVTKAddField,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},PetscObject,Ptr{Void},PetscViewerVTKFieldType,PetscObject),arg1,arg2,PetscViewerVTKWriteFunction,arg3,arg4)
end
=#
function PetscViewerVTKOpen(arg1::MPI_Comm,arg2::Union{ByteString,Symbol},arg3::PetscFileMode,arg4::Union{Ptr{PetscViewer{Float32}},StridedArray{PetscViewer{Float32}},Ptr{PetscViewer{Float32}},Ref{PetscViewer{Float32}}})
    err = ccall((:PetscViewerVTKOpen,petscRealSingle),PetscErrorCode,(comm_type,Cstring,PetscFileMode,Ptr{PetscViewer{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function PETSC_VIEWER_STDOUT_(arg0::Type{Float32},arg1::MPI_Comm)
    err = ccall((:PETSC_VIEWER_STDOUT_,petscRealSingle),PetscViewer,(comm_type,),arg1)
    return err
end

function PetscViewerASCIIGetStdout(arg1::MPI_Comm,arg2::Union{Ptr{PetscViewer{Float32}},StridedArray{PetscViewer{Float32}},Ptr{PetscViewer{Float32}},Ref{PetscViewer{Float32}}})
    err = ccall((:PetscViewerASCIIGetStdout,petscRealSingle),PetscErrorCode,(comm_type,Ptr{PetscViewer{Float32}}),arg1,arg2)
    return err
end

function PETSC_VIEWER_STDERR_(arg0::Type{Float32},arg1::MPI_Comm)
    err = ccall((:PETSC_VIEWER_STDERR_,petscRealSingle),PetscViewer,(comm_type,),arg1)
    return err
end

function PetscViewerASCIIGetStderr(arg1::MPI_Comm,arg2::Union{Ptr{PetscViewer{Float32}},StridedArray{PetscViewer{Float32}},Ptr{PetscViewer{Float32}},Ref{PetscViewer{Float32}}})
    err = ccall((:PetscViewerASCIIGetStderr,petscRealSingle),PetscErrorCode,(comm_type,Ptr{PetscViewer{Float32}}),arg1,arg2)
    return err
end

function PETSC_VIEWER_DRAW_(arg0::Type{Float32},arg1::MPI_Comm)
    err = ccall((:PETSC_VIEWER_DRAW_,petscRealSingle),PetscViewer,(comm_type,),arg1)
    return err
end

function PETSC_VIEWER_SOCKET_(arg0::Type{Float32},arg1::MPI_Comm)
    err = ccall((:PETSC_VIEWER_SOCKET_,petscRealSingle),PetscViewer,(comm_type,),arg1)
    return err
end

function PETSC_VIEWER_BINARY_(arg0::Type{Float32},arg1::MPI_Comm)
    err = ccall((:PETSC_VIEWER_BINARY_,petscRealSingle),PetscViewer,(comm_type,),arg1)
    return err
end

function PETSC_VIEWER_MATLAB_(arg0::Type{Float32},arg1::MPI_Comm)
    err = ccall((:PETSC_VIEWER_MATLAB_,petscRealSingle),PetscViewer,(comm_type,),arg1)
    return err
end

function PETSC_VIEWER_HDF5_(arg0::Type{Float32},arg1::MPI_Comm)
    err = ccall((:PETSC_VIEWER_HDF5_,petscRealSingle),PetscViewer,(comm_type,),arg1)
    return err
end

function PetscViewerMatlabGetArray(arg1::PetscViewer{Float32},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{ByteString,Symbol})
    err = ccall((:PetscViewerMatlabGetArray,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Cint,Cint,Ptr{Float32},Cstring),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscViewerMatlabPutVariable(arg1::PetscViewer{Float32},arg2::Union{ByteString,Symbol},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscViewerMatlabPutVariable,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Cstring,Ptr{Void}),arg1,arg2,arg3)
    return err
end

#= skipping function with undefined symbols:
 function PetscViewersCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{PetscViewers},StridedArray{PetscViewers},Ptr{PetscViewers},Ref{PetscViewers}})
    ccall((:PetscViewersCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{PetscViewers}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscViewersDestroy(arg0::Type{Float32},arg1::Union{Ptr{PetscViewers},StridedArray{PetscViewers},Ptr{PetscViewers},Ref{PetscViewers}})
    ccall((:PetscViewersDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscViewers},),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscViewersGetViewer(arg1::PetscViewers,arg2::Integer,arg3::Union{Ptr{PetscViewer{Float32}},StridedArray{PetscViewer{Float32}},Ptr{PetscViewer{Float32}},Ref{PetscViewer{Float32}}})
    ccall((:PetscViewersGetViewer,petscRealSingle),PetscErrorCode,(PetscViewers,Int64,Ptr{PetscViewer{Float32}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscTableCreate(arg0::Type{Float32},arg1::Integer,arg2::Integer,arg3::Union{Ptr{PetscTable},StridedArray{PetscTable},Ptr{PetscTable},Ref{PetscTable}})
    ccall((:PetscTableCreate,petscRealSingle),PetscErrorCode,(Int64,Int64,Ptr{PetscTable}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscTableCreateCopy(arg0::Type{Float32},arg1::PetscTable,arg2::Union{Ptr{PetscTable},StridedArray{PetscTable},Ptr{PetscTable},Ref{PetscTable}})
    ccall((:PetscTableCreateCopy,petscRealSingle),PetscErrorCode,(PetscTable,Ptr{PetscTable}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscTableDestroy(arg0::Type{Float32},arg1::Union{Ptr{PetscTable},StridedArray{PetscTable},Ptr{PetscTable},Ref{PetscTable}})
    ccall((:PetscTableDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscTable},),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscTableGetCount(arg0::Type{Float32},arg1::PetscTable,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:PetscTableGetCount,petscRealSingle),PetscErrorCode,(PetscTable,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscTableIsEmpty(arg0::Type{Float32},arg1::PetscTable,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:PetscTableIsEmpty,petscRealSingle),PetscErrorCode,(PetscTable,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscTableAddExpand(arg0::Type{Float32},arg1::PetscTable,arg2::Integer,arg3::Integer,arg4::InsertMode)
    ccall((:PetscTableAddExpand,petscRealSingle),PetscErrorCode,(PetscTable,Int64,Int64,InsertMode),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function PetscTableAddCountExpand(arg0::Type{Float32},arg1::PetscTable,arg2::Integer)
    ccall((:PetscTableAddCountExpand,petscRealSingle),PetscErrorCode,(PetscTable,Int64),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscTableGetHeadPosition(arg0::Type{Float32},arg1::PetscTable,arg2::Union{Ptr{PetscTablePosition},StridedArray{PetscTablePosition},Ptr{PetscTablePosition},Ref{PetscTablePosition}})
    ccall((:PetscTableGetHeadPosition,petscRealSingle),PetscErrorCode,(PetscTable,Ptr{PetscTablePosition}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscTableGetNext(arg0::Type{Float32},arg1::PetscTable,arg2::Union{Ptr{PetscTablePosition},StridedArray{PetscTablePosition},Ptr{PetscTablePosition},Ref{PetscTablePosition}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:PetscTableGetNext,petscRealSingle),PetscErrorCode,(PetscTable,Ptr{PetscTablePosition},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function PetscTableRemoveAll(arg0::Type{Float32},arg1::PetscTable)
    ccall((:PetscTableRemoveAll,petscRealSingle),PetscErrorCode,(PetscTable,),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscMatlabEngineCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Symbol},arg3::Union{Ptr{PetscMatlabEngine},StridedArray{PetscMatlabEngine},Ptr{PetscMatlabEngine},Ref{PetscMatlabEngine}})
    ccall((:PetscMatlabEngineCreate,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Ptr{PetscMatlabEngine}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscMatlabEngineDestroy(arg0::Type{Float32},arg1::Union{Ptr{PetscMatlabEngine},StridedArray{PetscMatlabEngine},Ptr{PetscMatlabEngine},Ref{PetscMatlabEngine}})
    ccall((:PetscMatlabEngineDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscMatlabEngine},),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscMatlabEngineGetOutput(arg0::Type{Float32},arg1::PetscMatlabEngine,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    ccall((:PetscMatlabEngineGetOutput,petscRealSingle),PetscErrorCode,(PetscMatlabEngine,Ptr{Ptr{UInt8}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscMatlabEnginePrintOutput(arg0::Type{Float32},arg1::PetscMatlabEngine,arg2::Union{Ptr{FILE},StridedArray{FILE},Ptr{FILE},Ref{FILE}})
    ccall((:PetscMatlabEnginePrintOutput,petscRealSingle),PetscErrorCode,(PetscMatlabEngine,Ptr{FILE}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscMatlabEnginePut(arg0::Type{Float32},arg1::PetscMatlabEngine,arg2::PetscObject)
    ccall((:PetscMatlabEnginePut,petscRealSingle),PetscErrorCode,(PetscMatlabEngine,PetscObject),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscMatlabEngineGet(arg0::Type{Float32},arg1::PetscMatlabEngine,arg2::PetscObject)
    ccall((:PetscMatlabEngineGet,petscRealSingle),PetscErrorCode,(PetscMatlabEngine,PetscObject),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscMatlabEnginePutArray(arg0::Type{Float32},arg1::PetscMatlabEngine,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{ByteString,Symbol})
    ccall((:PetscMatlabEnginePutArray,petscRealSingle),PetscErrorCode,(PetscMatlabEngine,Cint,Cint,Ptr{Float32},Cstring),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function PetscMatlabEngineGetArray(arg0::Type{Float32},arg1::PetscMatlabEngine,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{ByteString,Symbol})
    ccall((:PetscMatlabEngineGetArray,petscRealSingle),PetscErrorCode,(PetscMatlabEngine,Cint,Cint,Ptr{Float32},Cstring),arg1,arg2,arg3,arg4,arg5)
end
=#
function PETSC_MATLAB_ENGINE_(arg0::Type{Float32},arg1::MPI_Comm)
    err = ccall((:PETSC_MATLAB_ENGINE_,petscRealSingle),PetscMatlabEngine,(comm_type,),arg1)
    return err
end

function PetscDrawInitializePackage(arg0::Type{Float32})
    err = ccall((:PetscDrawInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function PetscDrawRegister(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscDrawRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

#= skipping function with undefined symbols:
 function PetscDrawGetType(arg0::Type{Float32},arg1::PetscDraw,arg2::Union{Ptr{PetscDrawType},StridedArray{PetscDrawType},Ptr{PetscDrawType},Ref{PetscDrawType}})
    ccall((:PetscDrawGetType,petscRealSingle),PetscErrorCode,(PetscDraw,Ptr{Ptr{UInt8}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawSetType(arg0::Type{Float32},arg1::PetscDraw,arg2::PetscDrawType)
    ccall((:PetscDrawSetType,petscRealSingle),PetscErrorCode,(PetscDraw,Cstring),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Symbol},arg3::Union{ByteString,Symbol},arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Union{Ptr{PetscDraw},StridedArray{PetscDraw},Ptr{PetscDraw},Ref{PetscDraw}})
    ccall((:PetscDrawCreate,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Cstring,Cint,Cint,Cint,Cint,Ptr{PetscDraw}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawSetFromOptions(arg0::Type{Float32},arg1::PetscDraw)
    ccall((:PetscDrawSetFromOptions,petscRealSingle),PetscErrorCode,(PetscDraw,),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawSetSave(arg0::Type{Float32},arg1::PetscDraw,arg2::Union{ByteString,Symbol},arg3::PetscBool)
    ccall((:PetscDrawSetSave,petscRealSingle),PetscErrorCode,(PetscDraw,Cstring,PetscBool),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawSetSaveFinalImage(arg0::Type{Float32},arg1::PetscDraw,arg2::Union{ByteString,Symbol})
    ccall((:PetscDrawSetSaveFinalImage,petscRealSingle),PetscErrorCode,(PetscDraw,Cstring),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawView(arg1::PetscDraw,arg2::PetscViewer{Float32})
    ccall((:PetscDrawView,petscRealSingle),PetscErrorCode,(PetscDraw,PetscViewer{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawOpenGLUT(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Symbol},arg3::Union{ByteString,Symbol},arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Union{Ptr{PetscDraw},StridedArray{PetscDraw},Ptr{PetscDraw},Ref{PetscDraw}})
    ccall((:PetscDrawOpenGLUT,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Cstring,Cint,Cint,Cint,Cint,Ptr{PetscDraw}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawOpenNull(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{PetscDraw},StridedArray{PetscDraw},Ptr{PetscDraw},Ref{PetscDraw}})
    ccall((:PetscDrawOpenNull,petscRealSingle),PetscErrorCode,(comm_type,Ptr{PetscDraw}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawDestroy(arg0::Type{Float32},arg1::Union{Ptr{PetscDraw},StridedArray{PetscDraw},Ptr{PetscDraw},Ref{PetscDraw}})
    ccall((:PetscDrawDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscDraw},),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawIsNull(arg0::Type{Float32},arg1::PetscDraw,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:PetscDrawIsNull,petscRealSingle),PetscErrorCode,(PetscDraw,Ptr{PetscBool}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawGetPopup(arg0::Type{Float32},arg1::PetscDraw,arg2::Union{Ptr{PetscDraw},StridedArray{PetscDraw},Ptr{PetscDraw},Ref{PetscDraw}})
    ccall((:PetscDrawGetPopup,petscRealSingle),PetscErrorCode,(PetscDraw,Ptr{PetscDraw}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawCheckResizedWindow(arg0::Type{Float32},arg1::PetscDraw)
    ccall((:PetscDrawCheckResizedWindow,petscRealSingle),PetscErrorCode,(PetscDraw,),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawResizeWindow(arg0::Type{Float32},arg1::PetscDraw,arg2::Integer,arg3::Integer)
    ccall((:PetscDrawResizeWindow,petscRealSingle),PetscErrorCode,(PetscDraw,Cint,Cint),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawScalePopup(arg0::Type{Float32},arg1::PetscDraw,arg2::Float32,arg3::Float32)
    ccall((:PetscDrawScalePopup,petscRealSingle),PetscErrorCode,(PetscDraw,Float32,Float32),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawPixelToCoordinate(arg0::Type{Float32},arg1::PetscDraw,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:PetscDrawPixelToCoordinate,petscRealSingle),PetscErrorCode,(PetscDraw,Int64,Int64,Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawCoordinateToPixel(arg0::Type{Float32},arg1::PetscDraw,arg2::Float32,arg3::Float32,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:PetscDrawCoordinateToPixel,petscRealSingle),PetscErrorCode,(PetscDraw,Float32,Float32,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawIndicatorFunction(arg0::Type{Float32},arg1::PetscDraw,arg2::Float32,arg3::Float32,arg4::Float32,arg5::Float32,arg6::Integer,arg7::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg8::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:PetscDrawIndicatorFunction,petscRealSingle),PetscErrorCode,(PetscDraw,Float32,Float32,Float32,Float32,Cint,Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawLine(arg0::Type{Float32},arg1::PetscDraw,arg2::Float32,arg3::Float32,arg4::Float32,arg5::Float32,arg6::Integer)
    ccall((:PetscDrawLine,petscRealSingle),PetscErrorCode,(PetscDraw,Float32,Float32,Float32,Float32,Cint),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawArrow(arg0::Type{Float32},arg1::PetscDraw,arg2::Float32,arg3::Float32,arg4::Float32,arg5::Float32,arg6::Integer)
    ccall((:PetscDrawArrow,petscRealSingle),PetscErrorCode,(PetscDraw,Float32,Float32,Float32,Float32,Cint),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawLineSetWidth(arg0::Type{Float32},arg1::PetscDraw,arg2::Float32)
    ccall((:PetscDrawLineSetWidth,petscRealSingle),PetscErrorCode,(PetscDraw,Float32),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawLineGetWidth(arg0::Type{Float32},arg1::PetscDraw,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:PetscDrawLineGetWidth,petscRealSingle),PetscErrorCode,(PetscDraw,Ptr{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawMarker(arg0::Type{Float32},arg1::PetscDraw,arg2::Float32,arg3::Float32,arg4::Integer)
    ccall((:PetscDrawMarker,petscRealSingle),PetscErrorCode,(PetscDraw,Float32,Float32,Cint),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawSetMarkerType(arg0::Type{Float32},arg1::PetscDraw,arg2::PetscDrawMarkerType)
    ccall((:PetscDrawSetMarkerType,petscRealSingle),PetscErrorCode,(PetscDraw,PetscDrawMarkerType),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawGetMarkerType(arg0::Type{Float32},arg1::PetscDraw,arg2::Union{Ptr{PetscDrawMarkerType},StridedArray{PetscDrawMarkerType},Ptr{PetscDrawMarkerType},Ref{PetscDrawMarkerType}})
    ccall((:PetscDrawGetMarkerType,petscRealSingle),PetscErrorCode,(PetscDraw,Ptr{PetscDrawMarkerType}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawPoint(arg0::Type{Float32},arg1::PetscDraw,arg2::Float32,arg3::Float32,arg4::Integer)
    ccall((:PetscDrawPoint,petscRealSingle),PetscErrorCode,(PetscDraw,Float32,Float32,Cint),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawPointPixel(arg0::Type{Float32},arg1::PetscDraw,arg2::Integer,arg3::Integer,arg4::Integer)
    ccall((:PetscDrawPointPixel,petscRealSingle),PetscErrorCode,(PetscDraw,Int64,Int64,Cint),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawPointSetSize(arg0::Type{Float32},arg1::PetscDraw,arg2::Float32)
    ccall((:PetscDrawPointSetSize,petscRealSingle),PetscErrorCode,(PetscDraw,Float32),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawRectangle(arg0::Type{Float32},arg1::PetscDraw,arg2::Float32,arg3::Float32,arg4::Float32,arg5::Float32,arg6::Integer,arg7::Integer,arg8::Integer,arg9::Integer)
    ccall((:PetscDrawRectangle,petscRealSingle),PetscErrorCode,(PetscDraw,Float32,Float32,Float32,Float32,Cint,Cint,Cint,Cint),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawTriangle(arg0::Type{Float32},arg1::PetscDraw,arg2::Float32,arg3::Float32,arg4::Float32,arg5::Float32,arg6::Float32,arg7::Float32,arg8::Integer,arg9::Integer,arg10::Integer)
    ccall((:PetscDrawTriangle,petscRealSingle),PetscErrorCode,(PetscDraw,Float32,Float32,Float32,Float32,Float32,Float32,Cint,Cint,Cint),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawEllipse(arg0::Type{Float32},arg1::PetscDraw,arg2::Float32,arg3::Float32,arg4::Float32,arg5::Float32,arg6::Integer)
    ccall((:PetscDrawEllipse,petscRealSingle),PetscErrorCode,(PetscDraw,Float32,Float32,Float32,Float32,Cint),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawTensorContourPatch(arg0::Type{Float32},arg1::PetscDraw,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::Float32,arg7::Float32,arg8::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:PetscDrawTensorContourPatch,petscRealSingle),PetscErrorCode,(PetscDraw,Cint,Cint,Ptr{Float32},Ptr{Float32},Float32,Float32,Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawTensorContour(arg0::Type{Float32},arg1::PetscDraw,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:PetscDrawTensorContour,petscRealSingle),PetscErrorCode,(PetscDraw,Cint,Cint,Ptr{Float32},Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawString(arg0::Type{Float32},arg1::PetscDraw,arg2::Float32,arg3::Float32,arg4::Integer,arg5::Union{ByteString,Symbol})
    ccall((:PetscDrawString,petscRealSingle),PetscErrorCode,(PetscDraw,Float32,Float32,Cint,Cstring),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawStringCentered(arg0::Type{Float32},arg1::PetscDraw,arg2::Float32,arg3::Float32,arg4::Integer,arg5::Union{ByteString,Symbol})
    ccall((:PetscDrawStringCentered,petscRealSingle),PetscErrorCode,(PetscDraw,Float32,Float32,Cint,Cstring),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawStringBoxed(arg0::Type{Float32},arg1::PetscDraw,arg2::Float32,arg3::Float32,arg4::Integer,arg5::Integer,arg6::Union{ByteString,Symbol},arg7::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg8::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:PetscDrawStringBoxed,petscRealSingle),PetscErrorCode,(PetscDraw,Float32,Float32,Cint,Cint,Cstring,Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawStringBoxedSize(arg0::Type{Float32},arg1::PetscDraw,arg2::Union{ByteString,Symbol},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:PetscDrawStringBoxedSize,petscRealSingle),PetscErrorCode,(PetscDraw,Cstring,Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawStringVertical(arg0::Type{Float32},arg1::PetscDraw,arg2::Float32,arg3::Float32,arg4::Integer,arg5::Union{ByteString,Symbol})
    ccall((:PetscDrawStringVertical,petscRealSingle),PetscErrorCode,(PetscDraw,Float32,Float32,Cint,Cstring),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawStringSetSize(arg0::Type{Float32},arg1::PetscDraw,arg2::Float32,arg3::Float32)
    ccall((:PetscDrawStringSetSize,petscRealSingle),PetscErrorCode,(PetscDraw,Float32,Float32),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawStringGetSize(arg0::Type{Float32},arg1::PetscDraw,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:PetscDrawStringGetSize,petscRealSingle),PetscErrorCode,(PetscDraw,Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawSetViewPort(arg0::Type{Float32},arg1::PetscDraw,arg2::Float32,arg3::Float32,arg4::Float32,arg5::Float32)
    ccall((:PetscDrawSetViewPort,petscRealSingle),PetscErrorCode,(PetscDraw,Float32,Float32,Float32,Float32),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawGetViewPort(arg0::Type{Float32},arg1::PetscDraw,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:PetscDrawGetViewPort,petscRealSingle),PetscErrorCode,(PetscDraw,Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawSplitViewPort(arg0::Type{Float32},arg1::PetscDraw)
    ccall((:PetscDrawSplitViewPort,petscRealSingle),PetscErrorCode,(PetscDraw,),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawSetCoordinates(arg0::Type{Float32},arg1::PetscDraw,arg2::Float32,arg3::Float32,arg4::Float32,arg5::Float32)
    ccall((:PetscDrawSetCoordinates,petscRealSingle),PetscErrorCode,(PetscDraw,Float32,Float32,Float32,Float32),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawGetCoordinates(arg0::Type{Float32},arg1::PetscDraw,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:PetscDrawGetCoordinates,petscRealSingle),PetscErrorCode,(PetscDraw,Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawSetTitle(arg0::Type{Float32},arg1::PetscDraw,arg2::Union{ByteString,Symbol})
    ccall((:PetscDrawSetTitle,petscRealSingle),PetscErrorCode,(PetscDraw,Cstring),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawAppendTitle(arg0::Type{Float32},arg1::PetscDraw,arg2::Union{ByteString,Symbol})
    ccall((:PetscDrawAppendTitle,petscRealSingle),PetscErrorCode,(PetscDraw,Cstring),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawGetTitle(arg0::Type{Float32},arg1::PetscDraw,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    ccall((:PetscDrawGetTitle,petscRealSingle),PetscErrorCode,(PetscDraw,Ptr{Ptr{UInt8}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawSetPause(arg0::Type{Float32},arg1::PetscDraw,arg2::Float32)
    ccall((:PetscDrawSetPause,petscRealSingle),PetscErrorCode,(PetscDraw,Float32),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawGetPause(arg0::Type{Float32},arg1::PetscDraw,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:PetscDrawGetPause,petscRealSingle),PetscErrorCode,(PetscDraw,Ptr{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawPause(arg0::Type{Float32},arg1::PetscDraw)
    ccall((:PetscDrawPause,petscRealSingle),PetscErrorCode,(PetscDraw,),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawSetDoubleBuffer(arg0::Type{Float32},arg1::PetscDraw)
    ccall((:PetscDrawSetDoubleBuffer,petscRealSingle),PetscErrorCode,(PetscDraw,),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawFlush(arg0::Type{Float32},arg1::PetscDraw)
    ccall((:PetscDrawFlush,petscRealSingle),PetscErrorCode,(PetscDraw,),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawSynchronizedFlush(arg0::Type{Float32},arg1::PetscDraw)
    ccall((:PetscDrawSynchronizedFlush,petscRealSingle),PetscErrorCode,(PetscDraw,),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawClear(arg0::Type{Float32},arg1::PetscDraw)
    ccall((:PetscDrawClear,petscRealSingle),PetscErrorCode,(PetscDraw,),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawSave(arg0::Type{Float32},arg1::PetscDraw)
    ccall((:PetscDrawSave,petscRealSingle),PetscErrorCode,(PetscDraw,),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawSynchronizedClear(arg0::Type{Float32},arg1::PetscDraw)
    ccall((:PetscDrawSynchronizedClear,petscRealSingle),PetscErrorCode,(PetscDraw,),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawBOP(arg0::Type{Float32},arg1::PetscDraw)
    ccall((:PetscDrawBOP,petscRealSingle),PetscErrorCode,(PetscDraw,),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawEOP(arg0::Type{Float32},arg1::PetscDraw)
    ccall((:PetscDrawEOP,petscRealSingle),PetscErrorCode,(PetscDraw,),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawSetDisplay(arg0::Type{Float32},arg1::PetscDraw,arg2::Union{ByteString,Symbol})
    ccall((:PetscDrawSetDisplay,petscRealSingle),PetscErrorCode,(PetscDraw,Cstring),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawGetSingleton(arg0::Type{Float32},arg1::PetscDraw,arg2::Union{Ptr{PetscDraw},StridedArray{PetscDraw},Ptr{PetscDraw},Ref{PetscDraw}})
    ccall((:PetscDrawGetSingleton,petscRealSingle),PetscErrorCode,(PetscDraw,Ptr{PetscDraw}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawRestoreSingleton(arg0::Type{Float32},arg1::PetscDraw,arg2::Union{Ptr{PetscDraw},StridedArray{PetscDraw},Ptr{PetscDraw},Ref{PetscDraw}})
    ccall((:PetscDrawRestoreSingleton,petscRealSingle),PetscErrorCode,(PetscDraw,Ptr{PetscDraw}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawGetCurrentPoint(arg0::Type{Float32},arg1::PetscDraw,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:PetscDrawGetCurrentPoint,petscRealSingle),PetscErrorCode,(PetscDraw,Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawSetCurrentPoint(arg0::Type{Float32},arg1::PetscDraw,arg2::Float32,arg3::Float32)
    ccall((:PetscDrawSetCurrentPoint,petscRealSingle),PetscErrorCode,(PetscDraw,Float32,Float32),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawPushCurrentPoint(arg0::Type{Float32},arg1::PetscDraw,arg2::Float32,arg3::Float32)
    ccall((:PetscDrawPushCurrentPoint,petscRealSingle),PetscErrorCode,(PetscDraw,Float32,Float32),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawPopCurrentPoint(arg0::Type{Float32},arg1::PetscDraw)
    ccall((:PetscDrawPopCurrentPoint,petscRealSingle),PetscErrorCode,(PetscDraw,),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawGetBoundingBox(arg0::Type{Float32},arg1::PetscDraw,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:PetscDrawGetBoundingBox,petscRealSingle),PetscErrorCode,(PetscDraw,Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawGetMouseButton(arg0::Type{Float32},arg1::PetscDraw,arg2::Union{Ptr{PetscDrawButton},StridedArray{PetscDrawButton},Ptr{PetscDrawButton},Ref{PetscDrawButton}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:PetscDrawGetMouseButton,petscRealSingle),PetscErrorCode,(PetscDraw,Ptr{PetscDrawButton},Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawSynchronizedGetMouseButton(arg0::Type{Float32},arg1::PetscDraw,arg2::Union{Ptr{PetscDrawButton},StridedArray{PetscDrawButton},Ptr{PetscDrawButton},Ref{PetscDrawButton}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:PetscDrawSynchronizedGetMouseButton,petscRealSingle),PetscErrorCode,(PetscDraw,Ptr{PetscDrawButton},Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawZoom(arg0::Type{Float32},arg1::PetscDraw,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:PetscDrawZoom,petscRealSingle),PetscErrorCode,(PetscDraw,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawViewPortsCreate(arg0::Type{Float32},arg1::PetscDraw,arg2::Integer,arg3::Union{Ptr{Ptr{PetscDrawViewPorts}},StridedArray{Ptr{PetscDrawViewPorts}},Ptr{Ptr{PetscDrawViewPorts}},Ref{Ptr{PetscDrawViewPorts}}})
    ccall((:PetscDrawViewPortsCreate,petscRealSingle),PetscErrorCode,(PetscDraw,Int64,Ptr{Ptr{PetscDrawViewPorts}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawViewPortsCreateRect(arg0::Type{Float32},arg1::PetscDraw,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Ptr{PetscDrawViewPorts}},StridedArray{Ptr{PetscDrawViewPorts}},Ptr{Ptr{PetscDrawViewPorts}},Ref{Ptr{PetscDrawViewPorts}}})
    ccall((:PetscDrawViewPortsCreateRect,petscRealSingle),PetscErrorCode,(PetscDraw,Int64,Int64,Ptr{Ptr{PetscDrawViewPorts}}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawViewPortsDestroy(arg0::Type{Float32},arg1::Union{Ptr{PetscDrawViewPorts},StridedArray{PetscDrawViewPorts},Ptr{PetscDrawViewPorts},Ref{PetscDrawViewPorts}})
    ccall((:PetscDrawViewPortsDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscDrawViewPorts},),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawViewPortsSet(arg0::Type{Float32},arg1::Union{Ptr{PetscDrawViewPorts},StridedArray{PetscDrawViewPorts},Ptr{PetscDrawViewPorts},Ref{PetscDrawViewPorts}},arg2::Integer)
    ccall((:PetscDrawViewPortsSet,petscRealSingle),PetscErrorCode,(Ptr{PetscDrawViewPorts},Int64),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawAxisCreate(arg0::Type{Float32},arg1::PetscDraw,arg2::Union{Ptr{PetscDrawAxis},StridedArray{PetscDrawAxis},Ptr{PetscDrawAxis},Ref{PetscDrawAxis}})
    ccall((:PetscDrawAxisCreate,petscRealSingle),PetscErrorCode,(PetscDraw,Ptr{PetscDrawAxis}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawAxisDestroy(arg0::Type{Float32},arg1::Union{Ptr{PetscDrawAxis},StridedArray{PetscDrawAxis},Ptr{PetscDrawAxis},Ref{PetscDrawAxis}})
    ccall((:PetscDrawAxisDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscDrawAxis},),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawAxisDraw(arg0::Type{Float32},arg1::PetscDrawAxis)
    ccall((:PetscDrawAxisDraw,petscRealSingle),PetscErrorCode,(PetscDrawAxis,),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawAxisSetLimits(arg0::Type{Float32},arg1::PetscDrawAxis,arg2::Float32,arg3::Float32,arg4::Float32,arg5::Float32)
    ccall((:PetscDrawAxisSetLimits,petscRealSingle),PetscErrorCode,(PetscDrawAxis,Float32,Float32,Float32,Float32),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawAxisGetLimits(arg0::Type{Float32},arg1::PetscDrawAxis,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:PetscDrawAxisGetLimits,petscRealSingle),PetscErrorCode,(PetscDrawAxis,Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawAxisSetHoldLimits(arg0::Type{Float32},arg1::PetscDrawAxis,arg2::PetscBool)
    ccall((:PetscDrawAxisSetHoldLimits,petscRealSingle),PetscErrorCode,(PetscDrawAxis,PetscBool),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawAxisSetColors(arg0::Type{Float32},arg1::PetscDrawAxis,arg2::Integer,arg3::Integer,arg4::Integer)
    ccall((:PetscDrawAxisSetColors,petscRealSingle),PetscErrorCode,(PetscDrawAxis,Cint,Cint,Cint),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawAxisSetLabels(arg0::Type{Float32},arg1::PetscDrawAxis,arg2::Union{ByteString,Symbol},arg3::Union{ByteString,Symbol},arg4::Union{ByteString,Symbol})
    ccall((:PetscDrawAxisSetLabels,petscRealSingle),PetscErrorCode,(PetscDrawAxis,Cstring,Cstring,Cstring),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawLGCreate(arg0::Type{Float32},arg1::PetscDraw,arg2::Integer,arg3::Union{Ptr{PetscDrawLG},StridedArray{PetscDrawLG},Ptr{PetscDrawLG},Ref{PetscDrawLG}})
    ccall((:PetscDrawLGCreate,petscRealSingle),PetscErrorCode,(PetscDraw,Int64,Ptr{PetscDrawLG}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawLGDestroy(arg0::Type{Float32},arg1::Union{Ptr{PetscDrawLG},StridedArray{PetscDrawLG},Ptr{PetscDrawLG},Ref{PetscDrawLG}})
    ccall((:PetscDrawLGDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscDrawLG},),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawLGAddPoint(arg0::Type{Float32},arg1::PetscDrawLG,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:PetscDrawLGAddPoint,petscRealSingle),PetscErrorCode,(PetscDrawLG,Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawLGAddCommonPoint(arg0::Type{Float32},arg1::PetscDrawLG,arg2::Float32,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:PetscDrawLGAddCommonPoint,petscRealSingle),PetscErrorCode,(PetscDrawLG,Float32,Ptr{Float32}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawLGAddPoints(arg0::Type{Float32},arg1::PetscDrawLG,arg2::Integer,arg3::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg4::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    ccall((:PetscDrawLGAddPoints,petscRealSingle),PetscErrorCode,(PetscDrawLG,Int64,Ptr{Ptr{Float32}},Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawLGDraw(arg0::Type{Float32},arg1::PetscDrawLG)
    ccall((:PetscDrawLGDraw,petscRealSingle),PetscErrorCode,(PetscDrawLG,),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawLGView(arg1::PetscDrawLG,arg2::PetscViewer{Float32})
    ccall((:PetscDrawLGView,petscRealSingle),PetscErrorCode,(PetscDrawLG,PetscViewer{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawLGReset(arg0::Type{Float32},arg1::PetscDrawLG)
    ccall((:PetscDrawLGReset,petscRealSingle),PetscErrorCode,(PetscDrawLG,),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawLGSetDimension(arg0::Type{Float32},arg1::PetscDrawLG,arg2::Integer)
    ccall((:PetscDrawLGSetDimension,petscRealSingle),PetscErrorCode,(PetscDrawLG,Int64),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawLGGetDimension(arg0::Type{Float32},arg1::PetscDrawLG,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:PetscDrawLGGetDimension,petscRealSingle),PetscErrorCode,(PetscDrawLG,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawLGSetLegend(arg0::Type{Float32},arg1::PetscDrawLG,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    ccall((:PetscDrawLGSetLegend,petscRealSingle),PetscErrorCode,(PetscDrawLG,Ptr{Ptr{UInt8}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawLGGetAxis(arg0::Type{Float32},arg1::PetscDrawLG,arg2::Union{Ptr{PetscDrawAxis},StridedArray{PetscDrawAxis},Ptr{PetscDrawAxis},Ref{PetscDrawAxis}})
    ccall((:PetscDrawLGGetAxis,petscRealSingle),PetscErrorCode,(PetscDrawLG,Ptr{PetscDrawAxis}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawLGGetDraw(arg0::Type{Float32},arg1::PetscDrawLG,arg2::Union{Ptr{PetscDraw},StridedArray{PetscDraw},Ptr{PetscDraw},Ref{PetscDraw}})
    ccall((:PetscDrawLGGetDraw,petscRealSingle),PetscErrorCode,(PetscDrawLG,Ptr{PetscDraw}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawLGSetUseMarkers(arg0::Type{Float32},arg1::PetscDrawLG,arg2::PetscBool)
    ccall((:PetscDrawLGSetUseMarkers,petscRealSingle),PetscErrorCode,(PetscDrawLG,PetscBool),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawLGSetLimits(arg0::Type{Float32},arg1::PetscDrawLG,arg2::Float32,arg3::Float32,arg4::Float32,arg5::Float32)
    ccall((:PetscDrawLGSetLimits,petscRealSingle),PetscErrorCode,(PetscDrawLG,Float32,Float32,Float32,Float32),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawLGSetColors(arg0::Type{Float32},arg1::PetscDrawLG,arg2::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    ccall((:PetscDrawLGSetColors,petscRealSingle),PetscErrorCode,(PetscDrawLG,Ptr{Cint}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawLGSetFromOptions(arg0::Type{Float32},arg1::PetscDrawLG)
    ccall((:PetscDrawLGSetFromOptions,petscRealSingle),PetscErrorCode,(PetscDrawLG,),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawSPCreate(arg0::Type{Float32},arg1::PetscDraw,arg2::Integer,arg3::Union{Ptr{PetscDrawSP},StridedArray{PetscDrawSP},Ptr{PetscDrawSP},Ref{PetscDrawSP}})
    ccall((:PetscDrawSPCreate,petscRealSingle),PetscErrorCode,(PetscDraw,Cint,Ptr{PetscDrawSP}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawSPDestroy(arg0::Type{Float32},arg1::Union{Ptr{PetscDrawSP},StridedArray{PetscDrawSP},Ptr{PetscDrawSP},Ref{PetscDrawSP}})
    ccall((:PetscDrawSPDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscDrawSP},),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawSPAddPoint(arg0::Type{Float32},arg1::PetscDrawSP,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:PetscDrawSPAddPoint,petscRealSingle),PetscErrorCode,(PetscDrawSP,Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawSPAddPoints(arg0::Type{Float32},arg1::PetscDrawSP,arg2::Integer,arg3::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg4::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    ccall((:PetscDrawSPAddPoints,petscRealSingle),PetscErrorCode,(PetscDrawSP,Cint,Ptr{Ptr{Float32}},Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawSPDraw(arg0::Type{Float32},arg1::PetscDrawSP,arg2::PetscBool)
    ccall((:PetscDrawSPDraw,petscRealSingle),PetscErrorCode,(PetscDrawSP,PetscBool),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawSPReset(arg0::Type{Float32},arg1::PetscDrawSP)
    ccall((:PetscDrawSPReset,petscRealSingle),PetscErrorCode,(PetscDrawSP,),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawSPSetDimension(arg0::Type{Float32},arg1::PetscDrawSP,arg2::Integer)
    ccall((:PetscDrawSPSetDimension,petscRealSingle),PetscErrorCode,(PetscDrawSP,Cint),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawSPGetAxis(arg0::Type{Float32},arg1::PetscDrawSP,arg2::Union{Ptr{PetscDrawAxis},StridedArray{PetscDrawAxis},Ptr{PetscDrawAxis},Ref{PetscDrawAxis}})
    ccall((:PetscDrawSPGetAxis,petscRealSingle),PetscErrorCode,(PetscDrawSP,Ptr{PetscDrawAxis}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawSPGetDraw(arg0::Type{Float32},arg1::PetscDrawSP,arg2::Union{Ptr{PetscDraw},StridedArray{PetscDraw},Ptr{PetscDraw},Ref{PetscDraw}})
    ccall((:PetscDrawSPGetDraw,petscRealSingle),PetscErrorCode,(PetscDrawSP,Ptr{PetscDraw}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawSPSetLimits(arg0::Type{Float32},arg1::PetscDrawSP,arg2::Float32,arg3::Float32,arg4::Float32,arg5::Float32)
    ccall((:PetscDrawSPSetLimits,petscRealSingle),PetscErrorCode,(PetscDrawSP,Float32,Float32,Float32,Float32),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawLGSPDraw(arg0::Type{Float32},arg1::PetscDrawLG,arg2::PetscDrawSP)
    ccall((:PetscDrawLGSPDraw,petscRealSingle),PetscErrorCode,(PetscDrawLG,PetscDrawSP),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawHGCreate(arg0::Type{Float32},arg1::PetscDraw,arg2::Integer,arg3::Union{Ptr{PetscDrawHG},StridedArray{PetscDrawHG},Ptr{PetscDrawHG},Ref{PetscDrawHG}})
    ccall((:PetscDrawHGCreate,petscRealSingle),PetscErrorCode,(PetscDraw,Cint,Ptr{PetscDrawHG}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawHGDestroy(arg0::Type{Float32},arg1::Union{Ptr{PetscDrawHG},StridedArray{PetscDrawHG},Ptr{PetscDrawHG},Ref{PetscDrawHG}})
    ccall((:PetscDrawHGDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscDrawHG},),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawHGAddValue(arg0::Type{Float32},arg1::PetscDrawHG,arg2::Float32)
    ccall((:PetscDrawHGAddValue,petscRealSingle),PetscErrorCode,(PetscDrawHG,Float32),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawHGDraw(arg0::Type{Float32},arg1::PetscDrawHG)
    ccall((:PetscDrawHGDraw,petscRealSingle),PetscErrorCode,(PetscDrawHG,),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawHGView(arg1::PetscDrawHG,arg2::PetscViewer{Float32})
    ccall((:PetscDrawHGView,petscRealSingle),PetscErrorCode,(PetscDrawHG,PetscViewer{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawHGReset(arg0::Type{Float32},arg1::PetscDrawHG)
    ccall((:PetscDrawHGReset,petscRealSingle),PetscErrorCode,(PetscDrawHG,),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawHGGetAxis(arg0::Type{Float32},arg1::PetscDrawHG,arg2::Union{Ptr{PetscDrawAxis},StridedArray{PetscDrawAxis},Ptr{PetscDrawAxis},Ref{PetscDrawAxis}})
    ccall((:PetscDrawHGGetAxis,petscRealSingle),PetscErrorCode,(PetscDrawHG,Ptr{PetscDrawAxis}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawHGGetDraw(arg0::Type{Float32},arg1::PetscDrawHG,arg2::Union{Ptr{PetscDraw},StridedArray{PetscDraw},Ptr{PetscDraw},Ref{PetscDraw}})
    ccall((:PetscDrawHGGetDraw,petscRealSingle),PetscErrorCode,(PetscDrawHG,Ptr{PetscDraw}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawHGSetLimits(arg0::Type{Float32},arg1::PetscDrawHG,arg2::Float32,arg3::Float32,arg4::Integer,arg5::Integer)
    ccall((:PetscDrawHGSetLimits,petscRealSingle),PetscErrorCode,(PetscDrawHG,Float32,Float32,Cint,Cint),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawHGSetNumberBins(arg0::Type{Float32},arg1::PetscDrawHG,arg2::Integer)
    ccall((:PetscDrawHGSetNumberBins,petscRealSingle),PetscErrorCode,(PetscDrawHG,Cint),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawHGSetColor(arg0::Type{Float32},arg1::PetscDrawHG,arg2::Integer)
    ccall((:PetscDrawHGSetColor,petscRealSingle),PetscErrorCode,(PetscDrawHG,Cint),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawHGCalcStats(arg0::Type{Float32},arg1::PetscDrawHG,arg2::PetscBool)
    ccall((:PetscDrawHGCalcStats,petscRealSingle),PetscErrorCode,(PetscDrawHG,PetscBool),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawHGIntegerBins(arg0::Type{Float32},arg1::PetscDrawHG,arg2::PetscBool)
    ccall((:PetscDrawHGIntegerBins,petscRealSingle),PetscErrorCode,(PetscDrawHG,PetscBool),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawBarCreate(arg0::Type{Float32},arg1::PetscDraw,arg2::Union{Ptr{PetscDrawBar},StridedArray{PetscDrawBar},Ptr{PetscDrawBar},Ref{PetscDrawBar}})
    ccall((:PetscDrawBarCreate,petscRealSingle),PetscErrorCode,(PetscDraw,Ptr{PetscDrawBar}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawBarSetData(arg0::Type{Float32},arg1::PetscDrawBar,arg2::Integer,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    ccall((:PetscDrawBarSetData,petscRealSingle),PetscErrorCode,(PetscDrawBar,Int64,Ptr{Float32},Ptr{Ptr{UInt8}}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawBarDestroy(arg0::Type{Float32},arg1::Union{Ptr{PetscDrawBar},StridedArray{PetscDrawBar},Ptr{PetscDrawBar},Ref{PetscDrawBar}})
    ccall((:PetscDrawBarDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscDrawBar},),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawBarDraw(arg0::Type{Float32},arg1::PetscDrawBar)
    ccall((:PetscDrawBarDraw,petscRealSingle),PetscErrorCode,(PetscDrawBar,),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawBarSetColor(arg0::Type{Float32},arg1::PetscDrawBar,arg2::Integer)
    ccall((:PetscDrawBarSetColor,petscRealSingle),PetscErrorCode,(PetscDrawBar,Cint),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawBarSetLimits(arg0::Type{Float32},arg1::PetscDrawBar,arg2::Float32,arg3::Float32)
    ccall((:PetscDrawBarSetLimits,petscRealSingle),PetscErrorCode,(PetscDrawBar,Float32,Float32),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawBarSort(arg0::Type{Float32},arg1::PetscDrawBar,arg2::PetscBool,arg3::Float32)
    ccall((:PetscDrawBarSort,petscRealSingle),PetscErrorCode,(PetscDrawBar,PetscBool,Float32),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawBarSetFromOptions(arg0::Type{Float32},arg1::PetscDrawBar)
    ccall((:PetscDrawBarSetFromOptions,petscRealSingle),PetscErrorCode,(PetscDrawBar,),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawBarGetAxis(arg0::Type{Float32},arg1::PetscDrawBar,arg2::Union{Ptr{PetscDrawAxis},StridedArray{PetscDrawAxis},Ptr{PetscDrawAxis},Ref{PetscDrawAxis}})
    ccall((:PetscDrawBarGetAxis,petscRealSingle),PetscErrorCode,(PetscDrawBar,Ptr{PetscDrawAxis}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDrawBarGetDraw(arg0::Type{Float32},arg1::PetscDrawBar,arg2::Union{Ptr{PetscDraw},StridedArray{PetscDraw},Ptr{PetscDraw},Ref{PetscDraw}})
    ccall((:PetscDrawBarGetDraw,petscRealSingle),PetscErrorCode,(PetscDrawBar,Ptr{PetscDraw}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscViewerDrawGetDraw(arg1::PetscViewer{Float32},arg2::Integer,arg3::Union{Ptr{PetscDraw},StridedArray{PetscDraw},Ptr{PetscDraw},Ref{PetscDraw}})
    ccall((:PetscViewerDrawGetDraw,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Int64,Ptr{PetscDraw}),arg1,arg2,arg3)
end
=#
function PetscViewerDrawBaseAdd(arg1::PetscViewer{Float32},arg2::Integer)
    err = ccall((:PetscViewerDrawBaseAdd,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Int64),arg1,arg2)
    return err
end

function PetscViewerDrawBaseSet(arg1::PetscViewer{Float32},arg2::Integer)
    err = ccall((:PetscViewerDrawBaseSet,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Int64),arg1,arg2)
    return err
end

#= skipping function with undefined symbols:
 function PetscViewerDrawGetDrawLG(arg1::PetscViewer{Float32},arg2::Integer,arg3::Union{Ptr{PetscDrawLG},StridedArray{PetscDrawLG},Ptr{PetscDrawLG},Ref{PetscDrawLG}})
    ccall((:PetscViewerDrawGetDrawLG,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Int64,Ptr{PetscDrawLG}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscViewerDrawGetDrawAxis(arg1::PetscViewer{Float32},arg2::Integer,arg3::Union{Ptr{PetscDrawAxis},StridedArray{PetscDrawAxis},Ptr{PetscDrawAxis},Ref{PetscDrawAxis}})
    ccall((:PetscViewerDrawGetDrawAxis,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Int64,Ptr{PetscDrawAxis}),arg1,arg2,arg3)
end
=#
function PetscDrawUtilitySetCmapHue(arg0::Type{Float32},arg1::Union{Ptr{Cuchar},StridedArray{Cuchar},Ptr{Cuchar},Ref{Cuchar}},arg2::Union{Ptr{Cuchar},StridedArray{Cuchar},Ptr{Cuchar},Ref{Cuchar}},arg3::Union{Ptr{Cuchar},StridedArray{Cuchar},Ptr{Cuchar},Ref{Cuchar}},arg4::Integer)
    err = ccall((:PetscDrawUtilitySetCmapHue,petscRealSingle),PetscErrorCode,(Ptr{Cuchar},Ptr{Cuchar},Ptr{Cuchar},Cint),arg1,arg2,arg3,arg4)
    return err
end

function PetscDrawUtilitySetGamma(arg0::Type{Float32},arg1::Float32)
    err = ccall((:PetscDrawUtilitySetGamma,petscRealSingle),PetscErrorCode,(Float32,),arg1)
    return err
end

function ISInitializePackage(arg0::Type{Float32})
    err = ccall((:ISInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function ISSetType(arg1::IS{Float32},arg2::ISType)
    err = ccall((:ISSetType,petscRealSingle),PetscErrorCode,(IS{Float32},Cstring),arg1,arg2)
    return err
end

function ISGetType(arg1::IS{Float32},arg2::Union{Ptr{ISType},StridedArray{ISType},Ptr{ISType},Ref{ISType}})
    (arg2_,tmp) = symbol_get_before(arg2)
    err = ccall((:ISGetType,petscRealSingle),PetscErrorCode,(IS{Float32},Ptr{Ptr{UInt8}}),arg1,arg2_)
    symbol_get_after(arg2_,arg2)
    return err
end

function ISRegister(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:ISRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function ISCreate(arg1::MPI_Comm,arg2::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:ISCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{IS{Float32}}),arg1,arg2)
    return err
end

function ISCreateGeneral(arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},PetscCopyMode::Integer,arg4::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:ISCreateGeneral,petscRealSingle),PetscErrorCode,(comm_type,Int64,Ptr{Int64},Cint,Ptr{IS{Float32}}),arg1,arg2,arg3,PetscCopyMode,arg4)
    return err
end

function ISGeneralSetIndices(arg1::IS{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},PetscCopyMode::Integer)
    err = ccall((:ISGeneralSetIndices,petscRealSingle),PetscErrorCode,(IS{Float32},Int64,Ptr{Int64},Cint),arg1,arg2,arg3,PetscCopyMode)
    return err
end

function ISCreateBlock(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},PetscCopyMode::Integer,arg5::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:ISCreateBlock,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Ptr{Int64},Cint,Ptr{IS{Float32}}),arg1,arg2,arg3,arg4,PetscCopyMode,arg5)
    return err
end

function ISBlockSetIndices(arg1::IS{Float32},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},PetscCopyMode::Integer)
    err = ccall((:ISBlockSetIndices,petscRealSingle),PetscErrorCode,(IS{Float32},Int64,Int64,Ptr{Int64},Cint),arg1,arg2,arg3,arg4,PetscCopyMode)
    return err
end

function ISCreateStride(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:ISCreateStride,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Ptr{IS{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function ISStrideSetStride(arg1::IS{Float32},arg2::Integer,arg3::Integer,arg4::Integer)
    err = ccall((:ISStrideSetStride,petscRealSingle),PetscErrorCode,(IS{Float32},Int64,Int64,Int64),arg1,arg2,arg3,arg4)
    return err
end

function ISDestroy(arg1::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:ISDestroy,petscRealSingle),PetscErrorCode,(Ptr{IS{Float32}},),arg1)
    return err
end

function ISSetPermutation(arg1::IS{Float32})
    err = ccall((:ISSetPermutation,petscRealSingle),PetscErrorCode,(IS{Float32},),arg1)
    return err
end

function ISPermutation(arg1::IS{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:ISPermutation,petscRealSingle),PetscErrorCode,(IS{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function ISSetIdentity(arg1::IS{Float32})
    err = ccall((:ISSetIdentity,petscRealSingle),PetscErrorCode,(IS{Float32},),arg1)
    return err
end

function ISIdentity(arg1::IS{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:ISIdentity,petscRealSingle),PetscErrorCode,(IS{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function ISContiguousLocal(arg1::IS{Float32},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:ISContiguousLocal,petscRealSingle),PetscErrorCode,(IS{Float32},Int64,Int64,Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function ISGetIndices(arg1::IS{Float32},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:ISGetIndices,petscRealSingle),PetscErrorCode,(IS{Float32},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function ISRestoreIndices(arg1::IS{Float32},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:ISRestoreIndices,petscRealSingle),PetscErrorCode,(IS{Float32},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function ISGetTotalIndices(arg1::IS{Float32},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:ISGetTotalIndices,petscRealSingle),PetscErrorCode,(IS{Float32},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function ISRestoreTotalIndices(arg1::IS{Float32},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:ISRestoreTotalIndices,petscRealSingle),PetscErrorCode,(IS{Float32},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function ISGetNonlocalIndices(arg1::IS{Float32},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:ISGetNonlocalIndices,petscRealSingle),PetscErrorCode,(IS{Float32},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function ISRestoreNonlocalIndices(arg1::IS{Float32},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:ISRestoreNonlocalIndices,petscRealSingle),PetscErrorCode,(IS{Float32},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function ISGetNonlocalIS(arg1::IS{Float32},is::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:ISGetNonlocalIS,petscRealSingle),PetscErrorCode,(IS{Float32},Ptr{IS{Float32}}),arg1,is)
    return err
end

function ISRestoreNonlocalIS(arg1::IS{Float32},is::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:ISRestoreNonlocalIS,petscRealSingle),PetscErrorCode,(IS{Float32},Ptr{IS{Float32}}),arg1,is)
    return err
end

function ISGetSize(arg1::IS{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISGetSize,petscRealSingle),PetscErrorCode,(IS{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function ISGetLocalSize(arg1::IS{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISGetLocalSize,petscRealSingle),PetscErrorCode,(IS{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function ISInvertPermutation(arg1::IS{Float32},arg2::Integer,arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:ISInvertPermutation,petscRealSingle),PetscErrorCode,(IS{Float32},Int64,Ptr{IS{Float32}}),arg1,arg2,arg3)
    return err
end

function ISView(arg1::IS{Float32},arg2::PetscViewer{Float32})
    err = ccall((:ISView,petscRealSingle),PetscErrorCode,(IS{Float32},PetscViewer{Float32}),arg1,arg2)
    return err
end

function ISEqual(arg1::IS{Float32},arg2::IS{Float32},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:ISEqual,petscRealSingle),PetscErrorCode,(IS{Float32},IS{Float32},Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function ISSort(arg1::IS{Float32})
    err = ccall((:ISSort,petscRealSingle),PetscErrorCode,(IS{Float32},),arg1)
    return err
end

function ISSortRemoveDups(arg1::IS{Float32})
    err = ccall((:ISSortRemoveDups,petscRealSingle),PetscErrorCode,(IS{Float32},),arg1)
    return err
end

function ISSorted(arg1::IS{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:ISSorted,petscRealSingle),PetscErrorCode,(IS{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function ISDifference(arg1::IS{Float32},arg2::IS{Float32},arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:ISDifference,petscRealSingle),PetscErrorCode,(IS{Float32},IS{Float32},Ptr{IS{Float32}}),arg1,arg2,arg3)
    return err
end

function ISSum(arg1::IS{Float32},arg2::IS{Float32},arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:ISSum,petscRealSingle),PetscErrorCode,(IS{Float32},IS{Float32},Ptr{IS{Float32}}),arg1,arg2,arg3)
    return err
end

function ISExpand(arg1::IS{Float32},arg2::IS{Float32},arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:ISExpand,petscRealSingle),PetscErrorCode,(IS{Float32},IS{Float32},Ptr{IS{Float32}}),arg1,arg2,arg3)
    return err
end

function ISGetMinMax(arg1::IS{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISGetMinMax,petscRealSingle),PetscErrorCode,(IS{Float32},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function ISBlockGetIndices(arg1::IS{Float32},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:ISBlockGetIndices,petscRealSingle),PetscErrorCode,(IS{Float32},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function ISBlockRestoreIndices(arg1::IS{Float32},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:ISBlockRestoreIndices,petscRealSingle),PetscErrorCode,(IS{Float32},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function ISBlockGetLocalSize(arg1::IS{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISBlockGetLocalSize,petscRealSingle),PetscErrorCode,(IS{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function ISBlockGetSize(arg1::IS{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISBlockGetSize,petscRealSingle),PetscErrorCode,(IS{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function ISGetBlockSize(arg1::IS{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISGetBlockSize,petscRealSingle),PetscErrorCode,(IS{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function ISSetBlockSize(arg1::IS{Float32},arg2::Integer)
    err = ccall((:ISSetBlockSize,petscRealSingle),PetscErrorCode,(IS{Float32},Int64),arg1,arg2)
    return err
end

function ISStrideGetInfo(arg1::IS{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISStrideGetInfo,petscRealSingle),PetscErrorCode,(IS{Float32},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function ISToGeneral(arg1::IS{Float32})
    err = ccall((:ISToGeneral,petscRealSingle),PetscErrorCode,(IS{Float32},),arg1)
    return err
end

function ISDuplicate(arg1::IS{Float32},arg2::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:ISDuplicate,petscRealSingle),PetscErrorCode,(IS{Float32},Ptr{IS{Float32}}),arg1,arg2)
    return err
end

function ISCopy(arg1::IS{Float32},arg2::IS{Float32})
    err = ccall((:ISCopy,petscRealSingle),PetscErrorCode,(IS{Float32},IS{Float32}),arg1,arg2)
    return err
end

function ISAllGather(arg1::IS{Float32},arg2::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:ISAllGather,petscRealSingle),PetscErrorCode,(IS{Float32},Ptr{IS{Float32}}),arg1,arg2)
    return err
end

function ISComplement(arg1::IS{Float32},arg2::Integer,arg3::Integer,arg4::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:ISComplement,petscRealSingle),PetscErrorCode,(IS{Float32},Int64,Int64,Ptr{IS{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function ISConcatenate(arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg4::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:ISConcatenate,petscRealSingle),PetscErrorCode,(comm_type,Int64,Ptr{IS{Float32}},Ptr{IS{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function ISListToPair(arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg4::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg5::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:ISListToPair,petscRealSingle),PetscErrorCode,(comm_type,Int64,Ptr{IS{Float32}},Ptr{IS{Float32}},Ptr{IS{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function ISPairToList(arg1::IS{Float32},arg2::IS{Float32},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{IS{Float32}}},StridedArray{Ptr{IS{Float32}}},Ptr{Ptr{IS{Float32}}},Ref{Ptr{IS{Float32}}}})
    err = ccall((:ISPairToList,petscRealSingle),PetscErrorCode,(IS{Float32},IS{Float32},Ptr{Int64},Ptr{Ptr{IS{Float32}}}),arg1,arg2,arg3,arg4)
    return err
end

function ISEmbed(arg1::IS{Float32},arg2::IS{Float32},arg3::PetscBool,arg4::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:ISEmbed,petscRealSingle),PetscErrorCode,(IS{Float32},IS{Float32},PetscBool,Ptr{IS{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function ISSortPermutation(arg1::IS{Float32},arg2::PetscBool,arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:ISSortPermutation,petscRealSingle),PetscErrorCode,(IS{Float32},PetscBool,Ptr{IS{Float32}}),arg1,arg2,arg3)
    return err
end

function ISOnComm(arg1::IS{Float32},arg2::MPI_Comm,PetscCopyMode::Integer,arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:ISOnComm,petscRealSingle),PetscErrorCode,(IS{Float32},comm_type,Cint,Ptr{IS{Float32}}),arg1,arg2,PetscCopyMode,arg3)
    return err
end

function ISLocalToGlobalMappingCreate(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},PetscCopyMode::Integer,arg5::Union{Ptr{ISLocalToGlobalMapping{Float32}},StridedArray{ISLocalToGlobalMapping{Float32}},Ptr{ISLocalToGlobalMapping{Float32}},Ref{ISLocalToGlobalMapping{Float32}}})
    err = ccall((:ISLocalToGlobalMappingCreate,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Ptr{Int64},Cint,Ptr{ISLocalToGlobalMapping{Float32}}),arg1,arg2,arg3,arg4,PetscCopyMode,arg5)
    return err
end

function ISLocalToGlobalMappingCreateIS(arg1::IS{Float32},arg2::Union{Ptr{ISLocalToGlobalMapping{Float32}},StridedArray{ISLocalToGlobalMapping{Float32}},Ptr{ISLocalToGlobalMapping{Float32}},Ref{ISLocalToGlobalMapping{Float32}}})
    err = ccall((:ISLocalToGlobalMappingCreateIS,petscRealSingle),PetscErrorCode,(IS{Float32},Ptr{ISLocalToGlobalMapping{Float32}}),arg1,arg2)
    return err
end

#= skipping function with undefined symbols:
 function ISLocalToGlobalMappingCreateSF(arg1::PetscSF,arg2::Integer,arg3::Union{Ptr{ISLocalToGlobalMapping{Float32}},StridedArray{ISLocalToGlobalMapping{Float32}},Ptr{ISLocalToGlobalMapping{Float32}},Ref{ISLocalToGlobalMapping{Float32}}})
    ccall((:ISLocalToGlobalMappingCreateSF,petscRealSingle),PetscErrorCode,(PetscSF,Int64,Ptr{ISLocalToGlobalMapping{Float32}}),arg1,arg2,arg3)
end
=#
function ISLocalToGlobalMappingView(arg1::ISLocalToGlobalMapping{Float32},arg2::PetscViewer{Float32})
    err = ccall((:ISLocalToGlobalMappingView,petscRealSingle),PetscErrorCode,(ISLocalToGlobalMapping{Float32},PetscViewer{Float32}),arg1,arg2)
    return err
end

function ISLocalToGlobalMappingDestroy(arg1::Union{Ptr{ISLocalToGlobalMapping{Float32}},StridedArray{ISLocalToGlobalMapping{Float32}},Ptr{ISLocalToGlobalMapping{Float32}},Ref{ISLocalToGlobalMapping{Float32}}})
    err = ccall((:ISLocalToGlobalMappingDestroy,petscRealSingle),PetscErrorCode,(Ptr{ISLocalToGlobalMapping{Float32}},),arg1)
    return err
end

function ISLocalToGlobalMappingApply(arg1::ISLocalToGlobalMapping{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISLocalToGlobalMappingApply,petscRealSingle),PetscErrorCode,(ISLocalToGlobalMapping{Float32},Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function ISLocalToGlobalMappingApplyBlock(arg1::ISLocalToGlobalMapping{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISLocalToGlobalMappingApplyBlock,petscRealSingle),PetscErrorCode,(ISLocalToGlobalMapping{Float32},Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function ISLocalToGlobalMappingApplyIS(arg1::ISLocalToGlobalMapping{Float32},arg2::IS{Float32},arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:ISLocalToGlobalMappingApplyIS,petscRealSingle),PetscErrorCode,(ISLocalToGlobalMapping{Float32},IS{Float32},Ptr{IS{Float32}}),arg1,arg2,arg3)
    return err
end

function ISGlobalToLocalMappingApply(arg1::ISLocalToGlobalMapping{Float32},arg2::ISGlobalToLocalMappingType,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISGlobalToLocalMappingApply,petscRealSingle),PetscErrorCode,(ISLocalToGlobalMapping{Float32},ISGlobalToLocalMappingType,Int64,Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function ISGlobalToLocalMappingApplyBlock(arg1::ISLocalToGlobalMapping{Float32},arg2::ISGlobalToLocalMappingType,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISGlobalToLocalMappingApplyBlock,petscRealSingle),PetscErrorCode,(ISLocalToGlobalMapping{Float32},ISGlobalToLocalMappingType,Int64,Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function ISGlobalToLocalMappingApplyIS(arg1::ISLocalToGlobalMapping{Float32},arg2::ISGlobalToLocalMappingType,arg3::IS{Float32},arg4::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:ISGlobalToLocalMappingApplyIS,petscRealSingle),PetscErrorCode,(ISLocalToGlobalMapping{Float32},ISGlobalToLocalMappingType,IS{Float32},Ptr{IS{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function ISLocalToGlobalMappingGetSize(arg1::ISLocalToGlobalMapping{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISLocalToGlobalMappingGetSize,petscRealSingle),PetscErrorCode,(ISLocalToGlobalMapping{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function ISLocalToGlobalMappingGetInfo(arg1::ISLocalToGlobalMapping{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg5::Union{Ptr{Ptr{Ptr{Int64}}},StridedArray{Ptr{Ptr{Int64}}},Ptr{Ptr{Ptr{Int64}}},Ref{Ptr{Ptr{Int64}}}})
    err = ccall((:ISLocalToGlobalMappingGetInfo,petscRealSingle),PetscErrorCode,(ISLocalToGlobalMapping{Float32},Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}},Ptr{Ptr{Ptr{Int64}}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function ISLocalToGlobalMappingRestoreInfo(arg1::ISLocalToGlobalMapping{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg5::Union{Ptr{Ptr{Ptr{Int64}}},StridedArray{Ptr{Ptr{Int64}}},Ptr{Ptr{Ptr{Int64}}},Ref{Ptr{Ptr{Int64}}}})
    err = ccall((:ISLocalToGlobalMappingRestoreInfo,petscRealSingle),PetscErrorCode,(ISLocalToGlobalMapping{Float32},Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}},Ptr{Ptr{Ptr{Int64}}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function ISLocalToGlobalMappingGetBlockInfo(arg1::ISLocalToGlobalMapping{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg5::Union{Ptr{Ptr{Ptr{Int64}}},StridedArray{Ptr{Ptr{Int64}}},Ptr{Ptr{Ptr{Int64}}},Ref{Ptr{Ptr{Int64}}}})
    err = ccall((:ISLocalToGlobalMappingGetBlockInfo,petscRealSingle),PetscErrorCode,(ISLocalToGlobalMapping{Float32},Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}},Ptr{Ptr{Ptr{Int64}}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function ISLocalToGlobalMappingRestoreBlockInfo(arg1::ISLocalToGlobalMapping{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg5::Union{Ptr{Ptr{Ptr{Int64}}},StridedArray{Ptr{Ptr{Int64}}},Ptr{Ptr{Ptr{Int64}}},Ref{Ptr{Ptr{Int64}}}})
    err = ccall((:ISLocalToGlobalMappingRestoreBlockInfo,petscRealSingle),PetscErrorCode,(ISLocalToGlobalMapping{Float32},Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}},Ptr{Ptr{Ptr{Int64}}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function ISLocalToGlobalMappingGetIndices(arg1::ISLocalToGlobalMapping{Float32},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:ISLocalToGlobalMappingGetIndices,petscRealSingle),PetscErrorCode,(ISLocalToGlobalMapping{Float32},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function ISLocalToGlobalMappingRestoreIndices(arg1::ISLocalToGlobalMapping{Float32},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:ISLocalToGlobalMappingRestoreIndices,petscRealSingle),PetscErrorCode,(ISLocalToGlobalMapping{Float32},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function ISLocalToGlobalMappingGetBlockIndices(arg1::ISLocalToGlobalMapping{Float32},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:ISLocalToGlobalMappingGetBlockIndices,petscRealSingle),PetscErrorCode,(ISLocalToGlobalMapping{Float32},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function ISLocalToGlobalMappingRestoreBlockIndices(arg1::ISLocalToGlobalMapping{Float32},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:ISLocalToGlobalMappingRestoreBlockIndices,petscRealSingle),PetscErrorCode,(ISLocalToGlobalMapping{Float32},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function ISLocalToGlobalMappingConcatenate(arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{ISLocalToGlobalMapping{Float32}},StridedArray{ISLocalToGlobalMapping{Float32}},Ptr{ISLocalToGlobalMapping{Float32}},Ref{ISLocalToGlobalMapping{Float32}}},arg4::Union{Ptr{ISLocalToGlobalMapping{Float32}},StridedArray{ISLocalToGlobalMapping{Float32}},Ptr{ISLocalToGlobalMapping{Float32}},Ref{ISLocalToGlobalMapping{Float32}}})
    err = ccall((:ISLocalToGlobalMappingConcatenate,petscRealSingle),PetscErrorCode,(comm_type,Int64,Ptr{ISLocalToGlobalMapping{Float32}},Ptr{ISLocalToGlobalMapping{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function ISG2LMapApply(arg1::ISLocalToGlobalMapping{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISG2LMapApply,petscRealSingle),PetscErrorCode,(ISLocalToGlobalMapping{Float32},Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function ISLocalToGlobalMappingGetBlockSize(arg1::ISLocalToGlobalMapping{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISLocalToGlobalMappingGetBlockSize,petscRealSingle),PetscErrorCode,(ISLocalToGlobalMapping{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function ISAllGatherColors(arg0::Type{Float32},arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Ptr{Cint}},StridedArray{Ptr{Cint}},Ptr{Ptr{Cint}},Ref{Ptr{Cint}}})
    err = ccall((:ISAllGatherColors,petscRealSingle),PetscErrorCode,(comm_type,Int64,Ptr{Cint},Ptr{Int64},Ptr{Ptr{Cint}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function ISColoringCreate(arg1::MPI_Comm,arg2::Integer,arg3::Integer,ISColoringValue::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}},PetscCopyMode::Integer,arg4::Union{Ptr{ISColoring{Float32}},StridedArray{ISColoring{Float32}},Ptr{ISColoring{Float32}},Ref{ISColoring{Float32}}})
    err = ccall((:ISColoringCreate,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Ptr{Cint},Cint,Ptr{ISColoring{Float32}}),arg1,arg2,arg3,ISColoringValue,PetscCopyMode,arg4)
    return err
end

function ISColoringDestroy(arg1::Union{Ptr{ISColoring{Float32}},StridedArray{ISColoring{Float32}},Ptr{ISColoring{Float32}},Ref{ISColoring{Float32}}})
    err = ccall((:ISColoringDestroy,petscRealSingle),PetscErrorCode,(Ptr{ISColoring{Float32}},),arg1)
    return err
end

function ISColoringView(arg1::ISColoring{Float32},arg2::PetscViewer{Float32})
    err = ccall((:ISColoringView,petscRealSingle),PetscErrorCode,(ISColoring{Float32},PetscViewer{Float32}),arg1,arg2)
    return err
end

#= skipping function with undefined symbols:
 function ISColoringViewFromOptions(arg1::ISColoring{Float32},arg2::PetscObject,arg3::Union{ByteString,Symbol})
    ccall((:ISColoringViewFromOptions,petscRealSingle),PetscErrorCode,(ISColoring{Float32},PetscObject,Cstring),arg1,arg2,arg3)
end
=#
function ISColoringGetIS(arg1::ISColoring{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{IS{Float32}}},StridedArray{Ptr{IS{Float32}}},Ptr{Ptr{IS{Float32}}},Ref{Ptr{IS{Float32}}}})
    err = ccall((:ISColoringGetIS,petscRealSingle),PetscErrorCode,(ISColoring{Float32},Ptr{Int64},Ptr{Ptr{IS{Float32}}}),arg1,arg2,arg3)
    return err
end

function ISColoringRestoreIS(arg1::ISColoring{Float32},arg2::Union{Ptr{Ptr{IS{Float32}}},StridedArray{Ptr{IS{Float32}}},Ptr{Ptr{IS{Float32}}},Ref{Ptr{IS{Float32}}}})
    err = ccall((:ISColoringRestoreIS,petscRealSingle),PetscErrorCode,(ISColoring{Float32},Ptr{Ptr{IS{Float32}}}),arg1,arg2)
    return err
end

function ISColoringReference(arg1::ISColoring{Float32})
    err = ccall((:ISColoringReference,petscRealSingle),PetscErrorCode,(ISColoring{Float32},),arg1)
    return err
end

function ISColoringSetType(arg1::ISColoring{Float32},arg2::ISColoringType)
    err = ccall((:ISColoringSetType,petscRealSingle),PetscErrorCode,(ISColoring{Float32},ISColoringType),arg1,arg2)
    return err
end

function ISPartitioningToNumbering(arg1::IS{Float32},arg2::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:ISPartitioningToNumbering,petscRealSingle),PetscErrorCode,(IS{Float32},Ptr{IS{Float32}}),arg1,arg2)
    return err
end

function ISPartitioningCount(arg1::IS{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:ISPartitioningCount,petscRealSingle),PetscErrorCode,(IS{Float32},Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function ISCompressIndicesGeneral(arg1::Integer,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg6::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:ISCompressIndicesGeneral,petscRealSingle),PetscErrorCode,(Int64,Int64,Int64,Int64,Ptr{IS{Float32}},Ptr{IS{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function ISCompressIndicesSorted(arg1::Integer,arg2::Integer,arg3::Integer,arg4::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg5::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:ISCompressIndicesSorted,petscRealSingle),PetscErrorCode,(Int64,Int64,Int64,Ptr{IS{Float32}},Ptr{IS{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function ISExpandIndicesGeneral(arg1::Integer,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg6::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:ISExpandIndicesGeneral,petscRealSingle),PetscErrorCode,(Int64,Int64,Int64,Int64,Ptr{IS{Float32}},Ptr{IS{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PetscLayoutSetUp(arg1::PetscLayout{Float32})
    err = ccall((:PetscLayoutSetUp,petscRealSingle),PetscErrorCode,(PetscLayout{Float32},),arg1)
    return err
end

function PetscLayoutDestroy(arg1::Union{Ptr{PetscLayout{Float32}},StridedArray{PetscLayout{Float32}},Ptr{PetscLayout{Float32}},Ref{PetscLayout{Float32}}})
    err = ccall((:PetscLayoutDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscLayout{Float32}{Float32}},),arg1)
    return err
end

function PetscLayoutDuplicate(arg1::PetscLayout{Float32},arg2::Union{Ptr{PetscLayout{Float32}},StridedArray{PetscLayout{Float32}},Ptr{PetscLayout{Float32}},Ref{PetscLayout{Float32}}})
    err = ccall((:PetscLayoutDuplicate,petscRealSingle),PetscErrorCode,(PetscLayout{Float32},Ptr{PetscLayout{Float32}{Float32}}),arg1,arg2)
    return err
end

function PetscLayoutReference(arg1::PetscLayout{Float32},arg2::Union{Ptr{PetscLayout{Float32}},StridedArray{PetscLayout{Float32}},Ptr{PetscLayout{Float32}},Ref{PetscLayout{Float32}}})
    err = ccall((:PetscLayoutReference,petscRealSingle),PetscErrorCode,(PetscLayout{Float32},Ptr{PetscLayout{Float32}{Float32}}),arg1,arg2)
    return err
end

function PetscLayoutSetLocalSize(arg1::PetscLayout{Float32},arg2::Integer)
    err = ccall((:PetscLayoutSetLocalSize,petscRealSingle),PetscErrorCode,(PetscLayout{Float32},Int64),arg1,arg2)
    return err
end

function PetscLayoutGetLocalSize(arg1::PetscLayout{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscLayoutGetLocalSize,petscRealSingle),PetscErrorCode,(PetscLayout{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscLayoutSetSize(arg1::PetscLayout{Float32},arg2::Integer)
    err = ccall((:PetscLayoutSetSize,petscRealSingle),PetscErrorCode,(PetscLayout{Float32},Int64),arg1,arg2)
    return err
end

function PetscLayoutGetSize(arg1::PetscLayout{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscLayoutGetSize,petscRealSingle),PetscErrorCode,(PetscLayout{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscLayoutSetBlockSize(arg1::PetscLayout{Float32},arg2::Integer)
    err = ccall((:PetscLayoutSetBlockSize,petscRealSingle),PetscErrorCode,(PetscLayout{Float32},Int64),arg1,arg2)
    return err
end

function PetscLayoutGetBlockSize(arg1::PetscLayout{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscLayoutGetBlockSize,petscRealSingle),PetscErrorCode,(PetscLayout{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscLayoutGetRange(arg1::PetscLayout{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PetscLayoutGetRange,petscRealSingle),PetscErrorCode,(PetscLayout{Float32},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PetscLayoutGetRanges(arg1::PetscLayout{Float32},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:PetscLayoutGetRanges,petscRealSingle),PetscErrorCode,(PetscLayout{Float32},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function PetscLayoutSetISLocalToGlobalMapping(arg1::PetscLayout{Float32},arg2::ISLocalToGlobalMapping{Float32})
    err = ccall((:PetscLayoutSetISLocalToGlobalMapping,petscRealSingle),PetscErrorCode,(PetscLayout{Float32},ISLocalToGlobalMapping{Float32}),arg1,arg2)
    return err
end

#= skipping function with undefined symbols:
 function PetscSFSetGraphLayout(arg1::PetscSF,arg2::PetscLayout{Float32},arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},PetscCopyMode::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:PetscSFSetGraphLayout,petscRealSingle),PetscErrorCode,(PetscSF,PetscLayout{Float32},Int64,Ptr{Int64},Cint,Ptr{Int64}),arg1,arg2,arg3,arg4,PetscCopyMode,arg5)
end
=#
#= skipping function with undefined symbols:
 function PetscSectionCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{PetscSection},StridedArray{PetscSection},Ptr{PetscSection},Ref{PetscSection}})
    ccall((:PetscSectionCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{PetscSection}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscSectionClone(arg0::Type{Float32},arg1::PetscSection,arg2::Union{Ptr{PetscSection},StridedArray{PetscSection},Ptr{PetscSection},Ref{PetscSection}})
    ccall((:PetscSectionClone,petscRealSingle),PetscErrorCode,(PetscSection,Ptr{PetscSection}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscSectionCopy(arg0::Type{Float32},arg1::PetscSection,arg2::PetscSection)
    ccall((:PetscSectionCopy,petscRealSingle),PetscErrorCode,(PetscSection,PetscSection),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscSectionGetNumFields(arg0::Type{Float32},arg1::PetscSection,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:PetscSectionGetNumFields,petscRealSingle),PetscErrorCode,(PetscSection,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscSectionSetNumFields(arg0::Type{Float32},arg1::PetscSection,arg2::Integer)
    ccall((:PetscSectionSetNumFields,petscRealSingle),PetscErrorCode,(PetscSection,Int64),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscSectionGetFieldName(arg0::Type{Float32},arg1::PetscSection,arg2::Integer,arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    ccall((:PetscSectionGetFieldName,petscRealSingle),PetscErrorCode,(PetscSection,Int64,Ptr{Ptr{UInt8}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscSectionSetFieldName(arg0::Type{Float32},arg1::PetscSection,arg2::Integer,arg3::Union{ByteString,Symbol})
    ccall((:PetscSectionSetFieldName,petscRealSingle),PetscErrorCode,(PetscSection,Int64,Cstring),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscSectionGetFieldComponents(arg0::Type{Float32},arg1::PetscSection,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:PetscSectionGetFieldComponents,petscRealSingle),PetscErrorCode,(PetscSection,Int64,Ptr{Int64}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscSectionSetFieldComponents(arg0::Type{Float32},arg1::PetscSection,arg2::Integer,arg3::Integer)
    ccall((:PetscSectionSetFieldComponents,petscRealSingle),PetscErrorCode,(PetscSection,Int64,Int64),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscSectionGetChart(arg0::Type{Float32},arg1::PetscSection,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:PetscSectionGetChart,petscRealSingle),PetscErrorCode,(PetscSection,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscSectionSetChart(arg0::Type{Float32},arg1::PetscSection,arg2::Integer,arg3::Integer)
    ccall((:PetscSectionSetChart,petscRealSingle),PetscErrorCode,(PetscSection,Int64,Int64),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscSectionGetPermutation(arg1::PetscSection,arg2::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    ccall((:PetscSectionGetPermutation,petscRealSingle),PetscErrorCode,(PetscSection,Ptr{IS{Float32}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscSectionSetPermutation(arg1::PetscSection,arg2::IS{Float32})
    ccall((:PetscSectionSetPermutation,petscRealSingle),PetscErrorCode,(PetscSection,IS{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscSectionGetDof(arg0::Type{Float32},arg1::PetscSection,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:PetscSectionGetDof,petscRealSingle),PetscErrorCode,(PetscSection,Int64,Ptr{Int64}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscSectionSetDof(arg0::Type{Float32},arg1::PetscSection,arg2::Integer,arg3::Integer)
    ccall((:PetscSectionSetDof,petscRealSingle),PetscErrorCode,(PetscSection,Int64,Int64),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscSectionAddDof(arg0::Type{Float32},arg1::PetscSection,arg2::Integer,arg3::Integer)
    ccall((:PetscSectionAddDof,petscRealSingle),PetscErrorCode,(PetscSection,Int64,Int64),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscSectionGetFieldDof(arg0::Type{Float32},arg1::PetscSection,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:PetscSectionGetFieldDof,petscRealSingle),PetscErrorCode,(PetscSection,Int64,Int64,Ptr{Int64}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function PetscSectionSetFieldDof(arg0::Type{Float32},arg1::PetscSection,arg2::Integer,arg3::Integer,arg4::Integer)
    ccall((:PetscSectionSetFieldDof,petscRealSingle),PetscErrorCode,(PetscSection,Int64,Int64,Int64),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function PetscSectionAddFieldDof(arg0::Type{Float32},arg1::PetscSection,arg2::Integer,arg3::Integer,arg4::Integer)
    ccall((:PetscSectionAddFieldDof,petscRealSingle),PetscErrorCode,(PetscSection,Int64,Int64,Int64),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function PetscSectionHasConstraints(arg0::Type{Float32},arg1::PetscSection,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:PetscSectionHasConstraints,petscRealSingle),PetscErrorCode,(PetscSection,Ptr{PetscBool}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscSectionGetConstraintDof(arg0::Type{Float32},arg1::PetscSection,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:PetscSectionGetConstraintDof,petscRealSingle),PetscErrorCode,(PetscSection,Int64,Ptr{Int64}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscSectionSetConstraintDof(arg0::Type{Float32},arg1::PetscSection,arg2::Integer,arg3::Integer)
    ccall((:PetscSectionSetConstraintDof,petscRealSingle),PetscErrorCode,(PetscSection,Int64,Int64),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscSectionAddConstraintDof(arg0::Type{Float32},arg1::PetscSection,arg2::Integer,arg3::Integer)
    ccall((:PetscSectionAddConstraintDof,petscRealSingle),PetscErrorCode,(PetscSection,Int64,Int64),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscSectionGetFieldConstraintDof(arg0::Type{Float32},arg1::PetscSection,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:PetscSectionGetFieldConstraintDof,petscRealSingle),PetscErrorCode,(PetscSection,Int64,Int64,Ptr{Int64}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function PetscSectionSetFieldConstraintDof(arg0::Type{Float32},arg1::PetscSection,arg2::Integer,arg3::Integer,arg4::Integer)
    ccall((:PetscSectionSetFieldConstraintDof,petscRealSingle),PetscErrorCode,(PetscSection,Int64,Int64,Int64),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function PetscSectionAddFieldConstraintDof(arg0::Type{Float32},arg1::PetscSection,arg2::Integer,arg3::Integer,arg4::Integer)
    ccall((:PetscSectionAddFieldConstraintDof,petscRealSingle),PetscErrorCode,(PetscSection,Int64,Int64,Int64),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function PetscSectionGetConstraintIndices(arg0::Type{Float32},arg1::PetscSection,arg2::Integer,arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    ccall((:PetscSectionGetConstraintIndices,petscRealSingle),PetscErrorCode,(PetscSection,Int64,Ptr{Ptr{Int64}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscSectionSetConstraintIndices(arg0::Type{Float32},arg1::PetscSection,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:PetscSectionSetConstraintIndices,petscRealSingle),PetscErrorCode,(PetscSection,Int64,Ptr{Int64}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscSectionGetFieldConstraintIndices(arg0::Type{Float32},arg1::PetscSection,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    ccall((:PetscSectionGetFieldConstraintIndices,petscRealSingle),PetscErrorCode,(PetscSection,Int64,Int64,Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function PetscSectionSetFieldConstraintIndices(arg0::Type{Float32},arg1::PetscSection,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:PetscSectionSetFieldConstraintIndices,petscRealSingle),PetscErrorCode,(PetscSection,Int64,Int64,Ptr{Int64}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function PetscSectionSetUpBC(arg0::Type{Float32},arg1::PetscSection)
    ccall((:PetscSectionSetUpBC,petscRealSingle),PetscErrorCode,(PetscSection,),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscSectionSetUp(arg0::Type{Float32},arg1::PetscSection)
    ccall((:PetscSectionSetUp,petscRealSingle),PetscErrorCode,(PetscSection,),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscSectionGetMaxDof(arg0::Type{Float32},arg1::PetscSection,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:PetscSectionGetMaxDof,petscRealSingle),PetscErrorCode,(PetscSection,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscSectionGetStorageSize(arg0::Type{Float32},arg1::PetscSection,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:PetscSectionGetStorageSize,petscRealSingle),PetscErrorCode,(PetscSection,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscSectionGetConstrainedStorageSize(arg0::Type{Float32},arg1::PetscSection,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:PetscSectionGetConstrainedStorageSize,petscRealSingle),PetscErrorCode,(PetscSection,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscSectionGetOffset(arg0::Type{Float32},arg1::PetscSection,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:PetscSectionGetOffset,petscRealSingle),PetscErrorCode,(PetscSection,Int64,Ptr{Int64}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscSectionSetOffset(arg0::Type{Float32},arg1::PetscSection,arg2::Integer,arg3::Integer)
    ccall((:PetscSectionSetOffset,petscRealSingle),PetscErrorCode,(PetscSection,Int64,Int64),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscSectionGetFieldOffset(arg0::Type{Float32},arg1::PetscSection,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:PetscSectionGetFieldOffset,petscRealSingle),PetscErrorCode,(PetscSection,Int64,Int64,Ptr{Int64}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function PetscSectionSetFieldOffset(arg0::Type{Float32},arg1::PetscSection,arg2::Integer,arg3::Integer,arg4::Integer)
    ccall((:PetscSectionSetFieldOffset,petscRealSingle),PetscErrorCode,(PetscSection,Int64,Int64,Int64),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function PetscSectionGetOffsetRange(arg0::Type{Float32},arg1::PetscSection,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:PetscSectionGetOffsetRange,petscRealSingle),PetscErrorCode,(PetscSection,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscSectionView(arg1::PetscSection,arg2::PetscViewer{Float32})
    ccall((:PetscSectionView,petscRealSingle),PetscErrorCode,(PetscSection,PetscViewer{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscSectionDestroy(arg0::Type{Float32},arg1::Union{Ptr{PetscSection},StridedArray{PetscSection},Ptr{PetscSection},Ref{PetscSection}})
    ccall((:PetscSectionDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscSection},),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscSectionCreateGlobalSection(arg0::Type{Float32},arg1::PetscSection,arg2::PetscSF,arg3::PetscBool,arg4::Union{Ptr{PetscSection},StridedArray{PetscSection},Ptr{PetscSection},Ref{PetscSection}})
    ccall((:PetscSectionCreateGlobalSection,petscRealSingle),PetscErrorCode,(PetscSection,PetscSF,PetscBool,Ptr{PetscSection}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function PetscSectionCreateGlobalSectionCensored(arg0::Type{Float32},arg1::PetscSection,arg2::PetscSF,arg3::PetscBool,arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{PetscSection},StridedArray{PetscSection},Ptr{PetscSection},Ref{PetscSection}})
    ccall((:PetscSectionCreateGlobalSectionCensored,petscRealSingle),PetscErrorCode,(PetscSection,PetscSF,PetscBool,Int64,Ptr{Int64},Ptr{PetscSection}),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
#= skipping function with undefined symbols:
 function PetscSectionCreateSubsection(arg0::Type{Float32},arg1::PetscSection,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{PetscSection},StridedArray{PetscSection},Ptr{PetscSection},Ref{PetscSection}})
    ccall((:PetscSectionCreateSubsection,petscRealSingle),PetscErrorCode,(PetscSection,Int64,Ptr{Int64},Ptr{PetscSection}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function PetscSectionCreateSubmeshSection(arg1::PetscSection,arg2::IS{Float32},arg3::Union{Ptr{PetscSection},StridedArray{PetscSection},Ptr{PetscSection},Ref{PetscSection}})
    ccall((:PetscSectionCreateSubmeshSection,petscRealSingle),PetscErrorCode,(PetscSection,IS{Float32},Ptr{PetscSection}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscSectionGetPointLayout(arg1::MPI_Comm,arg2::PetscSection,arg3::Union{Ptr{PetscLayout{Float32}},StridedArray{PetscLayout{Float32}},Ptr{PetscLayout{Float32}},Ref{PetscLayout{Float32}}})
    ccall((:PetscSectionGetPointLayout,petscRealSingle),PetscErrorCode,(comm_type,PetscSection,Ptr{PetscLayout{Float32}{Float32}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscSectionGetValueLayout(arg1::MPI_Comm,arg2::PetscSection,arg3::Union{Ptr{PetscLayout{Float32}},StridedArray{PetscLayout{Float32}},Ptr{PetscLayout{Float32}},Ref{PetscLayout{Float32}}})
    ccall((:PetscSectionGetValueLayout,petscRealSingle),PetscErrorCode,(comm_type,PetscSection,Ptr{PetscLayout{Float32}{Float32}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscSectionPermute(arg1::PetscSection,arg2::IS{Float32},arg3::Union{Ptr{PetscSection},StridedArray{PetscSection},Ptr{PetscSection},Ref{PetscSection}})
    ccall((:PetscSectionPermute,petscRealSingle),PetscErrorCode,(PetscSection,IS{Float32},Ptr{PetscSection}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscSectionGetField(arg0::Type{Float32},arg1::PetscSection,arg2::Integer,arg3::Union{Ptr{PetscSection},StridedArray{PetscSection},Ptr{PetscSection},Ref{PetscSection}})
    ccall((:PetscSectionGetField,petscRealSingle),PetscErrorCode,(PetscSection,Int64,Ptr{PetscSection}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscSectionSetClosureIndex(arg1::PetscSection,arg2::PetscObject,arg3::PetscSection,arg4::IS{Float32})
    ccall((:PetscSectionSetClosureIndex,petscRealSingle),PetscErrorCode,(PetscSection,PetscObject,PetscSection,IS{Float32}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function PetscSectionGetClosureIndex(arg1::PetscSection,arg2::PetscObject,arg3::Union{Ptr{PetscSection},StridedArray{PetscSection},Ptr{PetscSection},Ref{PetscSection}},arg4::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    ccall((:PetscSectionGetClosureIndex,petscRealSingle),PetscErrorCode,(PetscSection,PetscObject,Ptr{PetscSection},Ptr{IS{Float32}}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function PetscSFConvertPartition(arg1::PetscSF,arg2::PetscSection,arg3::IS{Float32},arg4::Union{Ptr{ISLocalToGlobalMapping{Float32}},StridedArray{ISLocalToGlobalMapping{Float32}},Ptr{ISLocalToGlobalMapping{Float32}},Ref{ISLocalToGlobalMapping{Float32}}},arg5::Union{Ptr{PetscSF},StridedArray{PetscSF},Ptr{PetscSF},Ref{PetscSF}})
    ccall((:PetscSFConvertPartition,petscRealSingle),PetscErrorCode,(PetscSF,PetscSection,IS{Float32},Ptr{ISLocalToGlobalMapping{Float32}},Ptr{PetscSF}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function PetscSFCreateRemoteOffsets(arg0::Type{Float32},arg1::PetscSF,arg2::PetscSection,arg3::PetscSection,arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    ccall((:PetscSFCreateRemoteOffsets,petscRealSingle),PetscErrorCode,(PetscSF,PetscSection,PetscSection,Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function PetscSFDistributeSection(arg0::Type{Float32},arg1::PetscSF,arg2::PetscSection,arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg4::PetscSection)
    ccall((:PetscSFDistributeSection,petscRealSingle),PetscErrorCode,(PetscSF,PetscSection,Ptr{Ptr{Int64}},PetscSection),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function PetscSFCreateSectionSF(arg0::Type{Float32},arg1::PetscSF,arg2::PetscSection,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::PetscSection,arg5::Union{Ptr{PetscSF},StridedArray{PetscSF},Ptr{PetscSF},Ref{PetscSF}})
    ccall((:PetscSFCreateSectionSF,petscRealSingle),PetscErrorCode,(PetscSF,PetscSection,Ptr{Int64},PetscSection,Ptr{PetscSF}),arg1,arg2,arg3,arg4,arg5)
end
=#
function VecInitializePackage(arg0::Type{Float32})
    err = ccall((:VecInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function VecFinalizePackage(arg0::Type{Float32})
    err = ccall((:VecFinalizePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function VecCreate(arg1::MPI_Comm,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:VecCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{Vec{Float32}}),arg1,arg2)
    return err
end

function VecCreateSeq(arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:VecCreateSeq,petscRealSingle),PetscErrorCode,(comm_type,Int64,Ptr{Vec{Float32}}),arg1,arg2,arg3)
    return err
end

function VecCreateMPI(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:VecCreateMPI,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Ptr{Vec{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function VecCreateSeqWithArray(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:VecCreateSeqWithArray,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Ptr{Float32},Ptr{Vec{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function VecCreateMPIWithArray(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:VecCreateMPIWithArray,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Ptr{Float32},Ptr{Vec{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function VecCreateShared(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:VecCreateShared,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Ptr{Vec{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function VecSetFromOptions(arg1::Vec{Float32})
    err = ccall((:VecSetFromOptions,petscRealSingle),PetscErrorCode,(Vec{Float32},),arg1)
    return err
end

function VecDestroy(arg1::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:VecDestroy,petscRealSingle),PetscErrorCode,(Ptr{Vec{Float32}},),arg1)
    return err
end

function VecZeroEntries(arg1::Vec{Float32})
    err = ccall((:VecZeroEntries,petscRealSingle),PetscErrorCode,(Vec{Float32},),arg1)
    return err
end

function VecSetOptionsPrefix(arg1::Vec{Float32},arg2::Union{ByteString,Symbol})
    err = ccall((:VecSetOptionsPrefix,petscRealSingle),PetscErrorCode,(Vec{Float32},Cstring),arg1,arg2)
    return err
end

function VecAppendOptionsPrefix(arg1::Vec{Float32},arg2::Union{ByteString,Symbol})
    err = ccall((:VecAppendOptionsPrefix,petscRealSingle),PetscErrorCode,(Vec{Float32},Cstring),arg1,arg2)
    return err
end

function VecGetOptionsPrefix(arg1::Vec{Float32},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:VecGetOptionsPrefix,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function VecSetSizes(arg1::Vec{Float32},arg2::Integer,arg3::Integer)
    err = ccall((:VecSetSizes,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Int64),arg1,arg2,arg3)
    return err
end

function VecDotNorm2(arg1::Vec{Float32},arg2::Vec{Float32},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecDotNorm2,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32},Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function VecDot(arg1::Vec{Float32},arg2::Vec{Float32},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecDot,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32},Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function VecDotRealPart(arg1::Vec{Float32},arg2::Vec{Float32},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecDotRealPart,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32},Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function VecTDot(arg1::Vec{Float32},arg2::Vec{Float32},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecTDot,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32},Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function VecMDot(arg1::Vec{Float32},arg2::Integer,arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecMDot,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Ptr{Vec{Float32}},Ptr{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function VecMTDot(arg1::Vec{Float32},arg2::Integer,arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecMTDot,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Ptr{Vec{Float32}},Ptr{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function VecGetSubVector(arg1::Vec{Float32},arg2::IS{Float32},arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:VecGetSubVector,petscRealSingle),PetscErrorCode,(Vec{Float32},IS{Float32},Ptr{Vec{Float32}}),arg1,arg2,arg3)
    return err
end

function VecRestoreSubVector(arg1::Vec{Float32},arg2::IS{Float32},arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:VecRestoreSubVector,petscRealSingle),PetscErrorCode,(Vec{Float32},IS{Float32},Ptr{Vec{Float32}}),arg1,arg2,arg3)
    return err
end

function VecNorm(arg1::Vec{Float32},arg2::NormType,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecNorm,petscRealSingle),PetscErrorCode,(Vec{Float32},NormType,Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function VecNormAvailable(arg1::Vec{Float32},arg2::NormType,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecNormAvailable,petscRealSingle),PetscErrorCode,(Vec{Float32},NormType,Ptr{PetscBool},Ptr{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function VecNormalize(arg1::Vec{Float32},arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecNormalize,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{Float32}),arg1,arg2)
    return err
end

function VecSum(arg1::Vec{Float32},arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecSum,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{Float32}),arg1,arg2)
    return err
end

function VecMax(arg1::Vec{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecMax,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{Int64},Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function VecMin(arg1::Vec{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecMin,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{Int64},Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function VecScale(arg1::Vec{Float32},arg2::Float32)
    err = ccall((:VecScale,petscRealSingle),PetscErrorCode,(Vec{Float32},Float32),arg1,arg2)
    return err
end

function VecCopy(arg1::Vec{Float32},arg2::Vec{Float32})
    err = ccall((:VecCopy,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32}),arg1,arg2)
    return err
end

#= skipping function with undefined symbols:
 function VecSetRandom(arg1::Vec{Float32},arg2::PetscRandom)
    ccall((:VecSetRandom,petscRealSingle),PetscErrorCode,(Vec{Float32},PetscRandom),arg1,arg2)
end
=#
function VecSet(arg1::Vec{Float32},arg2::Float32)
    err = ccall((:VecSet,petscRealSingle),PetscErrorCode,(Vec{Float32},Float32),arg1,arg2)
    return err
end

function VecSetInf(arg1::Vec{Float32})
    err = ccall((:VecSetInf,petscRealSingle),PetscErrorCode,(Vec{Float32},),arg1)
    return err
end

function VecSwap(arg1::Vec{Float32},arg2::Vec{Float32})
    err = ccall((:VecSwap,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32}),arg1,arg2)
    return err
end

function VecAXPY(arg1::Vec{Float32},arg2::Float32,arg3::Vec{Float32})
    err = ccall((:VecAXPY,petscRealSingle),PetscErrorCode,(Vec{Float32},Float32,Vec{Float32}),arg1,arg2,arg3)
    return err
end

function VecAXPBY(arg1::Vec{Float32},arg2::Float32,arg3::Float32,arg4::Vec{Float32})
    err = ccall((:VecAXPBY,petscRealSingle),PetscErrorCode,(Vec{Float32},Float32,Float32,Vec{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function VecMAXPY(arg1::Vec{Float32},arg2::Integer,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:VecMAXPY,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Ptr{Float32},Ptr{Vec{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function VecAYPX(arg1::Vec{Float32},arg2::Float32,arg3::Vec{Float32})
    err = ccall((:VecAYPX,petscRealSingle),PetscErrorCode,(Vec{Float32},Float32,Vec{Float32}),arg1,arg2,arg3)
    return err
end

function VecWAXPY(arg1::Vec{Float32},arg2::Float32,arg3::Vec{Float32},arg4::Vec{Float32})
    err = ccall((:VecWAXPY,petscRealSingle),PetscErrorCode,(Vec{Float32},Float32,Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function VecAXPBYPCZ(arg1::Vec{Float32},arg2::Float32,arg3::Float32,arg4::Float32,arg5::Vec{Float32},arg6::Vec{Float32})
    err = ccall((:VecAXPBYPCZ,petscRealSingle),PetscErrorCode,(Vec{Float32},Float32,Float32,Float32,Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function VecPointwiseMax(arg1::Vec{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:VecPointwiseMax,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function VecPointwiseMaxAbs(arg1::Vec{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:VecPointwiseMaxAbs,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function VecPointwiseMin(arg1::Vec{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:VecPointwiseMin,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function VecPointwiseMult(arg1::Vec{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:VecPointwiseMult,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function VecPointwiseDivide(arg1::Vec{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:VecPointwiseDivide,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function VecMaxPointwiseDivide(arg1::Vec{Float32},arg2::Vec{Float32},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecMaxPointwiseDivide,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32},Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function VecShift(arg1::Vec{Float32},arg2::Float32)
    err = ccall((:VecShift,petscRealSingle),PetscErrorCode,(Vec{Float32},Float32),arg1,arg2)
    return err
end

function VecReciprocal(arg1::Vec{Float32})
    err = ccall((:VecReciprocal,petscRealSingle),PetscErrorCode,(Vec{Float32},),arg1)
    return err
end

function VecPermute(arg1::Vec{Float32},arg2::IS{Float32},arg3::PetscBool)
    err = ccall((:VecPermute,petscRealSingle),PetscErrorCode,(Vec{Float32},IS{Float32},PetscBool),arg1,arg2,arg3)
    return err
end

function VecSqrtAbs(arg1::Vec{Float32})
    err = ccall((:VecSqrtAbs,petscRealSingle),PetscErrorCode,(Vec{Float32},),arg1)
    return err
end

function VecLog(arg1::Vec{Float32})
    err = ccall((:VecLog,petscRealSingle),PetscErrorCode,(Vec{Float32},),arg1)
    return err
end

function VecExp(arg1::Vec{Float32})
    err = ccall((:VecExp,petscRealSingle),PetscErrorCode,(Vec{Float32},),arg1)
    return err
end

function VecAbs(arg1::Vec{Float32})
    err = ccall((:VecAbs,petscRealSingle),PetscErrorCode,(Vec{Float32},),arg1)
    return err
end

function VecDuplicate(arg1::Vec{Float32},arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:VecDuplicate,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{Vec{Float32}}),arg1,arg2)
    return err
end

function VecDuplicateVecs(arg1::Vec{Float32},arg2::Integer,arg3::Union{Ptr{Ptr{Vec{Float32}}},StridedArray{Ptr{Vec{Float32}}},Ptr{Ptr{Vec{Float32}}},Ref{Ptr{Vec{Float32}}}})
    err = ccall((:VecDuplicateVecs,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Ptr{Ptr{Vec{Float32}}}),arg1,arg2,arg3)
    return err
end

function VecDestroyVecs(arg1::Integer,arg2::Union{Ptr{Ptr{Vec{Float32}}},StridedArray{Ptr{Vec{Float32}}},Ptr{Ptr{Vec{Float32}}},Ref{Ptr{Vec{Float32}}}})
    err = ccall((:VecDestroyVecs,petscRealSingle),PetscErrorCode,(Int64,Ptr{Ptr{Vec{Float32}}}),arg1,arg2)
    return err
end

function VecStrideNormAll(arg1::Vec{Float32},arg2::NormType,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecStrideNormAll,petscRealSingle),PetscErrorCode,(Vec{Float32},NormType,Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function VecStrideMaxAll(arg1::Vec{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecStrideMaxAll,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{Int64},Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function VecStrideMinAll(arg1::Vec{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecStrideMinAll,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{Int64},Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function VecStrideScaleAll(arg1::Vec{Float32},arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecStrideScaleAll,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{Float32}),arg1,arg2)
    return err
end

function VecUniqueEntries(arg1::Vec{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:VecUniqueEntries,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{Int64},Ptr{Ptr{Float32}}),arg1,arg2,arg3)
    return err
end

function VecStrideNorm(arg1::Vec{Float32},arg2::Integer,arg3::NormType,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecStrideNorm,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,NormType,Ptr{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function VecStrideMax(arg1::Vec{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecStrideMax,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Ptr{Int64},Ptr{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function VecStrideMin(arg1::Vec{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecStrideMin,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Ptr{Int64},Ptr{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function VecStrideScale(arg1::Vec{Float32},arg2::Integer,arg3::Float32)
    err = ccall((:VecStrideScale,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Float32),arg1,arg2,arg3)
    return err
end

function VecStrideSet(arg1::Vec{Float32},arg2::Integer,arg3::Float32)
    err = ccall((:VecStrideSet,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Float32),arg1,arg2,arg3)
    return err
end

function VecStrideGather(arg1::Vec{Float32},arg2::Integer,arg3::Vec{Float32},arg4::InsertMode)
    err = ccall((:VecStrideGather,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Vec{Float32},InsertMode),arg1,arg2,arg3,arg4)
    return err
end

function VecStrideScatter(arg1::Vec{Float32},arg2::Integer,arg3::Vec{Float32},arg4::InsertMode)
    err = ccall((:VecStrideScatter,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Vec{Float32},InsertMode),arg1,arg2,arg3,arg4)
    return err
end

function VecStrideGatherAll(arg1::Vec{Float32},arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg3::InsertMode)
    err = ccall((:VecStrideGatherAll,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{Vec{Float32}},InsertMode),arg1,arg2,arg3)
    return err
end

function VecStrideScatterAll(arg1::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg2::Vec{Float32},arg3::InsertMode)
    err = ccall((:VecStrideScatterAll,petscRealSingle),PetscErrorCode,(Ptr{Vec{Float32}},Vec{Float32},InsertMode),arg1,arg2,arg3)
    return err
end

function VecStrideSubSetScatter(arg1::Vec{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Vec{Float32},arg6::InsertMode)
    err = ccall((:VecStrideSubSetScatter,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Ptr{Int64},Ptr{Int64},Vec{Float32},InsertMode),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function VecStrideSubSetGather(arg1::Vec{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Vec{Float32},arg6::InsertMode)
    err = ccall((:VecStrideSubSetGather,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Ptr{Int64},Ptr{Int64},Vec{Float32},InsertMode),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function VecSetValues(arg1::Vec{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::InsertMode)
    err = ccall((:VecSetValues,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Ptr{Int64},Ptr{Float32},InsertMode),arg1,arg2,arg3,arg4,arg5)
    return err
end

function VecGetValues(arg1::Vec{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecGetValues,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Ptr{Int64},Ptr{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function VecAssemblyBegin(arg1::Vec{Float32})
    err = ccall((:VecAssemblyBegin,petscRealSingle),PetscErrorCode,(Vec{Float32},),arg1)
    return err
end

function VecAssemblyEnd(arg1::Vec{Float32})
    err = ccall((:VecAssemblyEnd,petscRealSingle),PetscErrorCode,(Vec{Float32},),arg1)
    return err
end

function VecStashSetInitialSize(arg1::Vec{Float32},arg2::Integer,arg3::Integer)
    err = ccall((:VecStashSetInitialSize,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Int64),arg1,arg2,arg3)
    return err
end

function VecStashView(arg1::Vec{Float32},arg2::PetscViewer{Float32})
    err = ccall((:VecStashView,petscRealSingle),PetscErrorCode,(Vec{Float32},PetscViewer{Float32}),arg1,arg2)
    return err
end

#= skipping function with undefined symbols:
 function VecStashViewFromOptions(arg1::Vec{Float32},arg2::PetscObject,arg3::Union{ByteString,Symbol})
    ccall((:VecStashViewFromOptions,petscRealSingle),PetscErrorCode,(Vec{Float32},PetscObject,Cstring),arg1,arg2,arg3)
end
=#
function VecStashGetInfo(arg1::Vec{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:VecStashGetInfo,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function VecGetBlockSize(arg1::Vec{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:VecGetBlockSize,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function VecSetValuesBlocked(arg1::Vec{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::InsertMode)
    err = ccall((:VecSetValuesBlocked,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Ptr{Int64},Ptr{Float32},InsertMode),arg1,arg2,arg3,arg4,arg5)
    return err
end

function VecSetType(arg1::Vec{Float32},arg2::VecType)
    err = ccall((:VecSetType,petscRealSingle),PetscErrorCode,(Vec{Float32},Cstring),arg1,arg2)
    return err
end

function VecGetType(arg1::Vec{Float32},arg2::Union{Ptr{VecType},StridedArray{VecType},Ptr{VecType},Ref{VecType}})
    (arg2_,tmp) = symbol_get_before(arg2)
    err = ccall((:VecGetType,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{Ptr{UInt8}}),arg1,arg2_)
    symbol_get_after(arg2_,arg2)
    return err
end

function VecRegister(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:VecRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function VecScatterCreate(arg1::Vec{Float32},arg2::IS{Float32},arg3::Vec{Float32},arg4::IS{Float32},arg5::Union{Ptr{VecScatter{Float32}},StridedArray{VecScatter{Float32}},Ptr{VecScatter{Float32}},Ref{VecScatter{Float32}}})
    err = ccall((:VecScatterCreate,petscRealSingle),PetscErrorCode,(Vec{Float32},IS{Float32},Vec{Float32},IS{Float32},Ptr{VecScatter{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function VecScatterCreateEmpty(arg1::MPI_Comm,arg2::Union{Ptr{VecScatter{Float32}},StridedArray{VecScatter{Float32}},Ptr{VecScatter{Float32}},Ref{VecScatter{Float32}}})
    err = ccall((:VecScatterCreateEmpty,petscRealSingle),PetscErrorCode,(comm_type,Ptr{VecScatter{Float32}}),arg1,arg2)
    return err
end

function VecScatterCreateLocal(arg1::VecScatter{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Integer,arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg9::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg10::Integer)
    err = ccall((:VecScatterCreateLocal,petscRealSingle),PetscErrorCode,(VecScatter{Float32},Int64,Ptr{Int64},Ptr{Int64},Ptr{Int64},Int64,Ptr{Int64},Ptr{Int64},Ptr{Int64},Int64),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function VecScatterBegin(arg1::VecScatter{Float32},arg2::Vec{Float32},arg3::Vec{Float32},arg4::InsertMode,arg5::ScatterMode)
    err = ccall((:VecScatterBegin,petscRealSingle),PetscErrorCode,(VecScatter{Float32},Vec{Float32},Vec{Float32},InsertMode,ScatterMode),arg1,arg2,arg3,arg4,arg5)
    return err
end

function VecScatterEnd(arg1::VecScatter{Float32},arg2::Vec{Float32},arg3::Vec{Float32},arg4::InsertMode,arg5::ScatterMode)
    err = ccall((:VecScatterEnd,petscRealSingle),PetscErrorCode,(VecScatter{Float32},Vec{Float32},Vec{Float32},InsertMode,ScatterMode),arg1,arg2,arg3,arg4,arg5)
    return err
end

function VecScatterDestroy(arg1::Union{Ptr{VecScatter{Float32}},StridedArray{VecScatter{Float32}},Ptr{VecScatter{Float32}},Ref{VecScatter{Float32}}})
    err = ccall((:VecScatterDestroy,petscRealSingle),PetscErrorCode,(Ptr{VecScatter{Float32}},),arg1)
    return err
end

function VecScatterCopy(arg1::VecScatter{Float32},arg2::Union{Ptr{VecScatter{Float32}},StridedArray{VecScatter{Float32}},Ptr{VecScatter{Float32}},Ref{VecScatter{Float32}}})
    err = ccall((:VecScatterCopy,petscRealSingle),PetscErrorCode,(VecScatter{Float32},Ptr{VecScatter{Float32}}),arg1,arg2)
    return err
end

function VecScatterView(arg1::VecScatter{Float32},arg2::PetscViewer{Float32})
    err = ccall((:VecScatterView,petscRealSingle),PetscErrorCode,(VecScatter{Float32},PetscViewer{Float32}),arg1,arg2)
    return err
end

function VecScatterGetMerged(arg1::VecScatter{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:VecScatterGetMerged,petscRealSingle),PetscErrorCode,(VecScatter{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function VecGetArray4d(arg1::Vec{Float32},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Integer,arg9::Integer,arg10::Union{Ptr{Ptr{Ptr{Ptr{Ptr{Float32}}}}},StridedArray{Ptr{Ptr{Ptr{Ptr{Float32}}}}},Ptr{Ptr{Ptr{Ptr{Ptr{Float32}}}}},Ref{Ptr{Ptr{Ptr{Ptr{Float32}}}}}})
    err = ccall((:VecGetArray4d,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Ptr{Ptr{Ptr{Ptr{Float32}}}}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function VecRestoreArray4d(arg1::Vec{Float32},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Integer,arg9::Integer,arg10::Union{Ptr{Ptr{Ptr{Ptr{Ptr{Float32}}}}},StridedArray{Ptr{Ptr{Ptr{Ptr{Float32}}}}},Ptr{Ptr{Ptr{Ptr{Ptr{Float32}}}}},Ref{Ptr{Ptr{Ptr{Ptr{Float32}}}}}})
    err = ccall((:VecRestoreArray4d,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Ptr{Ptr{Ptr{Ptr{Float32}}}}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function VecGetArray3d(arg1::Vec{Float32},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Union{Ptr{Ptr{Ptr{Ptr{Float32}}}},StridedArray{Ptr{Ptr{Ptr{Float32}}}},Ptr{Ptr{Ptr{Ptr{Float32}}}},Ref{Ptr{Ptr{Ptr{Float32}}}}})
    err = ccall((:VecGetArray3d,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Ptr{Ptr{Ptr{Float32}}}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function VecRestoreArray3d(arg1::Vec{Float32},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Union{Ptr{Ptr{Ptr{Ptr{Float32}}}},StridedArray{Ptr{Ptr{Ptr{Float32}}}},Ptr{Ptr{Ptr{Ptr{Float32}}}},Ref{Ptr{Ptr{Ptr{Float32}}}}})
    err = ccall((:VecRestoreArray3d,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Ptr{Ptr{Ptr{Float32}}}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function VecGetArray2d(arg1::Vec{Float32},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Ptr{Ptr{Float32}}},StridedArray{Ptr{Ptr{Float32}}},Ptr{Ptr{Ptr{Float32}}},Ref{Ptr{Ptr{Float32}}}})
    err = ccall((:VecGetArray2d,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Int64,Int64,Int64,Ptr{Ptr{Ptr{Float32}}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function VecRestoreArray2d(arg1::Vec{Float32},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Ptr{Ptr{Float32}}},StridedArray{Ptr{Ptr{Float32}}},Ptr{Ptr{Ptr{Float32}}},Ref{Ptr{Ptr{Float32}}}})
    err = ccall((:VecRestoreArray2d,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Int64,Int64,Int64,Ptr{Ptr{Ptr{Float32}}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function VecGetArray1d(arg1::Vec{Float32},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:VecGetArray1d,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Int64,Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function VecRestoreArray1d(arg1::Vec{Float32},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:VecRestoreArray1d,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Int64,Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function VecGetArray4dRead(arg1::Vec{Float32},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Integer,arg9::Integer,arg10::Union{Ptr{Ptr{Ptr{Ptr{Ptr{Float32}}}}},StridedArray{Ptr{Ptr{Ptr{Ptr{Float32}}}}},Ptr{Ptr{Ptr{Ptr{Ptr{Float32}}}}},Ref{Ptr{Ptr{Ptr{Ptr{Float32}}}}}})
    err = ccall((:VecGetArray4dRead,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Ptr{Ptr{Ptr{Ptr{Float32}}}}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function VecRestoreArray4dRead(arg1::Vec{Float32},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Integer,arg9::Integer,arg10::Union{Ptr{Ptr{Ptr{Ptr{Ptr{Float32}}}}},StridedArray{Ptr{Ptr{Ptr{Ptr{Float32}}}}},Ptr{Ptr{Ptr{Ptr{Ptr{Float32}}}}},Ref{Ptr{Ptr{Ptr{Ptr{Float32}}}}}})
    err = ccall((:VecRestoreArray4dRead,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Ptr{Ptr{Ptr{Ptr{Float32}}}}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function VecGetArray3dRead(arg1::Vec{Float32},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Union{Ptr{Ptr{Ptr{Ptr{Float32}}}},StridedArray{Ptr{Ptr{Ptr{Float32}}}},Ptr{Ptr{Ptr{Ptr{Float32}}}},Ref{Ptr{Ptr{Ptr{Float32}}}}})
    err = ccall((:VecGetArray3dRead,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Ptr{Ptr{Ptr{Float32}}}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function VecRestoreArray3dRead(arg1::Vec{Float32},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Union{Ptr{Ptr{Ptr{Ptr{Float32}}}},StridedArray{Ptr{Ptr{Ptr{Float32}}}},Ptr{Ptr{Ptr{Ptr{Float32}}}},Ref{Ptr{Ptr{Ptr{Float32}}}}})
    err = ccall((:VecRestoreArray3dRead,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Ptr{Ptr{Ptr{Float32}}}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function VecGetArray2dRead(arg1::Vec{Float32},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Ptr{Ptr{Float32}}},StridedArray{Ptr{Ptr{Float32}}},Ptr{Ptr{Ptr{Float32}}},Ref{Ptr{Ptr{Float32}}}})
    err = ccall((:VecGetArray2dRead,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Int64,Int64,Int64,Ptr{Ptr{Ptr{Float32}}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function VecRestoreArray2dRead(arg1::Vec{Float32},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Ptr{Ptr{Float32}}},StridedArray{Ptr{Ptr{Float32}}},Ptr{Ptr{Ptr{Float32}}},Ref{Ptr{Ptr{Float32}}}})
    err = ccall((:VecRestoreArray2dRead,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Int64,Int64,Int64,Ptr{Ptr{Ptr{Float32}}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function VecGetArray1dRead(arg1::Vec{Float32},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:VecGetArray1dRead,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Int64,Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function VecRestoreArray1dRead(arg1::Vec{Float32},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:VecRestoreArray1dRead,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Int64,Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function VecPlaceArray(arg1::Vec{Float32},arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecPlaceArray,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{Float32}),arg1,arg2)
    return err
end

function VecResetArray(arg1::Vec{Float32})
    err = ccall((:VecResetArray,petscRealSingle),PetscErrorCode,(Vec{Float32},),arg1)
    return err
end

function VecReplaceArray(arg1::Vec{Float32},arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecReplaceArray,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{Float32}),arg1,arg2)
    return err
end

function VecGetArrays(arg1::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg2::Integer,arg3::Union{Ptr{Ptr{Ptr{Float32}}},StridedArray{Ptr{Ptr{Float32}}},Ptr{Ptr{Ptr{Float32}}},Ref{Ptr{Ptr{Float32}}}})
    err = ccall((:VecGetArrays,petscRealSingle),PetscErrorCode,(Ptr{Vec{Float32}},Int64,Ptr{Ptr{Ptr{Float32}}}),arg1,arg2,arg3)
    return err
end

function VecRestoreArrays(arg1::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg2::Integer,arg3::Union{Ptr{Ptr{Ptr{Float32}}},StridedArray{Ptr{Ptr{Float32}}},Ptr{Ptr{Ptr{Float32}}},Ref{Ptr{Ptr{Float32}}}})
    err = ccall((:VecRestoreArrays,petscRealSingle),PetscErrorCode,(Ptr{Vec{Float32}},Int64,Ptr{Ptr{Ptr{Float32}}}),arg1,arg2,arg3)
    return err
end

function VecView(arg1::Vec{Float32},arg2::PetscViewer{Float32})
    err = ccall((:VecView,petscRealSingle),PetscErrorCode,(Vec{Float32},PetscViewer{Float32}),arg1,arg2)
    return err
end

function VecEqual(arg1::Vec{Float32},arg2::Vec{Float32},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:VecEqual,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32},Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function VecLoad(arg1::Vec{Float32},arg2::PetscViewer{Float32})
    err = ccall((:VecLoad,petscRealSingle),PetscErrorCode,(Vec{Float32},PetscViewer{Float32}),arg1,arg2)
    return err
end

function VecGetSize(arg1::Vec{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:VecGetSize,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function VecGetLocalSize(arg1::Vec{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:VecGetLocalSize,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function VecGetOwnershipRange(arg1::Vec{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:VecGetOwnershipRange,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function VecGetOwnershipRanges(arg1::Vec{Float32},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:VecGetOwnershipRanges,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function VecSetLocalToGlobalMapping(arg1::Vec{Float32},arg2::ISLocalToGlobalMapping{Float32})
    err = ccall((:VecSetLocalToGlobalMapping,petscRealSingle),PetscErrorCode,(Vec{Float32},ISLocalToGlobalMapping{Float32}),arg1,arg2)
    return err
end

function VecSetValuesLocal(arg1::Vec{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::InsertMode)
    err = ccall((:VecSetValuesLocal,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Ptr{Int64},Ptr{Float32},InsertMode),arg1,arg2,arg3,arg4,arg5)
    return err
end

function VecGetLocalToGlobalMapping(arg1::Vec{Float32},arg2::Union{Ptr{ISLocalToGlobalMapping{Float32}},StridedArray{ISLocalToGlobalMapping{Float32}},Ptr{ISLocalToGlobalMapping{Float32}},Ref{ISLocalToGlobalMapping{Float32}}})
    err = ccall((:VecGetLocalToGlobalMapping,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{ISLocalToGlobalMapping{Float32}}),arg1,arg2)
    return err
end

function VecDotBegin(arg1::Vec{Float32},arg2::Vec{Float32},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecDotBegin,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32},Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function VecDotEnd(arg1::Vec{Float32},arg2::Vec{Float32},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecDotEnd,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32},Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function VecTDotBegin(arg1::Vec{Float32},arg2::Vec{Float32},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecTDotBegin,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32},Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function VecTDotEnd(arg1::Vec{Float32},arg2::Vec{Float32},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecTDotEnd,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32},Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function VecNormBegin(arg1::Vec{Float32},arg2::NormType,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecNormBegin,petscRealSingle),PetscErrorCode,(Vec{Float32},NormType,Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function VecNormEnd(arg1::Vec{Float32},arg2::NormType,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecNormEnd,petscRealSingle),PetscErrorCode,(Vec{Float32},NormType,Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function VecMDotBegin(arg1::Vec{Float32},arg2::Integer,arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecMDotBegin,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Ptr{Vec{Float32}},Ptr{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function VecMDotEnd(arg1::Vec{Float32},arg2::Integer,arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecMDotEnd,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Ptr{Vec{Float32}},Ptr{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function VecMTDotBegin(arg1::Vec{Float32},arg2::Integer,arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecMTDotBegin,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Ptr{Vec{Float32}},Ptr{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function VecMTDotEnd(arg1::Vec{Float32},arg2::Integer,arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecMTDotEnd,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Ptr{Vec{Float32}},Ptr{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function PetscCommSplitReductionBegin(arg0::Type{Float32},arg1::MPI_Comm)
    err = ccall((:PetscCommSplitReductionBegin,petscRealSingle),PetscErrorCode,(comm_type,),arg1)
    return err
end

function VecSetOption(arg1::Vec{Float32},arg2::VecOption,arg3::PetscBool)
    err = ccall((:VecSetOption,petscRealSingle),PetscErrorCode,(Vec{Float32},VecOption,PetscBool),arg1,arg2,arg3)
    return err
end

function VecGetArray(arg1::Vec{Float32},arg2::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:VecGetArray,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{Ptr{Float32}}),arg1,arg2)
    return err
end

function VecGetArrayRead(arg1::Vec{Float32},arg2::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:VecGetArrayRead,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{Ptr{Float32}}),arg1,arg2)
    return err
end

function VecRestoreArray(arg1::Vec{Float32},arg2::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:VecRestoreArray,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{Ptr{Float32}}),arg1,arg2)
    return err
end

function VecRestoreArrayRead(arg1::Vec{Float32},arg2::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:VecRestoreArrayRead,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{Ptr{Float32}}),arg1,arg2)
    return err
end

function VecGetLocalVector(arg1::Vec{Float32},arg2::Vec{Float32})
    err = ccall((:VecGetLocalVector,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32}),arg1,arg2)
    return err
end

function VecRestoreLocalVector(arg1::Vec{Float32},arg2::Vec{Float32})
    err = ccall((:VecRestoreLocalVector,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32}),arg1,arg2)
    return err
end

function VecGetLocalVectorRead(arg1::Vec{Float32},arg2::Vec{Float32})
    err = ccall((:VecGetLocalVectorRead,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32}),arg1,arg2)
    return err
end

function VecRestoreLocalVectorRead(arg1::Vec{Float32},arg2::Vec{Float32})
    err = ccall((:VecRestoreLocalVectorRead,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32}),arg1,arg2)
    return err
end

function VecContourScale(arg1::Vec{Float32},arg2::Float32,arg3::Float32)
    err = ccall((:VecContourScale,petscRealSingle),PetscErrorCode,(Vec{Float32},Float32,Float32),arg1,arg2,arg3)
    return err
end

function VecSetOperation(arg1::Vec{Float32},arg2::VecOperation,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:VecSetOperation,petscRealSingle),PetscErrorCode,(Vec{Float32},VecOperation,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function VecMPISetGhost(arg1::Vec{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:VecMPISetGhost,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function VecCreateGhost(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:VecCreateGhost,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Ptr{Int64},Ptr{Vec{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function VecCreateGhostWithArray(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:VecCreateGhostWithArray,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Ptr{Int64},Ptr{Float32},Ptr{Vec{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function VecCreateGhostBlock(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:VecCreateGhostBlock,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Vec{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function VecCreateGhostBlockWithArray(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg8::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:VecCreateGhostBlockWithArray,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Float32},Ptr{Vec{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function VecGhostGetLocalForm(arg1::Vec{Float32},arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:VecGhostGetLocalForm,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{Vec{Float32}}),arg1,arg2)
    return err
end

function VecGhostRestoreLocalForm(arg1::Vec{Float32},arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:VecGhostRestoreLocalForm,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{Vec{Float32}}),arg1,arg2)
    return err
end

function VecGhostIsLocalForm(arg1::Vec{Float32},arg2::Vec{Float32},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:VecGhostIsLocalForm,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32},Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function VecGhostUpdateBegin(arg1::Vec{Float32},arg2::InsertMode,arg3::ScatterMode)
    err = ccall((:VecGhostUpdateBegin,petscRealSingle),PetscErrorCode,(Vec{Float32},InsertMode,ScatterMode),arg1,arg2,arg3)
    return err
end

function VecGhostUpdateEnd(arg1::Vec{Float32},arg2::InsertMode,arg3::ScatterMode)
    err = ccall((:VecGhostUpdateEnd,petscRealSingle),PetscErrorCode,(Vec{Float32},InsertMode,ScatterMode),arg1,arg2,arg3)
    return err
end

function VecConjugate(arg1::Vec{Float32})
    err = ccall((:VecConjugate,petscRealSingle),PetscErrorCode,(Vec{Float32},),arg1)
    return err
end

function VecScatterCreateToAll(arg1::Vec{Float32},arg2::Union{Ptr{VecScatter{Float32}},StridedArray{VecScatter{Float32}},Ptr{VecScatter{Float32}},Ref{VecScatter{Float32}}},arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:VecScatterCreateToAll,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{VecScatter{Float32}},Ptr{Vec{Float32}}),arg1,arg2,arg3)
    return err
end

function VecScatterCreateToZero(arg1::Vec{Float32},arg2::Union{Ptr{VecScatter{Float32}},StridedArray{VecScatter{Float32}},Ptr{VecScatter{Float32}},Ref{VecScatter{Float32}}},arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:VecScatterCreateToZero,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{VecScatter{Float32}},Ptr{Vec{Float32}}),arg1,arg2,arg3)
    return err
end

function ISComplementVec(arg1::IS{Float32},arg2::Vec{Float32},arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:ISComplementVec,petscRealSingle),PetscErrorCode,(IS{Float32},Vec{Float32},Ptr{IS{Float32}}),arg1,arg2,arg3)
    return err
end

function VecPow(arg1::Vec{Float32},arg2::Float32)
    err = ccall((:VecPow,petscRealSingle),PetscErrorCode,(Vec{Float32},Float32),arg1,arg2)
    return err
end

function VecMedian(arg1::Vec{Float32},arg2::Vec{Float32},arg3::Vec{Float32},arg4::Vec{Float32})
    err = ccall((:VecMedian,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function VecWhichBetween(arg1::Vec{Float32},arg2::Vec{Float32},arg3::Vec{Float32},arg4::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:VecWhichBetween,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32},Vec{Float32},Ptr{IS{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function VecWhichBetweenOrEqual(arg1::Vec{Float32},arg2::Vec{Float32},arg3::Vec{Float32},arg4::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:VecWhichBetweenOrEqual,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32},Vec{Float32},Ptr{IS{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function VecWhichGreaterThan(arg1::Vec{Float32},arg2::Vec{Float32},arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:VecWhichGreaterThan,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32},Ptr{IS{Float32}}),arg1,arg2,arg3)
    return err
end

function VecWhichLessThan(arg1::Vec{Float32},arg2::Vec{Float32},arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:VecWhichLessThan,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32},Ptr{IS{Float32}}),arg1,arg2,arg3)
    return err
end

function VecWhichEqual(arg1::Vec{Float32},arg2::Vec{Float32},arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:VecWhichEqual,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32},Ptr{IS{Float32}}),arg1,arg2,arg3)
    return err
end

function VecISAXPY(arg1::Vec{Float32},arg2::IS{Float32},arg3::Float32,arg4::Vec{Float32})
    err = ccall((:VecISAXPY,petscRealSingle),PetscErrorCode,(Vec{Float32},IS{Float32},Float32,Vec{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function VecISSet(arg1::Vec{Float32},arg2::IS{Float32},arg3::Float32)
    err = ccall((:VecISSet,petscRealSingle),PetscErrorCode,(Vec{Float32},IS{Float32},Float32),arg1,arg2,arg3)
    return err
end

function VecBoundGradientProjection(arg1::Vec{Float32},arg2::Vec{Float32},arg3::Vec{Float32},arg4::Vec{Float32},arg5::Vec{Float32})
    err = ccall((:VecBoundGradientProjection,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32},Vec{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function VecStepBoundInfo(arg1::Vec{Float32},arg2::Vec{Float32},arg3::Vec{Float32},arg4::Vec{Float32},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecStepBoundInfo,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32},Vec{Float32},Vec{Float32},Ptr{Float32},Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function VecStepMax(arg1::Vec{Float32},arg2::Vec{Float32},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecStepMax,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32},Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function VecStepMaxBounded(arg1::Vec{Float32},arg2::Vec{Float32},arg3::Vec{Float32},arg4::Vec{Float32},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:VecStepMaxBounded,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32},Vec{Float32},Vec{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscViewerMathematicaGetVector(arg1::PetscViewer{Float32},arg2::Vec{Float32})
    err = ccall((:PetscViewerMathematicaGetVector,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Vec{Float32}),arg1,arg2)
    return err
end

function PetscViewerMathematicaPutVector(arg1::PetscViewer{Float32},arg2::Vec{Float32})
    err = ccall((:PetscViewerMathematicaPutVector,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Vec{Float32}),arg1,arg2)
    return err
end

#= skipping function with undefined symbols:
 function VecsDestroy(arg0::Type{Float32},arg1::Vecs)
    ccall((:VecsDestroy,petscRealSingle),PetscErrorCode,(Vecs,),arg1)
end
=#
#= skipping function with undefined symbols:
 function VecsCreateSeq(arg0::Type{Float32},arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Vecs},StridedArray{Vecs},Ptr{Vecs},Ref{Vecs}})
    ccall((:VecsCreateSeq,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Ptr{Vecs}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function VecsCreateSeqWithArray(arg0::Type{Float32},arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Vecs},StridedArray{Vecs},Ptr{Vecs},Ref{Vecs}})
    ccall((:VecsCreateSeqWithArray,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Ptr{Float32},Ptr{Vecs}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function VecsDuplicate(arg0::Type{Float32},arg1::Vecs,arg2::Union{Ptr{Vecs},StridedArray{Vecs},Ptr{Vecs},Ref{Vecs}})
    ccall((:VecsDuplicate,petscRealSingle),PetscErrorCode,(Vecs,Ptr{Vecs}),arg1,arg2)
end
=#
function VecNestGetSubVecs(arg1::Vec{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Vec{Float32}}},StridedArray{Ptr{Vec{Float32}}},Ptr{Ptr{Vec{Float32}}},Ref{Ptr{Vec{Float32}}}})
    err = ccall((:VecNestGetSubVecs,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{Int64},Ptr{Ptr{Vec{Float32}}}),arg1,arg2,arg3)
    return err
end

function VecNestGetSubVec(arg1::Vec{Float32},arg2::Integer,arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:VecNestGetSubVec,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Ptr{Vec{Float32}}),arg1,arg2,arg3)
    return err
end

function VecNestSetSubVecs(arg1::Vec{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:VecNestSetSubVecs,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Ptr{Int64},Ptr{Vec{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function VecNestSetSubVec(arg1::Vec{Float32},arg2::Integer,arg3::Vec{Float32})
    err = ccall((:VecNestSetSubVec,petscRealSingle),PetscErrorCode,(Vec{Float32},Int64,Vec{Float32}),arg1,arg2,arg3)
    return err
end

function VecCreateNest(arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg4::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg5::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:VecCreateNest,petscRealSingle),PetscErrorCode,(comm_type,Int64,Ptr{IS{Float32}},Ptr{Vec{Float32}},Ptr{Vec{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function VecNestGetSize(arg1::Vec{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:VecNestGetSize,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function PetscOptionsGetVec(arg1::Union{ByteString,Symbol},arg2::Union{ByteString,Symbol},arg3::Vec{Float32},arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PetscOptionsGetVec,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Vec{Float32},Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function VecChop(arg1::Vec{Float32},arg2::Float32)
    err = ccall((:VecChop,petscRealSingle),PetscErrorCode,(Vec{Float32},Float32),arg1,arg2)
    return err
end

function VecGetLayout(arg1::Vec{Float32},arg2::Union{Ptr{PetscLayout{Float32}},StridedArray{PetscLayout{Float32}},Ptr{PetscLayout{Float32}},Ref{PetscLayout{Float32}}})
    err = ccall((:VecGetLayout,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{PetscLayout{Float32}{Float32}}),arg1,arg2)
    return err
end

function VecSetLayout(arg1::Vec{Float32},arg2::PetscLayout{Float32})
    err = ccall((:VecSetLayout,petscRealSingle),PetscErrorCode,(Vec{Float32},PetscLayout{Float32}),arg1,arg2)
    return err
end

#= skipping function with undefined symbols:
 function PetscSectionVecView(arg1::PetscSection,arg2::Vec{Float32},arg3::PetscViewer{Float32})
    ccall((:PetscSectionVecView,petscRealSingle),PetscErrorCode,(PetscSection,Vec{Float32},PetscViewer{Float32}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function VecGetValuesSection(arg1::Vec{Float32},arg2::PetscSection,arg3::Integer,arg4::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    ccall((:VecGetValuesSection,petscRealSingle),PetscErrorCode,(Vec{Float32},PetscSection,Int64,Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function VecSetValuesSection(arg1::Vec{Float32},arg2::PetscSection,arg3::Integer,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::InsertMode)
    ccall((:VecSetValuesSection,petscRealSingle),PetscErrorCode,(Vec{Float32},PetscSection,Int64,Ptr{Float32},InsertMode),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function PetscSectionVecNorm(arg1::PetscSection,arg2::PetscSection,arg3::Vec{Float32},arg4::NormType,arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:PetscSectionVecNorm,petscRealSingle),PetscErrorCode,(PetscSection,PetscSection,Vec{Float32},NormType,Ptr{Float32}),arg1,arg2,arg3,arg4,arg5)
end
=#
function MatGetFactor(arg1::Mat{Float32},arg2::Union{ByteString,Symbol},arg3::MatFactorType,arg4::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatGetFactor,petscRealSingle),PetscErrorCode,(Mat{Float32},Cstring,MatFactorType,Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function MatGetFactorAvailable(arg1::Mat{Float32},arg2::Union{ByteString,Symbol},arg3::MatFactorType,arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatGetFactorAvailable,petscRealSingle),PetscErrorCode,(Mat{Float32},Cstring,MatFactorType,Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function MatFactorGetSolverPackage(arg1::Mat{Float32},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:MatFactorGetSolverPackage,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function MatGetFactorType(arg1::Mat{Float32},arg2::Union{Ptr{MatFactorType},StridedArray{MatFactorType},Ptr{MatFactorType},Ref{MatFactorType}})
    err = ccall((:MatGetFactorType,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{MatFactorType}),arg1,arg2)
    return err
end

function MatSolverPackageRegister(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::MatType,arg3::MatFactorType,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatSolverPackageRegister,petscRealSingle),PetscErrorCode,(Cstring,Cstring,MatFactorType,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function MatSolverPackageGet(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::MatType,arg3::MatFactorType,arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg6::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:MatSolverPackageGet,petscRealSingle),PetscErrorCode,(Cstring,Cstring,MatFactorType,Ptr{PetscBool},Ptr{PetscBool},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatInitializePackage(arg0::Type{Float32})
    err = ccall((:MatInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function MatCreate(arg1::MPI_Comm,arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{Mat{Float32}}),arg1,arg2)
    return err
end

function MatSetSizes(arg1::Mat{Float32},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer)
    err = ccall((:MatSetSizes,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Int64,Int64,Int64),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatSetType(arg1::Mat{Float32},arg2::MatType)
    err = ccall((:MatSetType,petscRealSingle),PetscErrorCode,(Mat{Float32},Cstring),arg1,arg2)
    return err
end

function MatSetFromOptions(arg1::Mat{Float32})
    err = ccall((:MatSetFromOptions,petscRealSingle),PetscErrorCode,(Mat{Float32},),arg1)
    return err
end

function MatRegisterBaseName(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{ByteString,Symbol},arg3::Union{ByteString,Symbol})
    err = ccall((:MatRegisterBaseName,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Cstring),arg1,arg2,arg3)
    return err
end

function MatSetOptionsPrefix(arg1::Mat{Float32},arg2::Union{ByteString,Symbol})
    err = ccall((:MatSetOptionsPrefix,petscRealSingle),PetscErrorCode,(Mat{Float32},Cstring),arg1,arg2)
    return err
end

function MatAppendOptionsPrefix(arg1::Mat{Float32},arg2::Union{ByteString,Symbol})
    err = ccall((:MatAppendOptionsPrefix,petscRealSingle),PetscErrorCode,(Mat{Float32},Cstring),arg1,arg2)
    return err
end

function MatGetOptionsPrefix(arg1::Mat{Float32},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:MatGetOptionsPrefix,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function MatSetErrorIfFPE(arg1::Mat{Float32},arg2::PetscBool)
    err = ccall((:MatSetErrorIfFPE,petscRealSingle),PetscErrorCode,(Mat{Float32},PetscBool),arg1,arg2)
    return err
end

function MatCreateSeqDense(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateSeqDense,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Ptr{Float32},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatCreateDense(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateDense,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Ptr{Float32},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatCreateSeqAIJ(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateSeqAIJ,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Ptr{Int64},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatCreateAIJ(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Integer,arg9::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg10::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateAIJ,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Int64,Ptr{Int64},Int64,Ptr{Int64},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function MatCreateMPIAIJWithArrays(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg9::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateMPIAIJWithArrays,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Int64},Ptr{Float32},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
    return err
end

function MatCreateMPIAIJWithSplitArrays(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg9::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg10::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg11::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg12::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateMPIAIJWithSplitArrays,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Int64},Ptr{Float32},Ptr{Int64},Ptr{Int64},Ptr{Float32},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12)
    return err
end

function MatCreateSeqBAIJ(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateSeqBAIJ,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatCreateBAIJ(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg9::Integer,arg10::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg11::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateBAIJ,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Int64},Int64,Ptr{Int64},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11)
    return err
end

function MatCreateMPIBAIJWithArrays(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg9::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg10::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateMPIBAIJWithArrays,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Int64},Ptr{Float32},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function MatCreateMPIAdj(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateMPIAdj,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatCreateSeqSBAIJ(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateSeqSBAIJ,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatCreateSBAIJ(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg9::Integer,arg10::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg11::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateSBAIJ,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Int64},Int64,Ptr{Int64},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11)
    return err
end

function MatCreateMPISBAIJWithArrays(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg9::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg10::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateMPISBAIJWithArrays,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Int64},Ptr{Float32},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function MatSeqSBAIJSetPreallocationCSR(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:MatSeqSBAIJSetPreallocationCSR,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Int64},Ptr{Int64},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatMPISBAIJSetPreallocationCSR(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:MatMPISBAIJSetPreallocationCSR,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Int64},Ptr{Int64},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatXAIJSetPreallocation(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatXAIJSetPreallocation,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatCreateShell(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg7::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateShell,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Ptr{Void},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatCreateNormal(arg1::Mat{Float32},arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateNormal,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Mat{Float32}}),arg1,arg2)
    return err
end

function MatCreateLRC(arg1::Mat{Float32},arg2::Mat{Float32},arg3::Mat{Float32},arg4::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateLRC,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},Mat{Float32},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function MatCreateIS(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::ISLocalToGlobalMapping{Float32},arg8::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateIS,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Int64,ISLocalToGlobalMapping{Float32},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function MatCreateSeqAIJCRL(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateSeqAIJCRL,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Ptr{Int64},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatCreateMPIAIJCRL(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Integer,arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateMPIAIJCRL,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Ptr{Int64},Int64,Ptr{Int64},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function MatCreateSeqBSTRM(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateSeqBSTRM,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatCreateMPIBSTRM(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg9::Integer,arg10::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg11::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateMPIBSTRM,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Int64},Int64,Ptr{Int64},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11)
    return err
end

function MatCreateSeqSBSTRM(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateSeqSBSTRM,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatCreateMPISBSTRM(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg9::Integer,arg10::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg11::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateMPISBSTRM,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Int64},Int64,Ptr{Int64},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11)
    return err
end

function MatCreateScatter(arg1::MPI_Comm,arg2::VecScatter{Float32},arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateScatter,petscRealSingle),PetscErrorCode,(comm_type,VecScatter{Float32},Ptr{Mat{Float32}}),arg1,arg2,arg3)
    return err
end

function MatScatterSetVecScatter(arg1::Mat{Float32},arg2::VecScatter{Float32})
    err = ccall((:MatScatterSetVecScatter,petscRealSingle),PetscErrorCode,(Mat{Float32},VecScatter{Float32}),arg1,arg2)
    return err
end

function MatScatterGetVecScatter(arg1::Mat{Float32},arg2::Union{Ptr{VecScatter{Float32}},StridedArray{VecScatter{Float32}},Ptr{VecScatter{Float32}},Ref{VecScatter{Float32}}})
    err = ccall((:MatScatterGetVecScatter,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{VecScatter{Float32}}),arg1,arg2)
    return err
end

function MatCreateBlockMat(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateBlockMat,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatCompositeAddMat(arg1::Mat{Float32},arg2::Mat{Float32})
    err = ccall((:MatCompositeAddMat,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32}),arg1,arg2)
    return err
end

function MatCompositeMerge(arg1::Mat{Float32})
    err = ccall((:MatCompositeMerge,petscRealSingle),PetscErrorCode,(Mat{Float32},),arg1)
    return err
end

function MatCreateComposite(arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}},arg4::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateComposite,petscRealSingle),PetscErrorCode,(comm_type,Int64,Ptr{Mat{Float32}},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function MatCompositeSetType(arg1::Mat{Float32},arg2::MatCompositeType)
    err = ccall((:MatCompositeSetType,petscRealSingle),PetscErrorCode,(Mat{Float32},MatCompositeType),arg1,arg2)
    return err
end

function MatCreateFFT(arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::MatType,arg5::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateFFT,petscRealSingle),PetscErrorCode,(comm_type,Int64,Ptr{Int64},Cstring,Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatCreateSeqCUFFT(arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateSeqCUFFT,petscRealSingle),PetscErrorCode,(comm_type,Int64,Ptr{Int64},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function MatCreateTranspose(arg1::Mat{Float32},arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateTranspose,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Mat{Float32}}),arg1,arg2)
    return err
end

function MatCreateHermitianTranspose(arg1::Mat{Float32},arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateHermitianTranspose,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Mat{Float32}}),arg1,arg2)
    return err
end

function MatCreateSubMatrix(arg1::Mat{Float32},arg2::IS{Float32},arg3::IS{Float32},arg4::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateSubMatrix,petscRealSingle),PetscErrorCode,(Mat{Float32},IS{Float32},IS{Float32},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function MatSubMatrixUpdate(arg1::Mat{Float32},arg2::Mat{Float32},arg3::IS{Float32},arg4::IS{Float32})
    err = ccall((:MatSubMatrixUpdate,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},IS{Float32},IS{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function MatCreateLocalRef(arg1::Mat{Float32},arg2::IS{Float32},arg3::IS{Float32},arg4::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateLocalRef,petscRealSingle),PetscErrorCode,(Mat{Float32},IS{Float32},IS{Float32},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function MatPythonSetType(arg1::Mat{Float32},arg2::Union{ByteString,Symbol})
    err = ccall((:MatPythonSetType,petscRealSingle),PetscErrorCode,(Mat{Float32},Cstring),arg1,arg2)
    return err
end

function MatSetUp(arg1::Mat{Float32})
    err = ccall((:MatSetUp,petscRealSingle),PetscErrorCode,(Mat{Float32},),arg1)
    return err
end

function MatDestroy(arg1::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatDestroy,petscRealSingle),PetscErrorCode,(Ptr{Mat{Float32}},),arg1)
    return err
end

function MatGetNonzeroState(arg1::Mat{Float32},arg2::Union{Ptr{PetscObjectState},StridedArray{PetscObjectState},Ptr{PetscObjectState},Ref{PetscObjectState}})
    err = ccall((:MatGetNonzeroState,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{PetscObjectState}),arg1,arg2)
    return err
end

function MatConjugate(arg1::Mat{Float32})
    err = ccall((:MatConjugate,petscRealSingle),PetscErrorCode,(Mat{Float32},),arg1)
    return err
end

function MatRealPart(arg1::Mat{Float32})
    err = ccall((:MatRealPart,petscRealSingle),PetscErrorCode,(Mat{Float32},),arg1)
    return err
end

function MatImaginaryPart(arg1::Mat{Float32})
    err = ccall((:MatImaginaryPart,petscRealSingle),PetscErrorCode,(Mat{Float32},),arg1)
    return err
end

function MatGetDiagonalBlock(arg1::Mat{Float32},arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatGetDiagonalBlock,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Mat{Float32}}),arg1,arg2)
    return err
end

function MatGetTrace(arg1::Mat{Float32},arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:MatGetTrace,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Float32}),arg1,arg2)
    return err
end

function MatInvertBlockDiagonal(arg1::Mat{Float32},arg2::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:MatInvertBlockDiagonal,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Ptr{Float32}}),arg1,arg2)
    return err
end

function MatSetValues(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::InsertMode)
    err = ccall((:MatSetValues,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Int64},Int64,Ptr{Int64},Ptr{Float32},InsertMode),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatSetValuesBlocked(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::InsertMode)
    err = ccall((:MatSetValuesBlocked,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Int64},Int64,Ptr{Int64},Ptr{Float32},InsertMode),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatSetValuesRow(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:MatSetValuesRow,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function MatSetValuesRowLocal(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:MatSetValuesRowLocal,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function MatSetValuesBatch(arg1::Mat{Float32},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:MatSetValuesBatch,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Int64,Ptr{Int64},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5)
    return err
end

#= skipping function with undefined symbols:
 function MatSetRandom(arg1::Mat{Float32},arg2::PetscRandom)
    ccall((:MatSetRandom,petscRealSingle),PetscErrorCode,(Mat{Float32},PetscRandom),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatSetValuesStencil(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{MatStencil},StridedArray{MatStencil},Ptr{MatStencil},Ref{MatStencil}},arg4::Integer,arg5::Union{Ptr{MatStencil},StridedArray{MatStencil},Ptr{MatStencil},Ref{MatStencil}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::InsertMode)
    ccall((:MatSetValuesStencil,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{MatStencil},Int64,Ptr{MatStencil},Ptr{Float32},InsertMode),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
#= skipping function with undefined symbols:
 function MatSetValuesBlockedStencil(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{MatStencil},StridedArray{MatStencil},Ptr{MatStencil},Ref{MatStencil}},arg4::Integer,arg5::Union{Ptr{MatStencil},StridedArray{MatStencil},Ptr{MatStencil},Ref{MatStencil}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::InsertMode)
    ccall((:MatSetValuesBlockedStencil,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{MatStencil},Int64,Ptr{MatStencil},Ptr{Float32},InsertMode),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
function MatSetStencil(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Integer)
    err = ccall((:MatSetStencil,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Int64},Ptr{Int64},Int64),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatSetColoring(arg1::Mat{Float32},arg2::ISColoring{Float32})
    err = ccall((:MatSetColoring,petscRealSingle),PetscErrorCode,(Mat{Float32},ISColoring{Float32}),arg1,arg2)
    return err
end

function MatSetValuesAdifor(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatSetValuesAdifor,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function MatAssemblyBegin(arg1::Mat{Float32},arg2::MatAssemblyType)
    err = ccall((:MatAssemblyBegin,petscRealSingle),PetscErrorCode,(Mat{Float32},MatAssemblyType),arg1,arg2)
    return err
end

function MatAssemblyEnd(arg1::Mat{Float32},arg2::MatAssemblyType)
    err = ccall((:MatAssemblyEnd,petscRealSingle),PetscErrorCode,(Mat{Float32},MatAssemblyType),arg1,arg2)
    return err
end

function MatAssembled(arg1::Mat{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatAssembled,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function MatSetOption(arg1::Mat{Float32},arg2::MatOption,arg3::PetscBool)
    err = ccall((:MatSetOption,petscRealSingle),PetscErrorCode,(Mat{Float32},MatOption,PetscBool),arg1,arg2,arg3)
    return err
end

function MatGetOption(arg1::Mat{Float32},arg2::MatOption,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatGetOption,petscRealSingle),PetscErrorCode,(Mat{Float32},MatOption,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function MatGetType(arg1::Mat{Float32},arg2::Union{Ptr{MatType},StridedArray{MatType},Ptr{MatType},Ref{MatType}})
    (arg2_,tmp) = symbol_get_before(arg2)
    err = ccall((:MatGetType,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Ptr{UInt8}}),arg1,arg2_)
    symbol_get_after(arg2_,arg2)
    return err
end

function MatGetValues(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:MatGetValues,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Int64},Int64,Ptr{Int64},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatGetRow(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg5::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:MatGetRow,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatRestoreRow(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg5::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:MatRestoreRow,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatGetRowUpperTriangular(arg1::Mat{Float32})
    err = ccall((:MatGetRowUpperTriangular,petscRealSingle),PetscErrorCode,(Mat{Float32},),arg1)
    return err
end

function MatRestoreRowUpperTriangular(arg1::Mat{Float32})
    err = ccall((:MatRestoreRowUpperTriangular,petscRealSingle),PetscErrorCode,(Mat{Float32},),arg1)
    return err
end

function MatGetColumn(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg5::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:MatGetColumn,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatRestoreColumn(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg5::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:MatRestoreColumn,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatGetColumnVector(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Integer)
    err = ccall((:MatGetColumnVector,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Int64),arg1,arg2,arg3)
    return err
end

function MatSeqAIJGetArray(arg1::Mat{Float32},arg2::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:MatSeqAIJGetArray,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Ptr{Float32}}),arg1,arg2)
    return err
end

function MatSeqAIJRestoreArray(arg1::Mat{Float32},arg2::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:MatSeqAIJRestoreArray,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Ptr{Float32}}),arg1,arg2)
    return err
end

function MatSeqAIJGetMaxRowNonzeros(arg1::Mat{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatSeqAIJGetMaxRowNonzeros,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function MatSeqAIJSetValuesLocalFast(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::InsertMode)
    err = ccall((:MatSeqAIJSetValuesLocalFast,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Int64},Int64,Ptr{Int64},Ptr{Float32},InsertMode),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatDenseGetArray(arg1::Mat{Float32},arg2::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:MatDenseGetArray,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Ptr{Float32}}),arg1,arg2)
    return err
end

function MatDenseRestoreArray(arg1::Mat{Float32},arg2::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    err = ccall((:MatDenseRestoreArray,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Ptr{Float32}}),arg1,arg2)
    return err
end

function MatGetBlockSize(arg1::Mat{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatGetBlockSize,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function MatSetBlockSize(arg1::Mat{Float32},arg2::Integer)
    err = ccall((:MatSetBlockSize,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64),arg1,arg2)
    return err
end

function MatGetBlockSizes(arg1::Mat{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatGetBlockSizes,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function MatSetBlockSizes(arg1::Mat{Float32},arg2::Integer,arg3::Integer)
    err = ccall((:MatSetBlockSizes,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Int64),arg1,arg2,arg3)
    return err
end

function MatSetBlockSizesFromMats(arg1::Mat{Float32},arg2::Mat{Float32},arg3::Mat{Float32})
    err = ccall((:MatSetBlockSizesFromMats,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},Mat{Float32}),arg1,arg2,arg3)
    return err
end

function MatSetNThreads(arg1::Mat{Float32},arg2::Integer)
    err = ccall((:MatSetNThreads,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64),arg1,arg2)
    return err
end

function MatGetNThreads(arg1::Mat{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatGetNThreads,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function MatMult(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:MatMult,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function MatMultDiagonalBlock(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:MatMultDiagonalBlock,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function MatMultAdd(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Vec{Float32},arg4::Vec{Float32})
    err = ccall((:MatMultAdd,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function MatMultTranspose(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:MatMultTranspose,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function MatMultHermitianTranspose(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:MatMultHermitianTranspose,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function MatIsTranspose(arg1::Mat{Float32},arg2::Mat{Float32},arg3::Float32,arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatIsTranspose,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},Float32,Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function MatIsHermitianTranspose(arg1::Mat{Float32},arg2::Mat{Float32},arg3::Float32,arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatIsHermitianTranspose,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},Float32,Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function MatMultTransposeAdd(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Vec{Float32},arg4::Vec{Float32})
    err = ccall((:MatMultTransposeAdd,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function MatMultHermitianTransposeAdd(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Vec{Float32},arg4::Vec{Float32})
    err = ccall((:MatMultHermitianTransposeAdd,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function MatMultConstrained(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:MatMultConstrained,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function MatMultTransposeConstrained(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:MatMultTransposeConstrained,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function MatMatSolve(arg1::Mat{Float32},arg2::Mat{Float32},arg3::Mat{Float32})
    err = ccall((:MatMatSolve,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},Mat{Float32}),arg1,arg2,arg3)
    return err
end

function MatResidual(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Vec{Float32},arg4::Vec{Float32})
    err = ccall((:MatResidual,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function MatConvert(arg1::Mat{Float32},arg2::MatType,arg3::MatReuse,arg4::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatConvert,petscRealSingle),PetscErrorCode,(Mat{Float32},Cstring,MatReuse,Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function MatDuplicate(arg1::Mat{Float32},arg2::MatDuplicateOption,arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatDuplicate,petscRealSingle),PetscErrorCode,(Mat{Float32},MatDuplicateOption,Ptr{Mat{Float32}}),arg1,arg2,arg3)
    return err
end

function MatCopy(arg1::Mat{Float32},arg2::Mat{Float32},arg3::MatStructure)
    err = ccall((:MatCopy,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},MatStructure),arg1,arg2,arg3)
    return err
end

function MatView(arg1::Mat{Float32},arg2::PetscViewer{Float32})
    err = ccall((:MatView,petscRealSingle),PetscErrorCode,(Mat{Float32},PetscViewer{Float32}),arg1,arg2)
    return err
end

function MatIsSymmetric(arg1::Mat{Float32},arg2::Float32,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatIsSymmetric,petscRealSingle),PetscErrorCode,(Mat{Float32},Float32,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function MatIsStructurallySymmetric(arg1::Mat{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatIsStructurallySymmetric,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function MatIsHermitian(arg1::Mat{Float32},arg2::Float32,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatIsHermitian,petscRealSingle),PetscErrorCode,(Mat{Float32},Float32,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function MatIsSymmetricKnown(arg1::Mat{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatIsSymmetricKnown,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{PetscBool},Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function MatIsHermitianKnown(arg1::Mat{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatIsHermitianKnown,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{PetscBool},Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function MatMissingDiagonal(arg1::Mat{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatMissingDiagonal,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{PetscBool},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function MatLoad(arg1::Mat{Float32},arg2::PetscViewer{Float32})
    err = ccall((:MatLoad,petscRealSingle),PetscErrorCode,(Mat{Float32},PetscViewer{Float32}),arg1,arg2)
    return err
end

function MatGetRowIJ(arg1::Mat{Float32},arg2::Integer,arg3::PetscBool,arg4::PetscBool,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg7::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg8::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatGetRowIJ,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,PetscBool,PetscBool,Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function MatRestoreRowIJ(arg1::Mat{Float32},arg2::Integer,arg3::PetscBool,arg4::PetscBool,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg7::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg8::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatRestoreRowIJ,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,PetscBool,PetscBool,Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function MatGetColumnIJ(arg1::Mat{Float32},arg2::Integer,arg3::PetscBool,arg4::PetscBool,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg7::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg8::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatGetColumnIJ,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,PetscBool,PetscBool,Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function MatRestoreColumnIJ(arg1::Mat{Float32},arg2::Integer,arg3::PetscBool,arg4::PetscBool,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg7::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg8::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatRestoreColumnIJ,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,PetscBool,PetscBool,Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function MatGetInfo(arg1::Mat{Float32},arg2::MatInfoType,arg3::Union{Ptr{MatInfo},StridedArray{MatInfo},Ptr{MatInfo},Ref{MatInfo}})
    err = ccall((:MatGetInfo,petscRealSingle),PetscErrorCode,(Mat{Float32},MatInfoType,Ptr{MatInfo}),arg1,arg2,arg3)
    return err
end

function MatGetDiagonal(arg1::Mat{Float32},arg2::Vec{Float32})
    err = ccall((:MatGetDiagonal,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32}),arg1,arg2)
    return err
end

function MatGetRowMax(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatGetRowMax,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function MatGetRowMin(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatGetRowMin,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function MatGetRowMaxAbs(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatGetRowMaxAbs,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function MatGetRowMinAbs(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatGetRowMinAbs,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function MatGetRowSum(arg1::Mat{Float32},arg2::Vec{Float32})
    err = ccall((:MatGetRowSum,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32}),arg1,arg2)
    return err
end

function MatTranspose(arg1::Mat{Float32},arg2::MatReuse,arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatTranspose,petscRealSingle),PetscErrorCode,(Mat{Float32},MatReuse,Ptr{Mat{Float32}}),arg1,arg2,arg3)
    return err
end

function MatHermitianTranspose(arg1::Mat{Float32},arg2::MatReuse,arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatHermitianTranspose,petscRealSingle),PetscErrorCode,(Mat{Float32},MatReuse,Ptr{Mat{Float32}}),arg1,arg2,arg3)
    return err
end

function MatPermute(arg1::Mat{Float32},arg2::IS{Float32},arg3::IS{Float32},arg4::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatPermute,petscRealSingle),PetscErrorCode,(Mat{Float32},IS{Float32},IS{Float32},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function MatDiagonalScale(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:MatDiagonalScale,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function MatDiagonalSet(arg1::Mat{Float32},arg2::Vec{Float32},arg3::InsertMode)
    err = ccall((:MatDiagonalSet,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},InsertMode),arg1,arg2,arg3)
    return err
end

function MatEqual(arg1::Mat{Float32},arg2::Mat{Float32},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatEqual,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function MatMultEqual(arg1::Mat{Float32},arg2::Mat{Float32},arg3::Integer,arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatMultEqual,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},Int64,Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function MatMultAddEqual(arg1::Mat{Float32},arg2::Mat{Float32},arg3::Integer,arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatMultAddEqual,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},Int64,Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function MatMultTransposeEqual(arg1::Mat{Float32},arg2::Mat{Float32},arg3::Integer,arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatMultTransposeEqual,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},Int64,Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function MatMultTransposeAddEqual(arg1::Mat{Float32},arg2::Mat{Float32},arg3::Integer,arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatMultTransposeAddEqual,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},Int64,Ptr{PetscBool}),arg1,arg2,arg3,arg4)
    return err
end

function MatNorm(arg1::Mat{Float32},arg2::NormType,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:MatNorm,petscRealSingle),PetscErrorCode,(Mat{Float32},NormType,Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function MatGetColumnNorms(arg1::Mat{Float32},arg2::NormType,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:MatGetColumnNorms,petscRealSingle),PetscErrorCode,(Mat{Float32},NormType,Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function MatZeroEntries(arg1::Mat{Float32})
    err = ccall((:MatZeroEntries,petscRealSingle),PetscErrorCode,(Mat{Float32},),arg1)
    return err
end

function MatZeroRows(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Float32,arg5::Vec{Float32},arg6::Vec{Float32})
    err = ccall((:MatZeroRows,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Int64},Float32,Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatZeroRowsIS(arg1::Mat{Float32},arg2::IS{Float32},arg3::Float32,arg4::Vec{Float32},arg5::Vec{Float32})
    err = ccall((:MatZeroRowsIS,petscRealSingle),PetscErrorCode,(Mat{Float32},IS{Float32},Float32,Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4,arg5)
    return err
end

#= skipping function with undefined symbols:
 function MatZeroRowsStencil(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{MatStencil},StridedArray{MatStencil},Ptr{MatStencil},Ref{MatStencil}},arg4::Float32,arg5::Vec{Float32},arg6::Vec{Float32})
    ccall((:MatZeroRowsStencil,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{MatStencil},Float32,Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
#= skipping function with undefined symbols:
 function MatZeroRowsColumnsStencil(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{MatStencil},StridedArray{MatStencil},Ptr{MatStencil},Ref{MatStencil}},arg4::Float32,arg5::Vec{Float32},arg6::Vec{Float32})
    ccall((:MatZeroRowsColumnsStencil,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{MatStencil},Float32,Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
function MatZeroRowsColumns(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Float32,arg5::Vec{Float32},arg6::Vec{Float32})
    err = ccall((:MatZeroRowsColumns,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Int64},Float32,Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatZeroRowsColumnsIS(arg1::Mat{Float32},arg2::IS{Float32},arg3::Float32,arg4::Vec{Float32},arg5::Vec{Float32})
    err = ccall((:MatZeroRowsColumnsIS,petscRealSingle),PetscErrorCode,(Mat{Float32},IS{Float32},Float32,Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatGetSize(arg1::Mat{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatGetSize,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function MatGetLocalSize(arg1::Mat{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatGetLocalSize,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function MatGetOwnershipRange(arg1::Mat{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatGetOwnershipRange,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function MatGetOwnershipRanges(arg1::Mat{Float32},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:MatGetOwnershipRanges,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function MatGetOwnershipRangeColumn(arg1::Mat{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatGetOwnershipRangeColumn,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function MatGetOwnershipRangesColumn(arg1::Mat{Float32},arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:MatGetOwnershipRangesColumn,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Ptr{Int64}}),arg1,arg2)
    return err
end

function MatGetOwnershipIS(arg1::Mat{Float32},arg2::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:MatGetOwnershipIS,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{IS{Float32}},Ptr{IS{Float32}}),arg1,arg2,arg3)
    return err
end

function MatGetSubMatrices(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg4::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg5::MatReuse,arg6::Union{Ptr{Ptr{Mat{Float32}}},StridedArray{Ptr{Mat{Float32}}},Ptr{Ptr{Mat{Float32}}},Ref{Ptr{Mat{Float32}}}})
    err = ccall((:MatGetSubMatrices,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{IS{Float32}},Ptr{IS{Float32}},MatReuse,Ptr{Ptr{Mat{Float32}}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatGetSubMatricesMPI(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg4::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg5::MatReuse,arg6::Union{Ptr{Ptr{Mat{Float32}}},StridedArray{Ptr{Mat{Float32}}},Ptr{Ptr{Mat{Float32}}},Ref{Ptr{Mat{Float32}}}})
    err = ccall((:MatGetSubMatricesMPI,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{IS{Float32}},Ptr{IS{Float32}},MatReuse,Ptr{Ptr{Mat{Float32}}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatDestroyMatrices(arg1::Integer,arg2::Union{Ptr{Ptr{Mat{Float32}}},StridedArray{Ptr{Mat{Float32}}},Ptr{Ptr{Mat{Float32}}},Ref{Ptr{Mat{Float32}}}})
    err = ccall((:MatDestroyMatrices,petscRealSingle),PetscErrorCode,(Int64,Ptr{Ptr{Mat{Float32}}}),arg1,arg2)
    return err
end

function MatGetSubMatrix(arg1::Mat{Float32},arg2::IS{Float32},arg3::IS{Float32},arg4::MatReuse,arg5::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatGetSubMatrix,petscRealSingle),PetscErrorCode,(Mat{Float32},IS{Float32},IS{Float32},MatReuse,Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatGetLocalSubMatrix(arg1::Mat{Float32},arg2::IS{Float32},arg3::IS{Float32},arg4::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatGetLocalSubMatrix,petscRealSingle),PetscErrorCode,(Mat{Float32},IS{Float32},IS{Float32},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function MatRestoreLocalSubMatrix(arg1::Mat{Float32},arg2::IS{Float32},arg3::IS{Float32},arg4::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatRestoreLocalSubMatrix,petscRealSingle),PetscErrorCode,(Mat{Float32},IS{Float32},IS{Float32},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function MatGetSeqNonzeroStructure(arg1::Mat{Float32},arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatGetSeqNonzeroStructure,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Mat{Float32}}),arg1,arg2)
    return err
end

function MatDestroySeqNonzeroStructure(arg1::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatDestroySeqNonzeroStructure,petscRealSingle),PetscErrorCode,(Ptr{Mat{Float32}},),arg1)
    return err
end

function MatCreateMPIAIJSumSeqAIJ(arg1::MPI_Comm,arg2::Mat{Float32},arg3::Integer,arg4::Integer,arg5::MatReuse,arg6::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateMPIAIJSumSeqAIJ,petscRealSingle),PetscErrorCode,(comm_type,Mat{Float32},Int64,Int64,MatReuse,Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatCreateMPIAIJSumSeqAIJSymbolic(arg1::MPI_Comm,arg2::Mat{Float32},arg3::Integer,arg4::Integer,arg5::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateMPIAIJSumSeqAIJSymbolic,petscRealSingle),PetscErrorCode,(comm_type,Mat{Float32},Int64,Int64,Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatCreateMPIAIJSumSeqAIJNumeric(arg1::Mat{Float32},arg2::Mat{Float32})
    err = ccall((:MatCreateMPIAIJSumSeqAIJNumeric,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32}),arg1,arg2)
    return err
end

function MatMPIAIJGetLocalMat(arg1::Mat{Float32},arg2::MatReuse,arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatMPIAIJGetLocalMat,petscRealSingle),PetscErrorCode,(Mat{Float32},MatReuse,Ptr{Mat{Float32}}),arg1,arg2,arg3)
    return err
end

function MatMPIAIJGetLocalMatCondensed(arg1::Mat{Float32},arg2::MatReuse,arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg4::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg5::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatMPIAIJGetLocalMatCondensed,petscRealSingle),PetscErrorCode,(Mat{Float32},MatReuse,Ptr{IS{Float32}},Ptr{IS{Float32}},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatGetBrowsOfAcols(arg1::Mat{Float32},arg2::Mat{Float32},arg3::MatReuse,arg4::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg5::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg6::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatGetBrowsOfAcols,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},MatReuse,Ptr{IS{Float32}},Ptr{IS{Float32}},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatGetGhosts(arg1::Mat{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:MatGetGhosts,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3)
    return err
end

function MatIncreaseOverlap(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg4::Integer)
    err = ccall((:MatIncreaseOverlap,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{IS{Float32}},Int64),arg1,arg2,arg3,arg4)
    return err
end

function MatMatMult(arg1::Mat{Float32},arg2::Mat{Float32},arg3::MatReuse,arg4::Float32,arg5::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatMatMult,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},MatReuse,Float32,Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatMatMultSymbolic(arg1::Mat{Float32},arg2::Mat{Float32},arg3::Float32,arg4::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatMatMultSymbolic,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},Float32,Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function MatMatMultNumeric(arg1::Mat{Float32},arg2::Mat{Float32},arg3::Mat{Float32})
    err = ccall((:MatMatMultNumeric,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},Mat{Float32}),arg1,arg2,arg3)
    return err
end

function MatMatMatMult(arg1::Mat{Float32},arg2::Mat{Float32},arg3::Mat{Float32},arg4::MatReuse,arg5::Float32,arg6::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatMatMatMult,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},Mat{Float32},MatReuse,Float32,Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatMatMatMultSymbolic(arg1::Mat{Float32},arg2::Mat{Float32},arg3::Mat{Float32},arg4::Float32,arg5::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatMatMatMultSymbolic,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},Mat{Float32},Float32,Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatMatMatMultNumeric(arg1::Mat{Float32},arg2::Mat{Float32},arg3::Mat{Float32},arg4::Mat{Float32})
    err = ccall((:MatMatMatMultNumeric,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},Mat{Float32},Mat{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function MatPtAP(arg1::Mat{Float32},arg2::Mat{Float32},arg3::MatReuse,arg4::Float32,arg5::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatPtAP,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},MatReuse,Float32,Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatPtAPSymbolic(arg1::Mat{Float32},arg2::Mat{Float32},arg3::Float32,arg4::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatPtAPSymbolic,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},Float32,Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function MatPtAPNumeric(arg1::Mat{Float32},arg2::Mat{Float32},arg3::Mat{Float32})
    err = ccall((:MatPtAPNumeric,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},Mat{Float32}),arg1,arg2,arg3)
    return err
end

function MatRARt(arg1::Mat{Float32},arg2::Mat{Float32},arg3::MatReuse,arg4::Float32,arg5::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatRARt,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},MatReuse,Float32,Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatRARtSymbolic(arg1::Mat{Float32},arg2::Mat{Float32},arg3::Float32,arg4::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatRARtSymbolic,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},Float32,Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function MatRARtNumeric(arg1::Mat{Float32},arg2::Mat{Float32},arg3::Mat{Float32})
    err = ccall((:MatRARtNumeric,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},Mat{Float32}),arg1,arg2,arg3)
    return err
end

function MatTransposeMatMult(arg1::Mat{Float32},arg2::Mat{Float32},arg3::MatReuse,arg4::Float32,arg5::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatTransposeMatMult,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},MatReuse,Float32,Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatTransposetMatMultSymbolic(arg1::Mat{Float32},arg2::Mat{Float32},arg3::Float32,arg4::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatTransposetMatMultSymbolic,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},Float32,Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function MatTransposetMatMultNumeric(arg1::Mat{Float32},arg2::Mat{Float32},arg3::Mat{Float32})
    err = ccall((:MatTransposetMatMultNumeric,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},Mat{Float32}),arg1,arg2,arg3)
    return err
end

function MatMatTransposeMult(arg1::Mat{Float32},arg2::Mat{Float32},arg3::MatReuse,arg4::Float32,arg5::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatMatTransposeMult,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},MatReuse,Float32,Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatMatTransposeMultSymbolic(arg1::Mat{Float32},arg2::Mat{Float32},arg3::Float32,arg4::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatMatTransposeMultSymbolic,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},Float32,Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function MatMatTransposeMultNumeric(arg1::Mat{Float32},arg2::Mat{Float32},arg3::Mat{Float32})
    err = ccall((:MatMatTransposeMultNumeric,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},Mat{Float32}),arg1,arg2,arg3)
    return err
end

function MatAXPY(arg1::Mat{Float32},arg2::Float32,arg3::Mat{Float32},arg4::MatStructure)
    err = ccall((:MatAXPY,petscRealSingle),PetscErrorCode,(Mat{Float32},Float32,Mat{Float32},MatStructure),arg1,arg2,arg3,arg4)
    return err
end

function MatAYPX(arg1::Mat{Float32},arg2::Float32,arg3::Mat{Float32},arg4::MatStructure)
    err = ccall((:MatAYPX,petscRealSingle),PetscErrorCode,(Mat{Float32},Float32,Mat{Float32},MatStructure),arg1,arg2,arg3,arg4)
    return err
end

function MatScale(arg1::Mat{Float32},arg2::Float32)
    err = ccall((:MatScale,petscRealSingle),PetscErrorCode,(Mat{Float32},Float32),arg1,arg2)
    return err
end

function MatShift(arg1::Mat{Float32},arg2::Float32)
    err = ccall((:MatShift,petscRealSingle),PetscErrorCode,(Mat{Float32},Float32),arg1,arg2)
    return err
end

function MatSetLocalToGlobalMapping(arg1::Mat{Float32},arg2::ISLocalToGlobalMapping{Float32},arg3::ISLocalToGlobalMapping{Float32})
    err = ccall((:MatSetLocalToGlobalMapping,petscRealSingle),PetscErrorCode,(Mat{Float32},ISLocalToGlobalMapping{Float32},ISLocalToGlobalMapping{Float32}),arg1,arg2,arg3)
    return err
end

function MatGetLocalToGlobalMapping(arg1::Mat{Float32},arg2::Union{Ptr{ISLocalToGlobalMapping{Float32}},StridedArray{ISLocalToGlobalMapping{Float32}},Ptr{ISLocalToGlobalMapping{Float32}},Ref{ISLocalToGlobalMapping{Float32}}},arg3::Union{Ptr{ISLocalToGlobalMapping{Float32}},StridedArray{ISLocalToGlobalMapping{Float32}},Ptr{ISLocalToGlobalMapping{Float32}},Ref{ISLocalToGlobalMapping{Float32}}})
    err = ccall((:MatGetLocalToGlobalMapping,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{ISLocalToGlobalMapping{Float32}},Ptr{ISLocalToGlobalMapping{Float32}}),arg1,arg2,arg3)
    return err
end

function MatGetLayouts(arg1::Mat{Float32},arg2::Union{Ptr{PetscLayout{Float32}},StridedArray{PetscLayout{Float32}},Ptr{PetscLayout{Float32}},Ref{PetscLayout{Float32}}},arg3::Union{Ptr{PetscLayout{Float32}},StridedArray{PetscLayout{Float32}},Ptr{PetscLayout{Float32}},Ref{PetscLayout{Float32}}})
    err = ccall((:MatGetLayouts,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{PetscLayout{Float32}{Float32}},Ptr{PetscLayout{Float32}{Float32}}),arg1,arg2,arg3)
    return err
end

function MatZeroRowsLocal(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Float32,arg5::Vec{Float32},arg6::Vec{Float32})
    err = ccall((:MatZeroRowsLocal,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Int64},Float32,Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatZeroRowsLocalIS(arg1::Mat{Float32},arg2::IS{Float32},arg3::Float32,arg4::Vec{Float32},arg5::Vec{Float32})
    err = ccall((:MatZeroRowsLocalIS,petscRealSingle),PetscErrorCode,(Mat{Float32},IS{Float32},Float32,Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatZeroRowsColumnsLocal(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Float32,arg5::Vec{Float32},arg6::Vec{Float32})
    err = ccall((:MatZeroRowsColumnsLocal,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Int64},Float32,Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatZeroRowsColumnsLocalIS(arg1::Mat{Float32},arg2::IS{Float32},arg3::Float32,arg4::Vec{Float32},arg5::Vec{Float32})
    err = ccall((:MatZeroRowsColumnsLocalIS,petscRealSingle),PetscErrorCode,(Mat{Float32},IS{Float32},Float32,Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatSetValuesLocal(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::InsertMode)
    err = ccall((:MatSetValuesLocal,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Int64},Int64,Ptr{Int64},Ptr{Float32},InsertMode),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatSetValuesBlockedLocal(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::InsertMode)
    err = ccall((:MatSetValuesBlockedLocal,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Int64},Int64,Ptr{Int64},Ptr{Float32},InsertMode),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatStashSetInitialSize(arg1::Mat{Float32},arg2::Integer,arg3::Integer)
    err = ccall((:MatStashSetInitialSize,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Int64),arg1,arg2,arg3)
    return err
end

function MatStashGetInfo(arg1::Mat{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatStashGetInfo,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatInterpolate(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:MatInterpolate,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function MatInterpolateAdd(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Vec{Float32},arg4::Vec{Float32})
    err = ccall((:MatInterpolateAdd,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function MatRestrict(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:MatRestrict,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function MatCreateVecs(arg1::Mat{Float32},arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:MatCreateVecs,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Vec{Float32}},Ptr{Vec{Float32}}),arg1,arg2,arg3)
    return err
end

function MatGetMultiProcBlock(arg1::Mat{Float32},arg2::MPI_Comm,arg3::MatReuse,arg4::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatGetMultiProcBlock,petscRealSingle),PetscErrorCode,(Mat{Float32},comm_type,MatReuse,Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function MatFindZeroDiagonals(arg1::Mat{Float32},arg2::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:MatFindZeroDiagonals,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{IS{Float32}}),arg1,arg2)
    return err
end

function MatFindOffBlockDiagonalEntries(arg1::Mat{Float32},arg2::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:MatFindOffBlockDiagonalEntries,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{IS{Float32}}),arg1,arg2)
    return err
end

function MatCreateMPIMatConcatenateSeqMat(arg1::MPI_Comm,arg2::Mat{Float32},arg3::Integer,arg4::MatReuse,arg5::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateMPIMatConcatenateSeqMat,petscRealSingle),PetscErrorCode,(comm_type,Mat{Float32},Int64,MatReuse,Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatInodeAdjustForInodes(arg1::Mat{Float32},arg2::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:MatInodeAdjustForInodes,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{IS{Float32}},Ptr{IS{Float32}}),arg1,arg2,arg3)
    return err
end

function MatInodeGetInodeSizes(arg1::Mat{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatInodeGetInodeSizes,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function MatSeqAIJSetColumnIndices(arg1::Mat{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatSeqAIJSetColumnIndices,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function MatSeqBAIJSetColumnIndices(arg1::Mat{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatSeqBAIJSetColumnIndices,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function MatCreateSeqAIJWithArrays(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateSeqAIJWithArrays,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Ptr{Int64},Ptr{Int64},Ptr{Float32},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatCreateSeqBAIJWithArrays(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg8::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateSeqBAIJWithArrays,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Ptr{Int64},Ptr{Int64},Ptr{Float32},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function MatCreateSeqSBAIJWithArrays(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg8::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateSeqSBAIJWithArrays,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Ptr{Int64},Ptr{Int64},Ptr{Float32},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

function MatCreateSeqAIJFromTriple(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}},arg8::Integer,arg9::PetscBool)
    err = ccall((:MatCreateSeqAIJFromTriple,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Ptr{Int64},Ptr{Int64},Ptr{Float32},Ptr{Mat{Float32}},Int64,PetscBool),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
    return err
end

function MatSeqBAIJSetPreallocation(arg1::Mat{Float32},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatSeqBAIJSetPreallocation,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Int64,Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function MatSeqSBAIJSetPreallocation(arg1::Mat{Float32},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatSeqSBAIJSetPreallocation,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Int64,Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function MatSeqAIJSetPreallocation(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatSeqAIJSetPreallocation,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function MatMPIBAIJSetPreallocation(arg1::Mat{Float32},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatMPIBAIJSetPreallocation,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Int64,Ptr{Int64},Int64,Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatMPISBAIJSetPreallocation(arg1::Mat{Float32},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatMPISBAIJSetPreallocation,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Int64,Ptr{Int64},Int64,Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatMPIAIJSetPreallocation(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatMPIAIJSetPreallocation,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Int64},Int64,Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatSeqAIJSetPreallocationCSR(arg1::Mat{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:MatSeqAIJSetPreallocationCSR,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Int64},Ptr{Int64},Ptr{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function MatSeqBAIJSetPreallocationCSR(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:MatSeqBAIJSetPreallocationCSR,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Int64},Ptr{Int64},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatMPIAIJSetPreallocationCSR(arg1::Mat{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:MatMPIAIJSetPreallocationCSR,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Int64},Ptr{Int64},Ptr{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function MatMPIBAIJSetPreallocationCSR(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:MatMPIBAIJSetPreallocationCSR,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Int64},Ptr{Int64},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatMPIAdjSetPreallocation(arg1::Mat{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatMPIAdjSetPreallocation,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function MatMPIDenseSetPreallocation(arg1::Mat{Float32},arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:MatMPIDenseSetPreallocation,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Float32}),arg1,arg2)
    return err
end

function MatSeqDenseSetPreallocation(arg1::Mat{Float32},arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:MatSeqDenseSetPreallocation,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Float32}),arg1,arg2)
    return err
end

function MatMPIAIJGetSeqAIJ(arg1::Mat{Float32},arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}},arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:MatMPIAIJGetSeqAIJ,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Mat{Float32}},Ptr{Mat{Float32}},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4)
    return err
end

function MatMPIBAIJGetSeqBAIJ(arg1::Mat{Float32},arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}},arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:MatMPIBAIJGetSeqBAIJ,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Mat{Float32}},Ptr{Mat{Float32}},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4)
    return err
end

function MatMPIAdjCreateNonemptySubcommMat(arg1::Mat{Float32},arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatMPIAdjCreateNonemptySubcommMat,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Mat{Float32}}),arg1,arg2)
    return err
end

function MatISSetPreallocation(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatISSetPreallocation,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Int64},Int64,Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function MatSeqDenseSetLDA(arg1::Mat{Float32},arg2::Integer)
    err = ccall((:MatSeqDenseSetLDA,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64),arg1,arg2)
    return err
end

function MatDenseGetLocalMatrix(arg1::Mat{Float32},arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatDenseGetLocalMatrix,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Mat{Float32}}),arg1,arg2)
    return err
end

function MatStoreValues(arg1::Mat{Float32})
    err = ccall((:MatStoreValues,petscRealSingle),PetscErrorCode,(Mat{Float32},),arg1)
    return err
end

function MatRetrieveValues(arg1::Mat{Float32})
    err = ccall((:MatRetrieveValues,petscRealSingle),PetscErrorCode,(Mat{Float32},),arg1)
    return err
end

function MatDAADSetCtx(arg1::Mat{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatDAADSetCtx,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Void}),arg1,arg2)
    return err
end

function MatFindNonzeroRows(arg1::Mat{Float32},arg2::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:MatFindNonzeroRows,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{IS{Float32}}),arg1,arg2)
    return err
end

function MatGetOrdering(arg1::Mat{Float32},arg2::MatOrderingType,arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg4::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:MatGetOrdering,petscRealSingle),PetscErrorCode,(Mat{Float32},Cstring,Ptr{IS{Float32}},Ptr{IS{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

#= skipping function with undefined symbols:
 function MatGetOrderingList(arg0::Type{Float32},arg1::Union{Ptr{PetscFunctionList},StridedArray{PetscFunctionList},Ptr{PetscFunctionList},Ref{PetscFunctionList}})
    ccall((:MatGetOrderingList,petscRealSingle),PetscErrorCode,(Ptr{PetscFunctionList},),arg1)
end
=#
function MatOrderingRegister(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatOrderingRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function MatReorderForNonzeroDiagonal(arg1::Mat{Float32},arg2::Float32,arg3::IS{Float32},arg4::IS{Float32})
    err = ccall((:MatReorderForNonzeroDiagonal,petscRealSingle),PetscErrorCode,(Mat{Float32},Float32,IS{Float32},IS{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function MatCreateLaplacian(arg1::Mat{Float32},arg2::Float32,arg3::PetscBool,arg4::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateLaplacian,petscRealSingle),PetscErrorCode,(Mat{Float32},Float32,PetscBool,Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

#= skipping function with undefined symbols:
 function MatFactorInfoInitialize(arg0::Type{Float32},arg1::Union{Ptr{MatFactorInfo},StridedArray{MatFactorInfo},Ptr{MatFactorInfo},Ref{MatFactorInfo}})
    ccall((:MatFactorInfoInitialize,petscRealSingle),PetscErrorCode,(Ptr{MatFactorInfo},),arg1)
end
=#
#= skipping function with undefined symbols:
 function MatCholeskyFactor(arg1::Mat{Float32},arg2::IS{Float32},arg3::Union{Ptr{MatFactorInfo},StridedArray{MatFactorInfo},Ptr{MatFactorInfo},Ref{MatFactorInfo}})
    ccall((:MatCholeskyFactor,petscRealSingle),PetscErrorCode,(Mat{Float32},IS{Float32},Ptr{MatFactorInfo}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function MatCholeskyFactorSymbolic(arg1::Mat{Float32},arg2::Mat{Float32},arg3::IS{Float32},arg4::Union{Ptr{MatFactorInfo},StridedArray{MatFactorInfo},Ptr{MatFactorInfo},Ref{MatFactorInfo}})
    ccall((:MatCholeskyFactorSymbolic,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},IS{Float32},Ptr{MatFactorInfo}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function MatCholeskyFactorNumeric(arg1::Mat{Float32},arg2::Mat{Float32},arg3::Union{Ptr{MatFactorInfo},StridedArray{MatFactorInfo},Ptr{MatFactorInfo},Ref{MatFactorInfo}})
    ccall((:MatCholeskyFactorNumeric,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},Ptr{MatFactorInfo}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function MatLUFactor(arg1::Mat{Float32},arg2::IS{Float32},arg3::IS{Float32},arg4::Union{Ptr{MatFactorInfo},StridedArray{MatFactorInfo},Ptr{MatFactorInfo},Ref{MatFactorInfo}})
    ccall((:MatLUFactor,petscRealSingle),PetscErrorCode,(Mat{Float32},IS{Float32},IS{Float32},Ptr{MatFactorInfo}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function MatILUFactor(arg1::Mat{Float32},arg2::IS{Float32},arg3::IS{Float32},arg4::Union{Ptr{MatFactorInfo},StridedArray{MatFactorInfo},Ptr{MatFactorInfo},Ref{MatFactorInfo}})
    ccall((:MatILUFactor,petscRealSingle),PetscErrorCode,(Mat{Float32},IS{Float32},IS{Float32},Ptr{MatFactorInfo}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function MatLUFactorSymbolic(arg1::Mat{Float32},arg2::Mat{Float32},arg3::IS{Float32},arg4::IS{Float32},arg5::Union{Ptr{MatFactorInfo},StridedArray{MatFactorInfo},Ptr{MatFactorInfo},Ref{MatFactorInfo}})
    ccall((:MatLUFactorSymbolic,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},IS{Float32},IS{Float32},Ptr{MatFactorInfo}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function MatILUFactorSymbolic(arg1::Mat{Float32},arg2::Mat{Float32},arg3::IS{Float32},arg4::IS{Float32},arg5::Union{Ptr{MatFactorInfo},StridedArray{MatFactorInfo},Ptr{MatFactorInfo},Ref{MatFactorInfo}})
    ccall((:MatILUFactorSymbolic,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},IS{Float32},IS{Float32},Ptr{MatFactorInfo}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function MatICCFactorSymbolic(arg1::Mat{Float32},arg2::Mat{Float32},arg3::IS{Float32},arg4::Union{Ptr{MatFactorInfo},StridedArray{MatFactorInfo},Ptr{MatFactorInfo},Ref{MatFactorInfo}})
    ccall((:MatICCFactorSymbolic,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},IS{Float32},Ptr{MatFactorInfo}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function MatICCFactor(arg1::Mat{Float32},arg2::IS{Float32},arg3::Union{Ptr{MatFactorInfo},StridedArray{MatFactorInfo},Ptr{MatFactorInfo},Ref{MatFactorInfo}})
    ccall((:MatICCFactor,petscRealSingle),PetscErrorCode,(Mat{Float32},IS{Float32},Ptr{MatFactorInfo}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function MatLUFactorNumeric(arg1::Mat{Float32},arg2::Mat{Float32},arg3::Union{Ptr{MatFactorInfo},StridedArray{MatFactorInfo},Ptr{MatFactorInfo},Ref{MatFactorInfo}})
    ccall((:MatLUFactorNumeric,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},Ptr{MatFactorInfo}),arg1,arg2,arg3)
end
=#
function MatGetInertia(arg1::Mat{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatGetInertia,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
    return err
end

function MatSolve(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:MatSolve,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function MatForwardSolve(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:MatForwardSolve,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function MatBackwardSolve(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:MatBackwardSolve,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function MatSolveAdd(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Vec{Float32},arg4::Vec{Float32})
    err = ccall((:MatSolveAdd,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function MatSolveTranspose(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:MatSolveTranspose,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function MatSolveTransposeAdd(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Vec{Float32},arg4::Vec{Float32})
    err = ccall((:MatSolveTransposeAdd,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4)
    return err
end

#= skipping function with undefined symbols:
 function MatSolves(arg1::Mat{Float32},arg2::Vecs,arg3::Vecs)
    ccall((:MatSolves,petscRealSingle),PetscErrorCode,(Mat{Float32},Vecs,Vecs),arg1,arg2,arg3)
end
=#
function MatSetUnfactored(arg1::Mat{Float32})
    err = ccall((:MatSetUnfactored,petscRealSingle),PetscErrorCode,(Mat{Float32},),arg1)
    return err
end

function MatSOR(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Float32,arg4::MatSORType,arg5::Float32,arg6::Integer,arg7::Integer,arg8::Vec{Float32})
    err = ccall((:MatSOR,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Float32,MatSORType,Float32,Int64,Int64,Vec{Float32}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
    return err
end

#= skipping function with undefined symbols:
 function MatColoringCreate(arg1::Mat{Float32},arg2::Union{Ptr{MatColoring},StridedArray{MatColoring},Ptr{MatColoring},Ref{MatColoring}})
    ccall((:MatColoringCreate,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{MatColoring}),arg1,arg2)
end
=#
function MatColoringGetDegrees(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatColoringGetDegrees,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

#= skipping function with undefined symbols:
 function MatColoringDestroy(arg0::Type{Float32},arg1::Union{Ptr{MatColoring},StridedArray{MatColoring},Ptr{MatColoring},Ref{MatColoring}})
    ccall((:MatColoringDestroy,petscRealSingle),PetscErrorCode,(Ptr{MatColoring},),arg1)
end
=#
#= skipping function with undefined symbols:
 function MatColoringView(arg1::MatColoring,arg2::PetscViewer{Float32})
    ccall((:MatColoringView,petscRealSingle),PetscErrorCode,(MatColoring,PetscViewer{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatColoringSetType(arg0::Type{Float32},arg1::MatColoring,arg2::MatColoringType)
    ccall((:MatColoringSetType,petscRealSingle),PetscErrorCode,(MatColoring,Cstring),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatColoringSetFromOptions(arg0::Type{Float32},arg1::MatColoring)
    ccall((:MatColoringSetFromOptions,petscRealSingle),PetscErrorCode,(MatColoring,),arg1)
end
=#
#= skipping function with undefined symbols:
 function MatColoringSetDistance(arg0::Type{Float32},arg1::MatColoring,arg2::Integer)
    ccall((:MatColoringSetDistance,petscRealSingle),PetscErrorCode,(MatColoring,Int64),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatColoringGetDistance(arg0::Type{Float32},arg1::MatColoring,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:MatColoringGetDistance,petscRealSingle),PetscErrorCode,(MatColoring,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatColoringSetMaxColors(arg0::Type{Float32},arg1::MatColoring,arg2::Integer)
    ccall((:MatColoringSetMaxColors,petscRealSingle),PetscErrorCode,(MatColoring,Int64),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatColoringGetMaxColors(arg0::Type{Float32},arg1::MatColoring,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:MatColoringGetMaxColors,petscRealSingle),PetscErrorCode,(MatColoring,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatColoringApply(arg1::MatColoring,arg2::Union{Ptr{ISColoring{Float32}},StridedArray{ISColoring{Float32}},Ptr{ISColoring{Float32}},Ref{ISColoring{Float32}}})
    ccall((:MatColoringApply,petscRealSingle),PetscErrorCode,(MatColoring,Ptr{ISColoring{Float32}}),arg1,arg2)
end
=#
function MatColoringRegister(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatColoringRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function MatColoringPatch(arg1::Mat{Float32},arg2::Integer,arg3::Integer,ISColoringValue::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}},arg4::Union{Ptr{ISColoring{Float32}},StridedArray{ISColoring{Float32}},Ptr{ISColoring{Float32}},Ref{ISColoring{Float32}}})
    err = ccall((:MatColoringPatch,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Int64,Ptr{Cint},Ptr{ISColoring{Float32}}),arg1,arg2,arg3,ISColoringValue,arg4)
    return err
end

#= skipping function with undefined symbols:
 function MatColoringSetWeightType(arg0::Type{Float32},arg1::MatColoring,arg2::MatColoringWeightType)
    ccall((:MatColoringSetWeightType,petscRealSingle),PetscErrorCode,(MatColoring,MatColoringWeightType),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatColoringSetWeights(arg0::Type{Float32},arg1::MatColoring,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:MatColoringSetWeights,petscRealSingle),PetscErrorCode,(MatColoring,Ptr{Float32},Ptr{Int64}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function MatColoringCreateWeights(arg0::Type{Float32},arg1::MatColoring,arg2::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},lperm::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    ccall((:MatColoringCreateWeights,petscRealSingle),PetscErrorCode,(MatColoring,Ptr{Ptr{Float32}},Ptr{Ptr{Int64}}),arg1,arg2,lperm)
end
=#
#= skipping function with undefined symbols:
 function MatFDColoringCreate(arg1::Mat{Float32},arg2::ISColoring{Float32},arg3::Union{Ptr{MatFDColoring},StridedArray{MatFDColoring},Ptr{MatFDColoring},Ref{MatFDColoring}})
    ccall((:MatFDColoringCreate,petscRealSingle),PetscErrorCode,(Mat{Float32},ISColoring{Float32},Ptr{MatFDColoring}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function MatFDColoringDestroy(arg0::Type{Float32},arg1::Union{Ptr{MatFDColoring},StridedArray{MatFDColoring},Ptr{MatFDColoring},Ref{MatFDColoring}})
    ccall((:MatFDColoringDestroy,petscRealSingle),PetscErrorCode,(Ptr{MatFDColoring},),arg1)
end
=#
#= skipping function with undefined symbols:
 function MatFDColoringView(arg1::MatFDColoring,arg2::PetscViewer{Float32})
    ccall((:MatFDColoringView,petscRealSingle),PetscErrorCode,(MatFDColoring,PetscViewer{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatFDColoringSetFunction(arg0::Type{Float32},arg1::MatFDColoring,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:MatFDColoringSetFunction,petscRealSingle),PetscErrorCode,(MatFDColoring,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function MatFDColoringGetFunction(arg0::Type{Float32},arg1::MatFDColoring,arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    ccall((:MatFDColoringGetFunction,petscRealSingle),PetscErrorCode,(MatFDColoring,Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function MatFDColoringSetParameters(arg0::Type{Float32},arg1::MatFDColoring,arg2::Float32,arg3::Float32)
    ccall((:MatFDColoringSetParameters,petscRealSingle),PetscErrorCode,(MatFDColoring,Float32,Float32),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function MatFDColoringSetFromOptions(arg0::Type{Float32},arg1::MatFDColoring)
    ccall((:MatFDColoringSetFromOptions,petscRealSingle),PetscErrorCode,(MatFDColoring,),arg1)
end
=#
#= skipping function with undefined symbols:
 function MatFDColoringApply(arg1::Mat{Float32},arg2::MatFDColoring,arg3::Vec{Float32},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:MatFDColoringApply,petscRealSingle),PetscErrorCode,(Mat{Float32},MatFDColoring,Vec{Float32},Ptr{Void}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function MatFDColoringSetF(arg1::MatFDColoring,arg2::Vec{Float32})
    ccall((:MatFDColoringSetF,petscRealSingle),PetscErrorCode,(MatFDColoring,Vec{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatFDColoringGetPerturbedColumns(arg0::Type{Float32},arg1::MatFDColoring,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    ccall((:MatFDColoringGetPerturbedColumns,petscRealSingle),PetscErrorCode,(MatFDColoring,Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function MatFDColoringSetUp(arg1::Mat{Float32},arg2::ISColoring{Float32},arg3::MatFDColoring)
    ccall((:MatFDColoringSetUp,petscRealSingle),PetscErrorCode,(Mat{Float32},ISColoring{Float32},MatFDColoring),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function MatFDColoringSetBlockSize(arg0::Type{Float32},arg1::MatFDColoring,arg2::Integer,arg3::Integer)
    ccall((:MatFDColoringSetBlockSize,petscRealSingle),PetscErrorCode,(MatFDColoring,Int64,Int64),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function MatTransposeColoringCreate(arg1::Mat{Float32},arg2::ISColoring{Float32},arg3::Union{Ptr{MatTransposeColoring},StridedArray{MatTransposeColoring},Ptr{MatTransposeColoring},Ref{MatTransposeColoring}})
    ccall((:MatTransposeColoringCreate,petscRealSingle),PetscErrorCode,(Mat{Float32},ISColoring{Float32},Ptr{MatTransposeColoring}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function MatTransColoringApplySpToDen(arg1::MatTransposeColoring,arg2::Mat{Float32},arg3::Mat{Float32})
    ccall((:MatTransColoringApplySpToDen,petscRealSingle),PetscErrorCode,(MatTransposeColoring,Mat{Float32},Mat{Float32}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function MatTransColoringApplyDenToSp(arg1::MatTransposeColoring,arg2::Mat{Float32},arg3::Mat{Float32})
    ccall((:MatTransColoringApplyDenToSp,petscRealSingle),PetscErrorCode,(MatTransposeColoring,Mat{Float32},Mat{Float32}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function MatTransposeColoringDestroy(arg0::Type{Float32},arg1::Union{Ptr{MatTransposeColoring},StridedArray{MatTransposeColoring},Ptr{MatTransposeColoring},Ref{MatTransposeColoring}})
    ccall((:MatTransposeColoringDestroy,petscRealSingle),PetscErrorCode,(Ptr{MatTransposeColoring},),arg1)
end
=#
#= skipping function with undefined symbols:
 function MatPartitioningCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{MatPartitioning},StridedArray{MatPartitioning},Ptr{MatPartitioning},Ref{MatPartitioning}})
    ccall((:MatPartitioningCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{MatPartitioning}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatPartitioningSetType(arg0::Type{Float32},arg1::MatPartitioning,arg2::MatPartitioningType)
    ccall((:MatPartitioningSetType,petscRealSingle),PetscErrorCode,(MatPartitioning,Cstring),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatPartitioningSetNParts(arg0::Type{Float32},arg1::MatPartitioning,arg2::Integer)
    ccall((:MatPartitioningSetNParts,petscRealSingle),PetscErrorCode,(MatPartitioning,Int64),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatPartitioningSetAdjacency(arg1::MatPartitioning,arg2::Mat{Float32})
    ccall((:MatPartitioningSetAdjacency,petscRealSingle),PetscErrorCode,(MatPartitioning,Mat{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatPartitioningSetVertexWeights(arg0::Type{Float32},arg1::MatPartitioning,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:MatPartitioningSetVertexWeights,petscRealSingle),PetscErrorCode,(MatPartitioning,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatPartitioningSetPartitionWeights(arg0::Type{Float32},arg1::MatPartitioning,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:MatPartitioningSetPartitionWeights,petscRealSingle),PetscErrorCode,(MatPartitioning,Ptr{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatPartitioningApply(arg1::MatPartitioning,arg2::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    ccall((:MatPartitioningApply,petscRealSingle),PetscErrorCode,(MatPartitioning,Ptr{IS{Float32}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatPartitioningDestroy(arg0::Type{Float32},arg1::Union{Ptr{MatPartitioning},StridedArray{MatPartitioning},Ptr{MatPartitioning},Ref{MatPartitioning}})
    ccall((:MatPartitioningDestroy,petscRealSingle),PetscErrorCode,(Ptr{MatPartitioning},),arg1)
end
=#
function MatPartitioningRegister(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatPartitioningRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

#= skipping function with undefined symbols:
 function MatPartitioningView(arg1::MatPartitioning,arg2::PetscViewer{Float32})
    ccall((:MatPartitioningView,petscRealSingle),PetscErrorCode,(MatPartitioning,PetscViewer{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatPartitioningSetFromOptions(arg0::Type{Float32},arg1::MatPartitioning)
    ccall((:MatPartitioningSetFromOptions,petscRealSingle),PetscErrorCode,(MatPartitioning,),arg1)
end
=#
#= skipping function with undefined symbols:
 function MatPartitioningGetType(arg0::Type{Float32},arg1::MatPartitioning,arg2::Union{Ptr{MatPartitioningType},StridedArray{MatPartitioningType},Ptr{MatPartitioningType},Ref{MatPartitioningType}})
    ccall((:MatPartitioningGetType,petscRealSingle),PetscErrorCode,(MatPartitioning,Ptr{Ptr{UInt8}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatPartitioningParmetisSetCoarseSequential(arg0::Type{Float32},arg1::MatPartitioning)
    ccall((:MatPartitioningParmetisSetCoarseSequential,petscRealSingle),PetscErrorCode,(MatPartitioning,),arg1)
end
=#
#= skipping function with undefined symbols:
 function MatPartitioningParmetisGetEdgeCut(arg0::Type{Float32},arg1::MatPartitioning,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:MatPartitioningParmetisGetEdgeCut,petscRealSingle),PetscErrorCode,(MatPartitioning,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatPartitioningChacoSetGlobal(arg0::Type{Float32},arg1::MatPartitioning,arg2::MPChacoGlobalType)
    ccall((:MatPartitioningChacoSetGlobal,petscRealSingle),PetscErrorCode,(MatPartitioning,MPChacoGlobalType),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatPartitioningChacoGetGlobal(arg0::Type{Float32},arg1::MatPartitioning,arg2::Union{Ptr{MPChacoGlobalType},StridedArray{MPChacoGlobalType},Ptr{MPChacoGlobalType},Ref{MPChacoGlobalType}})
    ccall((:MatPartitioningChacoGetGlobal,petscRealSingle),PetscErrorCode,(MatPartitioning,Ptr{MPChacoGlobalType}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatPartitioningChacoSetLocal(arg0::Type{Float32},arg1::MatPartitioning,arg2::MPChacoLocalType)
    ccall((:MatPartitioningChacoSetLocal,petscRealSingle),PetscErrorCode,(MatPartitioning,MPChacoLocalType),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatPartitioningChacoGetLocal(arg0::Type{Float32},arg1::MatPartitioning,arg2::Union{Ptr{MPChacoLocalType},StridedArray{MPChacoLocalType},Ptr{MPChacoLocalType},Ref{MPChacoLocalType}})
    ccall((:MatPartitioningChacoGetLocal,petscRealSingle),PetscErrorCode,(MatPartitioning,Ptr{MPChacoLocalType}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatPartitioningChacoSetCoarseLevel(arg0::Type{Float32},arg1::MatPartitioning,arg2::Float32)
    ccall((:MatPartitioningChacoSetCoarseLevel,petscRealSingle),PetscErrorCode,(MatPartitioning,Float32),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatPartitioningChacoSetEigenSolver(arg0::Type{Float32},arg1::MatPartitioning,arg2::MPChacoEigenType)
    ccall((:MatPartitioningChacoSetEigenSolver,petscRealSingle),PetscErrorCode,(MatPartitioning,MPChacoEigenType),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatPartitioningChacoGetEigenSolver(arg0::Type{Float32},arg1::MatPartitioning,arg2::Union{Ptr{MPChacoEigenType},StridedArray{MPChacoEigenType},Ptr{MPChacoEigenType},Ref{MPChacoEigenType}})
    ccall((:MatPartitioningChacoGetEigenSolver,petscRealSingle),PetscErrorCode,(MatPartitioning,Ptr{MPChacoEigenType}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatPartitioningChacoSetEigenTol(arg0::Type{Float32},arg1::MatPartitioning,arg2::Float32)
    ccall((:MatPartitioningChacoSetEigenTol,petscRealSingle),PetscErrorCode,(MatPartitioning,Float32),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatPartitioningChacoGetEigenTol(arg0::Type{Float32},arg1::MatPartitioning,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:MatPartitioningChacoGetEigenTol,petscRealSingle),PetscErrorCode,(MatPartitioning,Ptr{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatPartitioningChacoSetEigenNumber(arg0::Type{Float32},arg1::MatPartitioning,arg2::Integer)
    ccall((:MatPartitioningChacoSetEigenNumber,petscRealSingle),PetscErrorCode,(MatPartitioning,Int64),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatPartitioningChacoGetEigenNumber(arg0::Type{Float32},arg1::MatPartitioning,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:MatPartitioningChacoGetEigenNumber,petscRealSingle),PetscErrorCode,(MatPartitioning,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatPartitioningPartySetGlobal(arg0::Type{Float32},arg1::MatPartitioning,arg2::Union{ByteString,Symbol})
    ccall((:MatPartitioningPartySetGlobal,petscRealSingle),PetscErrorCode,(MatPartitioning,Cstring),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatPartitioningPartySetLocal(arg0::Type{Float32},arg1::MatPartitioning,arg2::Union{ByteString,Symbol})
    ccall((:MatPartitioningPartySetLocal,petscRealSingle),PetscErrorCode,(MatPartitioning,Cstring),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatPartitioningPartySetCoarseLevel(arg0::Type{Float32},arg1::MatPartitioning,arg2::Float32)
    ccall((:MatPartitioningPartySetCoarseLevel,petscRealSingle),PetscErrorCode,(MatPartitioning,Float32),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatPartitioningPartySetBipart(arg0::Type{Float32},arg1::MatPartitioning,arg2::PetscBool)
    ccall((:MatPartitioningPartySetBipart,petscRealSingle),PetscErrorCode,(MatPartitioning,PetscBool),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatPartitioningPartySetMatchOptimization(arg0::Type{Float32},arg1::MatPartitioning,arg2::PetscBool)
    ccall((:MatPartitioningPartySetMatchOptimization,petscRealSingle),PetscErrorCode,(MatPartitioning,PetscBool),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatPartitioningPTScotchSetImbalance(arg0::Type{Float32},arg1::MatPartitioning,arg2::Float32)
    ccall((:MatPartitioningPTScotchSetImbalance,petscRealSingle),PetscErrorCode,(MatPartitioning,Float32),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatPartitioningPTScotchGetImbalance(arg0::Type{Float32},arg1::MatPartitioning,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:MatPartitioningPTScotchGetImbalance,petscRealSingle),PetscErrorCode,(MatPartitioning,Ptr{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatPartitioningPTScotchSetStrategy(arg0::Type{Float32},arg1::MatPartitioning,arg2::MPPTScotchStrategyType)
    ccall((:MatPartitioningPTScotchSetStrategy,petscRealSingle),PetscErrorCode,(MatPartitioning,MPPTScotchStrategyType),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatPartitioningPTScotchGetStrategy(arg0::Type{Float32},arg1::MatPartitioning,arg2::Union{Ptr{MPPTScotchStrategyType},StridedArray{MPPTScotchStrategyType},Ptr{MPPTScotchStrategyType},Ref{MPPTScotchStrategyType}})
    ccall((:MatPartitioningPTScotchGetStrategy,petscRealSingle),PetscErrorCode,(MatPartitioning,Ptr{MPPTScotchStrategyType}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatCoarsenCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{MatCoarsen},StridedArray{MatCoarsen},Ptr{MatCoarsen},Ref{MatCoarsen}})
    ccall((:MatCoarsenCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{MatCoarsen}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatCoarsenSetType(arg0::Type{Float32},arg1::MatCoarsen,arg2::MatCoarsenType)
    ccall((:MatCoarsenSetType,petscRealSingle),PetscErrorCode,(MatCoarsen,Cstring),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatCoarsenSetAdjacency(arg1::MatCoarsen,arg2::Mat{Float32})
    ccall((:MatCoarsenSetAdjacency,petscRealSingle),PetscErrorCode,(MatCoarsen,Mat{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatCoarsenSetGreedyOrdering(arg1::MatCoarsen,arg2::IS{Float32})
    ccall((:MatCoarsenSetGreedyOrdering,petscRealSingle),PetscErrorCode,(MatCoarsen,IS{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatCoarsenSetStrictAggs(arg0::Type{Float32},arg1::MatCoarsen,arg2::PetscBool)
    ccall((:MatCoarsenSetStrictAggs,petscRealSingle),PetscErrorCode,(MatCoarsen,PetscBool),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatCoarsenGetData(arg0::Type{Float32},arg1::MatCoarsen,arg2::Union{Ptr{Ptr{PetscCoarsenData}},StridedArray{Ptr{PetscCoarsenData}},Ptr{Ptr{PetscCoarsenData}},Ref{Ptr{PetscCoarsenData}}})
    ccall((:MatCoarsenGetData,petscRealSingle),PetscErrorCode,(MatCoarsen,Ptr{Ptr{PetscCoarsenData}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatCoarsenApply(arg0::Type{Float32},arg1::MatCoarsen)
    ccall((:MatCoarsenApply,petscRealSingle),PetscErrorCode,(MatCoarsen,),arg1)
end
=#
#= skipping function with undefined symbols:
 function MatCoarsenDestroy(arg0::Type{Float32},arg1::Union{Ptr{MatCoarsen},StridedArray{MatCoarsen},Ptr{MatCoarsen},Ref{MatCoarsen}})
    ccall((:MatCoarsenDestroy,petscRealSingle),PetscErrorCode,(Ptr{MatCoarsen},),arg1)
end
=#
function MatCoarsenRegister(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatCoarsenRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

#= skipping function with undefined symbols:
 function MatCoarsenView(arg1::MatCoarsen,arg2::PetscViewer{Float32})
    ccall((:MatCoarsenView,petscRealSingle),PetscErrorCode,(MatCoarsen,PetscViewer{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatCoarsenSetFromOptions(arg0::Type{Float32},arg1::MatCoarsen)
    ccall((:MatCoarsenSetFromOptions,petscRealSingle),PetscErrorCode,(MatCoarsen,),arg1)
end
=#
#= skipping function with undefined symbols:
 function MatCoarsenGetType(arg0::Type{Float32},arg1::MatCoarsen,arg2::Union{Ptr{MatCoarsenType},StridedArray{MatCoarsenType},Ptr{MatCoarsenType},Ref{MatCoarsenType}})
    ccall((:MatCoarsenGetType,petscRealSingle),PetscErrorCode,(MatCoarsen,Ptr{Ptr{UInt8}}),arg1,arg2)
end
=#
function MatMeshToCellGraph(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatMeshToCellGraph,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Mat{Float32}}),arg1,arg2,arg3)
    return err
end

function MatHasOperation(arg1::Mat{Float32},arg2::MatOperation,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:MatHasOperation,petscRealSingle),PetscErrorCode,(Mat{Float32},MatOperation,Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function MatShellSetOperation(arg1::Mat{Float32},arg2::MatOperation,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatShellSetOperation,petscRealSingle),PetscErrorCode,(Mat{Float32},MatOperation,Ptr{Void}),arg1,arg2,arg3)
    return err
end

function MatShellGetOperation(arg1::Mat{Float32},arg2::MatOperation,arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:MatShellGetOperation,petscRealSingle),PetscErrorCode,(Mat{Float32},MatOperation,Ptr{Ptr{Void}}),arg1,arg2,arg3)
    return err
end

function MatShellSetContext(arg1::Mat{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatShellSetContext,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Void}),arg1,arg2)
    return err
end

function MatMPIBAIJSetHashTableFactor(arg1::Mat{Float32},arg2::Float32)
    err = ccall((:MatMPIBAIJSetHashTableFactor,petscRealSingle),PetscErrorCode,(Mat{Float32},Float32),arg1,arg2)
    return err
end

function MatISGetLocalMat(arg1::Mat{Float32},arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatISGetLocalMat,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Mat{Float32}}),arg1,arg2)
    return err
end

function MatISSetLocalMat(arg1::Mat{Float32},arg2::Mat{Float32})
    err = ccall((:MatISSetLocalMat,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32}),arg1,arg2)
    return err
end

function MatISGetMPIXAIJ(arg1::Mat{Float32},arg2::MatReuse,arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatISGetMPIXAIJ,petscRealSingle),PetscErrorCode,(Mat{Float32},MatReuse,Ptr{Mat{Float32}}),arg1,arg2,arg3)
    return err
end

#= skipping function with undefined symbols:
 function MatNullSpaceCreate(arg1::MPI_Comm,arg2::PetscBool,arg3::Integer,arg4::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg5::Union{Ptr{MatNullSpace},StridedArray{MatNullSpace},Ptr{MatNullSpace},Ref{MatNullSpace}})
    ccall((:MatNullSpaceCreate,petscRealSingle),PetscErrorCode,(comm_type,PetscBool,Int64,Ptr{Vec{Float32}},Ptr{MatNullSpace}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function MatNullSpaceSetFunction(arg0::Type{Float32},arg1::MatNullSpace,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:MatNullSpaceSetFunction,petscRealSingle),PetscErrorCode,(MatNullSpace,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function MatNullSpaceDestroy(arg0::Type{Float32},arg1::Union{Ptr{MatNullSpace},StridedArray{MatNullSpace},Ptr{MatNullSpace},Ref{MatNullSpace}})
    ccall((:MatNullSpaceDestroy,petscRealSingle),PetscErrorCode,(Ptr{MatNullSpace},),arg1)
end
=#
#= skipping function with undefined symbols:
 function MatNullSpaceRemove(arg1::MatNullSpace,arg2::Vec{Float32})
    ccall((:MatNullSpaceRemove,petscRealSingle),PetscErrorCode,(MatNullSpace,Vec{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatGetNullSpace(arg1::Mat{Float32},arg2::Union{Ptr{MatNullSpace},StridedArray{MatNullSpace},Ptr{MatNullSpace},Ref{MatNullSpace}})
    ccall((:MatGetNullSpace,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{MatNullSpace}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatGetTransposeNullSpace(arg1::Mat{Float32},arg2::Union{Ptr{MatNullSpace},StridedArray{MatNullSpace},Ptr{MatNullSpace},Ref{MatNullSpace}})
    ccall((:MatGetTransposeNullSpace,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{MatNullSpace}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatSetTransposeNullSpace(arg1::Mat{Float32},arg2::MatNullSpace)
    ccall((:MatSetTransposeNullSpace,petscRealSingle),PetscErrorCode,(Mat{Float32},MatNullSpace),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatSetNullSpace(arg1::Mat{Float32},arg2::MatNullSpace)
    ccall((:MatSetNullSpace,petscRealSingle),PetscErrorCode,(Mat{Float32},MatNullSpace),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatSetNearNullSpace(arg1::Mat{Float32},arg2::MatNullSpace)
    ccall((:MatSetNearNullSpace,petscRealSingle),PetscErrorCode,(Mat{Float32},MatNullSpace),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatGetNearNullSpace(arg1::Mat{Float32},arg2::Union{Ptr{MatNullSpace},StridedArray{MatNullSpace},Ptr{MatNullSpace},Ref{MatNullSpace}})
    ccall((:MatGetNearNullSpace,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{MatNullSpace}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatNullSpaceTest(arg1::MatNullSpace,arg2::Mat{Float32},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:MatNullSpaceTest,petscRealSingle),PetscErrorCode,(MatNullSpace,Mat{Float32},Ptr{PetscBool}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function MatNullSpaceView(arg1::MatNullSpace,arg2::PetscViewer{Float32})
    ccall((:MatNullSpaceView,petscRealSingle),PetscErrorCode,(MatNullSpace,PetscViewer{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatNullSpaceGetVecs(arg1::MatNullSpace,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{Vec{Float32}}},StridedArray{Ptr{Vec{Float32}}},Ptr{Ptr{Vec{Float32}}},Ref{Ptr{Vec{Float32}}}})
    ccall((:MatNullSpaceGetVecs,petscRealSingle),PetscErrorCode,(MatNullSpace,Ptr{PetscBool},Ptr{Int64},Ptr{Ptr{Vec{Float32}}}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function MatNullSpaceCreateRigidBody(arg1::Vec{Float32},arg2::Union{Ptr{MatNullSpace},StridedArray{MatNullSpace},Ptr{MatNullSpace},Ref{MatNullSpace}})
    ccall((:MatNullSpaceCreateRigidBody,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{MatNullSpace}),arg1,arg2)
end
=#
function MatReorderingSeqSBAIJ(arg1::Mat{Float32},arg2::IS{Float32})
    err = ccall((:MatReorderingSeqSBAIJ,petscRealSingle),PetscErrorCode,(Mat{Float32},IS{Float32}),arg1,arg2)
    return err
end

function MatMPISBAIJSetHashTableFactor(arg1::Mat{Float32},arg2::Float32)
    err = ccall((:MatMPISBAIJSetHashTableFactor,petscRealSingle),PetscErrorCode,(Mat{Float32},Float32),arg1,arg2)
    return err
end

function MatSeqSBAIJSetColumnIndices(arg1::Mat{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatSeqSBAIJSetColumnIndices,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function MatSeqBAIJInvertBlockDiagonal(arg1::Mat{Float32})
    err = ccall((:MatSeqBAIJInvertBlockDiagonal,petscRealSingle),PetscErrorCode,(Mat{Float32},),arg1)
    return err
end

function MatCreateMAIJ(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateMAIJ,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Mat{Float32}}),arg1,arg2,arg3)
    return err
end

function MatMAIJRedimension(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatMAIJRedimension,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Mat{Float32}}),arg1,arg2,arg3)
    return err
end

function MatMAIJGetAIJ(arg1::Mat{Float32},arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatMAIJGetAIJ,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Mat{Float32}}),arg1,arg2)
    return err
end

function MatComputeExplicitOperator(arg1::Mat{Float32},arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatComputeExplicitOperator,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Mat{Float32}}),arg1,arg2)
    return err
end

function MatDiagonalScaleLocal(arg1::Mat{Float32},arg2::Vec{Float32})
    err = ccall((:MatDiagonalScaleLocal,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32}),arg1,arg2)
    return err
end

function MatCreateMFFD(arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateMFFD,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatMFFDSetBase(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:MatMFFDSetBase,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function MatMFFDSetFunction(arg1::Mat{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatMFFDSetFunction,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function MatMFFDSetFunctioni(arg1::Mat{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatMFFDSetFunctioni,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Void}),arg1,arg2)
    return err
end

function MatMFFDSetFunctioniBase(arg1::Mat{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatMFFDSetFunctioniBase,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Void}),arg1,arg2)
    return err
end

#= skipping function with undefined symbols:
 function MatMFFDAddNullSpace(arg1::Mat{Float32},arg2::MatNullSpace)
    ccall((:MatMFFDAddNullSpace,petscRealSingle),PetscErrorCode,(Mat{Float32},MatNullSpace),arg1,arg2)
end
=#
function MatMFFDSetHHistory(arg1::Mat{Float32},arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Integer)
    err = ccall((:MatMFFDSetHHistory,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Float32},Int64),arg1,arg2,arg3)
    return err
end

function MatMFFDResetHHistory(arg1::Mat{Float32})
    err = ccall((:MatMFFDResetHHistory,petscRealSingle),PetscErrorCode,(Mat{Float32},),arg1)
    return err
end

function MatMFFDSetFunctionError(arg1::Mat{Float32},arg2::Float32)
    err = ccall((:MatMFFDSetFunctionError,petscRealSingle),PetscErrorCode,(Mat{Float32},Float32),arg1,arg2)
    return err
end

function MatMFFDSetPeriod(arg1::Mat{Float32},arg2::Integer)
    err = ccall((:MatMFFDSetPeriod,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64),arg1,arg2)
    return err
end

function MatMFFDGetH(arg1::Mat{Float32},arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:MatMFFDGetH,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Float32}),arg1,arg2)
    return err
end

function MatMFFDSetOptionsPrefix(arg1::Mat{Float32},arg2::Union{ByteString,Symbol})
    err = ccall((:MatMFFDSetOptionsPrefix,petscRealSingle),PetscErrorCode,(Mat{Float32},Cstring),arg1,arg2)
    return err
end

function MatMFFDCheckPositivity(arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg2::Vec{Float32},arg3::Vec{Float32},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:MatMFFDCheckPositivity,petscRealSingle),PetscErrorCode,(Ptr{Void},Vec{Float32},Vec{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function MatMFFDSetCheckh(arg1::Mat{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatMFFDSetCheckh,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function MatMFFDSetType(arg1::Mat{Float32},arg2::MatMFFDType)
    err = ccall((:MatMFFDSetType,petscRealSingle),PetscErrorCode,(Mat{Float32},Cstring),arg1,arg2)
    return err
end

function MatMFFDRegister(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:MatMFFDRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function MatMFFDDSSetUmin(arg1::Mat{Float32},arg2::Float32)
    err = ccall((:MatMFFDDSSetUmin,petscRealSingle),PetscErrorCode,(Mat{Float32},Float32),arg1,arg2)
    return err
end

function MatMFFDWPSetComputeNormU(arg1::Mat{Float32},arg2::PetscBool)
    err = ccall((:MatMFFDWPSetComputeNormU,petscRealSingle),PetscErrorCode,(Mat{Float32},PetscBool),arg1,arg2)
    return err
end

function PetscViewerMathematicaPutMatrix(arg1::PetscViewer{Float32},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:PetscViewerMathematicaPutMatrix,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Int64,Int64,Ptr{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function PetscViewerMathematicaPutCSRMatrix(arg1::PetscViewer{Float32},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:PetscViewerMathematicaPutCSRMatrix,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},Int64,Int64,Ptr{Int64},Ptr{Int64},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatCreateNest(arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg4::Integer,arg5::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg6::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}},arg7::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateNest,petscRealSingle),PetscErrorCode,(comm_type,Int64,Ptr{IS{Float32}},Int64,Ptr{IS{Float32}},Ptr{Mat{Float32}},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function MatNestGetSize(arg1::Mat{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatNestGetSize,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function MatNestGetISs(arg1::Mat{Float32},arg2::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:MatNestGetISs,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{IS{Float32}},Ptr{IS{Float32}}),arg1,arg2,arg3)
    return err
end

function MatNestGetLocalISs(arg1::Mat{Float32},arg2::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:MatNestGetLocalISs,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{IS{Float32}},Ptr{IS{Float32}}),arg1,arg2,arg3)
    return err
end

function MatNestGetSubMats(arg1::Mat{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{Ptr{Mat{Float32}}}},StridedArray{Ptr{Ptr{Mat{Float32}}}},Ptr{Ptr{Ptr{Mat{Float32}}}},Ref{Ptr{Ptr{Mat{Float32}}}}})
    err = ccall((:MatNestGetSubMats,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Int64},Ptr{Int64},Ptr{Ptr{Ptr{Mat{Float32}}}}),arg1,arg2,arg3,arg4)
    return err
end

function MatNestGetSubMat(arg1::Mat{Float32},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatNestGetSubMat,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Int64,Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function MatNestSetVecType(arg1::Mat{Float32},arg2::VecType)
    err = ccall((:MatNestSetVecType,petscRealSingle),PetscErrorCode,(Mat{Float32},Cstring),arg1,arg2)
    return err
end

function MatNestSetSubMats(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg4::Integer,arg5::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg6::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatNestSetSubMats,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{IS{Float32}},Int64,Ptr{IS{Float32}},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatNestSetSubMat(arg1::Mat{Float32},arg2::Integer,arg3::Integer,arg4::Mat{Float32})
    err = ccall((:MatNestSetSubMat,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Int64,Mat{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function MatChop(arg1::Mat{Float32},arg2::Float32)
    err = ccall((:MatChop,petscRealSingle),PetscErrorCode,(Mat{Float32},Float32),arg1,arg2)
    return err
end

function MatComputeBandwidth(arg1::Mat{Float32},arg2::Float32,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:MatComputeBandwidth,petscRealSingle),PetscErrorCode,(Mat{Float32},Float32,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function MatSubdomainsCreateCoalesce(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{IS{Float32}}},StridedArray{Ptr{IS{Float32}}},Ptr{Ptr{IS{Float32}}},Ref{Ptr{IS{Float32}}}})
    err = ccall((:MatSubdomainsCreateCoalesce,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Int64},Ptr{Ptr{IS{Float32}}}),arg1,arg2,arg3,arg4)
    return err
end

function DMInitializePackage(arg0::Type{Float32})
    err = ccall((:DMInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

#= skipping function with undefined symbols:
 function DMCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:DMCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{DM}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMClone(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:DMClone,petscRealSingle),PetscErrorCode,(DM,Ptr{DM}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMSetType(arg0::Type{Float32},arg1::DM,arg2::DMType)
    ccall((:DMSetType,petscRealSingle),PetscErrorCode,(DM,Cstring),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMGetType(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{DMType},StridedArray{DMType},Ptr{DMType},Ref{DMType}})
    ccall((:DMGetType,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{UInt8}}),arg1,arg2)
end
=#
function DMRegister(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:DMRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function DMRegisterDestroy(arg0::Type{Float32})
    err = ccall((:DMRegisterDestroy,petscRealSingle),PetscErrorCode,())
    return err
end

#= skipping function with undefined symbols:
 function DMView(arg1::DM,arg2::PetscViewer{Float32})
    ccall((:DMView,petscRealSingle),PetscErrorCode,(DM,PetscViewer{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMLoad(arg1::DM,arg2::PetscViewer{Float32})
    ccall((:DMLoad,petscRealSingle),PetscErrorCode,(DM,PetscViewer{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMDestroy(arg0::Type{Float32},arg1::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:DMDestroy,petscRealSingle),PetscErrorCode,(Ptr{DM},),arg1)
end
=#
#= skipping function with undefined symbols:
 function DMCreateGlobalVector(arg1::DM,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    ccall((:DMCreateGlobalVector,petscRealSingle),PetscErrorCode,(DM,Ptr{Vec{Float32}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMCreateLocalVector(arg1::DM,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    ccall((:DMCreateLocalVector,petscRealSingle),PetscErrorCode,(DM,Ptr{Vec{Float32}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMGetLocalVector(arg1::DM,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    ccall((:DMGetLocalVector,petscRealSingle),PetscErrorCode,(DM,Ptr{Vec{Float32}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMRestoreLocalVector(arg1::DM,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    ccall((:DMRestoreLocalVector,petscRealSingle),PetscErrorCode,(DM,Ptr{Vec{Float32}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMGetGlobalVector(arg1::DM,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    ccall((:DMGetGlobalVector,petscRealSingle),PetscErrorCode,(DM,Ptr{Vec{Float32}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMRestoreGlobalVector(arg1::DM,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    ccall((:DMRestoreGlobalVector,petscRealSingle),PetscErrorCode,(DM,Ptr{Vec{Float32}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMClearGlobalVectors(arg0::Type{Float32},arg1::DM)
    ccall((:DMClearGlobalVectors,petscRealSingle),PetscErrorCode,(DM,),arg1)
end
=#
#= skipping function with undefined symbols:
 function DMGetNamedGlobalVector(arg1::DM,arg2::Union{ByteString,Symbol},arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    ccall((:DMGetNamedGlobalVector,petscRealSingle),PetscErrorCode,(DM,Cstring,Ptr{Vec{Float32}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMRestoreNamedGlobalVector(arg1::DM,arg2::Union{ByteString,Symbol},arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    ccall((:DMRestoreNamedGlobalVector,petscRealSingle),PetscErrorCode,(DM,Cstring,Ptr{Vec{Float32}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMGetNamedLocalVector(arg1::DM,arg2::Union{ByteString,Symbol},arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    ccall((:DMGetNamedLocalVector,petscRealSingle),PetscErrorCode,(DM,Cstring,Ptr{Vec{Float32}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMRestoreNamedLocalVector(arg1::DM,arg2::Union{ByteString,Symbol},arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    ccall((:DMRestoreNamedLocalVector,petscRealSingle),PetscErrorCode,(DM,Cstring,Ptr{Vec{Float32}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMGetLocalToGlobalMapping(arg1::DM,arg2::Union{Ptr{ISLocalToGlobalMapping{Float32}},StridedArray{ISLocalToGlobalMapping{Float32}},Ptr{ISLocalToGlobalMapping{Float32}},Ref{ISLocalToGlobalMapping{Float32}}})
    ccall((:DMGetLocalToGlobalMapping,petscRealSingle),PetscErrorCode,(DM,Ptr{ISLocalToGlobalMapping{Float32}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMCreateFieldIS(arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}},arg4::Union{Ptr{Ptr{IS{Float32}}},StridedArray{Ptr{IS{Float32}}},Ptr{Ptr{IS{Float32}}},Ref{Ptr{IS{Float32}}}})
    ccall((:DMCreateFieldIS,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64},Ptr{Ptr{Ptr{UInt8}}},Ptr{Ptr{IS{Float32}}}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMGetBlockSize(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMGetBlockSize,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMCreateColoring(arg1::DM,arg2::ISColoringType,arg3::Union{Ptr{ISColoring{Float32}},StridedArray{ISColoring{Float32}},Ptr{ISColoring{Float32}},Ref{ISColoring{Float32}}})
    ccall((:DMCreateColoring,petscRealSingle),PetscErrorCode,(DM,ISColoringType,Ptr{ISColoring{Float32}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMCreateMatrix(arg1::DM,arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    ccall((:DMCreateMatrix,petscRealSingle),PetscErrorCode,(DM,Ptr{Mat{Float32}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMSetMatrixPreallocateOnly(arg0::Type{Float32},arg1::DM,arg2::PetscBool)
    ccall((:DMSetMatrixPreallocateOnly,petscRealSingle),PetscErrorCode,(DM,PetscBool),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMCreateInterpolation(arg1::DM,arg2::DM,arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}},arg4::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    ccall((:DMCreateInterpolation,petscRealSingle),PetscErrorCode,(DM,DM,Ptr{Mat{Float32}},Ptr{Vec{Float32}}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMCreateInjection(arg1::DM,arg2::DM,arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    ccall((:DMCreateInjection,petscRealSingle),PetscErrorCode,(DM,DM,Ptr{Mat{Float32}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMGetWorkArray(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::PetscDataType,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMGetWorkArray,petscRealSingle),PetscErrorCode,(DM,Int64,PetscDataType,Ptr{Void}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMRestoreWorkArray(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::PetscDataType,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMRestoreWorkArray,petscRealSingle),PetscErrorCode,(DM,Int64,PetscDataType,Ptr{Void}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMRefine(arg0::Type{Float32},arg1::DM,arg2::MPI_Comm,arg3::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:DMRefine,petscRealSingle),PetscErrorCode,(DM,comm_type,Ptr{DM}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMCoarsen(arg0::Type{Float32},arg1::DM,arg2::MPI_Comm,arg3::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:DMCoarsen,petscRealSingle),PetscErrorCode,(DM,comm_type,Ptr{DM}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMRefineHierarchy(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:DMRefineHierarchy,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{DM}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMCoarsenHierarchy(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:DMCoarsenHierarchy,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{DM}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMCoarsenHookAdd(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMCoarsenHookAdd,petscRealSingle),PetscErrorCode,(DM,Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMRefineHookAdd(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMRefineHookAdd,petscRealSingle),PetscErrorCode,(DM,Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMRestrict(arg1::DM,arg2::Mat{Float32},arg3::Vec{Float32},arg4::Mat{Float32},arg5::DM)
    ccall((:DMRestrict,petscRealSingle),PetscErrorCode,(DM,Mat{Float32},Vec{Float32},Mat{Float32},DM),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function DMInterpolate(arg1::DM,arg2::Mat{Float32},arg3::DM)
    ccall((:DMInterpolate,petscRealSingle),PetscErrorCode,(DM,Mat{Float32},DM),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMSetFromOptions(arg0::Type{Float32},arg1::DM)
    ccall((:DMSetFromOptions,petscRealSingle),PetscErrorCode,(DM,),arg1)
end
=#
#= skipping function with undefined symbols:
 function DMCreateInterpolationScale(arg1::DM,arg2::DM,arg3::Mat{Float32},arg4::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    ccall((:DMCreateInterpolationScale,petscRealSingle),PetscErrorCode,(DM,DM,Mat{Float32},Ptr{Vec{Float32}}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMCreateAggregates(arg1::DM,arg2::DM,arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    ccall((:DMCreateAggregates,petscRealSingle),PetscErrorCode,(DM,DM,Ptr{Mat{Float32}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMGlobalToLocalHookAdd(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMGlobalToLocalHookAdd,petscRealSingle),PetscErrorCode,(DM,Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMLocalToGlobalHookAdd(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMLocalToGlobalHookAdd,petscRealSingle),PetscErrorCode,(DM,Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMGlobalToLocalBegin(arg1::DM,arg2::Vec{Float32},arg3::InsertMode,arg4::Vec{Float32})
    ccall((:DMGlobalToLocalBegin,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},InsertMode,Vec{Float32}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMGlobalToLocalEnd(arg1::DM,arg2::Vec{Float32},arg3::InsertMode,arg4::Vec{Float32})
    ccall((:DMGlobalToLocalEnd,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},InsertMode,Vec{Float32}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMLocalToGlobalBegin(arg1::DM,arg2::Vec{Float32},arg3::InsertMode,arg4::Vec{Float32})
    ccall((:DMLocalToGlobalBegin,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},InsertMode,Vec{Float32}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMLocalToGlobalEnd(arg1::DM,arg2::Vec{Float32},arg3::InsertMode,arg4::Vec{Float32})
    ccall((:DMLocalToGlobalEnd,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},InsertMode,Vec{Float32}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMLocalToLocalBegin(arg1::DM,arg2::Vec{Float32},arg3::InsertMode,arg4::Vec{Float32})
    ccall((:DMLocalToLocalBegin,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},InsertMode,Vec{Float32}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMLocalToLocalEnd(arg1::DM,arg2::Vec{Float32},arg3::InsertMode,arg4::Vec{Float32})
    ccall((:DMLocalToLocalEnd,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},InsertMode,Vec{Float32}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMConvert(arg0::Type{Float32},arg1::DM,arg2::DMType,arg3::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:DMConvert,petscRealSingle),PetscErrorCode,(DM,Cstring,Ptr{DM}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMGetDimension(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMGetDimension,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMSetDimension(arg0::Type{Float32},arg1::DM,arg2::Integer)
    ccall((:DMSetDimension,petscRealSingle),PetscErrorCode,(DM,Int64),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMGetDimPoints(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMGetDimPoints,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMGetCoordinateDM(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:DMGetCoordinateDM,petscRealSingle),PetscErrorCode,(DM,Ptr{DM}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMSetCoordinateDM(arg0::Type{Float32},arg1::DM,arg2::DM)
    ccall((:DMSetCoordinateDM,petscRealSingle),PetscErrorCode,(DM,DM),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMGetCoordinateDim(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMGetCoordinateDim,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMSetCoordinateDim(arg0::Type{Float32},arg1::DM,arg2::Integer)
    ccall((:DMSetCoordinateDim,petscRealSingle),PetscErrorCode,(DM,Int64),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMGetCoordinateSection(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{PetscSection},StridedArray{PetscSection},Ptr{PetscSection},Ref{PetscSection}})
    ccall((:DMGetCoordinateSection,petscRealSingle),PetscErrorCode,(DM,Ptr{PetscSection}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMSetCoordinateSection(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::PetscSection)
    ccall((:DMSetCoordinateSection,petscRealSingle),PetscErrorCode,(DM,Int64,PetscSection),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMGetCoordinates(arg1::DM,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    ccall((:DMGetCoordinates,petscRealSingle),PetscErrorCode,(DM,Ptr{Vec{Float32}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMSetCoordinates(arg1::DM,arg2::Vec{Float32})
    ccall((:DMSetCoordinates,petscRealSingle),PetscErrorCode,(DM,Vec{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMGetCoordinatesLocal(arg1::DM,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    ccall((:DMGetCoordinatesLocal,petscRealSingle),PetscErrorCode,(DM,Ptr{Vec{Float32}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMSetCoordinatesLocal(arg1::DM,arg2::Vec{Float32})
    ccall((:DMSetCoordinatesLocal,petscRealSingle),PetscErrorCode,(DM,Vec{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMLocatePoints(arg1::DM,arg2::Vec{Float32},arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    ccall((:DMLocatePoints,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},Ptr{IS{Float32}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMGetPeriodicity(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg3::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg4::Union{Ptr{Ptr{DMBoundaryType}},StridedArray{Ptr{DMBoundaryType}},Ptr{Ptr{DMBoundaryType}},Ref{Ptr{DMBoundaryType}}})
    ccall((:DMGetPeriodicity,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{Float32}},Ptr{Ptr{Float32}},Ptr{Ptr{DMBoundaryType}}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMSetPeriodicity(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{DMBoundaryType},StridedArray{DMBoundaryType},Ptr{DMBoundaryType},Ref{DMBoundaryType}})
    ccall((:DMSetPeriodicity,petscRealSingle),PetscErrorCode,(DM,Ptr{Float32},Ptr{Float32},Ptr{DMBoundaryType}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMSubDomainHookAdd(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMSubDomainHookAdd,petscRealSingle),PetscErrorCode,(DM,Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMSubDomainRestrict(arg1::DM,arg2::VecScatter{Float32},arg3::VecScatter{Float32},arg4::DM)
    ccall((:DMSubDomainRestrict,petscRealSingle),PetscErrorCode,(DM,VecScatter{Float32},VecScatter{Float32},DM),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMSetOptionsPrefix(arg0::Type{Float32},arg1::DM,arg2::Union{ByteString,Symbol})
    ccall((:DMSetOptionsPrefix,petscRealSingle),PetscErrorCode,(DM,Cstring),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMSetVecType(arg0::Type{Float32},arg1::DM,arg2::VecType)
    ccall((:DMSetVecType,petscRealSingle),PetscErrorCode,(DM,Cstring),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMGetVecType(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{VecType},StridedArray{VecType},Ptr{VecType},Ref{VecType}})
    ccall((:DMGetVecType,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{UInt8}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMSetMatType(arg0::Type{Float32},arg1::DM,arg2::MatType)
    ccall((:DMSetMatType,petscRealSingle),PetscErrorCode,(DM,Cstring),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMGetMatType(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{MatType},StridedArray{MatType},Ptr{MatType},Ref{MatType}})
    ccall((:DMGetMatType,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{UInt8}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMSetApplicationContext(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMSetApplicationContext,petscRealSingle),PetscErrorCode,(DM,Ptr{Void}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMSetApplicationContextDestroy(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMSetApplicationContextDestroy,petscRealSingle),PetscErrorCode,(DM,Ptr{Void}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMGetApplicationContext(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMGetApplicationContext,petscRealSingle),PetscErrorCode,(DM,Ptr{Void}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMSetVariableBounds(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMSetVariableBounds,petscRealSingle),PetscErrorCode,(DM,Ptr{Void}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMHasVariableBounds(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:DMHasVariableBounds,petscRealSingle),PetscErrorCode,(DM,Ptr{PetscBool}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMHasColoring(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:DMHasColoring,petscRealSingle),PetscErrorCode,(DM,Ptr{PetscBool}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMComputeVariableBounds(arg1::DM,arg2::Vec{Float32},arg3::Vec{Float32})
    ccall((:DMComputeVariableBounds,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMCreateSubDM(arg1::DM,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg5::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:DMCreateSubDM,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Int64},Ptr{IS{Float32}},Ptr{DM}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function DMCreateFieldDecomposition(arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}},arg4::Union{Ptr{Ptr{IS{Float32}}},StridedArray{Ptr{IS{Float32}}},Ptr{Ptr{IS{Float32}}},Ref{Ptr{IS{Float32}}}},arg5::Union{Ptr{Ptr{DM}},StridedArray{Ptr{DM}},Ptr{Ptr{DM}},Ref{Ptr{DM}}})
    ccall((:DMCreateFieldDecomposition,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64},Ptr{Ptr{Ptr{UInt8}}},Ptr{Ptr{IS{Float32}}},Ptr{Ptr{DM}}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function DMCreateDomainDecomposition(arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}},arg4::Union{Ptr{Ptr{IS{Float32}}},StridedArray{Ptr{IS{Float32}}},Ptr{Ptr{IS{Float32}}},Ref{Ptr{IS{Float32}}}},arg5::Union{Ptr{Ptr{IS{Float32}}},StridedArray{Ptr{IS{Float32}}},Ptr{Ptr{IS{Float32}}},Ref{Ptr{IS{Float32}}}},arg6::Union{Ptr{Ptr{DM}},StridedArray{Ptr{DM}},Ptr{Ptr{DM}},Ref{Ptr{DM}}})
    ccall((:DMCreateDomainDecomposition,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64},Ptr{Ptr{Ptr{UInt8}}},Ptr{Ptr{IS{Float32}}},Ptr{Ptr{IS{Float32}}},Ptr{Ptr{DM}}),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
#= skipping function with undefined symbols:
 function DMCreateDomainDecompositionScatters(arg1::DM,arg2::Integer,arg3::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}},arg4::Union{Ptr{Ptr{VecScatter{Float32}}},StridedArray{Ptr{VecScatter{Float32}}},Ptr{Ptr{VecScatter{Float32}}},Ref{Ptr{VecScatter{Float32}}}},arg5::Union{Ptr{Ptr{VecScatter{Float32}}},StridedArray{Ptr{VecScatter{Float32}}},Ptr{Ptr{VecScatter{Float32}}},Ref{Ptr{VecScatter{Float32}}}},arg6::Union{Ptr{Ptr{VecScatter{Float32}}},StridedArray{Ptr{VecScatter{Float32}}},Ptr{Ptr{VecScatter{Float32}}},Ref{Ptr{VecScatter{Float32}}}})
    ccall((:DMCreateDomainDecompositionScatters,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{DM},Ptr{Ptr{VecScatter{Float32}}},Ptr{Ptr{VecScatter{Float32}}},Ptr{Ptr{VecScatter{Float32}}}),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
#= skipping function with undefined symbols:
 function DMGetRefineLevel(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMGetRefineLevel,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMGetCoarsenLevel(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMGetCoarsenLevel,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64}),arg1,arg2)
end
=#
function DMFinalizePackage(arg0::Type{Float32})
    err = ccall((:DMFinalizePackage,petscRealSingle),PetscErrorCode,())
    return err
end

#= skipping function with undefined symbols:
 function VecGetDM(arg1::Vec{Float32},arg2::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:VecGetDM,petscRealSingle),PetscErrorCode,(Vec{Float32},Ptr{DM}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function VecSetDM(arg1::Vec{Float32},arg2::DM)
    ccall((:VecSetDM,petscRealSingle),PetscErrorCode,(Vec{Float32},DM),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatGetDM(arg1::Mat{Float32},arg2::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:MatGetDM,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{DM}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatSetDM(arg1::Mat{Float32},arg2::DM)
    ccall((:MatSetDM,petscRealSingle),PetscErrorCode,(Mat{Float32},DM),arg1,arg2)
end
=#
function DMPrintCellVector(arg0::Type{Float32},arg1::Integer,arg2::Union{ByteString,Symbol},arg3::Integer,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:DMPrintCellVector,petscRealSingle),PetscErrorCode,(Int64,Cstring,Int64,Ptr{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function DMPrintCellMatrix(arg0::Type{Float32},arg1::Integer,arg2::Union{ByteString,Symbol},arg3::Integer,arg4::Integer,arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:DMPrintCellMatrix,petscRealSingle),PetscErrorCode,(Int64,Cstring,Int64,Int64,Ptr{Float32}),arg1,arg2,arg3,arg4,arg5)
    return err
end

#= skipping function with undefined symbols:
 function DMPrintLocalVec(arg1::DM,arg2::Union{ByteString,Symbol},arg3::Float32,arg4::Vec{Float32})
    ccall((:DMPrintLocalVec,petscRealSingle),PetscErrorCode,(DM,Cstring,Float32,Vec{Float32}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMGetDefaultSection(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{PetscSection},StridedArray{PetscSection},Ptr{PetscSection},Ref{PetscSection}})
    ccall((:DMGetDefaultSection,petscRealSingle),PetscErrorCode,(DM,Ptr{PetscSection}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMSetDefaultSection(arg0::Type{Float32},arg1::DM,arg2::PetscSection)
    ccall((:DMSetDefaultSection,petscRealSingle),PetscErrorCode,(DM,PetscSection),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMGetDefaultConstraints(arg1::DM,arg2::Union{Ptr{PetscSection},StridedArray{PetscSection},Ptr{PetscSection},Ref{PetscSection}},arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    ccall((:DMGetDefaultConstraints,petscRealSingle),PetscErrorCode,(DM,Ptr{PetscSection},Ptr{Mat{Float32}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMSetDefaultConstraints(arg1::DM,arg2::PetscSection,arg3::Mat{Float32})
    ccall((:DMSetDefaultConstraints,petscRealSingle),PetscErrorCode,(DM,PetscSection,Mat{Float32}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMGetDefaultGlobalSection(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{PetscSection},StridedArray{PetscSection},Ptr{PetscSection},Ref{PetscSection}})
    ccall((:DMGetDefaultGlobalSection,petscRealSingle),PetscErrorCode,(DM,Ptr{PetscSection}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMSetDefaultGlobalSection(arg0::Type{Float32},arg1::DM,arg2::PetscSection)
    ccall((:DMSetDefaultGlobalSection,petscRealSingle),PetscErrorCode,(DM,PetscSection),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMGetDefaultSF(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{PetscSF},StridedArray{PetscSF},Ptr{PetscSF},Ref{PetscSF}})
    ccall((:DMGetDefaultSF,petscRealSingle),PetscErrorCode,(DM,Ptr{PetscSF}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMSetDefaultSF(arg0::Type{Float32},arg1::DM,arg2::PetscSF)
    ccall((:DMSetDefaultSF,petscRealSingle),PetscErrorCode,(DM,PetscSF),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMCreateDefaultSF(arg0::Type{Float32},arg1::DM,arg2::PetscSection,arg3::PetscSection)
    ccall((:DMCreateDefaultSF,petscRealSingle),PetscErrorCode,(DM,PetscSection,PetscSection),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMGetPointSF(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{PetscSF},StridedArray{PetscSF},Ptr{PetscSF},Ref{PetscSF}})
    ccall((:DMGetPointSF,petscRealSingle),PetscErrorCode,(DM,Ptr{PetscSF}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMSetPointSF(arg0::Type{Float32},arg1::DM,arg2::PetscSF)
    ccall((:DMSetPointSF,petscRealSingle),PetscErrorCode,(DM,PetscSF),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMGetOutputDM(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:DMGetOutputDM,petscRealSingle),PetscErrorCode,(DM,Ptr{DM}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMGetOutputSequenceNumber(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:DMGetOutputSequenceNumber,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64},Ptr{Float32}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMSetOutputSequenceNumber(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Float32)
    ccall((:DMSetOutputSequenceNumber,petscRealSingle),PetscErrorCode,(DM,Int64,Float32),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMOutputSequenceLoad(arg1::DM,arg2::PetscViewer{Float32},arg3::Union{ByteString,Symbol},arg4::Integer,arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:DMOutputSequenceLoad,petscRealSingle),PetscErrorCode,(DM,PetscViewer{Float32},Cstring,Int64,Ptr{Float32}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function DMGetDS(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{PetscDS},StridedArray{PetscDS},Ptr{PetscDS},Ref{PetscDS}})
    ccall((:DMGetDS,petscRealSingle),PetscErrorCode,(DM,Ptr{PetscDS}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMSetDS(arg0::Type{Float32},arg1::DM,arg2::PetscDS)
    ccall((:DMSetDS,petscRealSingle),PetscErrorCode,(DM,PetscDS),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMGetNumFields(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMGetNumFields,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMSetNumFields(arg0::Type{Float32},arg1::DM,arg2::Integer)
    ccall((:DMSetNumFields,petscRealSingle),PetscErrorCode,(DM,Int64),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMGetField(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{PetscObject},StridedArray{PetscObject},Ptr{PetscObject},Ref{PetscObject}})
    ccall((:DMGetField,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{PetscObject}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMSetField(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::PetscObject)
    ccall((:DMSetField,petscRealSingle),PetscErrorCode,(DM,Int64,PetscObject),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMInterpolationCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{DMInterpolationInfo},StridedArray{DMInterpolationInfo},Ptr{DMInterpolationInfo},Ref{DMInterpolationInfo}})
    ccall((:DMInterpolationCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{DMInterpolationInfo}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMInterpolationSetDim(arg0::Type{Float32},arg1::DMInterpolationInfo,arg2::Integer)
    ccall((:DMInterpolationSetDim,petscRealSingle),PetscErrorCode,(DMInterpolationInfo,Int64),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMInterpolationGetDim(arg0::Type{Float32},arg1::DMInterpolationInfo,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMInterpolationGetDim,petscRealSingle),PetscErrorCode,(DMInterpolationInfo,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMInterpolationSetDof(arg0::Type{Float32},arg1::DMInterpolationInfo,arg2::Integer)
    ccall((:DMInterpolationSetDof,petscRealSingle),PetscErrorCode,(DMInterpolationInfo,Int64),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMInterpolationGetDof(arg0::Type{Float32},arg1::DMInterpolationInfo,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMInterpolationGetDof,petscRealSingle),PetscErrorCode,(DMInterpolationInfo,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMInterpolationAddPoints(arg0::Type{Float32},arg1::DMInterpolationInfo,arg2::Integer,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:DMInterpolationAddPoints,petscRealSingle),PetscErrorCode,(DMInterpolationInfo,Int64,Ptr{Float32}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMInterpolationSetUp(arg0::Type{Float32},arg1::DMInterpolationInfo,arg2::DM,arg3::PetscBool)
    ccall((:DMInterpolationSetUp,petscRealSingle),PetscErrorCode,(DMInterpolationInfo,DM,PetscBool),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMInterpolationGetCoordinates(arg1::DMInterpolationInfo,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    ccall((:DMInterpolationGetCoordinates,petscRealSingle),PetscErrorCode,(DMInterpolationInfo,Ptr{Vec{Float32}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMInterpolationGetVector(arg1::DMInterpolationInfo,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    ccall((:DMInterpolationGetVector,petscRealSingle),PetscErrorCode,(DMInterpolationInfo,Ptr{Vec{Float32}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMInterpolationRestoreVector(arg1::DMInterpolationInfo,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    ccall((:DMInterpolationRestoreVector,petscRealSingle),PetscErrorCode,(DMInterpolationInfo,Ptr{Vec{Float32}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMInterpolationEvaluate(arg1::DMInterpolationInfo,arg2::DM,arg3::Vec{Float32},arg4::Vec{Float32})
    ccall((:DMInterpolationEvaluate,petscRealSingle),PetscErrorCode,(DMInterpolationInfo,DM,Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMInterpolationDestroy(arg0::Type{Float32},arg1::Union{Ptr{DMInterpolationInfo},StridedArray{DMInterpolationInfo},Ptr{DMInterpolationInfo},Ref{DMInterpolationInfo}})
    ccall((:DMInterpolationDestroy,petscRealSingle),PetscErrorCode,(Ptr{DMInterpolationInfo},),arg1)
end
=#
#= skipping function with undefined symbols:
 function PFCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Union{Ptr{PF},StridedArray{PF},Ptr{PF},Ref{PF}})
    ccall((:PFCreate,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Ptr{PF}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function PFSetType(arg0::Type{Float32},arg1::PF,arg2::PFType,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:PFSetType,petscRealSingle),PetscErrorCode,(PF,Cstring,Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PFSet(arg0::Type{Float32},arg1::PF,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:PFSet,petscRealSingle),PetscErrorCode,(PF,Ptr{Void},Ptr{Void},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
#= skipping function with undefined symbols:
 function PFApply(arg0::Type{Float32},arg1::PF,arg2::Integer,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:PFApply,petscRealSingle),PetscErrorCode,(PF,Int64,Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function PFApplyVec(arg1::PF,arg2::Vec{Float32},arg3::Vec{Float32})
    ccall((:PFApplyVec,petscRealSingle),PetscErrorCode,(PF,Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
end
=#
function PFInitializePackage(arg0::Type{Float32})
    err = ccall((:PFInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function PFRegister(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PFRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

#= skipping function with undefined symbols:
 function PFDestroy(arg0::Type{Float32},arg1::Union{Ptr{PF},StridedArray{PF},Ptr{PF},Ref{PF}})
    ccall((:PFDestroy,petscRealSingle),PetscErrorCode,(Ptr{PF},),arg1)
end
=#
#= skipping function with undefined symbols:
 function PFSetFromOptions(arg0::Type{Float32},arg1::PF)
    ccall((:PFSetFromOptions,petscRealSingle),PetscErrorCode,(PF,),arg1)
end
=#
#= skipping function with undefined symbols:
 function PFGetType(arg0::Type{Float32},arg1::PF,arg2::Union{Ptr{PFType},StridedArray{PFType},Ptr{PFType},Ref{PFType}})
    ccall((:PFGetType,petscRealSingle),PetscErrorCode,(PF,Ptr{Ptr{UInt8}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PFView(arg1::PF,arg2::PetscViewer{Float32})
    ccall((:PFView,petscRealSingle),PetscErrorCode,(PF,PetscViewer{Float32}),arg1,arg2)
end
=#
function AOInitializePackage(arg0::Type{Float32})
    err = ccall((:AOInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function AOCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:AOCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{Cint}),arg1,arg2)
    return err
end

function AOSetIS(arg0::Type{Float32})
    err = ccall((:AOSetIS,petscRealSingle),PetscErrorCode,())
    return err
end

function AOSetFromOptions(arg0::Type{Float32})
    err = ccall((:AOSetFromOptions,petscRealSingle),PetscErrorCode,())
    return err
end

function AOCreateBasic(arg0::Type{Float32},arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:AOCreateBasic,petscRealSingle),PetscErrorCode,(comm_type,Int64,Ptr{Int64},Ptr{Int64},Ptr{Cint}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function AOCreateBasicIS(arg1::IS{Float32},arg2::IS{Float32},arg3::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:AOCreateBasicIS,petscRealSingle),PetscErrorCode,(IS{Float32},IS{Float32},Ptr{Cint}),arg1,arg2,arg3)
    return err
end

function AOCreateMemoryScalable(arg0::Type{Float32},arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:AOCreateMemoryScalable,petscRealSingle),PetscErrorCode,(comm_type,Int64,Ptr{Int64},Ptr{Int64},Ptr{Cint}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function AOCreateMemoryScalableIS(arg1::IS{Float32},arg2::IS{Float32},arg3::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:AOCreateMemoryScalableIS,petscRealSingle),PetscErrorCode,(IS{Float32},IS{Float32},Ptr{Cint}),arg1,arg2,arg3)
    return err
end

function AOCreateMapping(arg0::Type{Float32},arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:AOCreateMapping,petscRealSingle),PetscErrorCode,(comm_type,Int64,Ptr{Int64},Ptr{Int64},Ptr{Cint}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function AOCreateMappingIS(arg1::IS{Float32},arg2::IS{Float32},arg3::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:AOCreateMappingIS,petscRealSingle),PetscErrorCode,(IS{Float32},IS{Float32},Ptr{Cint}),arg1,arg2,arg3)
    return err
end

function AOView(arg0::Type{Float32})
    err = ccall((:AOView,petscRealSingle),PetscErrorCode,())
    return err
end

function AOSetType(arg0::Type{Float32})
    err = ccall((:AOSetType,petscRealSingle),PetscErrorCode,())
    return err
end

function AOGetType(arg0::Type{Float32})
    err = ccall((:AOGetType,petscRealSingle),PetscErrorCode,())
    return err
end

function AORegister(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:AORegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function AOPetscToApplication(arg0::Type{Float32})
    err = ccall((:AOPetscToApplication,petscRealSingle),PetscErrorCode,())
    return err
end

function AOApplicationToPetsc(arg0::Type{Float32})
    err = ccall((:AOApplicationToPetsc,petscRealSingle),PetscErrorCode,())
    return err
end

function AOPetscToApplicationIS(arg0::Type{Float32})
    err = ccall((:AOPetscToApplicationIS,petscRealSingle),PetscErrorCode,())
    return err
end

function AOApplicationToPetscIS(arg0::Type{Float32})
    err = ccall((:AOApplicationToPetscIS,petscRealSingle),PetscErrorCode,())
    return err
end

function AOPetscToApplicationPermuteInt(arg0::Type{Float32})
    err = ccall((:AOPetscToApplicationPermuteInt,petscRealSingle),PetscErrorCode,())
    return err
end

function AOApplicationToPetscPermuteInt(arg0::Type{Float32})
    err = ccall((:AOApplicationToPetscPermuteInt,petscRealSingle),PetscErrorCode,())
    return err
end

function AOPetscToApplicationPermuteReal(arg0::Type{Float32})
    err = ccall((:AOPetscToApplicationPermuteReal,petscRealSingle),PetscErrorCode,())
    return err
end

function AOApplicationToPetscPermuteReal(arg0::Type{Float32})
    err = ccall((:AOApplicationToPetscPermuteReal,petscRealSingle),PetscErrorCode,())
    return err
end

function AOMappingHasApplicationIndex(arg0::Type{Float32})
    err = ccall((:AOMappingHasApplicationIndex,petscRealSingle),PetscErrorCode,())
    return err
end

function AOMappingHasPetscIndex(arg0::Type{Float32})
    err = ccall((:AOMappingHasPetscIndex,petscRealSingle),PetscErrorCode,())
    return err
end

#= skipping function with undefined symbols:
 function PetscQuadratureCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{PetscQuadrature},StridedArray{PetscQuadrature},Ptr{PetscQuadrature},Ref{PetscQuadrature}})
    ccall((:PetscQuadratureCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{PetscQuadrature}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscQuadratureDuplicate(arg0::Type{Float32},arg1::PetscQuadrature,arg2::Union{Ptr{PetscQuadrature},StridedArray{PetscQuadrature},Ptr{PetscQuadrature},Ref{PetscQuadrature}})
    ccall((:PetscQuadratureDuplicate,petscRealSingle),PetscErrorCode,(PetscQuadrature,Ptr{PetscQuadrature}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscQuadratureGetOrder(arg0::Type{Float32},arg1::PetscQuadrature,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:PetscQuadratureGetOrder,petscRealSingle),PetscErrorCode,(PetscQuadrature,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscQuadratureSetOrder(arg0::Type{Float32},arg1::PetscQuadrature,arg2::Integer)
    ccall((:PetscQuadratureSetOrder,petscRealSingle),PetscErrorCode,(PetscQuadrature,Int64),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscQuadratureGetData(arg0::Type{Float32},arg1::PetscQuadrature,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg5::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    ccall((:PetscQuadratureGetData,petscRealSingle),PetscErrorCode,(PetscQuadrature,Ptr{Int64},Ptr{Int64},Ptr{Ptr{Float32}},Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function PetscQuadratureSetData(arg0::Type{Float32},arg1::PetscQuadrature,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:PetscQuadratureSetData,petscRealSingle),PetscErrorCode,(PetscQuadrature,Int64,Int64,Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function PetscQuadratureView(arg1::PetscQuadrature,arg2::PetscViewer{Float32})
    ccall((:PetscQuadratureView,petscRealSingle),PetscErrorCode,(PetscQuadrature,PetscViewer{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscQuadratureDestroy(arg0::Type{Float32},arg1::Union{Ptr{PetscQuadrature},StridedArray{PetscQuadrature},Ptr{PetscQuadrature},Ref{PetscQuadrature}})
    ccall((:PetscQuadratureDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscQuadrature},),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscQuadratureExpandComposite(arg0::Type{Float32},arg1::PetscQuadrature,arg2::Integer,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{PetscQuadrature},StridedArray{PetscQuadrature},Ptr{PetscQuadrature},Ref{PetscQuadrature}})
    ccall((:PetscQuadratureExpandComposite,petscRealSingle),PetscErrorCode,(PetscQuadrature,Int64,Ptr{Float32},Ptr{Float32},Ptr{PetscQuadrature}),arg1,arg2,arg3,arg4,arg5)
end
=#
function PetscDTLegendreEval(arg0::Type{Float32},arg1::Integer,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:PetscDTLegendreEval,petscRealSingle),PetscErrorCode,(Int64,Ptr{Float32},Int64,Ptr{Int64},Ptr{Float32},Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

function PetscDTGaussQuadrature(arg0::Type{Float32},arg1::Integer,arg2::Float32,arg3::Float32,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:PetscDTGaussQuadrature,petscRealSingle),PetscErrorCode,(Int64,Float32,Float32,Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PetscDTReconstructPoly(arg0::Type{Float32},arg1::Integer,arg2::Integer,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Integer,arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:PetscDTReconstructPoly,petscRealSingle),PetscErrorCode,(Int64,Int64,Ptr{Float32},Int64,Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

#= skipping function with undefined symbols:
 function PetscDTGaussTensorQuadrature(arg0::Type{Float32},arg1::Integer,arg2::Integer,arg3::Float32,arg4::Float32,arg5::Union{Ptr{PetscQuadrature},StridedArray{PetscQuadrature},Ptr{PetscQuadrature},Ref{PetscQuadrature}})
    ccall((:PetscDTGaussTensorQuadrature,petscRealSingle),PetscErrorCode,(Int64,Int64,Float32,Float32,Ptr{PetscQuadrature}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function PetscDTGaussJacobiQuadrature(arg0::Type{Float32},arg1::Integer,arg2::Integer,arg3::Float32,arg4::Float32,arg5::Union{Ptr{PetscQuadrature},StridedArray{PetscQuadrature},Ptr{PetscQuadrature},Ref{PetscQuadrature}})
    ccall((:PetscDTGaussJacobiQuadrature,petscRealSingle),PetscErrorCode,(Int64,Int64,Float32,Float32,Ptr{PetscQuadrature}),arg1,arg2,arg3,arg4,arg5)
end
=#
function PetscFEInitializePackage(arg0::Type{Float32})
    err = ccall((:PetscFEInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

#= skipping function with undefined symbols:
 function PetscSpaceCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{PetscSpace},StridedArray{PetscSpace},Ptr{PetscSpace},Ref{PetscSpace}})
    ccall((:PetscSpaceCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{PetscSpace}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscSpaceDestroy(arg0::Type{Float32},arg1::Union{Ptr{PetscSpace},StridedArray{PetscSpace},Ptr{PetscSpace},Ref{PetscSpace}})
    ccall((:PetscSpaceDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscSpace},),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscSpaceSetType(arg0::Type{Float32},arg1::PetscSpace,arg2::PetscSpaceType)
    ccall((:PetscSpaceSetType,petscRealSingle),PetscErrorCode,(PetscSpace,Cstring),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscSpaceGetType(arg0::Type{Float32},arg1::PetscSpace,arg2::Union{Ptr{PetscSpaceType},StridedArray{PetscSpaceType},Ptr{PetscSpaceType},Ref{PetscSpaceType}})
    ccall((:PetscSpaceGetType,petscRealSingle),PetscErrorCode,(PetscSpace,Ptr{Ptr{UInt8}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscSpaceSetUp(arg0::Type{Float32},arg1::PetscSpace)
    ccall((:PetscSpaceSetUp,petscRealSingle),PetscErrorCode,(PetscSpace,),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscSpaceSetFromOptions(arg0::Type{Float32},arg1::PetscSpace)
    ccall((:PetscSpaceSetFromOptions,petscRealSingle),PetscErrorCode,(PetscSpace,),arg1)
end
=#
function PetscSpaceRegister(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscSpaceRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function PetscSpaceRegisterDestroy(arg0::Type{Float32})
    err = ccall((:PetscSpaceRegisterDestroy,petscRealSingle),PetscErrorCode,())
    return err
end

#= skipping function with undefined symbols:
 function PetscSpaceGetDimension(arg0::Type{Float32},arg1::PetscSpace,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:PetscSpaceGetDimension,petscRealSingle),PetscErrorCode,(PetscSpace,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscSpaceSetOrder(arg0::Type{Float32},arg1::PetscSpace,arg2::Integer)
    ccall((:PetscSpaceSetOrder,petscRealSingle),PetscErrorCode,(PetscSpace,Int64),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscSpaceGetOrder(arg0::Type{Float32},arg1::PetscSpace,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:PetscSpaceGetOrder,petscRealSingle),PetscErrorCode,(PetscSpace,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscSpaceEvaluate(arg0::Type{Float32},arg1::PetscSpace,arg2::Integer,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:PetscSpaceEvaluate,petscRealSingle),PetscErrorCode,(PetscSpace,Int64,Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
#= skipping function with undefined symbols:
 function PetscSpacePolynomialSetNumVariables(arg0::Type{Float32},arg1::PetscSpace,arg2::Integer)
    ccall((:PetscSpacePolynomialSetNumVariables,petscRealSingle),PetscErrorCode,(PetscSpace,Int64),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscSpacePolynomialGetNumVariables(arg0::Type{Float32},arg1::PetscSpace,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:PetscSpacePolynomialGetNumVariables,petscRealSingle),PetscErrorCode,(PetscSpace,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscSpacePolynomialSetSymmetric(arg0::Type{Float32},arg1::PetscSpace,arg2::PetscBool)
    ccall((:PetscSpacePolynomialSetSymmetric,petscRealSingle),PetscErrorCode,(PetscSpace,PetscBool),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscSpacePolynomialGetSymmetric(arg0::Type{Float32},arg1::PetscSpace,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:PetscSpacePolynomialGetSymmetric,petscRealSingle),PetscErrorCode,(PetscSpace,Ptr{PetscBool}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscSpacePolynomialSetTensor(arg0::Type{Float32},arg1::PetscSpace,arg2::PetscBool)
    ccall((:PetscSpacePolynomialSetTensor,petscRealSingle),PetscErrorCode,(PetscSpace,PetscBool),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscSpacePolynomialGetTensor(arg0::Type{Float32},arg1::PetscSpace,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:PetscSpacePolynomialGetTensor,petscRealSingle),PetscErrorCode,(PetscSpace,Ptr{PetscBool}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscSpaceDGSetQuadrature(arg0::Type{Float32},arg1::PetscSpace,arg2::PetscQuadrature)
    ccall((:PetscSpaceDGSetQuadrature,petscRealSingle),PetscErrorCode,(PetscSpace,PetscQuadrature),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscSpaceDGGetQuadrature(arg0::Type{Float32},arg1::PetscSpace,arg2::Union{Ptr{PetscQuadrature},StridedArray{PetscQuadrature},Ptr{PetscQuadrature},Ref{PetscQuadrature}})
    ccall((:PetscSpaceDGGetQuadrature,petscRealSingle),PetscErrorCode,(PetscSpace,Ptr{PetscQuadrature}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDualSpaceCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{PetscDualSpace},StridedArray{PetscDualSpace},Ptr{PetscDualSpace},Ref{PetscDualSpace}})
    ccall((:PetscDualSpaceCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{PetscDualSpace}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDualSpaceDestroy(arg0::Type{Float32},arg1::Union{Ptr{PetscDualSpace},StridedArray{PetscDualSpace},Ptr{PetscDualSpace},Ref{PetscDualSpace}})
    ccall((:PetscDualSpaceDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscDualSpace},),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscDualSpaceDuplicate(arg0::Type{Float32},arg1::PetscDualSpace,arg2::Union{Ptr{PetscDualSpace},StridedArray{PetscDualSpace},Ptr{PetscDualSpace},Ref{PetscDualSpace}})
    ccall((:PetscDualSpaceDuplicate,petscRealSingle),PetscErrorCode,(PetscDualSpace,Ptr{PetscDualSpace}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDualSpaceSetType(arg0::Type{Float32},arg1::PetscDualSpace,arg2::PetscDualSpaceType)
    ccall((:PetscDualSpaceSetType,petscRealSingle),PetscErrorCode,(PetscDualSpace,Cstring),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDualSpaceGetType(arg0::Type{Float32},arg1::PetscDualSpace,arg2::Union{Ptr{PetscDualSpaceType},StridedArray{PetscDualSpaceType},Ptr{PetscDualSpaceType},Ref{PetscDualSpaceType}})
    ccall((:PetscDualSpaceGetType,petscRealSingle),PetscErrorCode,(PetscDualSpace,Ptr{Ptr{UInt8}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDualSpaceSetUp(arg0::Type{Float32},arg1::PetscDualSpace)
    ccall((:PetscDualSpaceSetUp,petscRealSingle),PetscErrorCode,(PetscDualSpace,),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscDualSpaceSetFromOptions(arg0::Type{Float32},arg1::PetscDualSpace)
    ccall((:PetscDualSpaceSetFromOptions,petscRealSingle),PetscErrorCode,(PetscDualSpace,),arg1)
end
=#
function PetscDualSpaceRegister(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscDualSpaceRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function PetscDualSpaceRegisterDestroy(arg0::Type{Float32})
    err = ccall((:PetscDualSpaceRegisterDestroy,petscRealSingle),PetscErrorCode,())
    return err
end

#= skipping function with undefined symbols:
 function PetscDualSpaceGetDimension(arg0::Type{Float32},arg1::PetscDualSpace,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:PetscDualSpaceGetDimension,petscRealSingle),PetscErrorCode,(PetscDualSpace,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDualSpaceSetOrder(arg0::Type{Float32},arg1::PetscDualSpace,arg2::Integer)
    ccall((:PetscDualSpaceSetOrder,petscRealSingle),PetscErrorCode,(PetscDualSpace,Int64),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDualSpaceGetOrder(arg0::Type{Float32},arg1::PetscDualSpace,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:PetscDualSpaceGetOrder,petscRealSingle),PetscErrorCode,(PetscDualSpace,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDualSpaceSetDM(arg0::Type{Float32},arg1::PetscDualSpace,arg2::DM)
    ccall((:PetscDualSpaceSetDM,petscRealSingle),PetscErrorCode,(PetscDualSpace,DM),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDualSpaceGetDM(arg0::Type{Float32},arg1::PetscDualSpace,arg2::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:PetscDualSpaceGetDM,petscRealSingle),PetscErrorCode,(PetscDualSpace,Ptr{DM}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDualSpaceGetFunctional(arg0::Type{Float32},arg1::PetscDualSpace,arg2::Integer,arg3::Union{Ptr{PetscQuadrature},StridedArray{PetscQuadrature},Ptr{PetscQuadrature},Ref{PetscQuadrature}})
    ccall((:PetscDualSpaceGetFunctional,petscRealSingle),PetscErrorCode,(PetscDualSpace,Int64,Ptr{PetscQuadrature}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscDualSpaceCreateReferenceCell(arg0::Type{Float32},arg1::PetscDualSpace,arg2::Integer,arg3::PetscBool,arg4::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:PetscDualSpaceCreateReferenceCell,petscRealSingle),PetscErrorCode,(PetscDualSpace,Int64,PetscBool,Ptr{DM}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function PetscDualSpaceApply(arg0::Type{Float32},arg1::PetscDualSpace,arg2::Integer,arg3::Union{Ptr{PetscFECellGeom},StridedArray{PetscFECellGeom},Ptr{PetscFECellGeom},Ref{PetscFECellGeom}},arg4::Integer,arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg7::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:PetscDualSpaceApply,petscRealSingle),PetscErrorCode,(PetscDualSpace,Int64,Ptr{PetscFECellGeom},Int64,Ptr{Void},Ptr{Void},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
#= skipping function with undefined symbols:
 function PetscDualSpaceLagrangeGetContinuity(arg0::Type{Float32},arg1::PetscDualSpace,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:PetscDualSpaceLagrangeGetContinuity,petscRealSingle),PetscErrorCode,(PetscDualSpace,Ptr{PetscBool}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDualSpaceLagrangeSetContinuity(arg0::Type{Float32},arg1::PetscDualSpace,arg2::PetscBool)
    ccall((:PetscDualSpaceLagrangeSetContinuity,petscRealSingle),PetscErrorCode,(PetscDualSpace,PetscBool),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDualSpaceGetHeightSubspace(arg0::Type{Float32},arg1::PetscDualSpace,arg2::Integer,arg3::Union{Ptr{PetscDualSpace},StridedArray{PetscDualSpace},Ptr{PetscDualSpace},Ref{PetscDualSpace}})
    ccall((:PetscDualSpaceGetHeightSubspace,petscRealSingle),PetscErrorCode,(PetscDualSpace,Int64,Ptr{PetscDualSpace}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscDualSpaceSimpleSetDimension(arg0::Type{Float32},arg1::PetscDualSpace,arg2::Integer)
    ccall((:PetscDualSpaceSimpleSetDimension,petscRealSingle),PetscErrorCode,(PetscDualSpace,Int64),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDualSpaceSimpleSetFunctional(arg0::Type{Float32},arg1::PetscDualSpace,arg2::Integer,arg3::PetscQuadrature)
    ccall((:PetscDualSpaceSimpleSetFunctional,petscRealSingle),PetscErrorCode,(PetscDualSpace,Int64,PetscQuadrature),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscFECreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{PetscFE},StridedArray{PetscFE},Ptr{PetscFE},Ref{PetscFE}})
    ccall((:PetscFECreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{PetscFE}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscFEDestroy(arg0::Type{Float32},arg1::Union{Ptr{PetscFE},StridedArray{PetscFE},Ptr{PetscFE},Ref{PetscFE}})
    ccall((:PetscFEDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscFE},),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscFESetType(arg0::Type{Float32},arg1::PetscFE,arg2::PetscFEType)
    ccall((:PetscFESetType,petscRealSingle),PetscErrorCode,(PetscFE,Cstring),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscFEGetType(arg0::Type{Float32},arg1::PetscFE,arg2::Union{Ptr{PetscFEType},StridedArray{PetscFEType},Ptr{PetscFEType},Ref{PetscFEType}})
    ccall((:PetscFEGetType,petscRealSingle),PetscErrorCode,(PetscFE,Ptr{Ptr{UInt8}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscFESetUp(arg0::Type{Float32},arg1::PetscFE)
    ccall((:PetscFESetUp,petscRealSingle),PetscErrorCode,(PetscFE,),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscFESetFromOptions(arg0::Type{Float32},arg1::PetscFE)
    ccall((:PetscFESetFromOptions,petscRealSingle),PetscErrorCode,(PetscFE,),arg1)
end
=#
function PetscFERegister(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscFERegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function PetscFERegisterDestroy(arg0::Type{Float32})
    err = ccall((:PetscFERegisterDestroy,petscRealSingle),PetscErrorCode,())
    return err
end

#= skipping function with undefined symbols:
 function PetscFECreateDefault(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Integer,arg4::PetscBool,arg5::Union{ByteString,Symbol},arg6::Integer,arg7::Union{Ptr{PetscFE},StridedArray{PetscFE},Ptr{PetscFE},Ref{PetscFE}})
    ccall((:PetscFECreateDefault,petscRealSingle),PetscErrorCode,(DM,Int64,Int64,PetscBool,Cstring,Int64,Ptr{PetscFE}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
#= skipping function with undefined symbols:
 function PetscFEGetDimension(arg0::Type{Float32},arg1::PetscFE,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:PetscFEGetDimension,petscRealSingle),PetscErrorCode,(PetscFE,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscFEGetSpatialDimension(arg0::Type{Float32},arg1::PetscFE,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:PetscFEGetSpatialDimension,petscRealSingle),PetscErrorCode,(PetscFE,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscFESetNumComponents(arg0::Type{Float32},arg1::PetscFE,arg2::Integer)
    ccall((:PetscFESetNumComponents,petscRealSingle),PetscErrorCode,(PetscFE,Int64),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscFEGetNumComponents(arg0::Type{Float32},arg1::PetscFE,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:PetscFEGetNumComponents,petscRealSingle),PetscErrorCode,(PetscFE,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscFEGetTileSizes(arg0::Type{Float32},arg1::PetscFE,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:PetscFEGetTileSizes,petscRealSingle),PetscErrorCode,(PetscFE,Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function PetscFESetTileSizes(arg0::Type{Float32},arg1::PetscFE,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer)
    ccall((:PetscFESetTileSizes,petscRealSingle),PetscErrorCode,(PetscFE,Int64,Int64,Int64,Int64),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function PetscFESetBasisSpace(arg0::Type{Float32},arg1::PetscFE,arg2::PetscSpace)
    ccall((:PetscFESetBasisSpace,petscRealSingle),PetscErrorCode,(PetscFE,PetscSpace),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscFEGetBasisSpace(arg0::Type{Float32},arg1::PetscFE,arg2::Union{Ptr{PetscSpace},StridedArray{PetscSpace},Ptr{PetscSpace},Ref{PetscSpace}})
    ccall((:PetscFEGetBasisSpace,petscRealSingle),PetscErrorCode,(PetscFE,Ptr{PetscSpace}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscFESetDualSpace(arg0::Type{Float32},arg1::PetscFE,arg2::PetscDualSpace)
    ccall((:PetscFESetDualSpace,petscRealSingle),PetscErrorCode,(PetscFE,PetscDualSpace),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscFEGetDualSpace(arg0::Type{Float32},arg1::PetscFE,arg2::Union{Ptr{PetscDualSpace},StridedArray{PetscDualSpace},Ptr{PetscDualSpace},Ref{PetscDualSpace}})
    ccall((:PetscFEGetDualSpace,petscRealSingle),PetscErrorCode,(PetscFE,Ptr{PetscDualSpace}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscFESetQuadrature(arg0::Type{Float32},arg1::PetscFE,arg2::PetscQuadrature)
    ccall((:PetscFESetQuadrature,petscRealSingle),PetscErrorCode,(PetscFE,PetscQuadrature),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscFEGetQuadrature(arg0::Type{Float32},arg1::PetscFE,arg2::Union{Ptr{PetscQuadrature},StridedArray{PetscQuadrature},Ptr{PetscQuadrature},Ref{PetscQuadrature}})
    ccall((:PetscFEGetQuadrature,petscRealSingle),PetscErrorCode,(PetscFE,Ptr{PetscQuadrature}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscFEGetNumDof(arg0::Type{Float32},arg1::PetscFE,arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    ccall((:PetscFEGetNumDof,petscRealSingle),PetscErrorCode,(PetscFE,Ptr{Ptr{Int64}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscFEGetDefaultTabulation(arg0::Type{Float32},arg1::PetscFE,arg2::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg3::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg4::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    ccall((:PetscFEGetDefaultTabulation,petscRealSingle),PetscErrorCode,(PetscFE,Ptr{Ptr{Float32}},Ptr{Ptr{Float32}},Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function PetscFEGetFaceTabulation(arg0::Type{Float32},arg1::PetscFE,arg2::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    ccall((:PetscFEGetFaceTabulation,petscRealSingle),PetscErrorCode,(PetscFE,Ptr{Ptr{Float32}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscFEGetTabulation(arg0::Type{Float32},arg1::PetscFE,arg2::Integer,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg5::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg6::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    ccall((:PetscFEGetTabulation,petscRealSingle),PetscErrorCode,(PetscFE,Int64,Ptr{Float32},Ptr{Ptr{Float32}},Ptr{Ptr{Float32}},Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
#= skipping function with undefined symbols:
 function PetscFERestoreTabulation(arg0::Type{Float32},arg1::PetscFE,arg2::Integer,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg5::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg6::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    ccall((:PetscFERestoreTabulation,petscRealSingle),PetscErrorCode,(PetscFE,Int64,Ptr{Float32},Ptr{Ptr{Float32}},Ptr{Ptr{Float32}},Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
#= skipping function with undefined symbols:
 function PetscFERefine(arg0::Type{Float32},arg1::PetscFE,arg2::Union{Ptr{PetscFE},StridedArray{PetscFE},Ptr{PetscFE},Ref{PetscFE}})
    ccall((:PetscFERefine,petscRealSingle),PetscErrorCode,(PetscFE,Ptr{PetscFE}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscFEIntegrate(arg0::Type{Float32},arg1::PetscFE,arg2::PetscDS,arg3::Integer,arg4::Integer,arg5::Union{Ptr{PetscFECellGeom},StridedArray{PetscFECellGeom},Ptr{PetscFECellGeom},Ref{PetscFECellGeom}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::PetscDS,arg8::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg9::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:PetscFEIntegrate,petscRealSingle),PetscErrorCode,(PetscFE,PetscDS,Int64,Int64,Ptr{PetscFECellGeom},Ptr{Float32},PetscDS,Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
end
=#
#= skipping function with undefined symbols:
 function PetscFEIntegrateResidual(arg0::Type{Float32},arg1::PetscFE,arg2::PetscDS,arg3::Integer,arg4::Integer,arg5::Union{Ptr{PetscFECellGeom},StridedArray{PetscFECellGeom},Ptr{PetscFECellGeom},Ref{PetscFECellGeom}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg8::PetscDS,arg9::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg10::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:PetscFEIntegrateResidual,petscRealSingle),PetscErrorCode,(PetscFE,PetscDS,Int64,Int64,Ptr{PetscFECellGeom},Ptr{Float32},Ptr{Float32},PetscDS,Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
end
=#
#= skipping function with undefined symbols:
 function PetscFEIntegrateBdResidual(arg0::Type{Float32},arg1::PetscFE,arg2::PetscDS,arg3::Integer,arg4::Integer,arg5::Union{Ptr{PetscFECellGeom},StridedArray{PetscFECellGeom},Ptr{PetscFECellGeom},Ref{PetscFECellGeom}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg8::PetscDS,arg9::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg10::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:PetscFEIntegrateBdResidual,petscRealSingle),PetscErrorCode,(PetscFE,PetscDS,Int64,Int64,Ptr{PetscFECellGeom},Ptr{Float32},Ptr{Float32},PetscDS,Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
end
=#
#= skipping function with undefined symbols:
 function PetscFEIntegrateJacobian(arg0::Type{Float32},arg1::PetscFE,arg2::PetscDS,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{PetscFECellGeom},StridedArray{PetscFECellGeom},Ptr{PetscFECellGeom},Ref{PetscFECellGeom}},arg7::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg8::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg9::PetscDS,arg10::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg11::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:PetscFEIntegrateJacobian,petscRealSingle),PetscErrorCode,(PetscFE,PetscDS,Int64,Int64,Int64,Ptr{PetscFECellGeom},Ptr{Float32},Ptr{Float32},PetscDS,Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11)
end
=#
#= skipping function with undefined symbols:
 function PetscFEIntegrateBdJacobian(arg0::Type{Float32},arg1::PetscFE,arg2::PetscDS,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{PetscFECellGeom},StridedArray{PetscFECellGeom},Ptr{PetscFECellGeom},Ref{PetscFECellGeom}},arg7::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg8::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg9::PetscDS,arg10::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg11::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:PetscFEIntegrateBdJacobian,petscRealSingle),PetscErrorCode,(PetscFE,PetscDS,Int64,Int64,Int64,Ptr{PetscFECellGeom},Ptr{Float32},Ptr{Float32},PetscDS,Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11)
end
=#
#= skipping function with undefined symbols:
 function PetscFECompositeGetMapping(arg0::Type{Float32},arg1::PetscFE,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg4::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg5::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    ccall((:PetscFECompositeGetMapping,petscRealSingle),PetscErrorCode,(PetscFE,Ptr{Int64},Ptr{Ptr{Float32}},Ptr{Ptr{Float32}},Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function PetscFEOpenCLSetRealType(arg0::Type{Float32},arg1::PetscFE,arg2::PetscDataType)
    ccall((:PetscFEOpenCLSetRealType,petscRealSingle),PetscErrorCode,(PetscFE,PetscDataType),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscFEOpenCLGetRealType(arg0::Type{Float32},arg1::PetscFE,arg2::Union{Ptr{PetscDataType},StridedArray{PetscDataType},Ptr{PetscDataType},Ref{PetscDataType}})
    ccall((:PetscFEOpenCLGetRealType,petscRealSingle),PetscErrorCode,(PetscFE,Ptr{PetscDataType}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMDASetInterpolationType(arg0::Type{Float32},arg1::DM,arg2::DMDAInterpolationType)
    ccall((:DMDASetInterpolationType,petscRealSingle),PetscErrorCode,(DM,DMDAInterpolationType),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMDAGetInterpolationType(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{DMDAInterpolationType},StridedArray{DMDAInterpolationType},Ptr{DMDAInterpolationType},Ref{DMDAInterpolationType}})
    ccall((:DMDAGetInterpolationType,petscRealSingle),PetscErrorCode,(DM,Ptr{DMDAInterpolationType}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMDASetElementType(arg0::Type{Float32},arg1::DM,arg2::DMDAElementType)
    ccall((:DMDASetElementType,petscRealSingle),PetscErrorCode,(DM,DMDAElementType),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMDAGetElementType(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{DMDAElementType},StridedArray{DMDAElementType},Ptr{DMDAElementType},Ref{DMDAElementType}})
    ccall((:DMDAGetElementType,petscRealSingle),PetscErrorCode,(DM,Ptr{DMDAElementType}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMDAGetElements(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    ccall((:DMDAGetElements,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64},Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMDARestoreElements(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    ccall((:DMDARestoreElements,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64},Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMDACreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:DMDACreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{DM}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMDASetSizes(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Integer,arg4::Integer)
    ccall((:DMDASetSizes,petscRealSingle),PetscErrorCode,(DM,Int64,Int64,Int64),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMDACreate1d(arg0::Type{Float32},arg1::MPI_Comm,arg2::DMBoundaryType,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:DMDACreate1d,petscRealSingle),PetscErrorCode,(comm_type,DMBoundaryType,Int64,Int64,Int64,Ptr{Int64},Ptr{DM}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
#= skipping function with undefined symbols:
 function DMDACreate2d(arg0::Type{Float32},arg1::MPI_Comm,arg2::DMBoundaryType,arg3::DMBoundaryType,arg4::DMDAStencilType,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Integer,arg9::Integer,arg10::Integer,arg11::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg12::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg13::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:DMDACreate2d,petscRealSingle),PetscErrorCode,(comm_type,DMBoundaryType,DMBoundaryType,DMDAStencilType,Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Int64},Ptr{DM}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13)
end
=#
#= skipping function with undefined symbols:
 function DMDACreate3d(arg0::Type{Float32},arg1::MPI_Comm,arg2::DMBoundaryType,arg3::DMBoundaryType,arg4::DMBoundaryType,arg5::DMDAStencilType,arg6::Integer,arg7::Integer,arg8::Integer,arg9::Integer,arg10::Integer,arg11::Integer,arg12::Integer,arg13::Integer,arg14::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg15::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg16::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg17::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:DMDACreate3d,petscRealSingle),PetscErrorCode,(comm_type,DMBoundaryType,DMBoundaryType,DMBoundaryType,DMDAStencilType,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{DM}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17)
end
=#
#= skipping function with undefined symbols:
 function DMDAGlobalToNaturalBegin(arg1::DM,arg2::Vec{Float32},arg3::InsertMode,arg4::Vec{Float32})
    ccall((:DMDAGlobalToNaturalBegin,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},InsertMode,Vec{Float32}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMDAGlobalToNaturalEnd(arg1::DM,arg2::Vec{Float32},arg3::InsertMode,arg4::Vec{Float32})
    ccall((:DMDAGlobalToNaturalEnd,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},InsertMode,Vec{Float32}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMDANaturalToGlobalBegin(arg1::DM,arg2::Vec{Float32},arg3::InsertMode,arg4::Vec{Float32})
    ccall((:DMDANaturalToGlobalBegin,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},InsertMode,Vec{Float32}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMDANaturalToGlobalEnd(arg1::DM,arg2::Vec{Float32},arg3::InsertMode,arg4::Vec{Float32})
    ccall((:DMDANaturalToGlobalEnd,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},InsertMode,Vec{Float32}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMDAGetCorners(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMDAGetCorners,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
#= skipping function with undefined symbols:
 function DMDAGetGhostCorners(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMDAGetGhostCorners,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
#= skipping function with undefined symbols:
 function DMDAGetInfo(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg9::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg10::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg11::Union{Ptr{DMBoundaryType},StridedArray{DMBoundaryType},Ptr{DMBoundaryType},Ref{DMBoundaryType}},arg12::Union{Ptr{DMBoundaryType},StridedArray{DMBoundaryType},Ptr{DMBoundaryType},Ref{DMBoundaryType}},arg13::Union{Ptr{DMBoundaryType},StridedArray{DMBoundaryType},Ptr{DMBoundaryType},Ref{DMBoundaryType}},arg14::Union{Ptr{DMDAStencilType},StridedArray{DMDAStencilType},Ptr{DMDAStencilType},Ref{DMDAStencilType}})
    ccall((:DMDAGetInfo,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{DMBoundaryType},Ptr{DMBoundaryType},Ptr{DMBoundaryType},Ptr{DMDAStencilType}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14)
end
=#
#= skipping function with undefined symbols:
 function DMDAGetProcessorSubset(arg0::Type{Float32},arg1::DM,arg2::DMDADirection,arg3::Integer,arg4::Union{Ptr{MPI_Comm},StridedArray{MPI_Comm},Ptr{MPI_Comm},Ref{MPI_Comm}})
    ccall((:DMDAGetProcessorSubset,petscRealSingle),PetscErrorCode,(DM,DMDADirection,Int64,Ptr{comm_type}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMDAGetProcessorSubsets(arg0::Type{Float32},arg1::DM,arg2::DMDADirection,arg3::Union{Ptr{MPI_Comm},StridedArray{MPI_Comm},Ptr{MPI_Comm},Ref{MPI_Comm}})
    ccall((:DMDAGetProcessorSubsets,petscRealSingle),PetscErrorCode,(DM,DMDADirection,Ptr{comm_type}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMDAGetRay(arg1::DM,arg2::DMDADirection,arg3::Integer,arg4::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg5::Union{Ptr{VecScatter{Float32}},StridedArray{VecScatter{Float32}},Ptr{VecScatter{Float32}},Ref{VecScatter{Float32}}})
    ccall((:DMDAGetRay,petscRealSingle),PetscErrorCode,(DM,DMDADirection,Int64,Ptr{Vec{Float32}},Ptr{VecScatter{Float32}}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function DMDAGlobalToNaturalAllCreate(arg1::DM,arg2::Union{Ptr{VecScatter{Float32}},StridedArray{VecScatter{Float32}},Ptr{VecScatter{Float32}},Ref{VecScatter{Float32}}})
    ccall((:DMDAGlobalToNaturalAllCreate,petscRealSingle),PetscErrorCode,(DM,Ptr{VecScatter{Float32}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMDANaturalAllToGlobalCreate(arg1::DM,arg2::Union{Ptr{VecScatter{Float32}},StridedArray{VecScatter{Float32}},Ptr{VecScatter{Float32}},Ref{VecScatter{Float32}}})
    ccall((:DMDANaturalAllToGlobalCreate,petscRealSingle),PetscErrorCode,(DM,Ptr{VecScatter{Float32}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMDAGetScatter(arg1::DM,arg2::Union{Ptr{VecScatter{Float32}},StridedArray{VecScatter{Float32}},Ptr{VecScatter{Float32}},Ref{VecScatter{Float32}}},arg3::Union{Ptr{VecScatter{Float32}},StridedArray{VecScatter{Float32}},Ptr{VecScatter{Float32}},Ref{VecScatter{Float32}}})
    ccall((:DMDAGetScatter,petscRealSingle),PetscErrorCode,(DM,Ptr{VecScatter{Float32}},Ptr{VecScatter{Float32}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMDAGetNeighbors(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Ptr{PetscMPIInt}},StridedArray{Ptr{PetscMPIInt}},Ptr{Ptr{PetscMPIInt}},Ref{Ptr{PetscMPIInt}}})
    ccall((:DMDAGetNeighbors,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{PetscMPIInt}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMDASetAOType(arg0::Type{Float32},arg1::DM,arg2::AOType)
    ccall((:DMDASetAOType,petscRealSingle),PetscErrorCode,(DM,Cstring),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMDAGetAO(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    ccall((:DMDAGetAO,petscRealSingle),PetscErrorCode,(DM,Ptr{Cint}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMDASetUniformCoordinates(arg0::Type{Float32},arg1::DM,arg2::Float32,arg3::Float32,arg4::Float32,arg5::Float32,arg6::Float32,arg7::Float32)
    ccall((:DMDASetUniformCoordinates,petscRealSingle),PetscErrorCode,(DM,Float32,Float32,Float32,Float32,Float32,Float32),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
#= skipping function with undefined symbols:
 function DMDAGetCoordinateArray(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMDAGetCoordinateArray,petscRealSingle),PetscErrorCode,(DM,Ptr{Void}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMDARestoreCoordinateArray(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMDARestoreCoordinateArray,petscRealSingle),PetscErrorCode,(DM,Ptr{Void}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMDAGetBoundingBox(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:DMDAGetBoundingBox,petscRealSingle),PetscErrorCode,(DM,Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMDAGetLocalBoundingBox(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:DMDAGetLocalBoundingBox,petscRealSingle),PetscErrorCode,(DM,Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMDAGetLogicalCoordinate(arg0::Type{Float32},arg1::DM,arg2::Float32,arg3::Float32,arg4::Float32,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg9::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg10::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:DMDAGetLogicalCoordinate,petscRealSingle),PetscErrorCode,(DM,Float32,Float32,Float32,Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Float32},Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
end
=#
#= skipping function with undefined symbols:
 function DMDAMapCoordsToPeriodicDomain(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:DMDAMapCoordsToPeriodicDomain,petscRealSingle),PetscErrorCode,(DM,Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMDAGetReducedDMDA(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:DMDAGetReducedDMDA,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{DM}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMDASetFieldName(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{ByteString,Symbol})
    ccall((:DMDASetFieldName,petscRealSingle),PetscErrorCode,(DM,Int64,Cstring),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMDAGetFieldName(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    ccall((:DMDAGetFieldName,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Ptr{UInt8}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMDASetFieldNames(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    ccall((:DMDASetFieldNames,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{UInt8}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMDAGetFieldNames(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}})
    ccall((:DMDAGetFieldNames,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{Ptr{UInt8}}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMDASetCoordinateName(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{ByteString,Symbol})
    ccall((:DMDASetCoordinateName,petscRealSingle),PetscErrorCode,(DM,Int64,Cstring),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMDAGetCoordinateName(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    ccall((:DMDAGetCoordinateName,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Ptr{UInt8}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMDASetBoundaryType(arg0::Type{Float32},arg1::DM,arg2::DMBoundaryType,arg3::DMBoundaryType,arg4::DMBoundaryType)
    ccall((:DMDASetBoundaryType,petscRealSingle),PetscErrorCode,(DM,DMBoundaryType,DMBoundaryType,DMBoundaryType),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMDASetDof(arg0::Type{Float32},arg1::DM,arg2::Integer)
    ccall((:DMDASetDof,petscRealSingle),PetscErrorCode,(DM,Int64),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMDASetOverlap(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Integer,arg4::Integer)
    ccall((:DMDASetOverlap,petscRealSingle),PetscErrorCode,(DM,Int64,Int64,Int64),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMDAGetOverlap(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMDAGetOverlap,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMDASetNumLocalSubDomains(arg0::Type{Float32},arg1::DM,arg2::Integer)
    ccall((:DMDASetNumLocalSubDomains,petscRealSingle),PetscErrorCode,(DM,Int64),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMDAGetNumLocalSubDomains(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMDAGetNumLocalSubDomains,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMDAGetOffset(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMDAGetOffset,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
#= skipping function with undefined symbols:
 function DMDASetOffset(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer)
    ccall((:DMDASetOffset,petscRealSingle),PetscErrorCode,(DM,Int64,Int64,Int64,Int64,Int64,Int64),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
#= skipping function with undefined symbols:
 function DMDAGetNonOverlappingRegion(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMDAGetNonOverlappingRegion,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
#= skipping function with undefined symbols:
 function DMDASetNonOverlappingRegion(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer)
    ccall((:DMDASetNonOverlappingRegion,petscRealSingle),PetscErrorCode,(DM,Int64,Int64,Int64,Int64,Int64,Int64),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
#= skipping function with undefined symbols:
 function DMDASetStencilWidth(arg0::Type{Float32},arg1::DM,arg2::Integer)
    ccall((:DMDASetStencilWidth,petscRealSingle),PetscErrorCode,(DM,Int64),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMDASetOwnershipRanges(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMDASetOwnershipRanges,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMDAGetOwnershipRanges(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    ccall((:DMDAGetOwnershipRanges,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{Int64}},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMDASetNumProcs(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Integer,arg4::Integer)
    ccall((:DMDASetNumProcs,petscRealSingle),PetscErrorCode,(DM,Int64,Int64,Int64),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMDASetStencilType(arg0::Type{Float32},arg1::DM,arg2::DMDAStencilType)
    ccall((:DMDASetStencilType,petscRealSingle),PetscErrorCode,(DM,DMDAStencilType),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMDAVecGetArray(arg1::DM,arg2::Vec{Float32},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMDAVecGetArray,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMDAVecRestoreArray(arg1::DM,arg2::Vec{Float32},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMDAVecRestoreArray,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMDAVecGetArrayDOF(arg1::DM,arg2::Vec{Float32},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMDAVecGetArrayDOF,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMDAVecRestoreArrayDOF(arg1::DM,arg2::Vec{Float32},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMDAVecRestoreArrayDOF,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMDAVecGetArrayRead(arg1::DM,arg2::Vec{Float32},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMDAVecGetArrayRead,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMDAVecRestoreArrayRead(arg1::DM,arg2::Vec{Float32},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMDAVecRestoreArrayRead,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMDAVecGetArrayDOFRead(arg1::DM,arg2::Vec{Float32},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMDAVecGetArrayDOFRead,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMDAVecRestoreArrayDOFRead(arg1::DM,arg2::Vec{Float32},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMDAVecRestoreArrayDOFRead,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},Ptr{Void}),arg1,arg2,arg3)
end
=#
function DMDASplitComm2d(arg0::Type{Float32},arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{MPI_Comm},StridedArray{MPI_Comm},Ptr{MPI_Comm},Ref{MPI_Comm}})
    err = ccall((:DMDASplitComm2d,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Ptr{comm_type}),arg1,arg2,arg3,arg4,arg5)
    return err
end

#= skipping function with undefined symbols:
 function DMDACreatePatchIS(arg1::DM,arg2::Union{Ptr{MatStencil},StridedArray{MatStencil},Ptr{MatStencil},Ref{MatStencil}},arg3::Union{Ptr{MatStencil},StridedArray{MatStencil},Ptr{MatStencil},Ref{MatStencil}},arg4::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    ccall((:DMDACreatePatchIS,petscRealSingle),PetscErrorCode,(DM,Ptr{MatStencil},Ptr{MatStencil},Ptr{IS{Float32}}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMDAGetLocalInfo(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{DMDALocalInfo},StridedArray{DMDALocalInfo},Ptr{DMDALocalInfo},Ref{DMDALocalInfo}})
    ccall((:DMDAGetLocalInfo,petscRealSingle),PetscErrorCode,(DM,Ptr{DMDALocalInfo}),arg1,arg2)
end
=#
function MatRegisterDAAD(arg0::Type{Float32})
    err = ccall((:MatRegisterDAAD,petscRealSingle),PetscErrorCode,())
    return err
end

#= skipping function with undefined symbols:
 function MatCreateDAAD(arg1::DM,arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    ccall((:MatCreateDAAD,petscRealSingle),PetscErrorCode,(DM,Ptr{Mat{Float32}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatCreateSeqUSFFT(arg1::Vec{Float32},arg2::DM,arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    ccall((:MatCreateSeqUSFFT,petscRealSingle),PetscErrorCode,(Vec{Float32},DM,Ptr{Mat{Float32}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMDASetGetMatrix(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMDASetGetMatrix,petscRealSingle),PetscErrorCode,(DM,Ptr{Void}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMDASetBlockFills(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMDASetBlockFills,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMDASetRefinementFactor(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Integer,arg4::Integer)
    ccall((:DMDASetRefinementFactor,petscRealSingle),PetscErrorCode,(DM,Int64,Int64,Int64),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMDAGetRefinementFactor(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMDAGetRefinementFactor,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMDAGetArray(arg0::Type{Float32},arg1::DM,arg2::PetscBool,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMDAGetArray,petscRealSingle),PetscErrorCode,(DM,PetscBool,Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMDARestoreArray(arg0::Type{Float32},arg1::DM,arg2::PetscBool,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMDARestoreArray,petscRealSingle),PetscErrorCode,(DM,PetscBool,Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMDACreatePF(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{PF},StridedArray{PF},Ptr{PF},Ref{PF}})
    ccall((:DMDACreatePF,petscRealSingle),PetscErrorCode,(DM,Ptr{PF}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMDAGetNumCells(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMDAGetNumCells,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function DMDAGetCellPoint(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMDAGetCellPoint,petscRealSingle),PetscErrorCode,(DM,Int64,Int64,Int64,Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function DMDAGetNumVertices(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMDAGetNumVertices,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function DMDAGetNumFaces(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMDAGetNumFaces,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
#= skipping function with undefined symbols:
 function DMDAGetHeightStratum(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMDAGetHeightStratum,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMDAGetDepthStratum(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMDAGetDepthStratum,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMDACreateSection(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{PetscSection},StridedArray{PetscSection},Ptr{PetscSection},Ref{PetscSection}})
    ccall((:DMDACreateSection,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{PetscSection}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function DMDAComputeCellGeometryFEM(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::PetscQuadrature,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:DMDAComputeCellGeometryFEM,petscRealSingle),PetscErrorCode,(DM,Int64,PetscQuadrature,Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
#= skipping function with undefined symbols:
 function DMDAGetTransitiveClosure(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::PetscBool,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    ccall((:DMDAGetTransitiveClosure,petscRealSingle),PetscErrorCode,(DM,Int64,PetscBool,Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function DMDARestoreTransitiveClosure(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::PetscBool,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    ccall((:DMDARestoreTransitiveClosure,petscRealSingle),PetscErrorCode,(DM,Int64,PetscBool,Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function DMDAVecGetClosure(arg1::DM,arg2::PetscSection,arg3::Vec{Float32},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    ccall((:DMDAVecGetClosure,petscRealSingle),PetscErrorCode,(DM,PetscSection,Vec{Float32},Int64,Ptr{Int64},Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
#= skipping function with undefined symbols:
 function DMDAVecRestoreClosure(arg1::DM,arg2::PetscSection,arg3::Vec{Float32},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    ccall((:DMDAVecRestoreClosure,petscRealSingle),PetscErrorCode,(DM,PetscSection,Vec{Float32},Int64,Ptr{Int64},Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
#= skipping function with undefined symbols:
 function DMDAVecSetClosure(arg1::DM,arg2::PetscSection,arg3::Vec{Float32},arg4::Integer,arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::InsertMode)
    ccall((:DMDAVecSetClosure,petscRealSingle),PetscErrorCode,(DM,PetscSection,Vec{Float32},Int64,Ptr{Float32},InsertMode),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
#= skipping function with undefined symbols:
 function DMDAGetClosure(arg0::Type{Float32},arg1::DM,arg2::PetscSection,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    ccall((:DMDAGetClosure,petscRealSingle),PetscErrorCode,(DM,PetscSection,Int64,Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function DMDARestoreClosure(arg0::Type{Float32},arg1::DM,arg2::PetscSection,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    ccall((:DMDARestoreClosure,petscRealSingle),PetscErrorCode,(DM,PetscSection,Int64,Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function DMDAGetClosureScalar(arg0::Type{Float32},arg1::DM,arg2::PetscSection,arg3::Integer,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    ccall((:DMDAGetClosureScalar,petscRealSingle),PetscErrorCode,(DM,PetscSection,Int64,Ptr{Float32},Ptr{Int64},Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
#= skipping function with undefined symbols:
 function DMDARestoreClosureScalar(arg0::Type{Float32},arg1::DM,arg2::PetscSection,arg3::Integer,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    ccall((:DMDARestoreClosureScalar,petscRealSingle),PetscErrorCode,(DM,PetscSection,Int64,Ptr{Float32},Ptr{Int64},Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
#= skipping function with undefined symbols:
 function DMDASetClosureScalar(arg0::Type{Float32},arg1::DM,arg2::PetscSection,arg3::Integer,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::InsertMode)
    ccall((:DMDASetClosureScalar,petscRealSingle),PetscErrorCode,(DM,PetscSection,Int64,Ptr{Float32},Ptr{Float32},InsertMode),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
#= skipping function with undefined symbols:
 function DMDAConvertToCell(arg0::Type{Float32},arg1::DM,arg2::MatStencil,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMDAConvertToCell,petscRealSingle),PetscErrorCode,(DM,MatStencil,Ptr{Int64}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMDASetVertexCoordinates(arg0::Type{Float32},arg1::DM,arg2::Float32,arg3::Float32,arg4::Float32,arg5::Float32,arg6::Float32,arg7::Float32)
    ccall((:DMDASetVertexCoordinates,petscRealSingle),PetscErrorCode,(DM,Float32,Float32,Float32,Float32,Float32,Float32),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
#= skipping function with undefined symbols:
 function DMDASetPreallocationCenterDimension(arg0::Type{Float32},arg1::DM,arg2::Integer)
    ccall((:DMDASetPreallocationCenterDimension,petscRealSingle),PetscErrorCode,(DM,Int64),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMDAGetPreallocationCenterDimension(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMDAGetPreallocationCenterDimension,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMDAProjectFunction(arg1::DM,arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::InsertMode,arg5::Vec{Float32})
    ccall((:DMDAProjectFunction,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{Void}},Ptr{Ptr{Void}},InsertMode,Vec{Float32}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function DMDAProjectFunctionLocal(arg1::DM,arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::InsertMode,arg5::Vec{Float32})
    ccall((:DMDAProjectFunctionLocal,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{Void}},Ptr{Ptr{Void}},InsertMode,Vec{Float32}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function DMDAComputeL2Diff(arg1::DM,arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::Vec{Float32},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:DMDAComputeL2Diff,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{Void}},Ptr{Ptr{Void}},Vec{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function DMDAComputeL2GradientDiff(arg1::DM,arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::Vec{Float32},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:DMDAComputeL2GradientDiff,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{Void}},Ptr{Ptr{Void}},Vec{Float32},Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
#= skipping function with undefined symbols:
 function DMCompositeCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:DMCompositeCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{DM}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMCompositeAddDM(arg0::Type{Float32},arg1::DM,arg2::DM)
    ccall((:DMCompositeAddDM,petscRealSingle),PetscErrorCode,(DM,DM),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMCompositeSetCoupling(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMCompositeSetCoupling,petscRealSingle),PetscErrorCode,(DM,Ptr{Void}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMCompositeAddVecScatter(arg1::DM,arg2::VecScatter{Float32})
    ccall((:DMCompositeAddVecScatter,petscRealSingle),PetscErrorCode,(DM,VecScatter{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMCompositeScatterArray(arg1::DM,arg2::Vec{Float32},arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    ccall((:DMCompositeScatterArray,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},Ptr{Vec{Float32}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMCompositeGatherArray(arg1::DM,arg2::Vec{Float32},arg3::InsertMode,arg4::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    ccall((:DMCompositeGatherArray,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},InsertMode,Ptr{Vec{Float32}}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMCompositeGetNumberDM(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMCompositeGetNumberDM,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMCompositeGetAccessArray(arg1::DM,arg2::Vec{Float32},arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    ccall((:DMCompositeGetAccessArray,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},Int64,Ptr{Int64},Ptr{Vec{Float32}}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function DMCompositeRestoreAccessArray(arg1::DM,arg2::Vec{Float32},arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    ccall((:DMCompositeRestoreAccessArray,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},Int64,Ptr{Int64},Ptr{Vec{Float32}}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function DMCompositeGetEntriesArray(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:DMCompositeGetEntriesArray,petscRealSingle),PetscErrorCode,(DM,Ptr{DM}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMCompositeGetGlobalISs(arg1::DM,arg2::Union{Ptr{Ptr{IS{Float32}}},StridedArray{Ptr{IS{Float32}}},Ptr{Ptr{IS{Float32}}},Ref{Ptr{IS{Float32}}}})
    ccall((:DMCompositeGetGlobalISs,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{IS{Float32}}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMCompositeGetLocalISs(arg1::DM,arg2::Union{Ptr{Ptr{IS{Float32}}},StridedArray{Ptr{IS{Float32}}},Ptr{Ptr{IS{Float32}}},Ref{Ptr{IS{Float32}}}})
    ccall((:DMCompositeGetLocalISs,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{IS{Float32}}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMCompositeGetISLocalToGlobalMappings(arg1::DM,arg2::Union{Ptr{Ptr{ISLocalToGlobalMapping{Float32}}},StridedArray{Ptr{ISLocalToGlobalMapping{Float32}}},Ptr{Ptr{ISLocalToGlobalMapping{Float32}}},Ref{Ptr{ISLocalToGlobalMapping{Float32}}}})
    ccall((:DMCompositeGetISLocalToGlobalMappings,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{ISLocalToGlobalMapping{Float32}}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPatchCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:DMPatchCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{DM}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPatchZoom(arg1::DM,arg2::Vec{Float32},arg3::MatStencil,arg4::MatStencil,arg5::MPI_Comm,arg6::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}},arg7::Union{Ptr{PetscSF},StridedArray{PetscSF},Ptr{PetscSF},Ref{PetscSF}},arg8::Union{Ptr{PetscSF},StridedArray{PetscSF},Ptr{PetscSF},Ref{PetscSF}})
    ccall((:DMPatchZoom,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},MatStencil,MatStencil,comm_type,Ptr{DM},Ptr{PetscSF},Ptr{PetscSF}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
end
=#
#= skipping function with undefined symbols:
 function DMPatchSolve(arg0::Type{Float32},arg1::DM)
    ccall((:DMPatchSolve,petscRealSingle),PetscErrorCode,(DM,),arg1)
end
=#
#= skipping function with undefined symbols:
 function DMPatchGetPatchSize(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{MatStencil},StridedArray{MatStencil},Ptr{MatStencil},Ref{MatStencil}})
    ccall((:DMPatchGetPatchSize,petscRealSingle),PetscErrorCode,(DM,Ptr{MatStencil}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPatchSetPatchSize(arg0::Type{Float32},arg1::DM,arg2::MatStencil)
    ccall((:DMPatchSetPatchSize,petscRealSingle),PetscErrorCode,(DM,MatStencil),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPatchGetCommSize(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{MatStencil},StridedArray{MatStencil},Ptr{MatStencil},Ref{MatStencil}})
    ccall((:DMPatchGetCommSize,petscRealSingle),PetscErrorCode,(DM,Ptr{MatStencil}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPatchSetCommSize(arg0::Type{Float32},arg1::DM,arg2::MatStencil)
    ccall((:DMPatchSetCommSize,petscRealSingle),PetscErrorCode,(DM,MatStencil),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPatchGetCoarse(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:DMPatchGetCoarse,petscRealSingle),PetscErrorCode,(DM,Ptr{DM}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPatchCreateGrid(arg0::Type{Float32},arg1::MPI_Comm,arg2::Integer,arg3::MatStencil,arg4::MatStencil,arg5::MatStencil,arg6::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:DMPatchCreateGrid,petscRealSingle),PetscErrorCode,(comm_type,Int64,MatStencil,MatStencil,MatStencil,Ptr{DM}),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
#= skipping function with undefined symbols:
 function PetscLimiterCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{PetscLimiter},StridedArray{PetscLimiter},Ptr{PetscLimiter},Ref{PetscLimiter}})
    ccall((:PetscLimiterCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{PetscLimiter}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscLimiterDestroy(arg0::Type{Float32},arg1::Union{Ptr{PetscLimiter},StridedArray{PetscLimiter},Ptr{PetscLimiter},Ref{PetscLimiter}})
    ccall((:PetscLimiterDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscLimiter},),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscLimiterSetType(arg0::Type{Float32},arg1::PetscLimiter,arg2::PetscLimiterType)
    ccall((:PetscLimiterSetType,petscRealSingle),PetscErrorCode,(PetscLimiter,Cstring),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscLimiterGetType(arg0::Type{Float32},arg1::PetscLimiter,arg2::Union{Ptr{PetscLimiterType},StridedArray{PetscLimiterType},Ptr{PetscLimiterType},Ref{PetscLimiterType}})
    ccall((:PetscLimiterGetType,petscRealSingle),PetscErrorCode,(PetscLimiter,Ptr{Ptr{UInt8}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscLimiterSetUp(arg0::Type{Float32},arg1::PetscLimiter)
    ccall((:PetscLimiterSetUp,petscRealSingle),PetscErrorCode,(PetscLimiter,),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscLimiterSetFromOptions(arg0::Type{Float32},arg1::PetscLimiter)
    ccall((:PetscLimiterSetFromOptions,petscRealSingle),PetscErrorCode,(PetscLimiter,),arg1)
end
=#
function PetscLimiterRegister(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscLimiterRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function PetscLimiterRegisterDestroy(arg0::Type{Float32})
    err = ccall((:PetscLimiterRegisterDestroy,petscRealSingle),PetscErrorCode,())
    return err
end

#= skipping function with undefined symbols:
 function PetscLimiterLimit(arg0::Type{Float32},arg1::PetscLimiter,arg2::Float32,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:PetscLimiterLimit,petscRealSingle),PetscErrorCode,(PetscLimiter,Float32,Ptr{Float32}),arg1,arg2,arg3)
end
=#
function PetscFVInitializePackage(arg0::Type{Float32})
    err = ccall((:PetscFVInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

#= skipping function with undefined symbols:
 function PetscFVCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{PetscFV},StridedArray{PetscFV},Ptr{PetscFV},Ref{PetscFV}})
    ccall((:PetscFVCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{PetscFV}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscFVDestroy(arg0::Type{Float32},arg1::Union{Ptr{PetscFV},StridedArray{PetscFV},Ptr{PetscFV},Ref{PetscFV}})
    ccall((:PetscFVDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscFV},),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscFVSetType(arg0::Type{Float32},arg1::PetscFV,arg2::PetscFVType)
    ccall((:PetscFVSetType,petscRealSingle),PetscErrorCode,(PetscFV,Cstring),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscFVGetType(arg0::Type{Float32},arg1::PetscFV,arg2::Union{Ptr{PetscFVType},StridedArray{PetscFVType},Ptr{PetscFVType},Ref{PetscFVType}})
    ccall((:PetscFVGetType,petscRealSingle),PetscErrorCode,(PetscFV,Ptr{Ptr{UInt8}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscFVSetUp(arg0::Type{Float32},arg1::PetscFV)
    ccall((:PetscFVSetUp,petscRealSingle),PetscErrorCode,(PetscFV,),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscFVSetFromOptions(arg0::Type{Float32},arg1::PetscFV)
    ccall((:PetscFVSetFromOptions,petscRealSingle),PetscErrorCode,(PetscFV,),arg1)
end
=#
function PetscFVRegister(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscFVRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function PetscFVRegisterDestroy(arg0::Type{Float32})
    err = ccall((:PetscFVRegisterDestroy,petscRealSingle),PetscErrorCode,())
    return err
end

#= skipping function with undefined symbols:
 function PetscFVSetLimiter(arg0::Type{Float32},arg1::PetscFV,arg2::PetscLimiter)
    ccall((:PetscFVSetLimiter,petscRealSingle),PetscErrorCode,(PetscFV,PetscLimiter),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscFVGetLimiter(arg0::Type{Float32},arg1::PetscFV,arg2::Union{Ptr{PetscLimiter},StridedArray{PetscLimiter},Ptr{PetscLimiter},Ref{PetscLimiter}})
    ccall((:PetscFVGetLimiter,petscRealSingle),PetscErrorCode,(PetscFV,Ptr{PetscLimiter}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscFVSetNumComponents(arg0::Type{Float32},arg1::PetscFV,arg2::Integer)
    ccall((:PetscFVSetNumComponents,petscRealSingle),PetscErrorCode,(PetscFV,Int64),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscFVGetNumComponents(arg0::Type{Float32},arg1::PetscFV,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:PetscFVGetNumComponents,petscRealSingle),PetscErrorCode,(PetscFV,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscFVSetSpatialDimension(arg0::Type{Float32},arg1::PetscFV,arg2::Integer)
    ccall((:PetscFVSetSpatialDimension,petscRealSingle),PetscErrorCode,(PetscFV,Int64),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscFVGetSpatialDimension(arg0::Type{Float32},arg1::PetscFV,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:PetscFVGetSpatialDimension,petscRealSingle),PetscErrorCode,(PetscFV,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscFVSetComputeGradients(arg0::Type{Float32},arg1::PetscFV,arg2::PetscBool)
    ccall((:PetscFVSetComputeGradients,petscRealSingle),PetscErrorCode,(PetscFV,PetscBool),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscFVGetComputeGradients(arg0::Type{Float32},arg1::PetscFV,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:PetscFVGetComputeGradients,petscRealSingle),PetscErrorCode,(PetscFV,Ptr{PetscBool}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscFVSetQuadrature(arg0::Type{Float32},arg1::PetscFV,arg2::PetscQuadrature)
    ccall((:PetscFVSetQuadrature,petscRealSingle),PetscErrorCode,(PetscFV,PetscQuadrature),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscFVGetQuadrature(arg0::Type{Float32},arg1::PetscFV,arg2::Union{Ptr{PetscQuadrature},StridedArray{PetscQuadrature},Ptr{PetscQuadrature},Ref{PetscQuadrature}})
    ccall((:PetscFVGetQuadrature,petscRealSingle),PetscErrorCode,(PetscFV,Ptr{PetscQuadrature}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscFVSetDualSpace(arg0::Type{Float32},arg1::PetscFV,arg2::PetscDualSpace)
    ccall((:PetscFVSetDualSpace,petscRealSingle),PetscErrorCode,(PetscFV,PetscDualSpace),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscFVGetDualSpace(arg0::Type{Float32},arg1::PetscFV,arg2::Union{Ptr{PetscDualSpace},StridedArray{PetscDualSpace},Ptr{PetscDualSpace},Ref{PetscDualSpace}})
    ccall((:PetscFVGetDualSpace,petscRealSingle),PetscErrorCode,(PetscFV,Ptr{PetscDualSpace}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscFVRefine(arg0::Type{Float32},arg1::PetscFV,arg2::Union{Ptr{PetscFV},StridedArray{PetscFV},Ptr{PetscFV},Ref{PetscFV}})
    ccall((:PetscFVRefine,petscRealSingle),PetscErrorCode,(PetscFV,Ptr{PetscFV}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscFVGetDefaultTabulation(arg0::Type{Float32},arg1::PetscFV,arg2::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg3::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg4::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    ccall((:PetscFVGetDefaultTabulation,petscRealSingle),PetscErrorCode,(PetscFV,Ptr{Ptr{Float32}},Ptr{Ptr{Float32}},Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function PetscFVGetTabulation(arg0::Type{Float32},arg1::PetscFV,arg2::Integer,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg5::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg6::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    ccall((:PetscFVGetTabulation,petscRealSingle),PetscErrorCode,(PetscFV,Int64,Ptr{Float32},Ptr{Ptr{Float32}},Ptr{Ptr{Float32}},Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
#= skipping function with undefined symbols:
 function PetscFVRestoreTabulation(arg0::Type{Float32},arg1::PetscFV,arg2::Integer,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg5::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg6::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    ccall((:PetscFVRestoreTabulation,petscRealSingle),PetscErrorCode,(PetscFV,Int64,Ptr{Float32},Ptr{Ptr{Float32}},Ptr{Ptr{Float32}},Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
#= skipping function with undefined symbols:
 function PetscFVComputeGradient(arg0::Type{Float32},arg1::PetscFV,arg2::Integer,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:PetscFVComputeGradient,petscRealSingle),PetscErrorCode,(PetscFV,Int64,Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function PetscFVIntegrateRHSFunction(arg0::Type{Float32},arg1::PetscFV,arg2::PetscDS,arg3::Integer,arg4::Integer,arg5::Union{Ptr{PetscFVFaceGeom},StridedArray{PetscFVFaceGeom},Ptr{PetscFVFaceGeom},Ref{PetscFVFaceGeom}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg8::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg9::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg10::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:PetscFVIntegrateRHSFunction,petscRealSingle),PetscErrorCode,(PetscFV,PetscDS,Int64,Int64,Ptr{PetscFVFaceGeom},Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
end
=#
#= skipping function with undefined symbols:
 function PetscFVLeastSquaresSetMaxFaces(arg0::Type{Float32},arg1::PetscFV,arg2::Integer)
    ccall((:PetscFVLeastSquaresSetMaxFaces,petscRealSingle),PetscErrorCode,(PetscFV,Int64),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscPartitionerCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{PetscPartitioner},StridedArray{PetscPartitioner},Ptr{PetscPartitioner},Ref{PetscPartitioner}})
    ccall((:PetscPartitionerCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{PetscPartitioner}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscPartitionerDestroy(arg0::Type{Float32},arg1::Union{Ptr{PetscPartitioner},StridedArray{PetscPartitioner},Ptr{PetscPartitioner},Ref{PetscPartitioner}})
    ccall((:PetscPartitionerDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscPartitioner},),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscPartitionerSetType(arg0::Type{Float32},arg1::PetscPartitioner,arg2::PetscPartitionerType)
    ccall((:PetscPartitionerSetType,petscRealSingle),PetscErrorCode,(PetscPartitioner,Cstring),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscPartitionerGetType(arg0::Type{Float32},arg1::PetscPartitioner,arg2::Union{Ptr{PetscPartitionerType},StridedArray{PetscPartitionerType},Ptr{PetscPartitionerType},Ref{PetscPartitionerType}})
    ccall((:PetscPartitionerGetType,petscRealSingle),PetscErrorCode,(PetscPartitioner,Ptr{Ptr{UInt8}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscPartitionerSetUp(arg0::Type{Float32},arg1::PetscPartitioner)
    ccall((:PetscPartitionerSetUp,petscRealSingle),PetscErrorCode,(PetscPartitioner,),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscPartitionerSetFromOptions(arg0::Type{Float32},arg1::PetscPartitioner)
    ccall((:PetscPartitionerSetFromOptions,petscRealSingle),PetscErrorCode,(PetscPartitioner,),arg1)
end
=#
function PetscPartitionerRegister(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscPartitionerRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function PetscPartitionerRegisterDestroy(arg0::Type{Float32})
    err = ccall((:PetscPartitionerRegisterDestroy,petscRealSingle),PetscErrorCode,())
    return err
end

#= skipping function with undefined symbols:
 function PetscPartitionerPartition(arg1::PetscPartitioner,arg2::DM,arg3::PetscSection,arg4::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    ccall((:PetscPartitionerPartition,petscRealSingle),PetscErrorCode,(PetscPartitioner,DM,PetscSection,Ptr{IS{Float32}}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function PetscPartitionerShellSetPartition(arg0::Type{Float32},arg1::PetscPartitioner,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:PetscPartitionerShellSetPartition,petscRealSingle),PetscErrorCode,(PetscPartitioner,Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMPlexCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:DMPlexCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{DM}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexCreateCohesiveSubmesh(arg0::Type{Float32},arg1::DM,arg2::PetscBool,arg3::Union{ByteString,Symbol},arg4::Integer,arg5::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:DMPlexCreateCohesiveSubmesh,petscRealSingle),PetscErrorCode,(DM,PetscBool,Cstring,Int64,Ptr{DM}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function DMPlexCreateFromCellList(arg0::Type{Float32},arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::PetscBool,arg7::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}},arg8::Integer,arg9::Union{Ptr{Cdouble},StridedArray{Cdouble},Ptr{Cdouble},Ref{Cdouble}},arg10::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:DMPlexCreateFromCellList,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Int64,PetscBool,Ptr{Cint},Int64,Ptr{Cdouble},Ptr{DM}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
end
=#
#= skipping function with undefined symbols:
 function DMPlexCreateFromDAG(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:DMPlexCreateFromDAG,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
#= skipping function with undefined symbols:
 function DMPlexCreateReferenceCell(arg0::Type{Float32},arg1::MPI_Comm,arg2::Integer,arg3::PetscBool,arg4::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:DMPlexCreateReferenceCell,petscRealSingle),PetscErrorCode,(comm_type,Int64,PetscBool,Ptr{DM}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetChart(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMPlexGetChart,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMPlexSetChart(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Integer)
    ccall((:DMPlexSetChart,petscRealSingle),PetscErrorCode,(DM,Int64,Int64),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetConeSize(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMPlexGetConeSize,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Int64}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMPlexSetConeSize(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Integer)
    ccall((:DMPlexSetConeSize,petscRealSingle),PetscErrorCode,(DM,Int64,Int64),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMPlexAddConeSize(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Integer)
    ccall((:DMPlexAddConeSize,petscRealSingle),PetscErrorCode,(DM,Int64,Int64),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetCone(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    ccall((:DMPlexGetCone,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Ptr{Int64}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMPlexSetCone(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMPlexSetCone,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Int64}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMPlexInsertCone(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Integer,arg4::Integer)
    ccall((:DMPlexInsertCone,petscRealSingle),PetscErrorCode,(DM,Int64,Int64,Int64),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMPlexInsertConeOrientation(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Integer,arg4::Integer)
    ccall((:DMPlexInsertConeOrientation,petscRealSingle),PetscErrorCode,(DM,Int64,Int64,Int64),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetConeOrientation(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    ccall((:DMPlexGetConeOrientation,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Ptr{Int64}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMPlexSetConeOrientation(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMPlexSetConeOrientation,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Int64}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetSupportSize(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMPlexGetSupportSize,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Int64}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMPlexSetSupportSize(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Integer)
    ccall((:DMPlexSetSupportSize,petscRealSingle),PetscErrorCode,(DM,Int64,Int64),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetSupport(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    ccall((:DMPlexGetSupport,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Ptr{Int64}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMPlexSetSupport(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMPlexSetSupport,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Int64}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMPlexInsertSupport(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Integer,arg4::Integer)
    ccall((:DMPlexInsertSupport,petscRealSingle),PetscErrorCode,(DM,Int64,Int64,Int64),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetConeSection(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{PetscSection},StridedArray{PetscSection},Ptr{PetscSection},Ref{PetscSection}})
    ccall((:DMPlexGetConeSection,petscRealSingle),PetscErrorCode,(DM,Ptr{PetscSection}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetSupportSection(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{PetscSection},StridedArray{PetscSection},Ptr{PetscSection},Ref{PetscSection}})
    ccall((:DMPlexGetSupportSection,petscRealSingle),PetscErrorCode,(DM,Ptr{PetscSection}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetCones(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    ccall((:DMPlexGetCones,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{Int64}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetConeOrientations(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    ccall((:DMPlexGetConeOrientations,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{Int64}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetMaxSizes(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMPlexGetMaxSizes,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMPlexSymmetrize(arg0::Type{Float32},arg1::DM)
    ccall((:DMPlexSymmetrize,petscRealSingle),PetscErrorCode,(DM,),arg1)
end
=#
#= skipping function with undefined symbols:
 function DMPlexStratify(arg0::Type{Float32},arg1::DM)
    ccall((:DMPlexStratify,petscRealSingle),PetscErrorCode,(DM,),arg1)
end
=#
#= skipping function with undefined symbols:
 function DMPlexEqual(arg0::Type{Float32},arg1::DM,arg2::DM,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:DMPlexEqual,petscRealSingle),PetscErrorCode,(DM,DM,Ptr{PetscBool}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMPlexReverseCell(arg0::Type{Float32},arg1::DM,arg2::Integer)
    ccall((:DMPlexReverseCell,petscRealSingle),PetscErrorCode,(DM,Int64),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexOrient(arg0::Type{Float32},arg1::DM)
    ccall((:DMPlexOrient,petscRealSingle),PetscErrorCode,(DM,),arg1)
end
=#
#= skipping function with undefined symbols:
 function DMPlexInterpolate(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:DMPlexInterpolate,petscRealSingle),PetscErrorCode,(DM,Ptr{DM}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexUninterpolate(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:DMPlexUninterpolate,petscRealSingle),PetscErrorCode,(DM,Ptr{DM}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexLoad(arg1::PetscViewer{Float32},arg2::DM)
    ccall((:DMPlexLoad,petscRealSingle),PetscErrorCode,(PetscViewer{Float32},DM),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexPreallocateOperator(arg1::DM,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Mat{Float32},arg8::PetscBool)
    ccall((:DMPlexPreallocateOperator,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64},Mat{Float32},PetscBool),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetPointLocal(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMPlexGetPointLocal,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMPlexPointLocalRead(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMPlexPointLocalRead,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Float32},Ptr{Void}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMPlexPointLocalRef(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMPlexPointLocalRef,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Float32},Ptr{Void}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetPointLocalField(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMPlexGetPointLocalField,petscRealSingle),PetscErrorCode,(DM,Int64,Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function DMPlexPointLocalFieldRef(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMPlexPointLocalFieldRef,petscRealSingle),PetscErrorCode,(DM,Int64,Int64,Ptr{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function DMPlexPointLocalFieldRead(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMPlexPointLocalFieldRead,petscRealSingle),PetscErrorCode,(DM,Int64,Int64,Ptr{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetPointGlobal(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMPlexGetPointGlobal,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMPlexPointGlobalRead(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMPlexPointGlobalRead,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Float32},Ptr{Void}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMPlexPointGlobalRef(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMPlexPointGlobalRef,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Float32},Ptr{Void}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetPointGlobalField(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMPlexGetPointGlobalField,petscRealSingle),PetscErrorCode,(DM,Int64,Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function DMPlexPointGlobalFieldRef(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMPlexPointGlobalFieldRef,petscRealSingle),PetscErrorCode,(DM,Int64,Int64,Ptr{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function DMPlexPointGlobalFieldRead(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMPlexPointGlobalFieldRead,petscRealSingle),PetscErrorCode,(DM,Int64,Int64,Ptr{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function DMLabelCreate(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{Ptr{DMLabel},StridedArray{DMLabel},Ptr{DMLabel},Ref{DMLabel}})
    ccall((:DMLabelCreate,petscRealSingle),PetscErrorCode,(Cstring,Ptr{DMLabel}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMLabelView(arg1::DMLabel,arg2::PetscViewer{Float32})
    ccall((:DMLabelView,petscRealSingle),PetscErrorCode,(DMLabel,PetscViewer{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMLabelDestroy(arg0::Type{Float32},arg1::Union{Ptr{DMLabel},StridedArray{DMLabel},Ptr{DMLabel},Ref{DMLabel}})
    ccall((:DMLabelDestroy,petscRealSingle),PetscErrorCode,(Ptr{DMLabel},),arg1)
end
=#
#= skipping function with undefined symbols:
 function DMLabelDuplicate(arg0::Type{Float32},arg1::DMLabel,arg2::Union{Ptr{DMLabel},StridedArray{DMLabel},Ptr{DMLabel},Ref{DMLabel}})
    ccall((:DMLabelDuplicate,petscRealSingle),PetscErrorCode,(DMLabel,Ptr{DMLabel}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMLabelGetName(arg0::Type{Float32},arg1::DMLabel,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    ccall((:DMLabelGetName,petscRealSingle),PetscErrorCode,(DMLabel,Ptr{Ptr{UInt8}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMLabelGetValue(arg0::Type{Float32},arg1::DMLabel,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMLabelGetValue,petscRealSingle),PetscErrorCode,(DMLabel,Int64,Ptr{Int64}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMLabelSetValue(arg0::Type{Float32},arg1::DMLabel,arg2::Integer,arg3::Integer)
    ccall((:DMLabelSetValue,petscRealSingle),PetscErrorCode,(DMLabel,Int64,Int64),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMLabelClearValue(arg0::Type{Float32},arg1::DMLabel,arg2::Integer,arg3::Integer)
    ccall((:DMLabelClearValue,petscRealSingle),PetscErrorCode,(DMLabel,Int64,Int64),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMLabelInsertIS(arg1::DMLabel,arg2::IS{Float32},arg3::Integer)
    ccall((:DMLabelInsertIS,petscRealSingle),PetscErrorCode,(DMLabel,IS{Float32},Int64),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMLabelGetNumValues(arg0::Type{Float32},arg1::DMLabel,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMLabelGetNumValues,petscRealSingle),PetscErrorCode,(DMLabel,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMLabelGetStratumBounds(arg0::Type{Float32},arg1::DMLabel,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMLabelGetStratumBounds,petscRealSingle),PetscErrorCode,(DMLabel,Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMLabelGetValueIS(arg1::DMLabel,arg2::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    ccall((:DMLabelGetValueIS,petscRealSingle),PetscErrorCode,(DMLabel,Ptr{IS{Float32}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMLabelStratumHasPoint(arg0::Type{Float32},arg1::DMLabel,arg2::Integer,arg3::Integer,arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:DMLabelStratumHasPoint,petscRealSingle),PetscErrorCode,(DMLabel,Int64,Int64,Ptr{PetscBool}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMLabelGetStratumSize(arg0::Type{Float32},arg1::DMLabel,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMLabelGetStratumSize,petscRealSingle),PetscErrorCode,(DMLabel,Int64,Ptr{Int64}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMLabelGetStratumIS(arg1::DMLabel,arg2::Integer,arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    ccall((:DMLabelGetStratumIS,petscRealSingle),PetscErrorCode,(DMLabel,Int64,Ptr{IS{Float32}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMLabelClearStratum(arg0::Type{Float32},arg1::DMLabel,arg2::Integer)
    ccall((:DMLabelClearStratum,petscRealSingle),PetscErrorCode,(DMLabel,Int64),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMLabelCreateIndex(arg0::Type{Float32},arg1::DMLabel,arg2::Integer,arg3::Integer)
    ccall((:DMLabelCreateIndex,petscRealSingle),PetscErrorCode,(DMLabel,Int64,Int64),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMLabelDestroyIndex(arg0::Type{Float32},arg1::DMLabel)
    ccall((:DMLabelDestroyIndex,petscRealSingle),PetscErrorCode,(DMLabel,),arg1)
end
=#
#= skipping function with undefined symbols:
 function DMLabelHasValue(arg0::Type{Float32},arg1::DMLabel,arg2::Integer,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:DMLabelHasValue,petscRealSingle),PetscErrorCode,(DMLabel,Int64,Ptr{PetscBool}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMLabelHasPoint(arg0::Type{Float32},arg1::DMLabel,arg2::Integer,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:DMLabelHasPoint,petscRealSingle),PetscErrorCode,(DMLabel,Int64,Ptr{PetscBool}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMLabelFilter(arg0::Type{Float32},arg1::DMLabel,arg2::Integer,arg3::Integer)
    ccall((:DMLabelFilter,petscRealSingle),PetscErrorCode,(DMLabel,Int64,Int64),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMLabelPermute(arg1::DMLabel,arg2::IS{Float32},arg3::Union{Ptr{DMLabel},StridedArray{DMLabel},Ptr{DMLabel},Ref{DMLabel}})
    ccall((:DMLabelPermute,petscRealSingle),PetscErrorCode,(DMLabel,IS{Float32},Ptr{DMLabel}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMLabelDistribute(arg0::Type{Float32},arg1::DMLabel,arg2::PetscSF,arg3::Union{Ptr{DMLabel},StridedArray{DMLabel},Ptr{DMLabel},Ref{DMLabel}})
    ccall((:DMLabelDistribute,petscRealSingle),PetscErrorCode,(DMLabel,PetscSF,Ptr{DMLabel}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMPlexCreateLabel(arg0::Type{Float32},arg1::DM,arg2::Union{ByteString,Symbol})
    ccall((:DMPlexCreateLabel,petscRealSingle),PetscErrorCode,(DM,Cstring),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetLabelValue(arg0::Type{Float32},arg1::DM,arg2::Union{ByteString,Symbol},arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMPlexGetLabelValue,petscRealSingle),PetscErrorCode,(DM,Cstring,Int64,Ptr{Int64}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMPlexSetLabelValue(arg0::Type{Float32},arg1::DM,arg2::Union{ByteString,Symbol},arg3::Integer,arg4::Integer)
    ccall((:DMPlexSetLabelValue,petscRealSingle),PetscErrorCode,(DM,Cstring,Int64,Int64),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMPlexClearLabelValue(arg0::Type{Float32},arg1::DM,arg2::Union{ByteString,Symbol},arg3::Integer,arg4::Integer)
    ccall((:DMPlexClearLabelValue,petscRealSingle),PetscErrorCode,(DM,Cstring,Int64,Int64),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetLabelSize(arg0::Type{Float32},arg1::DM,arg2::Union{ByteString,Symbol},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMPlexGetLabelSize,petscRealSingle),PetscErrorCode,(DM,Cstring,Ptr{Int64}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetLabelIdIS(arg1::DM,arg2::Union{ByteString,Symbol},arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    ccall((:DMPlexGetLabelIdIS,petscRealSingle),PetscErrorCode,(DM,Cstring,Ptr{IS{Float32}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetStratumSize(arg0::Type{Float32},arg1::DM,arg2::Union{ByteString,Symbol},arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMPlexGetStratumSize,petscRealSingle),PetscErrorCode,(DM,Cstring,Int64,Ptr{Int64}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetStratumIS(arg1::DM,arg2::Union{ByteString,Symbol},arg3::Integer,arg4::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    ccall((:DMPlexGetStratumIS,petscRealSingle),PetscErrorCode,(DM,Cstring,Int64,Ptr{IS{Float32}}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMPlexClearLabelStratum(arg0::Type{Float32},arg1::DM,arg2::Union{ByteString,Symbol},arg3::Integer)
    ccall((:DMPlexClearLabelStratum,petscRealSingle),PetscErrorCode,(DM,Cstring,Int64),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetLabelOutput(arg0::Type{Float32},arg1::DM,arg2::Union{ByteString,Symbol},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:DMPlexGetLabelOutput,petscRealSingle),PetscErrorCode,(DM,Cstring,Ptr{PetscBool}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMPlexSetLabelOutput(arg0::Type{Float32},arg1::DM,arg2::Union{ByteString,Symbol},arg3::PetscBool)
    ccall((:DMPlexSetLabelOutput,petscRealSingle),PetscErrorCode,(DM,Cstring,PetscBool),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscSectionCreateGlobalSectionLabel(arg0::Type{Float32},arg1::PetscSection,arg2::PetscSF,arg3::PetscBool,arg4::DMLabel,arg5::Integer,arg6::Union{Ptr{PetscSection},StridedArray{PetscSection},Ptr{PetscSection},Ref{PetscSection}})
    ccall((:PetscSectionCreateGlobalSectionLabel,petscRealSingle),PetscErrorCode,(PetscSection,PetscSF,PetscBool,DMLabel,Int64,Ptr{PetscSection}),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetNumLabels(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMPlexGetNumLabels,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetLabelName(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    ccall((:DMPlexGetLabelName,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Ptr{UInt8}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMPlexHasLabel(arg0::Type{Float32},arg1::DM,arg2::Union{ByteString,Symbol},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:DMPlexHasLabel,petscRealSingle),PetscErrorCode,(DM,Cstring,Ptr{PetscBool}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetLabel(arg0::Type{Float32},arg1::DM,arg2::Union{ByteString,Symbol},arg3::Union{Ptr{DMLabel},StridedArray{DMLabel},Ptr{DMLabel},Ref{DMLabel}})
    ccall((:DMPlexGetLabel,petscRealSingle),PetscErrorCode,(DM,Cstring,Ptr{DMLabel}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetLabelByNum(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{DMLabel},StridedArray{DMLabel},Ptr{DMLabel},Ref{DMLabel}})
    ccall((:DMPlexGetLabelByNum,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{DMLabel}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMPlexAddLabel(arg0::Type{Float32},arg1::DM,arg2::DMLabel)
    ccall((:DMPlexAddLabel,petscRealSingle),PetscErrorCode,(DM,DMLabel),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexRemoveLabel(arg0::Type{Float32},arg1::DM,arg2::Union{ByteString,Symbol},arg3::Union{Ptr{DMLabel},StridedArray{DMLabel},Ptr{DMLabel},Ref{DMLabel}})
    ccall((:DMPlexRemoveLabel,petscRealSingle),PetscErrorCode,(DM,Cstring,Ptr{DMLabel}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetCellNumbering(arg1::DM,arg2::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    ccall((:DMPlexGetCellNumbering,petscRealSingle),PetscErrorCode,(DM,Ptr{IS{Float32}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetVertexNumbering(arg1::DM,arg2::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    ccall((:DMPlexGetVertexNumbering,petscRealSingle),PetscErrorCode,(DM,Ptr{IS{Float32}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexCreatePointNumbering(arg1::DM,arg2::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    ccall((:DMPlexCreatePointNumbering,petscRealSingle),PetscErrorCode,(DM,Ptr{IS{Float32}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetDepth(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMPlexGetDepth,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetDepthLabel(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{DMLabel},StridedArray{DMLabel},Ptr{DMLabel},Ref{DMLabel}})
    ccall((:DMPlexGetDepthLabel,petscRealSingle),PetscErrorCode,(DM,Ptr{DMLabel}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetDepthStratum(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMPlexGetDepthStratum,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetHeightStratum(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMPlexGetHeightStratum,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetMeet(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    ccall((:DMPlexGetMeet,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Int64},Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetFullMeet(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    ccall((:DMPlexGetFullMeet,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Int64},Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function DMPlexRestoreMeet(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    ccall((:DMPlexRestoreMeet,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Int64},Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetJoin(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    ccall((:DMPlexGetJoin,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Int64},Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetFullJoin(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    ccall((:DMPlexGetFullJoin,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Int64},Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function DMPlexRestoreJoin(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    ccall((:DMPlexRestoreJoin,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Int64},Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetTransitiveClosure(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::PetscBool,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    ccall((:DMPlexGetTransitiveClosure,petscRealSingle),PetscErrorCode,(DM,Int64,PetscBool,Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function DMPlexRestoreTransitiveClosure(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::PetscBool,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    ccall((:DMPlexRestoreTransitiveClosure,petscRealSingle),PetscErrorCode,(DM,Int64,PetscBool,Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGenerate(arg0::Type{Float32},arg1::DM,arg2::Union{ByteString,Symbol},arg3::PetscBool,arg4::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:DMPlexGenerate,petscRealSingle),PetscErrorCode,(DM,Cstring,PetscBool,Ptr{DM}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMPlexCopyCoordinates(arg0::Type{Float32},arg1::DM,arg2::DM)
    ccall((:DMPlexCopyCoordinates,petscRealSingle),PetscErrorCode,(DM,DM),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexCopyLabels(arg0::Type{Float32},arg1::DM,arg2::DM)
    ccall((:DMPlexCopyLabels,petscRealSingle),PetscErrorCode,(DM,DM),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexCreateDoublet(arg0::Type{Float32},arg1::MPI_Comm,arg2::Integer,arg3::PetscBool,arg4::PetscBool,arg5::PetscBool,arg6::Float32,arg7::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:DMPlexCreateDoublet,petscRealSingle),PetscErrorCode,(comm_type,Int64,PetscBool,PetscBool,PetscBool,Float32,Ptr{DM}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
#= skipping function with undefined symbols:
 function DMPlexCreateSquareBoundary(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMPlexCreateSquareBoundary,petscRealSingle),PetscErrorCode,(DM,Ptr{Float32},Ptr{Float32},Ptr{Int64}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMPlexCreateCubeBoundary(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMPlexCreateCubeBoundary,petscRealSingle),PetscErrorCode,(DM,Ptr{Float32},Ptr{Float32},Ptr{Int64}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMPlexCreateSquareMesh(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::DMBoundaryType,arg6::DMBoundaryType)
    ccall((:DMPlexCreateSquareMesh,petscRealSingle),PetscErrorCode,(DM,Ptr{Float32},Ptr{Float32},Ptr{Int64},DMBoundaryType,DMBoundaryType),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
#= skipping function with undefined symbols:
 function DMPlexCreateBoxMesh(arg0::Type{Float32},arg1::MPI_Comm,arg2::Integer,arg3::PetscBool,arg4::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:DMPlexCreateBoxMesh,petscRealSingle),PetscErrorCode,(comm_type,Int64,PetscBool,Ptr{DM}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMPlexCreateHexBoxMesh(arg0::Type{Float32},arg1::MPI_Comm,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::DMBoundaryType,arg5::DMBoundaryType,arg6::DMBoundaryType,arg7::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:DMPlexCreateHexBoxMesh,petscRealSingle),PetscErrorCode,(comm_type,Int64,Ptr{Int64},DMBoundaryType,DMBoundaryType,DMBoundaryType,Ptr{DM}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
#= skipping function with undefined symbols:
 function DMPlexCreateConeSection(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{PetscSection},StridedArray{PetscSection},Ptr{PetscSection},Ref{PetscSection}})
    ccall((:DMPlexCreateConeSection,petscRealSingle),PetscErrorCode,(DM,Ptr{PetscSection}),arg1,arg2)
end
=#
function DMPlexInvertCell(arg0::Type{Float32},arg1::Integer,arg2::Integer,arg3::Union{Ptr{Cint},StridedArray{Cint},Ptr{Cint},Ref{Cint}})
    err = ccall((:DMPlexInvertCell,petscRealSingle),PetscErrorCode,(Int64,Int64,Ptr{Cint}),arg1,arg2,arg3)
    return err
end

#= skipping function with undefined symbols:
 function DMPlexLocalizeCoordinate(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:DMPlexLocalizeCoordinate,petscRealSingle),PetscErrorCode,(DM,Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMPlexLocalizeCoordinates(arg0::Type{Float32},arg1::DM)
    ccall((:DMPlexLocalizeCoordinates,petscRealSingle),PetscErrorCode,(DM,),arg1)
end
=#
#= skipping function with undefined symbols:
 function DMPlexCheckSymmetry(arg0::Type{Float32},arg1::DM)
    ccall((:DMPlexCheckSymmetry,petscRealSingle),PetscErrorCode,(DM,),arg1)
end
=#
#= skipping function with undefined symbols:
 function DMPlexCheckSkeleton(arg0::Type{Float32},arg1::DM,arg2::PetscBool,arg3::Integer)
    ccall((:DMPlexCheckSkeleton,petscRealSingle),PetscErrorCode,(DM,PetscBool,Int64),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMPlexCheckFaces(arg0::Type{Float32},arg1::DM,arg2::PetscBool,arg3::Integer)
    ccall((:DMPlexCheckFaces,petscRealSingle),PetscErrorCode,(DM,PetscBool,Int64),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMPlexTriangleSetOptions(arg0::Type{Float32},arg1::DM,arg2::Union{ByteString,Symbol})
    ccall((:DMPlexTriangleSetOptions,petscRealSingle),PetscErrorCode,(DM,Cstring),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexTetgenSetOptions(arg0::Type{Float32},arg1::DM,arg2::Union{ByteString,Symbol})
    ccall((:DMPlexTetgenSetOptions,petscRealSingle),PetscErrorCode,(DM,Cstring),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexCreateNeighborCSR(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    ccall((:DMPlexCreateNeighborCSR,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetPartitioner(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{PetscPartitioner},StridedArray{PetscPartitioner},Ptr{PetscPartitioner},Ref{PetscPartitioner}})
    ccall((:DMPlexGetPartitioner,petscRealSingle),PetscErrorCode,(DM,Ptr{PetscPartitioner}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexSetPartitioner(arg0::Type{Float32},arg1::DM,arg2::PetscPartitioner)
    ccall((:DMPlexSetPartitioner,petscRealSingle),PetscErrorCode,(DM,PetscPartitioner),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexCreatePartition(arg1::DM,arg2::Union{ByteString,Symbol},arg3::Integer,arg4::PetscBool,arg5::Union{Ptr{PetscSection},StridedArray{PetscSection},Ptr{PetscSection},Ref{PetscSection}},arg6::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg7::Union{Ptr{PetscSection},StridedArray{PetscSection},Ptr{PetscSection},Ref{PetscSection}},arg8::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    ccall((:DMPlexCreatePartition,petscRealSingle),PetscErrorCode,(DM,Cstring,Int64,PetscBool,Ptr{PetscSection},Ptr{IS{Float32}},Ptr{PetscSection},Ptr{IS{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
end
=#
#= skipping function with undefined symbols:
 function DMPlexCreatePartitionerGraph(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    ccall((:DMPlexCreatePartitionerGraph,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function DMPlexCreatePartitionClosure(arg1::DM,arg2::PetscSection,arg3::IS{Float32},arg4::Union{Ptr{PetscSection},StridedArray{PetscSection},Ptr{PetscSection},Ref{PetscSection}},arg5::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    ccall((:DMPlexCreatePartitionClosure,petscRealSingle),PetscErrorCode,(DM,PetscSection,IS{Float32},Ptr{PetscSection},Ptr{IS{Float32}}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function DMPlexPartitionLabelInvert(arg0::Type{Float32},arg1::DM,arg2::DMLabel,arg3::PetscSF,arg4::DMLabel)
    ccall((:DMPlexPartitionLabelInvert,petscRealSingle),PetscErrorCode,(DM,DMLabel,PetscSF,DMLabel),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMPlexPartitionLabelClosure(arg0::Type{Float32},arg1::DM,arg2::DMLabel)
    ccall((:DMPlexPartitionLabelClosure,petscRealSingle),PetscErrorCode,(DM,DMLabel),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexPartitionLabelAdjacency(arg0::Type{Float32},arg1::DM,arg2::DMLabel)
    ccall((:DMPlexPartitionLabelAdjacency,petscRealSingle),PetscErrorCode,(DM,DMLabel),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexPartitionLabelCreateSF(arg0::Type{Float32},arg1::DM,arg2::DMLabel,arg3::Union{Ptr{PetscSF},StridedArray{PetscSF},Ptr{PetscSF},Ref{PetscSF}})
    ccall((:DMPlexPartitionLabelCreateSF,petscRealSingle),PetscErrorCode,(DM,DMLabel,Ptr{PetscSF}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMPlexDistribute(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{PetscSF},StridedArray{PetscSF},Ptr{PetscSF},Ref{PetscSF}},arg4::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:DMPlexDistribute,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{PetscSF},Ptr{DM}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMPlexDistributeOverlap(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{PetscSF},StridedArray{PetscSF},Ptr{PetscSF},Ref{PetscSF}},arg4::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:DMPlexDistributeOverlap,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{PetscSF},Ptr{DM}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMPlexDistributeField(arg1::DM,arg2::PetscSF,arg3::PetscSection,arg4::Vec{Float32},arg5::PetscSection,arg6::Vec{Float32})
    ccall((:DMPlexDistributeField,petscRealSingle),PetscErrorCode,(DM,PetscSF,PetscSection,Vec{Float32},PetscSection,Vec{Float32}),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
#= skipping function with undefined symbols:
 function DMPlexDistributeFieldIS(arg1::DM,arg2::PetscSF,arg3::PetscSection,arg4::IS{Float32},arg5::PetscSection,arg6::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    ccall((:DMPlexDistributeFieldIS,petscRealSingle),PetscErrorCode,(DM,PetscSF,PetscSection,IS{Float32},PetscSection,Ptr{IS{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
#= skipping function with undefined symbols:
 function DMPlexDistributeData(arg0::Type{Float32},arg1::DM,arg2::PetscSF,arg3::PetscSection,arg4::MPI_Datatype,arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg6::PetscSection,arg7::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    ccall((:DMPlexDistributeData,petscRealSingle),PetscErrorCode,(DM,PetscSF,PetscSection,MPI_Datatype,Ptr{Void},PetscSection,Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
#= skipping function with undefined symbols:
 function DMPlexMigrate(arg0::Type{Float32},arg1::DM,arg2::PetscSF,arg3::DM)
    ccall((:DMPlexMigrate,petscRealSingle),PetscErrorCode,(DM,PetscSF,DM),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMPlexSetAdjacencyUseCone(arg0::Type{Float32},arg1::DM,arg2::PetscBool)
    ccall((:DMPlexSetAdjacencyUseCone,petscRealSingle),PetscErrorCode,(DM,PetscBool),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetAdjacencyUseCone(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:DMPlexGetAdjacencyUseCone,petscRealSingle),PetscErrorCode,(DM,Ptr{PetscBool}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexSetAdjacencyUseClosure(arg0::Type{Float32},arg1::DM,arg2::PetscBool)
    ccall((:DMPlexSetAdjacencyUseClosure,petscRealSingle),PetscErrorCode,(DM,PetscBool),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetAdjacencyUseClosure(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:DMPlexGetAdjacencyUseClosure,petscRealSingle),PetscErrorCode,(DM,Ptr{PetscBool}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexSetAdjacencyUseAnchors(arg0::Type{Float32},arg1::DM,arg2::PetscBool)
    ccall((:DMPlexSetAdjacencyUseAnchors,petscRealSingle),PetscErrorCode,(DM,PetscBool),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetAdjacencyUseAnchors(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:DMPlexGetAdjacencyUseAnchors,petscRealSingle),PetscErrorCode,(DM,Ptr{PetscBool}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetAdjacency(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    ccall((:DMPlexGetAdjacency,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetOrdering(arg1::DM,arg2::MatOrderingType,arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    ccall((:DMPlexGetOrdering,petscRealSingle),PetscErrorCode,(DM,Cstring,Ptr{IS{Float32}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMPlexPermute(arg1::DM,arg2::IS{Float32},arg3::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:DMPlexPermute,petscRealSingle),PetscErrorCode,(DM,IS{Float32},Ptr{DM}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMPlexCreateProcessSF(arg1::DM,arg2::PetscSF,arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg4::Union{Ptr{PetscSF},StridedArray{PetscSF},Ptr{PetscSF},Ref{PetscSF}})
    ccall((:DMPlexCreateProcessSF,petscRealSingle),PetscErrorCode,(DM,PetscSF,Ptr{IS{Float32}},Ptr{PetscSF}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMPlexCreateTwoSidedProcessSF(arg1::DM,arg2::PetscSF,arg3::PetscSection,arg4::IS{Float32},arg5::PetscSection,arg6::IS{Float32},arg7::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg8::Union{Ptr{PetscSF},StridedArray{PetscSF},Ptr{PetscSF},Ref{PetscSF}})
    ccall((:DMPlexCreateTwoSidedProcessSF,petscRealSingle),PetscErrorCode,(DM,PetscSF,PetscSection,IS{Float32},PetscSection,IS{Float32},Ptr{IS{Float32}},Ptr{PetscSF}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
end
=#
#= skipping function with undefined symbols:
 function DMPlexDistributeOwnership(arg1::DM,arg2::PetscSection,arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg4::PetscSection,arg5::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    ccall((:DMPlexDistributeOwnership,petscRealSingle),PetscErrorCode,(DM,PetscSection,Ptr{IS{Float32}},PetscSection,Ptr{IS{Float32}}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function DMPlexCreateOverlap(arg1::DM,arg2::Integer,arg3::PetscSection,arg4::IS{Float32},arg5::PetscSection,arg6::IS{Float32},arg7::Union{Ptr{DMLabel},StridedArray{DMLabel},Ptr{DMLabel},Ref{DMLabel}})
    ccall((:DMPlexCreateOverlap,petscRealSingle),PetscErrorCode,(DM,Int64,PetscSection,IS{Float32},PetscSection,IS{Float32},Ptr{DMLabel}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
#= skipping function with undefined symbols:
 function DMPlexCreateOverlapMigrationSF(arg0::Type{Float32},arg1::DM,arg2::PetscSF,arg3::Union{Ptr{PetscSF},StridedArray{PetscSF},Ptr{PetscSF},Ref{PetscSF}})
    ccall((:DMPlexCreateOverlapMigrationSF,petscRealSingle),PetscErrorCode,(DM,PetscSF,Ptr{PetscSF}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMPlexStratifyMigrationSF(arg0::Type{Float32},arg1::DM,arg2::PetscSF,arg3::Union{Ptr{PetscSF},StridedArray{PetscSF},Ptr{PetscSF},Ref{PetscSF}})
    ccall((:DMPlexStratifyMigrationSF,petscRealSingle),PetscErrorCode,(DM,PetscSF,Ptr{PetscSF}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMPlexCreateSubmesh(arg0::Type{Float32},arg1::DM,arg2::DMLabel,arg3::Integer,arg4::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:DMPlexCreateSubmesh,petscRealSingle),PetscErrorCode,(DM,DMLabel,Int64,Ptr{DM}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMPlexCreateHybridMesh(arg0::Type{Float32},arg1::DM,arg2::DMLabel,arg3::Union{Ptr{DMLabel},StridedArray{DMLabel},Ptr{DMLabel},Ref{DMLabel}},arg4::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:DMPlexCreateHybridMesh,petscRealSingle),PetscErrorCode,(DM,DMLabel,Ptr{DMLabel},Ptr{DM}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetSubpointMap(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{DMLabel},StridedArray{DMLabel},Ptr{DMLabel},Ref{DMLabel}})
    ccall((:DMPlexGetSubpointMap,petscRealSingle),PetscErrorCode,(DM,Ptr{DMLabel}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexSetSubpointMap(arg0::Type{Float32},arg1::DM,arg2::DMLabel)
    ccall((:DMPlexSetSubpointMap,petscRealSingle),PetscErrorCode,(DM,DMLabel),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexCreateSubpointIS(arg1::DM,arg2::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    ccall((:DMPlexCreateSubpointIS,petscRealSingle),PetscErrorCode,(DM,Ptr{IS{Float32}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexMarkBoundaryFaces(arg0::Type{Float32},arg1::DM,arg2::DMLabel)
    ccall((:DMPlexMarkBoundaryFaces,petscRealSingle),PetscErrorCode,(DM,DMLabel),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexLabelComplete(arg0::Type{Float32},arg1::DM,arg2::DMLabel)
    ccall((:DMPlexLabelComplete,petscRealSingle),PetscErrorCode,(DM,DMLabel),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexLabelCohesiveComplete(arg0::Type{Float32},arg1::DM,arg2::DMLabel,arg3::DMLabel,arg4::PetscBool,arg5::DM)
    ccall((:DMPlexLabelCohesiveComplete,petscRealSingle),PetscErrorCode,(DM,DMLabel,DMLabel,PetscBool,DM),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function DMPlexLabelAddCells(arg0::Type{Float32},arg1::DM,arg2::DMLabel)
    ccall((:DMPlexLabelAddCells,petscRealSingle),PetscErrorCode,(DM,DMLabel),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetRefinementLimit(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:DMPlexGetRefinementLimit,petscRealSingle),PetscErrorCode,(DM,Ptr{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexSetRefinementLimit(arg0::Type{Float32},arg1::DM,arg2::Float32)
    ccall((:DMPlexSetRefinementLimit,petscRealSingle),PetscErrorCode,(DM,Float32),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetRefinementUniform(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:DMPlexGetRefinementUniform,petscRealSingle),PetscErrorCode,(DM,Ptr{PetscBool}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexSetRefinementUniform(arg0::Type{Float32},arg1::DM,arg2::PetscBool)
    ccall((:DMPlexSetRefinementUniform,petscRealSingle),PetscErrorCode,(DM,PetscBool),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetCoarseDM(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:DMPlexGetCoarseDM,petscRealSingle),PetscErrorCode,(DM,Ptr{DM}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexSetCoarseDM(arg0::Type{Float32},arg1::DM,arg2::DM)
    ccall((:DMPlexSetCoarseDM,petscRealSingle),PetscErrorCode,(DM,DM),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexCreateCoarsePointIS(arg1::DM,arg2::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    ccall((:DMPlexCreateCoarsePointIS,petscRealSingle),PetscErrorCode,(DM,Ptr{IS{Float32}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetNumFaceVertices(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMPlexGetNumFaceVertices,petscRealSingle),PetscErrorCode,(DM,Int64,Int64,Ptr{Int64}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetOrientedFace(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg9::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:DMPlexGetOrientedFace,petscRealSingle),PetscErrorCode,(DM,Int64,Int64,Ptr{Int64},Int64,Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetMinRadius(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:DMPlexGetMinRadius,petscRealSingle),PetscErrorCode,(DM,Ptr{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexSetMinRadius(arg0::Type{Float32},arg1::DM,arg2::Float32)
    ccall((:DMPlexSetMinRadius,petscRealSingle),PetscErrorCode,(DM,Float32),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexComputeCellGeometryFVM(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:DMPlexComputeCellGeometryFVM,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Float32},Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function DMPlexComputeGeometryFVM(arg1::DM,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    ccall((:DMPlexComputeGeometryFVM,petscRealSingle),PetscErrorCode,(DM,Ptr{Vec{Float32}},Ptr{Vec{Float32}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMPlexComputeGradientFVM(arg1::DM,arg2::PetscFV,arg3::Vec{Float32},arg4::Vec{Float32},arg5::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:DMPlexComputeGradientFVM,petscRealSingle),PetscErrorCode,(DM,PetscFV,Vec{Float32},Vec{Float32},Ptr{DM}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function DMPlexInsertBoundaryValues(arg1::DM,arg2::Vec{Float32},arg3::Float32,arg4::Vec{Float32},arg5::Vec{Float32},arg6::Vec{Float32})
    ccall((:DMPlexInsertBoundaryValues,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},Float32,Vec{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
#= skipping function with undefined symbols:
 function DMPlexCreateSection(arg1::DM,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Integer,arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg9::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg10::IS{Float32},arg11::Union{Ptr{PetscSection},StridedArray{PetscSection},Ptr{PetscSection},Ref{PetscSection}})
    ccall((:DMPlexCreateSection,petscRealSingle),PetscErrorCode,(DM,Int64,Int64,Ptr{Int64},Ptr{Int64},Int64,Ptr{Int64},Ptr{IS{Float32}},Ptr{IS{Float32}},IS{Float32},Ptr{PetscSection}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11)
end
=#
#= skipping function with undefined symbols:
 function DMPlexComputeCellGeometryAffineFEM(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:DMPlexComputeCellGeometryAffineFEM,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
#= skipping function with undefined symbols:
 function DMPlexComputeCellGeometryFEM(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::PetscFE,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:DMPlexComputeCellGeometryFEM,petscRealSingle),PetscErrorCode,(DM,Int64,PetscFE,Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
#= skipping function with undefined symbols:
 function DMPlexComputeGeometryFEM(arg1::DM,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    ccall((:DMPlexComputeGeometryFEM,petscRealSingle),PetscErrorCode,(DM,Ptr{Vec{Float32}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexVecGetClosure(arg1::DM,arg2::PetscSection,arg3::Vec{Float32},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    ccall((:DMPlexVecGetClosure,petscRealSingle),PetscErrorCode,(DM,PetscSection,Vec{Float32},Int64,Ptr{Int64},Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
#= skipping function with undefined symbols:
 function DMPlexVecRestoreClosure(arg1::DM,arg2::PetscSection,arg3::Vec{Float32},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    ccall((:DMPlexVecRestoreClosure,petscRealSingle),PetscErrorCode,(DM,PetscSection,Vec{Float32},Int64,Ptr{Int64},Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
#= skipping function with undefined symbols:
 function DMPlexVecSetClosure(arg1::DM,arg2::PetscSection,arg3::Vec{Float32},arg4::Integer,arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::InsertMode)
    ccall((:DMPlexVecSetClosure,petscRealSingle),PetscErrorCode,(DM,PetscSection,Vec{Float32},Int64,Ptr{Float32},InsertMode),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
#= skipping function with undefined symbols:
 function DMPlexMatSetClosure(arg1::DM,arg2::PetscSection,arg3::PetscSection,arg4::Mat{Float32},arg5::Integer,arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::InsertMode)
    ccall((:DMPlexMatSetClosure,petscRealSingle),PetscErrorCode,(DM,PetscSection,PetscSection,Mat{Float32},Int64,Ptr{Float32},InsertMode),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
#= skipping function with undefined symbols:
 function DMPlexMatSetClosureRefined(arg1::DM,arg2::PetscSection,arg3::PetscSection,arg4::DM,arg5::PetscSection,arg6::PetscSection,arg7::Mat{Float32},arg8::Integer,arg9::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg10::InsertMode)
    ccall((:DMPlexMatSetClosureRefined,petscRealSingle),PetscErrorCode,(DM,PetscSection,PetscSection,DM,PetscSection,PetscSection,Mat{Float32},Int64,Ptr{Float32},InsertMode),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
end
=#
#= skipping function with undefined symbols:
 function DMPlexMatGetClosureIndicesRefined(arg0::Type{Float32},arg1::DM,arg2::PetscSection,arg3::PetscSection,arg4::DM,arg5::PetscSection,arg6::PetscSection,arg7::Integer,arg8::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg9::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMPlexMatGetClosureIndicesRefined,petscRealSingle),PetscErrorCode,(DM,PetscSection,PetscSection,DM,PetscSection,PetscSection,Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
end
=#
#= skipping function with undefined symbols:
 function DMPlexCreateClosureIndex(arg0::Type{Float32},arg1::DM,arg2::PetscSection)
    ccall((:DMPlexCreateClosureIndex,petscRealSingle),PetscErrorCode,(DM,PetscSection),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexCreateFromFile(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Symbol},arg3::PetscBool,arg4::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:DMPlexCreateFromFile,petscRealSingle),PetscErrorCode,(comm_type,Cstring,PetscBool,Ptr{DM}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMPlexCreateExodus(arg0::Type{Float32},arg1::MPI_Comm,arg2::Integer,arg3::PetscBool,arg4::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:DMPlexCreateExodus,petscRealSingle),PetscErrorCode,(comm_type,Int64,PetscBool,Ptr{DM}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMPlexCreateExodusFromFile(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Symbol},arg3::PetscBool,arg4::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:DMPlexCreateExodusFromFile,petscRealSingle),PetscErrorCode,(comm_type,Cstring,PetscBool,Ptr{DM}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMPlexCreateCGNS(arg0::Type{Float32},arg1::MPI_Comm,arg2::Integer,arg3::PetscBool,arg4::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:DMPlexCreateCGNS,petscRealSingle),PetscErrorCode,(comm_type,Int64,PetscBool,Ptr{DM}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMPlexCreateCGNSFromFile(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Symbol},arg3::PetscBool,arg4::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:DMPlexCreateCGNSFromFile,petscRealSingle),PetscErrorCode,(comm_type,Cstring,PetscBool,Ptr{DM}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMPlexCreateGmsh(arg1::MPI_Comm,arg2::PetscViewer{Float32},arg3::PetscBool,arg4::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:DMPlexCreateGmsh,petscRealSingle),PetscErrorCode,(comm_type,PetscViewer{Float32},PetscBool,Ptr{DM}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMPlexCreateGmshFromFile(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Symbol},arg3::PetscBool,arg4::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:DMPlexCreateGmshFromFile,petscRealSingle),PetscErrorCode,(comm_type,Cstring,PetscBool,Ptr{DM}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMPlexCreateFluent(arg1::MPI_Comm,arg2::PetscViewer{Float32},arg3::PetscBool,arg4::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:DMPlexCreateFluent,petscRealSingle),PetscErrorCode,(comm_type,PetscViewer{Float32},PetscBool,Ptr{DM}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMPlexCreateFluentFromFile(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Symbol},arg3::PetscBool,arg4::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:DMPlexCreateFluentFromFile,petscRealSingle),PetscErrorCode,(comm_type,Cstring,PetscBool,Ptr{DM}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMPlexConstructGhostCells(arg0::Type{Float32},arg1::DM,arg2::Union{ByteString,Symbol},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:DMPlexConstructGhostCells,petscRealSingle),PetscErrorCode,(DM,Cstring,Ptr{Int64},Ptr{DM}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMPlexConstructCohesiveCells(arg0::Type{Float32},arg1::DM,arg2::DMLabel,arg3::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:DMPlexConstructCohesiveCells,petscRealSingle),PetscErrorCode,(DM,DMLabel,Ptr{DM}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetHybridBounds(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMPlexGetHybridBounds,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function DMPlexSetHybridBounds(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer)
    ccall((:DMPlexSetHybridBounds,petscRealSingle),PetscErrorCode,(DM,Int64,Int64,Int64,Int64),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetVTKCellHeight(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMPlexGetVTKCellHeight,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexSetVTKCellHeight(arg0::Type{Float32},arg1::DM,arg2::Integer)
    ccall((:DMPlexSetVTKCellHeight,petscRealSingle),PetscErrorCode,(DM,Int64),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexVTKWriteAll(arg1::PetscObject,arg2::PetscViewer{Float32})
    ccall((:DMPlexVTKWriteAll,petscRealSingle),PetscErrorCode,(PetscObject,PetscViewer{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetScale(arg0::Type{Float32},arg1::DM,arg2::PetscUnit,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:DMPlexGetScale,petscRealSingle),PetscErrorCode,(DM,PetscUnit,Ptr{Float32}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMPlexSetScale(arg0::Type{Float32},arg1::DM,arg2::PetscUnit,arg3::Float32)
    ccall((:DMPlexSetScale,petscRealSingle),PetscErrorCode,(DM,PetscUnit,Float32),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMPlexAddBoundary(arg0::Type{Float32},arg1::DM,arg2::PetscBool,arg3::Union{ByteString,Symbol},arg4::Union{ByteString,Symbol},arg5::Integer,arg6::Integer,arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg9::Integer,arg10::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg11::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMPlexAddBoundary,petscRealSingle),PetscErrorCode,(DM,PetscBool,Cstring,Cstring,Int64,Int64,Ptr{Int64},Ptr{Void},Int64,Ptr{Int64},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetNumBoundary(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMPlexGetNumBoundary,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetBoundary(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg4::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg5::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg9::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg10::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg11::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg12::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    ccall((:DMPlexGetBoundary,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{PetscBool},Ptr{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ptr{Int64},Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Void}},Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12)
end
=#
#= skipping function with undefined symbols:
 function DMPlexIsBoundaryPoint(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:DMPlexIsBoundaryPoint,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{PetscBool}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMPlexCopyBoundary(arg0::Type{Float32},arg1::DM,arg2::DM)
    ccall((:DMPlexCopyBoundary,petscRealSingle),PetscErrorCode,(DM,DM),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexInsertBoundaryValuesFEM(arg1::DM,arg2::Vec{Float32})
    ccall((:DMPlexInsertBoundaryValuesFEM,petscRealSingle),PetscErrorCode,(DM,Vec{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexSetMaxProjectionHeight(arg0::Type{Float32},arg1::DM,arg2::Integer)
    ccall((:DMPlexSetMaxProjectionHeight,petscRealSingle),PetscErrorCode,(DM,Int64),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetMaxProjectionHeight(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMPlexGetMaxProjectionHeight,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexProjectFunction(arg1::DM,arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::InsertMode,arg5::Vec{Float32})
    ccall((:DMPlexProjectFunction,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{Void}},Ptr{Ptr{Void}},InsertMode,Vec{Float32}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function DMPlexProjectFunctionLocal(arg1::DM,arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::InsertMode,arg5::Vec{Float32})
    ccall((:DMPlexProjectFunctionLocal,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{Void}},Ptr{Ptr{Void}},InsertMode,Vec{Float32}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function DMPlexProjectFieldLocal(arg1::DM,arg2::Vec{Float32},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::InsertMode,arg5::Vec{Float32})
    ccall((:DMPlexProjectFieldLocal,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},Ptr{Ptr{Void}},InsertMode,Vec{Float32}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function DMPlexComputeL2Diff(arg1::DM,arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::Vec{Float32},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:DMPlexComputeL2Diff,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{Void}},Ptr{Ptr{Void}},Vec{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function DMPlexComputeL2GradientDiff(arg1::DM,arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::Vec{Float32},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:DMPlexComputeL2GradientDiff,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{Void}},Ptr{Ptr{Void}},Vec{Float32},Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
#= skipping function with undefined symbols:
 function DMPlexComputeL2FieldDiff(arg1::DM,arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::Vec{Float32},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:DMPlexComputeL2FieldDiff,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{Void}},Ptr{Ptr{Void}},Vec{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function DMPlexComputeIntegralFEM(arg1::DM,arg2::Vec{Float32},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMPlexComputeIntegralFEM,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},Ptr{Float32},Ptr{Void}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMPlexComputeInterpolatorFEM(arg1::DM,arg2::DM,arg3::Mat{Float32},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMPlexComputeInterpolatorFEM,petscRealSingle),PetscErrorCode,(DM,DM,Mat{Float32},Ptr{Void}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMPlexComputeInjectorFEM(arg1::DM,arg2::DM,arg3::Union{Ptr{VecScatter{Float32}},StridedArray{VecScatter{Float32}},Ptr{VecScatter{Float32}},Ref{VecScatter{Float32}}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMPlexComputeInjectorFEM,petscRealSingle),PetscErrorCode,(DM,DM,Ptr{VecScatter{Float32}},Ptr{Void}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMPlexCreateRigidBody(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{MatNullSpace},StridedArray{MatNullSpace},Ptr{MatNullSpace},Ref{MatNullSpace}})
    ccall((:DMPlexCreateRigidBody,petscRealSingle),PetscErrorCode,(DM,Ptr{MatNullSpace}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexSNESComputeResidualFEM(arg1::DM,arg2::Vec{Float32},arg3::Vec{Float32},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMPlexSNESComputeResidualFEM,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},Vec{Float32},Ptr{Void}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMPlexSNESComputeJacobianFEM(arg1::DM,arg2::Vec{Float32},arg3::Mat{Float32},arg4::Mat{Float32},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMPlexSNESComputeJacobianFEM,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},Mat{Float32},Mat{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function DMPlexTSComputeRHSFunctionFVM(arg1::DM,arg2::Float32,arg3::Vec{Float32},arg4::Vec{Float32},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMPlexTSComputeRHSFunctionFVM,petscRealSingle),PetscErrorCode,(DM,Float32,Vec{Float32},Vec{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function DMPlexTSComputeIFunctionFEM(arg1::DM,arg2::Float32,arg3::Vec{Float32},arg4::Vec{Float32},arg5::Vec{Float32},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMPlexTSComputeIFunctionFEM,petscRealSingle),PetscErrorCode,(DM,Float32,Vec{Float32},Vec{Float32},Vec{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
#= skipping function with undefined symbols:
 function DMPlexComputeRHSFunctionFVM(arg1::DM,arg2::Float32,arg3::Vec{Float32},arg4::Vec{Float32},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMPlexComputeRHSFunctionFVM,petscRealSingle),PetscErrorCode,(DM,Float32,Vec{Float32},Vec{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetAnchors(arg1::DM,arg2::Union{Ptr{PetscSection},StridedArray{PetscSection},Ptr{PetscSection},Ref{PetscSection}},arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    ccall((:DMPlexGetAnchors,petscRealSingle),PetscErrorCode,(DM,Ptr{PetscSection},Ptr{IS{Float32}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMPlexSetAnchors(arg1::DM,arg2::PetscSection,arg3::IS{Float32})
    ccall((:DMPlexSetAnchors,petscRealSingle),PetscErrorCode,(DM,PetscSection,IS{Float32}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMPlexSetReferenceTree(arg0::Type{Float32},arg1::DM,arg2::DM)
    ccall((:DMPlexSetReferenceTree,petscRealSingle),PetscErrorCode,(DM,DM),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetReferenceTree(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:DMPlexGetReferenceTree,petscRealSingle),PetscErrorCode,(DM,Ptr{DM}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexReferenceTreeGetChildSymmetry(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMPlexReferenceTreeGetChildSymmetry,petscRealSingle),PetscErrorCode,(DM,Int64,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
end
=#
#= skipping function with undefined symbols:
 function DMPlexCreateDefaultReferenceTree(arg0::Type{Float32},arg1::MPI_Comm,arg2::Integer,arg3::PetscBool,arg4::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:DMPlexCreateDefaultReferenceTree,petscRealSingle),PetscErrorCode,(comm_type,Int64,PetscBool,Ptr{DM}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMPlexSetTree(arg0::Type{Float32},arg1::DM,arg2::PetscSection,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMPlexSetTree,petscRealSingle),PetscErrorCode,(DM,PetscSection,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetTree(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{PetscSection},StridedArray{PetscSection},Ptr{PetscSection},Ref{PetscSection}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg5::Union{Ptr{PetscSection},StridedArray{PetscSection},Ptr{PetscSection},Ref{PetscSection}},arg6::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    ccall((:DMPlexGetTree,petscRealSingle),PetscErrorCode,(DM,Ptr{PetscSection},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}},Ptr{PetscSection},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetTreeParent(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMPlexGetTreeParent,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetTreeChildren(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    ccall((:DMPlexGetTreeChildren,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMPlexTreeRefineCell(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:DMPlexTreeRefineCell,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{DM}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMRedundantCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::PetscMPIInt,arg3::Integer,arg4::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:DMRedundantCreate,petscRealSingle),PetscErrorCode,(comm_type,PetscMPIInt,Int64,Ptr{DM}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMRedundantSetSize(arg0::Type{Float32},arg1::DM,arg2::PetscMPIInt,arg3::Integer)
    ccall((:DMRedundantSetSize,petscRealSingle),PetscErrorCode,(DM,PetscMPIInt,Int64),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMRedundantGetSize(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{PetscMPIInt},StridedArray{PetscMPIInt},Ptr{PetscMPIInt},Ref{PetscMPIInt}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMRedundantGetSize,petscRealSingle),PetscErrorCode,(DM,Ptr{PetscMPIInt},Ptr{Int64}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMShellCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:DMShellCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{DM}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMShellSetMatrix(arg1::DM,arg2::Mat{Float32})
    ccall((:DMShellSetMatrix,petscRealSingle),PetscErrorCode,(DM,Mat{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMShellSetGlobalVector(arg1::DM,arg2::Vec{Float32})
    ccall((:DMShellSetGlobalVector,petscRealSingle),PetscErrorCode,(DM,Vec{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMShellSetLocalVector(arg1::DM,arg2::Vec{Float32})
    ccall((:DMShellSetLocalVector,petscRealSingle),PetscErrorCode,(DM,Vec{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMShellSetCreateGlobalVector(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMShellSetCreateGlobalVector,petscRealSingle),PetscErrorCode,(DM,Ptr{Void}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMShellSetCreateLocalVector(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMShellSetCreateLocalVector,petscRealSingle),PetscErrorCode,(DM,Ptr{Void}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMShellSetGlobalToLocal(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMShellSetGlobalToLocal,petscRealSingle),PetscErrorCode,(DM,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMShellSetGlobalToLocalVecScatter(arg1::DM,arg2::VecScatter{Float32})
    ccall((:DMShellSetGlobalToLocalVecScatter,petscRealSingle),PetscErrorCode,(DM,VecScatter{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMShellSetLocalToGlobal(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMShellSetLocalToGlobal,petscRealSingle),PetscErrorCode,(DM,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMShellSetLocalToGlobalVecScatter(arg1::DM,arg2::VecScatter{Float32})
    ccall((:DMShellSetLocalToGlobalVecScatter,petscRealSingle),PetscErrorCode,(DM,VecScatter{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMShellSetLocalToLocal(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMShellSetLocalToLocal,petscRealSingle),PetscErrorCode,(DM,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMShellSetLocalToLocalVecScatter(arg1::DM,arg2::VecScatter{Float32})
    ccall((:DMShellSetLocalToLocalVecScatter,petscRealSingle),PetscErrorCode,(DM,VecScatter{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMShellSetCreateMatrix(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMShellSetCreateMatrix,petscRealSingle),PetscErrorCode,(DM,Ptr{Void}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMShellSetCoarsen(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMShellSetCoarsen,petscRealSingle),PetscErrorCode,(DM,Ptr{Void}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMShellSetRefine(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMShellSetRefine,petscRealSingle),PetscErrorCode,(DM,Ptr{Void}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMShellSetCreateInterpolation(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMShellSetCreateInterpolation,petscRealSingle),PetscErrorCode,(DM,Ptr{Void}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMShellSetCreateInjection(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMShellSetCreateInjection,petscRealSingle),PetscErrorCode,(DM,Ptr{Void}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMShellSetCreateFieldDecomposition(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMShellSetCreateFieldDecomposition,petscRealSingle),PetscErrorCode,(DM,Ptr{Void}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMGlobalToLocalBeginDefaultShell(arg1::DM,arg2::Vec{Float32},arg3::InsertMode,arg4::Vec{Float32})
    ccall((:DMGlobalToLocalBeginDefaultShell,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},InsertMode,Vec{Float32}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMGlobalToLocalEndDefaultShell(arg1::DM,arg2::Vec{Float32},arg3::InsertMode,arg4::Vec{Float32})
    ccall((:DMGlobalToLocalEndDefaultShell,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},InsertMode,Vec{Float32}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMLocalToGlobalBeginDefaultShell(arg1::DM,arg2::Vec{Float32},arg3::InsertMode,arg4::Vec{Float32})
    ccall((:DMLocalToGlobalBeginDefaultShell,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},InsertMode,Vec{Float32}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMLocalToGlobalEndDefaultShell(arg1::DM,arg2::Vec{Float32},arg3::InsertMode,arg4::Vec{Float32})
    ccall((:DMLocalToGlobalEndDefaultShell,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},InsertMode,Vec{Float32}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMLocalToLocalBeginDefaultShell(arg1::DM,arg2::Vec{Float32},arg3::InsertMode,arg4::Vec{Float32})
    ccall((:DMLocalToLocalBeginDefaultShell,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},InsertMode,Vec{Float32}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMLocalToLocalEndDefaultShell(arg1::DM,arg2::Vec{Float32},arg3::InsertMode,arg4::Vec{Float32})
    ccall((:DMLocalToLocalEndDefaultShell,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},InsertMode,Vec{Float32}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMSlicedCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:DMSlicedCreate,petscRealSingle),PetscErrorCode,(comm_type,Int64,Int64,Int64,Ptr{Int64},Ptr{Int64},Ptr{Int64},Ptr{DM}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
end
=#
#= skipping function with undefined symbols:
 function DMSlicedSetPreallocation(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMSlicedSetPreallocation,petscRealSingle),PetscErrorCode,(DM,Int64,Ptr{Int64},Int64,Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function DMSlicedSetBlockFills(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMSlicedSetBlockFills,petscRealSingle),PetscErrorCode,(DM,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMSlicedSetGhosts(arg0::Type{Float32},arg1::DM,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:DMSlicedSetGhosts,petscRealSingle),PetscErrorCode,(DM,Int64,Int64,Int64,Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
end
=#
function PetscDSInitializePackage(arg0::Type{Float32})
    err = ccall((:PetscDSInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

#= skipping function with undefined symbols:
 function PetscDSCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{PetscDS},StridedArray{PetscDS},Ptr{PetscDS},Ref{PetscDS}})
    ccall((:PetscDSCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{PetscDS}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDSDestroy(arg0::Type{Float32},arg1::Union{Ptr{PetscDS},StridedArray{PetscDS},Ptr{PetscDS},Ref{PetscDS}})
    ccall((:PetscDSDestroy,petscRealSingle),PetscErrorCode,(Ptr{PetscDS},),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscDSSetType(arg0::Type{Float32},arg1::PetscDS,arg2::PetscDSType)
    ccall((:PetscDSSetType,petscRealSingle),PetscErrorCode,(PetscDS,Cstring),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDSGetType(arg0::Type{Float32},arg1::PetscDS,arg2::Union{Ptr{PetscDSType},StridedArray{PetscDSType},Ptr{PetscDSType},Ref{PetscDSType}})
    ccall((:PetscDSGetType,petscRealSingle),PetscErrorCode,(PetscDS,Ptr{Ptr{UInt8}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDSSetUp(arg0::Type{Float32},arg1::PetscDS)
    ccall((:PetscDSSetUp,petscRealSingle),PetscErrorCode,(PetscDS,),arg1)
end
=#
#= skipping function with undefined symbols:
 function PetscDSSetFromOptions(arg0::Type{Float32},arg1::PetscDS)
    ccall((:PetscDSSetFromOptions,petscRealSingle),PetscErrorCode,(PetscDS,),arg1)
end
=#
function PetscDSRegister(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PetscDSRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function PetscDSRegisterDestroy(arg0::Type{Float32})
    err = ccall((:PetscDSRegisterDestroy,petscRealSingle),PetscErrorCode,())
    return err
end

#= skipping function with undefined symbols:
 function PetscDSGetSpatialDimension(arg0::Type{Float32},arg1::PetscDS,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:PetscDSGetSpatialDimension,petscRealSingle),PetscErrorCode,(PetscDS,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDSGetNumFields(arg0::Type{Float32},arg1::PetscDS,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:PetscDSGetNumFields,petscRealSingle),PetscErrorCode,(PetscDS,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDSGetTotalDimension(arg0::Type{Float32},arg1::PetscDS,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:PetscDSGetTotalDimension,petscRealSingle),PetscErrorCode,(PetscDS,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDSGetTotalBdDimension(arg0::Type{Float32},arg1::PetscDS,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:PetscDSGetTotalBdDimension,petscRealSingle),PetscErrorCode,(PetscDS,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDSGetTotalComponents(arg0::Type{Float32},arg1::PetscDS,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:PetscDSGetTotalComponents,petscRealSingle),PetscErrorCode,(PetscDS,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDSGetFieldOffset(arg0::Type{Float32},arg1::PetscDS,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:PetscDSGetFieldOffset,petscRealSingle),PetscErrorCode,(PetscDS,Int64,Ptr{Int64}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscDSGetBdFieldOffset(arg0::Type{Float32},arg1::PetscDS,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:PetscDSGetBdFieldOffset,petscRealSingle),PetscErrorCode,(PetscDS,Int64,Ptr{Int64}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscDSGetComponentOffset(arg0::Type{Float32},arg1::PetscDS,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:PetscDSGetComponentOffset,petscRealSingle),PetscErrorCode,(PetscDS,Int64,Ptr{Int64}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscDSGetComponentOffsets(arg0::Type{Float32},arg1::PetscDS,arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    ccall((:PetscDSGetComponentOffsets,petscRealSingle),PetscErrorCode,(PetscDS,Ptr{Ptr{Int64}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDSGetComponentBdOffsets(arg0::Type{Float32},arg1::PetscDS,arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    ccall((:PetscDSGetComponentBdOffsets,petscRealSingle),PetscErrorCode,(PetscDS,Ptr{Ptr{Int64}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDSGetComponentDerivativeOffsets(arg0::Type{Float32},arg1::PetscDS,arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    ccall((:PetscDSGetComponentDerivativeOffsets,petscRealSingle),PetscErrorCode,(PetscDS,Ptr{Ptr{Int64}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDSGetComponentBdDerivativeOffsets(arg0::Type{Float32},arg1::PetscDS,arg2::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    ccall((:PetscDSGetComponentBdDerivativeOffsets,petscRealSingle),PetscErrorCode,(PetscDS,Ptr{Ptr{Int64}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDSGetDiscretization(arg0::Type{Float32},arg1::PetscDS,arg2::Integer,arg3::Union{Ptr{PetscObject},StridedArray{PetscObject},Ptr{PetscObject},Ref{PetscObject}})
    ccall((:PetscDSGetDiscretization,petscRealSingle),PetscErrorCode,(PetscDS,Int64,Ptr{PetscObject}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscDSSetDiscretization(arg0::Type{Float32},arg1::PetscDS,arg2::Integer,arg3::PetscObject)
    ccall((:PetscDSSetDiscretization,petscRealSingle),PetscErrorCode,(PetscDS,Int64,PetscObject),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscDSAddDiscretization(arg0::Type{Float32},arg1::PetscDS,arg2::PetscObject)
    ccall((:PetscDSAddDiscretization,petscRealSingle),PetscErrorCode,(PetscDS,PetscObject),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDSGetBdDiscretization(arg0::Type{Float32},arg1::PetscDS,arg2::Integer,arg3::Union{Ptr{PetscObject},StridedArray{PetscObject},Ptr{PetscObject},Ref{PetscObject}})
    ccall((:PetscDSGetBdDiscretization,petscRealSingle),PetscErrorCode,(PetscDS,Int64,Ptr{PetscObject}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscDSSetBdDiscretization(arg0::Type{Float32},arg1::PetscDS,arg2::Integer,arg3::PetscObject)
    ccall((:PetscDSSetBdDiscretization,petscRealSingle),PetscErrorCode,(PetscDS,Int64,PetscObject),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscDSAddBdDiscretization(arg0::Type{Float32},arg1::PetscDS,arg2::PetscObject)
    ccall((:PetscDSAddBdDiscretization,petscRealSingle),PetscErrorCode,(PetscDS,PetscObject),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PetscDSGetImplicit(arg0::Type{Float32},arg1::PetscDS,arg2::Integer,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:PetscDSGetImplicit,petscRealSingle),PetscErrorCode,(PetscDS,Int64,Ptr{PetscBool}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscDSSetImplicit(arg0::Type{Float32},arg1::PetscDS,arg2::Integer,arg3::PetscBool)
    ccall((:PetscDSSetImplicit,petscRealSingle),PetscErrorCode,(PetscDS,Int64,PetscBool),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscDSGetAdjacency(arg0::Type{Float32},arg1::PetscDS,arg2::Integer,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:PetscDSGetAdjacency,petscRealSingle),PetscErrorCode,(PetscDS,Int64,Ptr{PetscBool},Ptr{PetscBool}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function PetscDSSetAdjacency(arg0::Type{Float32},arg1::PetscDS,arg2::Integer,arg3::PetscBool,arg4::PetscBool)
    ccall((:PetscDSSetAdjacency,petscRealSingle),PetscErrorCode,(PetscDS,Int64,PetscBool,PetscBool),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function PetscDSGetObjective(arg0::Type{Float32},arg1::PetscDS,arg2::Integer,arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    ccall((:PetscDSGetObjective,petscRealSingle),PetscErrorCode,(PetscDS,Int64,Ptr{Ptr{Void}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscDSSetObjective(arg0::Type{Float32},arg1::PetscDS,arg2::Integer,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:PetscDSSetObjective,petscRealSingle),PetscErrorCode,(PetscDS,Int64,Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscDSGetResidual(arg0::Type{Float32},arg1::PetscDS,arg2::Integer,arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    ccall((:PetscDSGetResidual,petscRealSingle),PetscErrorCode,(PetscDS,Int64,Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function PetscDSSetResidual(arg0::Type{Float32},arg1::PetscDS,arg2::Integer,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:PetscDSSetResidual,petscRealSingle),PetscErrorCode,(PetscDS,Int64,Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function PetscDSGetJacobian(arg0::Type{Float32},arg1::PetscDS,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg5::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg6::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg7::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    ccall((:PetscDSGetJacobian,petscRealSingle),PetscErrorCode,(PetscDS,Int64,Int64,Ptr{Ptr{Void}},Ptr{Ptr{Void}},Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
#= skipping function with undefined symbols:
 function PetscDSSetJacobian(arg0::Type{Float32},arg1::PetscDS,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg7::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:PetscDSSetJacobian,petscRealSingle),PetscErrorCode,(PetscDS,Int64,Int64,Ptr{Void},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
#= skipping function with undefined symbols:
 function PetscDSGetRiemannSolver(arg0::Type{Float32},arg1::PetscDS,arg2::Integer,arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    ccall((:PetscDSGetRiemannSolver,petscRealSingle),PetscErrorCode,(PetscDS,Int64,Ptr{Ptr{Void}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscDSSetRiemannSolver(arg0::Type{Float32},arg1::PetscDS,arg2::Integer,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:PetscDSSetRiemannSolver,petscRealSingle),PetscErrorCode,(PetscDS,Int64,Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscDSGetContext(arg0::Type{Float32},arg1::PetscDS,arg2::Integer,arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    ccall((:PetscDSGetContext,petscRealSingle),PetscErrorCode,(PetscDS,Int64,Ptr{Ptr{Void}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscDSSetContext(arg0::Type{Float32},arg1::PetscDS,arg2::Integer,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:PetscDSSetContext,petscRealSingle),PetscErrorCode,(PetscDS,Int64,Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscDSGetBdResidual(arg0::Type{Float32},arg1::PetscDS,arg2::Integer,arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    ccall((:PetscDSGetBdResidual,petscRealSingle),PetscErrorCode,(PetscDS,Int64,Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function PetscDSSetBdResidual(arg0::Type{Float32},arg1::PetscDS,arg2::Integer,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:PetscDSSetBdResidual,petscRealSingle),PetscErrorCode,(PetscDS,Int64,Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function PetscDSGetBdJacobian(arg0::Type{Float32},arg1::PetscDS,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg5::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg6::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg7::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    ccall((:PetscDSGetBdJacobian,petscRealSingle),PetscErrorCode,(PetscDS,Int64,Int64,Ptr{Ptr{Void}},Ptr{Ptr{Void}},Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
#= skipping function with undefined symbols:
 function PetscDSSetBdJacobian(arg0::Type{Float32},arg1::PetscDS,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg7::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:PetscDSSetBdJacobian,petscRealSingle),PetscErrorCode,(PetscDS,Int64,Int64,Ptr{Void},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
#= skipping function with undefined symbols:
 function PetscDSGetTabulation(arg0::Type{Float32},arg1::PetscDS,arg2::Union{Ptr{Ptr{Ptr{Float32}}},StridedArray{Ptr{Ptr{Float32}}},Ptr{Ptr{Ptr{Float32}}},Ref{Ptr{Ptr{Float32}}}},arg3::Union{Ptr{Ptr{Ptr{Float32}}},StridedArray{Ptr{Ptr{Float32}}},Ptr{Ptr{Ptr{Float32}}},Ref{Ptr{Ptr{Float32}}}})
    ccall((:PetscDSGetTabulation,petscRealSingle),PetscErrorCode,(PetscDS,Ptr{Ptr{Ptr{Float32}}},Ptr{Ptr{Ptr{Float32}}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscDSGetBdTabulation(arg0::Type{Float32},arg1::PetscDS,arg2::Union{Ptr{Ptr{Ptr{Float32}}},StridedArray{Ptr{Ptr{Float32}}},Ptr{Ptr{Ptr{Float32}}},Ref{Ptr{Ptr{Float32}}}},arg3::Union{Ptr{Ptr{Ptr{Float32}}},StridedArray{Ptr{Ptr{Float32}}},Ptr{Ptr{Ptr{Float32}}},Ref{Ptr{Ptr{Float32}}}})
    ccall((:PetscDSGetBdTabulation,petscRealSingle),PetscErrorCode,(PetscDS,Ptr{Ptr{Ptr{Float32}}},Ptr{Ptr{Ptr{Float32}}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function PetscDSGetEvaluationArrays(arg0::Type{Float32},arg1::PetscDS,arg2::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg3::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg4::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    ccall((:PetscDSGetEvaluationArrays,petscRealSingle),PetscErrorCode,(PetscDS,Ptr{Ptr{Float32}},Ptr{Ptr{Float32}},Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function PetscDSGetWeakFormArrays(arg0::Type{Float32},arg1::PetscDS,arg2::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg3::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg4::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg5::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg6::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg7::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    ccall((:PetscDSGetWeakFormArrays,petscRealSingle),PetscErrorCode,(PetscDS,Ptr{Ptr{Float32}},Ptr{Ptr{Float32}},Ptr{Ptr{Float32}},Ptr{Ptr{Float32}},Ptr{Ptr{Float32}},Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
#= skipping function with undefined symbols:
 function PetscDSGetRefCoordArrays(arg0::Type{Float32},arg1::PetscDS,arg2::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg3::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    ccall((:PetscDSGetRefCoordArrays,petscRealSingle),PetscErrorCode,(PetscDS,Ptr{Ptr{Float32}},Ptr{Ptr{Float32}}),arg1,arg2,arg3)
end
=#
function CharacteristicInitializePackage(arg0::Type{Float32})
    err = ccall((:CharacteristicInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

#= skipping function with undefined symbols:
 function CharacteristicCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{Characteristic},StridedArray{Characteristic},Ptr{Characteristic},Ref{Characteristic}})
    ccall((:CharacteristicCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{Characteristic}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function CharacteristicSetType(arg0::Type{Float32},arg1::Characteristic,arg2::CharacteristicType)
    ccall((:CharacteristicSetType,petscRealSingle),PetscErrorCode,(Characteristic,Cstring),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function CharacteristicSetUp(arg0::Type{Float32},arg1::Characteristic)
    ccall((:CharacteristicSetUp,petscRealSingle),PetscErrorCode,(Characteristic,),arg1)
end
=#
#= skipping function with undefined symbols:
 function CharacteristicSetVelocityInterpolation(arg1::Characteristic,arg2::DM,arg3::Vec{Float32},arg4::Vec{Float32},arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg8::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:CharacteristicSetVelocityInterpolation,petscRealSingle),PetscErrorCode,(Characteristic,DM,Vec{Float32},Vec{Float32},Int64,Ptr{Int64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
end
=#
#= skipping function with undefined symbols:
 function CharacteristicSetVelocityInterpolationLocal(arg1::Characteristic,arg2::DM,arg3::Vec{Float32},arg4::Vec{Float32},arg5::Integer,arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg7::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg8::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:CharacteristicSetVelocityInterpolationLocal,petscRealSingle),PetscErrorCode,(Characteristic,DM,Vec{Float32},Vec{Float32},Int64,Ptr{Int64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
end
=#
#= skipping function with undefined symbols:
 function CharacteristicSetFieldInterpolation(arg1::Characteristic,arg2::DM,arg3::Vec{Float32},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg7::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:CharacteristicSetFieldInterpolation,petscRealSingle),PetscErrorCode,(Characteristic,DM,Vec{Float32},Int64,Ptr{Int64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
#= skipping function with undefined symbols:
 function CharacteristicSetFieldInterpolationLocal(arg1::Characteristic,arg2::DM,arg3::Vec{Float32},arg4::Integer,arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg7::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:CharacteristicSetFieldInterpolationLocal,petscRealSingle),PetscErrorCode,(Characteristic,DM,Vec{Float32},Int64,Ptr{Int64},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
#= skipping function with undefined symbols:
 function CharacteristicSolve(arg1::Characteristic,arg2::Float32,arg3::Vec{Float32})
    ccall((:CharacteristicSolve,petscRealSingle),PetscErrorCode,(Characteristic,Float32,Vec{Float32}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function CharacteristicDestroy(arg0::Type{Float32},arg1::Union{Ptr{Characteristic},StridedArray{Characteristic},Ptr{Characteristic},Ref{Characteristic}})
    ccall((:CharacteristicDestroy,petscRealSingle),PetscErrorCode,(Ptr{Characteristic},),arg1)
end
=#
function CharacteristicRegister(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:CharacteristicRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function PCExoticSetType(arg1::PC{Float32},arg2::PCExoticType)
    err = ccall((:PCExoticSetType,petscRealSingle),PetscErrorCode,(PC{Float32},PCExoticType),arg1,arg2)
    return err
end

function PCInitializePackage(arg0::Type{Float32})
    err = ccall((:PCInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function PCCreate(arg1::MPI_Comm,arg2::Union{Ptr{PC{Float32}},StridedArray{PC{Float32}},Ptr{PC{Float32}},Ref{PC{Float32}}})
    err = ccall((:PCCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{PC{Float32}}),arg1,arg2)
    return err
end

function PCSetType(arg1::PC{Float32},arg2::PCType)
    err = ccall((:PCSetType,petscRealSingle),PetscErrorCode,(PC{Float32},Cstring),arg1,arg2)
    return err
end

function PCGetType(arg1::PC{Float32},arg2::Union{Ptr{PCType},StridedArray{PCType},Ptr{PCType},Ref{PCType}})
    (arg2_,tmp) = symbol_get_before(arg2)
    err = ccall((:PCGetType,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Ptr{UInt8}}),arg1,arg2_)
    symbol_get_after(arg2_,arg2)
    return err
end

function PCSetUp(arg1::PC{Float32})
    err = ccall((:PCSetUp,petscRealSingle),PetscErrorCode,(PC{Float32},),arg1)
    return err
end

function PCGetSetUpFailedReason(arg1::PC{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PCGetSetUpFailedReason,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function PCSetUpOnBlocks(arg1::PC{Float32})
    err = ccall((:PCSetUpOnBlocks,petscRealSingle),PetscErrorCode,(PC{Float32},),arg1)
    return err
end

function PCApply(arg1::PC{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:PCApply,petscRealSingle),PetscErrorCode,(PC{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function PCApplySymmetricLeft(arg1::PC{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:PCApplySymmetricLeft,petscRealSingle),PetscErrorCode,(PC{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function PCApplySymmetricRight(arg1::PC{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:PCApplySymmetricRight,petscRealSingle),PetscErrorCode,(PC{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function PCApplyBAorAB(arg1::PC{Float32},arg2::PCSide,arg3::Vec{Float32},arg4::Vec{Float32},arg5::Vec{Float32})
    err = ccall((:PCApplyBAorAB,petscRealSingle),PetscErrorCode,(PC{Float32},PCSide,Vec{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PCApplyTranspose(arg1::PC{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:PCApplyTranspose,petscRealSingle),PetscErrorCode,(PC{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function PCApplyTransposeExists(arg1::PC{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCApplyTransposeExists,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCApplyBAorABTranspose(arg1::PC{Float32},arg2::PCSide,arg3::Vec{Float32},arg4::Vec{Float32},arg5::Vec{Float32})
    err = ccall((:PCApplyBAorABTranspose,petscRealSingle),PetscErrorCode,(PC{Float32},PCSide,Vec{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PCSetReusePreconditioner(arg1::PC{Float32},arg2::PetscBool)
    err = ccall((:PCSetReusePreconditioner,petscRealSingle),PetscErrorCode,(PC{Float32},PetscBool),arg1,arg2)
    return err
end

function PCGetReusePreconditioner(arg1::PC{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCGetReusePreconditioner,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCSetErrorIfFailure(arg1::PC{Float32},arg2::PetscBool)
    err = ccall((:PCSetErrorIfFailure,petscRealSingle),PetscErrorCode,(PC{Float32},PetscBool),arg1,arg2)
    return err
end

function PCApplyRichardson(arg1::PC{Float32},arg2::Vec{Float32},arg3::Vec{Float32},arg4::Vec{Float32},arg5::Float32,arg6::Float32,arg7::Float32,arg8::Integer,arg9::PetscBool,arg10::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg11::Union{Ptr{PCRichardsonConvergedReason},StridedArray{PCRichardsonConvergedReason},Ptr{PCRichardsonConvergedReason},Ref{PCRichardsonConvergedReason}})
    err = ccall((:PCApplyRichardson,petscRealSingle),PetscErrorCode,(PC{Float32},Vec{Float32},Vec{Float32},Vec{Float32},Float32,Float32,Float32,Int64,PetscBool,Ptr{Int64},Ptr{PCRichardsonConvergedReason}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11)
    return err
end

function PCApplyRichardsonExists(arg1::PC{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCApplyRichardsonExists,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCSetInitialGuessNonzero(arg1::PC{Float32},arg2::PetscBool)
    err = ccall((:PCSetInitialGuessNonzero,petscRealSingle),PetscErrorCode,(PC{Float32},PetscBool),arg1,arg2)
    return err
end

function PCGetInitialGuessNonzero(arg1::PC{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCGetInitialGuessNonzero,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCSetUseAmat(arg1::PC{Float32},arg2::PetscBool)
    err = ccall((:PCSetUseAmat,petscRealSingle),PetscErrorCode,(PC{Float32},PetscBool),arg1,arg2)
    return err
end

function PCGetUseAmat(arg1::PC{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCGetUseAmat,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCRegister(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function PCReset(arg1::PC{Float32})
    err = ccall((:PCReset,petscRealSingle),PetscErrorCode,(PC{Float32},),arg1)
    return err
end

function PCDestroy(arg1::Union{Ptr{PC{Float32}},StridedArray{PC{Float32}},Ptr{PC{Float32}},Ref{PC{Float32}}})
    err = ccall((:PCDestroy,petscRealSingle),PetscErrorCode,(Ptr{PC{Float32}},),arg1)
    return err
end

function PCSetFromOptions(arg1::PC{Float32})
    err = ccall((:PCSetFromOptions,petscRealSingle),PetscErrorCode,(PC{Float32},),arg1)
    return err
end

function PCFactorGetMatrix(arg1::PC{Float32},arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:PCFactorGetMatrix,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Mat{Float32}}),arg1,arg2)
    return err
end

function PCSetModifySubMatrices(arg1::PC{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCSetModifySubMatrices,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function PCModifySubMatrices(arg1::PC{Float32},arg2::Integer,arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg4::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg5::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCModifySubMatrices,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,Ptr{IS{Float32}},Ptr{IS{Float32}},Ptr{Mat{Float32}},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function PCSetOperators(arg1::PC{Float32},arg2::Mat{Float32},arg3::Mat{Float32})
    err = ccall((:PCSetOperators,petscRealSingle),PetscErrorCode,(PC{Float32},Mat{Float32},Mat{Float32}),arg1,arg2,arg3)
    return err
end

function PCGetOperators(arg1::PC{Float32},arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}},arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:PCGetOperators,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Mat{Float32}},Ptr{Mat{Float32}}),arg1,arg2,arg3)
    return err
end

function PCGetOperatorsSet(arg1::PC{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCGetOperatorsSet,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{PetscBool},Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function PCView(arg1::PC{Float32},arg2::PetscViewer{Float32})
    err = ccall((:PCView,petscRealSingle),PetscErrorCode,(PC{Float32},PetscViewer{Float32}),arg1,arg2)
    return err
end

function PCLoad(arg1::PC{Float32},arg2::PetscViewer{Float32})
    err = ccall((:PCLoad,petscRealSingle),PetscErrorCode,(PC{Float32},PetscViewer{Float32}),arg1,arg2)
    return err
end

function PCAppendOptionsPrefix(arg1::PC{Float32},arg2::Union{ByteString,Symbol})
    err = ccall((:PCAppendOptionsPrefix,petscRealSingle),PetscErrorCode,(PC{Float32},Cstring),arg1,arg2)
    return err
end

function PCGetOptionsPrefix(arg1::PC{Float32},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PCGetOptionsPrefix,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PCComputeExplicitOperator(arg1::PC{Float32},arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:PCComputeExplicitOperator,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Mat{Float32}}),arg1,arg2)
    return err
end

function PCGetDiagonalScale(arg1::PC{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCGetDiagonalScale,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCDiagonalScaleLeft(arg1::PC{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:PCDiagonalScaleLeft,petscRealSingle),PetscErrorCode,(PC{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function PCDiagonalScaleRight(arg1::PC{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:PCDiagonalScaleRight,petscRealSingle),PetscErrorCode,(PC{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function PCSetDiagonalScale(arg1::PC{Float32},arg2::Vec{Float32})
    err = ccall((:PCSetDiagonalScale,petscRealSingle),PetscErrorCode,(PC{Float32},Vec{Float32}),arg1,arg2)
    return err
end

function PCJacobiSetType(arg1::PC{Float32},arg2::PCJacobiType)
    err = ccall((:PCJacobiSetType,petscRealSingle),PetscErrorCode,(PC{Float32},PCJacobiType),arg1,arg2)
    return err
end

function PCJacobiGetType(arg1::PC{Float32},arg2::Union{Ptr{PCJacobiType},StridedArray{PCJacobiType},Ptr{PCJacobiType},Ref{PCJacobiType}})
    err = ccall((:PCJacobiGetType,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{PCJacobiType}),arg1,arg2)
    return err
end

function PCJacobiSetUseAbs(arg1::PC{Float32},arg2::PetscBool)
    err = ccall((:PCJacobiSetUseAbs,petscRealSingle),PetscErrorCode,(PC{Float32},PetscBool),arg1,arg2)
    return err
end

function PCJacobiGetUseAbs(arg1::PC{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCJacobiGetUseAbs,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCSORSetSymmetric(arg1::PC{Float32},arg2::MatSORType)
    err = ccall((:PCSORSetSymmetric,petscRealSingle),PetscErrorCode,(PC{Float32},MatSORType),arg1,arg2)
    return err
end

function PCSORGetSymmetric(arg1::PC{Float32},arg2::Union{Ptr{MatSORType},StridedArray{MatSORType},Ptr{MatSORType},Ref{MatSORType}})
    err = ccall((:PCSORGetSymmetric,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{MatSORType}),arg1,arg2)
    return err
end

function PCSORSetOmega(arg1::PC{Float32},arg2::Float32)
    err = ccall((:PCSORSetOmega,petscRealSingle),PetscErrorCode,(PC{Float32},Float32),arg1,arg2)
    return err
end

function PCSORGetOmega(arg1::PC{Float32},arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:PCSORGetOmega,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Float32}),arg1,arg2)
    return err
end

function PCSORSetIterations(arg1::PC{Float32},arg2::Integer,arg3::Integer)
    err = ccall((:PCSORSetIterations,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,Int64),arg1,arg2,arg3)
    return err
end

function PCSORGetIterations(arg1::PC{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PCSORGetIterations,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PCEisenstatSetOmega(arg1::PC{Float32},arg2::Float32)
    err = ccall((:PCEisenstatSetOmega,petscRealSingle),PetscErrorCode,(PC{Float32},Float32),arg1,arg2)
    return err
end

function PCEisenstatGetOmega(arg1::PC{Float32},arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:PCEisenstatGetOmega,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Float32}),arg1,arg2)
    return err
end

function PCEisenstatSetNoDiagonalScaling(arg1::PC{Float32},arg2::PetscBool)
    err = ccall((:PCEisenstatSetNoDiagonalScaling,petscRealSingle),PetscErrorCode,(PC{Float32},PetscBool),arg1,arg2)
    return err
end

function PCEisenstatGetNoDiagonalScaling(arg1::PC{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCEisenstatGetNoDiagonalScaling,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCBJacobiSetTotalBlocks(arg1::PC{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PCBJacobiSetTotalBlocks,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PCBJacobiGetTotalBlocks(arg1::PC{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:PCBJacobiGetTotalBlocks,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3)
    return err
end

function PCBJacobiSetLocalBlocks(arg1::PC{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PCBJacobiSetLocalBlocks,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function PCBJacobiGetLocalBlocks(arg1::PC{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:PCBJacobiGetLocalBlocks,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3)
    return err
end

function PCShellSetApply(arg1::PC{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCShellSetApply,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Void}),arg1,arg2)
    return err
end

function PCShellSetApplyBA(arg1::PC{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCShellSetApplyBA,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Void}),arg1,arg2)
    return err
end

function PCShellSetApplyTranspose(arg1::PC{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCShellSetApplyTranspose,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Void}),arg1,arg2)
    return err
end

function PCShellSetSetUp(arg1::PC{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCShellSetSetUp,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Void}),arg1,arg2)
    return err
end

function PCShellSetApplyRichardson(arg1::PC{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCShellSetApplyRichardson,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Void}),arg1,arg2)
    return err
end

function PCShellSetView(arg1::PC{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCShellSetView,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Void}),arg1,arg2)
    return err
end

function PCShellSetDestroy(arg1::PC{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCShellSetDestroy,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Void}),arg1,arg2)
    return err
end

function PCShellSetContext(arg1::PC{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCShellSetContext,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Void}),arg1,arg2)
    return err
end

function PCShellGetContext(arg1::PC{Float32},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:PCShellGetContext,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Ptr{Void}}),arg1,arg2)
    return err
end

function PCShellSetName(arg1::PC{Float32},arg2::Union{ByteString,Symbol})
    err = ccall((:PCShellSetName,petscRealSingle),PetscErrorCode,(PC{Float32},Cstring),arg1,arg2)
    return err
end

function PCShellGetName(arg1::PC{Float32},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PCShellGetName,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PCFactorSetZeroPivot(arg1::PC{Float32},arg2::Float32)
    err = ccall((:PCFactorSetZeroPivot,petscRealSingle),PetscErrorCode,(PC{Float32},Float32),arg1,arg2)
    return err
end

function PCFactorSetShiftType(arg1::PC{Float32},arg2::MatFactorShiftType)
    err = ccall((:PCFactorSetShiftType,petscRealSingle),PetscErrorCode,(PC{Float32},MatFactorShiftType),arg1,arg2)
    return err
end

function PCFactorSetShiftAmount(arg1::PC{Float32},arg2::Float32)
    err = ccall((:PCFactorSetShiftAmount,petscRealSingle),PetscErrorCode,(PC{Float32},Float32),arg1,arg2)
    return err
end

function PCFactorSetMatSolverPackage(arg1::PC{Float32},arg2::Union{ByteString,Symbol})
    err = ccall((:PCFactorSetMatSolverPackage,petscRealSingle),PetscErrorCode,(PC{Float32},Cstring),arg1,arg2)
    return err
end

function PCFactorGetMatSolverPackage(arg1::PC{Float32},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PCFactorGetMatSolverPackage,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PCFactorSetUpMatSolverPackage(arg1::PC{Float32})
    err = ccall((:PCFactorSetUpMatSolverPackage,petscRealSingle),PetscErrorCode,(PC{Float32},),arg1)
    return err
end

function PCFactorSetFill(arg1::PC{Float32},arg2::Float32)
    err = ccall((:PCFactorSetFill,petscRealSingle),PetscErrorCode,(PC{Float32},Float32),arg1,arg2)
    return err
end

function PCFactorSetColumnPivot(arg1::PC{Float32},arg2::Float32)
    err = ccall((:PCFactorSetColumnPivot,petscRealSingle),PetscErrorCode,(PC{Float32},Float32),arg1,arg2)
    return err
end

function PCFactorReorderForNonzeroDiagonal(arg1::PC{Float32},arg2::Float32)
    err = ccall((:PCFactorReorderForNonzeroDiagonal,petscRealSingle),PetscErrorCode,(PC{Float32},Float32),arg1,arg2)
    return err
end

function PCFactorSetMatOrderingType(arg1::PC{Float32},arg2::MatOrderingType)
    err = ccall((:PCFactorSetMatOrderingType,petscRealSingle),PetscErrorCode,(PC{Float32},Cstring),arg1,arg2)
    return err
end

function PCFactorSetReuseOrdering(arg1::PC{Float32},arg2::PetscBool)
    err = ccall((:PCFactorSetReuseOrdering,petscRealSingle),PetscErrorCode,(PC{Float32},PetscBool),arg1,arg2)
    return err
end

function PCFactorSetReuseFill(arg1::PC{Float32},arg2::PetscBool)
    err = ccall((:PCFactorSetReuseFill,petscRealSingle),PetscErrorCode,(PC{Float32},PetscBool),arg1,arg2)
    return err
end

function PCFactorSetUseInPlace(arg1::PC{Float32},arg2::PetscBool)
    err = ccall((:PCFactorSetUseInPlace,petscRealSingle),PetscErrorCode,(PC{Float32},PetscBool),arg1,arg2)
    return err
end

function PCFactorGetUseInPlace(arg1::PC{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCFactorGetUseInPlace,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCFactorSetAllowDiagonalFill(arg1::PC{Float32},arg2::PetscBool)
    err = ccall((:PCFactorSetAllowDiagonalFill,petscRealSingle),PetscErrorCode,(PC{Float32},PetscBool),arg1,arg2)
    return err
end

function PCFactorGetAllowDiagonalFill(arg1::PC{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCFactorGetAllowDiagonalFill,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCFactorSetPivotInBlocks(arg1::PC{Float32},arg2::PetscBool)
    err = ccall((:PCFactorSetPivotInBlocks,petscRealSingle),PetscErrorCode,(PC{Float32},PetscBool),arg1,arg2)
    return err
end

function PCFactorSetLevels(arg1::PC{Float32},arg2::Integer)
    err = ccall((:PCFactorSetLevels,petscRealSingle),PetscErrorCode,(PC{Float32},Int64),arg1,arg2)
    return err
end

function PCFactorGetLevels(arg1::PC{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PCFactorGetLevels,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function PCFactorSetDropTolerance(arg1::PC{Float32},arg2::Float32,arg3::Float32,arg4::Integer)
    err = ccall((:PCFactorSetDropTolerance,petscRealSingle),PetscErrorCode,(PC{Float32},Float32,Float32,Int64),arg1,arg2,arg3,arg4)
    return err
end

function PCASMSetLocalSubdomains(arg1::PC{Float32},arg2::Integer,arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg4::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:PCASMSetLocalSubdomains,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,Ptr{IS{Float32}},Ptr{IS{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function PCASMSetTotalSubdomains(arg1::PC{Float32},arg2::Integer,arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg4::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:PCASMSetTotalSubdomains,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,Ptr{IS{Float32}},Ptr{IS{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function PCASMSetOverlap(arg1::PC{Float32},arg2::Integer)
    err = ccall((:PCASMSetOverlap,petscRealSingle),PetscErrorCode,(PC{Float32},Int64),arg1,arg2)
    return err
end

function PCASMSetDMSubdomains(arg1::PC{Float32},arg2::PetscBool)
    err = ccall((:PCASMSetDMSubdomains,petscRealSingle),PetscErrorCode,(PC{Float32},PetscBool),arg1,arg2)
    return err
end

function PCASMGetDMSubdomains(arg1::PC{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCASMGetDMSubdomains,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCASMSetSortIndices(arg1::PC{Float32},arg2::PetscBool)
    err = ccall((:PCASMSetSortIndices,petscRealSingle),PetscErrorCode,(PC{Float32},PetscBool),arg1,arg2)
    return err
end

function PCASMSetType(arg1::PC{Float32},arg2::PCASMType)
    err = ccall((:PCASMSetType,petscRealSingle),PetscErrorCode,(PC{Float32},PCASMType),arg1,arg2)
    return err
end

function PCASMGetType(arg1::PC{Float32},arg2::Union{Ptr{PCASMType},StridedArray{PCASMType},Ptr{PCASMType},Ref{PCASMType}})
    err = ccall((:PCASMGetType,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{PCASMType}),arg1,arg2)
    return err
end

function PCASMSetLocalType(arg1::PC{Float32},arg2::PCCompositeType)
    err = ccall((:PCASMSetLocalType,petscRealSingle),PetscErrorCode,(PC{Float32},PCCompositeType),arg1,arg2)
    return err
end

function PCASMGetLocalType(arg1::PC{Float32},arg2::Union{Ptr{PCCompositeType},StridedArray{PCCompositeType},Ptr{PCCompositeType},Ref{PCCompositeType}})
    err = ccall((:PCASMGetLocalType,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{PCCompositeType}),arg1,arg2)
    return err
end

function PCASMCreateSubdomains(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Ptr{IS{Float32}}},StridedArray{Ptr{IS{Float32}}},Ptr{Ptr{IS{Float32}}},Ref{Ptr{IS{Float32}}}})
    err = ccall((:PCASMCreateSubdomains,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Ptr{IS{Float32}}}),arg1,arg2,arg3)
    return err
end

function PCASMDestroySubdomains(arg1::Integer,arg2::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:PCASMDestroySubdomains,petscRealSingle),PetscErrorCode,(Int64,Ptr{IS{Float32}},Ptr{IS{Float32}}),arg1,arg2,arg3)
    return err
end

function PCASMCreateSubdomains2D(arg1::Integer,arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg8::Union{Ptr{Ptr{IS{Float32}}},StridedArray{Ptr{IS{Float32}}},Ptr{Ptr{IS{Float32}}},Ref{Ptr{IS{Float32}}}},arg9::Union{Ptr{Ptr{IS{Float32}}},StridedArray{Ptr{IS{Float32}}},Ptr{Ptr{IS{Float32}}},Ref{Ptr{IS{Float32}}}})
    err = ccall((:PCASMCreateSubdomains2D,petscRealSingle),PetscErrorCode,(Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Ptr{IS{Float32}}},Ptr{Ptr{IS{Float32}}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
    return err
end

function PCASMGetLocalSubdomains(arg1::PC{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{IS{Float32}}},StridedArray{Ptr{IS{Float32}}},Ptr{Ptr{IS{Float32}}},Ref{Ptr{IS{Float32}}}},arg4::Union{Ptr{Ptr{IS{Float32}}},StridedArray{Ptr{IS{Float32}}},Ptr{Ptr{IS{Float32}}},Ref{Ptr{IS{Float32}}}})
    err = ccall((:PCASMGetLocalSubdomains,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Int64},Ptr{Ptr{IS{Float32}}},Ptr{Ptr{IS{Float32}}}),arg1,arg2,arg3,arg4)
    return err
end

function PCASMGetLocalSubmatrices(arg1::PC{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Mat{Float32}}},StridedArray{Ptr{Mat{Float32}}},Ptr{Ptr{Mat{Float32}}},Ref{Ptr{Mat{Float32}}}})
    err = ccall((:PCASMGetLocalSubmatrices,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Int64},Ptr{Ptr{Mat{Float32}}}),arg1,arg2,arg3)
    return err
end

function PCGASMSetTotalSubdomains(arg1::PC{Float32},arg2::Integer)
    err = ccall((:PCGASMSetTotalSubdomains,petscRealSingle),PetscErrorCode,(PC{Float32},Int64),arg1,arg2)
    return err
end

function PCGASMSetSubdomains(arg1::PC{Float32},arg2::Integer,arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}},arg4::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:PCGASMSetSubdomains,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,Ptr{IS{Float32}},Ptr{IS{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function PCGASMSetOverlap(arg1::PC{Float32},arg2::Integer)
    err = ccall((:PCGASMSetOverlap,petscRealSingle),PetscErrorCode,(PC{Float32},Int64),arg1,arg2)
    return err
end

function PCGASMSetUseDMSubdomains(arg1::PC{Float32},arg2::PetscBool)
    err = ccall((:PCGASMSetUseDMSubdomains,petscRealSingle),PetscErrorCode,(PC{Float32},PetscBool),arg1,arg2)
    return err
end

function PCGASMGetUseDMSubdomains(arg1::PC{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCGASMGetUseDMSubdomains,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCGASMSetSortIndices(arg1::PC{Float32},arg2::PetscBool)
    err = ccall((:PCGASMSetSortIndices,petscRealSingle),PetscErrorCode,(PC{Float32},PetscBool),arg1,arg2)
    return err
end

function PCGASMSetType(arg1::PC{Float32},arg2::PCGASMType)
    err = ccall((:PCGASMSetType,petscRealSingle),PetscErrorCode,(PC{Float32},PCGASMType),arg1,arg2)
    return err
end

function PCGASMCreateSubdomains(arg1::Mat{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{IS{Float32}}},StridedArray{Ptr{IS{Float32}}},Ptr{Ptr{IS{Float32}}},Ref{Ptr{IS{Float32}}}})
    err = ccall((:PCGASMCreateSubdomains,petscRealSingle),PetscErrorCode,(Mat{Float32},Int64,Ptr{Int64},Ptr{Ptr{IS{Float32}}}),arg1,arg2,arg3,arg4)
    return err
end

function PCGASMDestroySubdomains(arg1::Integer,arg2::Union{Ptr{Ptr{IS{Float32}}},StridedArray{Ptr{IS{Float32}}},Ptr{Ptr{IS{Float32}}},Ref{Ptr{IS{Float32}}}},arg3::Union{Ptr{Ptr{IS{Float32}}},StridedArray{Ptr{IS{Float32}}},Ptr{Ptr{IS{Float32}}},Ref{Ptr{IS{Float32}}}})
    err = ccall((:PCGASMDestroySubdomains,petscRealSingle),PetscErrorCode,(Int64,Ptr{Ptr{IS{Float32}}},Ptr{Ptr{IS{Float32}}}),arg1,arg2,arg3)
    return err
end

function PCGASMCreateSubdomains2D(arg1::PC{Float32},arg2::Integer,arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg9::Union{Ptr{Ptr{IS{Float32}}},StridedArray{Ptr{IS{Float32}}},Ptr{Ptr{IS{Float32}}},Ref{Ptr{IS{Float32}}}},arg10::Union{Ptr{Ptr{IS{Float32}}},StridedArray{Ptr{IS{Float32}}},Ptr{Ptr{IS{Float32}}},Ref{Ptr{IS{Float32}}}})
    err = ccall((:PCGASMCreateSubdomains2D,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,Int64,Int64,Int64,Int64,Int64,Ptr{Int64},Ptr{Ptr{IS{Float32}}},Ptr{Ptr{IS{Float32}}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function PCGASMGetSubdomains(arg1::PC{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{IS{Float32}}},StridedArray{Ptr{IS{Float32}}},Ptr{Ptr{IS{Float32}}},Ref{Ptr{IS{Float32}}}},arg4::Union{Ptr{Ptr{IS{Float32}}},StridedArray{Ptr{IS{Float32}}},Ptr{Ptr{IS{Float32}}},Ref{Ptr{IS{Float32}}}})
    err = ccall((:PCGASMGetSubdomains,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Int64},Ptr{Ptr{IS{Float32}}},Ptr{Ptr{IS{Float32}}}),arg1,arg2,arg3,arg4)
    return err
end

function PCGASMGetSubmatrices(arg1::PC{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Mat{Float32}}},StridedArray{Ptr{Mat{Float32}}},Ptr{Ptr{Mat{Float32}}},Ref{Ptr{Mat{Float32}}}})
    err = ccall((:PCGASMGetSubmatrices,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Int64},Ptr{Ptr{Mat{Float32}}}),arg1,arg2,arg3)
    return err
end

function PCCompositeSetType(arg1::PC{Float32},arg2::PCCompositeType)
    err = ccall((:PCCompositeSetType,petscRealSingle),PetscErrorCode,(PC{Float32},PCCompositeType),arg1,arg2)
    return err
end

function PCCompositeGetType(arg1::PC{Float32},arg2::Union{Ptr{PCCompositeType},StridedArray{PCCompositeType},Ptr{PCCompositeType},Ref{PCCompositeType}})
    err = ccall((:PCCompositeGetType,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{PCCompositeType}),arg1,arg2)
    return err
end

function PCCompositeAddPC(arg1::PC{Float32},arg2::PCType)
    err = ccall((:PCCompositeAddPC,petscRealSingle),PetscErrorCode,(PC{Float32},Cstring),arg1,arg2)
    return err
end

function PCCompositeGetPC(arg1::PC{Float32},arg2::Integer,arg3::Union{Ptr{PC{Float32}},StridedArray{PC{Float32}},Ptr{PC{Float32}},Ref{PC{Float32}}})
    err = ccall((:PCCompositeGetPC,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,Ptr{PC{Float32}}),arg1,arg2,arg3)
    return err
end

function PCCompositeSpecialSetAlpha(arg1::PC{Float32},arg2::Float32)
    err = ccall((:PCCompositeSpecialSetAlpha,petscRealSingle),PetscErrorCode,(PC{Float32},Float32),arg1,arg2)
    return err
end

function PCRedundantSetNumber(arg1::PC{Float32},arg2::Integer)
    err = ccall((:PCRedundantSetNumber,petscRealSingle),PetscErrorCode,(PC{Float32},Int64),arg1,arg2)
    return err
end

function PCRedundantSetScatter(arg1::PC{Float32},arg2::VecScatter{Float32},arg3::VecScatter{Float32})
    err = ccall((:PCRedundantSetScatter,petscRealSingle),PetscErrorCode,(PC{Float32},VecScatter{Float32},VecScatter{Float32}),arg1,arg2,arg3)
    return err
end

function PCRedundantGetOperators(arg1::PC{Float32},arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}},arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:PCRedundantGetOperators,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Mat{Float32}},Ptr{Mat{Float32}}),arg1,arg2,arg3)
    return err
end

function PCSPAISetEpsilon(arg1::PC{Float32},arg2::Cdouble)
    err = ccall((:PCSPAISetEpsilon,petscRealSingle),PetscErrorCode,(PC{Float32},Cdouble),arg1,arg2)
    return err
end

function PCSPAISetNBSteps(arg1::PC{Float32},arg2::Integer)
    err = ccall((:PCSPAISetNBSteps,petscRealSingle),PetscErrorCode,(PC{Float32},Int64),arg1,arg2)
    return err
end

function PCSPAISetMax(arg1::PC{Float32},arg2::Integer)
    err = ccall((:PCSPAISetMax,petscRealSingle),PetscErrorCode,(PC{Float32},Int64),arg1,arg2)
    return err
end

function PCSPAISetMaxNew(arg1::PC{Float32},arg2::Integer)
    err = ccall((:PCSPAISetMaxNew,petscRealSingle),PetscErrorCode,(PC{Float32},Int64),arg1,arg2)
    return err
end

function PCSPAISetBlockSize(arg1::PC{Float32},arg2::Integer)
    err = ccall((:PCSPAISetBlockSize,petscRealSingle),PetscErrorCode,(PC{Float32},Int64),arg1,arg2)
    return err
end

function PCSPAISetCacheSize(arg1::PC{Float32},arg2::Integer)
    err = ccall((:PCSPAISetCacheSize,petscRealSingle),PetscErrorCode,(PC{Float32},Int64),arg1,arg2)
    return err
end

function PCSPAISetVerbose(arg1::PC{Float32},arg2::Integer)
    err = ccall((:PCSPAISetVerbose,petscRealSingle),PetscErrorCode,(PC{Float32},Int64),arg1,arg2)
    return err
end

function PCSPAISetSp(arg1::PC{Float32},arg2::Integer)
    err = ccall((:PCSPAISetSp,petscRealSingle),PetscErrorCode,(PC{Float32},Int64),arg1,arg2)
    return err
end

function PCHYPRESetType(arg1::PC{Float32},arg2::Union{ByteString,Symbol})
    err = ccall((:PCHYPRESetType,petscRealSingle),PetscErrorCode,(PC{Float32},Cstring),arg1,arg2)
    return err
end

function PCHYPREGetType(arg1::PC{Float32},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:PCHYPREGetType,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function PCHYPRESetDiscreteGradient(arg1::PC{Float32},arg2::Mat{Float32})
    err = ccall((:PCHYPRESetDiscreteGradient,petscRealSingle),PetscErrorCode,(PC{Float32},Mat{Float32}),arg1,arg2)
    return err
end

function PCHYPRESetDiscreteCurl(arg1::PC{Float32},arg2::Mat{Float32})
    err = ccall((:PCHYPRESetDiscreteCurl,petscRealSingle),PetscErrorCode,(PC{Float32},Mat{Float32}),arg1,arg2)
    return err
end

function PCHYPRESetEdgeConstantVectors(arg1::PC{Float32},arg2::Vec{Float32},arg3::Vec{Float32},arg4::Vec{Float32})
    err = ccall((:PCHYPRESetEdgeConstantVectors,petscRealSingle),PetscErrorCode,(PC{Float32},Vec{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function PCHYPRESetAlphaPoissonMatrix(arg1::PC{Float32},arg2::Mat{Float32})
    err = ccall((:PCHYPRESetAlphaPoissonMatrix,petscRealSingle),PetscErrorCode,(PC{Float32},Mat{Float32}),arg1,arg2)
    return err
end

function PCHYPRESetBetaPoissonMatrix(arg1::PC{Float32},arg2::Mat{Float32})
    err = ccall((:PCHYPRESetBetaPoissonMatrix,petscRealSingle),PetscErrorCode,(PC{Float32},Mat{Float32}),arg1,arg2)
    return err
end

function PCBJacobiGetLocalBlocks(arg1::PC{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:PCBJacobiGetLocalBlocks,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3)
    return err
end

function PCBJacobiGetTotalBlocks(arg1::PC{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}})
    err = ccall((:PCBJacobiGetTotalBlocks,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Int64},Ptr{Ptr{Int64}}),arg1,arg2,arg3)
    return err
end

function PCFieldSplitSetFields(arg1::PC{Float32},arg2::Union{ByteString,Symbol},arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PCFieldSplitSetFields,petscRealSingle),PetscErrorCode,(PC{Float32},Cstring,Int64,Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PCFieldSplitSetType(arg1::PC{Float32},arg2::PCCompositeType)
    err = ccall((:PCFieldSplitSetType,petscRealSingle),PetscErrorCode,(PC{Float32},PCCompositeType),arg1,arg2)
    return err
end

function PCFieldSplitGetType(arg1::PC{Float32},arg2::Union{Ptr{PCCompositeType},StridedArray{PCCompositeType},Ptr{PCCompositeType},Ref{PCCompositeType}})
    err = ccall((:PCFieldSplitGetType,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{PCCompositeType}),arg1,arg2)
    return err
end

function PCFieldSplitSetBlockSize(arg1::PC{Float32},arg2::Integer)
    err = ccall((:PCFieldSplitSetBlockSize,petscRealSingle),PetscErrorCode,(PC{Float32},Int64),arg1,arg2)
    return err
end

function PCFieldSplitSetIS(arg1::PC{Float32},arg2::Union{ByteString,Symbol},arg3::IS{Float32})
    err = ccall((:PCFieldSplitSetIS,petscRealSingle),PetscErrorCode,(PC{Float32},Cstring,IS{Float32}),arg1,arg2,arg3)
    return err
end

function PCFieldSplitGetIS(arg1::PC{Float32},arg2::Union{ByteString,Symbol},arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:PCFieldSplitGetIS,petscRealSingle),PetscErrorCode,(PC{Float32},Cstring,Ptr{IS{Float32}}),arg1,arg2,arg3)
    return err
end

function PCFieldSplitSetDMSplits(arg1::PC{Float32},arg2::PetscBool)
    err = ccall((:PCFieldSplitSetDMSplits,petscRealSingle),PetscErrorCode,(PC{Float32},PetscBool),arg1,arg2)
    return err
end

function PCFieldSplitGetDMSplits(arg1::PC{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCFieldSplitGetDMSplits,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCFieldSplitSetDiagUseAmat(arg1::PC{Float32},arg2::PetscBool)
    err = ccall((:PCFieldSplitSetDiagUseAmat,petscRealSingle),PetscErrorCode,(PC{Float32},PetscBool),arg1,arg2)
    return err
end

function PCFieldSplitGetDiagUseAmat(arg1::PC{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCFieldSplitGetDiagUseAmat,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCFieldSplitSetOffDiagUseAmat(arg1::PC{Float32},arg2::PetscBool)
    err = ccall((:PCFieldSplitSetOffDiagUseAmat,petscRealSingle),PetscErrorCode,(PC{Float32},PetscBool),arg1,arg2)
    return err
end

function PCFieldSplitGetOffDiagUseAmat(arg1::PC{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCFieldSplitGetOffDiagUseAmat,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PETSC_DEPRECATED(arg0::Type{Float32})
    err = ccall((:PETSC_DEPRECATED,petscRealSingle),Cint,())
    return err
end

function PCFieldSplitSchurPrecondition(arg1::PC{Float32},arg2::PCFieldSplitSchurPreType,arg3::Mat{Float32})
    err = ccall((:PCFieldSplitSchurPrecondition,petscRealSingle),PetscErrorCode,(PC{Float32},PCFieldSplitSchurPreType,Mat{Float32}),arg1,arg2,arg3)
    return err
end

function PCFieldSplitSetSchurPre(arg1::PC{Float32},arg2::PCFieldSplitSchurPreType,arg3::Mat{Float32})
    err = ccall((:PCFieldSplitSetSchurPre,petscRealSingle),PetscErrorCode,(PC{Float32},PCFieldSplitSchurPreType,Mat{Float32}),arg1,arg2,arg3)
    return err
end

function PCFieldSplitGetSchurPre(arg1::PC{Float32},arg2::Union{Ptr{PCFieldSplitSchurPreType},StridedArray{PCFieldSplitSchurPreType},Ptr{PCFieldSplitSchurPreType},Ref{PCFieldSplitSchurPreType}},arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:PCFieldSplitGetSchurPre,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{PCFieldSplitSchurPreType},Ptr{Mat{Float32}}),arg1,arg2,arg3)
    return err
end

function PCFieldSplitSetSchurFactType(arg1::PC{Float32},arg2::PCFieldSplitSchurFactType)
    err = ccall((:PCFieldSplitSetSchurFactType,petscRealSingle),PetscErrorCode,(PC{Float32},PCFieldSplitSchurFactType),arg1,arg2)
    return err
end

function PCFieldSplitGetSchurBlocks(arg1::PC{Float32},arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}},arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}},arg4::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}},arg5::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:PCFieldSplitGetSchurBlocks,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Mat{Float32}},Ptr{Mat{Float32}},Ptr{Mat{Float32}},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function PCFieldSplitSchurGetS(arg1::PC{Float32},S::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:PCFieldSplitSchurGetS,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Mat{Float32}}),arg1,S)
    return err
end

function PCFieldSplitSchurRestoreS(arg1::PC{Float32},S::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:PCFieldSplitSchurRestoreS,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Mat{Float32}}),arg1,S)
    return err
end

function PCGalerkinSetRestriction(arg1::PC{Float32},arg2::Mat{Float32})
    err = ccall((:PCGalerkinSetRestriction,petscRealSingle),PetscErrorCode,(PC{Float32},Mat{Float32}),arg1,arg2)
    return err
end

function PCGalerkinSetInterpolation(arg1::PC{Float32},arg2::Mat{Float32})
    err = ccall((:PCGalerkinSetInterpolation,petscRealSingle),PetscErrorCode,(PC{Float32},Mat{Float32}),arg1,arg2)
    return err
end

function PCSetCoordinates(arg1::PC{Float32},arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:PCSetCoordinates,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,Int64,Ptr{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function PCPythonSetType(arg1::PC{Float32},arg2::Union{ByteString,Symbol})
    err = ccall((:PCPythonSetType,petscRealSingle),PetscErrorCode,(PC{Float32},Cstring),arg1,arg2)
    return err
end

#= skipping function with undefined symbols:
 function PCSetDM(arg1::PC{Float32},arg2::DM)
    ccall((:PCSetDM,petscRealSingle),PetscErrorCode,(PC{Float32},DM),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function PCGetDM(arg1::PC{Float32},arg2::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:PCGetDM,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{DM}),arg1,arg2)
end
=#
function PCSetApplicationContext(arg1::PC{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCSetApplicationContext,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Void}),arg1,arg2)
    return err
end

function PCGetApplicationContext(arg1::PC{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCGetApplicationContext,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Void}),arg1,arg2)
    return err
end

function PCBiCGStabCUSPSetTolerance(arg1::PC{Float32},arg2::Float32)
    err = ccall((:PCBiCGStabCUSPSetTolerance,petscRealSingle),PetscErrorCode,(PC{Float32},Float32),arg1,arg2)
    return err
end

function PCBiCGStabCUSPSetIterations(arg1::PC{Float32},arg2::Integer)
    err = ccall((:PCBiCGStabCUSPSetIterations,petscRealSingle),PetscErrorCode,(PC{Float32},Int64),arg1,arg2)
    return err
end

function PCBiCGStabCUSPSetUseVerboseMonitor(arg1::PC{Float32},arg2::PetscBool)
    err = ccall((:PCBiCGStabCUSPSetUseVerboseMonitor,petscRealSingle),PetscErrorCode,(PC{Float32},PetscBool),arg1,arg2)
    return err
end

function PCAINVCUSPSetDropTolerance(arg1::PC{Float32},arg2::Float32)
    err = ccall((:PCAINVCUSPSetDropTolerance,petscRealSingle),PetscErrorCode,(PC{Float32},Float32),arg1,arg2)
    return err
end

function PCAINVCUSPUseScaling(arg1::PC{Float32},arg2::PetscBool)
    err = ccall((:PCAINVCUSPUseScaling,petscRealSingle),PetscErrorCode,(PC{Float32},PetscBool),arg1,arg2)
    return err
end

function PCAINVCUSPSetNonzeros(arg1::PC{Float32},arg2::Integer)
    err = ccall((:PCAINVCUSPSetNonzeros,petscRealSingle),PetscErrorCode,(PC{Float32},Int64),arg1,arg2)
    return err
end

function PCAINVCUSPSetLinParameter(arg1::PC{Float32},arg2::Integer)
    err = ccall((:PCAINVCUSPSetLinParameter,petscRealSingle),PetscErrorCode,(PC{Float32},Int64),arg1,arg2)
    return err
end

function PCPARMSSetGlobal(arg1::PC{Float32},arg2::PCPARMSGlobalType)
    err = ccall((:PCPARMSSetGlobal,petscRealSingle),PetscErrorCode,(PC{Float32},PCPARMSGlobalType),arg1,arg2)
    return err
end

function PCPARMSSetLocal(arg1::PC{Float32},arg2::PCPARMSLocalType)
    err = ccall((:PCPARMSSetLocal,petscRealSingle),PetscErrorCode,(PC{Float32},PCPARMSLocalType),arg1,arg2)
    return err
end

function PCPARMSSetSolveTolerances(arg1::PC{Float32},arg2::Float32,arg3::Integer)
    err = ccall((:PCPARMSSetSolveTolerances,petscRealSingle),PetscErrorCode,(PC{Float32},Float32,Int64),arg1,arg2,arg3)
    return err
end

function PCPARMSSetSolveRestart(arg1::PC{Float32},arg2::Integer)
    err = ccall((:PCPARMSSetSolveRestart,petscRealSingle),PetscErrorCode,(PC{Float32},Int64),arg1,arg2)
    return err
end

function PCPARMSSetNonsymPerm(arg1::PC{Float32},arg2::PetscBool)
    err = ccall((:PCPARMSSetNonsymPerm,petscRealSingle),PetscErrorCode,(PC{Float32},PetscBool),arg1,arg2)
    return err
end

function PCPARMSSetFill(arg1::PC{Float32},arg2::Integer,arg3::Integer,arg4::Integer)
    err = ccall((:PCPARMSSetFill,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,Int64,Int64),arg1,arg2,arg3,arg4)
    return err
end

function PCGAMGSetType(arg1::PC{Float32},arg2::PCGAMGType)
    err = ccall((:PCGAMGSetType,petscRealSingle),PetscErrorCode,(PC{Float32},Cstring),arg1,arg2)
    return err
end

function PCGAMGGetType(arg1::PC{Float32},arg2::Union{Ptr{PCGAMGType},StridedArray{PCGAMGType},Ptr{PCGAMGType},Ref{PCGAMGType}})
    (arg2_,tmp) = symbol_get_before(arg2)
    err = ccall((:PCGAMGGetType,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Ptr{UInt8}}),arg1,arg2_)
    symbol_get_after(arg2_,arg2)
    return err
end

function PCGAMGSetProcEqLim(arg1::PC{Float32},arg2::Integer)
    err = ccall((:PCGAMGSetProcEqLim,petscRealSingle),PetscErrorCode,(PC{Float32},Int64),arg1,arg2)
    return err
end

function PCGAMGSetRepartitioning(arg1::PC{Float32},arg2::PetscBool)
    err = ccall((:PCGAMGSetRepartitioning,petscRealSingle),PetscErrorCode,(PC{Float32},PetscBool),arg1,arg2)
    return err
end

function PCGAMGSetUseASMAggs(arg1::PC{Float32},arg2::PetscBool)
    err = ccall((:PCGAMGSetUseASMAggs,petscRealSingle),PetscErrorCode,(PC{Float32},PetscBool),arg1,arg2)
    return err
end

function PCGAMGSetSolverType(arg1::PC{Float32},arg2::Union{ByteString,Symbol},arg3::Integer)
    err = ccall((:PCGAMGSetSolverType,petscRealSingle),PetscErrorCode,(PC{Float32},Cstring,Int64),arg1,arg2,arg3)
    return err
end

function PCGAMGSetThreshold(arg1::PC{Float32},arg2::Float32)
    err = ccall((:PCGAMGSetThreshold,petscRealSingle),PetscErrorCode,(PC{Float32},Float32),arg1,arg2)
    return err
end

function PCGAMGSetCoarseEqLim(arg1::PC{Float32},arg2::Integer)
    err = ccall((:PCGAMGSetCoarseEqLim,petscRealSingle),PetscErrorCode,(PC{Float32},Int64),arg1,arg2)
    return err
end

function PCGAMGSetNlevels(arg1::PC{Float32},arg2::Integer)
    err = ccall((:PCGAMGSetNlevels,petscRealSingle),PetscErrorCode,(PC{Float32},Int64),arg1,arg2)
    return err
end

function PCGAMGSetNSmooths(arg1::PC{Float32},arg2::Integer)
    err = ccall((:PCGAMGSetNSmooths,petscRealSingle),PetscErrorCode,(PC{Float32},Int64),arg1,arg2)
    return err
end

function PCGAMGSetSymGraph(arg1::PC{Float32},arg2::PetscBool)
    err = ccall((:PCGAMGSetSymGraph,petscRealSingle),PetscErrorCode,(PC{Float32},PetscBool),arg1,arg2)
    return err
end

function PCGAMGSetSquareGraph(arg1::PC{Float32},arg2::Integer)
    err = ccall((:PCGAMGSetSquareGraph,petscRealSingle),PetscErrorCode,(PC{Float32},Int64),arg1,arg2)
    return err
end

function PCGAMGSetReuseInterpolation(arg1::PC{Float32},arg2::PetscBool)
    err = ccall((:PCGAMGSetReuseInterpolation,petscRealSingle),PetscErrorCode,(PC{Float32},PetscBool),arg1,arg2)
    return err
end

function PCGAMGFinalizePackage(arg0::Type{Float32})
    err = ccall((:PCGAMGFinalizePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function PCGAMGInitializePackage(arg0::Type{Float32})
    err = ccall((:PCGAMGInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function PCGAMGRegister(arg0::Type{Float32},arg1::PCGAMGType,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCGAMGRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function PCGAMGClassicalSetType(arg1::PC{Float32},arg2::PCGAMGClassicalType)
    err = ccall((:PCGAMGClassicalSetType,petscRealSingle),PetscErrorCode,(PC{Float32},Cstring),arg1,arg2)
    return err
end

function PCGAMGClassicalGetType(arg1::PC{Float32},arg2::Union{Ptr{PCGAMGClassicalType},StridedArray{PCGAMGClassicalType},Ptr{PCGAMGClassicalType},Ref{PCGAMGClassicalType}})
    (arg2_,tmp) = symbol_get_before(arg2)
    err = ccall((:PCGAMGClassicalGetType,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Ptr{UInt8}}),arg1,arg2_)
    symbol_get_after(arg2_,arg2)
    return err
end

function PCBDDCSetChangeOfBasisMat(arg1::PC{Float32},arg2::Mat{Float32})
    err = ccall((:PCBDDCSetChangeOfBasisMat,petscRealSingle),PetscErrorCode,(PC{Float32},Mat{Float32}),arg1,arg2)
    return err
end

function PCBDDCSetPrimalVerticesLocalIS(arg1::PC{Float32},arg2::IS{Float32})
    err = ccall((:PCBDDCSetPrimalVerticesLocalIS,petscRealSingle),PetscErrorCode,(PC{Float32},IS{Float32}),arg1,arg2)
    return err
end

function PCBDDCSetCoarseningRatio(arg1::PC{Float32},arg2::Integer)
    err = ccall((:PCBDDCSetCoarseningRatio,petscRealSingle),PetscErrorCode,(PC{Float32},Int64),arg1,arg2)
    return err
end

function PCBDDCSetLevels(arg1::PC{Float32},arg2::Integer)
    err = ccall((:PCBDDCSetLevels,petscRealSingle),PetscErrorCode,(PC{Float32},Int64),arg1,arg2)
    return err
end

#= skipping function with undefined symbols:
 function PCBDDCSetNullSpace(arg1::PC{Float32},arg2::MatNullSpace)
    ccall((:PCBDDCSetNullSpace,petscRealSingle),PetscErrorCode,(PC{Float32},MatNullSpace),arg1,arg2)
end
=#
function PCBDDCSetDirichletBoundaries(arg1::PC{Float32},arg2::IS{Float32})
    err = ccall((:PCBDDCSetDirichletBoundaries,petscRealSingle),PetscErrorCode,(PC{Float32},IS{Float32}),arg1,arg2)
    return err
end

function PCBDDCSetDirichletBoundariesLocal(arg1::PC{Float32},arg2::IS{Float32})
    err = ccall((:PCBDDCSetDirichletBoundariesLocal,petscRealSingle),PetscErrorCode,(PC{Float32},IS{Float32}),arg1,arg2)
    return err
end

function PCBDDCGetDirichletBoundaries(arg1::PC{Float32},arg2::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:PCBDDCGetDirichletBoundaries,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{IS{Float32}}),arg1,arg2)
    return err
end

function PCBDDCGetDirichletBoundariesLocal(arg1::PC{Float32},arg2::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:PCBDDCGetDirichletBoundariesLocal,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{IS{Float32}}),arg1,arg2)
    return err
end

function PCBDDCSetNeumannBoundaries(arg1::PC{Float32},arg2::IS{Float32})
    err = ccall((:PCBDDCSetNeumannBoundaries,petscRealSingle),PetscErrorCode,(PC{Float32},IS{Float32}),arg1,arg2)
    return err
end

function PCBDDCSetNeumannBoundariesLocal(arg1::PC{Float32},arg2::IS{Float32})
    err = ccall((:PCBDDCSetNeumannBoundariesLocal,petscRealSingle),PetscErrorCode,(PC{Float32},IS{Float32}),arg1,arg2)
    return err
end

function PCBDDCGetNeumannBoundaries(arg1::PC{Float32},arg2::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:PCBDDCGetNeumannBoundaries,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{IS{Float32}}),arg1,arg2)
    return err
end

function PCBDDCGetNeumannBoundariesLocal(arg1::PC{Float32},arg2::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:PCBDDCGetNeumannBoundariesLocal,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{IS{Float32}}),arg1,arg2)
    return err
end

function PCBDDCSetDofsSplitting(arg1::PC{Float32},arg2::Integer,arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:PCBDDCSetDofsSplitting,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,Ptr{IS{Float32}}),arg1,arg2,arg3)
    return err
end

function PCBDDCSetDofsSplittingLocal(arg1::PC{Float32},arg2::Integer,arg3::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    err = ccall((:PCBDDCSetDofsSplittingLocal,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,Ptr{IS{Float32}}),arg1,arg2,arg3)
    return err
end

function PCBDDCSetLocalAdjacencyGraph(arg1::PC{Float32},arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},PetscCopyMode::Integer)
    err = ccall((:PCBDDCSetLocalAdjacencyGraph,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,Ptr{Int64},Ptr{Int64},Cint),arg1,arg2,arg3,arg4,PetscCopyMode)
    return err
end

function PCBDDCCreateFETIDPOperators(arg1::PC{Float32},arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}},arg3::Union{Ptr{PC{Float32}},StridedArray{PC{Float32}},Ptr{PC{Float32}},Ref{PC{Float32}}})
    err = ccall((:PCBDDCCreateFETIDPOperators,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Mat{Float32}},Ptr{PC{Float32}}),arg1,arg2,arg3)
    return err
end

function PCBDDCMatFETIDPGetRHS(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:PCBDDCMatFETIDPGetRHS,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function PCBDDCMatFETIDPGetSolution(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:PCBDDCMatFETIDPGetSolution,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function PCISSetUseStiffnessScaling(arg1::PC{Float32},arg2::PetscBool)
    err = ccall((:PCISSetUseStiffnessScaling,petscRealSingle),PetscErrorCode,(PC{Float32},PetscBool),arg1,arg2)
    return err
end

function PCISSetSubdomainScalingFactor(arg1::PC{Float32},arg2::Float32)
    err = ccall((:PCISSetSubdomainScalingFactor,petscRealSingle),PetscErrorCode,(PC{Float32},Float32),arg1,arg2)
    return err
end

function PCISSetSubdomainDiagonalScaling(arg1::PC{Float32},arg2::Vec{Float32})
    err = ccall((:PCISSetSubdomainDiagonalScaling,petscRealSingle),PetscErrorCode,(PC{Float32},Vec{Float32}),arg1,arg2)
    return err
end

function PCMGSetType(arg1::PC{Float32},arg2::PCMGType)
    err = ccall((:PCMGSetType,petscRealSingle),PetscErrorCode,(PC{Float32},PCMGType),arg1,arg2)
    return err
end

function PCMGGetType(arg1::PC{Float32},arg2::Union{Ptr{PCMGType},StridedArray{PCMGType},Ptr{PCMGType},Ref{PCMGType}})
    err = ccall((:PCMGGetType,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{PCMGType}),arg1,arg2)
    return err
end

function PCMGSetLevels(arg1::PC{Float32},arg2::Integer,arg3::Union{Ptr{MPI_Comm},StridedArray{MPI_Comm},Ptr{MPI_Comm},Ref{MPI_Comm}})
    err = ccall((:PCMGSetLevels,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,Ptr{comm_type}),arg1,arg2,arg3)
    return err
end

function PCMGGetLevels(arg1::PC{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:PCMGGetLevels,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function PCMGSetNumberSmoothUp(arg1::PC{Float32},arg2::Integer)
    err = ccall((:PCMGSetNumberSmoothUp,petscRealSingle),PetscErrorCode,(PC{Float32},Int64),arg1,arg2)
    return err
end

function PCMGSetNumberSmoothDown(arg1::PC{Float32},arg2::Integer)
    err = ccall((:PCMGSetNumberSmoothDown,petscRealSingle),PetscErrorCode,(PC{Float32},Int64),arg1,arg2)
    return err
end

function PCMGSetCycleType(arg1::PC{Float32},arg2::PCMGCycleType)
    err = ccall((:PCMGSetCycleType,petscRealSingle),PetscErrorCode,(PC{Float32},PCMGCycleType),arg1,arg2)
    return err
end

function PCMGSetCycleTypeOnLevel(arg1::PC{Float32},arg2::Integer,arg3::PCMGCycleType)
    err = ccall((:PCMGSetCycleTypeOnLevel,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,PCMGCycleType),arg1,arg2,arg3)
    return err
end

function PCMGSetCyclesOnLevel(arg1::PC{Float32},arg2::Integer,arg3::Integer)
    err = ccall((:PCMGSetCyclesOnLevel,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,Int64),arg1,arg2,arg3)
    return err
end

function PCMGMultiplicativeSetCycles(arg1::PC{Float32},arg2::Integer)
    err = ccall((:PCMGMultiplicativeSetCycles,petscRealSingle),PetscErrorCode,(PC{Float32},Int64),arg1,arg2)
    return err
end

function PCMGSetGalerkin(arg1::PC{Float32},arg2::PetscBool)
    err = ccall((:PCMGSetGalerkin,petscRealSingle),PetscErrorCode,(PC{Float32},PetscBool),arg1,arg2)
    return err
end

function PCMGGetGalerkin(arg1::PC{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:PCMGGetGalerkin,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function PCMGSetRhs(arg1::PC{Float32},arg2::Integer,arg3::Vec{Float32})
    err = ccall((:PCMGSetRhs,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,Vec{Float32}),arg1,arg2,arg3)
    return err
end

function PCMGSetX(arg1::PC{Float32},arg2::Integer,arg3::Vec{Float32})
    err = ccall((:PCMGSetX,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,Vec{Float32}),arg1,arg2,arg3)
    return err
end

function PCMGSetR(arg1::PC{Float32},arg2::Integer,arg3::Vec{Float32})
    err = ccall((:PCMGSetR,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,Vec{Float32}),arg1,arg2,arg3)
    return err
end

function PCMGSetRestriction(arg1::PC{Float32},arg2::Integer,arg3::Mat{Float32})
    err = ccall((:PCMGSetRestriction,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,Mat{Float32}),arg1,arg2,arg3)
    return err
end

function PCMGGetRestriction(arg1::PC{Float32},arg2::Integer,arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:PCMGGetRestriction,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,Ptr{Mat{Float32}}),arg1,arg2,arg3)
    return err
end

function PCMGSetInterpolation(arg1::PC{Float32},arg2::Integer,arg3::Mat{Float32})
    err = ccall((:PCMGSetInterpolation,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,Mat{Float32}),arg1,arg2,arg3)
    return err
end

function PCMGGetInterpolation(arg1::PC{Float32},arg2::Integer,arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:PCMGGetInterpolation,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,Ptr{Mat{Float32}}),arg1,arg2,arg3)
    return err
end

function PCMGSetRScale(arg1::PC{Float32},arg2::Integer,arg3::Vec{Float32})
    err = ccall((:PCMGSetRScale,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,Vec{Float32}),arg1,arg2,arg3)
    return err
end

function PCMGGetRScale(arg1::PC{Float32},arg2::Integer,arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:PCMGGetRScale,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,Ptr{Vec{Float32}}),arg1,arg2,arg3)
    return err
end

function PCMGSetResidual(arg1::PC{Float32},arg2::Integer,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Mat{Float32})
    err = ccall((:PCMGSetResidual,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,Ptr{Void},Mat{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function PCMGResidualDefault(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Vec{Float32},arg4::Vec{Float32})
    err = ccall((:PCMGResidualDefault,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function KSPInitializePackage(arg0::Type{Float32})
    err = ccall((:KSPInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function KSPCreate(arg1::MPI_Comm,arg2::Union{Ptr{KSP{Float32}},StridedArray{KSP{Float32}},Ptr{KSP{Float32}},Ref{KSP{Float32}}})
    err = ccall((:KSPCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{KSP{Float32}}),arg1,arg2)
    return err
end

function KSPSetType(arg1::KSP{Float32},arg2::KSPType)
    err = ccall((:KSPSetType,petscRealSingle),PetscErrorCode,(KSP{Float32},Cstring),arg1,arg2)
    return err
end

function KSPGetType(arg1::KSP{Float32},arg2::Union{Ptr{KSPType},StridedArray{KSPType},Ptr{KSPType},Ref{KSPType}})
    (arg2_,tmp) = symbol_get_before(arg2)
    err = ccall((:KSPGetType,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Ptr{UInt8}}),arg1,arg2_)
    symbol_get_after(arg2_,arg2)
    return err
end

function KSPSetUp(arg1::KSP{Float32})
    err = ccall((:KSPSetUp,petscRealSingle),PetscErrorCode,(KSP{Float32},),arg1)
    return err
end

function KSPSetUpOnBlocks(arg1::KSP{Float32})
    err = ccall((:KSPSetUpOnBlocks,petscRealSingle),PetscErrorCode,(KSP{Float32},),arg1)
    return err
end

function KSPSolve(arg1::KSP{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:KSPSolve,petscRealSingle),PetscErrorCode,(KSP{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function KSPSolveTranspose(arg1::KSP{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:KSPSolveTranspose,petscRealSingle),PetscErrorCode,(KSP{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function KSPReset(arg1::KSP{Float32})
    err = ccall((:KSPReset,petscRealSingle),PetscErrorCode,(KSP{Float32},),arg1)
    return err
end

function KSPDestroy(arg1::Union{Ptr{KSP{Float32}},StridedArray{KSP{Float32}},Ptr{KSP{Float32}},Ref{KSP{Float32}}})
    err = ccall((:KSPDestroy,petscRealSingle),PetscErrorCode,(Ptr{KSP{Float32}},),arg1)
    return err
end

function KSPSetReusePreconditioner(arg1::KSP{Float32},arg2::PetscBool)
    err = ccall((:KSPSetReusePreconditioner,petscRealSingle),PetscErrorCode,(KSP{Float32},PetscBool),arg1,arg2)
    return err
end

function KSPSetSkipPCSetFromOptions(arg1::KSP{Float32},arg2::PetscBool)
    err = ccall((:KSPSetSkipPCSetFromOptions,petscRealSingle),PetscErrorCode,(KSP{Float32},PetscBool),arg1,arg2)
    return err
end

function KSPRegister(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function KSPSetPCSide(arg1::KSP{Float32},arg2::PCSide)
    err = ccall((:KSPSetPCSide,petscRealSingle),PetscErrorCode,(KSP{Float32},PCSide),arg1,arg2)
    return err
end

function KSPGetPCSide(arg1::KSP{Float32},arg2::Union{Ptr{PCSide},StridedArray{PCSide},Ptr{PCSide},Ref{PCSide}})
    err = ccall((:KSPGetPCSide,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{PCSide}),arg1,arg2)
    return err
end

function KSPSetTolerances(arg1::KSP{Float32},arg2::Float32,arg3::Float32,arg4::Float32,arg5::Integer)
    err = ccall((:KSPSetTolerances,petscRealSingle),PetscErrorCode,(KSP{Float32},Float32,Float32,Float32,Int64),arg1,arg2,arg3,arg4,arg5)
    return err
end

function KSPGetTolerances(arg1::KSP{Float32},arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:KSPGetTolerances,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function KSPSetInitialGuessNonzero(arg1::KSP{Float32},arg2::PetscBool)
    err = ccall((:KSPSetInitialGuessNonzero,petscRealSingle),PetscErrorCode,(KSP{Float32},PetscBool),arg1,arg2)
    return err
end

function KSPGetInitialGuessNonzero(arg1::KSP{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:KSPGetInitialGuessNonzero,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function KSPSetInitialGuessKnoll(arg1::KSP{Float32},arg2::PetscBool)
    err = ccall((:KSPSetInitialGuessKnoll,petscRealSingle),PetscErrorCode,(KSP{Float32},PetscBool),arg1,arg2)
    return err
end

function KSPGetInitialGuessKnoll(arg1::KSP{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:KSPGetInitialGuessKnoll,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function KSPSetErrorIfNotConverged(arg1::KSP{Float32},arg2::PetscBool)
    err = ccall((:KSPSetErrorIfNotConverged,petscRealSingle),PetscErrorCode,(KSP{Float32},PetscBool),arg1,arg2)
    return err
end

function KSPGetErrorIfNotConverged(arg1::KSP{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:KSPGetErrorIfNotConverged,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function KSPSetComputeEigenvalues(arg1::KSP{Float32},arg2::PetscBool)
    err = ccall((:KSPSetComputeEigenvalues,petscRealSingle),PetscErrorCode,(KSP{Float32},PetscBool),arg1,arg2)
    return err
end

function KSPGetComputeEigenvalues(arg1::KSP{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:KSPGetComputeEigenvalues,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function KSPSetComputeSingularValues(arg1::KSP{Float32},arg2::PetscBool)
    err = ccall((:KSPSetComputeSingularValues,petscRealSingle),PetscErrorCode,(KSP{Float32},PetscBool),arg1,arg2)
    return err
end

function KSPGetComputeSingularValues(arg1::KSP{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:KSPGetComputeSingularValues,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function KSPGetRhs(arg1::KSP{Float32},arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:KSPGetRhs,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Vec{Float32}}),arg1,arg2)
    return err
end

function KSPGetSolution(arg1::KSP{Float32},arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:KSPGetSolution,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Vec{Float32}}),arg1,arg2)
    return err
end

function KSPGetResidualNorm(arg1::KSP{Float32},arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:KSPGetResidualNorm,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Float32}),arg1,arg2)
    return err
end

function KSPGetIterationNumber(arg1::KSP{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:KSPGetIterationNumber,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function KSPGetTotalIterations(arg1::KSP{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:KSPGetTotalIterations,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function KSPCreateVecs(arg1::KSP{Float32},arg2::Integer,arg3::Union{Ptr{Ptr{Vec{Float32}}},StridedArray{Ptr{Vec{Float32}}},Ptr{Ptr{Vec{Float32}}},Ref{Ptr{Vec{Float32}}}},arg4::Integer,arg5::Union{Ptr{Ptr{Vec{Float32}}},StridedArray{Ptr{Vec{Float32}}},Ptr{Ptr{Vec{Float32}}},Ref{Ptr{Vec{Float32}}}})
    err = ccall((:KSPCreateVecs,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64,Ptr{Ptr{Vec{Float32}}},Int64,Ptr{Ptr{Vec{Float32}}}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function KSPSetPostSolve(arg1::KSP{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPSetPostSolve,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function KSPSetPC(arg1::KSP{Float32},arg2::PC{Float32})
    err = ccall((:KSPSetPC,petscRealSingle),PetscErrorCode,(KSP{Float32},PC{Float32}),arg1,arg2)
    return err
end

function KSPGetPC(arg1::KSP{Float32},arg2::Union{Ptr{PC{Float32}},StridedArray{PC{Float32}},Ptr{PC{Float32}},Ref{PC{Float32}}})
    err = ccall((:KSPGetPC,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{PC{Float32}}),arg1,arg2)
    return err
end

function KSPMonitor(arg1::KSP{Float32},arg2::Integer,arg3::Float32)
    err = ccall((:KSPMonitor,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64,Float32),arg1,arg2,arg3)
    return err
end

function KSPMonitorSet(arg1::KSP{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPMonitorSet,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPMonitorCancel(arg1::KSP{Float32})
    err = ccall((:KSPMonitorCancel,petscRealSingle),PetscErrorCode,(KSP{Float32},),arg1)
    return err
end

function KSPGetMonitorContext(arg1::KSP{Float32},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:KSPGetMonitorContext,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Ptr{Void}}),arg1,arg2)
    return err
end

function KSPGetResidualHistory(arg1::KSP{Float32},arg2::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:KSPGetResidualHistory,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Ptr{Float32}},Ptr{Int64}),arg1,arg2,arg3)
    return err
end

function KSPSetResidualHistory(arg1::KSP{Float32},arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Integer,arg4::PetscBool)
    err = ccall((:KSPSetResidualHistory,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Float32},Int64,PetscBool),arg1,arg2,arg3,arg4)
    return err
end

function KSPBuildSolutionDefault(arg1::KSP{Float32},arg2::Vec{Float32},arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:KSPBuildSolutionDefault,petscRealSingle),PetscErrorCode,(KSP{Float32},Vec{Float32},Ptr{Vec{Float32}}),arg1,arg2,arg3)
    return err
end

function KSPBuildResidualDefault(arg1::KSP{Float32},arg2::Vec{Float32},arg3::Vec{Float32},arg4::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:KSPBuildResidualDefault,petscRealSingle),PetscErrorCode,(KSP{Float32},Vec{Float32},Vec{Float32},Ptr{Vec{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function KSPDestroyDefault(arg1::KSP{Float32})
    err = ccall((:KSPDestroyDefault,petscRealSingle),PetscErrorCode,(KSP{Float32},),arg1)
    return err
end

function KSPSetWorkVecs(arg1::KSP{Float32},arg2::Integer)
    err = ccall((:KSPSetWorkVecs,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64),arg1,arg2)
    return err
end

function PCKSPGetKSP(arg1::PC{Float32},arg2::Union{Ptr{KSP{Float32}},StridedArray{KSP{Float32}},Ptr{KSP{Float32}},Ref{KSP{Float32}}})
    err = ccall((:PCKSPGetKSP,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{KSP{Float32}}),arg1,arg2)
    return err
end

function PCBJacobiGetSubKSP(arg1::PC{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{KSP{Float32}}},StridedArray{Ptr{KSP{Float32}}},Ptr{Ptr{KSP{Float32}}},Ref{Ptr{KSP{Float32}}}})
    err = ccall((:PCBJacobiGetSubKSP,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Int64},Ptr{Int64},Ptr{Ptr{KSP{Float32}}}),arg1,arg2,arg3,arg4)
    return err
end

function PCASMGetSubKSP(arg1::PC{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{KSP{Float32}}},StridedArray{Ptr{KSP{Float32}}},Ptr{Ptr{KSP{Float32}}},Ref{Ptr{KSP{Float32}}}})
    err = ccall((:PCASMGetSubKSP,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Int64},Ptr{Int64},Ptr{Ptr{KSP{Float32}}}),arg1,arg2,arg3,arg4)
    return err
end

function PCGASMGetSubKSP(arg1::PC{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Ptr{KSP{Float32}}},StridedArray{Ptr{KSP{Float32}}},Ptr{Ptr{KSP{Float32}}},Ref{Ptr{KSP{Float32}}}})
    err = ccall((:PCGASMGetSubKSP,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Int64},Ptr{Int64},Ptr{Ptr{KSP{Float32}}}),arg1,arg2,arg3,arg4)
    return err
end

function PCFieldSplitGetSubKSP(arg1::PC{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{KSP{Float32}}},StridedArray{Ptr{KSP{Float32}}},Ptr{Ptr{KSP{Float32}}},Ref{Ptr{KSP{Float32}}}})
    err = ccall((:PCFieldSplitGetSubKSP,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Int64},Ptr{Ptr{KSP{Float32}}}),arg1,arg2,arg3)
    return err
end

function PCMGGetSmoother(arg1::PC{Float32},arg2::Integer,arg3::Union{Ptr{KSP{Float32}},StridedArray{KSP{Float32}},Ptr{KSP{Float32}},Ref{KSP{Float32}}})
    err = ccall((:PCMGGetSmoother,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,Ptr{KSP{Float32}}),arg1,arg2,arg3)
    return err
end

function PCMGGetSmootherDown(arg1::PC{Float32},arg2::Integer,arg3::Union{Ptr{KSP{Float32}},StridedArray{KSP{Float32}},Ptr{KSP{Float32}},Ref{KSP{Float32}}})
    err = ccall((:PCMGGetSmootherDown,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,Ptr{KSP{Float32}}),arg1,arg2,arg3)
    return err
end

function PCMGGetSmootherUp(arg1::PC{Float32},arg2::Integer,arg3::Union{Ptr{KSP{Float32}},StridedArray{KSP{Float32}},Ptr{KSP{Float32}},Ref{KSP{Float32}}})
    err = ccall((:PCMGGetSmootherUp,petscRealSingle),PetscErrorCode,(PC{Float32},Int64,Ptr{KSP{Float32}}),arg1,arg2,arg3)
    return err
end

function PCMGGetCoarseSolve(arg1::PC{Float32},arg2::Union{Ptr{KSP{Float32}},StridedArray{KSP{Float32}},Ptr{KSP{Float32}},Ref{KSP{Float32}}})
    err = ccall((:PCMGGetCoarseSolve,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{KSP{Float32}}),arg1,arg2)
    return err
end

function PCGalerkinGetKSP(arg1::PC{Float32},arg2::Union{Ptr{KSP{Float32}},StridedArray{KSP{Float32}},Ptr{KSP{Float32}},Ref{KSP{Float32}}})
    err = ccall((:PCGalerkinGetKSP,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{KSP{Float32}}),arg1,arg2)
    return err
end

function KSPBuildSolution(arg1::KSP{Float32},arg2::Vec{Float32},arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:KSPBuildSolution,petscRealSingle),PetscErrorCode,(KSP{Float32},Vec{Float32},Ptr{Vec{Float32}}),arg1,arg2,arg3)
    return err
end

function KSPBuildResidual(arg1::KSP{Float32},arg2::Vec{Float32},arg3::Vec{Float32},arg4::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:KSPBuildResidual,petscRealSingle),PetscErrorCode,(KSP{Float32},Vec{Float32},Vec{Float32},Ptr{Vec{Float32}}),arg1,arg2,arg3,arg4)
    return err
end

function KSPRichardsonSetScale(arg1::KSP{Float32},arg2::Float32)
    err = ccall((:KSPRichardsonSetScale,petscRealSingle),PetscErrorCode,(KSP{Float32},Float32),arg1,arg2)
    return err
end

function KSPRichardsonSetSelfScale(arg1::KSP{Float32},arg2::PetscBool)
    err = ccall((:KSPRichardsonSetSelfScale,petscRealSingle),PetscErrorCode,(KSP{Float32},PetscBool),arg1,arg2)
    return err
end

function KSPChebyshevSetEigenvalues(arg1::KSP{Float32},arg2::Float32,arg3::Float32)
    err = ccall((:KSPChebyshevSetEigenvalues,petscRealSingle),PetscErrorCode,(KSP{Float32},Float32,Float32),arg1,arg2,arg3)
    return err
end

function KSPChebyshevEstEigSet(arg1::KSP{Float32},arg2::Float32,arg3::Float32,arg4::Float32,arg5::Float32)
    err = ccall((:KSPChebyshevEstEigSet,petscRealSingle),PetscErrorCode,(KSP{Float32},Float32,Float32,Float32,Float32),arg1,arg2,arg3,arg4,arg5)
    return err
end

#= skipping function with undefined symbols:
 function KSPChebyshevEstEigSetRandom(arg1::KSP{Float32},arg2::PetscRandom)
    ccall((:KSPChebyshevEstEigSetRandom,petscRealSingle),PetscErrorCode,(KSP{Float32},PetscRandom),arg1,arg2)
end
=#
function KSPChebyshevEstEigGetKSP(arg1::KSP{Float32},arg2::Union{Ptr{KSP{Float32}},StridedArray{KSP{Float32}},Ptr{KSP{Float32}},Ref{KSP{Float32}}})
    err = ccall((:KSPChebyshevEstEigGetKSP,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{KSP{Float32}}),arg1,arg2)
    return err
end

function KSPComputeExtremeSingularValues(arg1::KSP{Float32},arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:KSPComputeExtremeSingularValues,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3)
    return err
end

function KSPComputeEigenvalues(arg1::KSP{Float32},arg2::Integer,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:KSPComputeEigenvalues,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64,Ptr{Float32},Ptr{Float32},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function KSPComputeEigenvaluesExplicitly(arg1::KSP{Float32},arg2::Integer,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:KSPComputeEigenvaluesExplicitly,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64,Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4)
    return err
end

function KSPFCGSetMmax(arg1::KSP{Float32},arg2::Integer)
    err = ccall((:KSPFCGSetMmax,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64),arg1,arg2)
    return err
end

function KSPFCGGetMmax(arg1::KSP{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:KSPFCGGetMmax,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function KSPFCGSetNprealloc(arg1::KSP{Float32},arg2::Integer)
    err = ccall((:KSPFCGSetNprealloc,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64),arg1,arg2)
    return err
end

function KSPFCGGetNprealloc(arg1::KSP{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:KSPFCGGetNprealloc,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function KSPFCGSetTruncationType(arg1::KSP{Float32},arg2::KSPFCGTruncationType)
    err = ccall((:KSPFCGSetTruncationType,petscRealSingle),PetscErrorCode,(KSP{Float32},KSPFCGTruncationType),arg1,arg2)
    return err
end

function KSPFCGGetTruncationType(arg1::KSP{Float32},arg2::Union{Ptr{KSPFCGTruncationType},StridedArray{KSPFCGTruncationType},Ptr{KSPFCGTruncationType},Ref{KSPFCGTruncationType}})
    err = ccall((:KSPFCGGetTruncationType,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{KSPFCGTruncationType}),arg1,arg2)
    return err
end

function KSPGMRESSetRestart(arg1::KSP{Float32},arg2::Integer)
    err = ccall((:KSPGMRESSetRestart,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64),arg1,arg2)
    return err
end

function KSPGMRESGetRestart(arg1::KSP{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:KSPGMRESGetRestart,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function KSPGMRESSetHapTol(arg1::KSP{Float32},arg2::Float32)
    err = ccall((:KSPGMRESSetHapTol,petscRealSingle),PetscErrorCode,(KSP{Float32},Float32),arg1,arg2)
    return err
end

function KSPGMRESSetPreAllocateVectors(arg1::KSP{Float32})
    err = ccall((:KSPGMRESSetPreAllocateVectors,petscRealSingle),PetscErrorCode,(KSP{Float32},),arg1)
    return err
end

function KSPGMRESSetOrthogonalization(arg1::KSP{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPGMRESSetOrthogonalization,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Void}),arg1,arg2)
    return err
end

function KSPGMRESGetOrthogonalization(arg1::KSP{Float32},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:KSPGMRESGetOrthogonalization,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Ptr{Void}}),arg1,arg2)
    return err
end

function KSPGMRESModifiedGramSchmidtOrthogonalization(arg1::KSP{Float32},arg2::Integer)
    err = ccall((:KSPGMRESModifiedGramSchmidtOrthogonalization,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64),arg1,arg2)
    return err
end

function KSPGMRESClassicalGramSchmidtOrthogonalization(arg1::KSP{Float32},arg2::Integer)
    err = ccall((:KSPGMRESClassicalGramSchmidtOrthogonalization,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64),arg1,arg2)
    return err
end

function KSPLGMRESSetAugDim(arg1::KSP{Float32},arg2::Integer)
    err = ccall((:KSPLGMRESSetAugDim,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64),arg1,arg2)
    return err
end

function KSPLGMRESSetConstant(arg1::KSP{Float32})
    err = ccall((:KSPLGMRESSetConstant,petscRealSingle),PetscErrorCode,(KSP{Float32},),arg1)
    return err
end

function KSPGCRSetRestart(arg1::KSP{Float32},arg2::Integer)
    err = ccall((:KSPGCRSetRestart,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64),arg1,arg2)
    return err
end

function KSPGCRGetRestart(arg1::KSP{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:KSPGCRGetRestart,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function KSPGCRSetModifyPC(arg1::KSP{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPGCRSetModifyPC,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPGMRESSetCGSRefinementType(arg1::KSP{Float32},arg2::KSPGMRESCGSRefinementType)
    err = ccall((:KSPGMRESSetCGSRefinementType,petscRealSingle),PetscErrorCode,(KSP{Float32},KSPGMRESCGSRefinementType),arg1,arg2)
    return err
end

function KSPGMRESGetCGSRefinementType(arg1::KSP{Float32},arg2::Union{Ptr{KSPGMRESCGSRefinementType},StridedArray{KSPGMRESCGSRefinementType},Ptr{KSPGMRESCGSRefinementType},Ref{KSPGMRESCGSRefinementType}})
    err = ccall((:KSPGMRESGetCGSRefinementType,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{KSPGMRESCGSRefinementType}),arg1,arg2)
    return err
end

function KSPFGMRESModifyPCNoChange(arg1::KSP{Float32},arg2::Integer,arg3::Integer,arg4::Float32,arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPFGMRESModifyPCNoChange,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64,Int64,Float32,Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function KSPFGMRESModifyPCKSP(arg1::KSP{Float32},arg2::Integer,arg3::Integer,arg4::Float32,arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPFGMRESModifyPCKSP,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64,Int64,Float32,Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function KSPFGMRESSetModifyPC(arg1::KSP{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPFGMRESSetModifyPC,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPQCGSetTrustRegionRadius(arg1::KSP{Float32},arg2::Float32)
    err = ccall((:KSPQCGSetTrustRegionRadius,petscRealSingle),PetscErrorCode,(KSP{Float32},Float32),arg1,arg2)
    return err
end

function KSPQCGGetQuadratic(arg1::KSP{Float32},arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:KSPQCGGetQuadratic,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Float32}),arg1,arg2)
    return err
end

function KSPQCGGetTrialStepNorm(arg1::KSP{Float32},arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:KSPQCGGetTrialStepNorm,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Float32}),arg1,arg2)
    return err
end

function KSPBCGSLSetXRes(arg1::KSP{Float32},arg2::Float32)
    err = ccall((:KSPBCGSLSetXRes,petscRealSingle),PetscErrorCode,(KSP{Float32},Float32),arg1,arg2)
    return err
end

function KSPBCGSLSetPol(arg1::KSP{Float32},arg2::PetscBool)
    err = ccall((:KSPBCGSLSetPol,petscRealSingle),PetscErrorCode,(KSP{Float32},PetscBool),arg1,arg2)
    return err
end

function KSPBCGSLSetEll(arg1::KSP{Float32},arg2::Integer)
    err = ccall((:KSPBCGSLSetEll,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64),arg1,arg2)
    return err
end

function KSPBCGSLSetUsePseudoinverse(arg1::KSP{Float32},arg2::PetscBool)
    err = ccall((:KSPBCGSLSetUsePseudoinverse,petscRealSingle),PetscErrorCode,(KSP{Float32},PetscBool),arg1,arg2)
    return err
end

function KSPSetFromOptions(arg1::KSP{Float32})
    err = ccall((:KSPSetFromOptions,petscRealSingle),PetscErrorCode,(KSP{Float32},),arg1)
    return err
end

function KSPAddOptionsChecker(arg0::Type{Float32},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPAddOptionsChecker,petscRealSingle),PetscErrorCode,(Ptr{Void},),arg1)
    return err
end

function KSPMonitorSingularValue(arg1::KSP{Float32},arg2::Integer,arg3::Float32,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPMonitorSingularValue,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64,Float32,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPMonitorDefault(arg1::KSP{Float32},arg2::Integer,arg3::Float32,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPMonitorDefault,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64,Float32,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPLSQRMonitorDefault(arg1::KSP{Float32},arg2::Integer,arg3::Float32,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPLSQRMonitorDefault,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64,Float32,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPMonitorRange(arg1::KSP{Float32},arg2::Integer,arg3::Float32,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPMonitorRange,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64,Float32,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPMonitorDynamicTolerance(ksp::KSP{Float32},its::Integer,fnorm::Float32,dummy::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPMonitorDynamicTolerance,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64,Float32,Ptr{Void}),ksp,its,fnorm,dummy)
    return err
end

function KSPMonitorDynamicToleranceDestroy(arg0::Type{Float32},dummy::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:KSPMonitorDynamicToleranceDestroy,petscRealSingle),PetscErrorCode,(Ptr{Ptr{Void}},),dummy)
    return err
end

function KSPMonitorTrueResidualNorm(arg1::KSP{Float32},arg2::Integer,arg3::Float32,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPMonitorTrueResidualNorm,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64,Float32,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPMonitorTrueResidualMaxNorm(arg1::KSP{Float32},arg2::Integer,arg3::Float32,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPMonitorTrueResidualMaxNorm,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64,Float32,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPMonitorDefaultShort(arg1::KSP{Float32},arg2::Integer,arg3::Float32,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPMonitorDefaultShort,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64,Float32,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPMonitorSolution(arg1::KSP{Float32},arg2::Integer,arg3::Float32,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPMonitorSolution,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64,Float32,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPMonitorSAWs(arg1::KSP{Float32},arg2::Integer,arg3::Float32,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPMonitorSAWs,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64,Float32,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPMonitorSAWsCreate(arg1::KSP{Float32},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:KSPMonitorSAWsCreate,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Ptr{Void}}),arg1,arg2)
    return err
end

function KSPMonitorSAWsDestroy(arg0::Type{Float32},arg1::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:KSPMonitorSAWsDestroy,petscRealSingle),PetscErrorCode,(Ptr{Ptr{Void}},),arg1)
    return err
end

function KSPGMRESMonitorKrylov(arg1::KSP{Float32},arg2::Integer,arg3::Float32,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPGMRESMonitorKrylov,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64,Float32,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPUnwindPreconditioner(arg1::KSP{Float32},arg2::Vec{Float32},arg3::Vec{Float32})
    err = ccall((:KSPUnwindPreconditioner,petscRealSingle),PetscErrorCode,(KSP{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
    return err
end

function KSPInitialResidual(arg1::KSP{Float32},arg2::Vec{Float32},arg3::Vec{Float32},arg4::Vec{Float32},arg5::Vec{Float32},arg6::Vec{Float32})
    err = ccall((:KSPInitialResidual,petscRealSingle),PetscErrorCode,(KSP{Float32},Vec{Float32},Vec{Float32},Vec{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function KSPSetOperators(arg1::KSP{Float32},arg2::Mat{Float32},arg3::Mat{Float32})
    err = ccall((:KSPSetOperators,petscRealSingle),PetscErrorCode,(KSP{Float32},Mat{Float32},Mat{Float32}),arg1,arg2,arg3)
    return err
end

function KSPGetOperators(arg1::KSP{Float32},arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}},arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:KSPGetOperators,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Mat{Float32}},Ptr{Mat{Float32}}),arg1,arg2,arg3)
    return err
end

function KSPGetOperatorsSet(arg1::KSP{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:KSPGetOperatorsSet,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{PetscBool},Ptr{PetscBool}),arg1,arg2,arg3)
    return err
end

function KSPSetOptionsPrefix(arg1::KSP{Float32},arg2::Union{ByteString,Symbol})
    err = ccall((:KSPSetOptionsPrefix,petscRealSingle),PetscErrorCode,(KSP{Float32},Cstring),arg1,arg2)
    return err
end

function KSPAppendOptionsPrefix(arg1::KSP{Float32},arg2::Union{ByteString,Symbol})
    err = ccall((:KSPAppendOptionsPrefix,petscRealSingle),PetscErrorCode,(KSP{Float32},Cstring),arg1,arg2)
    return err
end

function KSPGetOptionsPrefix(arg1::KSP{Float32},arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    err = ccall((:KSPGetOptionsPrefix,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Ptr{UInt8}}),arg1,arg2)
    return err
end

function KSPSetTabLevel(arg1::KSP{Float32},arg2::Integer)
    err = ccall((:KSPSetTabLevel,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64),arg1,arg2)
    return err
end

function KSPGetTabLevel(arg1::KSP{Float32},arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    err = ccall((:KSPGetTabLevel,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Int64}),arg1,arg2)
    return err
end

function KSPSetDiagonalScale(arg1::KSP{Float32},arg2::PetscBool)
    err = ccall((:KSPSetDiagonalScale,petscRealSingle),PetscErrorCode,(KSP{Float32},PetscBool),arg1,arg2)
    return err
end

function KSPGetDiagonalScale(arg1::KSP{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:KSPGetDiagonalScale,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function KSPSetDiagonalScaleFix(arg1::KSP{Float32},arg2::PetscBool)
    err = ccall((:KSPSetDiagonalScaleFix,petscRealSingle),PetscErrorCode,(KSP{Float32},PetscBool),arg1,arg2)
    return err
end

function KSPGetDiagonalScaleFix(arg1::KSP{Float32},arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    err = ccall((:KSPGetDiagonalScaleFix,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{PetscBool}),arg1,arg2)
    return err
end

function KSPView(arg1::KSP{Float32},arg2::PetscViewer{Float32})
    err = ccall((:KSPView,petscRealSingle),PetscErrorCode,(KSP{Float32},PetscViewer{Float32}),arg1,arg2)
    return err
end

function KSPLoad(arg1::KSP{Float32},arg2::PetscViewer{Float32})
    err = ccall((:KSPLoad,petscRealSingle),PetscErrorCode,(KSP{Float32},PetscViewer{Float32}),arg1,arg2)
    return err
end

function KSPReasonViewFromOptions(arg1::KSP{Float32})
    err = ccall((:KSPReasonViewFromOptions,petscRealSingle),PetscErrorCode,(KSP{Float32},),arg1)
    return err
end

function KSPLSQRSetStandardErrorVec(arg1::KSP{Float32},arg2::Vec{Float32})
    err = ccall((:KSPLSQRSetStandardErrorVec,petscRealSingle),PetscErrorCode,(KSP{Float32},Vec{Float32}),arg1,arg2)
    return err
end

function KSPLSQRGetStandardErrorVec(arg1::KSP{Float32},arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    err = ccall((:KSPLSQRGetStandardErrorVec,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Vec{Float32}}),arg1,arg2)
    return err
end

function PCRedundantGetKSP(arg1::PC{Float32},arg2::Union{Ptr{KSP{Float32}},StridedArray{KSP{Float32}},Ptr{KSP{Float32}},Ref{KSP{Float32}}})
    err = ccall((:PCRedundantGetKSP,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{KSP{Float32}}),arg1,arg2)
    return err
end

function PCRedistributeGetKSP(arg1::PC{Float32},arg2::Union{Ptr{KSP{Float32}},StridedArray{KSP{Float32}},Ptr{KSP{Float32}},Ref{KSP{Float32}}})
    err = ccall((:PCRedistributeGetKSP,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{KSP{Float32}}),arg1,arg2)
    return err
end

function KSPSetNormType(arg1::KSP{Float32},arg2::KSPNormType)
    err = ccall((:KSPSetNormType,petscRealSingle),PetscErrorCode,(KSP{Float32},KSPNormType),arg1,arg2)
    return err
end

function KSPGetNormType(arg1::KSP{Float32},arg2::Union{Ptr{KSPNormType},StridedArray{KSPNormType},Ptr{KSPNormType},Ref{KSPNormType}})
    err = ccall((:KSPGetNormType,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{KSPNormType}),arg1,arg2)
    return err
end

function KSPSetSupportedNorm(ksp::KSP{Float32},arg1::KSPNormType,arg2::PCSide,arg3::Integer)
    err = ccall((:KSPSetSupportedNorm,petscRealSingle),PetscErrorCode,(KSP{Float32},KSPNormType,PCSide,Int64),ksp,arg1,arg2,arg3)
    return err
end

function KSPSetCheckNormIteration(arg1::KSP{Float32},arg2::Integer)
    err = ccall((:KSPSetCheckNormIteration,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64),arg1,arg2)
    return err
end

function KSPSetLagNorm(arg1::KSP{Float32},arg2::PetscBool)
    err = ccall((:KSPSetLagNorm,petscRealSingle),PetscErrorCode,(KSP{Float32},PetscBool),arg1,arg2)
    return err
end

function KSPSetConvergenceTest(arg1::KSP{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPSetConvergenceTest,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function KSPGetConvergenceContext(arg1::KSP{Float32},arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:KSPGetConvergenceContext,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Ptr{Void}}),arg1,arg2)
    return err
end

function KSPConvergedDefault(arg1::KSP{Float32},arg2::Integer,arg3::Float32,arg4::Union{Ptr{KSPConvergedReason},StridedArray{KSPConvergedReason},Ptr{KSPConvergedReason},Ref{KSPConvergedReason}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPConvergedDefault,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64,Float32,Ptr{KSPConvergedReason},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function KSPConvergedLSQR(arg1::KSP{Float32},arg2::Integer,arg3::Float32,arg4::Union{Ptr{KSPConvergedReason},StridedArray{KSPConvergedReason},Ptr{KSPConvergedReason},Ref{KSPConvergedReason}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPConvergedLSQR,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64,Float32,Ptr{KSPConvergedReason},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function KSPConvergedDefaultDestroy(arg0::Type{Float32},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPConvergedDefaultDestroy,petscRealSingle),PetscErrorCode,(Ptr{Void},),arg1)
    return err
end

function KSPConvergedDefaultCreate(arg0::Type{Float32},arg1::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:KSPConvergedDefaultCreate,petscRealSingle),PetscErrorCode,(Ptr{Ptr{Void}},),arg1)
    return err
end

function KSPConvergedDefaultSetUIRNorm(arg1::KSP{Float32})
    err = ccall((:KSPConvergedDefaultSetUIRNorm,petscRealSingle),PetscErrorCode,(KSP{Float32},),arg1)
    return err
end

function KSPConvergedDefaultSetUMIRNorm(arg1::KSP{Float32})
    err = ccall((:KSPConvergedDefaultSetUMIRNorm,petscRealSingle),PetscErrorCode,(KSP{Float32},),arg1)
    return err
end

function KSPConvergedSkip(arg1::KSP{Float32},arg2::Integer,arg3::Float32,arg4::Union{Ptr{KSPConvergedReason},StridedArray{KSPConvergedReason},Ptr{KSPConvergedReason},Ref{KSPConvergedReason}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPConvergedSkip,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64,Float32,Ptr{KSPConvergedReason},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function KSPGetConvergedReason(arg1::KSP{Float32},arg2::Union{Ptr{KSPConvergedReason},StridedArray{KSPConvergedReason},Ptr{KSPConvergedReason},Ref{KSPConvergedReason}})
    err = ccall((:KSPGetConvergedReason,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{KSPConvergedReason}),arg1,arg2)
    return err
end

function KSPCGSetType(arg1::KSP{Float32},arg2::KSPCGType)
    err = ccall((:KSPCGSetType,petscRealSingle),PetscErrorCode,(KSP{Float32},KSPCGType),arg1,arg2)
    return err
end

function KSPCGUseSingleReduction(arg1::KSP{Float32},arg2::PetscBool)
    err = ccall((:KSPCGUseSingleReduction,petscRealSingle),PetscErrorCode,(KSP{Float32},PetscBool),arg1,arg2)
    return err
end

function KSPNASHSetRadius(arg1::KSP{Float32},arg2::Float32)
    err = ccall((:KSPNASHSetRadius,petscRealSingle),PetscErrorCode,(KSP{Float32},Float32),arg1,arg2)
    return err
end

function KSPNASHGetNormD(arg1::KSP{Float32},arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:KSPNASHGetNormD,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Float32}),arg1,arg2)
    return err
end

function KSPNASHGetObjFcn(arg1::KSP{Float32},arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:KSPNASHGetObjFcn,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Float32}),arg1,arg2)
    return err
end

function KSPSTCGSetRadius(arg1::KSP{Float32},arg2::Float32)
    err = ccall((:KSPSTCGSetRadius,petscRealSingle),PetscErrorCode,(KSP{Float32},Float32),arg1,arg2)
    return err
end

function KSPSTCGGetNormD(arg1::KSP{Float32},arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:KSPSTCGGetNormD,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Float32}),arg1,arg2)
    return err
end

function KSPSTCGGetObjFcn(arg1::KSP{Float32},arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:KSPSTCGGetObjFcn,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Float32}),arg1,arg2)
    return err
end

function KSPGLTRSetRadius(arg1::KSP{Float32},arg2::Float32)
    err = ccall((:KSPGLTRSetRadius,petscRealSingle),PetscErrorCode,(KSP{Float32},Float32),arg1,arg2)
    return err
end

function KSPGLTRGetNormD(arg1::KSP{Float32},arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:KSPGLTRGetNormD,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Float32}),arg1,arg2)
    return err
end

function KSPGLTRGetObjFcn(arg1::KSP{Float32},arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:KSPGLTRGetObjFcn,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Float32}),arg1,arg2)
    return err
end

function KSPGLTRGetMinEig(arg1::KSP{Float32},arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:KSPGLTRGetMinEig,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Float32}),arg1,arg2)
    return err
end

function KSPGLTRGetLambda(arg1::KSP{Float32},arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:KSPGLTRGetLambda,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Float32}),arg1,arg2)
    return err
end

function KSPPythonSetType(arg1::KSP{Float32},arg2::Union{ByteString,Symbol})
    err = ccall((:KSPPythonSetType,petscRealSingle),PetscErrorCode,(KSP{Float32},Cstring),arg1,arg2)
    return err
end

function PCPreSolve(arg1::PC{Float32},arg2::KSP{Float32})
    err = ccall((:PCPreSolve,petscRealSingle),PetscErrorCode,(PC{Float32},KSP{Float32}),arg1,arg2)
    return err
end

function PCPostSolve(arg1::PC{Float32},arg2::KSP{Float32})
    err = ccall((:PCPostSolve,petscRealSingle),PetscErrorCode,(PC{Float32},KSP{Float32}),arg1,arg2)
    return err
end

#= skipping function with undefined symbols:
 function KSPMonitorLGResidualNormCreate(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{ByteString,Symbol},arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Union{Ptr{Ptr{PetscObject}},StridedArray{Ptr{PetscObject}},Ptr{Ptr{PetscObject}},Ref{Ptr{PetscObject}}})
    ccall((:KSPMonitorLGResidualNormCreate,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Cint,Cint,Cint,Cint,Ptr{Ptr{PetscObject}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
#= skipping function with undefined symbols:
 function KSPMonitorLGResidualNorm(arg1::KSP{Float32},arg2::Integer,arg3::Float32,arg4::Union{Ptr{PetscObject},StridedArray{PetscObject},Ptr{PetscObject},Ref{PetscObject}})
    ccall((:KSPMonitorLGResidualNorm,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64,Float32,Ptr{PetscObject}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function KSPMonitorLGResidualNormDestroy(arg0::Type{Float32},arg1::Union{Ptr{Ptr{PetscObject}},StridedArray{Ptr{PetscObject}},Ptr{Ptr{PetscObject}},Ref{Ptr{PetscObject}}})
    ccall((:KSPMonitorLGResidualNormDestroy,petscRealSingle),PetscErrorCode,(Ptr{Ptr{PetscObject}},),arg1)
end
=#
#= skipping function with undefined symbols:
 function KSPMonitorLGTrueResidualNormCreate(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{ByteString,Symbol},arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Union{Ptr{Ptr{PetscObject}},StridedArray{Ptr{PetscObject}},Ptr{Ptr{PetscObject}},Ref{Ptr{PetscObject}}})
    ccall((:KSPMonitorLGTrueResidualNormCreate,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Cint,Cint,Cint,Cint,Ptr{Ptr{PetscObject}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
#= skipping function with undefined symbols:
 function KSPMonitorLGTrueResidualNorm(arg1::KSP{Float32},arg2::Integer,arg3::Float32,arg4::Union{Ptr{PetscObject},StridedArray{PetscObject},Ptr{PetscObject},Ref{PetscObject}})
    ccall((:KSPMonitorLGTrueResidualNorm,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64,Float32,Ptr{PetscObject}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function KSPMonitorLGTrueResidualNormDestroy(arg0::Type{Float32},arg1::Union{Ptr{Ptr{PetscObject}},StridedArray{Ptr{PetscObject}},Ptr{Ptr{PetscObject}},Ref{Ptr{PetscObject}}})
    ccall((:KSPMonitorLGTrueResidualNormDestroy,petscRealSingle),PetscErrorCode,(Ptr{Ptr{PetscObject}},),arg1)
end
=#
function KSPMonitorLGRange(arg1::KSP{Float32},arg2::Integer,arg3::Float32,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPMonitorLGRange,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64,Float32,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

function PCShellSetPreSolve(arg1::PC{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCShellSetPreSolve,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Void}),arg1,arg2)
    return err
end

function PCShellSetPostSolve(arg1::PC{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:PCShellSetPostSolve,petscRealSingle),PetscErrorCode,(PC{Float32},Ptr{Void}),arg1,arg2)
    return err
end

#= skipping function with undefined symbols:
 function KSPFischerGuessCreate(arg1::KSP{Float32},arg2::Integer,arg3::Integer,arg4::Union{Ptr{KSPFischerGuess},StridedArray{KSPFischerGuess},Ptr{KSPFischerGuess},Ref{KSPFischerGuess}})
    ccall((:KSPFischerGuessCreate,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64,Int64,Ptr{KSPFischerGuess}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function KSPFischerGuessDestroy(arg0::Type{Float32},arg1::Union{Ptr{KSPFischerGuess},StridedArray{KSPFischerGuess},Ptr{KSPFischerGuess},Ref{KSPFischerGuess}})
    ccall((:KSPFischerGuessDestroy,petscRealSingle),PetscErrorCode,(Ptr{KSPFischerGuess},),arg1)
end
=#
#= skipping function with undefined symbols:
 function KSPFischerGuessReset(arg0::Type{Float32},arg1::KSPFischerGuess)
    ccall((:KSPFischerGuessReset,petscRealSingle),PetscErrorCode,(KSPFischerGuess,),arg1)
end
=#
#= skipping function with undefined symbols:
 function KSPFischerGuessUpdate(arg1::KSPFischerGuess,arg2::Vec{Float32})
    ccall((:KSPFischerGuessUpdate,petscRealSingle),PetscErrorCode,(KSPFischerGuess,Vec{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function KSPFischerGuessFormGuess(arg1::KSPFischerGuess,arg2::Vec{Float32},arg3::Vec{Float32})
    ccall((:KSPFischerGuessFormGuess,petscRealSingle),PetscErrorCode,(KSPFischerGuess,Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function KSPFischerGuessSetFromOptions(arg0::Type{Float32},arg1::KSPFischerGuess)
    ccall((:KSPFischerGuessSetFromOptions,petscRealSingle),PetscErrorCode,(KSPFischerGuess,),arg1)
end
=#
function KSPSetUseFischerGuess(arg1::KSP{Float32},arg2::Integer,arg3::Integer)
    err = ccall((:KSPSetUseFischerGuess,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64,Int64),arg1,arg2,arg3)
    return err
end

#= skipping function with undefined symbols:
 function KSPSetFischerGuess(arg1::KSP{Float32},arg2::KSPFischerGuess)
    ccall((:KSPSetFischerGuess,petscRealSingle),PetscErrorCode,(KSP{Float32},KSPFischerGuess),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function KSPGetFischerGuess(arg1::KSP{Float32},arg2::Union{Ptr{KSPFischerGuess},StridedArray{KSPFischerGuess},Ptr{KSPFischerGuess},Ref{KSPFischerGuess}})
    ccall((:KSPGetFischerGuess,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{KSPFischerGuess}),arg1,arg2)
end
=#
function MatCreateSchurComplement(arg1::Mat{Float32},arg2::Mat{Float32},arg3::Mat{Float32},arg4::Mat{Float32},arg5::Mat{Float32},arg6::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateSchurComplement,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},Mat{Float32},Mat{Float32},Mat{Float32},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatSchurComplementGetKSP(arg1::Mat{Float32},arg2::Union{Ptr{KSP{Float32}},StridedArray{KSP{Float32}},Ptr{KSP{Float32}},Ref{KSP{Float32}}})
    err = ccall((:MatSchurComplementGetKSP,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{KSP{Float32}}),arg1,arg2)
    return err
end

function MatSchurComplementSetKSP(arg1::Mat{Float32},arg2::KSP{Float32})
    err = ccall((:MatSchurComplementSetKSP,petscRealSingle),PetscErrorCode,(Mat{Float32},KSP{Float32}),arg1,arg2)
    return err
end

function MatSchurComplementSetSubMatrices(arg1::Mat{Float32},arg2::Mat{Float32},arg3::Mat{Float32},arg4::Mat{Float32},arg5::Mat{Float32},arg6::Mat{Float32})
    err = ccall((:MatSchurComplementSetSubMatrices,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},Mat{Float32},Mat{Float32},Mat{Float32},Mat{Float32}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatSchurComplementUpdateSubMatrices(arg1::Mat{Float32},arg2::Mat{Float32},arg3::Mat{Float32},arg4::Mat{Float32},arg5::Mat{Float32},arg6::Mat{Float32})
    err = ccall((:MatSchurComplementUpdateSubMatrices,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},Mat{Float32},Mat{Float32},Mat{Float32},Mat{Float32}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatSchurComplementGetSubMatrices(arg1::Mat{Float32},arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}},arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}},arg4::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}},arg5::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}},arg6::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatSchurComplementGetSubMatrices,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Mat{Float32}},Ptr{Mat{Float32}},Ptr{Mat{Float32}},Ptr{Mat{Float32}},Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatSchurComplementSetAinvType(arg1::Mat{Float32},arg2::MatSchurComplementAinvType)
    err = ccall((:MatSchurComplementSetAinvType,petscRealSingle),PetscErrorCode,(Mat{Float32},MatSchurComplementAinvType),arg1,arg2)
    return err
end

function MatSchurComplementGetAinvType(arg1::Mat{Float32},arg2::Union{Ptr{MatSchurComplementAinvType},StridedArray{MatSchurComplementAinvType},Ptr{MatSchurComplementAinvType},Ref{MatSchurComplementAinvType}})
    err = ccall((:MatSchurComplementGetAinvType,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{MatSchurComplementAinvType}),arg1,arg2)
    return err
end

function MatSchurComplementGetPmat(arg1::Mat{Float32},arg2::MatReuse,arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatSchurComplementGetPmat,petscRealSingle),PetscErrorCode,(Mat{Float32},MatReuse,Ptr{Mat{Float32}}),arg1,arg2,arg3)
    return err
end

function MatSchurComplementComputeExplicitOperator(arg1::Mat{Float32},arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatSchurComplementComputeExplicitOperator,petscRealSingle),PetscErrorCode,(Mat{Float32},Ptr{Mat{Float32}}),arg1,arg2)
    return err
end

function MatGetSchurComplement(arg1::Mat{Float32},arg2::IS{Float32},arg3::IS{Float32},arg4::IS{Float32},arg5::IS{Float32},arg6::MatReuse,arg7::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}},arg8::MatSchurComplementAinvType,arg9::MatReuse,arg10::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatGetSchurComplement,petscRealSingle),PetscErrorCode,(Mat{Float32},IS{Float32},IS{Float32},IS{Float32},IS{Float32},MatReuse,Ptr{Mat{Float32}},MatSchurComplementAinvType,MatReuse,Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
    return err
end

function MatCreateSchurComplementPmat(arg1::Mat{Float32},arg2::Mat{Float32},arg3::Mat{Float32},arg4::Mat{Float32},arg5::MatSchurComplementAinvType,arg6::MatReuse,arg7::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    err = ccall((:MatCreateSchurComplementPmat,petscRealSingle),PetscErrorCode,(Mat{Float32},Mat{Float32},Mat{Float32},Mat{Float32},MatSchurComplementAinvType,MatReuse,Ptr{Mat{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

#= skipping function with undefined symbols:
 function KSPSetDM(arg1::KSP{Float32},arg2::DM)
    ccall((:KSPSetDM,petscRealSingle),PetscErrorCode,(KSP{Float32},DM),arg1,arg2)
end
=#
function KSPSetDMActive(arg1::KSP{Float32},arg2::PetscBool)
    err = ccall((:KSPSetDMActive,petscRealSingle),PetscErrorCode,(KSP{Float32},PetscBool),arg1,arg2)
    return err
end

#= skipping function with undefined symbols:
 function KSPGetDM(arg1::KSP{Float32},arg2::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:KSPGetDM,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{DM}),arg1,arg2)
end
=#
function KSPSetApplicationContext(arg1::KSP{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPSetApplicationContext,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Void}),arg1,arg2)
    return err
end

function KSPGetApplicationContext(arg1::KSP{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPGetApplicationContext,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Void}),arg1,arg2)
    return err
end

function KSPSetComputeRHS(arg1::KSP{Float32},func::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPSetComputeRHS,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Void},Ptr{Void}),arg1,func,arg2)
    return err
end

function KSPSetComputeOperators(arg1::KSP{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPSetComputeOperators,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

function KSPSetComputeInitialGuess(arg1::KSP{Float32},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPSetComputeInitialGuess,petscRealSingle),PetscErrorCode,(KSP{Float32},Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
    return err
end

#= skipping function with undefined symbols:
 function DMKSPSetComputeOperators(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMKSPSetComputeOperators,petscRealSingle),PetscErrorCode,(DM,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMKSPGetComputeOperators(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMKSPGetComputeOperators,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{Void}},Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMKSPSetComputeRHS(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMKSPSetComputeRHS,petscRealSingle),PetscErrorCode,(DM,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMKSPGetComputeRHS(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMKSPGetComputeRHS,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{Void}},Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMKSPSetComputeInitialGuess(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMKSPSetComputeInitialGuess,petscRealSingle),PetscErrorCode,(DM,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMKSPGetComputeInitialGuess(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMKSPGetComputeInitialGuess,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{Void}},Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMGlobalToLocalSolve(arg1::DM,arg2::Vec{Float32},arg3::Vec{Float32})
    ccall((:DMGlobalToLocalSolve,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMPlexProjectField(arg1::DM,arg2::Vec{Float32},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::InsertMode,arg5::Vec{Float32})
    ccall((:DMPlexProjectField,petscRealSingle),PetscErrorCode,(DM,Vec{Float32},Ptr{Ptr{Void}},InsertMode,Vec{Float32}),arg1,arg2,arg3,arg4,arg5)
end
=#
function SNESInitializePackage(arg0::Type{Float32})
    err = ccall((:SNESInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

#= skipping function with undefined symbols:
 function SNESCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{SNES},StridedArray{SNES},Ptr{SNES},Ref{SNES}})
    ccall((:SNESCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{SNES}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESReset(arg0::Type{Float32},arg1::SNES)
    ccall((:SNESReset,petscRealSingle),PetscErrorCode,(SNES,),arg1)
end
=#
#= skipping function with undefined symbols:
 function SNESDestroy(arg0::Type{Float32},arg1::Union{Ptr{SNES},StridedArray{SNES},Ptr{SNES},Ref{SNES}})
    ccall((:SNESDestroy,petscRealSingle),PetscErrorCode,(Ptr{SNES},),arg1)
end
=#
#= skipping function with undefined symbols:
 function SNESSetType(arg0::Type{Float32},arg1::SNES,arg2::SNESType)
    ccall((:SNESSetType,petscRealSingle),PetscErrorCode,(SNES,Cstring),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESMonitor(arg0::Type{Float32},arg1::SNES,arg2::Integer,arg3::Float32)
    ccall((:SNESMonitor,petscRealSingle),PetscErrorCode,(SNES,Int64,Float32),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function SNESMonitorSet(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:SNESMonitorSet,petscRealSingle),PetscErrorCode,(SNES,Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function SNESMonitorCancel(arg0::Type{Float32},arg1::SNES)
    ccall((:SNESMonitorCancel,petscRealSingle),PetscErrorCode,(SNES,),arg1)
end
=#
#= skipping function with undefined symbols:
 function SNESMonitorSAWs(arg0::Type{Float32},arg1::SNES,arg2::Integer,arg3::Float32,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:SNESMonitorSAWs,petscRealSingle),PetscErrorCode,(SNES,Int64,Float32,Ptr{Void}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function SNESMonitorSAWsCreate(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    ccall((:SNESMonitorSAWsCreate,petscRealSingle),PetscErrorCode,(SNES,Ptr{Ptr{Void}}),arg1,arg2)
end
=#
function SNESMonitorSAWsDestroy(arg0::Type{Float32},arg1::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:SNESMonitorSAWsDestroy,petscRealSingle),PetscErrorCode,(Ptr{Ptr{Void}},),arg1)
    return err
end

#= skipping function with undefined symbols:
 function SNESSetConvergenceHistory(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Integer,arg5::PetscBool)
    ccall((:SNESSetConvergenceHistory,petscRealSingle),PetscErrorCode,(SNES,Ptr{Float32},Ptr{Int64},Int64,PetscBool),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function SNESGetConvergenceHistory(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:SNESGetConvergenceHistory,petscRealSingle),PetscErrorCode,(SNES,Ptr{Ptr{Float32}},Ptr{Ptr{Int64}},Ptr{Int64}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function SNESSetUp(arg0::Type{Float32},arg1::SNES)
    ccall((:SNESSetUp,petscRealSingle),PetscErrorCode,(SNES,),arg1)
end
=#
#= skipping function with undefined symbols:
 function SNESSolve(arg1::SNES,arg2::Vec{Float32},arg3::Vec{Float32})
    ccall((:SNESSolve,petscRealSingle),PetscErrorCode,(SNES,Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function SNESSetErrorIfNotConverged(arg0::Type{Float32},arg1::SNES,arg2::PetscBool)
    ccall((:SNESSetErrorIfNotConverged,petscRealSingle),PetscErrorCode,(SNES,PetscBool),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESGetErrorIfNotConverged(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:SNESGetErrorIfNotConverged,petscRealSingle),PetscErrorCode,(SNES,Ptr{PetscBool}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESSetWorkVecs(arg0::Type{Float32},arg1::SNES,arg2::Integer)
    ccall((:SNESSetWorkVecs,petscRealSingle),PetscErrorCode,(SNES,Int64),arg1,arg2)
end
=#
function SNESAddOptionsChecker(arg0::Type{Float32},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESAddOptionsChecker,petscRealSingle),PetscErrorCode,(Ptr{Void},),arg1)
    return err
end

#= skipping function with undefined symbols:
 function SNESSetUpdate(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:SNESSetUpdate,petscRealSingle),PetscErrorCode,(SNES,Ptr{Void}),arg1,arg2)
end
=#
function SNESRegister(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

#= skipping function with undefined symbols:
 function SNESGetKSP(arg1::SNES,arg2::Union{Ptr{KSP{Float32}},StridedArray{KSP{Float32}},Ptr{KSP{Float32}},Ref{KSP{Float32}}})
    ccall((:SNESGetKSP,petscRealSingle),PetscErrorCode,(SNES,Ptr{KSP{Float32}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESSetKSP(arg1::SNES,arg2::KSP{Float32})
    ccall((:SNESSetKSP,petscRealSingle),PetscErrorCode,(SNES,KSP{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESSetSolution(arg1::SNES,arg2::Vec{Float32})
    ccall((:SNESSetSolution,petscRealSingle),PetscErrorCode,(SNES,Vec{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESGetSolution(arg1::SNES,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    ccall((:SNESGetSolution,petscRealSingle),PetscErrorCode,(SNES,Ptr{Vec{Float32}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESGetSolutionUpdate(arg1::SNES,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    ccall((:SNESGetSolutionUpdate,petscRealSingle),PetscErrorCode,(SNES,Ptr{Vec{Float32}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESGetRhs(arg1::SNES,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    ccall((:SNESGetRhs,petscRealSingle),PetscErrorCode,(SNES,Ptr{Vec{Float32}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESView(arg1::SNES,arg2::PetscViewer{Float32})
    ccall((:SNESView,petscRealSingle),PetscErrorCode,(SNES,PetscViewer{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESLoad(arg1::SNES,arg2::PetscViewer{Float32})
    ccall((:SNESLoad,petscRealSingle),PetscErrorCode,(SNES,PetscViewer{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESReasonViewFromOptions(arg0::Type{Float32},arg1::SNES)
    ccall((:SNESReasonViewFromOptions,petscRealSingle),PetscErrorCode,(SNES,),arg1)
end
=#
#= skipping function with undefined symbols:
 function SNESSetOptionsPrefix(arg0::Type{Float32},arg1::SNES,arg2::Union{ByteString,Symbol})
    ccall((:SNESSetOptionsPrefix,petscRealSingle),PetscErrorCode,(SNES,Cstring),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESAppendOptionsPrefix(arg0::Type{Float32},arg1::SNES,arg2::Union{ByteString,Symbol})
    ccall((:SNESAppendOptionsPrefix,petscRealSingle),PetscErrorCode,(SNES,Cstring),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESGetOptionsPrefix(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    ccall((:SNESGetOptionsPrefix,petscRealSingle),PetscErrorCode,(SNES,Ptr{Ptr{UInt8}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESSetFromOptions(arg0::Type{Float32},arg1::SNES)
    ccall((:SNESSetFromOptions,petscRealSingle),PetscErrorCode,(SNES,),arg1)
end
=#
#= skipping function with undefined symbols:
 function MatCreateSNESMF(arg1::SNES,arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    ccall((:MatCreateSNESMF,petscRealSingle),PetscErrorCode,(SNES,Ptr{Mat{Float32}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function MatMFFDComputeJacobian(arg1::SNES,arg2::Vec{Float32},arg3::Mat{Float32},arg4::Mat{Float32},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:MatMFFDComputeJacobian,petscRealSingle),PetscErrorCode,(SNES,Vec{Float32},Mat{Float32},Mat{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function MatDAADSetSNES(arg1::Mat{Float32},arg2::SNES)
    ccall((:MatDAADSetSNES,petscRealSingle),PetscErrorCode,(Mat{Float32},SNES),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESGetType(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{SNESType},StridedArray{SNESType},Ptr{SNESType},Ref{SNESType}})
    ccall((:SNESGetType,petscRealSingle),PetscErrorCode,(SNES,Ptr{Ptr{UInt8}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESMonitorDefault(arg0::Type{Float32},arg1::SNES,arg2::Integer,arg3::Float32,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:SNESMonitorDefault,petscRealSingle),PetscErrorCode,(SNES,Int64,Float32,Ptr{Void}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function SNESMonitorRange(arg0::Type{Float32},arg1::SNES,arg2::Integer,arg3::Float32,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:SNESMonitorRange,petscRealSingle),PetscErrorCode,(SNES,Int64,Float32,Ptr{Void}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function SNESMonitorRatio(arg0::Type{Float32},arg1::SNES,arg2::Integer,arg3::Float32,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:SNESMonitorRatio,petscRealSingle),PetscErrorCode,(SNES,Int64,Float32,Ptr{Void}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function SNESMonitorSetRatio(arg1::SNES,arg2::PetscViewer{Float32})
    ccall((:SNESMonitorSetRatio,petscRealSingle),PetscErrorCode,(SNES,PetscViewer{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESMonitorSolution(arg0::Type{Float32},arg1::SNES,arg2::Integer,arg3::Float32,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:SNESMonitorSolution,petscRealSingle),PetscErrorCode,(SNES,Int64,Float32,Ptr{Void}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function SNESMonitorResidual(arg0::Type{Float32},arg1::SNES,arg2::Integer,arg3::Float32,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:SNESMonitorResidual,petscRealSingle),PetscErrorCode,(SNES,Int64,Float32,Ptr{Void}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function SNESMonitorSolutionUpdate(arg0::Type{Float32},arg1::SNES,arg2::Integer,arg3::Float32,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:SNESMonitorSolutionUpdate,petscRealSingle),PetscErrorCode,(SNES,Int64,Float32,Ptr{Void}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function SNESMonitorDefaultShort(arg0::Type{Float32},arg1::SNES,arg2::Integer,arg3::Float32,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:SNESMonitorDefaultShort,petscRealSingle),PetscErrorCode,(SNES,Int64,Float32,Ptr{Void}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function SNESMonitorDefaultField(arg0::Type{Float32},arg1::SNES,arg2::Integer,arg3::Float32,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:SNESMonitorDefaultField,petscRealSingle),PetscErrorCode,(SNES,Int64,Float32,Ptr{Void}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function SNESMonitorJacUpdateSpectrum(arg0::Type{Float32},arg1::SNES,arg2::Integer,arg3::Float32,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:SNESMonitorJacUpdateSpectrum,petscRealSingle),PetscErrorCode,(SNES,Int64,Float32,Ptr{Void}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function SNESMonitorFields(arg0::Type{Float32},arg1::SNES,arg2::Integer,arg3::Float32,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:SNESMonitorFields,petscRealSingle),PetscErrorCode,(SNES,Int64,Float32,Ptr{Void}),arg1,arg2,arg3,arg4)
end
=#
function KSPMonitorSNES(arg1::KSP{Float32},arg2::Integer,arg3::Float32,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:KSPMonitorSNES,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64,Float32,Ptr{Void}),arg1,arg2,arg3,arg4)
    return err
end

#= skipping function with undefined symbols:
 function KSPMonitorSNESLGResidualNormCreate(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{ByteString,Symbol},arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Union{Ptr{Ptr{PetscObject}},StridedArray{Ptr{PetscObject}},Ptr{Ptr{PetscObject}},Ref{Ptr{PetscObject}}})
    ccall((:KSPMonitorSNESLGResidualNormCreate,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Cint,Cint,Cint,Cint,Ptr{Ptr{PetscObject}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
#= skipping function with undefined symbols:
 function KSPMonitorSNESLGResidualNorm(arg1::KSP{Float32},arg2::Integer,arg3::Float32,arg4::Union{Ptr{PetscObject},StridedArray{PetscObject},Ptr{PetscObject},Ref{PetscObject}})
    ccall((:KSPMonitorSNESLGResidualNorm,petscRealSingle),PetscErrorCode,(KSP{Float32},Int64,Float32,Ptr{PetscObject}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function KSPMonitorSNESLGResidualNormDestroy(arg0::Type{Float32},arg1::Union{Ptr{Ptr{PetscObject}},StridedArray{Ptr{PetscObject}},Ptr{Ptr{PetscObject}},Ref{Ptr{PetscObject}}})
    ccall((:KSPMonitorSNESLGResidualNormDestroy,petscRealSingle),PetscErrorCode,(Ptr{Ptr{PetscObject}},),arg1)
end
=#
#= skipping function with undefined symbols:
 function SNESSetTolerances(arg0::Type{Float32},arg1::SNES,arg2::Float32,arg3::Float32,arg4::Float32,arg5::Integer,arg6::Integer)
    ccall((:SNESSetTolerances,petscRealSingle),PetscErrorCode,(SNES,Float32,Float32,Float32,Int64,Int64),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
#= skipping function with undefined symbols:
 function SNESGetTolerances(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:SNESGetTolerances,petscRealSingle),PetscErrorCode,(SNES,Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
#= skipping function with undefined symbols:
 function SNESSetTrustRegionTolerance(arg0::Type{Float32},arg1::SNES,arg2::Float32)
    ccall((:SNESSetTrustRegionTolerance,petscRealSingle),PetscErrorCode,(SNES,Float32),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESGetIterationNumber(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:SNESGetIterationNumber,petscRealSingle),PetscErrorCode,(SNES,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESSetIterationNumber(arg0::Type{Float32},arg1::SNES,arg2::Integer)
    ccall((:SNESSetIterationNumber,petscRealSingle),PetscErrorCode,(SNES,Int64),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESGetNonlinearStepFailures(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:SNESGetNonlinearStepFailures,petscRealSingle),PetscErrorCode,(SNES,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESSetMaxNonlinearStepFailures(arg0::Type{Float32},arg1::SNES,arg2::Integer)
    ccall((:SNESSetMaxNonlinearStepFailures,petscRealSingle),PetscErrorCode,(SNES,Int64),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESGetMaxNonlinearStepFailures(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:SNESGetMaxNonlinearStepFailures,petscRealSingle),PetscErrorCode,(SNES,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESGetNumberFunctionEvals(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:SNESGetNumberFunctionEvals,petscRealSingle),PetscErrorCode,(SNES,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESSetLagPreconditioner(arg0::Type{Float32},arg1::SNES,arg2::Integer)
    ccall((:SNESSetLagPreconditioner,petscRealSingle),PetscErrorCode,(SNES,Int64),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESGetLagPreconditioner(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:SNESGetLagPreconditioner,petscRealSingle),PetscErrorCode,(SNES,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESSetLagJacobian(arg0::Type{Float32},arg1::SNES,arg2::Integer)
    ccall((:SNESSetLagJacobian,petscRealSingle),PetscErrorCode,(SNES,Int64),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESGetLagJacobian(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:SNESGetLagJacobian,petscRealSingle),PetscErrorCode,(SNES,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESSetLagPreconditionerPersists(arg0::Type{Float32},arg1::SNES,arg2::PetscBool)
    ccall((:SNESSetLagPreconditionerPersists,petscRealSingle),PetscErrorCode,(SNES,PetscBool),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESSetLagJacobianPersists(arg0::Type{Float32},arg1::SNES,arg2::PetscBool)
    ccall((:SNESSetLagJacobianPersists,petscRealSingle),PetscErrorCode,(SNES,PetscBool),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESSetGridSequence(arg0::Type{Float32},arg1::SNES,arg2::Integer)
    ccall((:SNESSetGridSequence,petscRealSingle),PetscErrorCode,(SNES,Int64),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESGetGridSequence(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:SNESGetGridSequence,petscRealSingle),PetscErrorCode,(SNES,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESGetLinearSolveIterations(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:SNESGetLinearSolveIterations,petscRealSingle),PetscErrorCode,(SNES,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESGetLinearSolveFailures(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:SNESGetLinearSolveFailures,petscRealSingle),PetscErrorCode,(SNES,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESSetMaxLinearSolveFailures(arg0::Type{Float32},arg1::SNES,arg2::Integer)
    ccall((:SNESSetMaxLinearSolveFailures,petscRealSingle),PetscErrorCode,(SNES,Int64),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESGetMaxLinearSolveFailures(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:SNESGetMaxLinearSolveFailures,petscRealSingle),PetscErrorCode,(SNES,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESSetCountersReset(arg0::Type{Float32},arg1::SNES,arg2::PetscBool)
    ccall((:SNESSetCountersReset,petscRealSingle),PetscErrorCode,(SNES,PetscBool),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESKSPSetUseEW(arg0::Type{Float32},arg1::SNES,arg2::PetscBool)
    ccall((:SNESKSPSetUseEW,petscRealSingle),PetscErrorCode,(SNES,PetscBool),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESKSPGetUseEW(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:SNESKSPGetUseEW,petscRealSingle),PetscErrorCode,(SNES,Ptr{PetscBool}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESKSPSetParametersEW(arg0::Type{Float32},arg1::SNES,arg2::Integer,arg3::Float32,arg4::Float32,arg5::Float32,arg6::Float32,arg7::Float32,arg8::Float32)
    ccall((:SNESKSPSetParametersEW,petscRealSingle),PetscErrorCode,(SNES,Int64,Float32,Float32,Float32,Float32,Float32,Float32),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
end
=#
#= skipping function with undefined symbols:
 function SNESKSPGetParametersEW(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg8::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:SNESKSPGetParametersEW,petscRealSingle),PetscErrorCode,(SNES,Ptr{Int64},Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
end
=#
#= skipping function with undefined symbols:
 function SNESMonitorLGCreate(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{ByteString,Symbol},arg3::Integer,arg4::Integer,arg5::Integer,arg6::Integer,arg7::Union{Ptr{Ptr{PetscObject}},StridedArray{Ptr{PetscObject}},Ptr{Ptr{PetscObject}},Ref{Ptr{PetscObject}}})
    ccall((:SNESMonitorLGCreate,petscRealSingle),PetscErrorCode,(Cstring,Cstring,Cint,Cint,Cint,Cint,Ptr{Ptr{PetscObject}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
#= skipping function with undefined symbols:
 function SNESMonitorLGResidualNorm(arg0::Type{Float32},arg1::SNES,arg2::Integer,arg3::Float32,arg4::Union{Ptr{PetscObject},StridedArray{PetscObject},Ptr{PetscObject},Ref{PetscObject}})
    ccall((:SNESMonitorLGResidualNorm,petscRealSingle),PetscErrorCode,(SNES,Int64,Float32,Ptr{PetscObject}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function SNESMonitorLGDestroy(arg0::Type{Float32},arg1::Union{Ptr{Ptr{PetscObject}},StridedArray{Ptr{PetscObject}},Ptr{Ptr{PetscObject}},Ref{Ptr{PetscObject}}})
    ccall((:SNESMonitorLGDestroy,petscRealSingle),PetscErrorCode,(Ptr{Ptr{PetscObject}},),arg1)
end
=#
#= skipping function with undefined symbols:
 function SNESMonitorLGRange(arg0::Type{Float32},arg1::SNES,arg2::Integer,arg3::Float32,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:SNESMonitorLGRange,petscRealSingle),PetscErrorCode,(SNES,Int64,Float32,Ptr{Void}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function SNESSetApplicationContext(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:SNESSetApplicationContext,petscRealSingle),PetscErrorCode,(SNES,Ptr{Void}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESGetApplicationContext(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:SNESGetApplicationContext,petscRealSingle),PetscErrorCode,(SNES,Ptr{Void}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESSetComputeApplicationContext(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:SNESSetComputeApplicationContext,petscRealSingle),PetscErrorCode,(SNES,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function SNESPythonSetType(arg0::Type{Float32},arg1::SNES,arg2::Union{ByteString,Symbol})
    ccall((:SNESPythonSetType,petscRealSingle),PetscErrorCode,(SNES,Cstring),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESSetFunctionDomainError(arg0::Type{Float32},arg1::SNES)
    ccall((:SNESSetFunctionDomainError,petscRealSingle),PetscErrorCode,(SNES,),arg1)
end
=#
#= skipping function with undefined symbols:
 function SNESGetFunctionDomainError(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:SNESGetFunctionDomainError,petscRealSingle),PetscErrorCode,(SNES,Ptr{PetscBool}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESSetConvergenceTest(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:SNESSetConvergenceTest,petscRealSingle),PetscErrorCode,(SNES,Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function SNESConvergedDefault(arg0::Type{Float32},arg1::SNES,arg2::Integer,arg3::Float32,arg4::Float32,arg5::Float32,arg6::Union{Ptr{SNESConvergedReason},StridedArray{SNESConvergedReason},Ptr{SNESConvergedReason},Ref{SNESConvergedReason}},arg7::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:SNESConvergedDefault,petscRealSingle),PetscErrorCode,(SNES,Int64,Float32,Float32,Float32,Ptr{SNESConvergedReason},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
#= skipping function with undefined symbols:
 function SNESConvergedSkip(arg0::Type{Float32},arg1::SNES,arg2::Integer,arg3::Float32,arg4::Float32,arg5::Float32,arg6::Union{Ptr{SNESConvergedReason},StridedArray{SNESConvergedReason},Ptr{SNESConvergedReason},Ref{SNESConvergedReason}},arg7::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:SNESConvergedSkip,petscRealSingle),PetscErrorCode,(SNES,Int64,Float32,Float32,Float32,Ptr{SNESConvergedReason},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
#= skipping function with undefined symbols:
 function SNESGetConvergedReason(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{SNESConvergedReason},StridedArray{SNESConvergedReason},Ptr{SNESConvergedReason},Ref{SNESConvergedReason}})
    ccall((:SNESGetConvergedReason,petscRealSingle),PetscErrorCode,(SNES,Ptr{SNESConvergedReason}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESGetFunction(arg1::SNES,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    ccall((:SNESGetFunction,petscRealSingle),PetscErrorCode,(SNES,Ptr{Vec{Float32}},Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function SNESComputeFunction(arg1::SNES,arg2::Vec{Float32},arg3::Vec{Float32})
    ccall((:SNESComputeFunction,petscRealSingle),PetscErrorCode,(SNES,Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function SNESSetJacobian(arg1::SNES,arg2::Mat{Float32},arg3::Mat{Float32},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:SNESSetJacobian,petscRealSingle),PetscErrorCode,(SNES,Mat{Float32},Mat{Float32},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function SNESGetJacobian(arg1::SNES,arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}},arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}},arg4::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg5::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    ccall((:SNESGetJacobian,petscRealSingle),PetscErrorCode,(SNES,Ptr{Mat{Float32}},Ptr{Mat{Float32}},Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function SNESObjectiveComputeFunctionDefaultFD(arg1::SNES,arg2::Vec{Float32},arg3::Vec{Float32},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:SNESObjectiveComputeFunctionDefaultFD,petscRealSingle),PetscErrorCode,(SNES,Vec{Float32},Vec{Float32},Ptr{Void}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function SNESComputeJacobianDefault(arg1::SNES,arg2::Vec{Float32},arg3::Mat{Float32},arg4::Mat{Float32},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:SNESComputeJacobianDefault,petscRealSingle),PetscErrorCode,(SNES,Vec{Float32},Mat{Float32},Mat{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function SNESComputeJacobianDefaultColor(arg1::SNES,arg2::Vec{Float32},arg3::Mat{Float32},arg4::Mat{Float32},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:SNESComputeJacobianDefaultColor,petscRealSingle),PetscErrorCode,(SNES,Vec{Float32},Mat{Float32},Mat{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function SNESSetComputeInitialGuess(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:SNESSetComputeInitialGuess,petscRealSingle),PetscErrorCode,(SNES,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function SNESSetPicard(arg1::SNES,arg2::Vec{Float32},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Mat{Float32},arg5::Mat{Float32},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg7::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:SNESSetPicard,petscRealSingle),PetscErrorCode,(SNES,Vec{Float32},Ptr{Void},Mat{Float32},Mat{Float32},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
#= skipping function with undefined symbols:
 function SNESGetPicard(arg1::SNES,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}},arg5::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}},arg6::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg7::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    ccall((:SNESGetPicard,petscRealSingle),PetscErrorCode,(SNES,Ptr{Vec{Float32}},Ptr{Ptr{Void}},Ptr{Mat{Float32}},Ptr{Mat{Float32}},Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
#= skipping function with undefined symbols:
 function SNESSetInitialFunction(arg1::SNES,arg2::Vec{Float32})
    ccall((:SNESSetInitialFunction,petscRealSingle),PetscErrorCode,(SNES,Vec{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESSetObjective(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:SNESSetObjective,petscRealSingle),PetscErrorCode,(SNES,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function SNESGetObjective(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    ccall((:SNESGetObjective,petscRealSingle),PetscErrorCode,(SNES,Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function SNESComputeObjective(arg1::SNES,arg2::Vec{Float32},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:SNESComputeObjective,petscRealSingle),PetscErrorCode,(SNES,Vec{Float32},Ptr{Float32}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function SNESSetNormSchedule(arg0::Type{Float32},arg1::SNES,arg2::SNESNormSchedule)
    ccall((:SNESSetNormSchedule,petscRealSingle),PetscErrorCode,(SNES,SNESNormSchedule),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESGetNormSchedule(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{SNESNormSchedule},StridedArray{SNESNormSchedule},Ptr{SNESNormSchedule},Ref{SNESNormSchedule}})
    ccall((:SNESGetNormSchedule,petscRealSingle),PetscErrorCode,(SNES,Ptr{SNESNormSchedule}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESSetFunctionType(arg0::Type{Float32},arg1::SNES,arg2::SNESFunctionType)
    ccall((:SNESSetFunctionType,petscRealSingle),PetscErrorCode,(SNES,SNESFunctionType),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESGetFunctionType(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{SNESFunctionType},StridedArray{SNESFunctionType},Ptr{SNESFunctionType},Ref{SNESFunctionType}})
    ccall((:SNESGetFunctionType,petscRealSingle),PetscErrorCode,(SNES,Ptr{SNESFunctionType}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESSetNGS(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:SNESSetNGS,petscRealSingle),PetscErrorCode,(SNES,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function SNESGetNGS(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    ccall((:SNESGetNGS,petscRealSingle),PetscErrorCode,(SNES,Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function SNESSetUseNGS(arg0::Type{Float32},arg1::SNES,arg2::PetscBool)
    ccall((:SNESSetUseNGS,petscRealSingle),PetscErrorCode,(SNES,PetscBool),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESGetUseNGS(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:SNESGetUseNGS,petscRealSingle),PetscErrorCode,(SNES,Ptr{PetscBool}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESComputeNGS(arg1::SNES,arg2::Vec{Float32},arg3::Vec{Float32})
    ccall((:SNESComputeNGS,petscRealSingle),PetscErrorCode,(SNES,Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function SNESNGSSetSweeps(arg0::Type{Float32},arg1::SNES,arg2::Integer)
    ccall((:SNESNGSSetSweeps,petscRealSingle),PetscErrorCode,(SNES,Int64),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESNGSGetSweeps(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:SNESNGSGetSweeps,petscRealSingle),PetscErrorCode,(SNES,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESNGSSetTolerances(arg0::Type{Float32},arg1::SNES,arg2::Float32,arg3::Float32,arg4::Float32,arg5::Integer)
    ccall((:SNESNGSSetTolerances,petscRealSingle),PetscErrorCode,(SNES,Float32,Float32,Float32,Int64),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function SNESNGSGetTolerances(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:SNESNGSGetTolerances,petscRealSingle),PetscErrorCode,(SNES,Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function SNESUpdateCheckJacobian(arg0::Type{Float32},arg1::SNES,arg2::Integer)
    ccall((:SNESUpdateCheckJacobian,petscRealSingle),PetscErrorCode,(SNES,Int64),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESShellGetContext(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    ccall((:SNESShellGetContext,petscRealSingle),PetscErrorCode,(SNES,Ptr{Ptr{Void}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESShellSetContext(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:SNESShellSetContext,petscRealSingle),PetscErrorCode,(SNES,Ptr{Void}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESShellSetSolve(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:SNESShellSetSolve,petscRealSingle),PetscErrorCode,(SNES,Ptr{Void}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESLineSearchCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{SNESLineSearch},StridedArray{SNESLineSearch},Ptr{SNESLineSearch},Ref{SNESLineSearch}})
    ccall((:SNESLineSearchCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{SNESLineSearch}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESLineSearchReset(arg0::Type{Float32},arg1::SNESLineSearch)
    ccall((:SNESLineSearchReset,petscRealSingle),PetscErrorCode,(SNESLineSearch,),arg1)
end
=#
#= skipping function with undefined symbols:
 function SNESLineSearchView(arg1::SNESLineSearch,arg2::PetscViewer{Float32})
    ccall((:SNESLineSearchView,petscRealSingle),PetscErrorCode,(SNESLineSearch,PetscViewer{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESLineSearchDestroy(arg0::Type{Float32},arg1::Union{Ptr{SNESLineSearch},StridedArray{SNESLineSearch},Ptr{SNESLineSearch},Ref{SNESLineSearch}})
    ccall((:SNESLineSearchDestroy,petscRealSingle),PetscErrorCode,(Ptr{SNESLineSearch},),arg1)
end
=#
#= skipping function with undefined symbols:
 function SNESLineSearchSetType(arg0::Type{Float32},arg1::SNESLineSearch,arg2::SNESLineSearchType)
    ccall((:SNESLineSearchSetType,petscRealSingle),PetscErrorCode,(SNESLineSearch,Cstring),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESLineSearchSetFromOptions(arg0::Type{Float32},arg1::SNESLineSearch)
    ccall((:SNESLineSearchSetFromOptions,petscRealSingle),PetscErrorCode,(SNESLineSearch,),arg1)
end
=#
#= skipping function with undefined symbols:
 function SNESLineSearchSetFunction(arg0::Type{Float32},arg1::SNESLineSearch,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:SNESLineSearchSetFunction,petscRealSingle),PetscErrorCode,(SNESLineSearch,Ptr{Void}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESLineSearchSetUp(arg0::Type{Float32},arg1::SNESLineSearch)
    ccall((:SNESLineSearchSetUp,petscRealSingle),PetscErrorCode,(SNESLineSearch,),arg1)
end
=#
#= skipping function with undefined symbols:
 function SNESLineSearchApply(arg1::SNESLineSearch,arg2::Vec{Float32},arg3::Vec{Float32},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Vec{Float32})
    ccall((:SNESLineSearchApply,petscRealSingle),PetscErrorCode,(SNESLineSearch,Vec{Float32},Vec{Float32},Ptr{Float32},Vec{Float32}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function SNESLineSearchPreCheck(arg1::SNESLineSearch,arg2::Vec{Float32},arg3::Vec{Float32},arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:SNESLineSearchPreCheck,petscRealSingle),PetscErrorCode,(SNESLineSearch,Vec{Float32},Vec{Float32},Ptr{PetscBool}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function SNESLineSearchPostCheck(arg1::SNESLineSearch,arg2::Vec{Float32},arg3::Vec{Float32},arg4::Vec{Float32},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg6::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:SNESLineSearchPostCheck,petscRealSingle),PetscErrorCode,(SNESLineSearch,Vec{Float32},Vec{Float32},Vec{Float32},Ptr{PetscBool},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
#= skipping function with undefined symbols:
 function SNESLineSearchSetWorkVecs(arg0::Type{Float32},arg1::SNESLineSearch,arg2::Integer)
    ccall((:SNESLineSearchSetWorkVecs,petscRealSingle),PetscErrorCode,(SNESLineSearch,Int64),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESLineSearchSetPreCheck(arg0::Type{Float32},arg1::SNESLineSearch,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},ctx::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:SNESLineSearchSetPreCheck,petscRealSingle),PetscErrorCode,(SNESLineSearch,Ptr{Void},Ptr{Void}),arg1,arg2,ctx)
end
=#
#= skipping function with undefined symbols:
 function SNESLineSearchSetPostCheck(arg0::Type{Float32},arg1::SNESLineSearch,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},ctx::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:SNESLineSearchSetPostCheck,petscRealSingle),PetscErrorCode,(SNESLineSearch,Ptr{Void},Ptr{Void}),arg1,arg2,ctx)
end
=#
#= skipping function with undefined symbols:
 function SNESLineSearchGetPreCheck(arg0::Type{Float32},arg1::SNESLineSearch,arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},ctx::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    ccall((:SNESLineSearchGetPreCheck,petscRealSingle),PetscErrorCode,(SNESLineSearch,Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,ctx)
end
=#
#= skipping function with undefined symbols:
 function SNESLineSearchGetPostCheck(arg0::Type{Float32},arg1::SNESLineSearch,arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},ctx::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    ccall((:SNESLineSearchGetPostCheck,petscRealSingle),PetscErrorCode,(SNESLineSearch,Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,ctx)
end
=#
#= skipping function with undefined symbols:
 function SNESLineSearchSetVIFunctions(arg0::Type{Float32},arg1::SNESLineSearch,arg2::SNESLineSearchVIProjectFunc,arg3::SNESLineSearchVINormFunc)
    ccall((:SNESLineSearchSetVIFunctions,petscRealSingle),PetscErrorCode,(SNESLineSearch,SNESLineSearchVIProjectFunc,SNESLineSearchVINormFunc),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function SNESLineSearchGetVIFunctions(arg0::Type{Float32},arg1::SNESLineSearch,arg2::Union{Ptr{SNESLineSearchVIProjectFunc},StridedArray{SNESLineSearchVIProjectFunc},Ptr{SNESLineSearchVIProjectFunc},Ref{SNESLineSearchVIProjectFunc}},arg3::Union{Ptr{SNESLineSearchVINormFunc},StridedArray{SNESLineSearchVINormFunc},Ptr{SNESLineSearchVINormFunc},Ref{SNESLineSearchVINormFunc}})
    ccall((:SNESLineSearchGetVIFunctions,petscRealSingle),PetscErrorCode,(SNESLineSearch,Ptr{SNESLineSearchVIProjectFunc},Ptr{SNESLineSearchVINormFunc}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function SNESLineSearchSetSNES(arg0::Type{Float32},arg1::SNESLineSearch,arg2::SNES)
    ccall((:SNESLineSearchSetSNES,petscRealSingle),PetscErrorCode,(SNESLineSearch,SNES),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESLineSearchGetSNES(arg0::Type{Float32},arg1::SNESLineSearch,arg2::Union{Ptr{SNES},StridedArray{SNES},Ptr{SNES},Ref{SNES}})
    ccall((:SNESLineSearchGetSNES,petscRealSingle),PetscErrorCode,(SNESLineSearch,Ptr{SNES}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESLineSearchGetTolerances(arg0::Type{Float32},arg1::SNESLineSearch,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:SNESLineSearchGetTolerances,petscRealSingle),PetscErrorCode,(SNESLineSearch,Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
#= skipping function with undefined symbols:
 function SNESLineSearchSetTolerances(arg0::Type{Float32},arg1::SNESLineSearch,arg2::Float32,arg3::Float32,arg4::Float32,arg5::Float32,arg6::Float32,arg7::Integer)
    ccall((:SNESLineSearchSetTolerances,petscRealSingle),PetscErrorCode,(SNESLineSearch,Float32,Float32,Float32,Float32,Float32,Int64),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
#= skipping function with undefined symbols:
 function SNESLineSearchPreCheckPicard(arg1::SNESLineSearch,arg2::Vec{Float32},arg3::Vec{Float32},arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:SNESLineSearchPreCheckPicard,petscRealSingle),PetscErrorCode,(SNESLineSearch,Vec{Float32},Vec{Float32},Ptr{PetscBool},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function SNESLineSearchGetLambda(arg0::Type{Float32},arg1::SNESLineSearch,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:SNESLineSearchGetLambda,petscRealSingle),PetscErrorCode,(SNESLineSearch,Ptr{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESLineSearchSetLambda(arg0::Type{Float32},arg1::SNESLineSearch,arg2::Float32)
    ccall((:SNESLineSearchSetLambda,petscRealSingle),PetscErrorCode,(SNESLineSearch,Float32),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESLineSearchGetDamping(arg0::Type{Float32},arg1::SNESLineSearch,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:SNESLineSearchGetDamping,petscRealSingle),PetscErrorCode,(SNESLineSearch,Ptr{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESLineSearchSetDamping(arg0::Type{Float32},arg1::SNESLineSearch,arg2::Float32)
    ccall((:SNESLineSearchSetDamping,petscRealSingle),PetscErrorCode,(SNESLineSearch,Float32),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESLineSearchGetOrder(arg0::Type{Float32},arg1::SNESLineSearch,order::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:SNESLineSearchGetOrder,petscRealSingle),PetscErrorCode,(SNESLineSearch,Ptr{Int64}),arg1,order)
end
=#
#= skipping function with undefined symbols:
 function SNESLineSearchSetOrder(arg0::Type{Float32},arg1::SNESLineSearch,order::Integer)
    ccall((:SNESLineSearchSetOrder,petscRealSingle),PetscErrorCode,(SNESLineSearch,Int64),arg1,order)
end
=#
#= skipping function with undefined symbols:
 function SNESLineSearchGetReason(arg0::Type{Float32},arg1::SNESLineSearch,arg2::Union{Ptr{SNESLineSearchReason},StridedArray{SNESLineSearchReason},Ptr{SNESLineSearchReason},Ref{SNESLineSearchReason}})
    ccall((:SNESLineSearchGetReason,petscRealSingle),PetscErrorCode,(SNESLineSearch,Ptr{SNESLineSearchReason}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESLineSearchSetReason(arg0::Type{Float32},arg1::SNESLineSearch,arg2::SNESLineSearchReason)
    ccall((:SNESLineSearchSetReason,petscRealSingle),PetscErrorCode,(SNESLineSearch,SNESLineSearchReason),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESLineSearchGetVecs(arg1::SNESLineSearch,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg4::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg5::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg6::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    ccall((:SNESLineSearchGetVecs,petscRealSingle),PetscErrorCode,(SNESLineSearch,Ptr{Vec{Float32}},Ptr{Vec{Float32}},Ptr{Vec{Float32}},Ptr{Vec{Float32}},Ptr{Vec{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
#= skipping function with undefined symbols:
 function SNESLineSearchSetVecs(arg1::SNESLineSearch,arg2::Vec{Float32},arg3::Vec{Float32},arg4::Vec{Float32},arg5::Vec{Float32},arg6::Vec{Float32})
    ccall((:SNESLineSearchSetVecs,petscRealSingle),PetscErrorCode,(SNESLineSearch,Vec{Float32},Vec{Float32},Vec{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
#= skipping function with undefined symbols:
 function SNESLineSearchGetNorms(arg0::Type{Float32},arg1::SNESLineSearch,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:SNESLineSearchGetNorms,petscRealSingle),PetscErrorCode,(SNESLineSearch,Ptr{Float32},Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function SNESLineSearchSetNorms(arg0::Type{Float32},arg1::SNESLineSearch,arg2::Float32,arg3::Float32,arg4::Float32)
    ccall((:SNESLineSearchSetNorms,petscRealSingle),PetscErrorCode,(SNESLineSearch,Float32,Float32,Float32),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function SNESLineSearchComputeNorms(arg0::Type{Float32},arg1::SNESLineSearch)
    ccall((:SNESLineSearchComputeNorms,petscRealSingle),PetscErrorCode,(SNESLineSearch,),arg1)
end
=#
#= skipping function with undefined symbols:
 function SNESLineSearchSetComputeNorms(arg0::Type{Float32},arg1::SNESLineSearch,arg2::PetscBool)
    ccall((:SNESLineSearchSetComputeNorms,petscRealSingle),PetscErrorCode,(SNESLineSearch,PetscBool),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESLineSearchSetMonitor(arg0::Type{Float32},arg1::SNESLineSearch,arg2::PetscBool)
    ccall((:SNESLineSearchSetMonitor,petscRealSingle),PetscErrorCode,(SNESLineSearch,PetscBool),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESLineSearchGetMonitor(arg1::SNESLineSearch,arg2::Union{Ptr{PetscViewer{Float32}},StridedArray{PetscViewer{Float32}},Ptr{PetscViewer{Float32}},Ref{PetscViewer{Float32}}})
    ccall((:SNESLineSearchGetMonitor,petscRealSingle),PetscErrorCode,(SNESLineSearch,Ptr{PetscViewer{Float32}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESLineSearchAppendOptionsPrefix(arg0::Type{Float32},arg1::SNESLineSearch,prefix::Union{ByteString,Symbol})
    ccall((:SNESLineSearchAppendOptionsPrefix,petscRealSingle),PetscErrorCode,(SNESLineSearch,Cstring),arg1,prefix)
end
=#
#= skipping function with undefined symbols:
 function SNESLineSearchGetOptionsPrefix(arg0::Type{Float32},arg1::SNESLineSearch,prefix::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    ccall((:SNESLineSearchGetOptionsPrefix,petscRealSingle),PetscErrorCode,(SNESLineSearch,Ptr{Ptr{UInt8}}),arg1,prefix)
end
=#
#= skipping function with undefined symbols:
 function SNESLineSearchShellSetUserFunc(arg0::Type{Float32},arg1::SNESLineSearch,arg2::SNESLineSearchUserFunc,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:SNESLineSearchShellSetUserFunc,petscRealSingle),PetscErrorCode,(SNESLineSearch,SNESLineSearchUserFunc,Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function SNESLineSearchShellGetUserFunc(arg0::Type{Float32},arg1::SNESLineSearch,arg2::Union{Ptr{SNESLineSearchUserFunc},StridedArray{SNESLineSearchUserFunc},Ptr{SNESLineSearchUserFunc},Ref{SNESLineSearchUserFunc}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    ccall((:SNESLineSearchShellGetUserFunc,petscRealSingle),PetscErrorCode,(SNESLineSearch,Ptr{SNESLineSearchUserFunc},Ptr{Ptr{Void}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function SNESLineSearchBTSetAlpha(arg0::Type{Float32},arg1::SNESLineSearch,arg2::Float32)
    ccall((:SNESLineSearchBTSetAlpha,petscRealSingle),PetscErrorCode,(SNESLineSearch,Float32),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESLineSearchBTGetAlpha(arg0::Type{Float32},arg1::SNESLineSearch,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:SNESLineSearchBTGetAlpha,petscRealSingle),PetscErrorCode,(SNESLineSearch,Ptr{Float32}),arg1,arg2)
end
=#
function SNESLineSearchRegister(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:SNESLineSearchRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

#= skipping function with undefined symbols:
 function SNESVISetVariableBounds(arg1::SNES,arg2::Vec{Float32},arg3::Vec{Float32})
    ccall((:SNESVISetVariableBounds,petscRealSingle),PetscErrorCode,(SNES,Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function SNESVISetComputeVariableBounds(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:SNESVISetComputeVariableBounds,petscRealSingle),PetscErrorCode,(SNES,Ptr{Void}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESVIGetInactiveSet(arg1::SNES,arg2::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    ccall((:SNESVIGetInactiveSet,petscRealSingle),PetscErrorCode,(SNES,Ptr{IS{Float32}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESVIGetActiveSetIS(arg1::SNES,arg2::Vec{Float32},arg3::Vec{Float32},arg4::Union{Ptr{IS{Float32}},StridedArray{IS{Float32}},Ptr{IS{Float32}},Ref{IS{Float32}}})
    ccall((:SNESVIGetActiveSetIS,petscRealSingle),PetscErrorCode,(SNES,Vec{Float32},Vec{Float32},Ptr{IS{Float32}}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function SNESVIComputeInactiveSetFnorm(arg1::SNES,arg2::Vec{Float32},arg3::Vec{Float32},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:SNESVIComputeInactiveSetFnorm,petscRealSingle),PetscErrorCode,(SNES,Vec{Float32},Vec{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function SNESVISetRedundancyCheck(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:SNESVISetRedundancyCheck,petscRealSingle),PetscErrorCode,(SNES,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function SNESTestLocalMin(arg0::Type{Float32},arg1::SNES)
    ccall((:SNESTestLocalMin,petscRealSingle),PetscErrorCode,(SNES,),arg1)
end
=#
#= skipping function with undefined symbols:
 function SNESComputeJacobian(arg1::SNES,arg2::Vec{Float32},arg3::Mat{Float32},arg4::Mat{Float32})
    ccall((:SNESComputeJacobian,petscRealSingle),PetscErrorCode,(SNES,Vec{Float32},Mat{Float32},Mat{Float32}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function SNESSetDM(arg0::Type{Float32},arg1::SNES,arg2::DM)
    ccall((:SNESSetDM,petscRealSingle),PetscErrorCode,(SNES,DM),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESGetDM(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:SNESGetDM,petscRealSingle),PetscErrorCode,(SNES,Ptr{DM}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESSetNPC(arg0::Type{Float32},arg1::SNES,arg2::SNES)
    ccall((:SNESSetNPC,petscRealSingle),PetscErrorCode,(SNES,SNES),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESGetNPC(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{SNES},StridedArray{SNES},Ptr{SNES},Ref{SNES}})
    ccall((:SNESGetNPC,petscRealSingle),PetscErrorCode,(SNES,Ptr{SNES}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESHasNPC(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:SNESHasNPC,petscRealSingle),PetscErrorCode,(SNES,Ptr{PetscBool}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESApplyNPC(arg1::SNES,arg2::Vec{Float32},arg3::Vec{Float32},arg4::Vec{Float32})
    ccall((:SNESApplyNPC,petscRealSingle),PetscErrorCode,(SNES,Vec{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function SNESGetNPCFunction(arg1::SNES,arg2::Vec{Float32},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:SNESGetNPCFunction,petscRealSingle),PetscErrorCode,(SNES,Vec{Float32},Ptr{Float32}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function SNESComputeFunctionDefaultNPC(arg1::SNES,arg2::Vec{Float32},arg3::Vec{Float32})
    ccall((:SNESComputeFunctionDefaultNPC,petscRealSingle),PetscErrorCode,(SNES,Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function SNESSetNPCSide(arg0::Type{Float32},arg1::SNES,arg2::PCSide)
    ccall((:SNESSetNPCSide,petscRealSingle),PetscErrorCode,(SNES,PCSide),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESGetNPCSide(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{PCSide},StridedArray{PCSide},Ptr{PCSide},Ref{PCSide}})
    ccall((:SNESGetNPCSide,petscRealSingle),PetscErrorCode,(SNES,Ptr{PCSide}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESSetLineSearch(arg0::Type{Float32},arg1::SNES,arg2::SNESLineSearch)
    ccall((:SNESSetLineSearch,petscRealSingle),PetscErrorCode,(SNES,SNESLineSearch),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESGetLineSearch(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{SNESLineSearch},StridedArray{SNESLineSearch},Ptr{SNESLineSearch},Ref{SNESLineSearch}})
    ccall((:SNESGetLineSearch,petscRealSingle),PetscErrorCode,(SNES,Ptr{SNESLineSearch}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESRestrictHookAdd(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:SNESRestrictHookAdd,petscRealSingle),PetscErrorCode,(SNES,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function SNESRestrictHooksRun(arg0::Type{Float32},arg1::SNES,arg2::SNES)
    ccall((:SNESRestrictHooksRun,petscRealSingle),PetscErrorCode,(SNES,SNES),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMSNESSetFunction(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMSNESSetFunction,petscRealSingle),PetscErrorCode,(DM,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMSNESGetFunction(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    ccall((:DMSNESGetFunction,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMSNESSetNGS(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMSNESSetNGS,petscRealSingle),PetscErrorCode,(DM,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMSNESGetNGS(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    ccall((:DMSNESGetNGS,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMSNESSetJacobian(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMSNESSetJacobian,petscRealSingle),PetscErrorCode,(DM,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMSNESGetJacobian(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    ccall((:DMSNESGetJacobian,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMSNESSetPicard(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMSNESSetPicard,petscRealSingle),PetscErrorCode,(DM,Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMSNESGetPicard(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    ccall((:DMSNESGetPicard,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{Void}},Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMSNESSetObjective(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMSNESSetObjective,petscRealSingle),PetscErrorCode,(DM,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMSNESGetObjective(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    ccall((:DMSNESGetObjective,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMDASNESSetFunctionLocal(arg0::Type{Float32},arg1::DM,arg2::InsertMode,arg3::DMDASNESFunction,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMDASNESSetFunctionLocal,petscRealSingle),PetscErrorCode,(DM,InsertMode,DMDASNESFunction,Ptr{Void}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMDASNESSetJacobianLocal(arg0::Type{Float32},arg1::DM,arg2::DMDASNESJacobian,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMDASNESSetJacobianLocal,petscRealSingle),PetscErrorCode,(DM,DMDASNESJacobian,Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMDASNESSetObjectiveLocal(arg0::Type{Float32},arg1::DM,arg2::DMDASNESObjective,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMDASNESSetObjectiveLocal,petscRealSingle),PetscErrorCode,(DM,DMDASNESObjective,Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMDASNESSetPicardLocal(arg0::Type{Float32},arg1::DM,arg2::InsertMode,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMDASNESSetPicardLocal,petscRealSingle),PetscErrorCode,(DM,InsertMode,Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function DMPlexSNESGetGeometryFEM(arg1::DM,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    ccall((:DMPlexSNESGetGeometryFEM,petscRealSingle),PetscErrorCode,(DM,Ptr{Vec{Float32}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMPlexSNESGetGeometryFVM(arg1::DM,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:DMPlexSNESGetGeometryFVM,petscRealSingle),PetscErrorCode,(DM,Ptr{Vec{Float32}},Ptr{Vec{Float32}},Ptr{Float32}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMPlexSNESGetGradientDM(arg0::Type{Float32},arg1::DM,arg2::PetscFV,arg3::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:DMPlexSNESGetGradientDM,petscRealSingle),PetscErrorCode,(DM,PetscFV,Ptr{DM}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetCellFields(arg1::DM,arg2::Integer,arg3::Integer,arg4::Vec{Float32},arg5::Vec{Float32},arg6::Vec{Float32},arg7::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg8::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg9::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    ccall((:DMPlexGetCellFields,petscRealSingle),PetscErrorCode,(DM,Int64,Int64,Vec{Float32},Vec{Float32},Vec{Float32},Ptr{Ptr{Float32}},Ptr{Ptr{Float32}},Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
end
=#
#= skipping function with undefined symbols:
 function DMPlexRestoreCellFields(arg1::DM,arg2::Integer,arg3::Integer,arg4::Vec{Float32},arg5::Vec{Float32},arg6::Vec{Float32},arg7::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg8::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg9::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    ccall((:DMPlexRestoreCellFields,petscRealSingle),PetscErrorCode,(DM,Int64,Int64,Vec{Float32},Vec{Float32},Vec{Float32},Ptr{Ptr{Float32}},Ptr{Ptr{Float32}},Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetFaceFields(arg1::DM,arg2::Integer,arg3::Integer,arg4::Vec{Float32},arg5::Vec{Float32},arg6::Vec{Float32},arg7::Vec{Float32},arg8::Vec{Float32},arg9::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg10::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    ccall((:DMPlexGetFaceFields,petscRealSingle),PetscErrorCode,(DM,Int64,Int64,Vec{Float32},Vec{Float32},Vec{Float32},Vec{Float32},Vec{Float32},Ptr{Ptr{Float32}},Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
end
=#
#= skipping function with undefined symbols:
 function DMPlexRestoreFaceFields(arg1::DM,arg2::Integer,arg3::Integer,arg4::Vec{Float32},arg5::Vec{Float32},arg6::Vec{Float32},arg7::Vec{Float32},arg8::Vec{Float32},arg9::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg10::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    ccall((:DMPlexRestoreFaceFields,petscRealSingle),PetscErrorCode,(DM,Int64,Int64,Vec{Float32},Vec{Float32},Vec{Float32},Vec{Float32},Vec{Float32},Ptr{Ptr{Float32}},Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)
end
=#
#= skipping function with undefined symbols:
 function DMPlexGetFaceGeometry(arg1::DM,arg2::Integer,arg3::Integer,arg4::Vec{Float32},arg5::Vec{Float32},arg6::Union{Ptr{Ptr{PetscFVFaceGeom}},StridedArray{Ptr{PetscFVFaceGeom}},Ptr{Ptr{PetscFVFaceGeom}},Ref{Ptr{PetscFVFaceGeom}}},arg7::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    ccall((:DMPlexGetFaceGeometry,petscRealSingle),PetscErrorCode,(DM,Int64,Int64,Vec{Float32},Vec{Float32},Ptr{Ptr{PetscFVFaceGeom}},Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
#= skipping function with undefined symbols:
 function DMPlexRestoreFaceGeometry(arg1::DM,arg2::Integer,arg3::Integer,arg4::Vec{Float32},arg5::Vec{Float32},arg6::Union{Ptr{Ptr{PetscFVFaceGeom}},StridedArray{Ptr{PetscFVFaceGeom}},Ptr{Ptr{PetscFVFaceGeom}},Ref{Ptr{PetscFVFaceGeom}}},arg7::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    ccall((:DMPlexRestoreFaceGeometry,petscRealSingle),PetscErrorCode,(DM,Int64,Int64,Vec{Float32},Vec{Float32},Ptr{Ptr{PetscFVFaceGeom}},Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
#= skipping function with undefined symbols:
 function DMSNESSetFunctionLocal(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMSNESSetFunctionLocal,petscRealSingle),PetscErrorCode,(DM,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMSNESSetJacobianLocal(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMSNESSetJacobianLocal,petscRealSingle),PetscErrorCode,(DM,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function SNESMultiblockSetFields(arg0::Type{Float32},arg1::SNES,arg2::Union{ByteString,Symbol},arg3::Integer,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:SNESMultiblockSetFields,petscRealSingle),PetscErrorCode,(SNES,Cstring,Int64,Ptr{Int64}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function SNESMultiblockSetIS(arg1::SNES,arg2::Union{ByteString,Symbol},arg3::IS{Float32})
    ccall((:SNESMultiblockSetIS,petscRealSingle),PetscErrorCode,(SNES,Cstring,IS{Float32}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function SNESMultiblockSetBlockSize(arg0::Type{Float32},arg1::SNES,arg2::Integer)
    ccall((:SNESMultiblockSetBlockSize,petscRealSingle),PetscErrorCode,(SNES,Int64),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESMultiblockSetType(arg0::Type{Float32},arg1::SNES,arg2::PCCompositeType)
    ccall((:SNESMultiblockSetType,petscRealSingle),PetscErrorCode,(SNES,PCCompositeType),arg1,arg2)
end
=#
function SNESMSRegister(arg0::Type{Float32},arg1::SNESMSType,arg2::Integer,arg3::Integer,arg4::Float32,arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:SNESMSRegister,petscRealSingle),PetscErrorCode,(Cstring,Int64,Int64,Float32,Ptr{Float32},Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
    return err
end

#= skipping function with undefined symbols:
 function SNESMSSetType(arg0::Type{Float32},arg1::SNES,arg2::SNESMSType)
    ccall((:SNESMSSetType,petscRealSingle),PetscErrorCode,(SNES,Cstring),arg1,arg2)
end
=#
function SNESMSFinalizePackage(arg0::Type{Float32})
    err = ccall((:SNESMSFinalizePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function SNESMSInitializePackage(arg0::Type{Float32})
    err = ccall((:SNESMSInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function SNESMSRegisterDestroy(arg0::Type{Float32})
    err = ccall((:SNESMSRegisterDestroy,petscRealSingle),PetscErrorCode,())
    return err
end

#= skipping function with undefined symbols:
 function SNESNGMRESSetRestartType(arg0::Type{Float32},arg1::SNES,arg2::SNESNGMRESRestartType)
    ccall((:SNESNGMRESSetRestartType,petscRealSingle),PetscErrorCode,(SNES,SNESNGMRESRestartType),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESNGMRESSetSelectType(arg0::Type{Float32},arg1::SNES,arg2::SNESNGMRESSelectType)
    ccall((:SNESNGMRESSetSelectType,petscRealSingle),PetscErrorCode,(SNES,SNESNGMRESSelectType),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESNCGSetType(arg0::Type{Float32},arg1::SNES,arg2::SNESNCGType)
    ccall((:SNESNCGSetType,petscRealSingle),PetscErrorCode,(SNES,SNESNCGType),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESQNSetType(arg0::Type{Float32},arg1::SNES,arg2::SNESQNType)
    ccall((:SNESQNSetType,petscRealSingle),PetscErrorCode,(SNES,SNESQNType),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESQNSetScaleType(arg0::Type{Float32},arg1::SNES,arg2::SNESQNScaleType)
    ccall((:SNESQNSetScaleType,petscRealSingle),PetscErrorCode,(SNES,SNESQNScaleType),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESQNSetRestartType(arg0::Type{Float32},arg1::SNES,arg2::SNESQNRestartType)
    ccall((:SNESQNSetRestartType,petscRealSingle),PetscErrorCode,(SNES,SNESQNRestartType),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESNASMGetType(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{PCASMType},StridedArray{PCASMType},Ptr{PCASMType},Ref{PCASMType}})
    ccall((:SNESNASMGetType,petscRealSingle),PetscErrorCode,(SNES,Ptr{PCASMType}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESNASMSetType(arg0::Type{Float32},arg1::SNES,arg2::PCASMType)
    ccall((:SNESNASMSetType,petscRealSingle),PetscErrorCode,(SNES,PCASMType),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESNASMGetSubdomains(arg1::SNES,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{SNES}},StridedArray{Ptr{SNES}},Ptr{Ptr{SNES}},Ref{Ptr{SNES}}},arg4::Union{Ptr{Ptr{VecScatter{Float32}}},StridedArray{Ptr{VecScatter{Float32}}},Ptr{Ptr{VecScatter{Float32}}},Ref{Ptr{VecScatter{Float32}}}},arg5::Union{Ptr{Ptr{VecScatter{Float32}}},StridedArray{Ptr{VecScatter{Float32}}},Ptr{Ptr{VecScatter{Float32}}},Ref{Ptr{VecScatter{Float32}}}},arg6::Union{Ptr{Ptr{VecScatter{Float32}}},StridedArray{Ptr{VecScatter{Float32}}},Ptr{Ptr{VecScatter{Float32}}},Ref{Ptr{VecScatter{Float32}}}})
    ccall((:SNESNASMGetSubdomains,petscRealSingle),PetscErrorCode,(SNES,Ptr{Int64},Ptr{Ptr{SNES}},Ptr{Ptr{VecScatter{Float32}}},Ptr{Ptr{VecScatter{Float32}}},Ptr{Ptr{VecScatter{Float32}}}),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
#= skipping function with undefined symbols:
 function SNESNASMSetSubdomains(arg1::SNES,arg2::Integer,arg3::Union{Ptr{SNES},StridedArray{SNES},Ptr{SNES},Ref{SNES}},arg4::Union{Ptr{VecScatter{Float32}},StridedArray{VecScatter{Float32}},Ptr{VecScatter{Float32}},Ref{VecScatter{Float32}}},arg5::Union{Ptr{VecScatter{Float32}},StridedArray{VecScatter{Float32}},Ptr{VecScatter{Float32}},Ref{VecScatter{Float32}}},arg6::Union{Ptr{VecScatter{Float32}},StridedArray{VecScatter{Float32}},Ptr{VecScatter{Float32}},Ref{VecScatter{Float32}}})
    ccall((:SNESNASMSetSubdomains,petscRealSingle),PetscErrorCode,(SNES,Int64,Ptr{SNES},Ptr{VecScatter{Float32}},Ptr{VecScatter{Float32}},Ptr{VecScatter{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
#= skipping function with undefined symbols:
 function SNESNASMSetDamping(arg0::Type{Float32},arg1::SNES,arg2::Float32)
    ccall((:SNESNASMSetDamping,petscRealSingle),PetscErrorCode,(SNES,Float32),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESNASMGetDamping(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:SNESNASMGetDamping,petscRealSingle),PetscErrorCode,(SNES,Ptr{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESNASMGetSubdomainVecs(arg1::SNES,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Vec{Float32}}},StridedArray{Ptr{Vec{Float32}}},Ptr{Ptr{Vec{Float32}}},Ref{Ptr{Vec{Float32}}}},arg4::Union{Ptr{Ptr{Vec{Float32}}},StridedArray{Ptr{Vec{Float32}}},Ptr{Ptr{Vec{Float32}}},Ref{Ptr{Vec{Float32}}}},arg5::Union{Ptr{Ptr{Vec{Float32}}},StridedArray{Ptr{Vec{Float32}}},Ptr{Ptr{Vec{Float32}}},Ref{Ptr{Vec{Float32}}}},arg6::Union{Ptr{Ptr{Vec{Float32}}},StridedArray{Ptr{Vec{Float32}}},Ptr{Ptr{Vec{Float32}}},Ref{Ptr{Vec{Float32}}}})
    ccall((:SNESNASMGetSubdomainVecs,petscRealSingle),PetscErrorCode,(SNES,Ptr{Int64},Ptr{Ptr{Vec{Float32}}},Ptr{Ptr{Vec{Float32}}},Ptr{Ptr{Vec{Float32}}},Ptr{Ptr{Vec{Float32}}}),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
#= skipping function with undefined symbols:
 function SNESNASMSetComputeFinalJacobian(arg0::Type{Float32},arg1::SNES,arg2::PetscBool)
    ccall((:SNESNASMSetComputeFinalJacobian,petscRealSingle),PetscErrorCode,(SNES,PetscBool),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESCompositeSetType(arg0::Type{Float32},arg1::SNES,arg2::SNESCompositeType)
    ccall((:SNESCompositeSetType,petscRealSingle),PetscErrorCode,(SNES,SNESCompositeType),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESCompositeAddSNES(arg0::Type{Float32},arg1::SNES,arg2::SNESType)
    ccall((:SNESCompositeAddSNES,petscRealSingle),PetscErrorCode,(SNES,Cstring),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESCompositeGetSNES(arg0::Type{Float32},arg1::SNES,arg2::Integer,arg3::Union{Ptr{SNES},StridedArray{SNES},Ptr{SNES},Ref{SNES}})
    ccall((:SNESCompositeGetSNES,petscRealSingle),PetscErrorCode,(SNES,Int64,Ptr{SNES}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function SNESCompositeGetNumber(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:SNESCompositeGetNumber,petscRealSingle),PetscErrorCode,(SNES,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESCompositeSetDamping(arg0::Type{Float32},arg1::SNES,arg2::Integer,arg3::Float32)
    ccall((:SNESCompositeSetDamping,petscRealSingle),PetscErrorCode,(SNES,Int64,Float32),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function SNESFASSetType(arg0::Type{Float32},arg1::SNES,arg2::SNESFASType)
    ccall((:SNESFASSetType,petscRealSingle),PetscErrorCode,(SNES,SNESFASType),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESFASGetType(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{SNESFASType},StridedArray{SNESFASType},Ptr{SNESFASType},Ref{SNESFASType}})
    ccall((:SNESFASGetType,petscRealSingle),PetscErrorCode,(SNES,Ptr{SNESFASType}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESFASSetLevels(arg0::Type{Float32},arg1::SNES,arg2::Integer,arg3::Union{Ptr{MPI_Comm},StridedArray{MPI_Comm},Ptr{MPI_Comm},Ref{MPI_Comm}})
    ccall((:SNESFASSetLevels,petscRealSingle),PetscErrorCode,(SNES,Int64,Ptr{comm_type}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function SNESFASGetLevels(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:SNESFASGetLevels,petscRealSingle),PetscErrorCode,(SNES,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESFASGetCycleSNES(arg0::Type{Float32},arg1::SNES,arg2::Integer,arg3::Union{Ptr{SNES},StridedArray{SNES},Ptr{SNES},Ref{SNES}})
    ccall((:SNESFASGetCycleSNES,petscRealSingle),PetscErrorCode,(SNES,Int64,Ptr{SNES}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function SNESFASSetNumberSmoothUp(arg0::Type{Float32},arg1::SNES,arg2::Integer)
    ccall((:SNESFASSetNumberSmoothUp,petscRealSingle),PetscErrorCode,(SNES,Int64),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESFASSetNumberSmoothDown(arg0::Type{Float32},arg1::SNES,arg2::Integer)
    ccall((:SNESFASSetNumberSmoothDown,petscRealSingle),PetscErrorCode,(SNES,Int64),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESFASSetCycles(arg0::Type{Float32},arg1::SNES,arg2::Integer)
    ccall((:SNESFASSetCycles,petscRealSingle),PetscErrorCode,(SNES,Int64),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESFASSetMonitor(arg0::Type{Float32},arg1::SNES,arg2::PetscBool)
    ccall((:SNESFASSetMonitor,petscRealSingle),PetscErrorCode,(SNES,PetscBool),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESFASSetLog(arg0::Type{Float32},arg1::SNES,arg2::PetscBool)
    ccall((:SNESFASSetLog,petscRealSingle),PetscErrorCode,(SNES,PetscBool),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESFASSetGalerkin(arg0::Type{Float32},arg1::SNES,arg2::PetscBool)
    ccall((:SNESFASSetGalerkin,petscRealSingle),PetscErrorCode,(SNES,PetscBool),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESFASGetGalerkin(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:SNESFASGetGalerkin,petscRealSingle),PetscErrorCode,(SNES,Ptr{PetscBool}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESFASCycleGetSmoother(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{SNES},StridedArray{SNES},Ptr{SNES},Ref{SNES}})
    ccall((:SNESFASCycleGetSmoother,petscRealSingle),PetscErrorCode,(SNES,Ptr{SNES}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESFASCycleGetSmootherUp(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{SNES},StridedArray{SNES},Ptr{SNES},Ref{SNES}})
    ccall((:SNESFASCycleGetSmootherUp,petscRealSingle),PetscErrorCode,(SNES,Ptr{SNES}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESFASCycleGetSmootherDown(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{SNES},StridedArray{SNES},Ptr{SNES},Ref{SNES}})
    ccall((:SNESFASCycleGetSmootherDown,petscRealSingle),PetscErrorCode,(SNES,Ptr{SNES}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESFASCycleGetCorrection(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{SNES},StridedArray{SNES},Ptr{SNES},Ref{SNES}})
    ccall((:SNESFASCycleGetCorrection,petscRealSingle),PetscErrorCode,(SNES,Ptr{SNES}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESFASCycleGetInterpolation(arg1::SNES,arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    ccall((:SNESFASCycleGetInterpolation,petscRealSingle),PetscErrorCode,(SNES,Ptr{Mat{Float32}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESFASCycleGetRestriction(arg1::SNES,arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    ccall((:SNESFASCycleGetRestriction,petscRealSingle),PetscErrorCode,(SNES,Ptr{Mat{Float32}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESFASCycleGetInjection(arg1::SNES,arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    ccall((:SNESFASCycleGetInjection,petscRealSingle),PetscErrorCode,(SNES,Ptr{Mat{Float32}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESFASCycleGetRScale(arg1::SNES,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    ccall((:SNESFASCycleGetRScale,petscRealSingle),PetscErrorCode,(SNES,Ptr{Vec{Float32}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESFASCycleSetCycles(arg0::Type{Float32},arg1::SNES,arg2::Integer)
    ccall((:SNESFASCycleSetCycles,petscRealSingle),PetscErrorCode,(SNES,Int64),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESFASCycleIsFine(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:SNESFASCycleIsFine,petscRealSingle),PetscErrorCode,(SNES,Ptr{PetscBool}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESFASSetInterpolation(arg1::SNES,arg2::Integer,arg3::Mat{Float32})
    ccall((:SNESFASSetInterpolation,petscRealSingle),PetscErrorCode,(SNES,Int64,Mat{Float32}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function SNESFASGetInterpolation(arg1::SNES,arg2::Integer,arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    ccall((:SNESFASGetInterpolation,petscRealSingle),PetscErrorCode,(SNES,Int64,Ptr{Mat{Float32}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function SNESFASSetRestriction(arg1::SNES,arg2::Integer,arg3::Mat{Float32})
    ccall((:SNESFASSetRestriction,petscRealSingle),PetscErrorCode,(SNES,Int64,Mat{Float32}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function SNESFASGetRestriction(arg1::SNES,arg2::Integer,arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    ccall((:SNESFASGetRestriction,petscRealSingle),PetscErrorCode,(SNES,Int64,Ptr{Mat{Float32}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function SNESFASSetInjection(arg1::SNES,arg2::Integer,arg3::Mat{Float32})
    ccall((:SNESFASSetInjection,petscRealSingle),PetscErrorCode,(SNES,Int64,Mat{Float32}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function SNESFASGetInjection(arg1::SNES,arg2::Integer,arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}})
    ccall((:SNESFASGetInjection,petscRealSingle),PetscErrorCode,(SNES,Int64,Ptr{Mat{Float32}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function SNESFASSetRScale(arg1::SNES,arg2::Integer,arg3::Vec{Float32})
    ccall((:SNESFASSetRScale,petscRealSingle),PetscErrorCode,(SNES,Int64,Vec{Float32}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function SNESFASGetRScale(arg1::SNES,arg2::Integer,arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    ccall((:SNESFASGetRScale,petscRealSingle),PetscErrorCode,(SNES,Int64,Ptr{Vec{Float32}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function SNESFASSetContinuation(arg0::Type{Float32},arg1::SNES,arg2::PetscBool)
    ccall((:SNESFASSetContinuation,petscRealSingle),PetscErrorCode,(SNES,PetscBool),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESFASGetSmoother(arg0::Type{Float32},arg1::SNES,arg2::Integer,arg3::Union{Ptr{SNES},StridedArray{SNES},Ptr{SNES},Ref{SNES}})
    ccall((:SNESFASGetSmoother,petscRealSingle),PetscErrorCode,(SNES,Int64,Ptr{SNES}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function SNESFASGetSmootherUp(arg0::Type{Float32},arg1::SNES,arg2::Integer,arg3::Union{Ptr{SNES},StridedArray{SNES},Ptr{SNES},Ref{SNES}})
    ccall((:SNESFASGetSmootherUp,petscRealSingle),PetscErrorCode,(SNES,Int64,Ptr{SNES}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function SNESFASGetSmootherDown(arg0::Type{Float32},arg1::SNES,arg2::Integer,arg3::Union{Ptr{SNES},StridedArray{SNES},Ptr{SNES},Ref{SNES}})
    ccall((:SNESFASGetSmootherDown,petscRealSingle),PetscErrorCode,(SNES,Int64,Ptr{SNES}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function SNESFASGetCoarseSolve(arg0::Type{Float32},arg1::SNES,arg2::Union{Ptr{SNES},StridedArray{SNES},Ptr{SNES},Ref{SNES}})
    ccall((:SNESFASGetCoarseSolve,petscRealSingle),PetscErrorCode,(SNES,Ptr{SNES}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESFASFullSetDownSweep(arg0::Type{Float32},arg1::SNES,arg2::PetscBool)
    ccall((:SNESFASFullSetDownSweep,petscRealSingle),PetscErrorCode,(SNES,PetscBool),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESFASCreateCoarseVec(arg1::SNES,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    ccall((:SNESFASCreateCoarseVec,petscRealSingle),PetscErrorCode,(SNES,Ptr{Vec{Float32}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESFASRestrict(arg1::SNES,arg2::Vec{Float32},arg3::Vec{Float32})
    ccall((:SNESFASRestrict,petscRealSingle),PetscErrorCode,(SNES,Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMSNESCheckFromOptions(arg1::SNES,arg2::Vec{Float32},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    ccall((:DMSNESCheckFromOptions,petscRealSingle),PetscErrorCode,(SNES,Vec{Float32},Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4)
end
=#
function TSInitializePackage(arg0::Type{Float32})
    err = ccall((:TSInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

#= skipping function with undefined symbols:
 function TSCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{TS},StridedArray{TS},Ptr{TS},Ref{TS}})
    ccall((:TSCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{TS}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSClone(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{TS},StridedArray{TS},Ptr{TS},Ref{TS}})
    ccall((:TSClone,petscRealSingle),PetscErrorCode,(TS,Ptr{TS}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSDestroy(arg0::Type{Float32},arg1::Union{Ptr{TS},StridedArray{TS},Ptr{TS},Ref{TS}})
    ccall((:TSDestroy,petscRealSingle),PetscErrorCode,(Ptr{TS},),arg1)
end
=#
#= skipping function with undefined symbols:
 function TSSetProblemType(arg0::Type{Float32},arg1::TS,arg2::TSProblemType)
    ccall((:TSSetProblemType,petscRealSingle),PetscErrorCode,(TS,TSProblemType),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSGetProblemType(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{TSProblemType},StridedArray{TSProblemType},Ptr{TSProblemType},Ref{TSProblemType}})
    ccall((:TSGetProblemType,petscRealSingle),PetscErrorCode,(TS,Ptr{TSProblemType}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSMonitor(arg1::TS,arg2::Integer,arg3::Float32,arg4::Vec{Float32})
    ccall((:TSMonitor,petscRealSingle),PetscErrorCode,(TS,Int64,Float32,Vec{Float32}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function TSMonitorSet(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TSMonitorSet,petscRealSingle),PetscErrorCode,(TS,Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function TSMonitorCancel(arg0::Type{Float32},arg1::TS)
    ccall((:TSMonitorCancel,petscRealSingle),PetscErrorCode,(TS,),arg1)
end
=#
#= skipping function with undefined symbols:
 function TSSetOptionsPrefix(arg0::Type{Float32},arg1::TS,arg2::Union{ByteString,Symbol})
    ccall((:TSSetOptionsPrefix,petscRealSingle),PetscErrorCode,(TS,Cstring),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSAppendOptionsPrefix(arg0::Type{Float32},arg1::TS,arg2::Union{ByteString,Symbol})
    ccall((:TSAppendOptionsPrefix,petscRealSingle),PetscErrorCode,(TS,Cstring),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSGetOptionsPrefix(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    ccall((:TSGetOptionsPrefix,petscRealSingle),PetscErrorCode,(TS,Ptr{Ptr{UInt8}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSSetFromOptions(arg0::Type{Float32},arg1::TS)
    ccall((:TSSetFromOptions,petscRealSingle),PetscErrorCode,(TS,),arg1)
end
=#
#= skipping function with undefined symbols:
 function TSSetUp(arg0::Type{Float32},arg1::TS)
    ccall((:TSSetUp,petscRealSingle),PetscErrorCode,(TS,),arg1)
end
=#
#= skipping function with undefined symbols:
 function TSReset(arg0::Type{Float32},arg1::TS)
    ccall((:TSReset,petscRealSingle),PetscErrorCode,(TS,),arg1)
end
=#
#= skipping function with undefined symbols:
 function TSSetSolution(arg1::TS,arg2::Vec{Float32})
    ccall((:TSSetSolution,petscRealSingle),PetscErrorCode,(TS,Vec{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSGetSolution(arg1::TS,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    ccall((:TSGetSolution,petscRealSingle),PetscErrorCode,(TS,Ptr{Vec{Float32}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSSetSaveTrajectory(arg0::Type{Float32},arg1::TS)
    ccall((:TSSetSaveTrajectory,petscRealSingle),PetscErrorCode,(TS,),arg1)
end
=#
#= skipping function with undefined symbols:
 function TSTrajectoryCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{TSTrajectory},StridedArray{TSTrajectory},Ptr{TSTrajectory},Ref{TSTrajectory}})
    ccall((:TSTrajectoryCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{TSTrajectory}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSTrajectoryDestroy(arg0::Type{Float32},arg1::Union{Ptr{TSTrajectory},StridedArray{TSTrajectory},Ptr{TSTrajectory},Ref{TSTrajectory}})
    ccall((:TSTrajectoryDestroy,petscRealSingle),PetscErrorCode,(Ptr{TSTrajectory},),arg1)
end
=#
#= skipping function with undefined symbols:
 function TSTrajectorySetType(arg0::Type{Float32},arg1::TSTrajectory,arg2::TSTrajectoryType)
    ccall((:TSTrajectorySetType,petscRealSingle),PetscErrorCode,(TSTrajectory,Cstring),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSTrajectorySet(arg1::TSTrajectory,arg2::TS,arg3::Integer,arg4::Float32,arg5::Vec{Float32})
    ccall((:TSTrajectorySet,petscRealSingle),PetscErrorCode,(TSTrajectory,TS,Int64,Float32,Vec{Float32}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function TSTrajectoryGet(arg0::Type{Float32},arg1::TSTrajectory,arg2::TS,arg3::Integer,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:TSTrajectoryGet,petscRealSingle),PetscErrorCode,(TSTrajectory,TS,Int64,Ptr{Float32}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function TSTrajectorySetFromOptions(arg0::Type{Float32},arg1::TSTrajectory)
    ccall((:TSTrajectorySetFromOptions,petscRealSingle),PetscErrorCode,(TSTrajectory,),arg1)
end
=#
function TSTrajectoryRegisterAll(arg0::Type{Float32})
    err = ccall((:TSTrajectoryRegisterAll,petscRealSingle),PetscErrorCode,())
    return err
end

#= skipping function with undefined symbols:
 function TSSetCostGradients(arg1::TS,arg2::Integer,arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg4::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    ccall((:TSSetCostGradients,petscRealSingle),PetscErrorCode,(TS,Int64,Ptr{Vec{Float32}},Ptr{Vec{Float32}}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function TSGetCostGradients(arg1::TS,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Vec{Float32}}},StridedArray{Ptr{Vec{Float32}}},Ptr{Ptr{Vec{Float32}}},Ref{Ptr{Vec{Float32}}}},arg4::Union{Ptr{Ptr{Vec{Float32}}},StridedArray{Ptr{Vec{Float32}}},Ptr{Ptr{Vec{Float32}}},Ref{Ptr{Vec{Float32}}}})
    ccall((:TSGetCostGradients,petscRealSingle),PetscErrorCode,(TS,Ptr{Int64},Ptr{Ptr{Vec{Float32}}},Ptr{Ptr{Vec{Float32}}}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function TSSetCostIntegrand(arg0::Type{Float32},arg1::TS,arg2::Integer,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TSSetCostIntegrand,petscRealSingle),PetscErrorCode,(TS,Int64,Ptr{Void},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
#= skipping function with undefined symbols:
 function TSGetCostIntegral(arg1::TS,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    ccall((:TSGetCostIntegral,petscRealSingle),PetscErrorCode,(TS,Ptr{Vec{Float32}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSAdjointSetRHSJacobian(arg1::TS,arg2::Mat{Float32},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TSAdjointSetRHSJacobian,petscRealSingle),PetscErrorCode,(TS,Mat{Float32},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function TSAdjointSolve(arg0::Type{Float32},arg1::TS)
    ccall((:TSAdjointSolve,petscRealSingle),PetscErrorCode,(TS,),arg1)
end
=#
#= skipping function with undefined symbols:
 function TSAdjointSetSteps(arg0::Type{Float32},arg1::TS,arg2::Integer)
    ccall((:TSAdjointSetSteps,petscRealSingle),PetscErrorCode,(TS,Int64),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSAdjointComputeRHSJacobian(arg1::TS,arg2::Float32,arg3::Vec{Float32},arg4::Mat{Float32})
    ccall((:TSAdjointComputeRHSJacobian,petscRealSingle),PetscErrorCode,(TS,Float32,Vec{Float32},Mat{Float32}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function TSAdjointStep(arg0::Type{Float32},arg1::TS)
    ccall((:TSAdjointStep,petscRealSingle),PetscErrorCode,(TS,),arg1)
end
=#
#= skipping function with undefined symbols:
 function TSAdjointSetUp(arg0::Type{Float32},arg1::TS)
    ccall((:TSAdjointSetUp,petscRealSingle),PetscErrorCode,(TS,),arg1)
end
=#
#= skipping function with undefined symbols:
 function TSAdjointComputeDRDPFunction(arg1::TS,arg2::Float32,arg3::Vec{Float32},arg4::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    ccall((:TSAdjointComputeDRDPFunction,petscRealSingle),PetscErrorCode,(TS,Float32,Vec{Float32},Ptr{Vec{Float32}}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function TSAdjointComputeDRDYFunction(arg1::TS,arg2::Float32,arg3::Vec{Float32},arg4::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    ccall((:TSAdjointComputeDRDYFunction,petscRealSingle),PetscErrorCode,(TS,Float32,Vec{Float32},Ptr{Vec{Float32}}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function TSAdjointComputeCostIntegrand(arg1::TS,arg2::Float32,arg3::Vec{Float32},arg4::Vec{Float32})
    ccall((:TSAdjointComputeCostIntegrand,petscRealSingle),PetscErrorCode,(TS,Float32,Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function TSSetDuration(arg0::Type{Float32},arg1::TS,arg2::Integer,arg3::Float32)
    ccall((:TSSetDuration,petscRealSingle),PetscErrorCode,(TS,Int64,Float32),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function TSGetDuration(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:TSGetDuration,petscRealSingle),PetscErrorCode,(TS,Ptr{Int64},Ptr{Float32}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function TSSetExactFinalTime(arg0::Type{Float32},arg1::TS,arg2::TSExactFinalTimeOption)
    ccall((:TSSetExactFinalTime,petscRealSingle),PetscErrorCode,(TS,TSExactFinalTimeOption),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSMonitorDefault(arg1::TS,arg2::Integer,arg3::Float32,arg4::Vec{Float32},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TSMonitorDefault,petscRealSingle),PetscErrorCode,(TS,Int64,Float32,Vec{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function TSMonitorDrawCtxCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Symbol},arg3::Union{ByteString,Symbol},arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Integer,arg9::Union{Ptr{TSMonitorDrawCtx},StridedArray{TSMonitorDrawCtx},Ptr{TSMonitorDrawCtx},Ref{TSMonitorDrawCtx}})
    ccall((:TSMonitorDrawCtxCreate,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Cstring,Cint,Cint,Cint,Cint,Int64,Ptr{TSMonitorDrawCtx}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
end
=#
#= skipping function with undefined symbols:
 function TSMonitorDrawCtxDestroy(arg0::Type{Float32},arg1::Union{Ptr{TSMonitorDrawCtx},StridedArray{TSMonitorDrawCtx},Ptr{TSMonitorDrawCtx},Ref{TSMonitorDrawCtx}})
    ccall((:TSMonitorDrawCtxDestroy,petscRealSingle),PetscErrorCode,(Ptr{TSMonitorDrawCtx},),arg1)
end
=#
#= skipping function with undefined symbols:
 function TSMonitorDrawSolution(arg1::TS,arg2::Integer,arg3::Float32,arg4::Vec{Float32},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TSMonitorDrawSolution,petscRealSingle),PetscErrorCode,(TS,Int64,Float32,Vec{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function TSMonitorDrawSolutionPhase(arg1::TS,arg2::Integer,arg3::Float32,arg4::Vec{Float32},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TSMonitorDrawSolutionPhase,petscRealSingle),PetscErrorCode,(TS,Int64,Float32,Vec{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function TSMonitorDrawError(arg1::TS,arg2::Integer,arg3::Float32,arg4::Vec{Float32},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TSMonitorDrawError,petscRealSingle),PetscErrorCode,(TS,Int64,Float32,Vec{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function TSMonitorSolutionBinary(arg1::TS,arg2::Integer,arg3::Float32,arg4::Vec{Float32},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TSMonitorSolutionBinary,petscRealSingle),PetscErrorCode,(TS,Int64,Float32,Vec{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function TSMonitorSolutionVTK(arg1::TS,arg2::Integer,arg3::Float32,arg4::Vec{Float32},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TSMonitorSolutionVTK,petscRealSingle),PetscErrorCode,(TS,Int64,Float32,Vec{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
end
=#
function TSMonitorSolutionVTKDestroy(arg0::Type{Float32},arg1::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSMonitorSolutionVTKDestroy,petscRealSingle),PetscErrorCode,(Ptr{Void},),arg1)
    return err
end

#= skipping function with undefined symbols:
 function TSStep(arg0::Type{Float32},arg1::TS)
    ccall((:TSStep,petscRealSingle),PetscErrorCode,(TS,),arg1)
end
=#
#= skipping function with undefined symbols:
 function TSEvaluateStep(arg1::TS,arg2::Integer,arg3::Vec{Float32},arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:TSEvaluateStep,petscRealSingle),PetscErrorCode,(TS,Int64,Vec{Float32},Ptr{PetscBool}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function TSSolve(arg1::TS,arg2::Vec{Float32})
    ccall((:TSSolve,petscRealSingle),PetscErrorCode,(TS,Vec{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSGetEquationType(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{TSEquationType},StridedArray{TSEquationType},Ptr{TSEquationType},Ref{TSEquationType}})
    ccall((:TSGetEquationType,petscRealSingle),PetscErrorCode,(TS,Ptr{TSEquationType}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSSetEquationType(arg0::Type{Float32},arg1::TS,arg2::TSEquationType)
    ccall((:TSSetEquationType,petscRealSingle),PetscErrorCode,(TS,TSEquationType),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSGetConvergedReason(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{TSConvergedReason},StridedArray{TSConvergedReason},Ptr{TSConvergedReason},Ref{TSConvergedReason}})
    ccall((:TSGetConvergedReason,petscRealSingle),PetscErrorCode,(TS,Ptr{TSConvergedReason}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSSetConvergedReason(arg0::Type{Float32},arg1::TS,arg2::TSConvergedReason)
    ccall((:TSSetConvergedReason,petscRealSingle),PetscErrorCode,(TS,TSConvergedReason),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSGetSolveTime(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:TSGetSolveTime,petscRealSingle),PetscErrorCode,(TS,Ptr{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSGetSNESIterations(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:TSGetSNESIterations,petscRealSingle),PetscErrorCode,(TS,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSGetKSPIterations(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:TSGetKSPIterations,petscRealSingle),PetscErrorCode,(TS,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSGetStepRejections(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:TSGetStepRejections,petscRealSingle),PetscErrorCode,(TS,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSSetMaxStepRejections(arg0::Type{Float32},arg1::TS,arg2::Integer)
    ccall((:TSSetMaxStepRejections,petscRealSingle),PetscErrorCode,(TS,Int64),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSGetSNESFailures(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:TSGetSNESFailures,petscRealSingle),PetscErrorCode,(TS,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSSetMaxSNESFailures(arg0::Type{Float32},arg1::TS,arg2::Integer)
    ccall((:TSSetMaxSNESFailures,petscRealSingle),PetscErrorCode,(TS,Int64),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSSetErrorIfStepFails(arg0::Type{Float32},arg1::TS,arg2::PetscBool)
    ccall((:TSSetErrorIfStepFails,petscRealSingle),PetscErrorCode,(TS,PetscBool),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSRollBack(arg0::Type{Float32},arg1::TS)
    ccall((:TSRollBack,petscRealSingle),PetscErrorCode,(TS,),arg1)
end
=#
#= skipping function with undefined symbols:
 function TSGetTotalSteps(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:TSGetTotalSteps,petscRealSingle),PetscErrorCode,(TS,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSGetStages(arg1::TS,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Vec{Float32}}},StridedArray{Ptr{Vec{Float32}}},Ptr{Ptr{Vec{Float32}}},Ref{Ptr{Vec{Float32}}}})
    ccall((:TSGetStages,petscRealSingle),PetscErrorCode,(TS,Ptr{Int64},Ptr{Ptr{Vec{Float32}}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function TSSetInitialTimeStep(arg0::Type{Float32},arg1::TS,arg2::Float32,arg3::Float32)
    ccall((:TSSetInitialTimeStep,petscRealSingle),PetscErrorCode,(TS,Float32,Float32),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function TSGetTimeStep(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:TSGetTimeStep,petscRealSingle),PetscErrorCode,(TS,Ptr{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSGetTime(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:TSGetTime,petscRealSingle),PetscErrorCode,(TS,Ptr{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSSetTime(arg0::Type{Float32},arg1::TS,arg2::Float32)
    ccall((:TSSetTime,petscRealSingle),PetscErrorCode,(TS,Float32),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSGetTimeStepNumber(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:TSGetTimeStepNumber,petscRealSingle),PetscErrorCode,(TS,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSSetTimeStep(arg0::Type{Float32},arg1::TS,arg2::Float32)
    ccall((:TSSetTimeStep,petscRealSingle),PetscErrorCode,(TS,Float32),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSGetPrevTime(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:TSGetPrevTime,petscRealSingle),PetscErrorCode,(TS,Ptr{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSSetRHSFunction(arg1::TS,arg2::Vec{Float32},arg3::TSRHSFunction,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TSSetRHSFunction,petscRealSingle),PetscErrorCode,(TS,Vec{Float32},TSRHSFunction,Ptr{Void}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function TSGetRHSFunction(arg1::TS,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg3::Union{Ptr{TSRHSFunction},StridedArray{TSRHSFunction},Ptr{TSRHSFunction},Ref{TSRHSFunction}},arg4::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    ccall((:TSGetRHSFunction,petscRealSingle),PetscErrorCode,(TS,Ptr{Vec{Float32}},Ptr{TSRHSFunction},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function TSSetRHSJacobian(arg1::TS,arg2::Mat{Float32},arg3::Mat{Float32},arg4::TSRHSJacobian,arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TSSetRHSJacobian,petscRealSingle),PetscErrorCode,(TS,Mat{Float32},Mat{Float32},TSRHSJacobian,Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function TSGetRHSJacobian(arg1::TS,arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}},arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}},arg4::Union{Ptr{TSRHSJacobian},StridedArray{TSRHSJacobian},Ptr{TSRHSJacobian},Ref{TSRHSJacobian}},arg5::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    ccall((:TSGetRHSJacobian,petscRealSingle),PetscErrorCode,(TS,Ptr{Mat{Float32}},Ptr{Mat{Float32}},Ptr{TSRHSJacobian},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function TSRHSJacobianSetReuse(arg0::Type{Float32},arg1::TS,arg2::PetscBool)
    ccall((:TSRHSJacobianSetReuse,petscRealSingle),PetscErrorCode,(TS,PetscBool),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSSetSolutionFunction(arg0::Type{Float32},arg1::TS,arg2::TSSolutionFunction,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TSSetSolutionFunction,petscRealSingle),PetscErrorCode,(TS,TSSolutionFunction,Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function TSSetForcingFunction(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TSSetForcingFunction,petscRealSingle),PetscErrorCode,(TS,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function TSSetIFunction(arg1::TS,arg2::Vec{Float32},arg3::TSIFunction,arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TSSetIFunction,petscRealSingle),PetscErrorCode,(TS,Vec{Float32},TSIFunction,Ptr{Void}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function TSGetIFunction(arg1::TS,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg3::Union{Ptr{TSIFunction},StridedArray{TSIFunction},Ptr{TSIFunction},Ref{TSIFunction}},arg4::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    ccall((:TSGetIFunction,petscRealSingle),PetscErrorCode,(TS,Ptr{Vec{Float32}},Ptr{TSIFunction},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function TSSetIJacobian(arg1::TS,arg2::Mat{Float32},arg3::Mat{Float32},arg4::TSIJacobian,arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TSSetIJacobian,petscRealSingle),PetscErrorCode,(TS,Mat{Float32},Mat{Float32},TSIJacobian,Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function TSGetIJacobian(arg1::TS,arg2::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}},arg3::Union{Ptr{Mat{Float32}},StridedArray{Mat{Float32}},Ptr{Mat{Float32}},Ref{Mat{Float32}}},arg4::Union{Ptr{TSIJacobian},StridedArray{TSIJacobian},Ptr{TSIJacobian},Ref{TSIJacobian}},arg5::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    ccall((:TSGetIJacobian,petscRealSingle),PetscErrorCode,(TS,Ptr{Mat{Float32}},Ptr{Mat{Float32}},Ptr{TSIJacobian},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function TSComputeRHSFunctionLinear(arg1::TS,arg2::Float32,arg3::Vec{Float32},arg4::Vec{Float32},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TSComputeRHSFunctionLinear,petscRealSingle),PetscErrorCode,(TS,Float32,Vec{Float32},Vec{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function TSComputeRHSJacobianConstant(arg1::TS,arg2::Float32,arg3::Vec{Float32},arg4::Mat{Float32},arg5::Mat{Float32},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TSComputeRHSJacobianConstant,petscRealSingle),PetscErrorCode,(TS,Float32,Vec{Float32},Mat{Float32},Mat{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
#= skipping function with undefined symbols:
 function TSComputeIFunctionLinear(arg1::TS,arg2::Float32,arg3::Vec{Float32},arg4::Vec{Float32},arg5::Vec{Float32},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TSComputeIFunctionLinear,petscRealSingle),PetscErrorCode,(TS,Float32,Vec{Float32},Vec{Float32},Vec{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
#= skipping function with undefined symbols:
 function TSComputeIJacobianConstant(arg1::TS,arg2::Float32,arg3::Vec{Float32},arg4::Vec{Float32},arg5::Float32,arg6::Mat{Float32},arg7::Mat{Float32},arg8::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TSComputeIJacobianConstant,petscRealSingle),PetscErrorCode,(TS,Float32,Vec{Float32},Vec{Float32},Float32,Mat{Float32},Mat{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
end
=#
#= skipping function with undefined symbols:
 function TSComputeSolutionFunction(arg1::TS,arg2::Float32,arg3::Vec{Float32})
    ccall((:TSComputeSolutionFunction,petscRealSingle),PetscErrorCode,(TS,Float32,Vec{Float32}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function TSComputeForcingFunction(arg1::TS,arg2::Float32,arg3::Vec{Float32})
    ccall((:TSComputeForcingFunction,petscRealSingle),PetscErrorCode,(TS,Float32,Vec{Float32}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function TSComputeIJacobianDefaultColor(arg1::TS,arg2::Float32,arg3::Vec{Float32},arg4::Vec{Float32},arg5::Float32,arg6::Mat{Float32},arg7::Mat{Float32},arg8::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TSComputeIJacobianDefaultColor,petscRealSingle),PetscErrorCode,(TS,Float32,Vec{Float32},Vec{Float32},Float32,Mat{Float32},Mat{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
end
=#
#= skipping function with undefined symbols:
 function TSSetPreStep(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TSSetPreStep,petscRealSingle),PetscErrorCode,(TS,Ptr{Void}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSSetPreStage(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TSSetPreStage,petscRealSingle),PetscErrorCode,(TS,Ptr{Void}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSSetPostStage(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TSSetPostStage,petscRealSingle),PetscErrorCode,(TS,Ptr{Void}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSSetPostStep(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TSSetPostStep,petscRealSingle),PetscErrorCode,(TS,Ptr{Void}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSPreStep(arg0::Type{Float32},arg1::TS)
    ccall((:TSPreStep,petscRealSingle),PetscErrorCode,(TS,),arg1)
end
=#
#= skipping function with undefined symbols:
 function TSPreStage(arg0::Type{Float32},arg1::TS,arg2::Float32)
    ccall((:TSPreStage,petscRealSingle),PetscErrorCode,(TS,Float32),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSPostStage(arg1::TS,arg2::Float32,arg3::Integer,arg4::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    ccall((:TSPostStage,petscRealSingle),PetscErrorCode,(TS,Float32,Int64,Ptr{Vec{Float32}}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function TSPostStep(arg0::Type{Float32},arg1::TS)
    ccall((:TSPostStep,petscRealSingle),PetscErrorCode,(TS,),arg1)
end
=#
#= skipping function with undefined symbols:
 function TSSetRetainStages(arg0::Type{Float32},arg1::TS,arg2::PetscBool)
    ccall((:TSSetRetainStages,petscRealSingle),PetscErrorCode,(TS,PetscBool),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSInterpolate(arg1::TS,arg2::Float32,arg3::Vec{Float32})
    ccall((:TSInterpolate,petscRealSingle),PetscErrorCode,(TS,Float32,Vec{Float32}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function TSSetTolerances(arg1::TS,arg2::Float32,arg3::Vec{Float32},arg4::Float32,arg5::Vec{Float32})
    ccall((:TSSetTolerances,petscRealSingle),PetscErrorCode,(TS,Float32,Vec{Float32},Float32,Vec{Float32}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function TSGetTolerances(arg1::TS,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    ccall((:TSGetTolerances,petscRealSingle),PetscErrorCode,(TS,Ptr{Float32},Ptr{Vec{Float32}},Ptr{Float32},Ptr{Vec{Float32}}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function TSErrorWeightedNormInfinity(arg1::TS,arg2::Vec{Float32},arg3::Vec{Float32},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:TSErrorWeightedNormInfinity,petscRealSingle),PetscErrorCode,(TS,Vec{Float32},Vec{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function TSErrorWeightedNorm2(arg1::TS,arg2::Vec{Float32},arg3::Vec{Float32},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:TSErrorWeightedNorm2,petscRealSingle),PetscErrorCode,(TS,Vec{Float32},Vec{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function TSErrorWeightedNorm(arg1::TS,arg2::Vec{Float32},arg3::Vec{Float32},arg4::NormType,arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:TSErrorWeightedNorm,petscRealSingle),PetscErrorCode,(TS,Vec{Float32},Vec{Float32},NormType,Ptr{Float32}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function TSSetCFLTimeLocal(arg0::Type{Float32},arg1::TS,arg2::Float32)
    ccall((:TSSetCFLTimeLocal,petscRealSingle),PetscErrorCode,(TS,Float32),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSGetCFLTime(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:TSGetCFLTime,petscRealSingle),PetscErrorCode,(TS,Ptr{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSPseudoSetTimeStep(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TSPseudoSetTimeStep,petscRealSingle),PetscErrorCode,(TS,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function TSPseudoTimeStepDefault(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TSPseudoTimeStepDefault,petscRealSingle),PetscErrorCode,(TS,Ptr{Float32},Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function TSPseudoComputeTimeStep(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:TSPseudoComputeTimeStep,petscRealSingle),PetscErrorCode,(TS,Ptr{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSPseudoSetMaxTimeStep(arg0::Type{Float32},arg1::TS,arg2::Float32)
    ccall((:TSPseudoSetMaxTimeStep,petscRealSingle),PetscErrorCode,(TS,Float32),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSPseudoSetVerifyTimeStep(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TSPseudoSetVerifyTimeStep,petscRealSingle),PetscErrorCode,(TS,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function TSPseudoVerifyTimeStepDefault(arg1::TS,arg2::Vec{Float32},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:TSPseudoVerifyTimeStepDefault,petscRealSingle),PetscErrorCode,(TS,Vec{Float32},Ptr{Void},Ptr{Float32},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function TSPseudoVerifyTimeStep(arg1::TS,arg2::Vec{Float32},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:TSPseudoVerifyTimeStep,petscRealSingle),PetscErrorCode,(TS,Vec{Float32},Ptr{Float32},Ptr{PetscBool}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function TSPseudoSetTimeStepIncrement(arg0::Type{Float32},arg1::TS,arg2::Float32)
    ccall((:TSPseudoSetTimeStepIncrement,petscRealSingle),PetscErrorCode,(TS,Float32),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSPseudoIncrementDtFromInitialDt(arg0::Type{Float32},arg1::TS)
    ccall((:TSPseudoIncrementDtFromInitialDt,petscRealSingle),PetscErrorCode,(TS,),arg1)
end
=#
#= skipping function with undefined symbols:
 function TSPythonSetType(arg0::Type{Float32},arg1::TS,arg2::Union{ByteString,Symbol})
    ccall((:TSPythonSetType,petscRealSingle),PetscErrorCode,(TS,Cstring),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSComputeRHSFunction(arg1::TS,arg2::Float32,arg3::Vec{Float32},arg4::Vec{Float32})
    ccall((:TSComputeRHSFunction,petscRealSingle),PetscErrorCode,(TS,Float32,Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function TSComputeRHSJacobian(arg1::TS,arg2::Float32,arg3::Vec{Float32},arg4::Mat{Float32},arg5::Mat{Float32})
    ccall((:TSComputeRHSJacobian,petscRealSingle),PetscErrorCode,(TS,Float32,Vec{Float32},Mat{Float32},Mat{Float32}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function TSComputeIFunction(arg1::TS,arg2::Float32,arg3::Vec{Float32},arg4::Vec{Float32},arg5::Vec{Float32},arg6::PetscBool)
    ccall((:TSComputeIFunction,petscRealSingle),PetscErrorCode,(TS,Float32,Vec{Float32},Vec{Float32},Vec{Float32},PetscBool),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
#= skipping function with undefined symbols:
 function TSComputeIJacobian(arg1::TS,arg2::Float32,arg3::Vec{Float32},arg4::Vec{Float32},arg5::Float32,arg6::Mat{Float32},arg7::Mat{Float32},arg8::PetscBool)
    ccall((:TSComputeIJacobian,petscRealSingle),PetscErrorCode,(TS,Float32,Vec{Float32},Vec{Float32},Float32,Mat{Float32},Mat{Float32},PetscBool),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8)
end
=#
#= skipping function with undefined symbols:
 function TSComputeLinearStability(arg0::Type{Float32},arg1::TS,arg2::Float32,arg3::Float32,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:TSComputeLinearStability,petscRealSingle),PetscErrorCode,(TS,Float32,Float32,Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function TSVISetVariableBounds(arg1::TS,arg2::Vec{Float32},arg3::Vec{Float32})
    ccall((:TSVISetVariableBounds,petscRealSingle),PetscErrorCode,(TS,Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMTSSetRHSFunction(arg0::Type{Float32},arg1::DM,arg2::TSRHSFunction,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMTSSetRHSFunction,petscRealSingle),PetscErrorCode,(DM,TSRHSFunction,Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMTSGetRHSFunction(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{TSRHSFunction},StridedArray{TSRHSFunction},Ptr{TSRHSFunction},Ref{TSRHSFunction}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    ccall((:DMTSGetRHSFunction,petscRealSingle),PetscErrorCode,(DM,Ptr{TSRHSFunction},Ptr{Ptr{Void}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMTSSetRHSJacobian(arg0::Type{Float32},arg1::DM,arg2::TSRHSJacobian,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMTSSetRHSJacobian,petscRealSingle),PetscErrorCode,(DM,TSRHSJacobian,Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMTSGetRHSJacobian(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{TSRHSJacobian},StridedArray{TSRHSJacobian},Ptr{TSRHSJacobian},Ref{TSRHSJacobian}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    ccall((:DMTSGetRHSJacobian,petscRealSingle),PetscErrorCode,(DM,Ptr{TSRHSJacobian},Ptr{Ptr{Void}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMTSSetIFunction(arg0::Type{Float32},arg1::DM,arg2::TSIFunction,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMTSSetIFunction,petscRealSingle),PetscErrorCode,(DM,TSIFunction,Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMTSGetIFunction(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{TSIFunction},StridedArray{TSIFunction},Ptr{TSIFunction},Ref{TSIFunction}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    ccall((:DMTSGetIFunction,petscRealSingle),PetscErrorCode,(DM,Ptr{TSIFunction},Ptr{Ptr{Void}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMTSSetIJacobian(arg0::Type{Float32},arg1::DM,arg2::TSIJacobian,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMTSSetIJacobian,petscRealSingle),PetscErrorCode,(DM,TSIJacobian,Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMTSGetIJacobian(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{TSIJacobian},StridedArray{TSIJacobian},Ptr{TSIJacobian},Ref{TSIJacobian}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    ccall((:DMTSGetIJacobian,petscRealSingle),PetscErrorCode,(DM,Ptr{TSIJacobian},Ptr{Ptr{Void}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMTSSetSolutionFunction(arg0::Type{Float32},arg1::DM,arg2::TSSolutionFunction,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMTSSetSolutionFunction,petscRealSingle),PetscErrorCode,(DM,TSSolutionFunction,Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMTSGetSolutionFunction(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{TSSolutionFunction},StridedArray{TSSolutionFunction},Ptr{TSSolutionFunction},Ref{TSSolutionFunction}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    ccall((:DMTSGetSolutionFunction,petscRealSingle),PetscErrorCode,(DM,Ptr{TSSolutionFunction},Ptr{Ptr{Void}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMTSSetForcingFunction(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMTSSetForcingFunction,petscRealSingle),PetscErrorCode,(DM,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMTSGetForcingFunction(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    ccall((:DMTSGetForcingFunction,petscRealSingle),PetscErrorCode,(DM,Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMTSGetMinRadius(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:DMTSGetMinRadius,petscRealSingle),PetscErrorCode,(DM,Ptr{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMTSSetMinRadius(arg0::Type{Float32},arg1::DM,arg2::Float32)
    ccall((:DMTSSetMinRadius,petscRealSingle),PetscErrorCode,(DM,Float32),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function DMTSCheckFromOptions(arg1::TS,arg2::Vec{Float32},arg3::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}},arg4::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    ccall((:DMTSCheckFromOptions,petscRealSingle),PetscErrorCode,(TS,Vec{Float32},Ptr{Ptr{Void}},Ptr{Ptr{Void}}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMTSSetIFunctionLocal(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMTSSetIFunctionLocal,petscRealSingle),PetscErrorCode,(DM,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMTSSetIJacobianLocal(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMTSSetIJacobianLocal,petscRealSingle),PetscErrorCode,(DM,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMTSSetRHSFunctionLocal(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMTSSetRHSFunctionLocal,petscRealSingle),PetscErrorCode,(DM,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMTSSetIFunctionSerialize(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMTSSetIFunctionSerialize,petscRealSingle),PetscErrorCode,(DM,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMTSSetIJacobianSerialize(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMTSSetIJacobianSerialize,petscRealSingle),PetscErrorCode,(DM,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMDATSSetRHSFunctionLocal(arg0::Type{Float32},arg1::DM,arg2::InsertMode,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMDATSSetRHSFunctionLocal,petscRealSingle),PetscErrorCode,(DM,InsertMode,Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMDATSSetRHSJacobianLocal(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMDATSSetRHSJacobianLocal,petscRealSingle),PetscErrorCode,(DM,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMDATSSetIFunctionLocal(arg0::Type{Float32},arg1::DM,arg2::InsertMode,arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMDATSSetIFunctionLocal,petscRealSingle),PetscErrorCode,(DM,InsertMode,Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function DMDATSSetIJacobianLocal(arg0::Type{Float32},arg1::DM,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:DMDATSSetIJacobianLocal,petscRealSingle),PetscErrorCode,(DM,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function DMPlexTSGetGeometryFVM(arg1::DM,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:DMPlexTSGetGeometryFVM,petscRealSingle),PetscErrorCode,(DM,Ptr{Vec{Float32}},Ptr{Vec{Float32}},Ptr{Float32}),arg1,arg2,arg3,arg4)
end
=#
function TSMonitorDMDARayDestroy(arg0::Type{Float32},arg1::Union{Ptr{Ptr{Void}},StridedArray{Ptr{Void}},Ptr{Ptr{Void}},Ref{Ptr{Void}}})
    err = ccall((:TSMonitorDMDARayDestroy,petscRealSingle),PetscErrorCode,(Ptr{Ptr{Void}},),arg1)
    return err
end

#= skipping function with undefined symbols:
 function TSMonitorDMDARay(arg1::TS,arg2::Integer,arg3::Float32,arg4::Vec{Float32},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TSMonitorDMDARay,petscRealSingle),PetscErrorCode,(TS,Int64,Float32,Vec{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function TSMonitorLGDMDARay(arg1::TS,arg2::Integer,arg3::Float32,arg4::Vec{Float32},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TSMonitorLGDMDARay,petscRealSingle),PetscErrorCode,(TS,Int64,Float32,Vec{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function TSGetType(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{TSType},StridedArray{TSType},Ptr{TSType},Ref{TSType}})
    ccall((:TSGetType,petscRealSingle),PetscErrorCode,(TS,Ptr{Ptr{UInt8}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSSetType(arg0::Type{Float32},arg1::TS,arg2::TSType)
    ccall((:TSSetType,petscRealSingle),PetscErrorCode,(TS,Cstring),arg1,arg2)
end
=#
function TSRegister(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

#= skipping function with undefined symbols:
 function TSGetSNES(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{SNES},StridedArray{SNES},Ptr{SNES},Ref{SNES}})
    ccall((:TSGetSNES,petscRealSingle),PetscErrorCode,(TS,Ptr{SNES}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSSetSNES(arg0::Type{Float32},arg1::TS,arg2::SNES)
    ccall((:TSSetSNES,petscRealSingle),PetscErrorCode,(TS,SNES),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSGetKSP(arg1::TS,arg2::Union{Ptr{KSP{Float32}},StridedArray{KSP{Float32}},Ptr{KSP{Float32}},Ref{KSP{Float32}}})
    ccall((:TSGetKSP,petscRealSingle),PetscErrorCode,(TS,Ptr{KSP{Float32}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSView(arg1::TS,arg2::PetscViewer{Float32})
    ccall((:TSView,petscRealSingle),PetscErrorCode,(TS,PetscViewer{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSLoad(arg1::TS,arg2::PetscViewer{Float32})
    ccall((:TSLoad,petscRealSingle),PetscErrorCode,(TS,PetscViewer{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSGetApplicationContext(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TSGetApplicationContext,petscRealSingle),PetscErrorCode,(TS,Ptr{Void}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSMonitorLGCtxCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Symbol},arg3::Union{ByteString,Symbol},arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Integer,arg9::Union{Ptr{TSMonitorLGCtx},StridedArray{TSMonitorLGCtx},Ptr{TSMonitorLGCtx},Ref{TSMonitorLGCtx}})
    ccall((:TSMonitorLGCtxCreate,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Cstring,Cint,Cint,Cint,Cint,Int64,Ptr{TSMonitorLGCtx}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
end
=#
#= skipping function with undefined symbols:
 function TSMonitorLGCtxDestroy(arg0::Type{Float32},arg1::Union{Ptr{TSMonitorLGCtx},StridedArray{TSMonitorLGCtx},Ptr{TSMonitorLGCtx},Ref{TSMonitorLGCtx}})
    ccall((:TSMonitorLGCtxDestroy,petscRealSingle),PetscErrorCode,(Ptr{TSMonitorLGCtx},),arg1)
end
=#
#= skipping function with undefined symbols:
 function TSMonitorLGTimeStep(arg1::TS,arg2::Integer,arg3::Float32,arg4::Vec{Float32},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TSMonitorLGTimeStep,petscRealSingle),PetscErrorCode,(TS,Int64,Float32,Vec{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function TSMonitorLGSolution(arg1::TS,arg2::Integer,arg3::Float32,arg4::Vec{Float32},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TSMonitorLGSolution,petscRealSingle),PetscErrorCode,(TS,Int64,Float32,Vec{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function TSMonitorLGSetVariableNames(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    ccall((:TSMonitorLGSetVariableNames,petscRealSingle),PetscErrorCode,(TS,Ptr{Ptr{UInt8}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSMonitorLGGetVariableNames(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Ptr{Ptr{UInt8}}},StridedArray{Ptr{Ptr{UInt8}}},Ptr{Ptr{Ptr{UInt8}}},Ref{Ptr{Ptr{UInt8}}}})
    ccall((:TSMonitorLGGetVariableNames,petscRealSingle),PetscErrorCode,(TS,Ptr{Ptr{Ptr{UInt8}}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSMonitorLGCtxSetVariableNames(arg0::Type{Float32},arg1::TSMonitorLGCtx,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    ccall((:TSMonitorLGCtxSetVariableNames,petscRealSingle),PetscErrorCode,(TSMonitorLGCtx,Ptr{Ptr{UInt8}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSMonitorLGSetDisplayVariables(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    ccall((:TSMonitorLGSetDisplayVariables,petscRealSingle),PetscErrorCode,(TS,Ptr{Ptr{UInt8}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSMonitorLGCtxSetDisplayVariables(arg0::Type{Float32},arg1::TSMonitorLGCtx,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    ccall((:TSMonitorLGCtxSetDisplayVariables,petscRealSingle),PetscErrorCode,(TSMonitorLGCtx,Ptr{Ptr{UInt8}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSMonitorLGSetTransform(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TSMonitorLGSetTransform,petscRealSingle),PetscErrorCode,(TS,Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function TSMonitorLGCtxSetTransform(arg0::Type{Float32},arg1::TSMonitorLGCtx,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TSMonitorLGCtxSetTransform,petscRealSingle),PetscErrorCode,(TSMonitorLGCtx,Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function TSMonitorLGError(arg1::TS,arg2::Integer,arg3::Float32,arg4::Vec{Float32},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TSMonitorLGError,petscRealSingle),PetscErrorCode,(TS,Int64,Float32,Vec{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function TSMonitorLGSNESIterations(arg1::TS,arg2::Integer,arg3::Float32,arg4::Vec{Float32},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TSMonitorLGSNESIterations,petscRealSingle),PetscErrorCode,(TS,Int64,Float32,Vec{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function TSMonitorLGKSPIterations(arg1::TS,arg2::Integer,arg3::Float32,arg4::Vec{Float32},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TSMonitorLGKSPIterations,petscRealSingle),PetscErrorCode,(TS,Int64,Float32,Vec{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function TSMonitorEnvelopeCtxCreate(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{TSMonitorEnvelopeCtx},StridedArray{TSMonitorEnvelopeCtx},Ptr{TSMonitorEnvelopeCtx},Ref{TSMonitorEnvelopeCtx}})
    ccall((:TSMonitorEnvelopeCtxCreate,petscRealSingle),PetscErrorCode,(TS,Ptr{TSMonitorEnvelopeCtx}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSMonitorEnvelope(arg1::TS,arg2::Integer,arg3::Float32,arg4::Vec{Float32},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TSMonitorEnvelope,petscRealSingle),PetscErrorCode,(TS,Int64,Float32,Vec{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function TSMonitorEnvelopeGetBounds(arg1::TS,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    ccall((:TSMonitorEnvelopeGetBounds,petscRealSingle),PetscErrorCode,(TS,Ptr{Vec{Float32}},Ptr{Vec{Float32}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function TSMonitorEnvelopeCtxDestroy(arg0::Type{Float32},arg1::Union{Ptr{TSMonitorEnvelopeCtx},StridedArray{TSMonitorEnvelopeCtx},Ptr{TSMonitorEnvelopeCtx},Ref{TSMonitorEnvelopeCtx}})
    ccall((:TSMonitorEnvelopeCtxDestroy,petscRealSingle),PetscErrorCode,(Ptr{TSMonitorEnvelopeCtx},),arg1)
end
=#
#= skipping function with undefined symbols:
 function TSMonitorSPEigCtxCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{ByteString,Symbol},arg3::Union{ByteString,Symbol},arg4::Integer,arg5::Integer,arg6::Integer,arg7::Integer,arg8::Integer,arg9::Union{Ptr{TSMonitorSPEigCtx},StridedArray{TSMonitorSPEigCtx},Ptr{TSMonitorSPEigCtx},Ref{TSMonitorSPEigCtx}})
    ccall((:TSMonitorSPEigCtxCreate,petscRealSingle),PetscErrorCode,(comm_type,Cstring,Cstring,Cint,Cint,Cint,Cint,Int64,Ptr{TSMonitorSPEigCtx}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
end
=#
#= skipping function with undefined symbols:
 function TSMonitorSPEigCtxDestroy(arg0::Type{Float32},arg1::Union{Ptr{TSMonitorSPEigCtx},StridedArray{TSMonitorSPEigCtx},Ptr{TSMonitorSPEigCtx},Ref{TSMonitorSPEigCtx}})
    ccall((:TSMonitorSPEigCtxDestroy,petscRealSingle),PetscErrorCode,(Ptr{TSMonitorSPEigCtx},),arg1)
end
=#
#= skipping function with undefined symbols:
 function TSMonitorSPEig(arg1::TS,arg2::Integer,arg3::Float32,arg4::Vec{Float32},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TSMonitorSPEig,petscRealSingle),PetscErrorCode,(TS,Int64,Float32,Vec{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function TSSetEventMonitor(arg0::Type{Float32},arg1::TS,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg7::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TSSetEventMonitor,petscRealSingle),PetscErrorCode,(TS,Int64,Ptr{Int64},Ptr{PetscBool},Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
#= skipping function with undefined symbols:
 function TSSetEventTolerances(arg0::Type{Float32},arg1::TS,arg2::Float32,arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:TSSetEventTolerances,petscRealSingle),PetscErrorCode,(TS,Float32,Ptr{Float32}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function TSSSPSetType(arg0::Type{Float32},arg1::TS,arg2::TSSSPType)
    ccall((:TSSSPSetType,petscRealSingle),PetscErrorCode,(TS,Cstring),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSSSPGetType(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{TSSSPType},StridedArray{TSSSPType},Ptr{TSSSPType},Ref{TSSSPType}})
    ccall((:TSSSPGetType,petscRealSingle),PetscErrorCode,(TS,Ptr{Ptr{UInt8}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSSSPSetNumStages(arg0::Type{Float32},arg1::TS,arg2::Integer)
    ccall((:TSSSPSetNumStages,petscRealSingle),PetscErrorCode,(TS,Int64),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSSSPGetNumStages(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:TSSSPGetNumStages,petscRealSingle),PetscErrorCode,(TS,Ptr{Int64}),arg1,arg2)
end
=#
function TSSSPFinalizePackage(arg0::Type{Float32})
    err = ccall((:TSSSPFinalizePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function TSSSPInitializePackage(arg0::Type{Float32})
    err = ccall((:TSSSPInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

#= skipping function with undefined symbols:
 function TSGetAdapt(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{TSAdapt},StridedArray{TSAdapt},Ptr{TSAdapt},Ref{TSAdapt}})
    ccall((:TSGetAdapt,petscRealSingle),PetscErrorCode,(TS,Ptr{TSAdapt}),arg1,arg2)
end
=#
function TSAdaptRegister(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSAdaptRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function TSAdaptInitializePackage(arg0::Type{Float32})
    err = ccall((:TSAdaptInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function TSAdaptFinalizePackage(arg0::Type{Float32})
    err = ccall((:TSAdaptFinalizePackage,petscRealSingle),PetscErrorCode,())
    return err
end

#= skipping function with undefined symbols:
 function TSAdaptCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{TSAdapt},StridedArray{TSAdapt},Ptr{TSAdapt},Ref{TSAdapt}})
    ccall((:TSAdaptCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{TSAdapt}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSAdaptSetType(arg0::Type{Float32},arg1::TSAdapt,arg2::TSAdaptType)
    ccall((:TSAdaptSetType,petscRealSingle),PetscErrorCode,(TSAdapt,Cstring),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSAdaptSetOptionsPrefix(arg0::Type{Float32},arg1::TSAdapt,arg2::Union{ByteString,Symbol})
    ccall((:TSAdaptSetOptionsPrefix,petscRealSingle),PetscErrorCode,(TSAdapt,Cstring),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSAdaptCandidatesClear(arg0::Type{Float32},arg1::TSAdapt)
    ccall((:TSAdaptCandidatesClear,petscRealSingle),PetscErrorCode,(TSAdapt,),arg1)
end
=#
#= skipping function with undefined symbols:
 function TSAdaptCandidateAdd(arg0::Type{Float32},arg1::TSAdapt,arg2::Union{ByteString,Symbol},arg3::Integer,arg4::Integer,arg5::Float32,arg6::Float32,arg7::PetscBool)
    ccall((:TSAdaptCandidateAdd,petscRealSingle),PetscErrorCode,(TSAdapt,Cstring,Int64,Int64,Float32,Float32,PetscBool),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
#= skipping function with undefined symbols:
 function TSAdaptCandidatesGet(arg0::Type{Float32},arg1::TSAdapt,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg4::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg5::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg6::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}})
    ccall((:TSAdaptCandidatesGet,petscRealSingle),PetscErrorCode,(TSAdapt,Ptr{Int64},Ptr{Ptr{Int64}},Ptr{Ptr{Int64}},Ptr{Ptr{Float32}},Ptr{Ptr{Float32}}),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
#= skipping function with undefined symbols:
 function TSAdaptChoose(arg0::Type{Float32},arg1::TSAdapt,arg2::TS,arg3::Float32,arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:TSAdaptChoose,petscRealSingle),PetscErrorCode,(TSAdapt,TS,Float32,Ptr{Int64},Ptr{Float32},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
#= skipping function with undefined symbols:
 function TSAdaptCheckStage(arg0::Type{Float32},arg1::TSAdapt,arg2::TS,arg3::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:TSAdaptCheckStage,petscRealSingle),PetscErrorCode,(TSAdapt,TS,Ptr{PetscBool}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function TSAdaptView(arg1::TSAdapt,arg2::PetscViewer{Float32})
    ccall((:TSAdaptView,petscRealSingle),PetscErrorCode,(TSAdapt,PetscViewer{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSAdaptLoad(arg1::TSAdapt,arg2::PetscViewer{Float32})
    ccall((:TSAdaptLoad,petscRealSingle),PetscErrorCode,(TSAdapt,PetscViewer{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSAdaptSetFromOptions(arg0::Type{Float32},arg1::Union{Ptr{PetscOptions},StridedArray{PetscOptions},Ptr{PetscOptions},Ref{PetscOptions}},arg2::TSAdapt)
    ccall((:TSAdaptSetFromOptions,petscRealSingle),PetscErrorCode,(Ptr{PetscOptions},TSAdapt),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSAdaptReset(arg0::Type{Float32},arg1::TSAdapt)
    ccall((:TSAdaptReset,petscRealSingle),PetscErrorCode,(TSAdapt,),arg1)
end
=#
#= skipping function with undefined symbols:
 function TSAdaptDestroy(arg0::Type{Float32},arg1::Union{Ptr{TSAdapt},StridedArray{TSAdapt},Ptr{TSAdapt},Ref{TSAdapt}})
    ccall((:TSAdaptDestroy,petscRealSingle),PetscErrorCode,(Ptr{TSAdapt},),arg1)
end
=#
#= skipping function with undefined symbols:
 function TSAdaptSetMonitor(arg0::Type{Float32},arg1::TSAdapt,arg2::PetscBool)
    ccall((:TSAdaptSetMonitor,petscRealSingle),PetscErrorCode,(TSAdapt,PetscBool),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSAdaptSetStepLimits(arg0::Type{Float32},arg1::TSAdapt,arg2::Float32,arg3::Float32)
    ccall((:TSAdaptSetStepLimits,petscRealSingle),PetscErrorCode,(TSAdapt,Float32,Float32),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function TSAdaptSetCheckStage(arg0::Type{Float32},arg1::TSAdapt,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TSAdaptSetCheckStage,petscRealSingle),PetscErrorCode,(TSAdapt,Ptr{Void}),arg1,arg2)
end
=#
function TSGLAdaptRegister(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSGLAdaptRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function TSGLAdaptInitializePackage(arg0::Type{Float32})
    err = ccall((:TSGLAdaptInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function TSGLAdaptFinalizePackage(arg0::Type{Float32})
    err = ccall((:TSGLAdaptFinalizePackage,petscRealSingle),PetscErrorCode,())
    return err
end

#= skipping function with undefined symbols:
 function TSGLAdaptCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{TSGLAdapt},StridedArray{TSGLAdapt},Ptr{TSGLAdapt},Ref{TSGLAdapt}})
    ccall((:TSGLAdaptCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{TSGLAdapt}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSGLAdaptSetType(arg0::Type{Float32},arg1::TSGLAdapt,arg2::TSGLAdaptType)
    ccall((:TSGLAdaptSetType,petscRealSingle),PetscErrorCode,(TSGLAdapt,Cstring),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSGLAdaptSetOptionsPrefix(arg0::Type{Float32},arg1::TSGLAdapt,arg2::Union{ByteString,Symbol})
    ccall((:TSGLAdaptSetOptionsPrefix,petscRealSingle),PetscErrorCode,(TSGLAdapt,Cstring),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSGLAdaptChoose(arg0::Type{Float32},arg1::TSGLAdapt,arg2::Integer,arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::Integer,arg7::Float32,arg8::Float32,arg9::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg10::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg11::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:TSGLAdaptChoose,petscRealSingle),PetscErrorCode,(TSGLAdapt,Int64,Ptr{Int64},Ptr{Float32},Ptr{Float32},Int64,Float32,Float32,Ptr{Int64},Ptr{Float32},Ptr{PetscBool}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11)
end
=#
#= skipping function with undefined symbols:
 function TSGLAdaptView(arg1::TSGLAdapt,arg2::PetscViewer{Float32})
    ccall((:TSGLAdaptView,petscRealSingle),PetscErrorCode,(TSGLAdapt,PetscViewer{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSGLAdaptSetFromOptions(arg0::Type{Float32},arg1::Union{Ptr{PetscOptions},StridedArray{PetscOptions},Ptr{PetscOptions},Ref{PetscOptions}},arg2::TSGLAdapt)
    ccall((:TSGLAdaptSetFromOptions,petscRealSingle),PetscErrorCode,(Ptr{PetscOptions},TSGLAdapt),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSGLAdaptDestroy(arg0::Type{Float32},arg1::Union{Ptr{TSGLAdapt},StridedArray{TSGLAdapt},Ptr{TSGLAdapt},Ref{TSGLAdapt}})
    ccall((:TSGLAdaptDestroy,petscRealSingle),PetscErrorCode,(Ptr{TSGLAdapt},),arg1)
end
=#
function TSGLAcceptRegister(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::TSGLAcceptFunction)
    err = ccall((:TSGLAcceptRegister,petscRealSingle),PetscErrorCode,(Cstring,TSGLAcceptFunction),arg1,arg2)
    return err
end

function TSGLRegister(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TSGLRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function TSGLInitializePackage(arg0::Type{Float32})
    err = ccall((:TSGLInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function TSGLFinalizePackage(arg0::Type{Float32})
    err = ccall((:TSGLFinalizePackage,petscRealSingle),PetscErrorCode,())
    return err
end

#= skipping function with undefined symbols:
 function TSGLSetType(arg0::Type{Float32},arg1::TS,arg2::TSGLType)
    ccall((:TSGLSetType,petscRealSingle),PetscErrorCode,(TS,Cstring),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSGLGetAdapt(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{TSGLAdapt},StridedArray{TSGLAdapt},Ptr{TSGLAdapt},Ref{TSGLAdapt}})
    ccall((:TSGLGetAdapt,petscRealSingle),PetscErrorCode,(TS,Ptr{TSGLAdapt}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSGLSetAcceptType(arg0::Type{Float32},arg1::TS,arg2::TSGLAcceptType)
    ccall((:TSGLSetAcceptType,petscRealSingle),PetscErrorCode,(TS,Cstring),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSEIMEXSetMaxRows(arg0::Type{Float32},ts::TS,arg1::Integer)
    ccall((:TSEIMEXSetMaxRows,petscRealSingle),PetscErrorCode,(TS,Int64),ts,arg1)
end
=#
#= skipping function with undefined symbols:
 function TSEIMEXSetRowCol(arg0::Type{Float32},ts::TS,arg1::Integer,arg2::Integer)
    ccall((:TSEIMEXSetRowCol,petscRealSingle),PetscErrorCode,(TS,Int64,Int64),ts,arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSEIMEXSetOrdAdapt(arg0::Type{Float32},arg1::TS,arg2::PetscBool)
    ccall((:TSEIMEXSetOrdAdapt,petscRealSingle),PetscErrorCode,(TS,PetscBool),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSRKGetType(arg0::Type{Float32},ts::TS,arg1::Union{Ptr{TSRKType},StridedArray{TSRKType},Ptr{TSRKType},Ref{TSRKType}})
    ccall((:TSRKGetType,petscRealSingle),PetscErrorCode,(TS,Ptr{Ptr{UInt8}}),ts,arg1)
end
=#
#= skipping function with undefined symbols:
 function TSRKSetType(arg0::Type{Float32},ts::TS,arg1::TSRKType)
    ccall((:TSRKSetType,petscRealSingle),PetscErrorCode,(TS,Cstring),ts,arg1)
end
=#
#= skipping function with undefined symbols:
 function TSRKSetFullyImplicit(arg0::Type{Float32},arg1::TS,arg2::PetscBool)
    ccall((:TSRKSetFullyImplicit,petscRealSingle),PetscErrorCode,(TS,PetscBool),arg1,arg2)
end
=#
function TSRKRegister(arg0::Type{Float32},arg1::TSRKType,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg8::Integer,arg9::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:TSRKRegister,petscRealSingle),PetscErrorCode,(Cstring,Int64,Int64,Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Float32},Int64,Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
    return err
end

function TSRKFinalizePackage(arg0::Type{Float32})
    err = ccall((:TSRKFinalizePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function TSRKInitializePackage(arg0::Type{Float32})
    err = ccall((:TSRKInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function TSRKRegisterDestroy(arg0::Type{Float32})
    err = ccall((:TSRKRegisterDestroy,petscRealSingle),PetscErrorCode,())
    return err
end

#= skipping function with undefined symbols:
 function TSARKIMEXGetType(arg0::Type{Float32},ts::TS,arg1::Union{Ptr{TSARKIMEXType},StridedArray{TSARKIMEXType},Ptr{TSARKIMEXType},Ref{TSARKIMEXType}})
    ccall((:TSARKIMEXGetType,petscRealSingle),PetscErrorCode,(TS,Ptr{Ptr{UInt8}}),ts,arg1)
end
=#
#= skipping function with undefined symbols:
 function TSARKIMEXSetType(arg0::Type{Float32},ts::TS,arg1::TSARKIMEXType)
    ccall((:TSARKIMEXSetType,petscRealSingle),PetscErrorCode,(TS,Cstring),ts,arg1)
end
=#
#= skipping function with undefined symbols:
 function TSARKIMEXSetFullyImplicit(arg0::Type{Float32},arg1::TS,arg2::PetscBool)
    ccall((:TSARKIMEXSetFullyImplicit,petscRealSingle),PetscErrorCode,(TS,PetscBool),arg1,arg2)
end
=#
function TSARKIMEXRegister(arg0::Type{Float32},arg1::TSARKIMEXType,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg8::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg9::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg10::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg11::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg12::Integer,arg13::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg14::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:TSARKIMEXRegister,petscRealSingle),PetscErrorCode,(Cstring,Int64,Int64,Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Float32},Int64,Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14)
    return err
end

function TSARKIMEXFinalizePackage(arg0::Type{Float32})
    err = ccall((:TSARKIMEXFinalizePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function TSARKIMEXInitializePackage(arg0::Type{Float32})
    err = ccall((:TSARKIMEXInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function TSARKIMEXRegisterDestroy(arg0::Type{Float32})
    err = ccall((:TSARKIMEXRegisterDestroy,petscRealSingle),PetscErrorCode,())
    return err
end

#= skipping function with undefined symbols:
 function TSRosWGetType(arg0::Type{Float32},ts::TS,arg1::Union{Ptr{TSRosWType},StridedArray{TSRosWType},Ptr{TSRosWType},Ref{TSRosWType}})
    ccall((:TSRosWGetType,petscRealSingle),PetscErrorCode,(TS,Ptr{Ptr{UInt8}}),ts,arg1)
end
=#
#= skipping function with undefined symbols:
 function TSRosWSetType(arg0::Type{Float32},ts::TS,arg1::TSRosWType)
    ccall((:TSRosWSetType,petscRealSingle),PetscErrorCode,(TS,Cstring),ts,arg1)
end
=#
#= skipping function with undefined symbols:
 function TSRosWSetRecomputeJacobian(arg0::Type{Float32},arg1::TS,arg2::PetscBool)
    ccall((:TSRosWSetRecomputeJacobian,petscRealSingle),PetscErrorCode,(TS,PetscBool),arg1,arg2)
end
=#
function TSRosWRegister(arg0::Type{Float32},arg1::TSRosWType,arg2::Integer,arg3::Integer,arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg8::Integer,arg9::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    err = ccall((:TSRosWRegister,petscRealSingle),PetscErrorCode,(Cstring,Int64,Int64,Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Float32},Int64,Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
    return err
end

function TSRosWRegisterRos4(arg0::Type{Float32},arg1::TSRosWType,arg2::Float32,arg3::Float32,arg4::Float32,arg5::Float32,arg6::Float32)
    err = ccall((:TSRosWRegisterRos4,petscRealSingle),PetscErrorCode,(Cstring,Float32,Float32,Float32,Float32,Float32),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function TSRosWFinalizePackage(arg0::Type{Float32})
    err = ccall((:TSRosWFinalizePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function TSRosWInitializePackage(arg0::Type{Float32})
    err = ccall((:TSRosWInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function TSRosWRegisterDestroy(arg0::Type{Float32})
    err = ccall((:TSRosWRegisterDestroy,petscRealSingle),PetscErrorCode,())
    return err
end

#= skipping function with undefined symbols:
 function TSThetaSetTheta(arg0::Type{Float32},arg1::TS,arg2::Float32)
    ccall((:TSThetaSetTheta,petscRealSingle),PetscErrorCode,(TS,Float32),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSThetaGetTheta(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:TSThetaGetTheta,petscRealSingle),PetscErrorCode,(TS,Ptr{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSThetaGetEndpoint(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:TSThetaGetEndpoint,petscRealSingle),PetscErrorCode,(TS,Ptr{PetscBool}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSThetaSetEndpoint(arg0::Type{Float32},arg1::TS,arg2::PetscBool)
    ccall((:TSThetaSetEndpoint,petscRealSingle),PetscErrorCode,(TS,PetscBool),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSAlphaSetAdapt(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TSAlphaSetAdapt,petscRealSingle),PetscErrorCode,(TS,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function TSAlphaAdaptDefault(arg1::TS,arg2::Float32,arg3::Vec{Float32},arg4::Vec{Float32},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}},arg7::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TSAlphaAdaptDefault,petscRealSingle),PetscErrorCode,(TS,Float32,Vec{Float32},Vec{Float32},Ptr{Float32},Ptr{PetscBool},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
#= skipping function with undefined symbols:
 function TSAlphaSetRadius(arg0::Type{Float32},arg1::TS,arg2::Float32)
    ccall((:TSAlphaSetRadius,petscRealSingle),PetscErrorCode,(TS,Float32),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSAlphaSetParams(arg0::Type{Float32},arg1::TS,arg2::Float32,arg3::Float32,arg4::Float32)
    ccall((:TSAlphaSetParams,petscRealSingle),PetscErrorCode,(TS,Float32,Float32,Float32),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function TSAlphaGetParams(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:TSAlphaGetParams,petscRealSingle),PetscErrorCode,(TS,Ptr{Float32},Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function TSSetDM(arg0::Type{Float32},arg1::TS,arg2::DM)
    ccall((:TSSetDM,petscRealSingle),PetscErrorCode,(TS,DM),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TSGetDM(arg0::Type{Float32},arg1::TS,arg2::Union{Ptr{DM},StridedArray{DM},Ptr{DM},Ref{DM}})
    ccall((:TSGetDM,petscRealSingle),PetscErrorCode,(TS,Ptr{DM}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function SNESTSFormFunction(arg1::SNES,arg2::Vec{Float32},arg3::Vec{Float32},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:SNESTSFormFunction,petscRealSingle),PetscErrorCode,(SNES,Vec{Float32},Vec{Float32},Ptr{Void}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function SNESTSFormJacobian(arg1::SNES,arg2::Vec{Float32},arg3::Mat{Float32},arg4::Mat{Float32},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:SNESTSFormJacobian,petscRealSingle),PetscErrorCode,(SNES,Vec{Float32},Mat{Float32},Mat{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
end
=#
function VecFischer(arg1::Vec{Float32},arg2::Vec{Float32},arg3::Vec{Float32},arg4::Vec{Float32},arg5::Vec{Float32})
    err = ccall((:VecFischer,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32},Vec{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4,arg5)
    return err
end

function VecSFischer(arg1::Vec{Float32},arg2::Vec{Float32},arg3::Vec{Float32},arg4::Vec{Float32},arg5::Float32,arg6::Vec{Float32})
    err = ccall((:VecSFischer,petscRealSingle),PetscErrorCode,(Vec{Float32},Vec{Float32},Vec{Float32},Vec{Float32},Float32,Vec{Float32}),arg1,arg2,arg3,arg4,arg5,arg6)
    return err
end

function MatDFischer(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Vec{Float32},arg4::Vec{Float32},arg5::Vec{Float32},arg6::Vec{Float32},arg7::Vec{Float32},arg8::Vec{Float32},arg9::Vec{Float32})
    err = ccall((:MatDFischer,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Vec{Float32},Vec{Float32},Vec{Float32},Vec{Float32},Vec{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)
    return err
end

function MatDSFischer(arg1::Mat{Float32},arg2::Vec{Float32},arg3::Vec{Float32},arg4::Vec{Float32},arg5::Vec{Float32},arg6::Float32,arg7::Vec{Float32},arg8::Vec{Float32},arg9::Vec{Float32},arg10::Vec{Float32},arg11::Vec{Float32})
    err = ccall((:MatDSFischer,petscRealSingle),PetscErrorCode,(Mat{Float32},Vec{Float32},Vec{Float32},Vec{Float32},Vec{Float32},Float32,Vec{Float32},Vec{Float32},Vec{Float32},Vec{Float32},Vec{Float32}),arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11)
    return err
end

function TaoInitializePackage(arg0::Type{Float32})
    err = ccall((:TaoInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function TaoFinalizePackage(arg0::Type{Float32})
    err = ccall((:TaoFinalizePackage,petscRealSingle),PetscErrorCode,())
    return err
end

#= skipping function with undefined symbols:
 function TaoCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{Tao},StridedArray{Tao},Ptr{Tao},Ref{Tao}})
    ccall((:TaoCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{Tao}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TaoSetFromOptions(arg0::Type{Float32},arg1::Tao)
    ccall((:TaoSetFromOptions,petscRealSingle),PetscErrorCode,(Tao,),arg1)
end
=#
#= skipping function with undefined symbols:
 function TaoSetUp(arg0::Type{Float32},arg1::Tao)
    ccall((:TaoSetUp,petscRealSingle),PetscErrorCode,(Tao,),arg1)
end
=#
#= skipping function with undefined symbols:
 function TaoSetType(arg0::Type{Float32},arg1::Tao,arg2::Union{ByteString,Symbol})
    ccall((:TaoSetType,petscRealSingle),PetscErrorCode,(Tao,Cstring),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TaoGetType(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    ccall((:TaoGetType,petscRealSingle),PetscErrorCode,(Tao,Ptr{Ptr{UInt8}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TaoSetApplicationContext(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TaoSetApplicationContext,petscRealSingle),PetscErrorCode,(Tao,Ptr{Void}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TaoGetApplicationContext(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TaoGetApplicationContext,petscRealSingle),PetscErrorCode,(Tao,Ptr{Void}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TaoDestroy(arg0::Type{Float32},arg1::Union{Ptr{Tao},StridedArray{Tao},Ptr{Tao},Ref{Tao}})
    ccall((:TaoDestroy,petscRealSingle),PetscErrorCode,(Ptr{Tao},),arg1)
end
=#
#= skipping function with undefined symbols:
 function TaoSetOptionsPrefix(arg0::Type{Float32},arg1::Tao,arg2::Union{ByteString,Symbol})
    ccall((:TaoSetOptionsPrefix,petscRealSingle),PetscErrorCode,(Tao,Cstring),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TaoView(arg1::Tao,arg2::PetscViewer{Float32})
    ccall((:TaoView,petscRealSingle),PetscErrorCode,(Tao,PetscViewer{Float32}),arg1,arg2)
end
=#
function TaoRegister(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

function TaoRegisterDestroy(arg0::Type{Float32})
    err = ccall((:TaoRegisterDestroy,petscRealSingle),PetscErrorCode,())
    return err
end

#= skipping function with undefined symbols:
 function TaoGetConvergedReason(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{TaoConvergedReason},StridedArray{TaoConvergedReason},Ptr{TaoConvergedReason},Ref{TaoConvergedReason}})
    ccall((:TaoGetConvergedReason,petscRealSingle),PetscErrorCode,(Tao,Ptr{TaoConvergedReason}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TaoGetSolutionStatus(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::Union{Ptr{TaoConvergedReason},StridedArray{TaoConvergedReason},Ptr{TaoConvergedReason},Ref{TaoConvergedReason}})
    ccall((:TaoGetSolutionStatus,petscRealSingle),PetscErrorCode,(Tao,Ptr{Int64},Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{TaoConvergedReason}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
#= skipping function with undefined symbols:
 function TaoSetConvergedReason(arg0::Type{Float32},arg1::Tao,arg2::TaoConvergedReason)
    ccall((:TaoSetConvergedReason,petscRealSingle),PetscErrorCode,(Tao,TaoConvergedReason),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TaoSetInitialVector(arg1::Tao,arg2::Vec{Float32})
    ccall((:TaoSetInitialVector,petscRealSingle),PetscErrorCode,(Tao,Vec{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TaoGetSolutionVector(arg1::Tao,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    ccall((:TaoGetSolutionVector,petscRealSingle),PetscErrorCode,(Tao,Ptr{Vec{Float32}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TaoGetGradientVector(arg1::Tao,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    ccall((:TaoGetGradientVector,petscRealSingle),PetscErrorCode,(Tao,Ptr{Vec{Float32}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TaoSetObjectiveRoutine(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TaoSetObjectiveRoutine,petscRealSingle),PetscErrorCode,(Tao,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function TaoSetGradientRoutine(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TaoSetGradientRoutine,petscRealSingle),PetscErrorCode,(Tao,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function TaoSetObjectiveAndGradientRoutine(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TaoSetObjectiveAndGradientRoutine,petscRealSingle),PetscErrorCode,(Tao,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function TaoSetHessianRoutine(arg1::Tao,arg2::Mat{Float32},arg3::Mat{Float32},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TaoSetHessianRoutine,petscRealSingle),PetscErrorCode,(Tao,Mat{Float32},Mat{Float32},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function TaoSetSeparableObjectiveRoutine(arg1::Tao,arg2::Vec{Float32},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TaoSetSeparableObjectiveRoutine,petscRealSingle),PetscErrorCode,(Tao,Vec{Float32},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function TaoSetConstraintsRoutine(arg1::Tao,arg2::Vec{Float32},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TaoSetConstraintsRoutine,petscRealSingle),PetscErrorCode,(Tao,Vec{Float32},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function TaoSetInequalityConstraintsRoutine(arg1::Tao,arg2::Vec{Float32},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TaoSetInequalityConstraintsRoutine,petscRealSingle),PetscErrorCode,(Tao,Vec{Float32},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function TaoSetEqualityConstraintsRoutine(arg1::Tao,arg2::Vec{Float32},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TaoSetEqualityConstraintsRoutine,petscRealSingle),PetscErrorCode,(Tao,Vec{Float32},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function TaoSetJacobianRoutine(arg1::Tao,arg2::Mat{Float32},arg3::Mat{Float32},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TaoSetJacobianRoutine,petscRealSingle),PetscErrorCode,(Tao,Mat{Float32},Mat{Float32},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function TaoSetJacobianStateRoutine(arg1::Tao,arg2::Mat{Float32},arg3::Mat{Float32},arg4::Mat{Float32},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg6::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TaoSetJacobianStateRoutine,petscRealSingle),PetscErrorCode,(Tao,Mat{Float32},Mat{Float32},Mat{Float32},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
#= skipping function with undefined symbols:
 function TaoSetJacobianDesignRoutine(arg1::Tao,arg2::Mat{Float32},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TaoSetJacobianDesignRoutine,petscRealSingle),PetscErrorCode,(Tao,Mat{Float32},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function TaoSetJacobianInequalityRoutine(arg1::Tao,arg2::Mat{Float32},arg3::Mat{Float32},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TaoSetJacobianInequalityRoutine,petscRealSingle),PetscErrorCode,(Tao,Mat{Float32},Mat{Float32},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function TaoSetJacobianEqualityRoutine(arg1::Tao,arg2::Mat{Float32},arg3::Mat{Float32},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TaoSetJacobianEqualityRoutine,petscRealSingle),PetscErrorCode,(Tao,Mat{Float32},Mat{Float32},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function TaoSetStateDesignIS(arg1::Tao,arg2::IS{Float32},arg3::IS{Float32})
    ccall((:TaoSetStateDesignIS,petscRealSingle),PetscErrorCode,(Tao,IS{Float32},IS{Float32}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function TaoComputeObjective(arg1::Tao,arg2::Vec{Float32},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:TaoComputeObjective,petscRealSingle),PetscErrorCode,(Tao,Vec{Float32},Ptr{Float32}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function TaoComputeSeparableObjective(arg1::Tao,arg2::Vec{Float32},arg3::Vec{Float32})
    ccall((:TaoComputeSeparableObjective,petscRealSingle),PetscErrorCode,(Tao,Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function TaoComputeGradient(arg1::Tao,arg2::Vec{Float32},arg3::Vec{Float32})
    ccall((:TaoComputeGradient,petscRealSingle),PetscErrorCode,(Tao,Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function TaoComputeObjectiveAndGradient(arg1::Tao,arg2::Vec{Float32},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Vec{Float32})
    ccall((:TaoComputeObjectiveAndGradient,petscRealSingle),PetscErrorCode,(Tao,Vec{Float32},Ptr{Float32},Vec{Float32}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function TaoComputeConstraints(arg1::Tao,arg2::Vec{Float32},arg3::Vec{Float32})
    ccall((:TaoComputeConstraints,petscRealSingle),PetscErrorCode,(Tao,Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function TaoComputeInequalityConstraints(arg1::Tao,arg2::Vec{Float32},arg3::Vec{Float32})
    ccall((:TaoComputeInequalityConstraints,petscRealSingle),PetscErrorCode,(Tao,Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function TaoComputeEqualityConstraints(arg1::Tao,arg2::Vec{Float32},arg3::Vec{Float32})
    ccall((:TaoComputeEqualityConstraints,petscRealSingle),PetscErrorCode,(Tao,Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function TaoDefaultComputeGradient(arg1::Tao,arg2::Vec{Float32},arg3::Vec{Float32},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TaoDefaultComputeGradient,petscRealSingle),PetscErrorCode,(Tao,Vec{Float32},Vec{Float32},Ptr{Void}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function TaoIsObjectiveDefined(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:TaoIsObjectiveDefined,petscRealSingle),PetscErrorCode,(Tao,Ptr{PetscBool}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TaoIsGradientDefined(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:TaoIsGradientDefined,petscRealSingle),PetscErrorCode,(Tao,Ptr{PetscBool}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TaoIsObjectiveAndGradientDefined(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:TaoIsObjectiveAndGradientDefined,petscRealSingle),PetscErrorCode,(Tao,Ptr{PetscBool}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TaoComputeHessian(arg1::Tao,arg2::Vec{Float32},arg3::Mat{Float32},arg4::Mat{Float32})
    ccall((:TaoComputeHessian,petscRealSingle),PetscErrorCode,(Tao,Vec{Float32},Mat{Float32},Mat{Float32}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function TaoComputeJacobian(arg1::Tao,arg2::Vec{Float32},arg3::Mat{Float32},arg4::Mat{Float32})
    ccall((:TaoComputeJacobian,petscRealSingle),PetscErrorCode,(Tao,Vec{Float32},Mat{Float32},Mat{Float32}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function TaoComputeJacobianState(arg1::Tao,arg2::Vec{Float32},arg3::Mat{Float32},arg4::Mat{Float32},arg5::Mat{Float32})
    ccall((:TaoComputeJacobianState,petscRealSingle),PetscErrorCode,(Tao,Vec{Float32},Mat{Float32},Mat{Float32},Mat{Float32}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function TaoComputeJacobianEquality(arg1::Tao,arg2::Vec{Float32},arg3::Mat{Float32},arg4::Mat{Float32})
    ccall((:TaoComputeJacobianEquality,petscRealSingle),PetscErrorCode,(Tao,Vec{Float32},Mat{Float32},Mat{Float32}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function TaoComputeJacobianInequality(arg1::Tao,arg2::Vec{Float32},arg3::Mat{Float32},arg4::Mat{Float32})
    ccall((:TaoComputeJacobianInequality,petscRealSingle),PetscErrorCode,(Tao,Vec{Float32},Mat{Float32},Mat{Float32}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function TaoComputeJacobianDesign(arg1::Tao,arg2::Vec{Float32},arg3::Mat{Float32})
    ccall((:TaoComputeJacobianDesign,petscRealSingle),PetscErrorCode,(Tao,Vec{Float32},Mat{Float32}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function TaoDefaultComputeHessian(arg1::Tao,arg2::Vec{Float32},arg3::Mat{Float32},arg4::Mat{Float32},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TaoDefaultComputeHessian,petscRealSingle),PetscErrorCode,(Tao,Vec{Float32},Mat{Float32},Mat{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function TaoDefaultComputeHessianColor(arg1::Tao,arg2::Vec{Float32},arg3::Mat{Float32},arg4::Mat{Float32},arg5::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TaoDefaultComputeHessianColor,petscRealSingle),PetscErrorCode,(Tao,Vec{Float32},Mat{Float32},Mat{Float32},Ptr{Void}),arg1,arg2,arg3,arg4,arg5)
end
=#
#= skipping function with undefined symbols:
 function TaoComputeDualVariables(arg1::Tao,arg2::Vec{Float32},arg3::Vec{Float32})
    ccall((:TaoComputeDualVariables,petscRealSingle),PetscErrorCode,(Tao,Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function TaoComputeDualVariables(arg1::Tao,arg2::Vec{Float32},arg3::Vec{Float32})
    ccall((:TaoComputeDualVariables,petscRealSingle),PetscErrorCode,(Tao,Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function TaoSetVariableBounds(arg1::Tao,arg2::Vec{Float32},arg3::Vec{Float32})
    ccall((:TaoSetVariableBounds,petscRealSingle),PetscErrorCode,(Tao,Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function TaoGetVariableBounds(arg1::Tao,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    ccall((:TaoGetVariableBounds,petscRealSingle),PetscErrorCode,(Tao,Ptr{Vec{Float32}},Ptr{Vec{Float32}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function TaoGetDualVariables(arg1::Tao,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    ccall((:TaoGetDualVariables,petscRealSingle),PetscErrorCode,(Tao,Ptr{Vec{Float32}},Ptr{Vec{Float32}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function TaoSetInequalityBounds(arg1::Tao,arg2::Vec{Float32},arg3::Vec{Float32})
    ccall((:TaoSetInequalityBounds,petscRealSingle),PetscErrorCode,(Tao,Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function TaoGetInequalityBounds(arg1::Tao,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}},arg3::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    ccall((:TaoGetInequalityBounds,petscRealSingle),PetscErrorCode,(Tao,Ptr{Vec{Float32}},Ptr{Vec{Float32}}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function TaoSetVariableBoundsRoutine(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TaoSetVariableBoundsRoutine,petscRealSingle),PetscErrorCode,(Tao,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function TaoComputeVariableBounds(arg0::Type{Float32},arg1::Tao)
    ccall((:TaoComputeVariableBounds,petscRealSingle),PetscErrorCode,(Tao,),arg1)
end
=#
#= skipping function with undefined symbols:
 function TaoGetTolerances(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:TaoGetTolerances,petscRealSingle),PetscErrorCode,(Tao,Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
#= skipping function with undefined symbols:
 function TaoSetTolerances(arg0::Type{Float32},arg1::Tao,arg2::Float32,arg3::Float32,arg4::Float32,arg5::Float32,arg6::Float32)
    ccall((:TaoSetTolerances,petscRealSingle),PetscErrorCode,(Tao,Float32,Float32,Float32,Float32,Float32),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
#= skipping function with undefined symbols:
 function TaoGetConstraintTolerances(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:TaoGetConstraintTolerances,petscRealSingle),PetscErrorCode,(Tao,Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function TaoSetConstraintTolerances(arg0::Type{Float32},arg1::Tao,arg2::Float32,arg3::Float32)
    ccall((:TaoSetConstraintTolerances,petscRealSingle),PetscErrorCode,(Tao,Float32,Float32),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function TaoSetFunctionLowerBound(arg0::Type{Float32},arg1::Tao,arg2::Float32)
    ccall((:TaoSetFunctionLowerBound,petscRealSingle),PetscErrorCode,(Tao,Float32),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TaoSetInitialTrustRegionRadius(arg0::Type{Float32},arg1::Tao,arg2::Float32)
    ccall((:TaoSetInitialTrustRegionRadius,petscRealSingle),PetscErrorCode,(Tao,Float32),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TaoSetMaximumIterations(arg0::Type{Float32},arg1::Tao,arg2::Integer)
    ccall((:TaoSetMaximumIterations,petscRealSingle),PetscErrorCode,(Tao,Int64),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TaoSetMaximumFunctionEvaluations(arg0::Type{Float32},arg1::Tao,arg2::Integer)
    ccall((:TaoSetMaximumFunctionEvaluations,petscRealSingle),PetscErrorCode,(Tao,Int64),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TaoGetFunctionLowerBound(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:TaoGetFunctionLowerBound,petscRealSingle),PetscErrorCode,(Tao,Ptr{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TaoGetInitialTrustRegionRadius(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:TaoGetInitialTrustRegionRadius,petscRealSingle),PetscErrorCode,(Tao,Ptr{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TaoGetCurrentTrustRegionRadius(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:TaoGetCurrentTrustRegionRadius,petscRealSingle),PetscErrorCode,(Tao,Ptr{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TaoGetMaximumIterations(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:TaoGetMaximumIterations,petscRealSingle),PetscErrorCode,(Tao,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TaoGetCurrentFunctionEvaluations(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:TaoGetCurrentFunctionEvaluations,petscRealSingle),PetscErrorCode,(Tao,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TaoGetMaximumFunctionEvaluations(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:TaoGetMaximumFunctionEvaluations,petscRealSingle),PetscErrorCode,(Tao,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TaoGetIterationNumber(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:TaoGetIterationNumber,petscRealSingle),PetscErrorCode,(Tao,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TaoSetIterationNumber(arg0::Type{Float32},arg1::Tao,arg2::Integer)
    ccall((:TaoSetIterationNumber,petscRealSingle),PetscErrorCode,(Tao,Int64),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TaoGetTotalIterationNumber(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:TaoGetTotalIterationNumber,petscRealSingle),PetscErrorCode,(Tao,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TaoSetTotalIterationNumber(arg0::Type{Float32},arg1::Tao,arg2::Integer)
    ccall((:TaoSetTotalIterationNumber,petscRealSingle),PetscErrorCode,(Tao,Int64),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TaoSetOptionsPrefix(arg0::Type{Float32},arg1::Tao,p::Union{ByteString,Symbol})
    ccall((:TaoSetOptionsPrefix,petscRealSingle),PetscErrorCode,(Tao,Cstring),arg1,p)
end
=#
#= skipping function with undefined symbols:
 function TaoAppendOptionsPrefix(arg0::Type{Float32},arg1::Tao,p::Union{ByteString,Symbol})
    ccall((:TaoAppendOptionsPrefix,petscRealSingle),PetscErrorCode,(Tao,Cstring),arg1,p)
end
=#
#= skipping function with undefined symbols:
 function TaoGetOptionsPrefix(arg0::Type{Float32},arg1::Tao,p::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    ccall((:TaoGetOptionsPrefix,petscRealSingle),PetscErrorCode,(Tao,Ptr{Ptr{UInt8}}),arg1,p)
end
=#
#= skipping function with undefined symbols:
 function TaoResetStatistics(arg0::Type{Float32},arg1::Tao)
    ccall((:TaoResetStatistics,petscRealSingle),PetscErrorCode,(Tao,),arg1)
end
=#
#= skipping function with undefined symbols:
 function TaoGetKSP(arg1::Tao,arg2::Union{Ptr{KSP{Float32}},StridedArray{KSP{Float32}},Ptr{KSP{Float32}},Ref{KSP{Float32}}})
    ccall((:TaoGetKSP,petscRealSingle),PetscErrorCode,(Tao,Ptr{KSP{Float32}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TaoGetLinearSolveIterations(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:TaoGetLinearSolveIterations,petscRealSingle),PetscErrorCode,(Tao,Ptr{Int64}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TaoLineSearchCreate(arg0::Type{Float32},arg1::MPI_Comm,arg2::Union{Ptr{TaoLineSearch},StridedArray{TaoLineSearch},Ptr{TaoLineSearch},Ref{TaoLineSearch}})
    ccall((:TaoLineSearchCreate,petscRealSingle),PetscErrorCode,(comm_type,Ptr{TaoLineSearch}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TaoLineSearchSetFromOptions(arg0::Type{Float32},arg1::TaoLineSearch)
    ccall((:TaoLineSearchSetFromOptions,petscRealSingle),PetscErrorCode,(TaoLineSearch,),arg1)
end
=#
#= skipping function with undefined symbols:
 function TaoLineSearchSetUp(arg0::Type{Float32},arg1::TaoLineSearch)
    ccall((:TaoLineSearchSetUp,petscRealSingle),PetscErrorCode,(TaoLineSearch,),arg1)
end
=#
#= skipping function with undefined symbols:
 function TaoLineSearchDestroy(arg0::Type{Float32},arg1::Union{Ptr{TaoLineSearch},StridedArray{TaoLineSearch},Ptr{TaoLineSearch},Ref{TaoLineSearch}})
    ccall((:TaoLineSearchDestroy,petscRealSingle),PetscErrorCode,(Ptr{TaoLineSearch},),arg1)
end
=#
#= skipping function with undefined symbols:
 function TaoLineSearchView(arg1::TaoLineSearch,arg2::PetscViewer{Float32})
    ccall((:TaoLineSearchView,petscRealSingle),PetscErrorCode,(TaoLineSearch,PetscViewer{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TaoLineSearchReset(arg0::Type{Float32},arg1::TaoLineSearch)
    ccall((:TaoLineSearchReset,petscRealSingle),PetscErrorCode,(TaoLineSearch,),arg1)
end
=#
#= skipping function with undefined symbols:
 function TaoLineSearchAppendOptionsPrefix(arg0::Type{Float32},arg1::TaoLineSearch,prefix::Union{ByteString,Symbol})
    ccall((:TaoLineSearchAppendOptionsPrefix,petscRealSingle),PetscErrorCode,(TaoLineSearch,Cstring),arg1,prefix)
end
=#
#= skipping function with undefined symbols:
 function TaoLineSearchGetOptionsPrefix(arg0::Type{Float32},arg1::TaoLineSearch,prefix::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    ccall((:TaoLineSearchGetOptionsPrefix,petscRealSingle),PetscErrorCode,(TaoLineSearch,Ptr{Ptr{UInt8}}),arg1,prefix)
end
=#
#= skipping function with undefined symbols:
 function TaoLineSearchApply(arg1::TaoLineSearch,arg2::Vec{Float32},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Vec{Float32},arg5::Vec{Float32},arg6::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg7::Union{Ptr{TaoLineSearchConvergedReason},StridedArray{TaoLineSearchConvergedReason},Ptr{TaoLineSearchConvergedReason},Ref{TaoLineSearchConvergedReason}})
    ccall((:TaoLineSearchApply,petscRealSingle),PetscErrorCode,(TaoLineSearch,Vec{Float32},Ptr{Float32},Vec{Float32},Vec{Float32},Ptr{Float32},Ptr{TaoLineSearchConvergedReason}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
#= skipping function with undefined symbols:
 function TaoLineSearchGetStepLength(arg0::Type{Float32},arg1::TaoLineSearch,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:TaoLineSearchGetStepLength,petscRealSingle),PetscErrorCode,(TaoLineSearch,Ptr{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TaoLineSearchGetStartingVector(arg1::TaoLineSearch,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    ccall((:TaoLineSearchGetStartingVector,petscRealSingle),PetscErrorCode,(TaoLineSearch,Ptr{Vec{Float32}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TaoLineSearchGetStepDirection(arg1::TaoLineSearch,arg2::Union{Ptr{Vec{Float32}},StridedArray{Vec{Float32}},Ptr{Vec{Float32}},Ref{Vec{Float32}}})
    ccall((:TaoLineSearchGetStepDirection,petscRealSingle),PetscErrorCode,(TaoLineSearch,Ptr{Vec{Float32}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TaoLineSearchSetInitialStepLength(arg0::Type{Float32},arg1::TaoLineSearch,arg2::Float32)
    ccall((:TaoLineSearchSetInitialStepLength,petscRealSingle),PetscErrorCode,(TaoLineSearch,Float32),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TaoLineSearchGetSolution(arg1::TaoLineSearch,arg2::Vec{Float32},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Vec{Float32},arg5::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg6::Union{Ptr{TaoLineSearchConvergedReason},StridedArray{TaoLineSearchConvergedReason},Ptr{TaoLineSearchConvergedReason},Ref{TaoLineSearchConvergedReason}})
    ccall((:TaoLineSearchGetSolution,petscRealSingle),PetscErrorCode,(TaoLineSearch,Vec{Float32},Ptr{Float32},Vec{Float32},Ptr{Float32},Ptr{TaoLineSearchConvergedReason}),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
#= skipping function with undefined symbols:
 function TaoLineSearchGetFullStepObjective(arg0::Type{Float32},arg1::TaoLineSearch,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:TaoLineSearchGetFullStepObjective,petscRealSingle),PetscErrorCode,(TaoLineSearch,Ptr{Float32}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TaoLineSearchGetNumberFunctionEvaluations(arg0::Type{Float32},arg1::TaoLineSearch,arg2::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg3::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg4::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:TaoLineSearchGetNumberFunctionEvaluations,petscRealSingle),PetscErrorCode,(TaoLineSearch,Ptr{Int64},Ptr{Int64},Ptr{Int64}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function TaoLineSearchGetType(arg0::Type{Float32},arg1::TaoLineSearch,arg2::Union{Ptr{Ptr{UInt8}},StridedArray{Ptr{UInt8}},Ptr{Ptr{UInt8}},Ref{Ptr{UInt8}}})
    ccall((:TaoLineSearchGetType,petscRealSingle),PetscErrorCode,(TaoLineSearch,Ptr{Ptr{UInt8}}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TaoLineSearchSetType(arg0::Type{Float32},arg1::TaoLineSearch,arg2::Union{ByteString,Symbol})
    ccall((:TaoLineSearchSetType,petscRealSingle),PetscErrorCode,(TaoLineSearch,Cstring),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TaoLineSearchIsUsingTaoRoutines(arg0::Type{Float32},arg1::TaoLineSearch,arg2::Union{Ptr{PetscBool},StridedArray{PetscBool},Ptr{PetscBool},Ref{PetscBool}})
    ccall((:TaoLineSearchIsUsingTaoRoutines,petscRealSingle),PetscErrorCode,(TaoLineSearch,Ptr{PetscBool}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TaoLineSearchSetObjectiveAndGTSRoutine(arg0::Type{Float32},arg1::TaoLineSearch,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TaoLineSearchSetObjectiveAndGTSRoutine,petscRealSingle),PetscErrorCode,(TaoLineSearch,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function TaoLineSearchSetObjectiveRoutine(arg0::Type{Float32},arg1::TaoLineSearch,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TaoLineSearchSetObjectiveRoutine,petscRealSingle),PetscErrorCode,(TaoLineSearch,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function TaoLineSearchSetGradientRoutine(arg0::Type{Float32},arg1::TaoLineSearch,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TaoLineSearchSetGradientRoutine,petscRealSingle),PetscErrorCode,(TaoLineSearch,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function TaoLineSearchSetObjectiveAndGradientRoutine(arg0::Type{Float32},arg1::TaoLineSearch,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TaoLineSearchSetObjectiveAndGradientRoutine,petscRealSingle),PetscErrorCode,(TaoLineSearch,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function TaoLineSearchComputeObjective(arg1::TaoLineSearch,arg2::Vec{Float32},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:TaoLineSearchComputeObjective,petscRealSingle),PetscErrorCode,(TaoLineSearch,Vec{Float32},Ptr{Float32}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function TaoLineSearchComputeGradient(arg1::TaoLineSearch,arg2::Vec{Float32},arg3::Vec{Float32})
    ccall((:TaoLineSearchComputeGradient,petscRealSingle),PetscErrorCode,(TaoLineSearch,Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function TaoLineSearchComputeObjectiveAndGradient(arg1::TaoLineSearch,arg2::Vec{Float32},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Vec{Float32})
    ccall((:TaoLineSearchComputeObjectiveAndGradient,petscRealSingle),PetscErrorCode,(TaoLineSearch,Vec{Float32},Ptr{Float32},Vec{Float32}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function TaoLineSearchComputeObjectiveAndGTS(arg1::TaoLineSearch,arg2::Vec{Float32},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}})
    ccall((:TaoLineSearchComputeObjectiveAndGTS,petscRealSingle),PetscErrorCode,(TaoLineSearch,Vec{Float32},Ptr{Float32},Ptr{Float32}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function TaoLineSearchSetVariableBounds(arg1::TaoLineSearch,arg2::Vec{Float32},arg3::Vec{Float32})
    ccall((:TaoLineSearchSetVariableBounds,petscRealSingle),PetscErrorCode,(TaoLineSearch,Vec{Float32},Vec{Float32}),arg1,arg2,arg3)
end
=#
function TaoLineSearchInitializePackage(arg0::Type{Float32})
    err = ccall((:TaoLineSearchInitializePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function TaoLineSearchFinalizePackage(arg0::Type{Float32})
    err = ccall((:TaoLineSearchFinalizePackage,petscRealSingle),PetscErrorCode,())
    return err
end

function TaoLineSearchRegister(arg0::Type{Float32},arg1::Union{ByteString,Symbol},arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    err = ccall((:TaoLineSearchRegister,petscRealSingle),PetscErrorCode,(Cstring,Ptr{Void}),arg1,arg2)
    return err
end

#= skipping function with undefined symbols:
 function TaoLineSearchUseTaoRoutines(arg0::Type{Float32},arg1::TaoLineSearch,arg2::Tao)
    ccall((:TaoLineSearchUseTaoRoutines,petscRealSingle),PetscErrorCode,(TaoLineSearch,Tao),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TaoGetLineSearch(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{TaoLineSearch},StridedArray{TaoLineSearch},Ptr{TaoLineSearch},Ref{TaoLineSearch}})
    ccall((:TaoGetLineSearch,petscRealSingle),PetscErrorCode,(Tao,Ptr{TaoLineSearch}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TaoSetConvergenceHistory(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg3::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg4::Union{Ptr{Float32},StridedArray{Float32},Ptr{Float32},Ref{Float32}},arg5::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}},arg6::Integer,arg7::PetscBool)
    ccall((:TaoSetConvergenceHistory,petscRealSingle),PetscErrorCode,(Tao,Ptr{Float32},Ptr{Float32},Ptr{Float32},Ptr{Int64},Int64,PetscBool),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
#= skipping function with undefined symbols:
 function TaoGetConvergenceHistory(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg3::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg4::Union{Ptr{Ptr{Float32}},StridedArray{Ptr{Float32}},Ptr{Ptr{Float32}},Ref{Ptr{Float32}}},arg5::Union{Ptr{Ptr{Int64}},StridedArray{Ptr{Int64}},Ptr{Ptr{Int64}},Ref{Ptr{Int64}}},arg6::Union{Ptr{Int64},StridedArray{Int64},Ptr{Int64},Ref{Int64}})
    ccall((:TaoGetConvergenceHistory,petscRealSingle),PetscErrorCode,(Tao,Ptr{Ptr{Float32}},Ptr{Ptr{Float32}},Ptr{Ptr{Float32}},Ptr{Ptr{Int64}},Ptr{Int64}),arg1,arg2,arg3,arg4,arg5,arg6)
end
=#
#= skipping function with undefined symbols:
 function TaoSetMonitor(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg4::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TaoSetMonitor,petscRealSingle),PetscErrorCode,(Tao,Ptr{Void},Ptr{Void},Ptr{Void}),arg1,arg2,arg3,arg4)
end
=#
#= skipping function with undefined symbols:
 function TaoCancelMonitors(arg0::Type{Float32},arg1::Tao)
    ccall((:TaoCancelMonitors,petscRealSingle),PetscErrorCode,(Tao,),arg1)
end
=#
#= skipping function with undefined symbols:
 function TaoDefaultMonitor(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TaoDefaultMonitor,petscRealSingle),PetscErrorCode,(Tao,Ptr{Void}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TaoDefaultSMonitor(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TaoDefaultSMonitor,petscRealSingle),PetscErrorCode,(Tao,Ptr{Void}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TaoDefaultCMonitor(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TaoDefaultCMonitor,petscRealSingle),PetscErrorCode,(Tao,Ptr{Void}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TaoSolutionMonitor(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TaoSolutionMonitor,petscRealSingle),PetscErrorCode,(Tao,Ptr{Void}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TaoSeparableObjectiveMonitor(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TaoSeparableObjectiveMonitor,petscRealSingle),PetscErrorCode,(Tao,Ptr{Void}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TaoGradientMonitor(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TaoGradientMonitor,petscRealSingle),PetscErrorCode,(Tao,Ptr{Void}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TaoStepDirectionMonitor(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TaoStepDirectionMonitor,petscRealSingle),PetscErrorCode,(Tao,Ptr{Void}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TaoDrawSolutionMonitor(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TaoDrawSolutionMonitor,petscRealSingle),PetscErrorCode,(Tao,Ptr{Void}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TaoDrawStepMonitor(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TaoDrawStepMonitor,petscRealSingle),PetscErrorCode,(Tao,Ptr{Void}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TaoDrawGradientMonitor(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TaoDrawGradientMonitor,petscRealSingle),PetscErrorCode,(Tao,Ptr{Void}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TaoAddLineSearchCounts(arg0::Type{Float32},arg1::Tao)
    ccall((:TaoAddLineSearchCounts,petscRealSingle),PetscErrorCode,(Tao,),arg1)
end
=#
#= skipping function with undefined symbols:
 function TaoDefaultConvergenceTest(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TaoDefaultConvergenceTest,petscRealSingle),PetscErrorCode,(Tao,Ptr{Void}),arg1,arg2)
end
=#
#= skipping function with undefined symbols:
 function TaoSetConvergenceTest(arg0::Type{Float32},arg1::Tao,arg2::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}},arg3::Union{Ptr{Void},StridedArray{Void},Ptr{Void},Ref{Void}})
    ccall((:TaoSetConvergenceTest,petscRealSingle),PetscErrorCode,(Tao,Ptr{Void},Ptr{Void}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function TaoSQPCONSetStateDesignIS(arg1::Tao,arg2::IS{Float32},arg3::IS{Float32})
    ccall((:TaoSQPCONSetStateDesignIS,petscRealSingle),PetscErrorCode,(Tao,IS{Float32},IS{Float32}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function TaoLCLSetStateDesignIS(arg1::Tao,arg2::IS{Float32},arg3::IS{Float32})
    ccall((:TaoLCLSetStateDesignIS,petscRealSingle),PetscErrorCode,(Tao,IS{Float32},IS{Float32}),arg1,arg2,arg3)
end
=#
#= skipping function with undefined symbols:
 function TaoMonitor(arg0::Type{Float32},arg1::Tao,arg2::Integer,arg3::Float32,arg4::Float32,arg5::Float32,arg6::Float32,arg7::Union{Ptr{TaoConvergedReason},StridedArray{TaoConvergedReason},Ptr{TaoConvergedReason},Ref{TaoConvergedReason}})
    ccall((:TaoMonitor,petscRealSingle),PetscErrorCode,(Tao,Int64,Float32,Float32,Float32,Float32,Ptr{TaoConvergedReason}),arg1,arg2,arg3,arg4,arg5,arg6,arg7)
end
=#
