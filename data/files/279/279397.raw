module MathUtils

function log_sum_exp(logs)
  maxlog = maximum(logs)
  return maxlog + log(sum(exp(logs - maxlog)))
end

function sample_discrete(dist)
  r = rand()
  s = 0.
  for i=1:length(dist)
    s += dist[i]
    if r <= s
      return(i)
    end
  end
  return(length(dist))
end

function sample_discrete_logspace(log_unnormalized_dist)
  n = length(log_unnormalized_dist)
  logsum = log_sum_exp(log_unnormalized_dist)
  logr = log(rand())
  logc = dist[1] - logsum
  for i=1:n-1
    if logr <= logc
      return i
    end
    logp = dist[i+1] - logsum
    if logp > logc
      logc = logp + log1p(exp(logc - logp))
    else
      logc = logc + log1p(exp(logp - logc))
    end
  end
  return(n)
end

function normalize_log_dist(d)
  d - log_sum_exp(d)
end

end # module
