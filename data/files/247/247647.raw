function mxLoad()
    #
    #
    global mxIsA   = dlsym(libmx, : mxIsA   );
    global mxIsCell = dlsym(libmx, : mxIsCell   );
    global mxIsChar = dlsym(libmx, : mxIsChar   );
    global mxIsCharVector   = dlsym(libmx, : mxIsCharVector   );
    global mxIsClass = dlsym(libmx, : mxIsClass   );
    global mxIsClassUnknown   = dlsym(libmx, : mxIsClassUnknown   );
    global mxIsColonObj = dlsym(libmx, : mxIsColonObj   );
    global mxIsCommaList   = dlsym(libmx, : mxIsCommaList   );
    global mxIsComplex = dlsym(libmx, : mxIsComplex   );
    global mxIsComplex2dMatrix = dlsym(libmx, : mxIsComplex2dMatrix   );
    global mxIsComplexVector = dlsym(libmx, : mxIsComplexVector   );
    global mxIsContainer   = dlsym(libmx, : mxIsContainer   );
    global mxIsDouble = dlsym(libmx, : mxIsDouble   );
    global mxIsDouble2dMatrix = dlsym(libmx, : mxIsDouble2dMatrix   );
    global mxIsEmpty = dlsym(libmx, : mxIsEmpty   );
    global mxIsEmptySqrBrktArray = dlsym(libmx, : mxIsEmptySqrBrktArray   );
    global mxIsExactSharedCopy = dlsym(libmx, : mxIsExactSharedCopy   );
    global mxIsFinite = dlsym(libmx, : mxIsFinite   );
    global mxIsFiniteDoubleArray = dlsym(libmx, : mxIsFiniteDoubleArray   );
    global mxIsFiniteNumeric2dMatrix = dlsym(libmx, : mxIsFiniteNumeric2dMatrix   );
    global mxIsFiniteNumeric2dNonComplexMatrix   = dlsym(libmx, : mxIsFiniteNumeric2dNonComplexMatrix  );
    global mxIsFiniteNumericArray = dlsym(libmx, : mxIsFiniteNumericArray ) ;
    global mxIsFiniteNumericVector = dlsym(libmx, : mxIsFiniteNumericVector ) ;
    global mxIsFiniteSingleArray = dlsym(libmx, : mxIsFiniteSingleArray ) ;
    global mxIsFloat = dlsym(libmx, : mxIsFloat ) ;
    global mxIsFromGlobalWS   = dlsym(libmx, : mxIsFromGlobalWS ) ;
    global mxIsFunctionHandle = dlsym(libmx, : mxIsFunctionHandle ) ;
    global mxIsGlobal = dlsym(libmx, : mxIsGlobal ) ;
    global mxIsIdentical   = dlsym(libmx, : mxIsIdentical ) ;
    global mxIsIndexingOpaque = dlsym(libmx, : mxIsIndexingOpaque ) ;
    global mxIsInf = dlsym(libmx, : mxIsInf ) ;
    global mxIsInt16 = dlsym(libmx, : mxIsInt16 ) ;
    global mxIsInt32 = dlsym(libmx, : mxIsInt32 ) ;
    global mxIsInt64 = dlsym(libmx, : mxIsInt64   ); 
    global mxIsInt8 = dlsym(libmx, : mxIsInt8   );
    global mxIsIntOrUIntVector = dlsym(libmx, : mxIsIntOrUIntVector   );
    global mxIsIntScalar   = dlsym(libmx, : mxIsIntScalar   );
    global mxIsIntVector   = dlsym(libmx, : mxIsIntVector   );
    global mxIsInteger = dlsym(libmx, : mxIsInteger   );
    global mxIsLocal = dlsym(libmx, : mxIsLocal   );
    global mxIsLogical = dlsym(libmx, : mxIsLogical   );
    global mxIsLogicalScalar = dlsym(libmx, : mxIsLogicalScalar   );
    global mxIsLogicalScalarTrue = dlsym(libmx, : mxIsLogicalScalarTrue   );
    global mxIsMarked = dlsym(libmx, : mxIsMarked   );
    global mxIsNaN = dlsym(libmx, : mxIsNaN   );
    global mxIsNumeric = dlsym(libmx, : mxIsNumeric   );
    global mxIsNumericInfOrNaNVector = dlsym(libmx, : mxIsNumericInfOrNaNVector   );
    global mxIsObject = dlsym(libmx, : mxIsObject   );
    global mxIsOnAllocList   = dlsym(libmx, : mxIsOnAllocList   );
    global mxIsOpaque = dlsym(libmx, : mxIsOpaque   );
    global mxIsProtected   = dlsym(libmx, : mxIsProtected   );
    global mxIsReal2dMatrix   = dlsym(libmx, : mxIsReal2dMatrix   );
    global mxIsRealInfOrNaNVector = dlsym(libmx, : mxIsRealInfOrNaNVector   );
    global mxIsRealOrInfScalar = dlsym(libmx, : mxIsRealOrInfScalar   );
    global mxIsRealOrInfVector = dlsym(libmx, : mxIsRealOrInfVector   );
    global mxIsRealScalar   = dlsym(libmx, : mxIsRealScalar   );
    global mxIsRealVector   = dlsym(libmx, : mxIsRealVector   );
    global mxIsReusable = dlsym(libmx, : mxIsReusable   );
    global mxIsScalar = dlsym(libmx, : mxIsScalar   );
    global mxIsSharedArray   = dlsym(libmx, : mxIsSharedArray   );
    global mxIsSingle = dlsym(libmx, : mxIsSingle   );
    global mxIsSingle2dMatrix = dlsym(libmx, : mxIsSingle2dMatrix   );
    global mxIsSingleVector   = dlsym(libmx, : mxIsSingleVector   );
    global mxIsSparse = dlsym(libmx, : mxIsSparse   );
    global mxIsStruct = dlsym(libmx, : mxIsStruct   );
    global mxIsStructClass   = dlsym(libmx, : mxIsStructClass   );
    global mxIsTemp = dlsym(libmx, : mxIsTemp   );
    global mxIsUint16 = dlsym(libmx, : mxIsUint16   );
    global mxIsUint32 = dlsym(libmx, : mxIsUint32   );
    global mxIsUint64 = dlsym(libmx, : mxIsUint64   );
    global mxIsUint8 = dlsym(libmx, : mxIsUint8   );
    global mxIsVector = dlsym(libmx, : mxIsVector   );
    global mxIsVector2D = dlsym(libmx, : mxIsVector2D   );
    #
    #
    global mxJitIsEmptyMatrix = dlsym(libmx, : mxJitIsEmptyMatrix   );
    global mxCreateStructArray = dlsym(libmx, :mxCreateStructArray);
    global mxCreateString = dlsym(libmx, :mxCreateString);
    global mxGetString = dlsym(libmx, :mxGetString);
    global mxGetM = dlsym(libmx, :mxGetM);
    global mxGetN = dlsym(libmx, :mxGetN);
    global mxSetM = dlsym(libmx, :mxSetM);
    global mxSetN = dlsym(libmx, :mxSetN);    
    global mxGetString = dlsym(libmx, :mxGetString);
    global mxGetPr = dlsym(libmx, :mxGetPr);
    global mxSetPr = dlsym(libmx, :mxSetPr);    
    global mxCreateDoubleMatrix = dlsym(libmx, :mxCreateDoubleMatrix);
    global mxCreateNumericMatrix = dlsym(libmx, :mxCreateNumericMatrix);
    global mxCreateNumericArray = dlsym(libmx, :mxCreateNumericArray);
    global mxCalloc = dlsym(libmx, :mxCalloc);
    global mxMalloc = dlsym(libmx, :mxMalloc);
    global mxFree = dlsym(libmx, :mxFree);
    global mxGetScalar = dlsym(libmx, :mxGetScalar);
    #global mxCreateSingleScalar = dlsym(libmx, :mxCreateSingleScalar);
    global mxCreateDoubleScalar = dlsym(libmx, :mxCreateDoubleScalar);
    #
    #
end
