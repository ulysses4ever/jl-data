include("classes.jl")
include("utils.jl")
include("scientific.jl")
include("random.jl")
include("calculators.jl")
include("trees.jl")
include("workflows.jl")
include("postprocessors.jl")

gm_means = [-0.64757464, -1.54548622, -2.63992556, -0.64757464, -1.5471983 , -0.74028392, -1.54561851]
gm_stds = [0.564, 0.564, 0.564, 0.564, 0.564, 0.564, 0.564]
num_assets = 7
num_sims = 1000
gmfs = [GroundMotionField([loc => rand_lognormal(gm_means[loc], gm_stds[loc])
                           for loc=1:num_assets]) for i=1:num_sims]

vf_imls = [0.05, 0.20, 0.40, 0.60, 0.80, 1.00, 1.20, 1.40, 1.60, 1.80, 2.00]
vf1_mean_lrs = [0.01, 0.04, 0.10, 0.20, 0.33, 0.50, 0.67, 0.80, 0.90, 0.96, 0.99]
vf1_cov_lrs = [0.03, 0.12, 0.24, 0.32, 0.38, 0.40, 0.38, 0.32, 0.24, 0.12, 0.03]

vf = ContinuousVulnerabilityFunction("LN", vf_imls, vf1_mean_lrs, vf1_cov_lrs)

assets = [Asset("a1", 1, "wood", 1, 10000, 1),
          Asset("a2", 2, "wood", 1, 10000, 1),
          Asset("a3", 3, "wood", 1, 10000, 1),
          Asset("a4", 4, "wood", 1, 10000, 1),
          Asset("a5", 5, "wood", 1, 10000, 1),
          Asset("a6", 6, "wood", 1, 10000, 1),
          Asset("a7", 7, "wood", 1, 10000, 1)]

tax_vf_map = ["wood" => vf]


function scenario_risk_asset_eps(gmv::Float64,
                                 vf::VulnerabilityFunction,
                                 ɛ::Float64)
  if typeof(vf) == ContinuousVulnerabilityFunction
    lr_mean = interpolate_vector(vf.imls, vf.mean_lrs, gmv)[1]
    lr_cov = interpolate_vector(vf.imls, vf.cov_lrs, gmv)[1]
    lr_std = lr_mean .* lr_cov

    μ, σ = lognormal_params(lr_mean, lr_std)
    lr = exp(μ + ɛ * σ)
  end
  return lr
end

function scenario_risk_portfolio_eps(assets::Vector{Asset},
                                 gmfs::Vector{GroundMotionField},
                                 tax_vf_map::Dict{ASCIIString, ContinuousVulnerabilityFunction})
  asset_losses = [asset.ref => Float64[] for asset in assets]
  portfolio_losses = Float64[]

  for gmf in gmfs
    pl = 0.0
    ɛ = rand_normal(0, 1)
    for asset in assets
      gmv = gmf.gmvs[asset.loc]
      vf = tax_vf_map[asset.tax]
      lr = scenario_risk_asset_eps(gmv, vf, ɛ)
      l = lr * asset.val
      push!(asset_losses[asset.ref], l)
      pl += l
    end
    push!(portfolio_losses, pl)
  end

  return asset_losses, portfolio_losses
end



input = ScenarioRiskInput(assets, gmfs, tax_vf_map)
asset_losses, portfolio_losses = scenario_risk_portfolio_eps(assets, gmfs, tax_vf_map)

output = scenario_risk_postprocess(asset_losses, portfolio_losses)
asset_losses
portfolio_losses
output.portfolio_loss_moments.mean_l
output.portfolio_loss_moments.std_l
